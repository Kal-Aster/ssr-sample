(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('module'), require('path'), require('fs'), require('assert'), require('os'), require('tty'), require('util'), require('url'), require('buffer'), require('v8'), require('perf_hooks')) :
	typeof define === 'function' && define.amd ? define(['module', 'path', 'fs', 'assert', 'os', 'tty', 'util', 'url', 'buffer', 'v8', 'perf_hooks'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.require$$3$1, global.require$$0$7, global.require$$0$9, global.require$$1$3, global.require$$0$8, global.require$$1$4, global.require$$1$5, global.require$$2$2, global.require$$0$a, global.require$$0$b, global.require$$0$c));
}(this, (function (require$$3$1, require$$0$7, require$$0$9, require$$1$3, require$$0$8, require$$1$4, require$$1$5, require$$2$2, require$$0$a, require$$0$b, require$$0$c) { 'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var require$$3__default = /*#__PURE__*/_interopDefaultLegacy(require$$3$1);
	var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0$7);
	var require$$0__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$0$9);
	var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1$3);
	var require$$0__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$0$8);
	var require$$1__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$1$4);
	var require$$1__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$1$5);
	var require$$2__default = /*#__PURE__*/_interopDefaultLegacy(require$$2$2);
	var require$$0__default$3 = /*#__PURE__*/_interopDefaultLegacy(require$$0$a);
	var require$$0__default$4 = /*#__PURE__*/_interopDefaultLegacy(require$$0$b);
	var require$$0__default$5 = /*#__PURE__*/_interopDefaultLegacy(require$$0$c);

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getAugmentedNamespace(n) {
		if (n.__esModule) return n;
		var a = Object.defineProperty({}, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	function commonjsRequire (path) {
		throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
	}

	var ssr = {};

	var lib$y = {exports: {}};

	var nodeModulesRegexp = /^(?:.*[\\\/])?node_modules(?:[\\\/].*)?$/;

	(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.addHook = addHook;

	var _module = _interopRequireDefault(require$$3__default['default']);

	var _path = _interopRequireDefault(require$$0__default['default']);

	var _nodeModulesRegexp = _interopRequireDefault(nodeModulesRegexp);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* (c) 2015 Ari Porad (@ariporad) <http://ariporad.com>. License: ariporad.mit-license.org */
	// Guard against poorly mocked module constructors.
	const Module = module.constructor.length > 1 ? module.constructor : _module.default;
	const HOOK_RETURNED_NOTHING_ERROR_MESSAGE = '[Pirates] A hook returned a non-string, or nothing at all! This is a' + ' violation of intergalactic law!\n' + '--------------------\n' + 'If you have no idea what this means or what Pirates is, let me explain: ' + 'Pirates is a module that makes is easy to implement require hooks. One of' + " the require hooks you're using uses it. One of these require hooks" + " didn't return anything from it's handler, so we don't know what to" + ' do. You might want to debug this.';

	function shouldCompile(filename, exts, matcher, ignoreNodeModules) {
	  if (typeof filename !== 'string') {
	    return false;
	  }

	  if (exts.indexOf(_path.default.extname(filename)) === -1) {
	    return false;
	  }

	  const resolvedFilename = _path.default.resolve(filename);

	  if (ignoreNodeModules && _nodeModulesRegexp.default.test(resolvedFilename)) {
	    return false;
	  }

	  if (matcher && typeof matcher === 'function') {
	    return !!matcher(resolvedFilename);
	  }

	  return true;
	}
	/**
	 * Add a require hook.
	 *
	 * @param {Function} hook - The hook. Accepts the code of the module and the filename. Required.
	 * @param {Object} [opts] - Options
	 * @param {String[]} [opts.exts=['.js']] - The extensions to hook. Should start with '.' (ex. ['.js']).
	 * @param {Function(path)} [opts.matcher] - A matcher function, will be called with path to a file. Should return truthy if the file should be hooked, falsy otherwise.
	 * @param {Boolean} [opts.ignoreNodeModules=true] - Auto-ignore node_modules. Independent of any matcher.
	 * @returns {Function} revert - Reverts the hooks.
	 */


	function addHook(hook, opts = {}) {
	  let reverted = false;
	  const loaders = [];
	  const oldLoaders = [];
	  let exts; // We need to do this to fix #15. Basically, if you use a non-standard extension (ie. .jsx), then
	  // We modify the .js loader, then use the modified .js loader for as the base for .jsx.
	  // This prevents that.

	  const originalJSLoader = Module._extensions['.js'];
	  const matcher = opts.matcher || null;
	  const ignoreNodeModules = opts.ignoreNodeModules !== false;
	  exts = opts.extensions || opts.exts || opts.extension || opts.ext || ['.js'];

	  if (!Array.isArray(exts)) {
	    exts = [exts];
	  }

	  exts.forEach(ext => {
	    if (typeof ext !== 'string') {
	      throw new TypeError(`Invalid Extension: ${ext}`);
	    }

	    const oldLoader = Module._extensions[ext] || originalJSLoader;
	    oldLoaders[ext] = oldLoader;

	    loaders[ext] = Module._extensions[ext] = function newLoader(mod, filename) {
	      let compile;

	      if (!reverted) {
	        if (shouldCompile(filename, exts, matcher, ignoreNodeModules)) {
	          compile = mod._compile;

	          mod._compile = function _compile(code) {
	            // reset the compile immediately as otherwise we end up having the
	            // compile function being changed even though this loader might be reverted
	            // Not reverting it here leads to long useless compile chains when doing
	            // addHook -> revert -> addHook -> revert -> ...
	            // The compile function is also anyway created new when the loader is called a second time.
	            mod._compile = compile;
	            const newCode = hook(code, filename);

	            if (typeof newCode !== 'string') {
	              throw new Error(HOOK_RETURNED_NOTHING_ERROR_MESSAGE);
	            }

	            return mod._compile(newCode, filename);
	          };
	        }
	      }

	      oldLoader(mod, filename);
	    };
	  });
	  return function revert() {
	    if (reverted) return;
	    reverted = true;
	    exts.forEach(ext => {
	      // if the current loader for the extension is our loader then unregister it and set the oldLoader again
	      // if not we can not do anything as we cannot remove a loader from within the loader-chain
	      if (Module._extensions[ext] === loaders[ext]) {
	        Module._extensions[ext] = oldLoaders[ext];
	      }
	    });
	  };
	}
	}(lib$y, lib$y.exports));

	var main$1 = {};

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics = function(d, b) {
	    extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	    return extendStatics(d, b);
	};

	function __extends$2(d, b) {
	    if (typeof b !== "function" && b !== null)
	        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	    extendStatics(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	var __assign$2 = function() {
	    __assign$2 = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2.apply(this, arguments);
	};

	function __rest(s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	}

	function __decorate(decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	}

	function __param(paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	}

	function __metadata(metadataKey, metadataValue) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
	}

	function __awaiter(thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	}

	function __generator(thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	}

	var __createBinding$2 = Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	});

	function __exportStar(m, o) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding$2(o, m, p);
	}

	function __values(o) {
	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
	    if (m) return m.call(o);
	    if (o && typeof o.length === "number") return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	}

	function __read(o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	}

	/** @deprecated */
	function __spread() {
	    for (var ar = [], i = 0; i < arguments.length; i++)
	        ar = ar.concat(__read(arguments[i]));
	    return ar;
	}

	/** @deprecated */
	function __spreadArrays() {
	    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
	    for (var r = Array(s), k = 0, i = 0; i < il; i++)
	        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
	            r[k] = a[j];
	    return r;
	}

	function __spreadArray$2(to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	}

	function __await(v) {
	    return this instanceof __await ? (this.v = v, this) : new __await(v);
	}

	function __asyncGenerator(thisArg, _arguments, generator) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var g = generator.apply(thisArg, _arguments || []), i, q = [];
	    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
	    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
	    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
	    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
	    function fulfill(value) { resume("next", value); }
	    function reject(value) { resume("throw", value); }
	    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
	}

	function __asyncDelegator(o) {
	    var i, p;
	    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
	    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
	}

	function __asyncValues(o) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var m = o[Symbol.asyncIterator], i;
	    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
	    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
	    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
	}

	function __makeTemplateObject(cooked, raw) {
	    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
	    return cooked;
	}
	var __setModuleDefault$2 = Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	};

	function __importStar$2(mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
	    __setModuleDefault$2(result, mod);
	    return result;
	}

	function __importDefault$8(mod) {
	    return (mod && mod.__esModule) ? mod : { default: mod };
	}

	function __classPrivateFieldGet(receiver, state, kind, f) {
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
	    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
	}

	function __classPrivateFieldSet(receiver, state, value, kind, f) {
	    if (kind === "m") throw new TypeError("Private method is not writable");
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
	    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
	}

	var tslib_es6 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		__extends: __extends$2,
		get __assign () { return __assign$2; },
		__rest: __rest,
		__decorate: __decorate,
		__param: __param,
		__metadata: __metadata,
		__awaiter: __awaiter,
		__generator: __generator,
		__createBinding: __createBinding$2,
		__exportStar: __exportStar,
		__values: __values,
		__read: __read,
		__spread: __spread,
		__spreadArrays: __spreadArrays,
		__spreadArray: __spreadArray$2,
		__await: __await,
		__asyncGenerator: __asyncGenerator,
		__asyncDelegator: __asyncDelegator,
		__asyncValues: __asyncValues,
		__makeTemplateObject: __makeTemplateObject,
		__importStar: __importStar$2,
		__importDefault: __importDefault$8,
		__classPrivateFieldGet: __classPrivateFieldGet,
		__classPrivateFieldSet: __classPrivateFieldSet
	});

	var require$$0$6 = /*@__PURE__*/getAugmentedNamespace(tslib_es6);

	var main = {};

	var fork$1 = {exports: {}};

	var types$9 = {};

	Object.defineProperty(types$9, "__esModule", { value: true });
	types$9.Def = void 0;
	var tslib_1$9 = require$$0$6;
	var Op = Object.prototype;
	var objToStr = Op.toString;
	var hasOwn$3 = Op.hasOwnProperty;
	var BaseType = /** @class */ (function () {
	    function BaseType() {
	    }
	    BaseType.prototype.assert = function (value, deep) {
	        if (!this.check(value, deep)) {
	            var str = shallowStringify(value);
	            throw new Error(str + " does not match type " + this);
	        }
	        return true;
	    };
	    BaseType.prototype.arrayOf = function () {
	        var elemType = this;
	        return new ArrayType(elemType);
	    };
	    return BaseType;
	}());
	var ArrayType = /** @class */ (function (_super) {
	    tslib_1$9.__extends(ArrayType, _super);
	    function ArrayType(elemType) {
	        var _this = _super.call(this) || this;
	        _this.elemType = elemType;
	        _this.kind = "ArrayType";
	        return _this;
	    }
	    ArrayType.prototype.toString = function () {
	        return "[" + this.elemType + "]";
	    };
	    ArrayType.prototype.check = function (value, deep) {
	        var _this = this;
	        return Array.isArray(value) && value.every(function (elem) { return _this.elemType.check(elem, deep); });
	    };
	    return ArrayType;
	}(BaseType));
	var IdentityType = /** @class */ (function (_super) {
	    tslib_1$9.__extends(IdentityType, _super);
	    function IdentityType(value) {
	        var _this = _super.call(this) || this;
	        _this.value = value;
	        _this.kind = "IdentityType";
	        return _this;
	    }
	    IdentityType.prototype.toString = function () {
	        return String(this.value);
	    };
	    IdentityType.prototype.check = function (value, deep) {
	        var result = value === this.value;
	        if (!result && typeof deep === "function") {
	            deep(this, value);
	        }
	        return result;
	    };
	    return IdentityType;
	}(BaseType));
	var ObjectType = /** @class */ (function (_super) {
	    tslib_1$9.__extends(ObjectType, _super);
	    function ObjectType(fields) {
	        var _this = _super.call(this) || this;
	        _this.fields = fields;
	        _this.kind = "ObjectType";
	        return _this;
	    }
	    ObjectType.prototype.toString = function () {
	        return "{ " + this.fields.join(", ") + " }";
	    };
	    ObjectType.prototype.check = function (value, deep) {
	        return (objToStr.call(value) === objToStr.call({}) &&
	            this.fields.every(function (field) {
	                return field.type.check(value[field.name], deep);
	            }));
	    };
	    return ObjectType;
	}(BaseType));
	var OrType = /** @class */ (function (_super) {
	    tslib_1$9.__extends(OrType, _super);
	    function OrType(types) {
	        var _this = _super.call(this) || this;
	        _this.types = types;
	        _this.kind = "OrType";
	        return _this;
	    }
	    OrType.prototype.toString = function () {
	        return this.types.join(" | ");
	    };
	    OrType.prototype.check = function (value, deep) {
	        return this.types.some(function (type) {
	            return type.check(value, deep);
	        });
	    };
	    return OrType;
	}(BaseType));
	var PredicateType = /** @class */ (function (_super) {
	    tslib_1$9.__extends(PredicateType, _super);
	    function PredicateType(name, predicate) {
	        var _this = _super.call(this) || this;
	        _this.name = name;
	        _this.predicate = predicate;
	        _this.kind = "PredicateType";
	        return _this;
	    }
	    PredicateType.prototype.toString = function () {
	        return this.name;
	    };
	    PredicateType.prototype.check = function (value, deep) {
	        var result = this.predicate(value, deep);
	        if (!result && typeof deep === "function") {
	            deep(this, value);
	        }
	        return result;
	    };
	    return PredicateType;
	}(BaseType));
	var Def = /** @class */ (function () {
	    function Def(type, typeName) {
	        this.type = type;
	        this.typeName = typeName;
	        this.baseNames = [];
	        this.ownFields = Object.create(null);
	        // Includes own typeName. Populated during finalization.
	        this.allSupertypes = Object.create(null);
	        // Linear inheritance hierarchy. Populated during finalization.
	        this.supertypeList = [];
	        // Includes inherited fields.
	        this.allFields = Object.create(null);
	        // Non-hidden keys of allFields.
	        this.fieldNames = [];
	        // This property will be overridden as true by individual Def instances
	        // when they are finalized.
	        this.finalized = false;
	        // False by default until .build(...) is called on an instance.
	        this.buildable = false;
	        this.buildParams = [];
	    }
	    Def.prototype.isSupertypeOf = function (that) {
	        if (that instanceof Def) {
	            if (this.finalized !== true ||
	                that.finalized !== true) {
	                throw new Error("");
	            }
	            return hasOwn$3.call(that.allSupertypes, this.typeName);
	        }
	        else {
	            throw new Error(that + " is not a Def");
	        }
	    };
	    Def.prototype.checkAllFields = function (value, deep) {
	        var allFields = this.allFields;
	        if (this.finalized !== true) {
	            throw new Error("" + this.typeName);
	        }
	        function checkFieldByName(name) {
	            var field = allFields[name];
	            var type = field.type;
	            var child = field.getValue(value);
	            return type.check(child, deep);
	        }
	        return value !== null &&
	            typeof value === "object" &&
	            Object.keys(allFields).every(checkFieldByName);
	    };
	    Def.prototype.bases = function () {
	        var supertypeNames = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            supertypeNames[_i] = arguments[_i];
	        }
	        var bases = this.baseNames;
	        if (this.finalized) {
	            if (supertypeNames.length !== bases.length) {
	                throw new Error("");
	            }
	            for (var i = 0; i < supertypeNames.length; i++) {
	                if (supertypeNames[i] !== bases[i]) {
	                    throw new Error("");
	                }
	            }
	            return this;
	        }
	        supertypeNames.forEach(function (baseName) {
	            // This indexOf lookup may be O(n), but the typical number of base
	            // names is very small, and indexOf is a native Array method.
	            if (bases.indexOf(baseName) < 0) {
	                bases.push(baseName);
	            }
	        });
	        return this; // For chaining.
	    };
	    return Def;
	}());
	types$9.Def = Def;
	var Field = /** @class */ (function () {
	    function Field(name, type, defaultFn, hidden) {
	        this.name = name;
	        this.type = type;
	        this.defaultFn = defaultFn;
	        this.hidden = !!hidden;
	    }
	    Field.prototype.toString = function () {
	        return JSON.stringify(this.name) + ": " + this.type;
	    };
	    Field.prototype.getValue = function (obj) {
	        var value = obj[this.name];
	        if (typeof value !== "undefined") {
	            return value;
	        }
	        if (typeof this.defaultFn === "function") {
	            value = this.defaultFn.call(obj);
	        }
	        return value;
	    };
	    return Field;
	}());
	function shallowStringify(value) {
	    if (Array.isArray(value)) {
	        return "[" + value.map(shallowStringify).join(", ") + "]";
	    }
	    if (value && typeof value === "object") {
	        return "{ " + Object.keys(value).map(function (key) {
	            return key + ": " + value[key];
	        }).join(", ") + " }";
	    }
	    return JSON.stringify(value);
	}
	function typesPlugin(_fork) {
	    var Type = {
	        or: function () {
	            var types = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                types[_i] = arguments[_i];
	            }
	            return new OrType(types.map(function (type) { return Type.from(type); }));
	        },
	        from: function (value, name) {
	            if (value instanceof ArrayType ||
	                value instanceof IdentityType ||
	                value instanceof ObjectType ||
	                value instanceof OrType ||
	                value instanceof PredicateType) {
	                return value;
	            }
	            // The Def type is used as a helper for constructing compound
	            // interface types for AST nodes.
	            if (value instanceof Def) {
	                return value.type;
	            }
	            // Support [ElemType] syntax.
	            if (isArray.check(value)) {
	                if (value.length !== 1) {
	                    throw new Error("only one element type is permitted for typed arrays");
	                }
	                return new ArrayType(Type.from(value[0]));
	            }
	            // Support { someField: FieldType, ... } syntax.
	            if (isObject.check(value)) {
	                return new ObjectType(Object.keys(value).map(function (name) {
	                    return new Field(name, Type.from(value[name], name));
	                }));
	            }
	            if (typeof value === "function") {
	                var bicfIndex = builtInCtorFns.indexOf(value);
	                if (bicfIndex >= 0) {
	                    return builtInCtorTypes[bicfIndex];
	                }
	                if (typeof name !== "string") {
	                    throw new Error("missing name");
	                }
	                return new PredicateType(name, value);
	            }
	            // As a last resort, toType returns a type that matches any value that
	            // is === from. This is primarily useful for literal values like
	            // toType(null), but it has the additional advantage of allowing
	            // toType to be a total function.
	            return new IdentityType(value);
	        },
	        // Define a type whose name is registered in a namespace (the defCache) so
	        // that future definitions will return the same type given the same name.
	        // In particular, this system allows for circular and forward definitions.
	        // The Def object d returned from Type.def may be used to configure the
	        // type d.type by calling methods such as d.bases, d.build, and d.field.
	        def: function (typeName) {
	            return hasOwn$3.call(defCache, typeName)
	                ? defCache[typeName]
	                : defCache[typeName] = new DefImpl(typeName);
	        },
	        hasDef: function (typeName) {
	            return hasOwn$3.call(defCache, typeName);
	        }
	    };
	    var builtInCtorFns = [];
	    var builtInCtorTypes = [];
	    function defBuiltInType(name, example) {
	        var objStr = objToStr.call(example);
	        var type = new PredicateType(name, function (value) { return objToStr.call(value) === objStr; });
	        if (example && typeof example.constructor === "function") {
	            builtInCtorFns.push(example.constructor);
	            builtInCtorTypes.push(type);
	        }
	        return type;
	    }
	    // These types check the underlying [[Class]] attribute of the given
	    // value, rather than using the problematic typeof operator. Note however
	    // that no subtyping is considered; so, for instance, isObject.check
	    // returns false for [], /./, new Date, and null.
	    var isString = defBuiltInType("string", "truthy");
	    var isFunction = defBuiltInType("function", function () { });
	    var isArray = defBuiltInType("array", []);
	    var isObject = defBuiltInType("object", {});
	    var isRegExp = defBuiltInType("RegExp", /./);
	    var isDate = defBuiltInType("Date", new Date());
	    var isNumber = defBuiltInType("number", 3);
	    var isBoolean = defBuiltInType("boolean", true);
	    var isNull = defBuiltInType("null", null);
	    var isUndefined = defBuiltInType("undefined", undefined);
	    var builtInTypes = {
	        string: isString,
	        function: isFunction,
	        array: isArray,
	        object: isObject,
	        RegExp: isRegExp,
	        Date: isDate,
	        number: isNumber,
	        boolean: isBoolean,
	        null: isNull,
	        undefined: isUndefined,
	    };
	    // In order to return the same Def instance every time Type.def is called
	    // with a particular name, those instances need to be stored in a cache.
	    var defCache = Object.create(null);
	    function defFromValue(value) {
	        if (value && typeof value === "object") {
	            var type = value.type;
	            if (typeof type === "string" &&
	                hasOwn$3.call(defCache, type)) {
	                var d = defCache[type];
	                if (d.finalized) {
	                    return d;
	                }
	            }
	        }
	        return null;
	    }
	    var DefImpl = /** @class */ (function (_super) {
	        tslib_1$9.__extends(DefImpl, _super);
	        function DefImpl(typeName) {
	            var _this = _super.call(this, new PredicateType(typeName, function (value, deep) { return _this.check(value, deep); }), typeName) || this;
	            return _this;
	        }
	        DefImpl.prototype.check = function (value, deep) {
	            if (this.finalized !== true) {
	                throw new Error("prematurely checking unfinalized type " + this.typeName);
	            }
	            // A Def type can only match an object value.
	            if (value === null || typeof value !== "object") {
	                return false;
	            }
	            var vDef = defFromValue(value);
	            if (!vDef) {
	                // If we couldn't infer the Def associated with the given value,
	                // and we expected it to be a SourceLocation or a Position, it was
	                // probably just missing a "type" field (because Esprima does not
	                // assign a type property to such nodes). Be optimistic and let
	                // this.checkAllFields make the final decision.
	                if (this.typeName === "SourceLocation" ||
	                    this.typeName === "Position") {
	                    return this.checkAllFields(value, deep);
	                }
	                // Calling this.checkAllFields for any other type of node is both
	                // bad for performance and way too forgiving.
	                return false;
	            }
	            // If checking deeply and vDef === this, then we only need to call
	            // checkAllFields once. Calling checkAllFields is too strict when deep
	            // is false, because then we only care about this.isSupertypeOf(vDef).
	            if (deep && vDef === this) {
	                return this.checkAllFields(value, deep);
	            }
	            // In most cases we rely exclusively on isSupertypeOf to make O(1)
	            // subtyping determinations. This suffices in most situations outside
	            // of unit tests, since interface conformance is checked whenever new
	            // instances are created using builder functions.
	            if (!this.isSupertypeOf(vDef)) {
	                return false;
	            }
	            // The exception is when deep is true; then, we recursively check all
	            // fields.
	            if (!deep) {
	                return true;
	            }
	            // Use the more specific Def (vDef) to perform the deep check, but
	            // shallow-check fields defined by the less specific Def (this).
	            return vDef.checkAllFields(value, deep)
	                && this.checkAllFields(value, false);
	        };
	        DefImpl.prototype.build = function () {
	            var _this = this;
	            var buildParams = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                buildParams[_i] = arguments[_i];
	            }
	            // Calling Def.prototype.build multiple times has the effect of merely
	            // redefining this property.
	            this.buildParams = buildParams;
	            if (this.buildable) {
	                // If this Def is already buildable, update self.buildParams and
	                // continue using the old builder function.
	                return this;
	            }
	            // Every buildable type will have its "type" field filled in
	            // automatically. This includes types that are not subtypes of Node,
	            // like SourceLocation, but that seems harmless (TODO?).
	            this.field("type", String, function () { return _this.typeName; });
	            // Override Dp.buildable for this Def instance.
	            this.buildable = true;
	            var addParam = function (built, param, arg, isArgAvailable) {
	                if (hasOwn$3.call(built, param))
	                    return;
	                var all = _this.allFields;
	                if (!hasOwn$3.call(all, param)) {
	                    throw new Error("" + param);
	                }
	                var field = all[param];
	                var type = field.type;
	                var value;
	                if (isArgAvailable) {
	                    value = arg;
	                }
	                else if (field.defaultFn) {
	                    // Expose the partially-built object to the default
	                    // function as its `this` object.
	                    value = field.defaultFn.call(built);
	                }
	                else {
	                    var message = "no value or default function given for field " +
	                        JSON.stringify(param) + " of " + _this.typeName + "(" +
	                        _this.buildParams.map(function (name) {
	                            return all[name];
	                        }).join(", ") + ")";
	                    throw new Error(message);
	                }
	                if (!type.check(value)) {
	                    throw new Error(shallowStringify(value) +
	                        " does not match field " + field +
	                        " of type " + _this.typeName);
	                }
	                built[param] = value;
	            };
	            // Calling the builder function will construct an instance of the Def,
	            // with positional arguments mapped to the fields original passed to .build.
	            // If not enough arguments are provided, the default value for the remaining fields
	            // will be used.
	            var builder = function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                var argc = args.length;
	                if (!_this.finalized) {
	                    throw new Error("attempting to instantiate unfinalized type " +
	                        _this.typeName);
	                }
	                var built = Object.create(nodePrototype);
	                _this.buildParams.forEach(function (param, i) {
	                    if (i < argc) {
	                        addParam(built, param, args[i], true);
	                    }
	                    else {
	                        addParam(built, param, null, false);
	                    }
	                });
	                Object.keys(_this.allFields).forEach(function (param) {
	                    // Use the default value.
	                    addParam(built, param, null, false);
	                });
	                // Make sure that the "type" field was filled automatically.
	                if (built.type !== _this.typeName) {
	                    throw new Error("");
	                }
	                return built;
	            };
	            // Calling .from on the builder function will construct an instance of the Def,
	            // using field values from the passed object. For fields missing from the passed object,
	            // their default value will be used.
	            builder.from = function (obj) {
	                if (!_this.finalized) {
	                    throw new Error("attempting to instantiate unfinalized type " +
	                        _this.typeName);
	                }
	                var built = Object.create(nodePrototype);
	                Object.keys(_this.allFields).forEach(function (param) {
	                    if (hasOwn$3.call(obj, param)) {
	                        addParam(built, param, obj[param], true);
	                    }
	                    else {
	                        addParam(built, param, null, false);
	                    }
	                });
	                // Make sure that the "type" field was filled automatically.
	                if (built.type !== _this.typeName) {
	                    throw new Error("");
	                }
	                return built;
	            };
	            Object.defineProperty(builders, getBuilderName(this.typeName), {
	                enumerable: true,
	                value: builder
	            });
	            return this;
	        };
	        // The reason fields are specified using .field(...) instead of an object
	        // literal syntax is somewhat subtle: the object literal syntax would
	        // support only one key and one value, but with .field(...) we can pass
	        // any number of arguments to specify the field.
	        DefImpl.prototype.field = function (name, type, defaultFn, hidden) {
	            if (this.finalized) {
	                console.error("Ignoring attempt to redefine field " +
	                    JSON.stringify(name) + " of finalized type " +
	                    JSON.stringify(this.typeName));
	                return this;
	            }
	            this.ownFields[name] = new Field(name, Type.from(type), defaultFn, hidden);
	            return this; // For chaining.
	        };
	        DefImpl.prototype.finalize = function () {
	            var _this = this;
	            // It's not an error to finalize a type more than once, but only the
	            // first call to .finalize does anything.
	            if (!this.finalized) {
	                var allFields = this.allFields;
	                var allSupertypes = this.allSupertypes;
	                this.baseNames.forEach(function (name) {
	                    var def = defCache[name];
	                    if (def instanceof Def) {
	                        def.finalize();
	                        extend(allFields, def.allFields);
	                        extend(allSupertypes, def.allSupertypes);
	                    }
	                    else {
	                        var message = "unknown supertype name " +
	                            JSON.stringify(name) +
	                            " for subtype " +
	                            JSON.stringify(_this.typeName);
	                        throw new Error(message);
	                    }
	                });
	                // TODO Warn if fields are overridden with incompatible types.
	                extend(allFields, this.ownFields);
	                allSupertypes[this.typeName] = this;
	                this.fieldNames.length = 0;
	                for (var fieldName in allFields) {
	                    if (hasOwn$3.call(allFields, fieldName) &&
	                        !allFields[fieldName].hidden) {
	                        this.fieldNames.push(fieldName);
	                    }
	                }
	                // Types are exported only once they have been finalized.
	                Object.defineProperty(namedTypes, this.typeName, {
	                    enumerable: true,
	                    value: this.type
	                });
	                this.finalized = true;
	                // A linearization of the inheritance hierarchy.
	                populateSupertypeList(this.typeName, this.supertypeList);
	                if (this.buildable &&
	                    this.supertypeList.lastIndexOf("Expression") >= 0) {
	                    wrapExpressionBuilderWithStatement(this.typeName);
	                }
	            }
	        };
	        return DefImpl;
	    }(Def));
	    // Note that the list returned by this function is a copy of the internal
	    // supertypeList, *without* the typeName itself as the first element.
	    function getSupertypeNames(typeName) {
	        if (!hasOwn$3.call(defCache, typeName)) {
	            throw new Error("");
	        }
	        var d = defCache[typeName];
	        if (d.finalized !== true) {
	            throw new Error("");
	        }
	        return d.supertypeList.slice(1);
	    }
	    // Returns an object mapping from every known type in the defCache to the
	    // most specific supertype whose name is an own property of the candidates
	    // object.
	    function computeSupertypeLookupTable(candidates) {
	        var table = {};
	        var typeNames = Object.keys(defCache);
	        var typeNameCount = typeNames.length;
	        for (var i = 0; i < typeNameCount; ++i) {
	            var typeName = typeNames[i];
	            var d = defCache[typeName];
	            if (d.finalized !== true) {
	                throw new Error("" + typeName);
	            }
	            for (var j = 0; j < d.supertypeList.length; ++j) {
	                var superTypeName = d.supertypeList[j];
	                if (hasOwn$3.call(candidates, superTypeName)) {
	                    table[typeName] = superTypeName;
	                    break;
	                }
	            }
	        }
	        return table;
	    }
	    var builders = Object.create(null);
	    // This object is used as prototype for any node created by a builder.
	    var nodePrototype = {};
	    // Call this function to define a new method to be shared by all AST
	    // nodes. The replaced method (if any) is returned for easy wrapping.
	    function defineMethod(name, func) {
	        var old = nodePrototype[name];
	        // Pass undefined as func to delete nodePrototype[name].
	        if (isUndefined.check(func)) {
	            delete nodePrototype[name];
	        }
	        else {
	            isFunction.assert(func);
	            Object.defineProperty(nodePrototype, name, {
	                enumerable: true,
	                configurable: true,
	                value: func
	            });
	        }
	        return old;
	    }
	    function getBuilderName(typeName) {
	        return typeName.replace(/^[A-Z]+/, function (upperCasePrefix) {
	            var len = upperCasePrefix.length;
	            switch (len) {
	                case 0: return "";
	                // If there's only one initial capital letter, just lower-case it.
	                case 1: return upperCasePrefix.toLowerCase();
	                default:
	                    // If there's more than one initial capital letter, lower-case
	                    // all but the last one, so that XMLDefaultDeclaration (for
	                    // example) becomes xmlDefaultDeclaration.
	                    return upperCasePrefix.slice(0, len - 1).toLowerCase() +
	                        upperCasePrefix.charAt(len - 1);
	            }
	        });
	    }
	    function getStatementBuilderName(typeName) {
	        typeName = getBuilderName(typeName);
	        return typeName.replace(/(Expression)?$/, "Statement");
	    }
	    var namedTypes = {};
	    // Like Object.keys, but aware of what fields each AST type should have.
	    function getFieldNames(object) {
	        var d = defFromValue(object);
	        if (d) {
	            return d.fieldNames.slice(0);
	        }
	        if ("type" in object) {
	            throw new Error("did not recognize object of type " +
	                JSON.stringify(object.type));
	        }
	        return Object.keys(object);
	    }
	    // Get the value of an object property, taking object.type and default
	    // functions into account.
	    function getFieldValue(object, fieldName) {
	        var d = defFromValue(object);
	        if (d) {
	            var field = d.allFields[fieldName];
	            if (field) {
	                return field.getValue(object);
	            }
	        }
	        return object && object[fieldName];
	    }
	    // Iterate over all defined fields of an object, including those missing
	    // or undefined, passing each field name and effective value (as returned
	    // by getFieldValue) to the callback. If the object has no corresponding
	    // Def, the callback will never be called.
	    function eachField(object, callback, context) {
	        getFieldNames(object).forEach(function (name) {
	            callback.call(this, name, getFieldValue(object, name));
	        }, context);
	    }
	    // Similar to eachField, except that iteration stops as soon as the
	    // callback returns a truthy value. Like Array.prototype.some, the final
	    // result is either true or false to indicates whether the callback
	    // returned true for any element or not.
	    function someField(object, callback, context) {
	        return getFieldNames(object).some(function (name) {
	            return callback.call(this, name, getFieldValue(object, name));
	        }, context);
	    }
	    // Adds an additional builder for Expression subtypes
	    // that wraps the built Expression in an ExpressionStatements.
	    function wrapExpressionBuilderWithStatement(typeName) {
	        var wrapperName = getStatementBuilderName(typeName);
	        // skip if the builder already exists
	        if (builders[wrapperName])
	            return;
	        // the builder function to wrap with builders.ExpressionStatement
	        var wrapped = builders[getBuilderName(typeName)];
	        // skip if there is nothing to wrap
	        if (!wrapped)
	            return;
	        var builder = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            return builders.expressionStatement(wrapped.apply(builders, args));
	        };
	        builder.from = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            return builders.expressionStatement(wrapped.from.apply(builders, args));
	        };
	        builders[wrapperName] = builder;
	    }
	    function populateSupertypeList(typeName, list) {
	        list.length = 0;
	        list.push(typeName);
	        var lastSeen = Object.create(null);
	        for (var pos = 0; pos < list.length; ++pos) {
	            typeName = list[pos];
	            var d = defCache[typeName];
	            if (d.finalized !== true) {
	                throw new Error("");
	            }
	            // If we saw typeName earlier in the breadth-first traversal,
	            // delete the last-seen occurrence.
	            if (hasOwn$3.call(lastSeen, typeName)) {
	                delete list[lastSeen[typeName]];
	            }
	            // Record the new index of the last-seen occurrence of typeName.
	            lastSeen[typeName] = pos;
	            // Enqueue the base names of this type.
	            list.push.apply(list, d.baseNames);
	        }
	        // Compaction loop to remove array holes.
	        for (var to = 0, from = to, len = list.length; from < len; ++from) {
	            if (hasOwn$3.call(list, from)) {
	                list[to++] = list[from];
	            }
	        }
	        list.length = to;
	    }
	    function extend(into, from) {
	        Object.keys(from).forEach(function (name) {
	            into[name] = from[name];
	        });
	        return into;
	    }
	    function finalize() {
	        Object.keys(defCache).forEach(function (name) {
	            defCache[name].finalize();
	        });
	    }
	    return {
	        Type: Type,
	        builtInTypes: builtInTypes,
	        getSupertypeNames: getSupertypeNames,
	        computeSupertypeLookupTable: computeSupertypeLookupTable,
	        builders: builders,
	        defineMethod: defineMethod,
	        getBuilderName: getBuilderName,
	        getStatementBuilderName: getStatementBuilderName,
	        namedTypes: namedTypes,
	        getFieldNames: getFieldNames,
	        getFieldValue: getFieldValue,
	        eachField: eachField,
	        someField: someField,
	        finalize: finalize,
	    };
	}
	types$9.default = typesPlugin;

	var pathVisitor = {exports: {}};

	var nodePath = {exports: {}};

	var path$3 = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var types_1 = tslib_1.__importDefault(types$9);
	var Op = Object.prototype;
	var hasOwn = Op.hasOwnProperty;
	function pathPlugin(fork) {
	    var types = fork.use(types_1.default);
	    var isArray = types.builtInTypes.array;
	    var isNumber = types.builtInTypes.number;
	    var Path = function Path(value, parentPath, name) {
	        if (!(this instanceof Path)) {
	            throw new Error("Path constructor cannot be invoked without 'new'");
	        }
	        if (parentPath) {
	            if (!(parentPath instanceof Path)) {
	                throw new Error("");
	            }
	        }
	        else {
	            parentPath = null;
	            name = null;
	        }
	        // The value encapsulated by this Path, generally equal to
	        // parentPath.value[name] if we have a parentPath.
	        this.value = value;
	        // The immediate parent Path of this Path.
	        this.parentPath = parentPath;
	        // The name of the property of parentPath.value through which this
	        // Path's value was reached.
	        this.name = name;
	        // Calling path.get("child") multiple times always returns the same
	        // child Path object, for both performance and consistency reasons.
	        this.__childCache = null;
	    };
	    var Pp = Path.prototype;
	    function getChildCache(path) {
	        // Lazily create the child cache. This also cheapens cache
	        // invalidation, since you can just reset path.__childCache to null.
	        return path.__childCache || (path.__childCache = Object.create(null));
	    }
	    function getChildPath(path, name) {
	        var cache = getChildCache(path);
	        var actualChildValue = path.getValueProperty(name);
	        var childPath = cache[name];
	        if (!hasOwn.call(cache, name) ||
	            // Ensure consistency between cache and reality.
	            childPath.value !== actualChildValue) {
	            childPath = cache[name] = new path.constructor(actualChildValue, path, name);
	        }
	        return childPath;
	    }
	    // This method is designed to be overridden by subclasses that need to
	    // handle missing properties, etc.
	    Pp.getValueProperty = function getValueProperty(name) {
	        return this.value[name];
	    };
	    Pp.get = function get() {
	        var names = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            names[_i] = arguments[_i];
	        }
	        var path = this;
	        var count = names.length;
	        for (var i = 0; i < count; ++i) {
	            path = getChildPath(path, names[i]);
	        }
	        return path;
	    };
	    Pp.each = function each(callback, context) {
	        var childPaths = [];
	        var len = this.value.length;
	        var i = 0;
	        // Collect all the original child paths before invoking the callback.
	        for (var i = 0; i < len; ++i) {
	            if (hasOwn.call(this.value, i)) {
	                childPaths[i] = this.get(i);
	            }
	        }
	        // Invoke the callback on just the original child paths, regardless of
	        // any modifications made to the array by the callback. I chose these
	        // semantics over cleverly invoking the callback on new elements because
	        // this way is much easier to reason about.
	        context = context || this;
	        for (i = 0; i < len; ++i) {
	            if (hasOwn.call(childPaths, i)) {
	                callback.call(context, childPaths[i]);
	            }
	        }
	    };
	    Pp.map = function map(callback, context) {
	        var result = [];
	        this.each(function (childPath) {
	            result.push(callback.call(this, childPath));
	        }, context);
	        return result;
	    };
	    Pp.filter = function filter(callback, context) {
	        var result = [];
	        this.each(function (childPath) {
	            if (callback.call(this, childPath)) {
	                result.push(childPath);
	            }
	        }, context);
	        return result;
	    };
	    function emptyMoves() { }
	    function getMoves(path, offset, start, end) {
	        isArray.assert(path.value);
	        if (offset === 0) {
	            return emptyMoves;
	        }
	        var length = path.value.length;
	        if (length < 1) {
	            return emptyMoves;
	        }
	        var argc = arguments.length;
	        if (argc === 2) {
	            start = 0;
	            end = length;
	        }
	        else if (argc === 3) {
	            start = Math.max(start, 0);
	            end = length;
	        }
	        else {
	            start = Math.max(start, 0);
	            end = Math.min(end, length);
	        }
	        isNumber.assert(start);
	        isNumber.assert(end);
	        var moves = Object.create(null);
	        var cache = getChildCache(path);
	        for (var i = start; i < end; ++i) {
	            if (hasOwn.call(path.value, i)) {
	                var childPath = path.get(i);
	                if (childPath.name !== i) {
	                    throw new Error("");
	                }
	                var newIndex = i + offset;
	                childPath.name = newIndex;
	                moves[newIndex] = childPath;
	                delete cache[i];
	            }
	        }
	        delete cache.length;
	        return function () {
	            for (var newIndex in moves) {
	                var childPath = moves[newIndex];
	                if (childPath.name !== +newIndex) {
	                    throw new Error("");
	                }
	                cache[newIndex] = childPath;
	                path.value[newIndex] = childPath.value;
	            }
	        };
	    }
	    Pp.shift = function shift() {
	        var move = getMoves(this, -1);
	        var result = this.value.shift();
	        move();
	        return result;
	    };
	    Pp.unshift = function unshift() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var move = getMoves(this, args.length);
	        var result = this.value.unshift.apply(this.value, args);
	        move();
	        return result;
	    };
	    Pp.push = function push() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        isArray.assert(this.value);
	        delete getChildCache(this).length;
	        return this.value.push.apply(this.value, args);
	    };
	    Pp.pop = function pop() {
	        isArray.assert(this.value);
	        var cache = getChildCache(this);
	        delete cache[this.value.length - 1];
	        delete cache.length;
	        return this.value.pop();
	    };
	    Pp.insertAt = function insertAt(index) {
	        var argc = arguments.length;
	        var move = getMoves(this, argc - 1, index);
	        if (move === emptyMoves && argc <= 1) {
	            return this;
	        }
	        index = Math.max(index, 0);
	        for (var i = 1; i < argc; ++i) {
	            this.value[index + i - 1] = arguments[i];
	        }
	        move();
	        return this;
	    };
	    Pp.insertBefore = function insertBefore() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var pp = this.parentPath;
	        var argc = args.length;
	        var insertAtArgs = [this.name];
	        for (var i = 0; i < argc; ++i) {
	            insertAtArgs.push(args[i]);
	        }
	        return pp.insertAt.apply(pp, insertAtArgs);
	    };
	    Pp.insertAfter = function insertAfter() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var pp = this.parentPath;
	        var argc = args.length;
	        var insertAtArgs = [this.name + 1];
	        for (var i = 0; i < argc; ++i) {
	            insertAtArgs.push(args[i]);
	        }
	        return pp.insertAt.apply(pp, insertAtArgs);
	    };
	    function repairRelationshipWithParent(path) {
	        if (!(path instanceof Path)) {
	            throw new Error("");
	        }
	        var pp = path.parentPath;
	        if (!pp) {
	            // Orphan paths have no relationship to repair.
	            return path;
	        }
	        var parentValue = pp.value;
	        var parentCache = getChildCache(pp);
	        // Make sure parentCache[path.name] is populated.
	        if (parentValue[path.name] === path.value) {
	            parentCache[path.name] = path;
	        }
	        else if (isArray.check(parentValue)) {
	            // Something caused path.name to become out of date, so attempt to
	            // recover by searching for path.value in parentValue.
	            var i = parentValue.indexOf(path.value);
	            if (i >= 0) {
	                parentCache[path.name = i] = path;
	            }
	        }
	        else {
	            // If path.value disagrees with parentValue[path.name], and
	            // path.name is not an array index, let path.value become the new
	            // parentValue[path.name] and update parentCache accordingly.
	            parentValue[path.name] = path.value;
	            parentCache[path.name] = path;
	        }
	        if (parentValue[path.name] !== path.value) {
	            throw new Error("");
	        }
	        if (path.parentPath.get(path.name) !== path) {
	            throw new Error("");
	        }
	        return path;
	    }
	    Pp.replace = function replace(replacement) {
	        var results = [];
	        var parentValue = this.parentPath.value;
	        var parentCache = getChildCache(this.parentPath);
	        var count = arguments.length;
	        repairRelationshipWithParent(this);
	        if (isArray.check(parentValue)) {
	            var originalLength = parentValue.length;
	            var move = getMoves(this.parentPath, count - 1, this.name + 1);
	            var spliceArgs = [this.name, 1];
	            for (var i = 0; i < count; ++i) {
	                spliceArgs.push(arguments[i]);
	            }
	            var splicedOut = parentValue.splice.apply(parentValue, spliceArgs);
	            if (splicedOut[0] !== this.value) {
	                throw new Error("");
	            }
	            if (parentValue.length !== (originalLength - 1 + count)) {
	                throw new Error("");
	            }
	            move();
	            if (count === 0) {
	                delete this.value;
	                delete parentCache[this.name];
	                this.__childCache = null;
	            }
	            else {
	                if (parentValue[this.name] !== replacement) {
	                    throw new Error("");
	                }
	                if (this.value !== replacement) {
	                    this.value = replacement;
	                    this.__childCache = null;
	                }
	                for (i = 0; i < count; ++i) {
	                    results.push(this.parentPath.get(this.name + i));
	                }
	                if (results[0] !== this) {
	                    throw new Error("");
	                }
	            }
	        }
	        else if (count === 1) {
	            if (this.value !== replacement) {
	                this.__childCache = null;
	            }
	            this.value = parentValue[this.name] = replacement;
	            results.push(this);
	        }
	        else if (count === 0) {
	            delete parentValue[this.name];
	            delete this.value;
	            this.__childCache = null;
	            // Leave this path cached as parentCache[this.name], even though
	            // it no longer has a value defined.
	        }
	        else {
	            throw new Error("Could not replace path");
	        }
	        return results;
	    };
	    return Path;
	}
	exports.default = pathPlugin;
	module.exports = exports["default"];
	}(path$3, path$3.exports));

	var scope$2 = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var types_1 = tslib_1.__importDefault(types$9);
	var hasOwn = Object.prototype.hasOwnProperty;
	function scopePlugin(fork) {
	    var types = fork.use(types_1.default);
	    var Type = types.Type;
	    var namedTypes = types.namedTypes;
	    var Node = namedTypes.Node;
	    var Expression = namedTypes.Expression;
	    var isArray = types.builtInTypes.array;
	    var b = types.builders;
	    var Scope = function Scope(path, parentScope) {
	        if (!(this instanceof Scope)) {
	            throw new Error("Scope constructor cannot be invoked without 'new'");
	        }
	        ScopeType.assert(path.value);
	        var depth;
	        if (parentScope) {
	            if (!(parentScope instanceof Scope)) {
	                throw new Error("");
	            }
	            depth = parentScope.depth + 1;
	        }
	        else {
	            parentScope = null;
	            depth = 0;
	        }
	        Object.defineProperties(this, {
	            path: { value: path },
	            node: { value: path.value },
	            isGlobal: { value: !parentScope, enumerable: true },
	            depth: { value: depth },
	            parent: { value: parentScope },
	            bindings: { value: {} },
	            types: { value: {} },
	        });
	    };
	    var scopeTypes = [
	        // Program nodes introduce global scopes.
	        namedTypes.Program,
	        // Function is the supertype of FunctionExpression,
	        // FunctionDeclaration, ArrowExpression, etc.
	        namedTypes.Function,
	        // In case you didn't know, the caught parameter shadows any variable
	        // of the same name in an outer scope.
	        namedTypes.CatchClause
	    ];
	    var ScopeType = Type.or.apply(Type, scopeTypes);
	    Scope.isEstablishedBy = function (node) {
	        return ScopeType.check(node);
	    };
	    var Sp = Scope.prototype;
	    // Will be overridden after an instance lazily calls scanScope.
	    Sp.didScan = false;
	    Sp.declares = function (name) {
	        this.scan();
	        return hasOwn.call(this.bindings, name);
	    };
	    Sp.declaresType = function (name) {
	        this.scan();
	        return hasOwn.call(this.types, name);
	    };
	    Sp.declareTemporary = function (prefix) {
	        if (prefix) {
	            if (!/^[a-z$_]/i.test(prefix)) {
	                throw new Error("");
	            }
	        }
	        else {
	            prefix = "t$";
	        }
	        // Include this.depth in the name to make sure the name does not
	        // collide with any variables in nested/enclosing scopes.
	        prefix += this.depth.toString(36) + "$";
	        this.scan();
	        var index = 0;
	        while (this.declares(prefix + index)) {
	            ++index;
	        }
	        var name = prefix + index;
	        return this.bindings[name] = types.builders.identifier(name);
	    };
	    Sp.injectTemporary = function (identifier, init) {
	        identifier || (identifier = this.declareTemporary());
	        var bodyPath = this.path.get("body");
	        if (namedTypes.BlockStatement.check(bodyPath.value)) {
	            bodyPath = bodyPath.get("body");
	        }
	        bodyPath.unshift(b.variableDeclaration("var", [b.variableDeclarator(identifier, init || null)]));
	        return identifier;
	    };
	    Sp.scan = function (force) {
	        if (force || !this.didScan) {
	            for (var name in this.bindings) {
	                // Empty out this.bindings, just in cases.
	                delete this.bindings[name];
	            }
	            scanScope(this.path, this.bindings, this.types);
	            this.didScan = true;
	        }
	    };
	    Sp.getBindings = function () {
	        this.scan();
	        return this.bindings;
	    };
	    Sp.getTypes = function () {
	        this.scan();
	        return this.types;
	    };
	    function scanScope(path, bindings, scopeTypes) {
	        var node = path.value;
	        ScopeType.assert(node);
	        if (namedTypes.CatchClause.check(node)) {
	            // A catch clause establishes a new scope but the only variable
	            // bound in that scope is the catch parameter. Any other
	            // declarations create bindings in the outer scope.
	            var param = path.get("param");
	            if (param.value) {
	                addPattern(param, bindings);
	            }
	        }
	        else {
	            recursiveScanScope(path, bindings, scopeTypes);
	        }
	    }
	    function recursiveScanScope(path, bindings, scopeTypes) {
	        var node = path.value;
	        if (path.parent &&
	            namedTypes.FunctionExpression.check(path.parent.node) &&
	            path.parent.node.id) {
	            addPattern(path.parent.get("id"), bindings);
	        }
	        if (!node) ;
	        else if (isArray.check(node)) {
	            path.each(function (childPath) {
	                recursiveScanChild(childPath, bindings, scopeTypes);
	            });
	        }
	        else if (namedTypes.Function.check(node)) {
	            path.get("params").each(function (paramPath) {
	                addPattern(paramPath, bindings);
	            });
	            recursiveScanChild(path.get("body"), bindings, scopeTypes);
	        }
	        else if ((namedTypes.TypeAlias && namedTypes.TypeAlias.check(node)) ||
	            (namedTypes.InterfaceDeclaration && namedTypes.InterfaceDeclaration.check(node)) ||
	            (namedTypes.TSTypeAliasDeclaration && namedTypes.TSTypeAliasDeclaration.check(node)) ||
	            (namedTypes.TSInterfaceDeclaration && namedTypes.TSInterfaceDeclaration.check(node))) {
	            addTypePattern(path.get("id"), scopeTypes);
	        }
	        else if (namedTypes.VariableDeclarator.check(node)) {
	            addPattern(path.get("id"), bindings);
	            recursiveScanChild(path.get("init"), bindings, scopeTypes);
	        }
	        else if (node.type === "ImportSpecifier" ||
	            node.type === "ImportNamespaceSpecifier" ||
	            node.type === "ImportDefaultSpecifier") {
	            addPattern(
	            // Esprima used to use the .name field to refer to the local
	            // binding identifier for ImportSpecifier nodes, but .id for
	            // ImportNamespaceSpecifier and ImportDefaultSpecifier nodes.
	            // ESTree/Acorn/ESpree use .local for all three node types.
	            path.get(node.local ? "local" :
	                node.name ? "name" : "id"), bindings);
	        }
	        else if (Node.check(node) && !Expression.check(node)) {
	            types.eachField(node, function (name, child) {
	                var childPath = path.get(name);
	                if (!pathHasValue(childPath, child)) {
	                    throw new Error("");
	                }
	                recursiveScanChild(childPath, bindings, scopeTypes);
	            });
	        }
	    }
	    function pathHasValue(path, value) {
	        if (path.value === value) {
	            return true;
	        }
	        // Empty arrays are probably produced by defaults.emptyArray, in which
	        // case is makes sense to regard them as equivalent, if not ===.
	        if (Array.isArray(path.value) &&
	            path.value.length === 0 &&
	            Array.isArray(value) &&
	            value.length === 0) {
	            return true;
	        }
	        return false;
	    }
	    function recursiveScanChild(path, bindings, scopeTypes) {
	        var node = path.value;
	        if (!node || Expression.check(node)) ;
	        else if (namedTypes.FunctionDeclaration.check(node) &&
	            node.id !== null) {
	            addPattern(path.get("id"), bindings);
	        }
	        else if (namedTypes.ClassDeclaration &&
	            namedTypes.ClassDeclaration.check(node)) {
	            addPattern(path.get("id"), bindings);
	        }
	        else if (ScopeType.check(node)) {
	            if (namedTypes.CatchClause.check(node) &&
	                // TODO Broaden this to accept any pattern.
	                namedTypes.Identifier.check(node.param)) {
	                var catchParamName = node.param.name;
	                var hadBinding = hasOwn.call(bindings, catchParamName);
	                // Any declarations that occur inside the catch body that do
	                // not have the same name as the catch parameter should count
	                // as bindings in the outer scope.
	                recursiveScanScope(path.get("body"), bindings, scopeTypes);
	                // If a new binding matching the catch parameter name was
	                // created while scanning the catch body, ignore it because it
	                // actually refers to the catch parameter and not the outer
	                // scope that we're currently scanning.
	                if (!hadBinding) {
	                    delete bindings[catchParamName];
	                }
	            }
	        }
	        else {
	            recursiveScanScope(path, bindings, scopeTypes);
	        }
	    }
	    function addPattern(patternPath, bindings) {
	        var pattern = patternPath.value;
	        namedTypes.Pattern.assert(pattern);
	        if (namedTypes.Identifier.check(pattern)) {
	            if (hasOwn.call(bindings, pattern.name)) {
	                bindings[pattern.name].push(patternPath);
	            }
	            else {
	                bindings[pattern.name] = [patternPath];
	            }
	        }
	        else if (namedTypes.AssignmentPattern &&
	            namedTypes.AssignmentPattern.check(pattern)) {
	            addPattern(patternPath.get('left'), bindings);
	        }
	        else if (namedTypes.ObjectPattern &&
	            namedTypes.ObjectPattern.check(pattern)) {
	            patternPath.get('properties').each(function (propertyPath) {
	                var property = propertyPath.value;
	                if (namedTypes.Pattern.check(property)) {
	                    addPattern(propertyPath, bindings);
	                }
	                else if (namedTypes.Property.check(property)) {
	                    addPattern(propertyPath.get('value'), bindings);
	                }
	                else if (namedTypes.SpreadProperty &&
	                    namedTypes.SpreadProperty.check(property)) {
	                    addPattern(propertyPath.get('argument'), bindings);
	                }
	            });
	        }
	        else if (namedTypes.ArrayPattern &&
	            namedTypes.ArrayPattern.check(pattern)) {
	            patternPath.get('elements').each(function (elementPath) {
	                var element = elementPath.value;
	                if (namedTypes.Pattern.check(element)) {
	                    addPattern(elementPath, bindings);
	                }
	                else if (namedTypes.SpreadElement &&
	                    namedTypes.SpreadElement.check(element)) {
	                    addPattern(elementPath.get("argument"), bindings);
	                }
	            });
	        }
	        else if (namedTypes.PropertyPattern &&
	            namedTypes.PropertyPattern.check(pattern)) {
	            addPattern(patternPath.get('pattern'), bindings);
	        }
	        else if ((namedTypes.SpreadElementPattern &&
	            namedTypes.SpreadElementPattern.check(pattern)) ||
	            (namedTypes.RestElement &&
	                namedTypes.RestElement.check(pattern)) ||
	            (namedTypes.SpreadPropertyPattern &&
	                namedTypes.SpreadPropertyPattern.check(pattern))) {
	            addPattern(patternPath.get('argument'), bindings);
	        }
	    }
	    function addTypePattern(patternPath, types) {
	        var pattern = patternPath.value;
	        namedTypes.Pattern.assert(pattern);
	        if (namedTypes.Identifier.check(pattern)) {
	            if (hasOwn.call(types, pattern.name)) {
	                types[pattern.name].push(patternPath);
	            }
	            else {
	                types[pattern.name] = [patternPath];
	            }
	        }
	    }
	    Sp.lookup = function (name) {
	        for (var scope = this; scope; scope = scope.parent)
	            if (scope.declares(name))
	                break;
	        return scope;
	    };
	    Sp.lookupType = function (name) {
	        for (var scope = this; scope; scope = scope.parent)
	            if (scope.declaresType(name))
	                break;
	        return scope;
	    };
	    Sp.getGlobalScope = function () {
	        var scope = this;
	        while (!scope.isGlobal)
	            scope = scope.parent;
	        return scope;
	    };
	    return Scope;
	}
	exports.default = scopePlugin;
	module.exports = exports["default"];
	}(scope$2, scope$2.exports));

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var types_1 = tslib_1.__importDefault(types$9);
	var path_1 = tslib_1.__importDefault(path$3.exports);
	var scope_1 = tslib_1.__importDefault(scope$2.exports);
	function nodePathPlugin(fork) {
	    var types = fork.use(types_1.default);
	    var n = types.namedTypes;
	    var b = types.builders;
	    var isNumber = types.builtInTypes.number;
	    var isArray = types.builtInTypes.array;
	    var Path = fork.use(path_1.default);
	    var Scope = fork.use(scope_1.default);
	    var NodePath = function NodePath(value, parentPath, name) {
	        if (!(this instanceof NodePath)) {
	            throw new Error("NodePath constructor cannot be invoked without 'new'");
	        }
	        Path.call(this, value, parentPath, name);
	    };
	    var NPp = NodePath.prototype = Object.create(Path.prototype, {
	        constructor: {
	            value: NodePath,
	            enumerable: false,
	            writable: true,
	            configurable: true
	        }
	    });
	    Object.defineProperties(NPp, {
	        node: {
	            get: function () {
	                Object.defineProperty(this, "node", {
	                    configurable: true,
	                    value: this._computeNode()
	                });
	                return this.node;
	            }
	        },
	        parent: {
	            get: function () {
	                Object.defineProperty(this, "parent", {
	                    configurable: true,
	                    value: this._computeParent()
	                });
	                return this.parent;
	            }
	        },
	        scope: {
	            get: function () {
	                Object.defineProperty(this, "scope", {
	                    configurable: true,
	                    value: this._computeScope()
	                });
	                return this.scope;
	            }
	        }
	    });
	    NPp.replace = function () {
	        delete this.node;
	        delete this.parent;
	        delete this.scope;
	        return Path.prototype.replace.apply(this, arguments);
	    };
	    NPp.prune = function () {
	        var remainingNodePath = this.parent;
	        this.replace();
	        return cleanUpNodesAfterPrune(remainingNodePath);
	    };
	    // The value of the first ancestor Path whose value is a Node.
	    NPp._computeNode = function () {
	        var value = this.value;
	        if (n.Node.check(value)) {
	            return value;
	        }
	        var pp = this.parentPath;
	        return pp && pp.node || null;
	    };
	    // The first ancestor Path whose value is a Node distinct from this.node.
	    NPp._computeParent = function () {
	        var value = this.value;
	        var pp = this.parentPath;
	        if (!n.Node.check(value)) {
	            while (pp && !n.Node.check(pp.value)) {
	                pp = pp.parentPath;
	            }
	            if (pp) {
	                pp = pp.parentPath;
	            }
	        }
	        while (pp && !n.Node.check(pp.value)) {
	            pp = pp.parentPath;
	        }
	        return pp || null;
	    };
	    // The closest enclosing scope that governs this node.
	    NPp._computeScope = function () {
	        var value = this.value;
	        var pp = this.parentPath;
	        var scope = pp && pp.scope;
	        if (n.Node.check(value) &&
	            Scope.isEstablishedBy(value)) {
	            scope = new Scope(this, scope);
	        }
	        return scope || null;
	    };
	    NPp.getValueProperty = function (name) {
	        return types.getFieldValue(this.value, name);
	    };
	    /**
	     * Determine whether this.node needs to be wrapped in parentheses in order
	     * for a parser to reproduce the same local AST structure.
	     *
	     * For instance, in the expression `(1 + 2) * 3`, the BinaryExpression
	     * whose operator is "+" needs parentheses, because `1 + 2 * 3` would
	     * parse differently.
	     *
	     * If assumeExpressionContext === true, we don't worry about edge cases
	     * like an anonymous FunctionExpression appearing lexically first in its
	     * enclosing statement and thus needing parentheses to avoid being parsed
	     * as a FunctionDeclaration with a missing name.
	     */
	    NPp.needsParens = function (assumeExpressionContext) {
	        var pp = this.parentPath;
	        if (!pp) {
	            return false;
	        }
	        var node = this.value;
	        // Only expressions need parentheses.
	        if (!n.Expression.check(node)) {
	            return false;
	        }
	        // Identifiers never need parentheses.
	        if (node.type === "Identifier") {
	            return false;
	        }
	        while (!n.Node.check(pp.value)) {
	            pp = pp.parentPath;
	            if (!pp) {
	                return false;
	            }
	        }
	        var parent = pp.value;
	        switch (node.type) {
	            case "UnaryExpression":
	            case "SpreadElement":
	            case "SpreadProperty":
	                return parent.type === "MemberExpression"
	                    && this.name === "object"
	                    && parent.object === node;
	            case "BinaryExpression":
	            case "LogicalExpression":
	                switch (parent.type) {
	                    case "CallExpression":
	                        return this.name === "callee"
	                            && parent.callee === node;
	                    case "UnaryExpression":
	                    case "SpreadElement":
	                    case "SpreadProperty":
	                        return true;
	                    case "MemberExpression":
	                        return this.name === "object"
	                            && parent.object === node;
	                    case "BinaryExpression":
	                    case "LogicalExpression": {
	                        var n_1 = node;
	                        var po = parent.operator;
	                        var pp_1 = PRECEDENCE[po];
	                        var no = n_1.operator;
	                        var np = PRECEDENCE[no];
	                        if (pp_1 > np) {
	                            return true;
	                        }
	                        if (pp_1 === np && this.name === "right") {
	                            if (parent.right !== n_1) {
	                                throw new Error("Nodes must be equal");
	                            }
	                            return true;
	                        }
	                    }
	                    default:
	                        return false;
	                }
	            case "SequenceExpression":
	                switch (parent.type) {
	                    case "ForStatement":
	                        // Although parentheses wouldn't hurt around sequence
	                        // expressions in the head of for loops, traditional style
	                        // dictates that e.g. i++, j++ should not be wrapped with
	                        // parentheses.
	                        return false;
	                    case "ExpressionStatement":
	                        return this.name !== "expression";
	                    default:
	                        // Otherwise err on the side of overparenthesization, adding
	                        // explicit exceptions above if this proves overzealous.
	                        return true;
	                }
	            case "YieldExpression":
	                switch (parent.type) {
	                    case "BinaryExpression":
	                    case "LogicalExpression":
	                    case "UnaryExpression":
	                    case "SpreadElement":
	                    case "SpreadProperty":
	                    case "CallExpression":
	                    case "MemberExpression":
	                    case "NewExpression":
	                    case "ConditionalExpression":
	                    case "YieldExpression":
	                        return true;
	                    default:
	                        return false;
	                }
	            case "Literal":
	                return parent.type === "MemberExpression"
	                    && isNumber.check(node.value)
	                    && this.name === "object"
	                    && parent.object === node;
	            case "AssignmentExpression":
	            case "ConditionalExpression":
	                switch (parent.type) {
	                    case "UnaryExpression":
	                    case "SpreadElement":
	                    case "SpreadProperty":
	                    case "BinaryExpression":
	                    case "LogicalExpression":
	                        return true;
	                    case "CallExpression":
	                        return this.name === "callee"
	                            && parent.callee === node;
	                    case "ConditionalExpression":
	                        return this.name === "test"
	                            && parent.test === node;
	                    case "MemberExpression":
	                        return this.name === "object"
	                            && parent.object === node;
	                    default:
	                        return false;
	                }
	            default:
	                if (parent.type === "NewExpression" &&
	                    this.name === "callee" &&
	                    parent.callee === node) {
	                    return containsCallExpression(node);
	                }
	        }
	        if (assumeExpressionContext !== true &&
	            !this.canBeFirstInStatement() &&
	            this.firstInStatement())
	            return true;
	        return false;
	    };
	    function isBinary(node) {
	        return n.BinaryExpression.check(node)
	            || n.LogicalExpression.check(node);
	    }
	    var PRECEDENCE = {};
	    [["||"],
	        ["&&"],
	        ["|"],
	        ["^"],
	        ["&"],
	        ["==", "===", "!=", "!=="],
	        ["<", ">", "<=", ">=", "in", "instanceof"],
	        [">>", "<<", ">>>"],
	        ["+", "-"],
	        ["*", "/", "%"]
	    ].forEach(function (tier, i) {
	        tier.forEach(function (op) {
	            PRECEDENCE[op] = i;
	        });
	    });
	    function containsCallExpression(node) {
	        if (n.CallExpression.check(node)) {
	            return true;
	        }
	        if (isArray.check(node)) {
	            return node.some(containsCallExpression);
	        }
	        if (n.Node.check(node)) {
	            return types.someField(node, function (_name, child) {
	                return containsCallExpression(child);
	            });
	        }
	        return false;
	    }
	    NPp.canBeFirstInStatement = function () {
	        var node = this.node;
	        return !n.FunctionExpression.check(node)
	            && !n.ObjectExpression.check(node);
	    };
	    NPp.firstInStatement = function () {
	        return firstInStatement(this);
	    };
	    function firstInStatement(path) {
	        for (var node, parent; path.parent; path = path.parent) {
	            node = path.node;
	            parent = path.parent.node;
	            if (n.BlockStatement.check(parent) &&
	                path.parent.name === "body" &&
	                path.name === 0) {
	                if (parent.body[0] !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                return true;
	            }
	            if (n.ExpressionStatement.check(parent) &&
	                path.name === "expression") {
	                if (parent.expression !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                return true;
	            }
	            if (n.SequenceExpression.check(parent) &&
	                path.parent.name === "expressions" &&
	                path.name === 0) {
	                if (parent.expressions[0] !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	            if (n.CallExpression.check(parent) &&
	                path.name === "callee") {
	                if (parent.callee !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	            if (n.MemberExpression.check(parent) &&
	                path.name === "object") {
	                if (parent.object !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	            if (n.ConditionalExpression.check(parent) &&
	                path.name === "test") {
	                if (parent.test !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	            if (isBinary(parent) &&
	                path.name === "left") {
	                if (parent.left !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	            if (n.UnaryExpression.check(parent) &&
	                !parent.prefix &&
	                path.name === "argument") {
	                if (parent.argument !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	            return false;
	        }
	        return true;
	    }
	    /**
	     * Pruning certain nodes will result in empty or incomplete nodes, here we clean those nodes up.
	     */
	    function cleanUpNodesAfterPrune(remainingNodePath) {
	        if (n.VariableDeclaration.check(remainingNodePath.node)) {
	            var declarations = remainingNodePath.get('declarations').value;
	            if (!declarations || declarations.length === 0) {
	                return remainingNodePath.prune();
	            }
	        }
	        else if (n.ExpressionStatement.check(remainingNodePath.node)) {
	            if (!remainingNodePath.get('expression').value) {
	                return remainingNodePath.prune();
	            }
	        }
	        else if (n.IfStatement.check(remainingNodePath.node)) {
	            cleanUpIfStatementAfterPrune(remainingNodePath);
	        }
	        return remainingNodePath;
	    }
	    function cleanUpIfStatementAfterPrune(ifStatement) {
	        var testExpression = ifStatement.get('test').value;
	        var alternate = ifStatement.get('alternate').value;
	        var consequent = ifStatement.get('consequent').value;
	        if (!consequent && !alternate) {
	            var testExpressionStatement = b.expressionStatement(testExpression);
	            ifStatement.replace(testExpressionStatement);
	        }
	        else if (!consequent && alternate) {
	            var negatedTestExpression = b.unaryExpression('!', testExpression, true);
	            if (n.UnaryExpression.check(testExpression) && testExpression.operator === '!') {
	                negatedTestExpression = testExpression.argument;
	            }
	            ifStatement.get("test").replace(negatedTestExpression);
	            ifStatement.get("consequent").replace(alternate);
	            ifStatement.get("alternate").replace();
	        }
	    }
	    return NodePath;
	}
	exports.default = nodePathPlugin;
	module.exports = exports["default"];
	}(nodePath, nodePath.exports));

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var types_1 = tslib_1.__importDefault(types$9);
	var node_path_1 = tslib_1.__importDefault(nodePath.exports);
	var hasOwn = Object.prototype.hasOwnProperty;
	function pathVisitorPlugin(fork) {
	    var types = fork.use(types_1.default);
	    var NodePath = fork.use(node_path_1.default);
	    var isArray = types.builtInTypes.array;
	    var isObject = types.builtInTypes.object;
	    var isFunction = types.builtInTypes.function;
	    var undefined$1;
	    var PathVisitor = function PathVisitor() {
	        if (!(this instanceof PathVisitor)) {
	            throw new Error("PathVisitor constructor cannot be invoked without 'new'");
	        }
	        // Permanent state.
	        this._reusableContextStack = [];
	        this._methodNameTable = computeMethodNameTable(this);
	        this._shouldVisitComments =
	            hasOwn.call(this._methodNameTable, "Block") ||
	                hasOwn.call(this._methodNameTable, "Line");
	        this.Context = makeContextConstructor(this);
	        // State reset every time PathVisitor.prototype.visit is called.
	        this._visiting = false;
	        this._changeReported = false;
	    };
	    function computeMethodNameTable(visitor) {
	        var typeNames = Object.create(null);
	        for (var methodName in visitor) {
	            if (/^visit[A-Z]/.test(methodName)) {
	                typeNames[methodName.slice("visit".length)] = true;
	            }
	        }
	        var supertypeTable = types.computeSupertypeLookupTable(typeNames);
	        var methodNameTable = Object.create(null);
	        var typeNameKeys = Object.keys(supertypeTable);
	        var typeNameCount = typeNameKeys.length;
	        for (var i = 0; i < typeNameCount; ++i) {
	            var typeName = typeNameKeys[i];
	            methodName = "visit" + supertypeTable[typeName];
	            if (isFunction.check(visitor[methodName])) {
	                methodNameTable[typeName] = methodName;
	            }
	        }
	        return methodNameTable;
	    }
	    PathVisitor.fromMethodsObject = function fromMethodsObject(methods) {
	        if (methods instanceof PathVisitor) {
	            return methods;
	        }
	        if (!isObject.check(methods)) {
	            // An empty visitor?
	            return new PathVisitor;
	        }
	        var Visitor = function Visitor() {
	            if (!(this instanceof Visitor)) {
	                throw new Error("Visitor constructor cannot be invoked without 'new'");
	            }
	            PathVisitor.call(this);
	        };
	        var Vp = Visitor.prototype = Object.create(PVp);
	        Vp.constructor = Visitor;
	        extend(Vp, methods);
	        extend(Visitor, PathVisitor);
	        isFunction.assert(Visitor.fromMethodsObject);
	        isFunction.assert(Visitor.visit);
	        return new Visitor;
	    };
	    function extend(target, source) {
	        for (var property in source) {
	            if (hasOwn.call(source, property)) {
	                target[property] = source[property];
	            }
	        }
	        return target;
	    }
	    PathVisitor.visit = function visit(node, methods) {
	        return PathVisitor.fromMethodsObject(methods).visit(node);
	    };
	    var PVp = PathVisitor.prototype;
	    PVp.visit = function () {
	        if (this._visiting) {
	            throw new Error("Recursively calling visitor.visit(path) resets visitor state. " +
	                "Try this.visit(path) or this.traverse(path) instead.");
	        }
	        // Private state that needs to be reset before every traversal.
	        this._visiting = true;
	        this._changeReported = false;
	        this._abortRequested = false;
	        var argc = arguments.length;
	        var args = new Array(argc);
	        for (var i = 0; i < argc; ++i) {
	            args[i] = arguments[i];
	        }
	        if (!(args[0] instanceof NodePath)) {
	            args[0] = new NodePath({ root: args[0] }).get("root");
	        }
	        // Called with the same arguments as .visit.
	        this.reset.apply(this, args);
	        var didNotThrow;
	        try {
	            var root = this.visitWithoutReset(args[0]);
	            didNotThrow = true;
	        }
	        finally {
	            this._visiting = false;
	            if (!didNotThrow && this._abortRequested) {
	                // If this.visitWithoutReset threw an exception and
	                // this._abortRequested was set to true, return the root of
	                // the AST instead of letting the exception propagate, so that
	                // client code does not have to provide a try-catch block to
	                // intercept the AbortRequest exception.  Other kinds of
	                // exceptions will propagate without being intercepted and
	                // rethrown by a catch block, so their stacks will accurately
	                // reflect the original throwing context.
	                return args[0].value;
	            }
	        }
	        return root;
	    };
	    PVp.AbortRequest = function AbortRequest() { };
	    PVp.abort = function () {
	        var visitor = this;
	        visitor._abortRequested = true;
	        var request = new visitor.AbortRequest();
	        // If you decide to catch this exception and stop it from propagating,
	        // make sure to call its cancel method to avoid silencing other
	        // exceptions that might be thrown later in the traversal.
	        request.cancel = function () {
	            visitor._abortRequested = false;
	        };
	        throw request;
	    };
	    PVp.reset = function (_path /*, additional arguments */) {
	        // Empty stub; may be reassigned or overridden by subclasses.
	    };
	    PVp.visitWithoutReset = function (path) {
	        if (this instanceof this.Context) {
	            // Since this.Context.prototype === this, there's a chance we
	            // might accidentally call context.visitWithoutReset. If that
	            // happens, re-invoke the method against context.visitor.
	            return this.visitor.visitWithoutReset(path);
	        }
	        if (!(path instanceof NodePath)) {
	            throw new Error("");
	        }
	        var value = path.value;
	        var methodName = value &&
	            typeof value === "object" &&
	            typeof value.type === "string" &&
	            this._methodNameTable[value.type];
	        if (methodName) {
	            var context = this.acquireContext(path);
	            try {
	                return context.invokeVisitorMethod(methodName);
	            }
	            finally {
	                this.releaseContext(context);
	            }
	        }
	        else {
	            // If there was no visitor method to call, visit the children of
	            // this node generically.
	            return visitChildren(path, this);
	        }
	    };
	    function visitChildren(path, visitor) {
	        if (!(path instanceof NodePath)) {
	            throw new Error("");
	        }
	        if (!(visitor instanceof PathVisitor)) {
	            throw new Error("");
	        }
	        var value = path.value;
	        if (isArray.check(value)) {
	            path.each(visitor.visitWithoutReset, visitor);
	        }
	        else if (!isObject.check(value)) ;
	        else {
	            var childNames = types.getFieldNames(value);
	            // The .comments field of the Node type is hidden, so we only
	            // visit it if the visitor defines visitBlock or visitLine, and
	            // value.comments is defined.
	            if (visitor._shouldVisitComments &&
	                value.comments &&
	                childNames.indexOf("comments") < 0) {
	                childNames.push("comments");
	            }
	            var childCount = childNames.length;
	            var childPaths = [];
	            for (var i = 0; i < childCount; ++i) {
	                var childName = childNames[i];
	                if (!hasOwn.call(value, childName)) {
	                    value[childName] = types.getFieldValue(value, childName);
	                }
	                childPaths.push(path.get(childName));
	            }
	            for (var i = 0; i < childCount; ++i) {
	                visitor.visitWithoutReset(childPaths[i]);
	            }
	        }
	        return path.value;
	    }
	    PVp.acquireContext = function (path) {
	        if (this._reusableContextStack.length === 0) {
	            return new this.Context(path);
	        }
	        return this._reusableContextStack.pop().reset(path);
	    };
	    PVp.releaseContext = function (context) {
	        if (!(context instanceof this.Context)) {
	            throw new Error("");
	        }
	        this._reusableContextStack.push(context);
	        context.currentPath = null;
	    };
	    PVp.reportChanged = function () {
	        this._changeReported = true;
	    };
	    PVp.wasChangeReported = function () {
	        return this._changeReported;
	    };
	    function makeContextConstructor(visitor) {
	        function Context(path) {
	            if (!(this instanceof Context)) {
	                throw new Error("");
	            }
	            if (!(this instanceof PathVisitor)) {
	                throw new Error("");
	            }
	            if (!(path instanceof NodePath)) {
	                throw new Error("");
	            }
	            Object.defineProperty(this, "visitor", {
	                value: visitor,
	                writable: false,
	                enumerable: true,
	                configurable: false
	            });
	            this.currentPath = path;
	            this.needToCallTraverse = true;
	            Object.seal(this);
	        }
	        if (!(visitor instanceof PathVisitor)) {
	            throw new Error("");
	        }
	        // Note that the visitor object is the prototype of Context.prototype,
	        // so all visitor methods are inherited by context objects.
	        var Cp = Context.prototype = Object.create(visitor);
	        Cp.constructor = Context;
	        extend(Cp, sharedContextProtoMethods);
	        return Context;
	    }
	    // Every PathVisitor has a different this.Context constructor and
	    // this.Context.prototype object, but those prototypes can all use the
	    // same reset, invokeVisitorMethod, and traverse function objects.
	    var sharedContextProtoMethods = Object.create(null);
	    sharedContextProtoMethods.reset =
	        function reset(path) {
	            if (!(this instanceof this.Context)) {
	                throw new Error("");
	            }
	            if (!(path instanceof NodePath)) {
	                throw new Error("");
	            }
	            this.currentPath = path;
	            this.needToCallTraverse = true;
	            return this;
	        };
	    sharedContextProtoMethods.invokeVisitorMethod =
	        function invokeVisitorMethod(methodName) {
	            if (!(this instanceof this.Context)) {
	                throw new Error("");
	            }
	            if (!(this.currentPath instanceof NodePath)) {
	                throw new Error("");
	            }
	            var result = this.visitor[methodName].call(this, this.currentPath);
	            if (result === false) {
	                // Visitor methods return false to indicate that they have handled
	                // their own traversal needs, and we should not complain if
	                // this.needToCallTraverse is still true.
	                this.needToCallTraverse = false;
	            }
	            else if (result !== undefined$1) {
	                // Any other non-undefined value returned from the visitor method
	                // is interpreted as a replacement value.
	                this.currentPath = this.currentPath.replace(result)[0];
	                if (this.needToCallTraverse) {
	                    // If this.traverse still hasn't been called, visit the
	                    // children of the replacement node.
	                    this.traverse(this.currentPath);
	                }
	            }
	            if (this.needToCallTraverse !== false) {
	                throw new Error("Must either call this.traverse or return false in " + methodName);
	            }
	            var path = this.currentPath;
	            return path && path.value;
	        };
	    sharedContextProtoMethods.traverse =
	        function traverse(path, newVisitor) {
	            if (!(this instanceof this.Context)) {
	                throw new Error("");
	            }
	            if (!(path instanceof NodePath)) {
	                throw new Error("");
	            }
	            if (!(this.currentPath instanceof NodePath)) {
	                throw new Error("");
	            }
	            this.needToCallTraverse = false;
	            return visitChildren(path, PathVisitor.fromMethodsObject(newVisitor || this.visitor));
	        };
	    sharedContextProtoMethods.visit =
	        function visit(path, newVisitor) {
	            if (!(this instanceof this.Context)) {
	                throw new Error("");
	            }
	            if (!(path instanceof NodePath)) {
	                throw new Error("");
	            }
	            if (!(this.currentPath instanceof NodePath)) {
	                throw new Error("");
	            }
	            this.needToCallTraverse = false;
	            return PathVisitor.fromMethodsObject(newVisitor || this.visitor).visitWithoutReset(path);
	        };
	    sharedContextProtoMethods.reportChanged = function reportChanged() {
	        this.visitor.reportChanged();
	    };
	    sharedContextProtoMethods.abort = function abort() {
	        this.needToCallTraverse = false;
	        this.visitor.abort();
	    };
	    return PathVisitor;
	}
	exports.default = pathVisitorPlugin;
	module.exports = exports["default"];
	}(pathVisitor, pathVisitor.exports));

	var equiv$1 = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var types_1 = tslib_1.__importDefault(types$9);
	function default_1(fork) {
	    var types = fork.use(types_1.default);
	    var getFieldNames = types.getFieldNames;
	    var getFieldValue = types.getFieldValue;
	    var isArray = types.builtInTypes.array;
	    var isObject = types.builtInTypes.object;
	    var isDate = types.builtInTypes.Date;
	    var isRegExp = types.builtInTypes.RegExp;
	    var hasOwn = Object.prototype.hasOwnProperty;
	    function astNodesAreEquivalent(a, b, problemPath) {
	        if (isArray.check(problemPath)) {
	            problemPath.length = 0;
	        }
	        else {
	            problemPath = null;
	        }
	        return areEquivalent(a, b, problemPath);
	    }
	    astNodesAreEquivalent.assert = function (a, b) {
	        var problemPath = [];
	        if (!astNodesAreEquivalent(a, b, problemPath)) {
	            if (problemPath.length === 0) {
	                if (a !== b) {
	                    throw new Error("Nodes must be equal");
	                }
	            }
	            else {
	                throw new Error("Nodes differ in the following path: " +
	                    problemPath.map(subscriptForProperty).join(""));
	            }
	        }
	    };
	    function subscriptForProperty(property) {
	        if (/[_$a-z][_$a-z0-9]*/i.test(property)) {
	            return "." + property;
	        }
	        return "[" + JSON.stringify(property) + "]";
	    }
	    function areEquivalent(a, b, problemPath) {
	        if (a === b) {
	            return true;
	        }
	        if (isArray.check(a)) {
	            return arraysAreEquivalent(a, b, problemPath);
	        }
	        if (isObject.check(a)) {
	            return objectsAreEquivalent(a, b, problemPath);
	        }
	        if (isDate.check(a)) {
	            return isDate.check(b) && (+a === +b);
	        }
	        if (isRegExp.check(a)) {
	            return isRegExp.check(b) && (a.source === b.source &&
	                a.global === b.global &&
	                a.multiline === b.multiline &&
	                a.ignoreCase === b.ignoreCase);
	        }
	        return a == b;
	    }
	    function arraysAreEquivalent(a, b, problemPath) {
	        isArray.assert(a);
	        var aLength = a.length;
	        if (!isArray.check(b) || b.length !== aLength) {
	            if (problemPath) {
	                problemPath.push("length");
	            }
	            return false;
	        }
	        for (var i = 0; i < aLength; ++i) {
	            if (problemPath) {
	                problemPath.push(i);
	            }
	            if (i in a !== i in b) {
	                return false;
	            }
	            if (!areEquivalent(a[i], b[i], problemPath)) {
	                return false;
	            }
	            if (problemPath) {
	                var problemPathTail = problemPath.pop();
	                if (problemPathTail !== i) {
	                    throw new Error("" + problemPathTail);
	                }
	            }
	        }
	        return true;
	    }
	    function objectsAreEquivalent(a, b, problemPath) {
	        isObject.assert(a);
	        if (!isObject.check(b)) {
	            return false;
	        }
	        // Fast path for a common property of AST nodes.
	        if (a.type !== b.type) {
	            if (problemPath) {
	                problemPath.push("type");
	            }
	            return false;
	        }
	        var aNames = getFieldNames(a);
	        var aNameCount = aNames.length;
	        var bNames = getFieldNames(b);
	        var bNameCount = bNames.length;
	        if (aNameCount === bNameCount) {
	            for (var i = 0; i < aNameCount; ++i) {
	                var name = aNames[i];
	                var aChild = getFieldValue(a, name);
	                var bChild = getFieldValue(b, name);
	                if (problemPath) {
	                    problemPath.push(name);
	                }
	                if (!areEquivalent(aChild, bChild, problemPath)) {
	                    return false;
	                }
	                if (problemPath) {
	                    var problemPathTail = problemPath.pop();
	                    if (problemPathTail !== name) {
	                        throw new Error("" + problemPathTail);
	                    }
	                }
	            }
	            return true;
	        }
	        if (!problemPath) {
	            return false;
	        }
	        // Since aNameCount !== bNameCount, we need to find some name that's
	        // missing in aNames but present in bNames, or vice-versa.
	        var seenNames = Object.create(null);
	        for (i = 0; i < aNameCount; ++i) {
	            seenNames[aNames[i]] = true;
	        }
	        for (i = 0; i < bNameCount; ++i) {
	            name = bNames[i];
	            if (!hasOwn.call(seenNames, name)) {
	                problemPath.push(name);
	                return false;
	            }
	            delete seenNames[name];
	        }
	        for (name in seenNames) {
	            problemPath.push(name);
	            break;
	        }
	        return false;
	    }
	    return astNodesAreEquivalent;
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(equiv$1, equiv$1.exports));

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var types_1 = tslib_1.__importDefault(types$9);
	var path_visitor_1 = tslib_1.__importDefault(pathVisitor.exports);
	var equiv_1 = tslib_1.__importDefault(equiv$1.exports);
	var path_1 = tslib_1.__importDefault(path$3.exports);
	var node_path_1 = tslib_1.__importDefault(nodePath.exports);
	function default_1(defs) {
	    var fork = createFork();
	    var types = fork.use(types_1.default);
	    defs.forEach(fork.use);
	    types.finalize();
	    var PathVisitor = fork.use(path_visitor_1.default);
	    return {
	        Type: types.Type,
	        builtInTypes: types.builtInTypes,
	        namedTypes: types.namedTypes,
	        builders: types.builders,
	        defineMethod: types.defineMethod,
	        getFieldNames: types.getFieldNames,
	        getFieldValue: types.getFieldValue,
	        eachField: types.eachField,
	        someField: types.someField,
	        getSupertypeNames: types.getSupertypeNames,
	        getBuilderName: types.getBuilderName,
	        astNodesAreEquivalent: fork.use(equiv_1.default),
	        finalize: types.finalize,
	        Path: fork.use(path_1.default),
	        NodePath: fork.use(node_path_1.default),
	        PathVisitor: PathVisitor,
	        use: fork.use,
	        visit: PathVisitor.visit,
	    };
	}
	exports.default = default_1;
	function createFork() {
	    var used = [];
	    var usedResult = [];
	    function use(plugin) {
	        var idx = used.indexOf(plugin);
	        if (idx === -1) {
	            idx = used.length;
	            used.push(plugin);
	            usedResult[idx] = plugin(fork);
	        }
	        return usedResult[idx];
	    }
	    var fork = { use: use };
	    return fork;
	}
	module.exports = exports["default"];
	}(fork$1, fork$1.exports));

	var core$1 = {exports: {}};

	var coreOperators = {};

	Object.defineProperty(coreOperators, "__esModule", { value: true });
	coreOperators.LogicalOperators = coreOperators.AssignmentOperators = coreOperators.BinaryOperators = void 0;
	coreOperators.BinaryOperators = [
	    "==", "!=", "===", "!==",
	    "<", "<=", ">", ">=",
	    "<<", ">>", ">>>",
	    "+", "-", "*", "/", "%",
	    "&",
	    "|", "^", "in",
	    "instanceof",
	];
	coreOperators.AssignmentOperators = [
	    "=", "+=", "-=", "*=", "/=", "%=",
	    "<<=", ">>=", ">>>=",
	    "|=", "^=", "&=",
	];
	coreOperators.LogicalOperators = [
	    "||", "&&",
	];

	var shared = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var types_1 = tslib_1.__importDefault(types$9);
	function default_1(fork) {
	    var types = fork.use(types_1.default);
	    var Type = types.Type;
	    var builtin = types.builtInTypes;
	    var isNumber = builtin.number;
	    // An example of constructing a new type with arbitrary constraints from
	    // an existing type.
	    function geq(than) {
	        return Type.from(function (value) { return isNumber.check(value) && value >= than; }, isNumber + " >= " + than);
	    }
	    // Default value-returning functions that may optionally be passed as a
	    // third argument to Def.prototype.field.
	    var defaults = {
	        // Functions were used because (among other reasons) that's the most
	        // elegant way to allow for the emptyArray one always to give a new
	        // array instance.
	        "null": function () { return null; },
	        "emptyArray": function () { return []; },
	        "false": function () { return false; },
	        "true": function () { return true; },
	        "undefined": function () { },
	        "use strict": function () { return "use strict"; }
	    };
	    var naiveIsPrimitive = Type.or(builtin.string, builtin.number, builtin.boolean, builtin.null, builtin.undefined);
	    var isPrimitive = Type.from(function (value) {
	        if (value === null)
	            return true;
	        var type = typeof value;
	        if (type === "object" ||
	            type === "function") {
	            return false;
	        }
	        return true;
	    }, naiveIsPrimitive.toString());
	    return {
	        geq: geq,
	        defaults: defaults,
	        isPrimitive: isPrimitive,
	    };
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(shared, shared.exports));

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var core_operators_1 = coreOperators;
	var types_1 = tslib_1.__importDefault(types$9);
	var shared_1 = tslib_1.__importDefault(shared.exports);
	function default_1(fork) {
	    var types = fork.use(types_1.default);
	    var Type = types.Type;
	    var def = Type.def;
	    var or = Type.or;
	    var shared = fork.use(shared_1.default);
	    var defaults = shared.defaults;
	    var geq = shared.geq;
	    // Abstract supertype of all syntactic entities that are allowed to have a
	    // .loc field.
	    def("Printable")
	        .field("loc", or(def("SourceLocation"), null), defaults["null"], true);
	    def("Node")
	        .bases("Printable")
	        .field("type", String)
	        .field("comments", or([def("Comment")], null), defaults["null"], true);
	    def("SourceLocation")
	        .field("start", def("Position"))
	        .field("end", def("Position"))
	        .field("source", or(String, null), defaults["null"]);
	    def("Position")
	        .field("line", geq(1))
	        .field("column", geq(0));
	    def("File")
	        .bases("Node")
	        .build("program", "name")
	        .field("program", def("Program"))
	        .field("name", or(String, null), defaults["null"]);
	    def("Program")
	        .bases("Node")
	        .build("body")
	        .field("body", [def("Statement")]);
	    def("Function")
	        .bases("Node")
	        .field("id", or(def("Identifier"), null), defaults["null"])
	        .field("params", [def("Pattern")])
	        .field("body", def("BlockStatement"))
	        .field("generator", Boolean, defaults["false"])
	        .field("async", Boolean, defaults["false"]);
	    def("Statement").bases("Node");
	    // The empty .build() here means that an EmptyStatement can be constructed
	    // (i.e. it's not abstract) but that it needs no arguments.
	    def("EmptyStatement").bases("Statement").build();
	    def("BlockStatement")
	        .bases("Statement")
	        .build("body")
	        .field("body", [def("Statement")]);
	    // TODO Figure out how to silently coerce Expressions to
	    // ExpressionStatements where a Statement was expected.
	    def("ExpressionStatement")
	        .bases("Statement")
	        .build("expression")
	        .field("expression", def("Expression"));
	    def("IfStatement")
	        .bases("Statement")
	        .build("test", "consequent", "alternate")
	        .field("test", def("Expression"))
	        .field("consequent", def("Statement"))
	        .field("alternate", or(def("Statement"), null), defaults["null"]);
	    def("LabeledStatement")
	        .bases("Statement")
	        .build("label", "body")
	        .field("label", def("Identifier"))
	        .field("body", def("Statement"));
	    def("BreakStatement")
	        .bases("Statement")
	        .build("label")
	        .field("label", or(def("Identifier"), null), defaults["null"]);
	    def("ContinueStatement")
	        .bases("Statement")
	        .build("label")
	        .field("label", or(def("Identifier"), null), defaults["null"]);
	    def("WithStatement")
	        .bases("Statement")
	        .build("object", "body")
	        .field("object", def("Expression"))
	        .field("body", def("Statement"));
	    def("SwitchStatement")
	        .bases("Statement")
	        .build("discriminant", "cases", "lexical")
	        .field("discriminant", def("Expression"))
	        .field("cases", [def("SwitchCase")])
	        .field("lexical", Boolean, defaults["false"]);
	    def("ReturnStatement")
	        .bases("Statement")
	        .build("argument")
	        .field("argument", or(def("Expression"), null));
	    def("ThrowStatement")
	        .bases("Statement")
	        .build("argument")
	        .field("argument", def("Expression"));
	    def("TryStatement")
	        .bases("Statement")
	        .build("block", "handler", "finalizer")
	        .field("block", def("BlockStatement"))
	        .field("handler", or(def("CatchClause"), null), function () {
	        return this.handlers && this.handlers[0] || null;
	    })
	        .field("handlers", [def("CatchClause")], function () {
	        return this.handler ? [this.handler] : [];
	    }, true) // Indicates this field is hidden from eachField iteration.
	        .field("guardedHandlers", [def("CatchClause")], defaults.emptyArray)
	        .field("finalizer", or(def("BlockStatement"), null), defaults["null"]);
	    def("CatchClause")
	        .bases("Node")
	        .build("param", "guard", "body")
	        .field("param", def("Pattern"))
	        .field("guard", or(def("Expression"), null), defaults["null"])
	        .field("body", def("BlockStatement"));
	    def("WhileStatement")
	        .bases("Statement")
	        .build("test", "body")
	        .field("test", def("Expression"))
	        .field("body", def("Statement"));
	    def("DoWhileStatement")
	        .bases("Statement")
	        .build("body", "test")
	        .field("body", def("Statement"))
	        .field("test", def("Expression"));
	    def("ForStatement")
	        .bases("Statement")
	        .build("init", "test", "update", "body")
	        .field("init", or(def("VariableDeclaration"), def("Expression"), null))
	        .field("test", or(def("Expression"), null))
	        .field("update", or(def("Expression"), null))
	        .field("body", def("Statement"));
	    def("ForInStatement")
	        .bases("Statement")
	        .build("left", "right", "body")
	        .field("left", or(def("VariableDeclaration"), def("Expression")))
	        .field("right", def("Expression"))
	        .field("body", def("Statement"));
	    def("DebuggerStatement").bases("Statement").build();
	    def("Declaration").bases("Statement");
	    def("FunctionDeclaration")
	        .bases("Function", "Declaration")
	        .build("id", "params", "body")
	        .field("id", def("Identifier"));
	    def("FunctionExpression")
	        .bases("Function", "Expression")
	        .build("id", "params", "body");
	    def("VariableDeclaration")
	        .bases("Declaration")
	        .build("kind", "declarations")
	        .field("kind", or("var", "let", "const"))
	        .field("declarations", [def("VariableDeclarator")]);
	    def("VariableDeclarator")
	        .bases("Node")
	        .build("id", "init")
	        .field("id", def("Pattern"))
	        .field("init", or(def("Expression"), null), defaults["null"]);
	    def("Expression").bases("Node");
	    def("ThisExpression").bases("Expression").build();
	    def("ArrayExpression")
	        .bases("Expression")
	        .build("elements")
	        .field("elements", [or(def("Expression"), null)]);
	    def("ObjectExpression")
	        .bases("Expression")
	        .build("properties")
	        .field("properties", [def("Property")]);
	    // TODO Not in the Mozilla Parser API, but used by Esprima.
	    def("Property")
	        .bases("Node") // Want to be able to visit Property Nodes.
	        .build("kind", "key", "value")
	        .field("kind", or("init", "get", "set"))
	        .field("key", or(def("Literal"), def("Identifier")))
	        .field("value", def("Expression"));
	    def("SequenceExpression")
	        .bases("Expression")
	        .build("expressions")
	        .field("expressions", [def("Expression")]);
	    var UnaryOperator = or("-", "+", "!", "~", "typeof", "void", "delete");
	    def("UnaryExpression")
	        .bases("Expression")
	        .build("operator", "argument", "prefix")
	        .field("operator", UnaryOperator)
	        .field("argument", def("Expression"))
	        // Esprima doesn't bother with this field, presumably because it's
	        // always true for unary operators.
	        .field("prefix", Boolean, defaults["true"]);
	    var BinaryOperator = or.apply(void 0, core_operators_1.BinaryOperators);
	    def("BinaryExpression")
	        .bases("Expression")
	        .build("operator", "left", "right")
	        .field("operator", BinaryOperator)
	        .field("left", def("Expression"))
	        .field("right", def("Expression"));
	    var AssignmentOperator = or.apply(void 0, core_operators_1.AssignmentOperators);
	    def("AssignmentExpression")
	        .bases("Expression")
	        .build("operator", "left", "right")
	        .field("operator", AssignmentOperator)
	        .field("left", or(def("Pattern"), def("MemberExpression")))
	        .field("right", def("Expression"));
	    var UpdateOperator = or("++", "--");
	    def("UpdateExpression")
	        .bases("Expression")
	        .build("operator", "argument", "prefix")
	        .field("operator", UpdateOperator)
	        .field("argument", def("Expression"))
	        .field("prefix", Boolean);
	    var LogicalOperator = or.apply(void 0, core_operators_1.LogicalOperators);
	    def("LogicalExpression")
	        .bases("Expression")
	        .build("operator", "left", "right")
	        .field("operator", LogicalOperator)
	        .field("left", def("Expression"))
	        .field("right", def("Expression"));
	    def("ConditionalExpression")
	        .bases("Expression")
	        .build("test", "consequent", "alternate")
	        .field("test", def("Expression"))
	        .field("consequent", def("Expression"))
	        .field("alternate", def("Expression"));
	    def("NewExpression")
	        .bases("Expression")
	        .build("callee", "arguments")
	        .field("callee", def("Expression"))
	        // The Mozilla Parser API gives this type as [or(def("Expression"),
	        // null)], but null values don't really make sense at the call site.
	        // TODO Report this nonsense.
	        .field("arguments", [def("Expression")]);
	    def("CallExpression")
	        .bases("Expression")
	        .build("callee", "arguments")
	        .field("callee", def("Expression"))
	        // See comment for NewExpression above.
	        .field("arguments", [def("Expression")]);
	    def("MemberExpression")
	        .bases("Expression")
	        .build("object", "property", "computed")
	        .field("object", def("Expression"))
	        .field("property", or(def("Identifier"), def("Expression")))
	        .field("computed", Boolean, function () {
	        var type = this.property.type;
	        if (type === 'Literal' ||
	            type === 'MemberExpression' ||
	            type === 'BinaryExpression') {
	            return true;
	        }
	        return false;
	    });
	    def("Pattern").bases("Node");
	    def("SwitchCase")
	        .bases("Node")
	        .build("test", "consequent")
	        .field("test", or(def("Expression"), null))
	        .field("consequent", [def("Statement")]);
	    def("Identifier")
	        .bases("Expression", "Pattern")
	        .build("name")
	        .field("name", String)
	        .field("optional", Boolean, defaults["false"]);
	    def("Literal")
	        .bases("Expression")
	        .build("value")
	        .field("value", or(String, Boolean, null, Number, RegExp))
	        .field("regex", or({
	        pattern: String,
	        flags: String
	    }, null), function () {
	        if (this.value instanceof RegExp) {
	            var flags = "";
	            if (this.value.ignoreCase)
	                flags += "i";
	            if (this.value.multiline)
	                flags += "m";
	            if (this.value.global)
	                flags += "g";
	            return {
	                pattern: this.value.source,
	                flags: flags
	            };
	        }
	        return null;
	    });
	    // Abstract (non-buildable) comment supertype. Not a Node.
	    def("Comment")
	        .bases("Printable")
	        .field("value", String)
	        // A .leading comment comes before the node, whereas a .trailing
	        // comment comes after it. These two fields should not both be true,
	        // but they might both be false when the comment falls inside a node
	        // and the node has no children for the comment to lead or trail,
	        // e.g. { /*dangling*/ }.
	        .field("leading", Boolean, defaults["true"])
	        .field("trailing", Boolean, defaults["false"]);
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(core$1, core$1.exports));

	var es6 = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var core_1 = tslib_1.__importDefault(core$1.exports);
	var types_1 = tslib_1.__importDefault(types$9);
	var shared_1 = tslib_1.__importDefault(shared.exports);
	function default_1(fork) {
	    fork.use(core_1.default);
	    var types = fork.use(types_1.default);
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(shared_1.default).defaults;
	    def("Function")
	        .field("generator", Boolean, defaults["false"])
	        .field("expression", Boolean, defaults["false"])
	        .field("defaults", [or(def("Expression"), null)], defaults.emptyArray)
	        // Legacy
	        .field("rest", or(def("Identifier"), null), defaults["null"]);
	    // The ESTree way of representing a ...rest parameter.
	    def("RestElement")
	        .bases("Pattern")
	        .build("argument")
	        .field("argument", def("Pattern"))
	        .field("typeAnnotation", // for Babylon. Flow parser puts it on the identifier
	    or(def("TypeAnnotation"), def("TSTypeAnnotation"), null), defaults["null"]);
	    def("SpreadElementPattern")
	        .bases("Pattern")
	        .build("argument")
	        .field("argument", def("Pattern"));
	    def("FunctionDeclaration")
	        .build("id", "params", "body", "generator", "expression")
	        // May be `null` in the context of `export default function () {}`
	        .field("id", or(def("Identifier"), null));
	    def("FunctionExpression")
	        .build("id", "params", "body", "generator", "expression");
	    def("ArrowFunctionExpression")
	        .bases("Function", "Expression")
	        .build("params", "body", "expression")
	        // The forced null value here is compatible with the overridden
	        // definition of the "id" field in the Function interface.
	        .field("id", null, defaults["null"])
	        // Arrow function bodies are allowed to be expressions.
	        .field("body", or(def("BlockStatement"), def("Expression")))
	        // The current spec forbids arrow generators, so I have taken the
	        // liberty of enforcing that. TODO Report this.
	        .field("generator", false, defaults["false"]);
	    def("ForOfStatement")
	        .bases("Statement")
	        .build("left", "right", "body")
	        .field("left", or(def("VariableDeclaration"), def("Pattern")))
	        .field("right", def("Expression"))
	        .field("body", def("Statement"));
	    def("YieldExpression")
	        .bases("Expression")
	        .build("argument", "delegate")
	        .field("argument", or(def("Expression"), null))
	        .field("delegate", Boolean, defaults["false"]);
	    def("GeneratorExpression")
	        .bases("Expression")
	        .build("body", "blocks", "filter")
	        .field("body", def("Expression"))
	        .field("blocks", [def("ComprehensionBlock")])
	        .field("filter", or(def("Expression"), null));
	    def("ComprehensionExpression")
	        .bases("Expression")
	        .build("body", "blocks", "filter")
	        .field("body", def("Expression"))
	        .field("blocks", [def("ComprehensionBlock")])
	        .field("filter", or(def("Expression"), null));
	    def("ComprehensionBlock")
	        .bases("Node")
	        .build("left", "right", "each")
	        .field("left", def("Pattern"))
	        .field("right", def("Expression"))
	        .field("each", Boolean);
	    def("Property")
	        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	        .field("value", or(def("Expression"), def("Pattern")))
	        .field("method", Boolean, defaults["false"])
	        .field("shorthand", Boolean, defaults["false"])
	        .field("computed", Boolean, defaults["false"]);
	    def("ObjectProperty")
	        .field("shorthand", Boolean, defaults["false"]);
	    def("PropertyPattern")
	        .bases("Pattern")
	        .build("key", "pattern")
	        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	        .field("pattern", def("Pattern"))
	        .field("computed", Boolean, defaults["false"]);
	    def("ObjectPattern")
	        .bases("Pattern")
	        .build("properties")
	        .field("properties", [or(def("PropertyPattern"), def("Property"))]);
	    def("ArrayPattern")
	        .bases("Pattern")
	        .build("elements")
	        .field("elements", [or(def("Pattern"), null)]);
	    def("SpreadElement")
	        .bases("Node")
	        .build("argument")
	        .field("argument", def("Expression"));
	    def("ArrayExpression")
	        .field("elements", [or(def("Expression"), def("SpreadElement"), def("RestElement"), null)]);
	    def("NewExpression")
	        .field("arguments", [or(def("Expression"), def("SpreadElement"))]);
	    def("CallExpression")
	        .field("arguments", [or(def("Expression"), def("SpreadElement"))]);
	    // Note: this node type is *not* an AssignmentExpression with a Pattern on
	    // the left-hand side! The existing AssignmentExpression type already
	    // supports destructuring assignments. AssignmentPattern nodes may appear
	    // wherever a Pattern is allowed, and the right-hand side represents a
	    // default value to be destructured against the left-hand side, if no
	    // value is otherwise provided. For example: default parameter values.
	    def("AssignmentPattern")
	        .bases("Pattern")
	        .build("left", "right")
	        .field("left", def("Pattern"))
	        .field("right", def("Expression"));
	    def("MethodDefinition")
	        .bases("Declaration")
	        .build("kind", "key", "value", "static")
	        .field("kind", or("constructor", "method", "get", "set"))
	        .field("key", def("Expression"))
	        .field("value", def("Function"))
	        .field("computed", Boolean, defaults["false"])
	        .field("static", Boolean, defaults["false"]);
	    var ClassBodyElement = or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"));
	    def("ClassProperty")
	        .bases("Declaration")
	        .build("key")
	        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	        .field("computed", Boolean, defaults["false"]);
	    def("ClassPropertyDefinition") // static property
	        .bases("Declaration")
	        .build("definition")
	        // Yes, Virginia, circular definitions are permitted.
	        .field("definition", ClassBodyElement);
	    def("ClassBody")
	        .bases("Declaration")
	        .build("body")
	        .field("body", [ClassBodyElement]);
	    def("ClassDeclaration")
	        .bases("Declaration")
	        .build("id", "body", "superClass")
	        .field("id", or(def("Identifier"), null))
	        .field("body", def("ClassBody"))
	        .field("superClass", or(def("Expression"), null), defaults["null"]);
	    def("ClassExpression")
	        .bases("Expression")
	        .build("id", "body", "superClass")
	        .field("id", or(def("Identifier"), null), defaults["null"])
	        .field("body", def("ClassBody"))
	        .field("superClass", or(def("Expression"), null), defaults["null"]);
	    def("Super")
	        .bases("Expression")
	        .build();
	    // Specifier and ModuleSpecifier are abstract non-standard types
	    // introduced for definitional convenience.
	    def("Specifier").bases("Node");
	    // This supertype is shared/abused by both def/babel.js and
	    // def/esprima.js. In the future, it will be possible to load only one set
	    // of definitions appropriate for a given parser, but until then we must
	    // rely on default functions to reconcile the conflicting AST formats.
	    def("ModuleSpecifier")
	        .bases("Specifier")
	        // This local field is used by Babel/Acorn. It should not technically
	        // be optional in the Babel/Acorn AST format, but it must be optional
	        // in the Esprima AST format.
	        .field("local", or(def("Identifier"), null), defaults["null"])
	        // The id and name fields are used by Esprima. The id field should not
	        // technically be optional in the Esprima AST format, but it must be
	        // optional in the Babel/Acorn AST format.
	        .field("id", or(def("Identifier"), null), defaults["null"])
	        .field("name", or(def("Identifier"), null), defaults["null"]);
	    // import {<id [as name]>} from ...;
	    def("ImportSpecifier")
	        .bases("ModuleSpecifier")
	        .build("imported", "local")
	        .field("imported", def("Identifier"));
	    // import <id> from ...;
	    def("ImportDefaultSpecifier")
	        .bases("ModuleSpecifier")
	        .build("local");
	    // import <* as id> from ...;
	    def("ImportNamespaceSpecifier")
	        .bases("ModuleSpecifier")
	        .build("local");
	    def("ImportDeclaration")
	        .bases("Declaration")
	        .build("specifiers", "source", "importKind")
	        .field("specifiers", [or(def("ImportSpecifier"), def("ImportNamespaceSpecifier"), def("ImportDefaultSpecifier"))], defaults.emptyArray)
	        .field("source", def("Literal"))
	        .field("importKind", or("value", "type"), function () {
	        return "value";
	    });
	    def("ExportNamedDeclaration")
	        .bases("Declaration")
	        .build("declaration", "specifiers", "source")
	        .field("declaration", or(def("Declaration"), null))
	        .field("specifiers", [def("ExportSpecifier")], defaults.emptyArray)
	        .field("source", or(def("Literal"), null), defaults["null"]);
	    def("ExportSpecifier")
	        .bases("ModuleSpecifier")
	        .build("local", "exported")
	        .field("exported", def("Identifier"));
	    def("ExportDefaultDeclaration")
	        .bases("Declaration")
	        .build("declaration")
	        .field("declaration", or(def("Declaration"), def("Expression")));
	    def("ExportAllDeclaration")
	        .bases("Declaration")
	        .build("source")
	        .field("source", def("Literal"));
	    def("TaggedTemplateExpression")
	        .bases("Expression")
	        .build("tag", "quasi")
	        .field("tag", def("Expression"))
	        .field("quasi", def("TemplateLiteral"));
	    def("TemplateLiteral")
	        .bases("Expression")
	        .build("quasis", "expressions")
	        .field("quasis", [def("TemplateElement")])
	        .field("expressions", [def("Expression")]);
	    def("TemplateElement")
	        .bases("Node")
	        .build("value", "tail")
	        .field("value", { "cooked": String, "raw": String })
	        .field("tail", Boolean);
	    def("MetaProperty")
	        .bases("Expression")
	        .build("meta", "property")
	        .field("meta", def("Identifier"))
	        .field("property", def("Identifier"));
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(es6, es6.exports));

	var es2016 = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var core_operators_1 = coreOperators;
	var es6_1 = tslib_1.__importDefault(es6.exports);
	var types_1 = tslib_1.__importDefault(types$9);
	function default_1(fork) {
	    fork.use(es6_1.default);
	    var types = fork.use(types_1.default);
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var BinaryOperator = or.apply(void 0, tslib_1.__spreadArrays(core_operators_1.BinaryOperators, ["**"]));
	    def("BinaryExpression")
	        .field("operator", BinaryOperator);
	    var AssignmentOperator = or.apply(void 0, tslib_1.__spreadArrays(core_operators_1.AssignmentOperators, ["**="]));
	    def("AssignmentExpression")
	        .field("operator", AssignmentOperator);
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(es2016, es2016.exports));

	var es2017$1 = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var es2016_1 = tslib_1.__importDefault(es2016.exports);
	var types_1 = tslib_1.__importDefault(types$9);
	var shared_1 = tslib_1.__importDefault(shared.exports);
	function default_1(fork) {
	    fork.use(es2016_1.default);
	    var types = fork.use(types_1.default);
	    var def = types.Type.def;
	    var defaults = fork.use(shared_1.default).defaults;
	    def("Function")
	        .field("async", Boolean, defaults["false"]);
	    def("AwaitExpression")
	        .bases("Expression")
	        .build("argument")
	        .field("argument", def("Expression"));
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(es2017$1, es2017$1.exports));

	var es2018 = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var es2017_1 = tslib_1.__importDefault(es2017$1.exports);
	var types_1 = tslib_1.__importDefault(types$9);
	var shared_1 = tslib_1.__importDefault(shared.exports);
	function default_1(fork) {
	    fork.use(es2017_1.default);
	    var types = fork.use(types_1.default);
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(shared_1.default).defaults;
	    def("ForOfStatement")
	        .field("await", Boolean, defaults["false"]);
	    // Legacy
	    def("SpreadProperty")
	        .bases("Node")
	        .build("argument")
	        .field("argument", def("Expression"));
	    def("ObjectExpression")
	        .field("properties", [or(def("Property"), def("SpreadProperty"), // Legacy
	        def("SpreadElement"))]);
	    def("TemplateElement")
	        .field("value", { "cooked": or(String, null), "raw": String });
	    // Legacy
	    def("SpreadPropertyPattern")
	        .bases("Pattern")
	        .build("argument")
	        .field("argument", def("Pattern"));
	    def("ObjectPattern")
	        .field("properties", [or(def("PropertyPattern"), def("Property"), def("RestElement"), def("SpreadPropertyPattern"))]);
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(es2018, es2018.exports));

	var es2019 = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var es2018_1 = tslib_1.__importDefault(es2018.exports);
	var types_1 = tslib_1.__importDefault(types$9);
	var shared_1 = tslib_1.__importDefault(shared.exports);
	function default_1(fork) {
	    fork.use(es2018_1.default);
	    var types = fork.use(types_1.default);
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(shared_1.default).defaults;
	    def("CatchClause")
	        .field("param", or(def("Pattern"), null), defaults["null"]);
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(es2019, es2019.exports));

	var es2020 = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var core_operators_1 = coreOperators;
	var es2019_1 = tslib_1.__importDefault(es2019.exports);
	var types_1 = tslib_1.__importDefault(types$9);
	var shared_1 = tslib_1.__importDefault(shared.exports);
	function default_1(fork) {
	    fork.use(es2019_1.default);
	    var types = fork.use(types_1.default);
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var shared = fork.use(shared_1.default);
	    var defaults = shared.defaults;
	    def("ImportExpression")
	        .bases("Expression")
	        .build("source")
	        .field("source", def("Expression"));
	    def("ExportAllDeclaration")
	        .build("source", "exported")
	        .field("source", def("Literal"))
	        .field("exported", or(def("Identifier"), null));
	    // Optional chaining
	    def("ChainElement")
	        .bases("Node")
	        .field("optional", Boolean, defaults["false"]);
	    def("CallExpression")
	        .bases("Expression", "ChainElement");
	    def("MemberExpression")
	        .bases("Expression", "ChainElement");
	    def("ChainExpression")
	        .bases("Expression")
	        .build("expression")
	        .field("expression", def("ChainElement"));
	    def("OptionalCallExpression")
	        .bases("CallExpression")
	        .build("callee", "arguments", "optional")
	        .field("optional", Boolean, defaults["true"]);
	    // Deprecated optional chaining type, doesn't work with babelParser@7.11.0 or newer
	    def("OptionalMemberExpression")
	        .bases("MemberExpression")
	        .build("object", "property", "computed", "optional")
	        .field("optional", Boolean, defaults["true"]);
	    // Nullish coalescing
	    var LogicalOperator = or.apply(void 0, tslib_1.__spreadArrays(core_operators_1.LogicalOperators, ["??"]));
	    def("LogicalExpression")
	        .field("operator", LogicalOperator);
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(es2020, es2020.exports));

	var jsx$3 = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var es2020_1 = tslib_1.__importDefault(es2020.exports);
	var types_1 = tslib_1.__importDefault(types$9);
	var shared_1 = tslib_1.__importDefault(shared.exports);
	function default_1(fork) {
	    fork.use(es2020_1.default);
	    var types = fork.use(types_1.default);
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(shared_1.default).defaults;
	    def("JSXAttribute")
	        .bases("Node")
	        .build("name", "value")
	        .field("name", or(def("JSXIdentifier"), def("JSXNamespacedName")))
	        .field("value", or(def("Literal"), // attr="value"
	    def("JSXExpressionContainer"), // attr={value}
	    def("JSXElement"), // attr=<div />
	    def("JSXFragment"), // attr=<></>
	    null // attr= or just attr
	    ), defaults["null"]);
	    def("JSXIdentifier")
	        .bases("Identifier")
	        .build("name")
	        .field("name", String);
	    def("JSXNamespacedName")
	        .bases("Node")
	        .build("namespace", "name")
	        .field("namespace", def("JSXIdentifier"))
	        .field("name", def("JSXIdentifier"));
	    def("JSXMemberExpression")
	        .bases("MemberExpression")
	        .build("object", "property")
	        .field("object", or(def("JSXIdentifier"), def("JSXMemberExpression")))
	        .field("property", def("JSXIdentifier"))
	        .field("computed", Boolean, defaults.false);
	    var JSXElementName = or(def("JSXIdentifier"), def("JSXNamespacedName"), def("JSXMemberExpression"));
	    def("JSXSpreadAttribute")
	        .bases("Node")
	        .build("argument")
	        .field("argument", def("Expression"));
	    var JSXAttributes = [or(def("JSXAttribute"), def("JSXSpreadAttribute"))];
	    def("JSXExpressionContainer")
	        .bases("Expression")
	        .build("expression")
	        .field("expression", or(def("Expression"), def("JSXEmptyExpression")));
	    var JSXChildren = [or(def("JSXText"), def("JSXExpressionContainer"), def("JSXSpreadChild"), def("JSXElement"), def("JSXFragment"), def("Literal") // Legacy: Esprima should return JSXText instead.
	        )];
	    def("JSXElement")
	        .bases("Expression")
	        .build("openingElement", "closingElement", "children")
	        .field("openingElement", def("JSXOpeningElement"))
	        .field("closingElement", or(def("JSXClosingElement"), null), defaults["null"])
	        .field("children", JSXChildren, defaults.emptyArray)
	        .field("name", JSXElementName, function () {
	        // Little-known fact: the `this` object inside a default function
	        // is none other than the partially-built object itself, and any
	        // fields initialized directly from builder function arguments
	        // (like openingElement, closingElement, and children) are
	        // guaranteed to be available.
	        return this.openingElement.name;
	    }, true) // hidden from traversal
	        .field("selfClosing", Boolean, function () {
	        return this.openingElement.selfClosing;
	    }, true) // hidden from traversal
	        .field("attributes", JSXAttributes, function () {
	        return this.openingElement.attributes;
	    }, true); // hidden from traversal
	    def("JSXOpeningElement")
	        .bases("Node")
	        .build("name", "attributes", "selfClosing")
	        .field("name", JSXElementName)
	        .field("attributes", JSXAttributes, defaults.emptyArray)
	        .field("selfClosing", Boolean, defaults["false"]);
	    def("JSXClosingElement")
	        .bases("Node")
	        .build("name")
	        .field("name", JSXElementName);
	    def("JSXFragment")
	        .bases("Expression")
	        .build("openingFragment", "closingFragment", "children")
	        .field("openingFragment", def("JSXOpeningFragment"))
	        .field("closingFragment", def("JSXClosingFragment"))
	        .field("children", JSXChildren, defaults.emptyArray);
	    def("JSXOpeningFragment")
	        .bases("Node")
	        .build();
	    def("JSXClosingFragment")
	        .bases("Node")
	        .build();
	    def("JSXText")
	        .bases("Literal")
	        .build("value", "raw")
	        .field("value", String)
	        .field("raw", String, function () {
	        return this.value;
	    });
	    def("JSXEmptyExpression")
	        .bases("Node")
	        .build();
	    def("JSXSpreadChild")
	        .bases("Node")
	        .build("expression")
	        .field("expression", def("Expression"));
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(jsx$3, jsx$3.exports));

	var flow$2 = {exports: {}};

	var esProposals = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var types_1 = tslib_1.__importDefault(types$9);
	var shared_1 = tslib_1.__importDefault(shared.exports);
	var es2020_1 = tslib_1.__importDefault(es2020.exports);
	function default_1(fork) {
	    fork.use(es2020_1.default);
	    var types = fork.use(types_1.default);
	    var Type = types.Type;
	    var def = types.Type.def;
	    var or = Type.or;
	    var shared = fork.use(shared_1.default);
	    var defaults = shared.defaults;
	    def("AwaitExpression")
	        .build("argument", "all")
	        .field("argument", or(def("Expression"), null))
	        .field("all", Boolean, defaults["false"]);
	    // Decorators
	    def("Decorator")
	        .bases("Node")
	        .build("expression")
	        .field("expression", def("Expression"));
	    def("Property")
	        .field("decorators", or([def("Decorator")], null), defaults["null"]);
	    def("MethodDefinition")
	        .field("decorators", or([def("Decorator")], null), defaults["null"]);
	    // Private names
	    def("PrivateName")
	        .bases("Expression", "Pattern")
	        .build("id")
	        .field("id", def("Identifier"));
	    def("ClassPrivateProperty")
	        .bases("ClassProperty")
	        .build("key", "value")
	        .field("key", def("PrivateName"))
	        .field("value", or(def("Expression"), null), defaults["null"]);
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(esProposals, esProposals.exports));

	var typeAnnotations = {exports: {}};

	(function (module, exports) {
	/**
	 * Type annotation defs shared between Flow and TypeScript.
	 * These defs could not be defined in ./flow.ts or ./typescript.ts directly
	 * because they use the same name.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var types_1 = tslib_1.__importDefault(types$9);
	var shared_1 = tslib_1.__importDefault(shared.exports);
	function default_1(fork) {
	    var types = fork.use(types_1.default);
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(shared_1.default).defaults;
	    var TypeAnnotation = or(def("TypeAnnotation"), def("TSTypeAnnotation"), null);
	    var TypeParamDecl = or(def("TypeParameterDeclaration"), def("TSTypeParameterDeclaration"), null);
	    def("Identifier")
	        .field("typeAnnotation", TypeAnnotation, defaults["null"]);
	    def("ObjectPattern")
	        .field("typeAnnotation", TypeAnnotation, defaults["null"]);
	    def("Function")
	        .field("returnType", TypeAnnotation, defaults["null"])
	        .field("typeParameters", TypeParamDecl, defaults["null"]);
	    def("ClassProperty")
	        .build("key", "value", "typeAnnotation", "static")
	        .field("value", or(def("Expression"), null))
	        .field("static", Boolean, defaults["false"])
	        .field("typeAnnotation", TypeAnnotation, defaults["null"]);
	    ["ClassDeclaration",
	        "ClassExpression",
	    ].forEach(function (typeName) {
	        def(typeName)
	            .field("typeParameters", TypeParamDecl, defaults["null"])
	            .field("superTypeParameters", or(def("TypeParameterInstantiation"), def("TSTypeParameterInstantiation"), null), defaults["null"])
	            .field("implements", or([def("ClassImplements")], [def("TSExpressionWithTypeArguments")]), defaults.emptyArray);
	    });
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(typeAnnotations, typeAnnotations.exports));

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var es_proposals_1 = tslib_1.__importDefault(esProposals.exports);
	var type_annotations_1 = tslib_1.__importDefault(typeAnnotations.exports);
	var types_1 = tslib_1.__importDefault(types$9);
	var shared_1 = tslib_1.__importDefault(shared.exports);
	function default_1(fork) {
	    fork.use(es_proposals_1.default);
	    fork.use(type_annotations_1.default);
	    var types = fork.use(types_1.default);
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(shared_1.default).defaults;
	    // Base types
	    def("Flow").bases("Node");
	    def("FlowType").bases("Flow");
	    // Type annotations
	    def("AnyTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("EmptyTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("MixedTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("VoidTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("SymbolTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("NumberTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("BigIntTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("NumberLiteralTypeAnnotation")
	        .bases("FlowType")
	        .build("value", "raw")
	        .field("value", Number)
	        .field("raw", String);
	    // Babylon 6 differs in AST from Flow
	    // same as NumberLiteralTypeAnnotation
	    def("NumericLiteralTypeAnnotation")
	        .bases("FlowType")
	        .build("value", "raw")
	        .field("value", Number)
	        .field("raw", String);
	    def("BigIntLiteralTypeAnnotation")
	        .bases("FlowType")
	        .build("value", "raw")
	        .field("value", null)
	        .field("raw", String);
	    def("StringTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("StringLiteralTypeAnnotation")
	        .bases("FlowType")
	        .build("value", "raw")
	        .field("value", String)
	        .field("raw", String);
	    def("BooleanTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("BooleanLiteralTypeAnnotation")
	        .bases("FlowType")
	        .build("value", "raw")
	        .field("value", Boolean)
	        .field("raw", String);
	    def("TypeAnnotation")
	        .bases("Node")
	        .build("typeAnnotation")
	        .field("typeAnnotation", def("FlowType"));
	    def("NullableTypeAnnotation")
	        .bases("FlowType")
	        .build("typeAnnotation")
	        .field("typeAnnotation", def("FlowType"));
	    def("NullLiteralTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("NullTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("ThisTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("ExistsTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("ExistentialTypeParam")
	        .bases("FlowType")
	        .build();
	    def("FunctionTypeAnnotation")
	        .bases("FlowType")
	        .build("params", "returnType", "rest", "typeParameters")
	        .field("params", [def("FunctionTypeParam")])
	        .field("returnType", def("FlowType"))
	        .field("rest", or(def("FunctionTypeParam"), null))
	        .field("typeParameters", or(def("TypeParameterDeclaration"), null));
	    def("FunctionTypeParam")
	        .bases("Node")
	        .build("name", "typeAnnotation", "optional")
	        .field("name", or(def("Identifier"), null))
	        .field("typeAnnotation", def("FlowType"))
	        .field("optional", Boolean);
	    def("ArrayTypeAnnotation")
	        .bases("FlowType")
	        .build("elementType")
	        .field("elementType", def("FlowType"));
	    def("ObjectTypeAnnotation")
	        .bases("FlowType")
	        .build("properties", "indexers", "callProperties")
	        .field("properties", [
	        or(def("ObjectTypeProperty"), def("ObjectTypeSpreadProperty"))
	    ])
	        .field("indexers", [def("ObjectTypeIndexer")], defaults.emptyArray)
	        .field("callProperties", [def("ObjectTypeCallProperty")], defaults.emptyArray)
	        .field("inexact", or(Boolean, void 0), defaults["undefined"])
	        .field("exact", Boolean, defaults["false"])
	        .field("internalSlots", [def("ObjectTypeInternalSlot")], defaults.emptyArray);
	    def("Variance")
	        .bases("Node")
	        .build("kind")
	        .field("kind", or("plus", "minus"));
	    var LegacyVariance = or(def("Variance"), "plus", "minus", null);
	    def("ObjectTypeProperty")
	        .bases("Node")
	        .build("key", "value", "optional")
	        .field("key", or(def("Literal"), def("Identifier")))
	        .field("value", def("FlowType"))
	        .field("optional", Boolean)
	        .field("variance", LegacyVariance, defaults["null"]);
	    def("ObjectTypeIndexer")
	        .bases("Node")
	        .build("id", "key", "value")
	        .field("id", def("Identifier"))
	        .field("key", def("FlowType"))
	        .field("value", def("FlowType"))
	        .field("variance", LegacyVariance, defaults["null"])
	        .field("static", Boolean, defaults["false"]);
	    def("ObjectTypeCallProperty")
	        .bases("Node")
	        .build("value")
	        .field("value", def("FunctionTypeAnnotation"))
	        .field("static", Boolean, defaults["false"]);
	    def("QualifiedTypeIdentifier")
	        .bases("Node")
	        .build("qualification", "id")
	        .field("qualification", or(def("Identifier"), def("QualifiedTypeIdentifier")))
	        .field("id", def("Identifier"));
	    def("GenericTypeAnnotation")
	        .bases("FlowType")
	        .build("id", "typeParameters")
	        .field("id", or(def("Identifier"), def("QualifiedTypeIdentifier")))
	        .field("typeParameters", or(def("TypeParameterInstantiation"), null));
	    def("MemberTypeAnnotation")
	        .bases("FlowType")
	        .build("object", "property")
	        .field("object", def("Identifier"))
	        .field("property", or(def("MemberTypeAnnotation"), def("GenericTypeAnnotation")));
	    def("UnionTypeAnnotation")
	        .bases("FlowType")
	        .build("types")
	        .field("types", [def("FlowType")]);
	    def("IntersectionTypeAnnotation")
	        .bases("FlowType")
	        .build("types")
	        .field("types", [def("FlowType")]);
	    def("TypeofTypeAnnotation")
	        .bases("FlowType")
	        .build("argument")
	        .field("argument", def("FlowType"));
	    def("ObjectTypeSpreadProperty")
	        .bases("Node")
	        .build("argument")
	        .field("argument", def("FlowType"));
	    def("ObjectTypeInternalSlot")
	        .bases("Node")
	        .build("id", "value", "optional", "static", "method")
	        .field("id", def("Identifier"))
	        .field("value", def("FlowType"))
	        .field("optional", Boolean)
	        .field("static", Boolean)
	        .field("method", Boolean);
	    def("TypeParameterDeclaration")
	        .bases("Node")
	        .build("params")
	        .field("params", [def("TypeParameter")]);
	    def("TypeParameterInstantiation")
	        .bases("Node")
	        .build("params")
	        .field("params", [def("FlowType")]);
	    def("TypeParameter")
	        .bases("FlowType")
	        .build("name", "variance", "bound", "default")
	        .field("name", String)
	        .field("variance", LegacyVariance, defaults["null"])
	        .field("bound", or(def("TypeAnnotation"), null), defaults["null"])
	        .field("default", or(def("FlowType"), null), defaults["null"]);
	    def("ClassProperty")
	        .field("variance", LegacyVariance, defaults["null"]);
	    def("ClassImplements")
	        .bases("Node")
	        .build("id")
	        .field("id", def("Identifier"))
	        .field("superClass", or(def("Expression"), null), defaults["null"])
	        .field("typeParameters", or(def("TypeParameterInstantiation"), null), defaults["null"]);
	    def("InterfaceTypeAnnotation")
	        .bases("FlowType")
	        .build("body", "extends")
	        .field("body", def("ObjectTypeAnnotation"))
	        .field("extends", or([def("InterfaceExtends")], null), defaults["null"]);
	    def("InterfaceDeclaration")
	        .bases("Declaration")
	        .build("id", "body", "extends")
	        .field("id", def("Identifier"))
	        .field("typeParameters", or(def("TypeParameterDeclaration"), null), defaults["null"])
	        .field("body", def("ObjectTypeAnnotation"))
	        .field("extends", [def("InterfaceExtends")]);
	    def("DeclareInterface")
	        .bases("InterfaceDeclaration")
	        .build("id", "body", "extends");
	    def("InterfaceExtends")
	        .bases("Node")
	        .build("id")
	        .field("id", def("Identifier"))
	        .field("typeParameters", or(def("TypeParameterInstantiation"), null), defaults["null"]);
	    def("TypeAlias")
	        .bases("Declaration")
	        .build("id", "typeParameters", "right")
	        .field("id", def("Identifier"))
	        .field("typeParameters", or(def("TypeParameterDeclaration"), null))
	        .field("right", def("FlowType"));
	    def("DeclareTypeAlias")
	        .bases("TypeAlias")
	        .build("id", "typeParameters", "right");
	    def("OpaqueType")
	        .bases("Declaration")
	        .build("id", "typeParameters", "impltype", "supertype")
	        .field("id", def("Identifier"))
	        .field("typeParameters", or(def("TypeParameterDeclaration"), null))
	        .field("impltype", def("FlowType"))
	        .field("supertype", or(def("FlowType"), null));
	    def("DeclareOpaqueType")
	        .bases("OpaqueType")
	        .build("id", "typeParameters", "supertype")
	        .field("impltype", or(def("FlowType"), null));
	    def("TypeCastExpression")
	        .bases("Expression")
	        .build("expression", "typeAnnotation")
	        .field("expression", def("Expression"))
	        .field("typeAnnotation", def("TypeAnnotation"));
	    def("TupleTypeAnnotation")
	        .bases("FlowType")
	        .build("types")
	        .field("types", [def("FlowType")]);
	    def("DeclareVariable")
	        .bases("Statement")
	        .build("id")
	        .field("id", def("Identifier"));
	    def("DeclareFunction")
	        .bases("Statement")
	        .build("id")
	        .field("id", def("Identifier"))
	        .field("predicate", or(def("FlowPredicate"), null), defaults["null"]);
	    def("DeclareClass")
	        .bases("InterfaceDeclaration")
	        .build("id");
	    def("DeclareModule")
	        .bases("Statement")
	        .build("id", "body")
	        .field("id", or(def("Identifier"), def("Literal")))
	        .field("body", def("BlockStatement"));
	    def("DeclareModuleExports")
	        .bases("Statement")
	        .build("typeAnnotation")
	        .field("typeAnnotation", def("TypeAnnotation"));
	    def("DeclareExportDeclaration")
	        .bases("Declaration")
	        .build("default", "declaration", "specifiers", "source")
	        .field("default", Boolean)
	        .field("declaration", or(def("DeclareVariable"), def("DeclareFunction"), def("DeclareClass"), def("FlowType"), // Implies default.
	    def("TypeAlias"), // Implies named type
	    def("DeclareOpaqueType"), // Implies named opaque type
	    def("InterfaceDeclaration"), null))
	        .field("specifiers", [or(def("ExportSpecifier"), def("ExportBatchSpecifier"))], defaults.emptyArray)
	        .field("source", or(def("Literal"), null), defaults["null"]);
	    def("DeclareExportAllDeclaration")
	        .bases("Declaration")
	        .build("source")
	        .field("source", or(def("Literal"), null), defaults["null"]);
	    def("ImportDeclaration")
	        .field("importKind", or("value", "type", "typeof"), function () { return "value"; });
	    def("FlowPredicate").bases("Flow");
	    def("InferredPredicate")
	        .bases("FlowPredicate")
	        .build();
	    def("DeclaredPredicate")
	        .bases("FlowPredicate")
	        .build("value")
	        .field("value", def("Expression"));
	    def("Function")
	        .field("predicate", or(def("FlowPredicate"), null), defaults["null"]);
	    def("CallExpression")
	        .field("typeArguments", or(null, def("TypeParameterInstantiation")), defaults["null"]);
	    def("NewExpression")
	        .field("typeArguments", or(null, def("TypeParameterInstantiation")), defaults["null"]);
	    // Enums
	    def("EnumDeclaration")
	        .bases("Declaration")
	        .build("id", "body")
	        .field("id", def("Identifier"))
	        .field("body", or(def("EnumBooleanBody"), def("EnumNumberBody"), def("EnumStringBody"), def("EnumSymbolBody")));
	    def("EnumBooleanBody")
	        .build("members", "explicitType")
	        .field("members", [def("EnumBooleanMember")])
	        .field("explicitType", Boolean);
	    def("EnumNumberBody")
	        .build("members", "explicitType")
	        .field("members", [def("EnumNumberMember")])
	        .field("explicitType", Boolean);
	    def("EnumStringBody")
	        .build("members", "explicitType")
	        .field("members", or([def("EnumStringMember")], [def("EnumDefaultedMember")]))
	        .field("explicitType", Boolean);
	    def("EnumSymbolBody")
	        .build("members")
	        .field("members", [def("EnumDefaultedMember")]);
	    def("EnumBooleanMember")
	        .build("id", "init")
	        .field("id", def("Identifier"))
	        .field("init", or(def("Literal"), Boolean));
	    def("EnumNumberMember")
	        .build("id", "init")
	        .field("id", def("Identifier"))
	        .field("init", def("Literal"));
	    def("EnumStringMember")
	        .build("id", "init")
	        .field("id", def("Identifier"))
	        .field("init", def("Literal"));
	    def("EnumDefaultedMember")
	        .build("id")
	        .field("id", def("Identifier"));
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(flow$2, flow$2.exports));

	var esprima$2 = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var es2020_1 = tslib_1.__importDefault(es2020.exports);
	var types_1 = tslib_1.__importDefault(types$9);
	var shared_1 = tslib_1.__importDefault(shared.exports);
	function default_1(fork) {
	    fork.use(es2020_1.default);
	    var types = fork.use(types_1.default);
	    var defaults = fork.use(shared_1.default).defaults;
	    var def = types.Type.def;
	    var or = types.Type.or;
	    def("VariableDeclaration")
	        .field("declarations", [or(def("VariableDeclarator"), def("Identifier") // Esprima deviation.
	        )]);
	    def("Property")
	        .field("value", or(def("Expression"), def("Pattern") // Esprima deviation.
	    ));
	    def("ArrayPattern")
	        .field("elements", [or(def("Pattern"), def("SpreadElement"), null)]);
	    def("ObjectPattern")
	        .field("properties", [or(def("Property"), def("PropertyPattern"), def("SpreadPropertyPattern"), def("SpreadProperty") // Used by Esprima.
	        )]);
	    // Like ModuleSpecifier, except type:"ExportSpecifier" and buildable.
	    // export {<id [as name]>} [from ...];
	    def("ExportSpecifier")
	        .bases("ModuleSpecifier")
	        .build("id", "name");
	    // export <*> from ...;
	    def("ExportBatchSpecifier")
	        .bases("Specifier")
	        .build();
	    def("ExportDeclaration")
	        .bases("Declaration")
	        .build("default", "declaration", "specifiers", "source")
	        .field("default", Boolean)
	        .field("declaration", or(def("Declaration"), def("Expression"), // Implies default.
	    null))
	        .field("specifiers", [or(def("ExportSpecifier"), def("ExportBatchSpecifier"))], defaults.emptyArray)
	        .field("source", or(def("Literal"), null), defaults["null"]);
	    def("Block")
	        .bases("Comment")
	        .build("value", /*optional:*/ "leading", "trailing");
	    def("Line")
	        .bases("Comment")
	        .build("value", /*optional:*/ "leading", "trailing");
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(esprima$2, esprima$2.exports));

	var babel$1 = {exports: {}};

	var babelCore = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var es_proposals_1 = tslib_1.__importDefault(esProposals.exports);
	var types_1 = tslib_1.__importDefault(types$9);
	var shared_1 = tslib_1.__importDefault(shared.exports);
	function default_1(fork) {
	    fork.use(es_proposals_1.default);
	    var types = fork.use(types_1.default);
	    var defaults = fork.use(shared_1.default).defaults;
	    var def = types.Type.def;
	    var or = types.Type.or;
	    def("Noop")
	        .bases("Statement")
	        .build();
	    def("DoExpression")
	        .bases("Expression")
	        .build("body")
	        .field("body", [def("Statement")]);
	    def("BindExpression")
	        .bases("Expression")
	        .build("object", "callee")
	        .field("object", or(def("Expression"), null))
	        .field("callee", def("Expression"));
	    def("ParenthesizedExpression")
	        .bases("Expression")
	        .build("expression")
	        .field("expression", def("Expression"));
	    def("ExportNamespaceSpecifier")
	        .bases("Specifier")
	        .build("exported")
	        .field("exported", def("Identifier"));
	    def("ExportDefaultSpecifier")
	        .bases("Specifier")
	        .build("exported")
	        .field("exported", def("Identifier"));
	    def("CommentBlock")
	        .bases("Comment")
	        .build("value", /*optional:*/ "leading", "trailing");
	    def("CommentLine")
	        .bases("Comment")
	        .build("value", /*optional:*/ "leading", "trailing");
	    def("Directive")
	        .bases("Node")
	        .build("value")
	        .field("value", def("DirectiveLiteral"));
	    def("DirectiveLiteral")
	        .bases("Node", "Expression")
	        .build("value")
	        .field("value", String, defaults["use strict"]);
	    def("InterpreterDirective")
	        .bases("Node")
	        .build("value")
	        .field("value", String);
	    def("BlockStatement")
	        .bases("Statement")
	        .build("body")
	        .field("body", [def("Statement")])
	        .field("directives", [def("Directive")], defaults.emptyArray);
	    def("Program")
	        .bases("Node")
	        .build("body")
	        .field("body", [def("Statement")])
	        .field("directives", [def("Directive")], defaults.emptyArray)
	        .field("interpreter", or(def("InterpreterDirective"), null), defaults["null"]);
	    // Split Literal
	    def("StringLiteral")
	        .bases("Literal")
	        .build("value")
	        .field("value", String);
	    def("NumericLiteral")
	        .bases("Literal")
	        .build("value")
	        .field("value", Number)
	        .field("raw", or(String, null), defaults["null"])
	        .field("extra", {
	        rawValue: Number,
	        raw: String
	    }, function getDefault() {
	        return {
	            rawValue: this.value,
	            raw: this.value + ""
	        };
	    });
	    def("BigIntLiteral")
	        .bases("Literal")
	        .build("value")
	        // Only String really seems appropriate here, since BigInt values
	        // often exceed the limits of JS numbers.
	        .field("value", or(String, Number))
	        .field("extra", {
	        rawValue: String,
	        raw: String
	    }, function getDefault() {
	        return {
	            rawValue: String(this.value),
	            raw: this.value + "n"
	        };
	    });
	    def("NullLiteral")
	        .bases("Literal")
	        .build()
	        .field("value", null, defaults["null"]);
	    def("BooleanLiteral")
	        .bases("Literal")
	        .build("value")
	        .field("value", Boolean);
	    def("RegExpLiteral")
	        .bases("Literal")
	        .build("pattern", "flags")
	        .field("pattern", String)
	        .field("flags", String)
	        .field("value", RegExp, function () {
	        return new RegExp(this.pattern, this.flags);
	    });
	    var ObjectExpressionProperty = or(def("Property"), def("ObjectMethod"), def("ObjectProperty"), def("SpreadProperty"), def("SpreadElement"));
	    // Split Property -> ObjectProperty and ObjectMethod
	    def("ObjectExpression")
	        .bases("Expression")
	        .build("properties")
	        .field("properties", [ObjectExpressionProperty]);
	    // ObjectMethod hoist .value properties to own properties
	    def("ObjectMethod")
	        .bases("Node", "Function")
	        .build("kind", "key", "params", "body", "computed")
	        .field("kind", or("method", "get", "set"))
	        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	        .field("params", [def("Pattern")])
	        .field("body", def("BlockStatement"))
	        .field("computed", Boolean, defaults["false"])
	        .field("generator", Boolean, defaults["false"])
	        .field("async", Boolean, defaults["false"])
	        .field("accessibility", // TypeScript
	    or(def("Literal"), null), defaults["null"])
	        .field("decorators", or([def("Decorator")], null), defaults["null"]);
	    def("ObjectProperty")
	        .bases("Node")
	        .build("key", "value")
	        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	        .field("value", or(def("Expression"), def("Pattern")))
	        .field("accessibility", // TypeScript
	    or(def("Literal"), null), defaults["null"])
	        .field("computed", Boolean, defaults["false"]);
	    var ClassBodyElement = or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"), def("ClassPrivateProperty"), def("ClassMethod"), def("ClassPrivateMethod"));
	    // MethodDefinition -> ClassMethod
	    def("ClassBody")
	        .bases("Declaration")
	        .build("body")
	        .field("body", [ClassBodyElement]);
	    def("ClassMethod")
	        .bases("Declaration", "Function")
	        .build("kind", "key", "params", "body", "computed", "static")
	        .field("key", or(def("Literal"), def("Identifier"), def("Expression")));
	    def("ClassPrivateMethod")
	        .bases("Declaration", "Function")
	        .build("key", "params", "body", "kind", "computed", "static")
	        .field("key", def("PrivateName"));
	    ["ClassMethod",
	        "ClassPrivateMethod",
	    ].forEach(function (typeName) {
	        def(typeName)
	            .field("kind", or("get", "set", "method", "constructor"), function () { return "method"; })
	            .field("body", def("BlockStatement"))
	            .field("computed", Boolean, defaults["false"])
	            .field("static", or(Boolean, null), defaults["null"])
	            .field("abstract", or(Boolean, null), defaults["null"])
	            .field("access", or("public", "private", "protected", null), defaults["null"])
	            .field("accessibility", or("public", "private", "protected", null), defaults["null"])
	            .field("decorators", or([def("Decorator")], null), defaults["null"])
	            .field("optional", or(Boolean, null), defaults["null"]);
	    });
	    var ObjectPatternProperty = or(def("Property"), def("PropertyPattern"), def("SpreadPropertyPattern"), def("SpreadProperty"), // Used by Esprima
	    def("ObjectProperty"), // Babel 6
	    def("RestProperty") // Babel 6
	    );
	    // Split into RestProperty and SpreadProperty
	    def("ObjectPattern")
	        .bases("Pattern")
	        .build("properties")
	        .field("properties", [ObjectPatternProperty])
	        .field("decorators", or([def("Decorator")], null), defaults["null"]);
	    def("SpreadProperty")
	        .bases("Node")
	        .build("argument")
	        .field("argument", def("Expression"));
	    def("RestProperty")
	        .bases("Node")
	        .build("argument")
	        .field("argument", def("Expression"));
	    def("ForAwaitStatement")
	        .bases("Statement")
	        .build("left", "right", "body")
	        .field("left", or(def("VariableDeclaration"), def("Expression")))
	        .field("right", def("Expression"))
	        .field("body", def("Statement"));
	    // The callee node of a dynamic import(...) expression.
	    def("Import")
	        .bases("Expression")
	        .build();
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(babelCore, babelCore.exports));

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var babel_core_1 = tslib_1.__importDefault(babelCore.exports);
	var flow_1 = tslib_1.__importDefault(flow$2.exports);
	function default_1(fork) {
	    fork.use(babel_core_1.default);
	    fork.use(flow_1.default);
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(babel$1, babel$1.exports));

	var typescript$3 = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$6;
	var babel_core_1 = tslib_1.__importDefault(babelCore.exports);
	var type_annotations_1 = tslib_1.__importDefault(typeAnnotations.exports);
	var types_1 = tslib_1.__importDefault(types$9);
	var shared_1 = tslib_1.__importDefault(shared.exports);
	function default_1(fork) {
	    // Since TypeScript is parsed by Babylon, include the core Babylon types
	    // but omit the Flow-related types.
	    fork.use(babel_core_1.default);
	    fork.use(type_annotations_1.default);
	    var types = fork.use(types_1.default);
	    var n = types.namedTypes;
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(shared_1.default).defaults;
	    var StringLiteral = types.Type.from(function (value, deep) {
	        if (n.StringLiteral &&
	            n.StringLiteral.check(value, deep)) {
	            return true;
	        }
	        if (n.Literal &&
	            n.Literal.check(value, deep) &&
	            typeof value.value === "string") {
	            return true;
	        }
	        return false;
	    }, "StringLiteral");
	    def("TSType")
	        .bases("Node");
	    var TSEntityName = or(def("Identifier"), def("TSQualifiedName"));
	    def("TSTypeReference")
	        .bases("TSType", "TSHasOptionalTypeParameterInstantiation")
	        .build("typeName", "typeParameters")
	        .field("typeName", TSEntityName);
	    // An abstract (non-buildable) base type that provide a commonly-needed
	    // optional .typeParameters field.
	    def("TSHasOptionalTypeParameterInstantiation")
	        .field("typeParameters", or(def("TSTypeParameterInstantiation"), null), defaults["null"]);
	    // An abstract (non-buildable) base type that provide a commonly-needed
	    // optional .typeParameters field.
	    def("TSHasOptionalTypeParameters")
	        .field("typeParameters", or(def("TSTypeParameterDeclaration"), null, void 0), defaults["null"]);
	    // An abstract (non-buildable) base type that provide a commonly-needed
	    // optional .typeAnnotation field.
	    def("TSHasOptionalTypeAnnotation")
	        .field("typeAnnotation", or(def("TSTypeAnnotation"), null), defaults["null"]);
	    def("TSQualifiedName")
	        .bases("Node")
	        .build("left", "right")
	        .field("left", TSEntityName)
	        .field("right", TSEntityName);
	    def("TSAsExpression")
	        .bases("Expression", "Pattern")
	        .build("expression", "typeAnnotation")
	        .field("expression", def("Expression"))
	        .field("typeAnnotation", def("TSType"))
	        .field("extra", or({ parenthesized: Boolean }, null), defaults["null"]);
	    def("TSNonNullExpression")
	        .bases("Expression", "Pattern")
	        .build("expression")
	        .field("expression", def("Expression"));
	    [
	        "TSAnyKeyword",
	        "TSBigIntKeyword",
	        "TSBooleanKeyword",
	        "TSNeverKeyword",
	        "TSNullKeyword",
	        "TSNumberKeyword",
	        "TSObjectKeyword",
	        "TSStringKeyword",
	        "TSSymbolKeyword",
	        "TSUndefinedKeyword",
	        "TSUnknownKeyword",
	        "TSVoidKeyword",
	        "TSThisType",
	    ].forEach(function (keywordType) {
	        def(keywordType)
	            .bases("TSType")
	            .build();
	    });
	    def("TSArrayType")
	        .bases("TSType")
	        .build("elementType")
	        .field("elementType", def("TSType"));
	    def("TSLiteralType")
	        .bases("TSType")
	        .build("literal")
	        .field("literal", or(def("NumericLiteral"), def("StringLiteral"), def("BooleanLiteral"), def("TemplateLiteral"), def("UnaryExpression")));
	    ["TSUnionType",
	        "TSIntersectionType",
	    ].forEach(function (typeName) {
	        def(typeName)
	            .bases("TSType")
	            .build("types")
	            .field("types", [def("TSType")]);
	    });
	    def("TSConditionalType")
	        .bases("TSType")
	        .build("checkType", "extendsType", "trueType", "falseType")
	        .field("checkType", def("TSType"))
	        .field("extendsType", def("TSType"))
	        .field("trueType", def("TSType"))
	        .field("falseType", def("TSType"));
	    def("TSInferType")
	        .bases("TSType")
	        .build("typeParameter")
	        .field("typeParameter", def("TSTypeParameter"));
	    def("TSParenthesizedType")
	        .bases("TSType")
	        .build("typeAnnotation")
	        .field("typeAnnotation", def("TSType"));
	    var ParametersType = [or(def("Identifier"), def("RestElement"), def("ArrayPattern"), def("ObjectPattern"))];
	    ["TSFunctionType",
	        "TSConstructorType",
	    ].forEach(function (typeName) {
	        def(typeName)
	            .bases("TSType", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation")
	            .build("parameters")
	            .field("parameters", ParametersType);
	    });
	    def("TSDeclareFunction")
	        .bases("Declaration", "TSHasOptionalTypeParameters")
	        .build("id", "params", "returnType")
	        .field("declare", Boolean, defaults["false"])
	        .field("async", Boolean, defaults["false"])
	        .field("generator", Boolean, defaults["false"])
	        .field("id", or(def("Identifier"), null), defaults["null"])
	        .field("params", [def("Pattern")])
	        // tSFunctionTypeAnnotationCommon
	        .field("returnType", or(def("TSTypeAnnotation"), def("Noop"), // Still used?
	    null), defaults["null"]);
	    def("TSDeclareMethod")
	        .bases("Declaration", "TSHasOptionalTypeParameters")
	        .build("key", "params", "returnType")
	        .field("async", Boolean, defaults["false"])
	        .field("generator", Boolean, defaults["false"])
	        .field("params", [def("Pattern")])
	        // classMethodOrPropertyCommon
	        .field("abstract", Boolean, defaults["false"])
	        .field("accessibility", or("public", "private", "protected", void 0), defaults["undefined"])
	        .field("static", Boolean, defaults["false"])
	        .field("computed", Boolean, defaults["false"])
	        .field("optional", Boolean, defaults["false"])
	        .field("key", or(def("Identifier"), def("StringLiteral"), def("NumericLiteral"), 
	    // Only allowed if .computed is true.
	    def("Expression")))
	        // classMethodOrDeclareMethodCommon
	        .field("kind", or("get", "set", "method", "constructor"), function getDefault() { return "method"; })
	        .field("access", // Not "accessibility"?
	    or("public", "private", "protected", void 0), defaults["undefined"])
	        .field("decorators", or([def("Decorator")], null), defaults["null"])
	        // tSFunctionTypeAnnotationCommon
	        .field("returnType", or(def("TSTypeAnnotation"), def("Noop"), // Still used?
	    null), defaults["null"]);
	    def("TSMappedType")
	        .bases("TSType")
	        .build("typeParameter", "typeAnnotation")
	        .field("readonly", or(Boolean, "+", "-"), defaults["false"])
	        .field("typeParameter", def("TSTypeParameter"))
	        .field("optional", or(Boolean, "+", "-"), defaults["false"])
	        .field("typeAnnotation", or(def("TSType"), null), defaults["null"]);
	    def("TSTupleType")
	        .bases("TSType")
	        .build("elementTypes")
	        .field("elementTypes", [or(def("TSType"), def("TSNamedTupleMember"))]);
	    def("TSNamedTupleMember")
	        .bases("TSType")
	        .build("label", "elementType", "optional")
	        .field("label", def("Identifier"))
	        .field("optional", Boolean, defaults["false"])
	        .field("elementType", def("TSType"));
	    def("TSRestType")
	        .bases("TSType")
	        .build("typeAnnotation")
	        .field("typeAnnotation", def("TSType"));
	    def("TSOptionalType")
	        .bases("TSType")
	        .build("typeAnnotation")
	        .field("typeAnnotation", def("TSType"));
	    def("TSIndexedAccessType")
	        .bases("TSType")
	        .build("objectType", "indexType")
	        .field("objectType", def("TSType"))
	        .field("indexType", def("TSType"));
	    def("TSTypeOperator")
	        .bases("TSType")
	        .build("operator")
	        .field("operator", String)
	        .field("typeAnnotation", def("TSType"));
	    def("TSTypeAnnotation")
	        .bases("Node")
	        .build("typeAnnotation")
	        .field("typeAnnotation", or(def("TSType"), def("TSTypeAnnotation")));
	    def("TSIndexSignature")
	        .bases("Declaration", "TSHasOptionalTypeAnnotation")
	        .build("parameters", "typeAnnotation")
	        .field("parameters", [def("Identifier")]) // Length === 1
	        .field("readonly", Boolean, defaults["false"]);
	    def("TSPropertySignature")
	        .bases("Declaration", "TSHasOptionalTypeAnnotation")
	        .build("key", "typeAnnotation", "optional")
	        .field("key", def("Expression"))
	        .field("computed", Boolean, defaults["false"])
	        .field("readonly", Boolean, defaults["false"])
	        .field("optional", Boolean, defaults["false"])
	        .field("initializer", or(def("Expression"), null), defaults["null"]);
	    def("TSMethodSignature")
	        .bases("Declaration", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation")
	        .build("key", "parameters", "typeAnnotation")
	        .field("key", def("Expression"))
	        .field("computed", Boolean, defaults["false"])
	        .field("optional", Boolean, defaults["false"])
	        .field("parameters", ParametersType);
	    def("TSTypePredicate")
	        .bases("TSTypeAnnotation", "TSType")
	        .build("parameterName", "typeAnnotation", "asserts")
	        .field("parameterName", or(def("Identifier"), def("TSThisType")))
	        .field("typeAnnotation", or(def("TSTypeAnnotation"), null), defaults["null"])
	        .field("asserts", Boolean, defaults["false"]);
	    ["TSCallSignatureDeclaration",
	        "TSConstructSignatureDeclaration",
	    ].forEach(function (typeName) {
	        def(typeName)
	            .bases("Declaration", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation")
	            .build("parameters", "typeAnnotation")
	            .field("parameters", ParametersType);
	    });
	    def("TSEnumMember")
	        .bases("Node")
	        .build("id", "initializer")
	        .field("id", or(def("Identifier"), StringLiteral))
	        .field("initializer", or(def("Expression"), null), defaults["null"]);
	    def("TSTypeQuery")
	        .bases("TSType")
	        .build("exprName")
	        .field("exprName", or(TSEntityName, def("TSImportType")));
	    // Inferred from Babylon's tsParseTypeMember method.
	    var TSTypeMember = or(def("TSCallSignatureDeclaration"), def("TSConstructSignatureDeclaration"), def("TSIndexSignature"), def("TSMethodSignature"), def("TSPropertySignature"));
	    def("TSTypeLiteral")
	        .bases("TSType")
	        .build("members")
	        .field("members", [TSTypeMember]);
	    def("TSTypeParameter")
	        .bases("Identifier")
	        .build("name", "constraint", "default")
	        .field("name", String)
	        .field("constraint", or(def("TSType"), void 0), defaults["undefined"])
	        .field("default", or(def("TSType"), void 0), defaults["undefined"]);
	    def("TSTypeAssertion")
	        .bases("Expression", "Pattern")
	        .build("typeAnnotation", "expression")
	        .field("typeAnnotation", def("TSType"))
	        .field("expression", def("Expression"))
	        .field("extra", or({ parenthesized: Boolean }, null), defaults["null"]);
	    def("TSTypeParameterDeclaration")
	        .bases("Declaration")
	        .build("params")
	        .field("params", [def("TSTypeParameter")]);
	    def("TSTypeParameterInstantiation")
	        .bases("Node")
	        .build("params")
	        .field("params", [def("TSType")]);
	    def("TSEnumDeclaration")
	        .bases("Declaration")
	        .build("id", "members")
	        .field("id", def("Identifier"))
	        .field("const", Boolean, defaults["false"])
	        .field("declare", Boolean, defaults["false"])
	        .field("members", [def("TSEnumMember")])
	        .field("initializer", or(def("Expression"), null), defaults["null"]);
	    def("TSTypeAliasDeclaration")
	        .bases("Declaration", "TSHasOptionalTypeParameters")
	        .build("id", "typeAnnotation")
	        .field("id", def("Identifier"))
	        .field("declare", Boolean, defaults["false"])
	        .field("typeAnnotation", def("TSType"));
	    def("TSModuleBlock")
	        .bases("Node")
	        .build("body")
	        .field("body", [def("Statement")]);
	    def("TSModuleDeclaration")
	        .bases("Declaration")
	        .build("id", "body")
	        .field("id", or(StringLiteral, TSEntityName))
	        .field("declare", Boolean, defaults["false"])
	        .field("global", Boolean, defaults["false"])
	        .field("body", or(def("TSModuleBlock"), def("TSModuleDeclaration"), null), defaults["null"]);
	    def("TSImportType")
	        .bases("TSType", "TSHasOptionalTypeParameterInstantiation")
	        .build("argument", "qualifier", "typeParameters")
	        .field("argument", StringLiteral)
	        .field("qualifier", or(TSEntityName, void 0), defaults["undefined"]);
	    def("TSImportEqualsDeclaration")
	        .bases("Declaration")
	        .build("id", "moduleReference")
	        .field("id", def("Identifier"))
	        .field("isExport", Boolean, defaults["false"])
	        .field("moduleReference", or(TSEntityName, def("TSExternalModuleReference")));
	    def("TSExternalModuleReference")
	        .bases("Declaration")
	        .build("expression")
	        .field("expression", StringLiteral);
	    def("TSExportAssignment")
	        .bases("Statement")
	        .build("expression")
	        .field("expression", def("Expression"));
	    def("TSNamespaceExportDeclaration")
	        .bases("Declaration")
	        .build("id")
	        .field("id", def("Identifier"));
	    def("TSInterfaceBody")
	        .bases("Node")
	        .build("body")
	        .field("body", [TSTypeMember]);
	    def("TSExpressionWithTypeArguments")
	        .bases("TSType", "TSHasOptionalTypeParameterInstantiation")
	        .build("expression", "typeParameters")
	        .field("expression", TSEntityName);
	    def("TSInterfaceDeclaration")
	        .bases("Declaration", "TSHasOptionalTypeParameters")
	        .build("id", "body")
	        .field("id", TSEntityName)
	        .field("declare", Boolean, defaults["false"])
	        .field("extends", or([def("TSExpressionWithTypeArguments")], null), defaults["null"])
	        .field("body", def("TSInterfaceBody"));
	    def("TSParameterProperty")
	        .bases("Pattern")
	        .build("parameter")
	        .field("accessibility", or("public", "private", "protected", void 0), defaults["undefined"])
	        .field("readonly", Boolean, defaults["false"])
	        .field("parameter", or(def("Identifier"), def("AssignmentPattern")));
	    def("ClassProperty")
	        .field("access", // Not "accessibility"?
	    or("public", "private", "protected", void 0), defaults["undefined"]);
	    // Defined already in es6 and babel-core.
	    def("ClassBody")
	        .field("body", [or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"), def("ClassPrivateProperty"), def("ClassMethod"), def("ClassPrivateMethod"), 
	        // Just need to add these types:
	        def("TSDeclareMethod"), TSTypeMember)]);
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(typescript$3, typescript$3.exports));

	var namedTypes$1 = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.namedTypes = void 0;
	(function (namedTypes) {
	})(exports.namedTypes || (exports.namedTypes = {}));
	}(namedTypes$1));

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.visit = exports.use = exports.Type = exports.someField = exports.PathVisitor = exports.Path = exports.NodePath = exports.namedTypes = exports.getSupertypeNames = exports.getFieldValue = exports.getFieldNames = exports.getBuilderName = exports.finalize = exports.eachField = exports.defineMethod = exports.builtInTypes = exports.builders = exports.astNodesAreEquivalent = void 0;
	var tslib_1 = require$$0$6;
	var fork_1 = tslib_1.__importDefault(fork$1.exports);
	var core_1 = tslib_1.__importDefault(core$1.exports);
	var es6_1 = tslib_1.__importDefault(es6.exports);
	var es2016_1 = tslib_1.__importDefault(es2016.exports);
	var es2017_1 = tslib_1.__importDefault(es2017$1.exports);
	var es2018_1 = tslib_1.__importDefault(es2018.exports);
	var es2019_1 = tslib_1.__importDefault(es2019.exports);
	var es2020_1 = tslib_1.__importDefault(es2020.exports);
	var jsx_1 = tslib_1.__importDefault(jsx$3.exports);
	var flow_1 = tslib_1.__importDefault(flow$2.exports);
	var esprima_1 = tslib_1.__importDefault(esprima$2.exports);
	var babel_1 = tslib_1.__importDefault(babel$1.exports);
	var typescript_1 = tslib_1.__importDefault(typescript$3.exports);
	var es_proposals_1 = tslib_1.__importDefault(esProposals.exports);
	var namedTypes_1 = namedTypes$1;
	Object.defineProperty(exports, "namedTypes", { enumerable: true, get: function () { return namedTypes_1.namedTypes; } });
	var _a = fork_1.default([
	    // This core module of AST types captures ES5 as it is parsed today by
	    // git://github.com/ariya/esprima.git#master.
	    core_1.default,
	    // Feel free to add to or remove from this list of extension modules to
	    // configure the precise type hierarchy that you need.
	    es6_1.default,
	    es2016_1.default,
	    es2017_1.default,
	    es2018_1.default,
	    es2019_1.default,
	    es2020_1.default,
	    jsx_1.default,
	    flow_1.default,
	    esprima_1.default,
	    babel_1.default,
	    typescript_1.default,
	    es_proposals_1.default,
	]), astNodesAreEquivalent = _a.astNodesAreEquivalent, builders = _a.builders, builtInTypes = _a.builtInTypes, defineMethod = _a.defineMethod, eachField = _a.eachField, finalize = _a.finalize, getBuilderName = _a.getBuilderName, getFieldNames = _a.getFieldNames, getFieldValue = _a.getFieldValue, getSupertypeNames = _a.getSupertypeNames, n = _a.namedTypes, NodePath = _a.NodePath, Path = _a.Path, PathVisitor = _a.PathVisitor, someField = _a.someField, Type = _a.Type, use = _a.use, visit = _a.visit;
	exports.astNodesAreEquivalent = astNodesAreEquivalent;
	exports.builders = builders;
	exports.builtInTypes = builtInTypes;
	exports.defineMethod = defineMethod;
	exports.eachField = eachField;
	exports.finalize = finalize;
	exports.getBuilderName = getBuilderName;
	exports.getFieldNames = getFieldNames;
	exports.getFieldValue = getFieldValue;
	exports.getSupertypeNames = getSupertypeNames;
	exports.NodePath = NodePath;
	exports.Path = Path;
	exports.PathVisitor = PathVisitor;
	exports.someField = someField;
	exports.Type = Type;
	exports.use = use;
	exports.visit = visit;
	// Populate the exported fields of the namedTypes namespace, while still
	// retaining its member types.
	Object.assign(namedTypes_1.namedTypes, n);
	}(main));

	var parser$3 = {};

	var options$3 = {};

	var esprima$1 = {};

	var util$r = {};

	var sourceMap$3 = {};

	var sourceMapGenerator$2 = {};

	var base64Vlq$3 = {};

	var base64$7 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var intToCharMap$3 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

	/**
	 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	 */
	base64$7.encode = function (number) {
	  if (0 <= number && number < intToCharMap$3.length) {
	    return intToCharMap$3[number];
	  }
	  throw new TypeError("Must be between 0 and 63: " + number);
	};

	/**
	 * Decode a single base 64 character code digit to an integer. Returns -1 on
	 * failure.
	 */
	base64$7.decode = function (charCode) {
	  var bigA = 65;     // 'A'
	  var bigZ = 90;     // 'Z'

	  var littleA = 97;  // 'a'
	  var littleZ = 122; // 'z'

	  var zero = 48;     // '0'
	  var nine = 57;     // '9'

	  var plus = 43;     // '+'
	  var slash = 47;    // '/'

	  var littleOffset = 26;
	  var numberOffset = 52;

	  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
	  if (bigA <= charCode && charCode <= bigZ) {
	    return (charCode - bigA);
	  }

	  // 26 - 51: abcdefghijklmnopqrstuvwxyz
	  if (littleA <= charCode && charCode <= littleZ) {
	    return (charCode - littleA + littleOffset);
	  }

	  // 52 - 61: 0123456789
	  if (zero <= charCode && charCode <= nine) {
	    return (charCode - zero + numberOffset);
	  }

	  // 62: +
	  if (charCode == plus) {
	    return 62;
	  }

	  // 63: /
	  if (charCode == slash) {
	    return 63;
	  }

	  // Invalid base64 digit.
	  return -1;
	};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	var base64$6 = base64$7;

	// A single base 64 digit can contain 6 bits of data. For the base 64 variable
	// length quantities we use in the source map spec, the first bit is the sign,
	// the next four bits are the actual value, and the 6th bit is the
	// continuation bit. The continuation bit tells us whether there are more
	// digits in this value following this digit.
	//
	//   Continuation
	//   |    Sign
	//   |    |
	//   V    V
	//   101011

	var VLQ_BASE_SHIFT$3 = 5;

	// binary: 100000
	var VLQ_BASE$3 = 1 << VLQ_BASE_SHIFT$3;

	// binary: 011111
	var VLQ_BASE_MASK$3 = VLQ_BASE$3 - 1;

	// binary: 100000
	var VLQ_CONTINUATION_BIT$3 = VLQ_BASE$3;

	/**
	 * Converts from a two-complement value to a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	 */
	function toVLQSigned$3(aValue) {
	  return aValue < 0
	    ? ((-aValue) << 1) + 1
	    : (aValue << 1) + 0;
	}

	/**
	 * Converts to a two-complement value from a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	 */
	function fromVLQSigned$2(aValue) {
	  var isNegative = (aValue & 1) === 1;
	  var shifted = aValue >> 1;
	  return isNegative
	    ? -shifted
	    : shifted;
	}

	/**
	 * Returns the base 64 VLQ encoded value.
	 */
	base64Vlq$3.encode = function base64VLQ_encode(aValue) {
	  var encoded = "";
	  var digit;

	  var vlq = toVLQSigned$3(aValue);

	  do {
	    digit = vlq & VLQ_BASE_MASK$3;
	    vlq >>>= VLQ_BASE_SHIFT$3;
	    if (vlq > 0) {
	      // There are still more digits in this value, so we must make sure the
	      // continuation bit is marked.
	      digit |= VLQ_CONTINUATION_BIT$3;
	    }
	    encoded += base64$6.encode(digit);
	  } while (vlq > 0);

	  return encoded;
	};

	/**
	 * Decodes the next base 64 VLQ value from the given string and returns the
	 * value and the rest of the string via the out parameter.
	 */
	base64Vlq$3.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	  var strLen = aStr.length;
	  var result = 0;
	  var shift = 0;
	  var continuation, digit;

	  do {
	    if (aIndex >= strLen) {
	      throw new Error("Expected more digits in base 64 VLQ value.");
	    }

	    digit = base64$6.decode(aStr.charCodeAt(aIndex++));
	    if (digit === -1) {
	      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	    }

	    continuation = !!(digit & VLQ_CONTINUATION_BIT$3);
	    digit &= VLQ_BASE_MASK$3;
	    result = result + (digit << shift);
	    shift += VLQ_BASE_SHIFT$3;
	  } while (continuation);

	  aOutParam.value = fromVLQSigned$2(result);
	  aOutParam.rest = aIndex;
	};

	var util$q = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	(function (exports) {
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	/**
	 * This is a helper function for getting values from parameter/options
	 * objects.
	 *
	 * @param args The object we are extracting values from
	 * @param name The name of the property we are getting.
	 * @param defaultValue An optional value to return if the property is missing
	 * from the object. If this is not specified and the property is missing, an
	 * error will be thrown.
	 */
	function getArg(aArgs, aName, aDefaultValue) {
	  if (aName in aArgs) {
	    return aArgs[aName];
	  } else if (arguments.length === 3) {
	    return aDefaultValue;
	  } else {
	    throw new Error('"' + aName + '" is a required argument.');
	  }
	}
	exports.getArg = getArg;

	var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
	var dataUrlRegexp = /^data:.+\,.+$/;

	function urlParse(aUrl) {
	  var match = aUrl.match(urlRegexp);
	  if (!match) {
	    return null;
	  }
	  return {
	    scheme: match[1],
	    auth: match[2],
	    host: match[3],
	    port: match[4],
	    path: match[5]
	  };
	}
	exports.urlParse = urlParse;

	function urlGenerate(aParsedUrl) {
	  var url = '';
	  if (aParsedUrl.scheme) {
	    url += aParsedUrl.scheme + ':';
	  }
	  url += '//';
	  if (aParsedUrl.auth) {
	    url += aParsedUrl.auth + '@';
	  }
	  if (aParsedUrl.host) {
	    url += aParsedUrl.host;
	  }
	  if (aParsedUrl.port) {
	    url += ":" + aParsedUrl.port;
	  }
	  if (aParsedUrl.path) {
	    url += aParsedUrl.path;
	  }
	  return url;
	}
	exports.urlGenerate = urlGenerate;

	/**
	 * Normalizes a path, or the path portion of a URL:
	 *
	 * - Replaces consecutive slashes with one slash.
	 * - Removes unnecessary '.' parts.
	 * - Removes unnecessary '<dir>/..' parts.
	 *
	 * Based on code in the Node.js 'path' core module.
	 *
	 * @param aPath The path or url to normalize.
	 */
	function normalize(aPath) {
	  var path = aPath;
	  var url = urlParse(aPath);
	  if (url) {
	    if (!url.path) {
	      return aPath;
	    }
	    path = url.path;
	  }
	  var isAbsolute = exports.isAbsolute(path);

	  var parts = path.split(/\/+/);
	  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	    part = parts[i];
	    if (part === '.') {
	      parts.splice(i, 1);
	    } else if (part === '..') {
	      up++;
	    } else if (up > 0) {
	      if (part === '') {
	        // The first part is blank if the path is absolute. Trying to go
	        // above the root is a no-op. Therefore we can remove all '..' parts
	        // directly after the root.
	        parts.splice(i + 1, up);
	        up = 0;
	      } else {
	        parts.splice(i, 2);
	        up--;
	      }
	    }
	  }
	  path = parts.join('/');

	  if (path === '') {
	    path = isAbsolute ? '/' : '.';
	  }

	  if (url) {
	    url.path = path;
	    return urlGenerate(url);
	  }
	  return path;
	}
	exports.normalize = normalize;

	/**
	 * Joins two paths/URLs.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be joined with the root.
	 *
	 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	 *   first.
	 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	 *   is updated with the result and aRoot is returned. Otherwise the result
	 *   is returned.
	 *   - If aPath is absolute, the result is aPath.
	 *   - Otherwise the two paths are joined with a slash.
	 * - Joining for example 'http://' and 'www.example.com' is also supported.
	 */
	function join(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }
	  if (aPath === "") {
	    aPath = ".";
	  }
	  var aPathUrl = urlParse(aPath);
	  var aRootUrl = urlParse(aRoot);
	  if (aRootUrl) {
	    aRoot = aRootUrl.path || '/';
	  }

	  // `join(foo, '//www.example.org')`
	  if (aPathUrl && !aPathUrl.scheme) {
	    if (aRootUrl) {
	      aPathUrl.scheme = aRootUrl.scheme;
	    }
	    return urlGenerate(aPathUrl);
	  }

	  if (aPathUrl || aPath.match(dataUrlRegexp)) {
	    return aPath;
	  }

	  // `join('http://', 'www.example.com')`
	  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	    aRootUrl.host = aPath;
	    return urlGenerate(aRootUrl);
	  }

	  var joined = aPath.charAt(0) === '/'
	    ? aPath
	    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

	  if (aRootUrl) {
	    aRootUrl.path = joined;
	    return urlGenerate(aRootUrl);
	  }
	  return joined;
	}
	exports.join = join;

	exports.isAbsolute = function (aPath) {
	  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
	};

	/**
	 * Make a path relative to a URL or another path.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be made relative to aRoot.
	 */
	function relative(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }

	  aRoot = aRoot.replace(/\/$/, '');

	  // It is possible for the path to be above the root. In this case, simply
	  // checking whether the root is a prefix of the path won't work. Instead, we
	  // need to remove components from the root one by one, until either we find
	  // a prefix that fits, or we run out of components to remove.
	  var level = 0;
	  while (aPath.indexOf(aRoot + '/') !== 0) {
	    var index = aRoot.lastIndexOf("/");
	    if (index < 0) {
	      return aPath;
	    }

	    // If the only part of the root that is left is the scheme (i.e. http://,
	    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	    // have exhausted all components, so the path is not relative to the root.
	    aRoot = aRoot.slice(0, index);
	    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	      return aPath;
	    }

	    ++level;
	  }

	  // Make sure we add a "../" for each component we removed from the root.
	  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	}
	exports.relative = relative;

	var supportsNullProto = (function () {
	  var obj = Object.create(null);
	  return !('__proto__' in obj);
	}());

	function identity (s) {
	  return s;
	}

	/**
	 * Because behavior goes wacky when you set `__proto__` on objects, we
	 * have to prefix all the strings in our set with an arbitrary character.
	 *
	 * See https://github.com/mozilla/source-map/pull/31 and
	 * https://github.com/mozilla/source-map/issues/30
	 *
	 * @param String aStr
	 */
	function toSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return '$' + aStr;
	  }

	  return aStr;
	}
	exports.toSetString = supportsNullProto ? identity : toSetString;

	function fromSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return aStr.slice(1);
	  }

	  return aStr;
	}
	exports.fromSetString = supportsNullProto ? identity : fromSetString;

	function isProtoString(s) {
	  if (!s) {
	    return false;
	  }

	  var length = s.length;

	  if (length < 9 /* "__proto__".length */) {
	    return false;
	  }

	  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
	      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
	      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
	      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 9) !== 95  /* '_' */) {
	    return false;
	  }

	  for (var i = length - 10; i >= 0; i--) {
	    if (s.charCodeAt(i) !== 36 /* '$' */) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Comparator between two mappings where the original positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same original source/line/column, but different generated
	 * line and column the same. Useful when searching for a mapping with a
	 * stubbed out mapping.
	 */
	function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	  var cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0 || onlyCompareOriginal) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByOriginalPositions = compareByOriginalPositions;

	/**
	 * Comparator between two mappings with deflated source and name indices where
	 * the generated positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same generated line and column, but different
	 * source/name/original line and column the same. Useful when searching for a
	 * mapping with a stubbed out mapping.
	 */
	function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0 || onlyCompareGenerated) {
	    return cmp;
	  }

	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

	function strcmp(aStr1, aStr2) {
	  if (aStr1 === aStr2) {
	    return 0;
	  }

	  if (aStr1 === null) {
	    return 1; // aStr2 !== null
	  }

	  if (aStr2 === null) {
	    return -1; // aStr1 !== null
	  }

	  if (aStr1 > aStr2) {
	    return 1;
	  }

	  return -1;
	}

	/**
	 * Comparator between two mappings with inflated source and name strings where
	 * the generated positions are compared.
	 */
	function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

	/**
	 * Strip any JSON XSSI avoidance prefix from the string (as documented
	 * in the source maps specification), and then parse the string as
	 * JSON.
	 */
	function parseSourceMapInput(str) {
	  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
	}
	exports.parseSourceMapInput = parseSourceMapInput;

	/**
	 * Compute the URL of a source given the the source root, the source's
	 * URL, and the source map's URL.
	 */
	function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
	  sourceURL = sourceURL || '';

	  if (sourceRoot) {
	    // This follows what Chrome does.
	    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
	      sourceRoot += '/';
	    }
	    // The spec says:
	    //   Line 4: An optional source root, useful for relocating source
	    //   files on a server or removing repeated values in the
	    //   “sources” entry.  This value is prepended to the individual
	    //   entries in the “source” field.
	    sourceURL = sourceRoot + sourceURL;
	  }

	  // Historically, SourceMapConsumer did not take the sourceMapURL as
	  // a parameter.  This mode is still somewhat supported, which is why
	  // this code block is conditional.  However, it's preferable to pass
	  // the source map URL to SourceMapConsumer, so that this function
	  // can implement the source URL resolution algorithm as outlined in
	  // the spec.  This block is basically the equivalent of:
	  //    new URL(sourceURL, sourceMapURL).toString()
	  // ... except it avoids using URL, which wasn't available in the
	  // older releases of node still supported by this library.
	  //
	  // The spec says:
	  //   If the sources are not absolute URLs after prepending of the
	  //   “sourceRoot”, the sources are resolved relative to the
	  //   SourceMap (like resolving script src in a html document).
	  if (sourceMapURL) {
	    var parsed = urlParse(sourceMapURL);
	    if (!parsed) {
	      throw new Error("sourceMapURL could not be parsed");
	    }
	    if (parsed.path) {
	      // Strip the last path component, but keep the "/".
	      var index = parsed.path.lastIndexOf('/');
	      if (index >= 0) {
	        parsed.path = parsed.path.substring(0, index + 1);
	      }
	    }
	    sourceURL = join(urlGenerate(parsed), sourceURL);
	  }

	  return normalize(sourceURL);
	}
	exports.computeSourceURL = computeSourceURL;
	}(util$q));

	var arraySet$3 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util$p = util$q;
	var has$5 = Object.prototype.hasOwnProperty;
	var hasNativeMap$2 = typeof Map !== "undefined";

	/**
	 * A data structure which is a combination of an array and a set. Adding a new
	 * member is O(1), testing for membership is O(1), and finding the index of an
	 * element is O(1). Removing elements from the set is not supported. Only
	 * strings are supported for membership.
	 */
	function ArraySet$b() {
	  this._array = [];
	  this._set = hasNativeMap$2 ? new Map() : Object.create(null);
	}

	/**
	 * Static method for creating ArraySet instances from an existing array.
	 */
	ArraySet$b.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	  var set = new ArraySet$b();
	  for (var i = 0, len = aArray.length; i < len; i++) {
	    set.add(aArray[i], aAllowDuplicates);
	  }
	  return set;
	};

	/**
	 * Return how many unique items are in this ArraySet. If duplicates have been
	 * added, than those do not count towards the size.
	 *
	 * @returns Number
	 */
	ArraySet$b.prototype.size = function ArraySet_size() {
	  return hasNativeMap$2 ? this._set.size : Object.getOwnPropertyNames(this._set).length;
	};

	/**
	 * Add the given string to this set.
	 *
	 * @param String aStr
	 */
	ArraySet$b.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	  var sStr = hasNativeMap$2 ? aStr : util$p.toSetString(aStr);
	  var isDuplicate = hasNativeMap$2 ? this.has(aStr) : has$5.call(this._set, sStr);
	  var idx = this._array.length;
	  if (!isDuplicate || aAllowDuplicates) {
	    this._array.push(aStr);
	  }
	  if (!isDuplicate) {
	    if (hasNativeMap$2) {
	      this._set.set(aStr, idx);
	    } else {
	      this._set[sStr] = idx;
	    }
	  }
	};

	/**
	 * Is the given string a member of this set?
	 *
	 * @param String aStr
	 */
	ArraySet$b.prototype.has = function ArraySet_has(aStr) {
	  if (hasNativeMap$2) {
	    return this._set.has(aStr);
	  } else {
	    var sStr = util$p.toSetString(aStr);
	    return has$5.call(this._set, sStr);
	  }
	};

	/**
	 * What is the index of the given string in the array?
	 *
	 * @param String aStr
	 */
	ArraySet$b.prototype.indexOf = function ArraySet_indexOf(aStr) {
	  if (hasNativeMap$2) {
	    var idx = this._set.get(aStr);
	    if (idx >= 0) {
	        return idx;
	    }
	  } else {
	    var sStr = util$p.toSetString(aStr);
	    if (has$5.call(this._set, sStr)) {
	      return this._set[sStr];
	    }
	  }

	  throw new Error('"' + aStr + '" is not in the set.');
	};

	/**
	 * What is the element at the given index?
	 *
	 * @param Number aIdx
	 */
	ArraySet$b.prototype.at = function ArraySet_at(aIdx) {
	  if (aIdx >= 0 && aIdx < this._array.length) {
	    return this._array[aIdx];
	  }
	  throw new Error('No element indexed by ' + aIdx);
	};

	/**
	 * Returns the array representation of this set (which has the proper indices
	 * indicated by indexOf). Note that this is a copy of the internal array used
	 * for storing the members so that no one can mess with internal state.
	 */
	ArraySet$b.prototype.toArray = function ArraySet_toArray() {
	  return this._array.slice();
	};

	arraySet$3.ArraySet = ArraySet$b;

	var mappingList$3 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util$o = util$q;

	/**
	 * Determine whether mappingB is after mappingA with respect to generated
	 * position.
	 */
	function generatedPositionAfter$3(mappingA, mappingB) {
	  // Optimized for most common case
	  var lineA = mappingA.generatedLine;
	  var lineB = mappingB.generatedLine;
	  var columnA = mappingA.generatedColumn;
	  var columnB = mappingB.generatedColumn;
	  return lineB > lineA || lineB == lineA && columnB >= columnA ||
	         util$o.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	}

	/**
	 * A data structure to provide a sorted view of accumulated mappings in a
	 * performance conscious manner. It trades a neglibable overhead in general
	 * case for a large speedup in case of mappings being added in order.
	 */
	function MappingList$7() {
	  this._array = [];
	  this._sorted = true;
	  // Serves as infimum
	  this._last = {generatedLine: -1, generatedColumn: 0};
	}

	/**
	 * Iterate through internal items. This method takes the same arguments that
	 * `Array.prototype.forEach` takes.
	 *
	 * NOTE: The order of the mappings is NOT guaranteed.
	 */
	MappingList$7.prototype.unsortedForEach =
	  function MappingList_forEach(aCallback, aThisArg) {
	    this._array.forEach(aCallback, aThisArg);
	  };

	/**
	 * Add the given source mapping.
	 *
	 * @param Object aMapping
	 */
	MappingList$7.prototype.add = function MappingList_add(aMapping) {
	  if (generatedPositionAfter$3(this._last, aMapping)) {
	    this._last = aMapping;
	    this._array.push(aMapping);
	  } else {
	    this._sorted = false;
	    this._array.push(aMapping);
	  }
	};

	/**
	 * Returns the flat, sorted array of mappings. The mappings are sorted by
	 * generated position.
	 *
	 * WARNING: This method returns internal data without copying, for
	 * performance. The return value must NOT be mutated, and should be treated as
	 * an immutable borrow. If you want to take ownership, you must make your own
	 * copy.
	 */
	MappingList$7.prototype.toArray = function MappingList_toArray() {
	  if (!this._sorted) {
	    this._array.sort(util$o.compareByGeneratedPositionsInflated);
	    this._sorted = true;
	  }
	  return this._array;
	};

	mappingList$3.MappingList = MappingList$7;

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var base64VLQ$6 = base64Vlq$3;
	var util$n = util$q;
	var ArraySet$a = arraySet$3.ArraySet;
	var MappingList$6 = mappingList$3.MappingList;

	/**
	 * An instance of the SourceMapGenerator represents a source map which is
	 * being built incrementally. You may pass an object with the following
	 * properties:
	 *
	 *   - file: The filename of the generated source.
	 *   - sourceRoot: A root for all relative URLs in this source map.
	 */
	function SourceMapGenerator$7(aArgs) {
	  if (!aArgs) {
	    aArgs = {};
	  }
	  this._file = util$n.getArg(aArgs, 'file', null);
	  this._sourceRoot = util$n.getArg(aArgs, 'sourceRoot', null);
	  this._skipValidation = util$n.getArg(aArgs, 'skipValidation', false);
	  this._sources = new ArraySet$a();
	  this._names = new ArraySet$a();
	  this._mappings = new MappingList$6();
	  this._sourcesContents = null;
	}

	SourceMapGenerator$7.prototype._version = 3;

	/**
	 * Creates a new SourceMapGenerator based on a SourceMapConsumer
	 *
	 * @param aSourceMapConsumer The SourceMap.
	 */
	SourceMapGenerator$7.fromSourceMap =
	  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	    var sourceRoot = aSourceMapConsumer.sourceRoot;
	    var generator = new SourceMapGenerator$7({
	      file: aSourceMapConsumer.file,
	      sourceRoot: sourceRoot
	    });
	    aSourceMapConsumer.eachMapping(function (mapping) {
	      var newMapping = {
	        generated: {
	          line: mapping.generatedLine,
	          column: mapping.generatedColumn
	        }
	      };

	      if (mapping.source != null) {
	        newMapping.source = mapping.source;
	        if (sourceRoot != null) {
	          newMapping.source = util$n.relative(sourceRoot, newMapping.source);
	        }

	        newMapping.original = {
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        };

	        if (mapping.name != null) {
	          newMapping.name = mapping.name;
	        }
	      }

	      generator.addMapping(newMapping);
	    });
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var sourceRelative = sourceFile;
	      if (sourceRoot !== null) {
	        sourceRelative = util$n.relative(sourceRoot, sourceFile);
	      }

	      if (!generator._sources.has(sourceRelative)) {
	        generator._sources.add(sourceRelative);
	      }

	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        generator.setSourceContent(sourceFile, content);
	      }
	    });
	    return generator;
	  };

	/**
	 * Add a single mapping from original source line and column to the generated
	 * source's line and column for this source map being created. The mapping
	 * object should have the following properties:
	 *
	 *   - generated: An object with the generated line and column positions.
	 *   - original: An object with the original line and column positions.
	 *   - source: The original source file (relative to the sourceRoot).
	 *   - name: An optional original token name for this mapping.
	 */
	SourceMapGenerator$7.prototype.addMapping =
	  function SourceMapGenerator_addMapping(aArgs) {
	    var generated = util$n.getArg(aArgs, 'generated');
	    var original = util$n.getArg(aArgs, 'original', null);
	    var source = util$n.getArg(aArgs, 'source', null);
	    var name = util$n.getArg(aArgs, 'name', null);

	    if (!this._skipValidation) {
	      this._validateMapping(generated, original, source, name);
	    }

	    if (source != null) {
	      source = String(source);
	      if (!this._sources.has(source)) {
	        this._sources.add(source);
	      }
	    }

	    if (name != null) {
	      name = String(name);
	      if (!this._names.has(name)) {
	        this._names.add(name);
	      }
	    }

	    this._mappings.add({
	      generatedLine: generated.line,
	      generatedColumn: generated.column,
	      originalLine: original != null && original.line,
	      originalColumn: original != null && original.column,
	      source: source,
	      name: name
	    });
	  };

	/**
	 * Set the source content for a source file.
	 */
	SourceMapGenerator$7.prototype.setSourceContent =
	  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	    var source = aSourceFile;
	    if (this._sourceRoot != null) {
	      source = util$n.relative(this._sourceRoot, source);
	    }

	    if (aSourceContent != null) {
	      // Add the source content to the _sourcesContents map.
	      // Create a new _sourcesContents map if the property is null.
	      if (!this._sourcesContents) {
	        this._sourcesContents = Object.create(null);
	      }
	      this._sourcesContents[util$n.toSetString(source)] = aSourceContent;
	    } else if (this._sourcesContents) {
	      // Remove the source file from the _sourcesContents map.
	      // If the _sourcesContents map is empty, set the property to null.
	      delete this._sourcesContents[util$n.toSetString(source)];
	      if (Object.keys(this._sourcesContents).length === 0) {
	        this._sourcesContents = null;
	      }
	    }
	  };

	/**
	 * Applies the mappings of a sub-source-map for a specific source file to the
	 * source map being generated. Each mapping to the supplied source file is
	 * rewritten using the supplied source map. Note: The resolution for the
	 * resulting mappings is the minimium of this map and the supplied map.
	 *
	 * @param aSourceMapConsumer The source map to be applied.
	 * @param aSourceFile Optional. The filename of the source file.
	 *        If omitted, SourceMapConsumer's file property will be used.
	 * @param aSourceMapPath Optional. The dirname of the path to the source map
	 *        to be applied. If relative, it is relative to the SourceMapConsumer.
	 *        This parameter is needed when the two source maps aren't in the same
	 *        directory, and the source map to be applied contains relative source
	 *        paths. If so, those relative source paths need to be rewritten
	 *        relative to the SourceMapGenerator.
	 */
	SourceMapGenerator$7.prototype.applySourceMap =
	  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	    var sourceFile = aSourceFile;
	    // If aSourceFile is omitted, we will use the file property of the SourceMap
	    if (aSourceFile == null) {
	      if (aSourceMapConsumer.file == null) {
	        throw new Error(
	          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	          'or the source map\'s "file" property. Both were omitted.'
	        );
	      }
	      sourceFile = aSourceMapConsumer.file;
	    }
	    var sourceRoot = this._sourceRoot;
	    // Make "sourceFile" relative if an absolute Url is passed.
	    if (sourceRoot != null) {
	      sourceFile = util$n.relative(sourceRoot, sourceFile);
	    }
	    // Applying the SourceMap can add and remove items from the sources and
	    // the names array.
	    var newSources = new ArraySet$a();
	    var newNames = new ArraySet$a();

	    // Find mappings for the "sourceFile"
	    this._mappings.unsortedForEach(function (mapping) {
	      if (mapping.source === sourceFile && mapping.originalLine != null) {
	        // Check if it can be mapped by the source map, then update the mapping.
	        var original = aSourceMapConsumer.originalPositionFor({
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        });
	        if (original.source != null) {
	          // Copy mapping
	          mapping.source = original.source;
	          if (aSourceMapPath != null) {
	            mapping.source = util$n.join(aSourceMapPath, mapping.source);
	          }
	          if (sourceRoot != null) {
	            mapping.source = util$n.relative(sourceRoot, mapping.source);
	          }
	          mapping.originalLine = original.line;
	          mapping.originalColumn = original.column;
	          if (original.name != null) {
	            mapping.name = original.name;
	          }
	        }
	      }

	      var source = mapping.source;
	      if (source != null && !newSources.has(source)) {
	        newSources.add(source);
	      }

	      var name = mapping.name;
	      if (name != null && !newNames.has(name)) {
	        newNames.add(name);
	      }

	    }, this);
	    this._sources = newSources;
	    this._names = newNames;

	    // Copy sourcesContents of applied map.
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aSourceMapPath != null) {
	          sourceFile = util$n.join(aSourceMapPath, sourceFile);
	        }
	        if (sourceRoot != null) {
	          sourceFile = util$n.relative(sourceRoot, sourceFile);
	        }
	        this.setSourceContent(sourceFile, content);
	      }
	    }, this);
	  };

	/**
	 * A mapping can have one of the three levels of data:
	 *
	 *   1. Just the generated position.
	 *   2. The Generated position, original position, and original source.
	 *   3. Generated and original position, original source, as well as a name
	 *      token.
	 *
	 * To maintain consistency, we validate that any new mapping being added falls
	 * in to one of these categories.
	 */
	SourceMapGenerator$7.prototype._validateMapping =
	  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                              aName) {
	    // When aOriginal is truthy but has empty values for .line and .column,
	    // it is most likely a programmer error. In this case we throw a very
	    // specific error message to try to guide them the right way.
	    // For example: https://github.com/Polymer/polymer-bundler/pull/519
	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
	        throw new Error(
	            'original.line and original.column are not numbers -- you probably meant to omit ' +
	            'the original mapping entirely and only map the generated position. If so, pass ' +
	            'null for the original mapping instead of an object with empty or null values.'
	        );
	    }

	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	        && aGenerated.line > 0 && aGenerated.column >= 0
	        && !aOriginal && !aSource && !aName) {
	      // Case 1.
	      return;
	    }
	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	             && aGenerated.line > 0 && aGenerated.column >= 0
	             && aOriginal.line > 0 && aOriginal.column >= 0
	             && aSource) {
	      // Cases 2 and 3.
	      return;
	    }
	    else {
	      throw new Error('Invalid mapping: ' + JSON.stringify({
	        generated: aGenerated,
	        source: aSource,
	        original: aOriginal,
	        name: aName
	      }));
	    }
	  };

	/**
	 * Serialize the accumulated mappings in to the stream of base 64 VLQs
	 * specified by the source map format.
	 */
	SourceMapGenerator$7.prototype._serializeMappings =
	  function SourceMapGenerator_serializeMappings() {
	    var previousGeneratedColumn = 0;
	    var previousGeneratedLine = 1;
	    var previousOriginalColumn = 0;
	    var previousOriginalLine = 0;
	    var previousName = 0;
	    var previousSource = 0;
	    var result = '';
	    var next;
	    var mapping;
	    var nameIdx;
	    var sourceIdx;

	    var mappings = this._mappings.toArray();
	    for (var i = 0, len = mappings.length; i < len; i++) {
	      mapping = mappings[i];
	      next = '';

	      if (mapping.generatedLine !== previousGeneratedLine) {
	        previousGeneratedColumn = 0;
	        while (mapping.generatedLine !== previousGeneratedLine) {
	          next += ';';
	          previousGeneratedLine++;
	        }
	      }
	      else {
	        if (i > 0) {
	          if (!util$n.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	            continue;
	          }
	          next += ',';
	        }
	      }

	      next += base64VLQ$6.encode(mapping.generatedColumn
	                                 - previousGeneratedColumn);
	      previousGeneratedColumn = mapping.generatedColumn;

	      if (mapping.source != null) {
	        sourceIdx = this._sources.indexOf(mapping.source);
	        next += base64VLQ$6.encode(sourceIdx - previousSource);
	        previousSource = sourceIdx;

	        // lines are stored 0-based in SourceMap spec version 3
	        next += base64VLQ$6.encode(mapping.originalLine - 1
	                                   - previousOriginalLine);
	        previousOriginalLine = mapping.originalLine - 1;

	        next += base64VLQ$6.encode(mapping.originalColumn
	                                   - previousOriginalColumn);
	        previousOriginalColumn = mapping.originalColumn;

	        if (mapping.name != null) {
	          nameIdx = this._names.indexOf(mapping.name);
	          next += base64VLQ$6.encode(nameIdx - previousName);
	          previousName = nameIdx;
	        }
	      }

	      result += next;
	    }

	    return result;
	  };

	SourceMapGenerator$7.prototype._generateSourcesContent =
	  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	    return aSources.map(function (source) {
	      if (!this._sourcesContents) {
	        return null;
	      }
	      if (aSourceRoot != null) {
	        source = util$n.relative(aSourceRoot, source);
	      }
	      var key = util$n.toSetString(source);
	      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
	        ? this._sourcesContents[key]
	        : null;
	    }, this);
	  };

	/**
	 * Externalize the source map.
	 */
	SourceMapGenerator$7.prototype.toJSON =
	  function SourceMapGenerator_toJSON() {
	    var map = {
	      version: this._version,
	      sources: this._sources.toArray(),
	      names: this._names.toArray(),
	      mappings: this._serializeMappings()
	    };
	    if (this._file != null) {
	      map.file = this._file;
	    }
	    if (this._sourceRoot != null) {
	      map.sourceRoot = this._sourceRoot;
	    }
	    if (this._sourcesContents) {
	      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	    }

	    return map;
	  };

	/**
	 * Render the source map being generated to a string.
	 */
	SourceMapGenerator$7.prototype.toString =
	  function SourceMapGenerator_toString() {
	    return JSON.stringify(this.toJSON());
	  };

	sourceMapGenerator$2.SourceMapGenerator = SourceMapGenerator$7;

	var sourceMapConsumer$2 = {};

	var binarySearch$7 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	(function (exports) {
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	exports.GREATEST_LOWER_BOUND = 1;
	exports.LEAST_UPPER_BOUND = 2;

	/**
	 * Recursive implementation of binary search.
	 *
	 * @param aLow Indices here and lower do not contain the needle.
	 * @param aHigh Indices here and higher do not contain the needle.
	 * @param aNeedle The element being searched for.
	 * @param aHaystack The non-empty array being searched.
	 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 */
	function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	  // This function terminates when one of the following is true:
	  //
	  //   1. We find the exact element we are looking for.
	  //
	  //   2. We did not find the exact element, but we can return the index of
	  //      the next-closest element.
	  //
	  //   3. We did not find the exact element, and there is no next-closest
	  //      element than the one we are searching for, so we return -1.
	  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	  var cmp = aCompare(aNeedle, aHaystack[mid], true);
	  if (cmp === 0) {
	    // Found the element we are looking for.
	    return mid;
	  }
	  else if (cmp > 0) {
	    // Our needle is greater than aHaystack[mid].
	    if (aHigh - mid > 1) {
	      // The element is in the upper half.
	      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	    }

	    // The exact needle element was not found in this haystack. Determine if
	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return aHigh < aHaystack.length ? aHigh : -1;
	    } else {
	      return mid;
	    }
	  }
	  else {
	    // Our needle is less than aHaystack[mid].
	    if (mid - aLow > 1) {
	      // The element is in the lower half.
	      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	    }

	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return mid;
	    } else {
	      return aLow < 0 ? -1 : aLow;
	    }
	  }
	}

	/**
	 * This is an implementation of binary search which will always try and return
	 * the index of the closest element if there is no exact hit. This is because
	 * mappings between original and generated line/col pairs are single points,
	 * and there is an implicit region between each of them, so a miss just means
	 * that you aren't on the very start of a region.
	 *
	 * @param aNeedle The element you are looking for.
	 * @param aHaystack The array that is being searched.
	 * @param aCompare A function which takes the needle and an element in the
	 *     array and returns -1, 0, or 1 depending on whether the needle is less
	 *     than, equal to, or greater than the element, respectively.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	 */
	exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	  if (aHaystack.length === 0) {
	    return -1;
	  }

	  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	  if (index < 0) {
	    return -1;
	  }

	  // We have found either the exact element, or the next-closest element than
	  // the one we are searching for. However, there may be more than one such
	  // element. Make sure we always return the smallest of these.
	  while (index - 1 >= 0) {
	    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	      break;
	    }
	    --index;
	  }

	  return index;
	};
	}(binarySearch$7));

	var quickSort$5 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	// It turns out that some (most?) JavaScript engines don't self-host
	// `Array.prototype.sort`. This makes sense because C++ will likely remain
	// faster than JS when doing raw CPU-intensive sorting. However, when using a
	// custom comparator function, calling back and forth between the VM's C++ and
	// JIT'd JS is rather slow *and* loses JIT type information, resulting in
	// worse generated code for the comparator function than would be optimal. In
	// fact, when sorting with a comparator, these costs outweigh the benefits of
	// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
	// a ~3500ms mean speed-up in `bench/bench.html`.

	/**
	 * Swap the elements indexed by `x` and `y` in the array `ary`.
	 *
	 * @param {Array} ary
	 *        The array.
	 * @param {Number} x
	 *        The index of the first item.
	 * @param {Number} y
	 *        The index of the second item.
	 */
	function swap$2(ary, x, y) {
	  var temp = ary[x];
	  ary[x] = ary[y];
	  ary[y] = temp;
	}

	/**
	 * Returns a random integer within the range `low .. high` inclusive.
	 *
	 * @param {Number} low
	 *        The lower bound on the range.
	 * @param {Number} high
	 *        The upper bound on the range.
	 */
	function randomIntInRange$2(low, high) {
	  return Math.round(low + (Math.random() * (high - low)));
	}

	/**
	 * The Quick Sort algorithm.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 * @param {Number} p
	 *        Start index of the array
	 * @param {Number} r
	 *        End index of the array
	 */
	function doQuickSort$2(ary, comparator, p, r) {
	  // If our lower bound is less than our upper bound, we (1) partition the
	  // array into two pieces and (2) recurse on each half. If it is not, this is
	  // the empty array and our base case.

	  if (p < r) {
	    // (1) Partitioning.
	    //
	    // The partitioning chooses a pivot between `p` and `r` and moves all
	    // elements that are less than or equal to the pivot to the before it, and
	    // all the elements that are greater than it after it. The effect is that
	    // once partition is done, the pivot is in the exact place it will be when
	    // the array is put in sorted order, and it will not need to be moved
	    // again. This runs in O(n) time.

	    // Always choose a random pivot so that an input array which is reverse
	    // sorted does not cause O(n^2) running time.
	    var pivotIndex = randomIntInRange$2(p, r);
	    var i = p - 1;

	    swap$2(ary, pivotIndex, r);
	    var pivot = ary[r];

	    // Immediately after `j` is incremented in this loop, the following hold
	    // true:
	    //
	    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
	    //
	    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
	    for (var j = p; j < r; j++) {
	      if (comparator(ary[j], pivot) <= 0) {
	        i += 1;
	        swap$2(ary, i, j);
	      }
	    }

	    swap$2(ary, i + 1, j);
	    var q = i + 1;

	    // (2) Recurse on each half.

	    doQuickSort$2(ary, comparator, p, q - 1);
	    doQuickSort$2(ary, comparator, q + 1, r);
	  }
	}

	/**
	 * Sort the given array in-place with the given comparator function.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 */
	quickSort$5.quickSort = function (ary, comparator) {
	  doQuickSort$2(ary, comparator, 0, ary.length - 1);
	};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util$m = util$q;
	var binarySearch$6 = binarySearch$7;
	var ArraySet$9 = arraySet$3.ArraySet;
	var base64VLQ$5 = base64Vlq$3;
	var quickSort$4 = quickSort$5.quickSort;

	function SourceMapConsumer$4(aSourceMap, aSourceMapURL) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = util$m.parseSourceMapInput(aSourceMap);
	  }

	  return sourceMap.sections != null
	    ? new IndexedSourceMapConsumer$3(sourceMap, aSourceMapURL)
	    : new BasicSourceMapConsumer$3(sourceMap, aSourceMapURL);
	}

	SourceMapConsumer$4.fromSourceMap = function(aSourceMap, aSourceMapURL) {
	  return BasicSourceMapConsumer$3.fromSourceMap(aSourceMap, aSourceMapURL);
	};

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	SourceMapConsumer$4.prototype._version = 3;

	// `__generatedMappings` and `__originalMappings` are arrays that hold the
	// parsed mapping coordinates from the source map's "mappings" attribute. They
	// are lazily instantiated, accessed via the `_generatedMappings` and
	// `_originalMappings` getters respectively, and we only parse the mappings
	// and create these arrays once queried for a source location. We jump through
	// these hoops because there can be many thousands of mappings, and parsing
	// them is expensive, so we only want to do it if we must.
	//
	// Each object in the arrays is of the form:
	//
	//     {
	//       generatedLine: The line number in the generated code,
	//       generatedColumn: The column number in the generated code,
	//       source: The path to the original source file that generated this
	//               chunk of code,
	//       originalLine: The line number in the original source that
	//                     corresponds to this chunk of generated code,
	//       originalColumn: The column number in the original source that
	//                       corresponds to this chunk of generated code,
	//       name: The name of the original symbol which generated this chunk of
	//             code.
	//     }
	//
	// All properties except for `generatedLine` and `generatedColumn` can be
	// `null`.
	//
	// `_generatedMappings` is ordered by the generated positions.
	//
	// `_originalMappings` is ordered by the original positions.

	SourceMapConsumer$4.prototype.__generatedMappings = null;
	Object.defineProperty(SourceMapConsumer$4.prototype, '_generatedMappings', {
	  configurable: true,
	  enumerable: true,
	  get: function () {
	    if (!this.__generatedMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }

	    return this.__generatedMappings;
	  }
	});

	SourceMapConsumer$4.prototype.__originalMappings = null;
	Object.defineProperty(SourceMapConsumer$4.prototype, '_originalMappings', {
	  configurable: true,
	  enumerable: true,
	  get: function () {
	    if (!this.__originalMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }

	    return this.__originalMappings;
	  }
	});

	SourceMapConsumer$4.prototype._charIsMappingSeparator =
	  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	    var c = aStr.charAt(index);
	    return c === ";" || c === ",";
	  };

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	SourceMapConsumer$4.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    throw new Error("Subclasses must implement _parseMappings");
	  };

	SourceMapConsumer$4.GENERATED_ORDER = 1;
	SourceMapConsumer$4.ORIGINAL_ORDER = 2;

	SourceMapConsumer$4.GREATEST_LOWER_BOUND = 1;
	SourceMapConsumer$4.LEAST_UPPER_BOUND = 2;

	/**
	 * Iterate over each mapping between an original source/line/column and a
	 * generated line/column in this source map.
	 *
	 * @param Function aCallback
	 *        The function that is called with each mapping.
	 * @param Object aContext
	 *        Optional. If specified, this object will be the value of `this` every
	 *        time that `aCallback` is called.
	 * @param aOrder
	 *        Either `SourceMapConsumer.GENERATED_ORDER` or
	 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	 *        iterate over the mappings sorted by the generated file's line/column
	 *        order or the original's source/line/column order, respectively. Defaults to
	 *        `SourceMapConsumer.GENERATED_ORDER`.
	 */
	SourceMapConsumer$4.prototype.eachMapping =
	  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	    var context = aContext || null;
	    var order = aOrder || SourceMapConsumer$4.GENERATED_ORDER;

	    var mappings;
	    switch (order) {
	    case SourceMapConsumer$4.GENERATED_ORDER:
	      mappings = this._generatedMappings;
	      break;
	    case SourceMapConsumer$4.ORIGINAL_ORDER:
	      mappings = this._originalMappings;
	      break;
	    default:
	      throw new Error("Unknown order of iteration.");
	    }

	    var sourceRoot = this.sourceRoot;
	    mappings.map(function (mapping) {
	      var source = mapping.source === null ? null : this._sources.at(mapping.source);
	      source = util$m.computeSourceURL(sourceRoot, source, this._sourceMapURL);
	      return {
	        source: source,
	        generatedLine: mapping.generatedLine,
	        generatedColumn: mapping.generatedColumn,
	        originalLine: mapping.originalLine,
	        originalColumn: mapping.originalColumn,
	        name: mapping.name === null ? null : this._names.at(mapping.name)
	      };
	    }, this).forEach(aCallback, context);
	  };

	/**
	 * Returns all generated line and column information for the original source,
	 * line, and column provided. If no column is provided, returns all mappings
	 * corresponding to a either the line we are searching for or the next
	 * closest line that has any mappings. Otherwise, returns all mappings
	 * corresponding to the given line and either the column we are searching for
	 * or the next closest column that has any offsets.
	 *
	 * The only argument is an object with the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.  The line number is 1-based.
	 *   - column: Optional. the column number in the original source.
	 *    The column number is 0-based.
	 *
	 * and an array of objects is returned, each with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.  The
	 *    line number is 1-based.
	 *   - column: The column number in the generated source, or null.
	 *    The column number is 0-based.
	 */
	SourceMapConsumer$4.prototype.allGeneratedPositionsFor =
	  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	    var line = util$m.getArg(aArgs, 'line');

	    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	    // returns the index of the closest mapping less than the needle. By
	    // setting needle.originalColumn to 0, we thus find the last mapping for
	    // the given line, provided such a mapping exists.
	    var needle = {
	      source: util$m.getArg(aArgs, 'source'),
	      originalLine: line,
	      originalColumn: util$m.getArg(aArgs, 'column', 0)
	    };

	    needle.source = this._findSourceIndex(needle.source);
	    if (needle.source < 0) {
	      return [];
	    }

	    var mappings = [];

	    var index = this._findMapping(needle,
	                                  this._originalMappings,
	                                  "originalLine",
	                                  "originalColumn",
	                                  util$m.compareByOriginalPositions,
	                                  binarySearch$6.LEAST_UPPER_BOUND);
	    if (index >= 0) {
	      var mapping = this._originalMappings[index];

	      if (aArgs.column === undefined) {
	        var originalLine = mapping.originalLine;

	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we found. Since
	        // mappings are sorted, this is guaranteed to find all mappings for
	        // the line we found.
	        while (mapping && mapping.originalLine === originalLine) {
	          mappings.push({
	            line: util$m.getArg(mapping, 'generatedLine', null),
	            column: util$m.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util$m.getArg(mapping, 'lastGeneratedColumn', null)
	          });

	          mapping = this._originalMappings[++index];
	        }
	      } else {
	        var originalColumn = mapping.originalColumn;

	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we were searching for.
	        // Since mappings are sorted, this is guaranteed to find all mappings for
	        // the line we are searching for.
	        while (mapping &&
	               mapping.originalLine === line &&
	               mapping.originalColumn == originalColumn) {
	          mappings.push({
	            line: util$m.getArg(mapping, 'generatedLine', null),
	            column: util$m.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util$m.getArg(mapping, 'lastGeneratedColumn', null)
	          });

	          mapping = this._originalMappings[++index];
	        }
	      }
	    }

	    return mappings;
	  };

	sourceMapConsumer$2.SourceMapConsumer = SourceMapConsumer$4;

	/**
	 * A BasicSourceMapConsumer instance represents a parsed source map which we can
	 * query for information about the original file positions by giving it a file
	 * position in the generated source.
	 *
	 * The first parameter is the raw source map (either as a JSON string, or
	 * already parsed to an object). According to the spec, source maps have the
	 * following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - sources: An array of URLs to the original source files.
	 *   - names: An array of identifiers which can be referrenced by individual mappings.
	 *   - sourceRoot: Optional. The URL root from which all sources are relative.
	 *   - sourcesContent: Optional. An array of contents of the original source files.
	 *   - mappings: A string of base64 VLQs which contain the actual mappings.
	 *   - file: Optional. The generated file this source map is associated with.
	 *
	 * Here is an example source map, taken from the source map spec[0]:
	 *
	 *     {
	 *       version : 3,
	 *       file: "out.js",
	 *       sourceRoot : "",
	 *       sources: ["foo.js", "bar.js"],
	 *       names: ["src", "maps", "are", "fun"],
	 *       mappings: "AA,AB;;ABCDE;"
	 *     }
	 *
	 * The second parameter, if given, is a string whose value is the URL
	 * at which the source map was found.  This URL is used to compute the
	 * sources array.
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	 */
	function BasicSourceMapConsumer$3(aSourceMap, aSourceMapURL) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = util$m.parseSourceMapInput(aSourceMap);
	  }

	  var version = util$m.getArg(sourceMap, 'version');
	  var sources = util$m.getArg(sourceMap, 'sources');
	  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	  // requires the array) to play nice here.
	  var names = util$m.getArg(sourceMap, 'names', []);
	  var sourceRoot = util$m.getArg(sourceMap, 'sourceRoot', null);
	  var sourcesContent = util$m.getArg(sourceMap, 'sourcesContent', null);
	  var mappings = util$m.getArg(sourceMap, 'mappings');
	  var file = util$m.getArg(sourceMap, 'file', null);

	  // Once again, Sass deviates from the spec and supplies the version as a
	  // string rather than a number, so we use loose equality checking here.
	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }

	  if (sourceRoot) {
	    sourceRoot = util$m.normalize(sourceRoot);
	  }

	  sources = sources
	    .map(String)
	    // Some source maps produce relative source paths like "./foo.js" instead of
	    // "foo.js".  Normalize these first so that future comparisons will succeed.
	    // See bugzil.la/1090768.
	    .map(util$m.normalize)
	    // Always ensure that absolute sources are internally stored relative to
	    // the source root, if the source root is absolute. Not doing this would
	    // be particularly problematic when the source root is a prefix of the
	    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
	    .map(function (source) {
	      return sourceRoot && util$m.isAbsolute(sourceRoot) && util$m.isAbsolute(source)
	        ? util$m.relative(sourceRoot, source)
	        : source;
	    });

	  // Pass `true` below to allow duplicate names and sources. While source maps
	  // are intended to be compressed and deduplicated, the TypeScript compiler
	  // sometimes generates source maps with duplicates in them. See Github issue
	  // #72 and bugzil.la/889492.
	  this._names = ArraySet$9.fromArray(names.map(String), true);
	  this._sources = ArraySet$9.fromArray(sources, true);

	  this._absoluteSources = this._sources.toArray().map(function (s) {
	    return util$m.computeSourceURL(sourceRoot, s, aSourceMapURL);
	  });

	  this.sourceRoot = sourceRoot;
	  this.sourcesContent = sourcesContent;
	  this._mappings = mappings;
	  this._sourceMapURL = aSourceMapURL;
	  this.file = file;
	}

	BasicSourceMapConsumer$3.prototype = Object.create(SourceMapConsumer$4.prototype);
	BasicSourceMapConsumer$3.prototype.consumer = SourceMapConsumer$4;

	/**
	 * Utility function to find the index of a source.  Returns -1 if not
	 * found.
	 */
	BasicSourceMapConsumer$3.prototype._findSourceIndex = function(aSource) {
	  var relativeSource = aSource;
	  if (this.sourceRoot != null) {
	    relativeSource = util$m.relative(this.sourceRoot, relativeSource);
	  }

	  if (this._sources.has(relativeSource)) {
	    return this._sources.indexOf(relativeSource);
	  }

	  // Maybe aSource is an absolute URL as returned by |sources|.  In
	  // this case we can't simply undo the transform.
	  var i;
	  for (i = 0; i < this._absoluteSources.length; ++i) {
	    if (this._absoluteSources[i] == aSource) {
	      return i;
	    }
	  }

	  return -1;
	};

	/**
	 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	 *
	 * @param SourceMapGenerator aSourceMap
	 *        The source map that will be consumed.
	 * @param String aSourceMapURL
	 *        The URL at which the source map can be found (optional)
	 * @returns BasicSourceMapConsumer
	 */
	BasicSourceMapConsumer$3.fromSourceMap =
	  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
	    var smc = Object.create(BasicSourceMapConsumer$3.prototype);

	    var names = smc._names = ArraySet$9.fromArray(aSourceMap._names.toArray(), true);
	    var sources = smc._sources = ArraySet$9.fromArray(aSourceMap._sources.toArray(), true);
	    smc.sourceRoot = aSourceMap._sourceRoot;
	    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                            smc.sourceRoot);
	    smc.file = aSourceMap._file;
	    smc._sourceMapURL = aSourceMapURL;
	    smc._absoluteSources = smc._sources.toArray().map(function (s) {
	      return util$m.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
	    });

	    // Because we are modifying the entries (by converting string sources and
	    // names to indices into the sources and names ArraySets), we have to make
	    // a copy of the entry or else bad things happen. Shared mutable state
	    // strikes again! See github issue #191.

	    var generatedMappings = aSourceMap._mappings.toArray().slice();
	    var destGeneratedMappings = smc.__generatedMappings = [];
	    var destOriginalMappings = smc.__originalMappings = [];

	    for (var i = 0, length = generatedMappings.length; i < length; i++) {
	      var srcMapping = generatedMappings[i];
	      var destMapping = new Mapping$4;
	      destMapping.generatedLine = srcMapping.generatedLine;
	      destMapping.generatedColumn = srcMapping.generatedColumn;

	      if (srcMapping.source) {
	        destMapping.source = sources.indexOf(srcMapping.source);
	        destMapping.originalLine = srcMapping.originalLine;
	        destMapping.originalColumn = srcMapping.originalColumn;

	        if (srcMapping.name) {
	          destMapping.name = names.indexOf(srcMapping.name);
	        }

	        destOriginalMappings.push(destMapping);
	      }

	      destGeneratedMappings.push(destMapping);
	    }

	    quickSort$4(smc.__originalMappings, util$m.compareByOriginalPositions);

	    return smc;
	  };

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	BasicSourceMapConsumer$3.prototype._version = 3;

	/**
	 * The list of original sources.
	 */
	Object.defineProperty(BasicSourceMapConsumer$3.prototype, 'sources', {
	  get: function () {
	    return this._absoluteSources.slice();
	  }
	});

	/**
	 * Provide the JIT with a nice shape / hidden class.
	 */
	function Mapping$4() {
	  this.generatedLine = 0;
	  this.generatedColumn = 0;
	  this.source = null;
	  this.originalLine = null;
	  this.originalColumn = null;
	  this.name = null;
	}

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	BasicSourceMapConsumer$3.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    var generatedLine = 1;
	    var previousGeneratedColumn = 0;
	    var previousOriginalLine = 0;
	    var previousOriginalColumn = 0;
	    var previousSource = 0;
	    var previousName = 0;
	    var length = aStr.length;
	    var index = 0;
	    var cachedSegments = {};
	    var temp = {};
	    var originalMappings = [];
	    var generatedMappings = [];
	    var mapping, str, segment, end, value;

	    while (index < length) {
	      if (aStr.charAt(index) === ';') {
	        generatedLine++;
	        index++;
	        previousGeneratedColumn = 0;
	      }
	      else if (aStr.charAt(index) === ',') {
	        index++;
	      }
	      else {
	        mapping = new Mapping$4();
	        mapping.generatedLine = generatedLine;

	        // Because each offset is encoded relative to the previous one,
	        // many segments often have the same encoding. We can exploit this
	        // fact by caching the parsed variable length fields of each segment,
	        // allowing us to avoid a second parse if we encounter the same
	        // segment again.
	        for (end = index; end < length; end++) {
	          if (this._charIsMappingSeparator(aStr, end)) {
	            break;
	          }
	        }
	        str = aStr.slice(index, end);

	        segment = cachedSegments[str];
	        if (segment) {
	          index += str.length;
	        } else {
	          segment = [];
	          while (index < end) {
	            base64VLQ$5.decode(aStr, index, temp);
	            value = temp.value;
	            index = temp.rest;
	            segment.push(value);
	          }

	          if (segment.length === 2) {
	            throw new Error('Found a source, but no line and column');
	          }

	          if (segment.length === 3) {
	            throw new Error('Found a source and line, but no column');
	          }

	          cachedSegments[str] = segment;
	        }

	        // Generated column.
	        mapping.generatedColumn = previousGeneratedColumn + segment[0];
	        previousGeneratedColumn = mapping.generatedColumn;

	        if (segment.length > 1) {
	          // Original source.
	          mapping.source = previousSource + segment[1];
	          previousSource += segment[1];

	          // Original line.
	          mapping.originalLine = previousOriginalLine + segment[2];
	          previousOriginalLine = mapping.originalLine;
	          // Lines are stored 0-based
	          mapping.originalLine += 1;

	          // Original column.
	          mapping.originalColumn = previousOriginalColumn + segment[3];
	          previousOriginalColumn = mapping.originalColumn;

	          if (segment.length > 4) {
	            // Original name.
	            mapping.name = previousName + segment[4];
	            previousName += segment[4];
	          }
	        }

	        generatedMappings.push(mapping);
	        if (typeof mapping.originalLine === 'number') {
	          originalMappings.push(mapping);
	        }
	      }
	    }

	    quickSort$4(generatedMappings, util$m.compareByGeneratedPositionsDeflated);
	    this.__generatedMappings = generatedMappings;

	    quickSort$4(originalMappings, util$m.compareByOriginalPositions);
	    this.__originalMappings = originalMappings;
	  };

	/**
	 * Find the mapping that best matches the hypothetical "needle" mapping that
	 * we are searching for in the given "haystack" of mappings.
	 */
	BasicSourceMapConsumer$3.prototype._findMapping =
	  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                         aColumnName, aComparator, aBias) {
	    // To return the position we are searching for, we must first find the
	    // mapping for the given position and then return the opposite position it
	    // points to. Because the mappings are sorted, we can use binary search to
	    // find the best mapping.

	    if (aNeedle[aLineName] <= 0) {
	      throw new TypeError('Line must be greater than or equal to 1, got '
	                          + aNeedle[aLineName]);
	    }
	    if (aNeedle[aColumnName] < 0) {
	      throw new TypeError('Column must be greater than or equal to 0, got '
	                          + aNeedle[aColumnName]);
	    }

	    return binarySearch$6.search(aNeedle, aMappings, aComparator, aBias);
	  };

	/**
	 * Compute the last column for each generated mapping. The last column is
	 * inclusive.
	 */
	BasicSourceMapConsumer$3.prototype.computeColumnSpans =
	  function SourceMapConsumer_computeColumnSpans() {
	    for (var index = 0; index < this._generatedMappings.length; ++index) {
	      var mapping = this._generatedMappings[index];

	      // Mappings do not contain a field for the last generated columnt. We
	      // can come up with an optimistic estimate, however, by assuming that
	      // mappings are contiguous (i.e. given two consecutive mappings, the
	      // first mapping ends where the second one starts).
	      if (index + 1 < this._generatedMappings.length) {
	        var nextMapping = this._generatedMappings[index + 1];

	        if (mapping.generatedLine === nextMapping.generatedLine) {
	          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	          continue;
	        }
	      }

	      // The last mapping for each line spans the entire line.
	      mapping.lastGeneratedColumn = Infinity;
	    }
	  };

	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.  The line number
	 *     is 1-based.
	 *   - column: The column number in the generated source.  The column
	 *     number is 0-based.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.  The
	 *     line number is 1-based.
	 *   - column: The column number in the original source, or null.  The
	 *     column number is 0-based.
	 *   - name: The original identifier, or null.
	 */
	BasicSourceMapConsumer$3.prototype.originalPositionFor =
	  function SourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util$m.getArg(aArgs, 'line'),
	      generatedColumn: util$m.getArg(aArgs, 'column')
	    };

	    var index = this._findMapping(
	      needle,
	      this._generatedMappings,
	      "generatedLine",
	      "generatedColumn",
	      util$m.compareByGeneratedPositionsDeflated,
	      util$m.getArg(aArgs, 'bias', SourceMapConsumer$4.GREATEST_LOWER_BOUND)
	    );

	    if (index >= 0) {
	      var mapping = this._generatedMappings[index];

	      if (mapping.generatedLine === needle.generatedLine) {
	        var source = util$m.getArg(mapping, 'source', null);
	        if (source !== null) {
	          source = this._sources.at(source);
	          source = util$m.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
	        }
	        var name = util$m.getArg(mapping, 'name', null);
	        if (name !== null) {
	          name = this._names.at(name);
	        }
	        return {
	          source: source,
	          line: util$m.getArg(mapping, 'originalLine', null),
	          column: util$m.getArg(mapping, 'originalColumn', null),
	          name: name
	        };
	      }
	    }

	    return {
	      source: null,
	      line: null,
	      column: null,
	      name: null
	    };
	  };

	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	BasicSourceMapConsumer$3.prototype.hasContentsOfAllSources =
	  function BasicSourceMapConsumer_hasContentsOfAllSources() {
	    if (!this.sourcesContent) {
	      return false;
	    }
	    return this.sourcesContent.length >= this._sources.size() &&
	      !this.sourcesContent.some(function (sc) { return sc == null; });
	  };

	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	BasicSourceMapConsumer$3.prototype.sourceContentFor =
	  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    if (!this.sourcesContent) {
	      return null;
	    }

	    var index = this._findSourceIndex(aSource);
	    if (index >= 0) {
	      return this.sourcesContent[index];
	    }

	    var relativeSource = aSource;
	    if (this.sourceRoot != null) {
	      relativeSource = util$m.relative(this.sourceRoot, relativeSource);
	    }

	    var url;
	    if (this.sourceRoot != null
	        && (url = util$m.urlParse(this.sourceRoot))) {
	      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	      // many users. We can help them out when they expect file:// URIs to
	      // behave like it would if they were running a local HTTP server. See
	      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
	      if (url.scheme == "file"
	          && this._sources.has(fileUriAbsPath)) {
	        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	      }

	      if ((!url.path || url.path == "/")
	          && this._sources.has("/" + relativeSource)) {
	        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
	      }
	    }

	    // This function is used recursively from
	    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	    // don't want to throw if we can't find the source - we just want to
	    // return null, so we provide a flag to exit gracefully.
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
	    }
	  };

	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.  The line number
	 *     is 1-based.
	 *   - column: The column number in the original source.  The column
	 *     number is 0-based.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.  The
	 *     line number is 1-based.
	 *   - column: The column number in the generated source, or null.
	 *     The column number is 0-based.
	 */
	BasicSourceMapConsumer$3.prototype.generatedPositionFor =
	  function SourceMapConsumer_generatedPositionFor(aArgs) {
	    var source = util$m.getArg(aArgs, 'source');
	    source = this._findSourceIndex(source);
	    if (source < 0) {
	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    }

	    var needle = {
	      source: source,
	      originalLine: util$m.getArg(aArgs, 'line'),
	      originalColumn: util$m.getArg(aArgs, 'column')
	    };

	    var index = this._findMapping(
	      needle,
	      this._originalMappings,
	      "originalLine",
	      "originalColumn",
	      util$m.compareByOriginalPositions,
	      util$m.getArg(aArgs, 'bias', SourceMapConsumer$4.GREATEST_LOWER_BOUND)
	    );

	    if (index >= 0) {
	      var mapping = this._originalMappings[index];

	      if (mapping.source === needle.source) {
	        return {
	          line: util$m.getArg(mapping, 'generatedLine', null),
	          column: util$m.getArg(mapping, 'generatedColumn', null),
	          lastColumn: util$m.getArg(mapping, 'lastGeneratedColumn', null)
	        };
	      }
	    }

	    return {
	      line: null,
	      column: null,
	      lastColumn: null
	    };
	  };

	sourceMapConsumer$2.BasicSourceMapConsumer = BasicSourceMapConsumer$3;

	/**
	 * An IndexedSourceMapConsumer instance represents a parsed source map which
	 * we can query for information. It differs from BasicSourceMapConsumer in
	 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	 * input.
	 *
	 * The first parameter is a raw source map (either as a JSON string, or already
	 * parsed to an object). According to the spec for indexed source maps, they
	 * have the following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - file: Optional. The generated file this source map is associated with.
	 *   - sections: A list of section definitions.
	 *
	 * Each value under the "sections" field has two fields:
	 *   - offset: The offset into the original specified at which this section
	 *       begins to apply, defined as an object with a "line" and "column"
	 *       field.
	 *   - map: A source map definition. This source map could also be indexed,
	 *       but doesn't have to be.
	 *
	 * Instead of the "map" field, it's also possible to have a "url" field
	 * specifying a URL to retrieve a source map from, but that's currently
	 * unsupported.
	 *
	 * Here's an example source map, taken from the source map spec[0], but
	 * modified to omit a section which uses the "url" field.
	 *
	 *  {
	 *    version : 3,
	 *    file: "app.js",
	 *    sections: [{
	 *      offset: {line:100, column:10},
	 *      map: {
	 *        version : 3,
	 *        file: "section.js",
	 *        sources: ["foo.js", "bar.js"],
	 *        names: ["src", "maps", "are", "fun"],
	 *        mappings: "AAAA,E;;ABCDE;"
	 *      }
	 *    }],
	 *  }
	 *
	 * The second parameter, if given, is a string whose value is the URL
	 * at which the source map was found.  This URL is used to compute the
	 * sources array.
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	 */
	function IndexedSourceMapConsumer$3(aSourceMap, aSourceMapURL) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = util$m.parseSourceMapInput(aSourceMap);
	  }

	  var version = util$m.getArg(sourceMap, 'version');
	  var sections = util$m.getArg(sourceMap, 'sections');

	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }

	  this._sources = new ArraySet$9();
	  this._names = new ArraySet$9();

	  var lastOffset = {
	    line: -1,
	    column: 0
	  };
	  this._sections = sections.map(function (s) {
	    if (s.url) {
	      // The url field will require support for asynchronicity.
	      // See https://github.com/mozilla/source-map/issues/16
	      throw new Error('Support for url field in sections not implemented.');
	    }
	    var offset = util$m.getArg(s, 'offset');
	    var offsetLine = util$m.getArg(offset, 'line');
	    var offsetColumn = util$m.getArg(offset, 'column');

	    if (offsetLine < lastOffset.line ||
	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	      throw new Error('Section offsets must be ordered and non-overlapping.');
	    }
	    lastOffset = offset;

	    return {
	      generatedOffset: {
	        // The offset fields are 0-based, but we use 1-based indices when
	        // encoding/decoding from VLQ.
	        generatedLine: offsetLine + 1,
	        generatedColumn: offsetColumn + 1
	      },
	      consumer: new SourceMapConsumer$4(util$m.getArg(s, 'map'), aSourceMapURL)
	    }
	  });
	}

	IndexedSourceMapConsumer$3.prototype = Object.create(SourceMapConsumer$4.prototype);
	IndexedSourceMapConsumer$3.prototype.constructor = SourceMapConsumer$4;

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	IndexedSourceMapConsumer$3.prototype._version = 3;

	/**
	 * The list of original sources.
	 */
	Object.defineProperty(IndexedSourceMapConsumer$3.prototype, 'sources', {
	  get: function () {
	    var sources = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	        sources.push(this._sections[i].consumer.sources[j]);
	      }
	    }
	    return sources;
	  }
	});

	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.  The line number
	 *     is 1-based.
	 *   - column: The column number in the generated source.  The column
	 *     number is 0-based.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.  The
	 *     line number is 1-based.
	 *   - column: The column number in the original source, or null.  The
	 *     column number is 0-based.
	 *   - name: The original identifier, or null.
	 */
	IndexedSourceMapConsumer$3.prototype.originalPositionFor =
	  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util$m.getArg(aArgs, 'line'),
	      generatedColumn: util$m.getArg(aArgs, 'column')
	    };

	    // Find the section containing the generated position we're trying to map
	    // to an original position.
	    var sectionIndex = binarySearch$6.search(needle, this._sections,
	      function(needle, section) {
	        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	        if (cmp) {
	          return cmp;
	        }

	        return (needle.generatedColumn -
	                section.generatedOffset.generatedColumn);
	      });
	    var section = this._sections[sectionIndex];

	    if (!section) {
	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    }

	    return section.consumer.originalPositionFor({
	      line: needle.generatedLine -
	        (section.generatedOffset.generatedLine - 1),
	      column: needle.generatedColumn -
	        (section.generatedOffset.generatedLine === needle.generatedLine
	         ? section.generatedOffset.generatedColumn - 1
	         : 0),
	      bias: aArgs.bias
	    });
	  };

	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	IndexedSourceMapConsumer$3.prototype.hasContentsOfAllSources =
	  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	    return this._sections.every(function (s) {
	      return s.consumer.hasContentsOfAllSources();
	    });
	  };

	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	IndexedSourceMapConsumer$3.prototype.sourceContentFor =
	  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];

	      var content = section.consumer.sourceContentFor(aSource, true);
	      if (content) {
	        return content;
	      }
	    }
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };

	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.  The line number
	 *     is 1-based.
	 *   - column: The column number in the original source.  The column
	 *     number is 0-based.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.  The
	 *     line number is 1-based. 
	 *   - column: The column number in the generated source, or null.
	 *     The column number is 0-based.
	 */
	IndexedSourceMapConsumer$3.prototype.generatedPositionFor =
	  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];

	      // Only consider this section if the requested source is in the list of
	      // sources of the consumer.
	      if (section.consumer._findSourceIndex(util$m.getArg(aArgs, 'source')) === -1) {
	        continue;
	      }
	      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	      if (generatedPosition) {
	        var ret = {
	          line: generatedPosition.line +
	            (section.generatedOffset.generatedLine - 1),
	          column: generatedPosition.column +
	            (section.generatedOffset.generatedLine === generatedPosition.line
	             ? section.generatedOffset.generatedColumn - 1
	             : 0)
	        };
	        return ret;
	      }
	    }

	    return {
	      line: null,
	      column: null
	    };
	  };

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	IndexedSourceMapConsumer$3.prototype._parseMappings =
	  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    this.__generatedMappings = [];
	    this.__originalMappings = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	      var sectionMappings = section.consumer._generatedMappings;
	      for (var j = 0; j < sectionMappings.length; j++) {
	        var mapping = sectionMappings[j];

	        var source = section.consumer._sources.at(mapping.source);
	        source = util$m.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
	        this._sources.add(source);
	        source = this._sources.indexOf(source);

	        var name = null;
	        if (mapping.name) {
	          name = section.consumer._names.at(mapping.name);
	          this._names.add(name);
	          name = this._names.indexOf(name);
	        }

	        // The mappings coming from the consumer for the section have
	        // generated positions relative to the start of the section, so we
	        // need to offset them to be relative to the start of the concatenated
	        // generated file.
	        var adjustedMapping = {
	          source: source,
	          generatedLine: mapping.generatedLine +
	            (section.generatedOffset.generatedLine - 1),
	          generatedColumn: mapping.generatedColumn +
	            (section.generatedOffset.generatedLine === mapping.generatedLine
	            ? section.generatedOffset.generatedColumn - 1
	            : 0),
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: name
	        };

	        this.__generatedMappings.push(adjustedMapping);
	        if (typeof adjustedMapping.originalLine === 'number') {
	          this.__originalMappings.push(adjustedMapping);
	        }
	      }
	    }

	    quickSort$4(this.__generatedMappings, util$m.compareByGeneratedPositionsDeflated);
	    quickSort$4(this.__originalMappings, util$m.compareByOriginalPositions);
	  };

	sourceMapConsumer$2.IndexedSourceMapConsumer = IndexedSourceMapConsumer$3;

	var sourceNode$2 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var SourceMapGenerator$6 = sourceMapGenerator$2.SourceMapGenerator;
	var util$l = util$q;

	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	// operating systems these days (capturing the result).
	var REGEX_NEWLINE$2 = /(\r?\n)/;

	// Newline character code for charCodeAt() comparisons
	var NEWLINE_CODE$2 = 10;

	// Private symbol for identifying `SourceNode`s when multiple versions of
	// the source-map library are loaded. This MUST NOT CHANGE across
	// versions!
	var isSourceNode$2 = "$$$isSourceNode$$$";

	/**
	 * SourceNodes provide a way to abstract over interpolating/concatenating
	 * snippets of generated JavaScript source code while maintaining the line and
	 * column information associated with the original source code.
	 *
	 * @param aLine The original line number.
	 * @param aColumn The original column number.
	 * @param aSource The original source's filename.
	 * @param aChunks Optional. An array of strings which are snippets of
	 *        generated JS, or other SourceNodes.
	 * @param aName The original identifier.
	 */
	function SourceNode$2(aLine, aColumn, aSource, aChunks, aName) {
	  this.children = [];
	  this.sourceContents = {};
	  this.line = aLine == null ? null : aLine;
	  this.column = aColumn == null ? null : aColumn;
	  this.source = aSource == null ? null : aSource;
	  this.name = aName == null ? null : aName;
	  this[isSourceNode$2] = true;
	  if (aChunks != null) this.add(aChunks);
	}

	/**
	 * Creates a SourceNode from generated code and a SourceMapConsumer.
	 *
	 * @param aGeneratedCode The generated code
	 * @param aSourceMapConsumer The SourceMap for the generated code
	 * @param aRelativePath Optional. The path that relative sources in the
	 *        SourceMapConsumer should be relative to.
	 */
	SourceNode$2.fromStringWithSourceMap =
	  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	    // The SourceNode we want to fill with the generated code
	    // and the SourceMap
	    var node = new SourceNode$2();

	    // All even indices of this array are one line of the generated code,
	    // while all odd indices are the newlines between two adjacent lines
	    // (since `REGEX_NEWLINE` captures its match).
	    // Processed fragments are accessed by calling `shiftNextLine`.
	    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE$2);
	    var remainingLinesIndex = 0;
	    var shiftNextLine = function() {
	      var lineContents = getNextLine();
	      // The last line of a file might not have a newline.
	      var newLine = getNextLine() || "";
	      return lineContents + newLine;

	      function getNextLine() {
	        return remainingLinesIndex < remainingLines.length ?
	            remainingLines[remainingLinesIndex++] : undefined;
	      }
	    };

	    // We need to remember the position of "remainingLines"
	    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

	    // The generate SourceNodes we need a code range.
	    // To extract it current and last mapping is used.
	    // Here we store the last mapping.
	    var lastMapping = null;

	    aSourceMapConsumer.eachMapping(function (mapping) {
	      if (lastMapping !== null) {
	        // We add the code from "lastMapping" to "mapping":
	        // First check if there is a new line in between.
	        if (lastGeneratedLine < mapping.generatedLine) {
	          // Associate first line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	          lastGeneratedLine++;
	          lastGeneratedColumn = 0;
	          // The remaining code is added without mapping
	        } else {
	          // There is no new line in between.
	          // Associate the code between "lastGeneratedColumn" and
	          // "mapping.generatedColumn" with "lastMapping"
	          var nextLine = remainingLines[remainingLinesIndex] || '';
	          var code = nextLine.substr(0, mapping.generatedColumn -
	                                        lastGeneratedColumn);
	          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
	                                              lastGeneratedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	          addMappingWithCode(lastMapping, code);
	          // No more remaining code, continue
	          lastMapping = mapping;
	          return;
	        }
	      }
	      // We add the generated code until the first mapping
	      // to the SourceNode without any mapping.
	      // Each line is added as separate string.
	      while (lastGeneratedLine < mapping.generatedLine) {
	        node.add(shiftNextLine());
	        lastGeneratedLine++;
	      }
	      if (lastGeneratedColumn < mapping.generatedColumn) {
	        var nextLine = remainingLines[remainingLinesIndex] || '';
	        node.add(nextLine.substr(0, mapping.generatedColumn));
	        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
	        lastGeneratedColumn = mapping.generatedColumn;
	      }
	      lastMapping = mapping;
	    }, this);
	    // We have processed all mappings.
	    if (remainingLinesIndex < remainingLines.length) {
	      if (lastMapping) {
	        // Associate the remaining code in the current line with "lastMapping"
	        addMappingWithCode(lastMapping, shiftNextLine());
	      }
	      // and add the remaining lines without any mapping
	      node.add(remainingLines.splice(remainingLinesIndex).join(""));
	    }

	    // Copy sourcesContent into SourceNode
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aRelativePath != null) {
	          sourceFile = util$l.join(aRelativePath, sourceFile);
	        }
	        node.setSourceContent(sourceFile, content);
	      }
	    });

	    return node;

	    function addMappingWithCode(mapping, code) {
	      if (mapping === null || mapping.source === undefined) {
	        node.add(code);
	      } else {
	        var source = aRelativePath
	          ? util$l.join(aRelativePath, mapping.source)
	          : mapping.source;
	        node.add(new SourceNode$2(mapping.originalLine,
	                                mapping.originalColumn,
	                                source,
	                                code,
	                                mapping.name));
	      }
	    }
	  };

	/**
	 * Add a chunk of generated JS to this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode$2.prototype.add = function SourceNode_add(aChunk) {
	  if (Array.isArray(aChunk)) {
	    aChunk.forEach(function (chunk) {
	      this.add(chunk);
	    }, this);
	  }
	  else if (aChunk[isSourceNode$2] || typeof aChunk === "string") {
	    if (aChunk) {
	      this.children.push(aChunk);
	    }
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};

	/**
	 * Add a chunk of generated JS to the beginning of this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode$2.prototype.prepend = function SourceNode_prepend(aChunk) {
	  if (Array.isArray(aChunk)) {
	    for (var i = aChunk.length-1; i >= 0; i--) {
	      this.prepend(aChunk[i]);
	    }
	  }
	  else if (aChunk[isSourceNode$2] || typeof aChunk === "string") {
	    this.children.unshift(aChunk);
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};

	/**
	 * Walk over the tree of JS snippets in this node and its children. The
	 * walking function is called once for each snippet of JS and is passed that
	 * snippet and the its original associated source's line/column location.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode$2.prototype.walk = function SourceNode_walk(aFn) {
	  var chunk;
	  for (var i = 0, len = this.children.length; i < len; i++) {
	    chunk = this.children[i];
	    if (chunk[isSourceNode$2]) {
	      chunk.walk(aFn);
	    }
	    else {
	      if (chunk !== '') {
	        aFn(chunk, { source: this.source,
	                     line: this.line,
	                     column: this.column,
	                     name: this.name });
	      }
	    }
	  }
	};

	/**
	 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	 * each of `this.children`.
	 *
	 * @param aSep The separator.
	 */
	SourceNode$2.prototype.join = function SourceNode_join(aSep) {
	  var newChildren;
	  var i;
	  var len = this.children.length;
	  if (len > 0) {
	    newChildren = [];
	    for (i = 0; i < len-1; i++) {
	      newChildren.push(this.children[i]);
	      newChildren.push(aSep);
	    }
	    newChildren.push(this.children[i]);
	    this.children = newChildren;
	  }
	  return this;
	};

	/**
	 * Call String.prototype.replace on the very right-most source snippet. Useful
	 * for trimming whitespace from the end of a source node, etc.
	 *
	 * @param aPattern The pattern to replace.
	 * @param aReplacement The thing to replace the pattern with.
	 */
	SourceNode$2.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	  var lastChild = this.children[this.children.length - 1];
	  if (lastChild[isSourceNode$2]) {
	    lastChild.replaceRight(aPattern, aReplacement);
	  }
	  else if (typeof lastChild === 'string') {
	    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	  }
	  else {
	    this.children.push(''.replace(aPattern, aReplacement));
	  }
	  return this;
	};

	/**
	 * Set the source content for a source file. This will be added to the SourceMapGenerator
	 * in the sourcesContent field.
	 *
	 * @param aSourceFile The filename of the source file
	 * @param aSourceContent The content of the source file
	 */
	SourceNode$2.prototype.setSourceContent =
	  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	    this.sourceContents[util$l.toSetString(aSourceFile)] = aSourceContent;
	  };

	/**
	 * Walk over the tree of SourceNodes. The walking function is called for each
	 * source file content and is passed the filename and source content.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode$2.prototype.walkSourceContents =
	  function SourceNode_walkSourceContents(aFn) {
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      if (this.children[i][isSourceNode$2]) {
	        this.children[i].walkSourceContents(aFn);
	      }
	    }

	    var sources = Object.keys(this.sourceContents);
	    for (var i = 0, len = sources.length; i < len; i++) {
	      aFn(util$l.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	    }
	  };

	/**
	 * Return the string representation of this source node. Walks over the tree
	 * and concatenates all the various snippets together to one string.
	 */
	SourceNode$2.prototype.toString = function SourceNode_toString() {
	  var str = "";
	  this.walk(function (chunk) {
	    str += chunk;
	  });
	  return str;
	};

	/**
	 * Returns the string representation of this source node along with a source
	 * map.
	 */
	SourceNode$2.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	  var generated = {
	    code: "",
	    line: 1,
	    column: 0
	  };
	  var map = new SourceMapGenerator$6(aArgs);
	  var sourceMappingActive = false;
	  var lastOriginalSource = null;
	  var lastOriginalLine = null;
	  var lastOriginalColumn = null;
	  var lastOriginalName = null;
	  this.walk(function (chunk, original) {
	    generated.code += chunk;
	    if (original.source !== null
	        && original.line !== null
	        && original.column !== null) {
	      if(lastOriginalSource !== original.source
	         || lastOriginalLine !== original.line
	         || lastOriginalColumn !== original.column
	         || lastOriginalName !== original.name) {
	        map.addMapping({
	          source: original.source,
	          original: {
	            line: original.line,
	            column: original.column
	          },
	          generated: {
	            line: generated.line,
	            column: generated.column
	          },
	          name: original.name
	        });
	      }
	      lastOriginalSource = original.source;
	      lastOriginalLine = original.line;
	      lastOriginalColumn = original.column;
	      lastOriginalName = original.name;
	      sourceMappingActive = true;
	    } else if (sourceMappingActive) {
	      map.addMapping({
	        generated: {
	          line: generated.line,
	          column: generated.column
	        }
	      });
	      lastOriginalSource = null;
	      sourceMappingActive = false;
	    }
	    for (var idx = 0, length = chunk.length; idx < length; idx++) {
	      if (chunk.charCodeAt(idx) === NEWLINE_CODE$2) {
	        generated.line++;
	        generated.column = 0;
	        // Mappings end at eol
	        if (idx + 1 === length) {
	          lastOriginalSource = null;
	          sourceMappingActive = false;
	        } else if (sourceMappingActive) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	      } else {
	        generated.column++;
	      }
	    }
	  });
	  this.walkSourceContents(function (sourceFile, sourceContent) {
	    map.setSourceContent(sourceFile, sourceContent);
	  });

	  return { code: generated.code, map: map };
	};

	sourceNode$2.SourceNode = SourceNode$2;

	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	sourceMap$3.SourceMapGenerator = sourceMapGenerator$2.SourceMapGenerator;
	sourceMap$3.SourceMapConsumer = sourceMapConsumer$2.SourceMapConsumer;
	sourceMap$3.SourceNode = sourceNode$2.SourceNode;

	Object.defineProperty(util$r, "__esModule", { value: true });
	util$r.isTrailingCommaEnabled = util$r.getParentExportDeclaration = util$r.isExportDeclaration = util$r.fixFaultyLocations = util$r.getTrueLoc = util$r.composeSourceMaps = util$r.copyPos = util$r.comparePos = util$r.getUnionOfKeys = util$r.getOption = void 0;
	var tslib_1$8 = require$$0$6;
	var assert_1$7 = tslib_1$8.__importDefault(require$$1__default['default']);
	var types$8 = tslib_1$8.__importStar(main);
	var n$4 = types$8.namedTypes;
	var source_map_1$1 = tslib_1$8.__importDefault(sourceMap$3);
	var SourceMapConsumer$3 = source_map_1$1.default.SourceMapConsumer;
	var SourceMapGenerator$5 = source_map_1$1.default.SourceMapGenerator;
	var hasOwn$2 = Object.prototype.hasOwnProperty;
	function getOption(options, key, defaultValue) {
	    if (options && hasOwn$2.call(options, key)) {
	        return options[key];
	    }
	    return defaultValue;
	}
	util$r.getOption = getOption;
	function getUnionOfKeys() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var result = {};
	    var argc = args.length;
	    for (var i = 0; i < argc; ++i) {
	        var keys = Object.keys(args[i]);
	        var keyCount = keys.length;
	        for (var j = 0; j < keyCount; ++j) {
	            result[keys[j]] = true;
	        }
	    }
	    return result;
	}
	util$r.getUnionOfKeys = getUnionOfKeys;
	function comparePos(pos1, pos2) {
	    return pos1.line - pos2.line || pos1.column - pos2.column;
	}
	util$r.comparePos = comparePos;
	function copyPos(pos) {
	    return {
	        line: pos.line,
	        column: pos.column,
	    };
	}
	util$r.copyPos = copyPos;
	function composeSourceMaps(formerMap, latterMap) {
	    if (formerMap) {
	        if (!latterMap) {
	            return formerMap;
	        }
	    }
	    else {
	        return latterMap || null;
	    }
	    var smcFormer = new SourceMapConsumer$3(formerMap);
	    var smcLatter = new SourceMapConsumer$3(latterMap);
	    var smg = new SourceMapGenerator$5({
	        file: latterMap.file,
	        sourceRoot: latterMap.sourceRoot,
	    });
	    var sourcesToContents = {};
	    smcLatter.eachMapping(function (mapping) {
	        var origPos = smcFormer.originalPositionFor({
	            line: mapping.originalLine,
	            column: mapping.originalColumn,
	        });
	        var sourceName = origPos.source;
	        if (sourceName === null) {
	            return;
	        }
	        smg.addMapping({
	            source: sourceName,
	            original: copyPos(origPos),
	            generated: {
	                line: mapping.generatedLine,
	                column: mapping.generatedColumn,
	            },
	            name: mapping.name,
	        });
	        var sourceContent = smcFormer.sourceContentFor(sourceName);
	        if (sourceContent && !hasOwn$2.call(sourcesToContents, sourceName)) {
	            sourcesToContents[sourceName] = sourceContent;
	            smg.setSourceContent(sourceName, sourceContent);
	        }
	    });
	    return smg.toJSON();
	}
	util$r.composeSourceMaps = composeSourceMaps;
	function getTrueLoc(node, lines) {
	    // It's possible that node is newly-created (not parsed by Esprima),
	    // in which case it probably won't have a .loc property (or an
	    // .original property for that matter). That's fine; we'll just
	    // pretty-print it as usual.
	    if (!node.loc) {
	        return null;
	    }
	    var result = {
	        start: node.loc.start,
	        end: node.loc.end,
	    };
	    function include(node) {
	        expandLoc(result, node.loc);
	    }
	    // If the node is an export declaration and its .declaration has any
	    // decorators, their locations might contribute to the true start/end
	    // positions of the export declaration node.
	    if (node.declaration &&
	        node.declaration.decorators &&
	        isExportDeclaration$3(node)) {
	        node.declaration.decorators.forEach(include);
	    }
	    if (comparePos(result.start, result.end) < 0) {
	        // Trim leading whitespace.
	        result.start = copyPos(result.start);
	        lines.skipSpaces(result.start, false, true);
	        if (comparePos(result.start, result.end) < 0) {
	            // Trim trailing whitespace, if the end location is not already the
	            // same as the start location.
	            result.end = copyPos(result.end);
	            lines.skipSpaces(result.end, true, true);
	        }
	    }
	    // If the node has any comments, their locations might contribute to
	    // the true start/end positions of the node.
	    if (node.comments) {
	        node.comments.forEach(include);
	    }
	    return result;
	}
	util$r.getTrueLoc = getTrueLoc;
	function expandLoc(parentLoc, childLoc) {
	    if (parentLoc && childLoc) {
	        if (comparePos(childLoc.start, parentLoc.start) < 0) {
	            parentLoc.start = childLoc.start;
	        }
	        if (comparePos(parentLoc.end, childLoc.end) < 0) {
	            parentLoc.end = childLoc.end;
	        }
	    }
	}
	function fixFaultyLocations(node, lines) {
	    var loc = node.loc;
	    if (loc) {
	        if (loc.start.line < 1) {
	            loc.start.line = 1;
	        }
	        if (loc.end.line < 1) {
	            loc.end.line = 1;
	        }
	    }
	    if (node.type === "File") {
	        // Babylon returns File nodes whose .loc.{start,end} do not include
	        // leading or trailing whitespace.
	        loc.start = lines.firstPos();
	        loc.end = lines.lastPos();
	    }
	    fixForLoopHead(node, lines);
	    fixTemplateLiteral(node, lines);
	    if (loc && node.decorators) {
	        // Expand the .loc of the node responsible for printing the decorators
	        // (here, the decorated node) so that it includes node.decorators.
	        node.decorators.forEach(function (decorator) {
	            expandLoc(loc, decorator.loc);
	        });
	    }
	    else if (node.declaration && isExportDeclaration$3(node)) {
	        // Nullify .loc information for the child declaration so that we never
	        // try to reprint it without also reprinting the export declaration.
	        node.declaration.loc = null;
	        // Expand the .loc of the node responsible for printing the decorators
	        // (here, the export declaration) so that it includes node.decorators.
	        var decorators = node.declaration.decorators;
	        if (decorators) {
	            decorators.forEach(function (decorator) {
	                expandLoc(loc, decorator.loc);
	            });
	        }
	    }
	    else if ((n$4.MethodDefinition && n$4.MethodDefinition.check(node)) ||
	        (n$4.Property.check(node) && (node.method || node.shorthand))) {
	        // If the node is a MethodDefinition or a .method or .shorthand
	        // Property, then the location information stored in
	        // node.value.loc is very likely untrustworthy (just the {body}
	        // part of a method, or nothing in the case of shorthand
	        // properties), so we null out that information to prevent
	        // accidental reuse of bogus source code during reprinting.
	        node.value.loc = null;
	        if (n$4.FunctionExpression.check(node.value)) {
	            // FunctionExpression method values should be anonymous,
	            // because their .id fields are ignored anyway.
	            node.value.id = null;
	        }
	    }
	    else if (node.type === "ObjectTypeProperty") {
	        var loc_1 = node.loc;
	        var end = loc_1 && loc_1.end;
	        if (end) {
	            end = copyPos(end);
	            if (lines.prevPos(end) && lines.charAt(end) === ",") {
	                // Some parsers accidentally include trailing commas in the
	                // .loc.end information for ObjectTypeProperty nodes.
	                if ((end = lines.skipSpaces(end, true, true))) {
	                    loc_1.end = end;
	                }
	            }
	        }
	    }
	}
	util$r.fixFaultyLocations = fixFaultyLocations;
	function fixForLoopHead(node, lines) {
	    if (node.type !== "ForStatement") {
	        return;
	    }
	    function fix(child) {
	        var loc = child && child.loc;
	        var start = loc && loc.start;
	        var end = loc && copyPos(loc.end);
	        while (start && end && comparePos(start, end) < 0) {
	            lines.prevPos(end);
	            if (lines.charAt(end) === ";") {
	                // Update child.loc.end to *exclude* the ';' character.
	                loc.end.line = end.line;
	                loc.end.column = end.column;
	            }
	            else {
	                break;
	            }
	        }
	    }
	    fix(node.init);
	    fix(node.test);
	    fix(node.update);
	}
	function fixTemplateLiteral(node, lines) {
	    if (node.type !== "TemplateLiteral") {
	        return;
	    }
	    if (node.quasis.length === 0) {
	        // If there are no quasi elements, then there is nothing to fix.
	        return;
	    }
	    // node.loc is not present when using export default with a template literal
	    if (node.loc) {
	        // First we need to exclude the opening ` from the .loc of the first
	        // quasi element, in case the parser accidentally decided to include it.
	        var afterLeftBackTickPos = copyPos(node.loc.start);
	        assert_1$7.default.strictEqual(lines.charAt(afterLeftBackTickPos), "`");
	        assert_1$7.default.ok(lines.nextPos(afterLeftBackTickPos));
	        var firstQuasi = node.quasis[0];
	        if (comparePos(firstQuasi.loc.start, afterLeftBackTickPos) < 0) {
	            firstQuasi.loc.start = afterLeftBackTickPos;
	        }
	        // Next we need to exclude the closing ` from the .loc of the last quasi
	        // element, in case the parser accidentally decided to include it.
	        var rightBackTickPos = copyPos(node.loc.end);
	        assert_1$7.default.ok(lines.prevPos(rightBackTickPos));
	        assert_1$7.default.strictEqual(lines.charAt(rightBackTickPos), "`");
	        var lastQuasi = node.quasis[node.quasis.length - 1];
	        if (comparePos(rightBackTickPos, lastQuasi.loc.end) < 0) {
	            lastQuasi.loc.end = rightBackTickPos;
	        }
	    }
	    // Now we need to exclude ${ and } characters from the .loc's of all
	    // quasi elements, since some parsers accidentally include them.
	    node.expressions.forEach(function (expr, i) {
	        // Rewind from expr.loc.start over any whitespace and the ${ that
	        // precedes the expression. The position of the $ should be the same
	        // as the .loc.end of the preceding quasi element, but some parsers
	        // accidentally include the ${ in the .loc of the quasi element.
	        var dollarCurlyPos = lines.skipSpaces(expr.loc.start, true, false);
	        if (lines.prevPos(dollarCurlyPos) &&
	            lines.charAt(dollarCurlyPos) === "{" &&
	            lines.prevPos(dollarCurlyPos) &&
	            lines.charAt(dollarCurlyPos) === "$") {
	            var quasiBefore = node.quasis[i];
	            if (comparePos(dollarCurlyPos, quasiBefore.loc.end) < 0) {
	                quasiBefore.loc.end = dollarCurlyPos;
	            }
	        }
	        // Likewise, some parsers accidentally include the } that follows
	        // the expression in the .loc of the following quasi element.
	        var rightCurlyPos = lines.skipSpaces(expr.loc.end, false, false);
	        if (lines.charAt(rightCurlyPos) === "}") {
	            assert_1$7.default.ok(lines.nextPos(rightCurlyPos));
	            // Now rightCurlyPos is technically the position just after the }.
	            var quasiAfter = node.quasis[i + 1];
	            if (comparePos(quasiAfter.loc.start, rightCurlyPos) < 0) {
	                quasiAfter.loc.start = rightCurlyPos;
	            }
	        }
	    });
	}
	function isExportDeclaration$3(node) {
	    if (node)
	        switch (node.type) {
	            case "ExportDeclaration":
	            case "ExportDefaultDeclaration":
	            case "ExportDefaultSpecifier":
	            case "DeclareExportDeclaration":
	            case "ExportNamedDeclaration":
	            case "ExportAllDeclaration":
	                return true;
	        }
	    return false;
	}
	util$r.isExportDeclaration = isExportDeclaration$3;
	function getParentExportDeclaration(path) {
	    var parentNode = path.getParentNode();
	    if (path.getName() === "declaration" && isExportDeclaration$3(parentNode)) {
	        return parentNode;
	    }
	    return null;
	}
	util$r.getParentExportDeclaration = getParentExportDeclaration;
	function isTrailingCommaEnabled(options, context) {
	    var trailingComma = options.trailingComma;
	    if (typeof trailingComma === "object") {
	        return !!trailingComma[context];
	    }
	    return !!trailingComma;
	}
	util$r.isTrailingCommaEnabled = isTrailingCommaEnabled;

	var esprima = {exports: {}};

	(function (module, exports) {
	(function webpackUniversalModuleDefinition(root, factory) {
	/* istanbul ignore next */
		module.exports = factory();
	})(commonjsGlobal, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/* istanbul ignore if */
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
		/*
		  Copyright JS Foundation and other contributors, https://js.foundation/

		  Redistribution and use in source and binary forms, with or without
		  modification, are permitted provided that the following conditions are met:

		    * Redistributions of source code must retain the above copyright
		      notice, this list of conditions and the following disclaimer.
		    * Redistributions in binary form must reproduce the above copyright
		      notice, this list of conditions and the following disclaimer in the
		      documentation and/or other materials provided with the distribution.

		  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
		  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
		  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
		  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
		  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
		  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
		  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
		  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
		  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*/
		Object.defineProperty(exports, "__esModule", { value: true });
		var comment_handler_1 = __webpack_require__(1);
		var jsx_parser_1 = __webpack_require__(3);
		var parser_1 = __webpack_require__(8);
		var tokenizer_1 = __webpack_require__(15);
		function parse(code, options, delegate) {
		    var commentHandler = null;
		    var proxyDelegate = function (node, metadata) {
		        if (delegate) {
		            delegate(node, metadata);
		        }
		        if (commentHandler) {
		            commentHandler.visit(node, metadata);
		        }
		    };
		    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;
		    var collectComment = false;
		    if (options) {
		        collectComment = (typeof options.comment === 'boolean' && options.comment);
		        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);
		        if (collectComment || attachComment) {
		            commentHandler = new comment_handler_1.CommentHandler();
		            commentHandler.attach = attachComment;
		            options.comment = true;
		            parserDelegate = proxyDelegate;
		        }
		    }
		    var isModule = false;
		    if (options && typeof options.sourceType === 'string') {
		        isModule = (options.sourceType === 'module');
		    }
		    var parser;
		    if (options && typeof options.jsx === 'boolean' && options.jsx) {
		        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);
		    }
		    else {
		        parser = new parser_1.Parser(code, options, parserDelegate);
		    }
		    var program = isModule ? parser.parseModule() : parser.parseScript();
		    var ast = program;
		    if (collectComment && commentHandler) {
		        ast.comments = commentHandler.comments;
		    }
		    if (parser.config.tokens) {
		        ast.tokens = parser.tokens;
		    }
		    if (parser.config.tolerant) {
		        ast.errors = parser.errorHandler.errors;
		    }
		    return ast;
		}
		exports.parse = parse;
		function parseModule(code, options, delegate) {
		    var parsingOptions = options || {};
		    parsingOptions.sourceType = 'module';
		    return parse(code, parsingOptions, delegate);
		}
		exports.parseModule = parseModule;
		function parseScript(code, options, delegate) {
		    var parsingOptions = options || {};
		    parsingOptions.sourceType = 'script';
		    return parse(code, parsingOptions, delegate);
		}
		exports.parseScript = parseScript;
		function tokenize(code, options, delegate) {
		    var tokenizer = new tokenizer_1.Tokenizer(code, options);
		    var tokens;
		    tokens = [];
		    try {
		        while (true) {
		            var token = tokenizer.getNextToken();
		            if (!token) {
		                break;
		            }
		            if (delegate) {
		                token = delegate(token);
		            }
		            tokens.push(token);
		        }
		    }
		    catch (e) {
		        tokenizer.errorHandler.tolerate(e);
		    }
		    if (tokenizer.errorHandler.tolerant) {
		        tokens.errors = tokenizer.errors();
		    }
		    return tokens;
		}
		exports.tokenize = tokenize;
		var syntax_1 = __webpack_require__(2);
		exports.Syntax = syntax_1.Syntax;
		// Sync with *.json manifests.
		exports.version = '4.0.1';


	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var syntax_1 = __webpack_require__(2);
		var CommentHandler = (function () {
		    function CommentHandler() {
		        this.attach = false;
		        this.comments = [];
		        this.stack = [];
		        this.leading = [];
		        this.trailing = [];
		    }
		    CommentHandler.prototype.insertInnerComments = function (node, metadata) {
		        //  innnerComments for properties empty block
		        //  `function a() {/** comments **\/}`
		        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
		            var innerComments = [];
		            for (var i = this.leading.length - 1; i >= 0; --i) {
		                var entry = this.leading[i];
		                if (metadata.end.offset >= entry.start) {
		                    innerComments.unshift(entry.comment);
		                    this.leading.splice(i, 1);
		                    this.trailing.splice(i, 1);
		                }
		            }
		            if (innerComments.length) {
		                node.innerComments = innerComments;
		            }
		        }
		    };
		    CommentHandler.prototype.findTrailingComments = function (metadata) {
		        var trailingComments = [];
		        if (this.trailing.length > 0) {
		            for (var i = this.trailing.length - 1; i >= 0; --i) {
		                var entry_1 = this.trailing[i];
		                if (entry_1.start >= metadata.end.offset) {
		                    trailingComments.unshift(entry_1.comment);
		                }
		            }
		            this.trailing.length = 0;
		            return trailingComments;
		        }
		        var entry = this.stack[this.stack.length - 1];
		        if (entry && entry.node.trailingComments) {
		            var firstComment = entry.node.trailingComments[0];
		            if (firstComment && firstComment.range[0] >= metadata.end.offset) {
		                trailingComments = entry.node.trailingComments;
		                delete entry.node.trailingComments;
		            }
		        }
		        return trailingComments;
		    };
		    CommentHandler.prototype.findLeadingComments = function (metadata) {
		        var leadingComments = [];
		        var target;
		        while (this.stack.length > 0) {
		            var entry = this.stack[this.stack.length - 1];
		            if (entry && entry.start >= metadata.start.offset) {
		                target = entry.node;
		                this.stack.pop();
		            }
		            else {
		                break;
		            }
		        }
		        if (target) {
		            var count = target.leadingComments ? target.leadingComments.length : 0;
		            for (var i = count - 1; i >= 0; --i) {
		                var comment = target.leadingComments[i];
		                if (comment.range[1] <= metadata.start.offset) {
		                    leadingComments.unshift(comment);
		                    target.leadingComments.splice(i, 1);
		                }
		            }
		            if (target.leadingComments && target.leadingComments.length === 0) {
		                delete target.leadingComments;
		            }
		            return leadingComments;
		        }
		        for (var i = this.leading.length - 1; i >= 0; --i) {
		            var entry = this.leading[i];
		            if (entry.start <= metadata.start.offset) {
		                leadingComments.unshift(entry.comment);
		                this.leading.splice(i, 1);
		            }
		        }
		        return leadingComments;
		    };
		    CommentHandler.prototype.visitNode = function (node, metadata) {
		        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
		            return;
		        }
		        this.insertInnerComments(node, metadata);
		        var trailingComments = this.findTrailingComments(metadata);
		        var leadingComments = this.findLeadingComments(metadata);
		        if (leadingComments.length > 0) {
		            node.leadingComments = leadingComments;
		        }
		        if (trailingComments.length > 0) {
		            node.trailingComments = trailingComments;
		        }
		        this.stack.push({
		            node: node,
		            start: metadata.start.offset
		        });
		    };
		    CommentHandler.prototype.visitComment = function (node, metadata) {
		        var type = (node.type[0] === 'L') ? 'Line' : 'Block';
		        var comment = {
		            type: type,
		            value: node.value
		        };
		        if (node.range) {
		            comment.range = node.range;
		        }
		        if (node.loc) {
		            comment.loc = node.loc;
		        }
		        this.comments.push(comment);
		        if (this.attach) {
		            var entry = {
		                comment: {
		                    type: type,
		                    value: node.value,
		                    range: [metadata.start.offset, metadata.end.offset]
		                },
		                start: metadata.start.offset
		            };
		            if (node.loc) {
		                entry.comment.loc = node.loc;
		            }
		            node.type = type;
		            this.leading.push(entry);
		            this.trailing.push(entry);
		        }
		    };
		    CommentHandler.prototype.visit = function (node, metadata) {
		        if (node.type === 'LineComment') {
		            this.visitComment(node, metadata);
		        }
		        else if (node.type === 'BlockComment') {
		            this.visitComment(node, metadata);
		        }
		        else if (this.attach) {
		            this.visitNode(node, metadata);
		        }
		    };
		    return CommentHandler;
		}());
		exports.CommentHandler = CommentHandler;


	/***/ },
	/* 2 */
	/***/ function(module, exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Syntax = {
		    AssignmentExpression: 'AssignmentExpression',
		    AssignmentPattern: 'AssignmentPattern',
		    ArrayExpression: 'ArrayExpression',
		    ArrayPattern: 'ArrayPattern',
		    ArrowFunctionExpression: 'ArrowFunctionExpression',
		    AwaitExpression: 'AwaitExpression',
		    BlockStatement: 'BlockStatement',
		    BinaryExpression: 'BinaryExpression',
		    BreakStatement: 'BreakStatement',
		    CallExpression: 'CallExpression',
		    CatchClause: 'CatchClause',
		    ClassBody: 'ClassBody',
		    ClassDeclaration: 'ClassDeclaration',
		    ClassExpression: 'ClassExpression',
		    ConditionalExpression: 'ConditionalExpression',
		    ContinueStatement: 'ContinueStatement',
		    DoWhileStatement: 'DoWhileStatement',
		    DebuggerStatement: 'DebuggerStatement',
		    EmptyStatement: 'EmptyStatement',
		    ExportAllDeclaration: 'ExportAllDeclaration',
		    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
		    ExportNamedDeclaration: 'ExportNamedDeclaration',
		    ExportSpecifier: 'ExportSpecifier',
		    ExpressionStatement: 'ExpressionStatement',
		    ForStatement: 'ForStatement',
		    ForOfStatement: 'ForOfStatement',
		    ForInStatement: 'ForInStatement',
		    FunctionDeclaration: 'FunctionDeclaration',
		    FunctionExpression: 'FunctionExpression',
		    Identifier: 'Identifier',
		    IfStatement: 'IfStatement',
		    ImportDeclaration: 'ImportDeclaration',
		    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
		    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
		    ImportSpecifier: 'ImportSpecifier',
		    Literal: 'Literal',
		    LabeledStatement: 'LabeledStatement',
		    LogicalExpression: 'LogicalExpression',
		    MemberExpression: 'MemberExpression',
		    MetaProperty: 'MetaProperty',
		    MethodDefinition: 'MethodDefinition',
		    NewExpression: 'NewExpression',
		    ObjectExpression: 'ObjectExpression',
		    ObjectPattern: 'ObjectPattern',
		    Program: 'Program',
		    Property: 'Property',
		    RestElement: 'RestElement',
		    ReturnStatement: 'ReturnStatement',
		    SequenceExpression: 'SequenceExpression',
		    SpreadElement: 'SpreadElement',
		    Super: 'Super',
		    SwitchCase: 'SwitchCase',
		    SwitchStatement: 'SwitchStatement',
		    TaggedTemplateExpression: 'TaggedTemplateExpression',
		    TemplateElement: 'TemplateElement',
		    TemplateLiteral: 'TemplateLiteral',
		    ThisExpression: 'ThisExpression',
		    ThrowStatement: 'ThrowStatement',
		    TryStatement: 'TryStatement',
		    UnaryExpression: 'UnaryExpression',
		    UpdateExpression: 'UpdateExpression',
		    VariableDeclaration: 'VariableDeclaration',
		    VariableDeclarator: 'VariableDeclarator',
		    WhileStatement: 'WhileStatement',
		    WithStatement: 'WithStatement',
		    YieldExpression: 'YieldExpression'
		};


	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {
	/* istanbul ignore next */
		var __extends = (this && this.__extends) || (function () {
		    var extendStatics = Object.setPrototypeOf ||
		        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
		        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
		    return function (d, b) {
		        extendStatics(d, b);
		        function __() { this.constructor = d; }
		        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		    };
		})();
		Object.defineProperty(exports, "__esModule", { value: true });
		var character_1 = __webpack_require__(4);
		var JSXNode = __webpack_require__(5);
		var jsx_syntax_1 = __webpack_require__(6);
		var Node = __webpack_require__(7);
		var parser_1 = __webpack_require__(8);
		var token_1 = __webpack_require__(13);
		var xhtml_entities_1 = __webpack_require__(14);
		token_1.TokenName[100 /* Identifier */] = 'JSXIdentifier';
		token_1.TokenName[101 /* Text */] = 'JSXText';
		// Fully qualified element name, e.g. <svg:path> returns "svg:path"
		function getQualifiedElementName(elementName) {
		    var qualifiedName;
		    switch (elementName.type) {
		        case jsx_syntax_1.JSXSyntax.JSXIdentifier:
		            var id = elementName;
		            qualifiedName = id.name;
		            break;
		        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
		            var ns = elementName;
		            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +
		                getQualifiedElementName(ns.name);
		            break;
		        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
		            var expr = elementName;
		            qualifiedName = getQualifiedElementName(expr.object) + '.' +
		                getQualifiedElementName(expr.property);
		            break;
		    }
		    return qualifiedName;
		}
		var JSXParser = (function (_super) {
		    __extends(JSXParser, _super);
		    function JSXParser(code, options, delegate) {
		        return _super.call(this, code, options, delegate) || this;
		    }
		    JSXParser.prototype.parsePrimaryExpression = function () {
		        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
		    };
		    JSXParser.prototype.startJSX = function () {
		        // Unwind the scanner before the lookahead token.
		        this.scanner.index = this.startMarker.index;
		        this.scanner.lineNumber = this.startMarker.line;
		        this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
		    };
		    JSXParser.prototype.finishJSX = function () {
		        // Prime the next lookahead.
		        this.nextToken();
		    };
		    JSXParser.prototype.reenterJSX = function () {
		        this.startJSX();
		        this.expectJSX('}');
		        // Pop the closing '}' added from the lookahead.
		        if (this.config.tokens) {
		            this.tokens.pop();
		        }
		    };
		    JSXParser.prototype.createJSXNode = function () {
		        this.collectComments();
		        return {
		            index: this.scanner.index,
		            line: this.scanner.lineNumber,
		            column: this.scanner.index - this.scanner.lineStart
		        };
		    };
		    JSXParser.prototype.createJSXChildNode = function () {
		        return {
		            index: this.scanner.index,
		            line: this.scanner.lineNumber,
		            column: this.scanner.index - this.scanner.lineStart
		        };
		    };
		    JSXParser.prototype.scanXHTMLEntity = function (quote) {
		        var result = '&';
		        var valid = true;
		        var terminated = false;
		        var numeric = false;
		        var hex = false;
		        while (!this.scanner.eof() && valid && !terminated) {
		            var ch = this.scanner.source[this.scanner.index];
		            if (ch === quote) {
		                break;
		            }
		            terminated = (ch === ';');
		            result += ch;
		            ++this.scanner.index;
		            if (!terminated) {
		                switch (result.length) {
		                    case 2:
		                        // e.g. '&#123;'
		                        numeric = (ch === '#');
		                        break;
		                    case 3:
		                        if (numeric) {
		                            // e.g. '&#x41;'
		                            hex = (ch === 'x');
		                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
		                            numeric = numeric && !hex;
		                        }
		                        break;
		                    default:
		                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
		                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
		                        break;
		                }
		            }
		        }
		        if (valid && terminated && result.length > 2) {
		            // e.g. '&#x41;' becomes just '#x41'
		            var str = result.substr(1, result.length - 2);
		            if (numeric && str.length > 1) {
		                result = String.fromCharCode(parseInt(str.substr(1), 10));
		            }
		            else if (hex && str.length > 2) {
		                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));
		            }
		            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
		                result = xhtml_entities_1.XHTMLEntities[str];
		            }
		        }
		        return result;
		    };
		    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.
		    JSXParser.prototype.lexJSX = function () {
		        var cp = this.scanner.source.charCodeAt(this.scanner.index);
		        // < > / : = { }
		        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
		            var value = this.scanner.source[this.scanner.index++];
		            return {
		                type: 7 /* Punctuator */,
		                value: value,
		                lineNumber: this.scanner.lineNumber,
		                lineStart: this.scanner.lineStart,
		                start: this.scanner.index - 1,
		                end: this.scanner.index
		            };
		        }
		        // " '
		        if (cp === 34 || cp === 39) {
		            var start = this.scanner.index;
		            var quote = this.scanner.source[this.scanner.index++];
		            var str = '';
		            while (!this.scanner.eof()) {
		                var ch = this.scanner.source[this.scanner.index++];
		                if (ch === quote) {
		                    break;
		                }
		                else if (ch === '&') {
		                    str += this.scanXHTMLEntity(quote);
		                }
		                else {
		                    str += ch;
		                }
		            }
		            return {
		                type: 8 /* StringLiteral */,
		                value: str,
		                lineNumber: this.scanner.lineNumber,
		                lineStart: this.scanner.lineStart,
		                start: start,
		                end: this.scanner.index
		            };
		        }
		        // ... or .
		        if (cp === 46) {
		            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
		            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
		            var value = (n1 === 46 && n2 === 46) ? '...' : '.';
		            var start = this.scanner.index;
		            this.scanner.index += value.length;
		            return {
		                type: 7 /* Punctuator */,
		                value: value,
		                lineNumber: this.scanner.lineNumber,
		                lineStart: this.scanner.lineStart,
		                start: start,
		                end: this.scanner.index
		            };
		        }
		        // `
		        if (cp === 96) {
		            // Only placeholder, since it will be rescanned as a real assignment expression.
		            return {
		                type: 10 /* Template */,
		                value: '',
		                lineNumber: this.scanner.lineNumber,
		                lineStart: this.scanner.lineStart,
		                start: this.scanner.index,
		                end: this.scanner.index
		            };
		        }
		        // Identifer can not contain backslash (char code 92).
		        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {
		            var start = this.scanner.index;
		            ++this.scanner.index;
		            while (!this.scanner.eof()) {
		                var ch = this.scanner.source.charCodeAt(this.scanner.index);
		                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {
		                    ++this.scanner.index;
		                }
		                else if (ch === 45) {
		                    // Hyphen (char code 45) can be part of an identifier.
		                    ++this.scanner.index;
		                }
		                else {
		                    break;
		                }
		            }
		            var id = this.scanner.source.slice(start, this.scanner.index);
		            return {
		                type: 100 /* Identifier */,
		                value: id,
		                lineNumber: this.scanner.lineNumber,
		                lineStart: this.scanner.lineStart,
		                start: start,
		                end: this.scanner.index
		            };
		        }
		        return this.scanner.lex();
		    };
		    JSXParser.prototype.nextJSXToken = function () {
		        this.collectComments();
		        this.startMarker.index = this.scanner.index;
		        this.startMarker.line = this.scanner.lineNumber;
		        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
		        var token = this.lexJSX();
		        this.lastMarker.index = this.scanner.index;
		        this.lastMarker.line = this.scanner.lineNumber;
		        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
		        if (this.config.tokens) {
		            this.tokens.push(this.convertToken(token));
		        }
		        return token;
		    };
		    JSXParser.prototype.nextJSXText = function () {
		        this.startMarker.index = this.scanner.index;
		        this.startMarker.line = this.scanner.lineNumber;
		        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
		        var start = this.scanner.index;
		        var text = '';
		        while (!this.scanner.eof()) {
		            var ch = this.scanner.source[this.scanner.index];
		            if (ch === '{' || ch === '<') {
		                break;
		            }
		            ++this.scanner.index;
		            text += ch;
		            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                ++this.scanner.lineNumber;
		                if (ch === '\r' && this.scanner.source[this.scanner.index] === '\n') {
		                    ++this.scanner.index;
		                }
		                this.scanner.lineStart = this.scanner.index;
		            }
		        }
		        this.lastMarker.index = this.scanner.index;
		        this.lastMarker.line = this.scanner.lineNumber;
		        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
		        var token = {
		            type: 101 /* Text */,
		            value: text,
		            lineNumber: this.scanner.lineNumber,
		            lineStart: this.scanner.lineStart,
		            start: start,
		            end: this.scanner.index
		        };
		        if ((text.length > 0) && this.config.tokens) {
		            this.tokens.push(this.convertToken(token));
		        }
		        return token;
		    };
		    JSXParser.prototype.peekJSXToken = function () {
		        var state = this.scanner.saveState();
		        this.scanner.scanComments();
		        var next = this.lexJSX();
		        this.scanner.restoreState(state);
		        return next;
		    };
		    // Expect the next JSX token to match the specified punctuator.
		    // If not, an exception will be thrown.
		    JSXParser.prototype.expectJSX = function (value) {
		        var token = this.nextJSXToken();
		        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
		            this.throwUnexpectedToken(token);
		        }
		    };
		    // Return true if the next JSX token matches the specified punctuator.
		    JSXParser.prototype.matchJSX = function (value) {
		        var next = this.peekJSXToken();
		        return next.type === 7 /* Punctuator */ && next.value === value;
		    };
		    JSXParser.prototype.parseJSXIdentifier = function () {
		        var node = this.createJSXNode();
		        var token = this.nextJSXToken();
		        if (token.type !== 100 /* Identifier */) {
		            this.throwUnexpectedToken(token);
		        }
		        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
		    };
		    JSXParser.prototype.parseJSXElementName = function () {
		        var node = this.createJSXNode();
		        var elementName = this.parseJSXIdentifier();
		        if (this.matchJSX(':')) {
		            var namespace = elementName;
		            this.expectJSX(':');
		            var name_1 = this.parseJSXIdentifier();
		            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
		        }
		        else if (this.matchJSX('.')) {
		            while (this.matchJSX('.')) {
		                var object = elementName;
		                this.expectJSX('.');
		                var property = this.parseJSXIdentifier();
		                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
		            }
		        }
		        return elementName;
		    };
		    JSXParser.prototype.parseJSXAttributeName = function () {
		        var node = this.createJSXNode();
		        var attributeName;
		        var identifier = this.parseJSXIdentifier();
		        if (this.matchJSX(':')) {
		            var namespace = identifier;
		            this.expectJSX(':');
		            var name_2 = this.parseJSXIdentifier();
		            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
		        }
		        else {
		            attributeName = identifier;
		        }
		        return attributeName;
		    };
		    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
		        var node = this.createJSXNode();
		        var token = this.nextJSXToken();
		        if (token.type !== 8 /* StringLiteral */) {
		            this.throwUnexpectedToken(token);
		        }
		        var raw = this.getTokenRaw(token);
		        return this.finalize(node, new Node.Literal(token.value, raw));
		    };
		    JSXParser.prototype.parseJSXExpressionAttribute = function () {
		        var node = this.createJSXNode();
		        this.expectJSX('{');
		        this.finishJSX();
		        if (this.match('}')) {
		            this.tolerateError('JSX attributes must only be assigned a non-empty expression');
		        }
		        var expression = this.parseAssignmentExpression();
		        this.reenterJSX();
		        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
		    };
		    JSXParser.prototype.parseJSXAttributeValue = function () {
		        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :
		            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
		    };
		    JSXParser.prototype.parseJSXNameValueAttribute = function () {
		        var node = this.createJSXNode();
		        var name = this.parseJSXAttributeName();
		        var value = null;
		        if (this.matchJSX('=')) {
		            this.expectJSX('=');
		            value = this.parseJSXAttributeValue();
		        }
		        return this.finalize(node, new JSXNode.JSXAttribute(name, value));
		    };
		    JSXParser.prototype.parseJSXSpreadAttribute = function () {
		        var node = this.createJSXNode();
		        this.expectJSX('{');
		        this.expectJSX('...');
		        this.finishJSX();
		        var argument = this.parseAssignmentExpression();
		        this.reenterJSX();
		        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
		    };
		    JSXParser.prototype.parseJSXAttributes = function () {
		        var attributes = [];
		        while (!this.matchJSX('/') && !this.matchJSX('>')) {
		            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :
		                this.parseJSXNameValueAttribute();
		            attributes.push(attribute);
		        }
		        return attributes;
		    };
		    JSXParser.prototype.parseJSXOpeningElement = function () {
		        var node = this.createJSXNode();
		        this.expectJSX('<');
		        var name = this.parseJSXElementName();
		        var attributes = this.parseJSXAttributes();
		        var selfClosing = this.matchJSX('/');
		        if (selfClosing) {
		            this.expectJSX('/');
		        }
		        this.expectJSX('>');
		        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
		    };
		    JSXParser.prototype.parseJSXBoundaryElement = function () {
		        var node = this.createJSXNode();
		        this.expectJSX('<');
		        if (this.matchJSX('/')) {
		            this.expectJSX('/');
		            var name_3 = this.parseJSXElementName();
		            this.expectJSX('>');
		            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
		        }
		        var name = this.parseJSXElementName();
		        var attributes = this.parseJSXAttributes();
		        var selfClosing = this.matchJSX('/');
		        if (selfClosing) {
		            this.expectJSX('/');
		        }
		        this.expectJSX('>');
		        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
		    };
		    JSXParser.prototype.parseJSXEmptyExpression = function () {
		        var node = this.createJSXChildNode();
		        this.collectComments();
		        this.lastMarker.index = this.scanner.index;
		        this.lastMarker.line = this.scanner.lineNumber;
		        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
		        return this.finalize(node, new JSXNode.JSXEmptyExpression());
		    };
		    JSXParser.prototype.parseJSXExpressionContainer = function () {
		        var node = this.createJSXNode();
		        this.expectJSX('{');
		        var expression;
		        if (this.matchJSX('}')) {
		            expression = this.parseJSXEmptyExpression();
		            this.expectJSX('}');
		        }
		        else {
		            this.finishJSX();
		            expression = this.parseAssignmentExpression();
		            this.reenterJSX();
		        }
		        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
		    };
		    JSXParser.prototype.parseJSXChildren = function () {
		        var children = [];
		        while (!this.scanner.eof()) {
		            var node = this.createJSXChildNode();
		            var token = this.nextJSXText();
		            if (token.start < token.end) {
		                var raw = this.getTokenRaw(token);
		                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
		                children.push(child);
		            }
		            if (this.scanner.source[this.scanner.index] === '{') {
		                var container = this.parseJSXExpressionContainer();
		                children.push(container);
		            }
		            else {
		                break;
		            }
		        }
		        return children;
		    };
		    JSXParser.prototype.parseComplexJSXElement = function (el) {
		        var stack = [];
		        while (!this.scanner.eof()) {
		            el.children = el.children.concat(this.parseJSXChildren());
		            var node = this.createJSXChildNode();
		            var element = this.parseJSXBoundaryElement();
		            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
		                var opening = element;
		                if (opening.selfClosing) {
		                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
		                    el.children.push(child);
		                }
		                else {
		                    stack.push(el);
		                    el = { node: node, opening: opening, closing: null, children: [] };
		                }
		            }
		            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
		                el.closing = element;
		                var open_1 = getQualifiedElementName(el.opening.name);
		                var close_1 = getQualifiedElementName(el.closing.name);
		                if (open_1 !== close_1) {
		                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);
		                }
		                if (stack.length > 0) {
		                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
		                    el = stack[stack.length - 1];
		                    el.children.push(child);
		                    stack.pop();
		                }
		                else {
		                    break;
		                }
		            }
		        }
		        return el;
		    };
		    JSXParser.prototype.parseJSXElement = function () {
		        var node = this.createJSXNode();
		        var opening = this.parseJSXOpeningElement();
		        var children = [];
		        var closing = null;
		        if (!opening.selfClosing) {
		            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });
		            children = el.children;
		            closing = el.closing;
		        }
		        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
		    };
		    JSXParser.prototype.parseJSXRoot = function () {
		        // Pop the opening '<' added from the lookahead.
		        if (this.config.tokens) {
		            this.tokens.pop();
		        }
		        this.startJSX();
		        var element = this.parseJSXElement();
		        this.finishJSX();
		        return element;
		    };
		    JSXParser.prototype.isStartOfExpression = function () {
		        return _super.prototype.isStartOfExpression.call(this) || this.match('<');
		    };
		    return JSXParser;
		}(parser_1.Parser));
		exports.JSXParser = JSXParser;


	/***/ },
	/* 4 */
	/***/ function(module, exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		// See also tools/generate-unicode-regex.js.
		var Regex = {
		    // Unicode v8.0.0 NonAsciiIdentifierStart:
		    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
		    // Unicode v8.0.0 NonAsciiIdentifierPart:
		    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
		};
		exports.Character = {
		    /* tslint:disable:no-bitwise */
		    fromCodePoint: function (cp) {
		        return (cp < 0x10000) ? String.fromCharCode(cp) :
		            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
		                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
		    },
		    // https://tc39.github.io/ecma262/#sec-white-space
		    isWhiteSpace: function (cp) {
		        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||
		            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);
		    },
		    // https://tc39.github.io/ecma262/#sec-line-terminators
		    isLineTerminator: function (cp) {
		        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);
		    },
		    // https://tc39.github.io/ecma262/#sec-names-and-keywords
		    isIdentifierStart: function (cp) {
		        return (cp === 0x24) || (cp === 0x5F) ||
		            (cp >= 0x41 && cp <= 0x5A) ||
		            (cp >= 0x61 && cp <= 0x7A) ||
		            (cp === 0x5C) ||
		            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));
		    },
		    isIdentifierPart: function (cp) {
		        return (cp === 0x24) || (cp === 0x5F) ||
		            (cp >= 0x41 && cp <= 0x5A) ||
		            (cp >= 0x61 && cp <= 0x7A) ||
		            (cp >= 0x30 && cp <= 0x39) ||
		            (cp === 0x5C) ||
		            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));
		    },
		    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
		    isDecimalDigit: function (cp) {
		        return (cp >= 0x30 && cp <= 0x39); // 0..9
		    },
		    isHexDigit: function (cp) {
		        return (cp >= 0x30 && cp <= 0x39) ||
		            (cp >= 0x41 && cp <= 0x46) ||
		            (cp >= 0x61 && cp <= 0x66); // a..f
		    },
		    isOctalDigit: function (cp) {
		        return (cp >= 0x30 && cp <= 0x37); // 0..7
		    }
		};


	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var jsx_syntax_1 = __webpack_require__(6);
		/* tslint:disable:max-classes-per-file */
		var JSXClosingElement = (function () {
		    function JSXClosingElement(name) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
		        this.name = name;
		    }
		    return JSXClosingElement;
		}());
		exports.JSXClosingElement = JSXClosingElement;
		var JSXElement = (function () {
		    function JSXElement(openingElement, children, closingElement) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXElement;
		        this.openingElement = openingElement;
		        this.children = children;
		        this.closingElement = closingElement;
		    }
		    return JSXElement;
		}());
		exports.JSXElement = JSXElement;
		var JSXEmptyExpression = (function () {
		    function JSXEmptyExpression() {
		        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
		    }
		    return JSXEmptyExpression;
		}());
		exports.JSXEmptyExpression = JSXEmptyExpression;
		var JSXExpressionContainer = (function () {
		    function JSXExpressionContainer(expression) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
		        this.expression = expression;
		    }
		    return JSXExpressionContainer;
		}());
		exports.JSXExpressionContainer = JSXExpressionContainer;
		var JSXIdentifier = (function () {
		    function JSXIdentifier(name) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
		        this.name = name;
		    }
		    return JSXIdentifier;
		}());
		exports.JSXIdentifier = JSXIdentifier;
		var JSXMemberExpression = (function () {
		    function JSXMemberExpression(object, property) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
		        this.object = object;
		        this.property = property;
		    }
		    return JSXMemberExpression;
		}());
		exports.JSXMemberExpression = JSXMemberExpression;
		var JSXAttribute = (function () {
		    function JSXAttribute(name, value) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
		        this.name = name;
		        this.value = value;
		    }
		    return JSXAttribute;
		}());
		exports.JSXAttribute = JSXAttribute;
		var JSXNamespacedName = (function () {
		    function JSXNamespacedName(namespace, name) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
		        this.namespace = namespace;
		        this.name = name;
		    }
		    return JSXNamespacedName;
		}());
		exports.JSXNamespacedName = JSXNamespacedName;
		var JSXOpeningElement = (function () {
		    function JSXOpeningElement(name, selfClosing, attributes) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
		        this.name = name;
		        this.selfClosing = selfClosing;
		        this.attributes = attributes;
		    }
		    return JSXOpeningElement;
		}());
		exports.JSXOpeningElement = JSXOpeningElement;
		var JSXSpreadAttribute = (function () {
		    function JSXSpreadAttribute(argument) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
		        this.argument = argument;
		    }
		    return JSXSpreadAttribute;
		}());
		exports.JSXSpreadAttribute = JSXSpreadAttribute;
		var JSXText = (function () {
		    function JSXText(value, raw) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXText;
		        this.value = value;
		        this.raw = raw;
		    }
		    return JSXText;
		}());
		exports.JSXText = JSXText;


	/***/ },
	/* 6 */
	/***/ function(module, exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.JSXSyntax = {
		    JSXAttribute: 'JSXAttribute',
		    JSXClosingElement: 'JSXClosingElement',
		    JSXElement: 'JSXElement',
		    JSXEmptyExpression: 'JSXEmptyExpression',
		    JSXExpressionContainer: 'JSXExpressionContainer',
		    JSXIdentifier: 'JSXIdentifier',
		    JSXMemberExpression: 'JSXMemberExpression',
		    JSXNamespacedName: 'JSXNamespacedName',
		    JSXOpeningElement: 'JSXOpeningElement',
		    JSXSpreadAttribute: 'JSXSpreadAttribute',
		    JSXText: 'JSXText'
		};


	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var syntax_1 = __webpack_require__(2);
		/* tslint:disable:max-classes-per-file */
		var ArrayExpression = (function () {
		    function ArrayExpression(elements) {
		        this.type = syntax_1.Syntax.ArrayExpression;
		        this.elements = elements;
		    }
		    return ArrayExpression;
		}());
		exports.ArrayExpression = ArrayExpression;
		var ArrayPattern = (function () {
		    function ArrayPattern(elements) {
		        this.type = syntax_1.Syntax.ArrayPattern;
		        this.elements = elements;
		    }
		    return ArrayPattern;
		}());
		exports.ArrayPattern = ArrayPattern;
		var ArrowFunctionExpression = (function () {
		    function ArrowFunctionExpression(params, body, expression) {
		        this.type = syntax_1.Syntax.ArrowFunctionExpression;
		        this.id = null;
		        this.params = params;
		        this.body = body;
		        this.generator = false;
		        this.expression = expression;
		        this.async = false;
		    }
		    return ArrowFunctionExpression;
		}());
		exports.ArrowFunctionExpression = ArrowFunctionExpression;
		var AssignmentExpression = (function () {
		    function AssignmentExpression(operator, left, right) {
		        this.type = syntax_1.Syntax.AssignmentExpression;
		        this.operator = operator;
		        this.left = left;
		        this.right = right;
		    }
		    return AssignmentExpression;
		}());
		exports.AssignmentExpression = AssignmentExpression;
		var AssignmentPattern = (function () {
		    function AssignmentPattern(left, right) {
		        this.type = syntax_1.Syntax.AssignmentPattern;
		        this.left = left;
		        this.right = right;
		    }
		    return AssignmentPattern;
		}());
		exports.AssignmentPattern = AssignmentPattern;
		var AsyncArrowFunctionExpression = (function () {
		    function AsyncArrowFunctionExpression(params, body, expression) {
		        this.type = syntax_1.Syntax.ArrowFunctionExpression;
		        this.id = null;
		        this.params = params;
		        this.body = body;
		        this.generator = false;
		        this.expression = expression;
		        this.async = true;
		    }
		    return AsyncArrowFunctionExpression;
		}());
		exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;
		var AsyncFunctionDeclaration = (function () {
		    function AsyncFunctionDeclaration(id, params, body) {
		        this.type = syntax_1.Syntax.FunctionDeclaration;
		        this.id = id;
		        this.params = params;
		        this.body = body;
		        this.generator = false;
		        this.expression = false;
		        this.async = true;
		    }
		    return AsyncFunctionDeclaration;
		}());
		exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;
		var AsyncFunctionExpression = (function () {
		    function AsyncFunctionExpression(id, params, body) {
		        this.type = syntax_1.Syntax.FunctionExpression;
		        this.id = id;
		        this.params = params;
		        this.body = body;
		        this.generator = false;
		        this.expression = false;
		        this.async = true;
		    }
		    return AsyncFunctionExpression;
		}());
		exports.AsyncFunctionExpression = AsyncFunctionExpression;
		var AwaitExpression = (function () {
		    function AwaitExpression(argument) {
		        this.type = syntax_1.Syntax.AwaitExpression;
		        this.argument = argument;
		    }
		    return AwaitExpression;
		}());
		exports.AwaitExpression = AwaitExpression;
		var BinaryExpression = (function () {
		    function BinaryExpression(operator, left, right) {
		        var logical = (operator === '||' || operator === '&&');
		        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
		        this.operator = operator;
		        this.left = left;
		        this.right = right;
		    }
		    return BinaryExpression;
		}());
		exports.BinaryExpression = BinaryExpression;
		var BlockStatement = (function () {
		    function BlockStatement(body) {
		        this.type = syntax_1.Syntax.BlockStatement;
		        this.body = body;
		    }
		    return BlockStatement;
		}());
		exports.BlockStatement = BlockStatement;
		var BreakStatement = (function () {
		    function BreakStatement(label) {
		        this.type = syntax_1.Syntax.BreakStatement;
		        this.label = label;
		    }
		    return BreakStatement;
		}());
		exports.BreakStatement = BreakStatement;
		var CallExpression = (function () {
		    function CallExpression(callee, args) {
		        this.type = syntax_1.Syntax.CallExpression;
		        this.callee = callee;
		        this.arguments = args;
		    }
		    return CallExpression;
		}());
		exports.CallExpression = CallExpression;
		var CatchClause = (function () {
		    function CatchClause(param, body) {
		        this.type = syntax_1.Syntax.CatchClause;
		        this.param = param;
		        this.body = body;
		    }
		    return CatchClause;
		}());
		exports.CatchClause = CatchClause;
		var ClassBody = (function () {
		    function ClassBody(body) {
		        this.type = syntax_1.Syntax.ClassBody;
		        this.body = body;
		    }
		    return ClassBody;
		}());
		exports.ClassBody = ClassBody;
		var ClassDeclaration = (function () {
		    function ClassDeclaration(id, superClass, body) {
		        this.type = syntax_1.Syntax.ClassDeclaration;
		        this.id = id;
		        this.superClass = superClass;
		        this.body = body;
		    }
		    return ClassDeclaration;
		}());
		exports.ClassDeclaration = ClassDeclaration;
		var ClassExpression = (function () {
		    function ClassExpression(id, superClass, body) {
		        this.type = syntax_1.Syntax.ClassExpression;
		        this.id = id;
		        this.superClass = superClass;
		        this.body = body;
		    }
		    return ClassExpression;
		}());
		exports.ClassExpression = ClassExpression;
		var ComputedMemberExpression = (function () {
		    function ComputedMemberExpression(object, property) {
		        this.type = syntax_1.Syntax.MemberExpression;
		        this.computed = true;
		        this.object = object;
		        this.property = property;
		    }
		    return ComputedMemberExpression;
		}());
		exports.ComputedMemberExpression = ComputedMemberExpression;
		var ConditionalExpression = (function () {
		    function ConditionalExpression(test, consequent, alternate) {
		        this.type = syntax_1.Syntax.ConditionalExpression;
		        this.test = test;
		        this.consequent = consequent;
		        this.alternate = alternate;
		    }
		    return ConditionalExpression;
		}());
		exports.ConditionalExpression = ConditionalExpression;
		var ContinueStatement = (function () {
		    function ContinueStatement(label) {
		        this.type = syntax_1.Syntax.ContinueStatement;
		        this.label = label;
		    }
		    return ContinueStatement;
		}());
		exports.ContinueStatement = ContinueStatement;
		var DebuggerStatement = (function () {
		    function DebuggerStatement() {
		        this.type = syntax_1.Syntax.DebuggerStatement;
		    }
		    return DebuggerStatement;
		}());
		exports.DebuggerStatement = DebuggerStatement;
		var Directive = (function () {
		    function Directive(expression, directive) {
		        this.type = syntax_1.Syntax.ExpressionStatement;
		        this.expression = expression;
		        this.directive = directive;
		    }
		    return Directive;
		}());
		exports.Directive = Directive;
		var DoWhileStatement = (function () {
		    function DoWhileStatement(body, test) {
		        this.type = syntax_1.Syntax.DoWhileStatement;
		        this.body = body;
		        this.test = test;
		    }
		    return DoWhileStatement;
		}());
		exports.DoWhileStatement = DoWhileStatement;
		var EmptyStatement = (function () {
		    function EmptyStatement() {
		        this.type = syntax_1.Syntax.EmptyStatement;
		    }
		    return EmptyStatement;
		}());
		exports.EmptyStatement = EmptyStatement;
		var ExportAllDeclaration = (function () {
		    function ExportAllDeclaration(source) {
		        this.type = syntax_1.Syntax.ExportAllDeclaration;
		        this.source = source;
		    }
		    return ExportAllDeclaration;
		}());
		exports.ExportAllDeclaration = ExportAllDeclaration;
		var ExportDefaultDeclaration = (function () {
		    function ExportDefaultDeclaration(declaration) {
		        this.type = syntax_1.Syntax.ExportDefaultDeclaration;
		        this.declaration = declaration;
		    }
		    return ExportDefaultDeclaration;
		}());
		exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
		var ExportNamedDeclaration = (function () {
		    function ExportNamedDeclaration(declaration, specifiers, source) {
		        this.type = syntax_1.Syntax.ExportNamedDeclaration;
		        this.declaration = declaration;
		        this.specifiers = specifiers;
		        this.source = source;
		    }
		    return ExportNamedDeclaration;
		}());
		exports.ExportNamedDeclaration = ExportNamedDeclaration;
		var ExportSpecifier = (function () {
		    function ExportSpecifier(local, exported) {
		        this.type = syntax_1.Syntax.ExportSpecifier;
		        this.exported = exported;
		        this.local = local;
		    }
		    return ExportSpecifier;
		}());
		exports.ExportSpecifier = ExportSpecifier;
		var ExpressionStatement = (function () {
		    function ExpressionStatement(expression) {
		        this.type = syntax_1.Syntax.ExpressionStatement;
		        this.expression = expression;
		    }
		    return ExpressionStatement;
		}());
		exports.ExpressionStatement = ExpressionStatement;
		var ForInStatement = (function () {
		    function ForInStatement(left, right, body) {
		        this.type = syntax_1.Syntax.ForInStatement;
		        this.left = left;
		        this.right = right;
		        this.body = body;
		        this.each = false;
		    }
		    return ForInStatement;
		}());
		exports.ForInStatement = ForInStatement;
		var ForOfStatement = (function () {
		    function ForOfStatement(left, right, body) {
		        this.type = syntax_1.Syntax.ForOfStatement;
		        this.left = left;
		        this.right = right;
		        this.body = body;
		    }
		    return ForOfStatement;
		}());
		exports.ForOfStatement = ForOfStatement;
		var ForStatement = (function () {
		    function ForStatement(init, test, update, body) {
		        this.type = syntax_1.Syntax.ForStatement;
		        this.init = init;
		        this.test = test;
		        this.update = update;
		        this.body = body;
		    }
		    return ForStatement;
		}());
		exports.ForStatement = ForStatement;
		var FunctionDeclaration = (function () {
		    function FunctionDeclaration(id, params, body, generator) {
		        this.type = syntax_1.Syntax.FunctionDeclaration;
		        this.id = id;
		        this.params = params;
		        this.body = body;
		        this.generator = generator;
		        this.expression = false;
		        this.async = false;
		    }
		    return FunctionDeclaration;
		}());
		exports.FunctionDeclaration = FunctionDeclaration;
		var FunctionExpression = (function () {
		    function FunctionExpression(id, params, body, generator) {
		        this.type = syntax_1.Syntax.FunctionExpression;
		        this.id = id;
		        this.params = params;
		        this.body = body;
		        this.generator = generator;
		        this.expression = false;
		        this.async = false;
		    }
		    return FunctionExpression;
		}());
		exports.FunctionExpression = FunctionExpression;
		var Identifier = (function () {
		    function Identifier(name) {
		        this.type = syntax_1.Syntax.Identifier;
		        this.name = name;
		    }
		    return Identifier;
		}());
		exports.Identifier = Identifier;
		var IfStatement = (function () {
		    function IfStatement(test, consequent, alternate) {
		        this.type = syntax_1.Syntax.IfStatement;
		        this.test = test;
		        this.consequent = consequent;
		        this.alternate = alternate;
		    }
		    return IfStatement;
		}());
		exports.IfStatement = IfStatement;
		var ImportDeclaration = (function () {
		    function ImportDeclaration(specifiers, source) {
		        this.type = syntax_1.Syntax.ImportDeclaration;
		        this.specifiers = specifiers;
		        this.source = source;
		    }
		    return ImportDeclaration;
		}());
		exports.ImportDeclaration = ImportDeclaration;
		var ImportDefaultSpecifier = (function () {
		    function ImportDefaultSpecifier(local) {
		        this.type = syntax_1.Syntax.ImportDefaultSpecifier;
		        this.local = local;
		    }
		    return ImportDefaultSpecifier;
		}());
		exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
		var ImportNamespaceSpecifier = (function () {
		    function ImportNamespaceSpecifier(local) {
		        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
		        this.local = local;
		    }
		    return ImportNamespaceSpecifier;
		}());
		exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
		var ImportSpecifier = (function () {
		    function ImportSpecifier(local, imported) {
		        this.type = syntax_1.Syntax.ImportSpecifier;
		        this.local = local;
		        this.imported = imported;
		    }
		    return ImportSpecifier;
		}());
		exports.ImportSpecifier = ImportSpecifier;
		var LabeledStatement = (function () {
		    function LabeledStatement(label, body) {
		        this.type = syntax_1.Syntax.LabeledStatement;
		        this.label = label;
		        this.body = body;
		    }
		    return LabeledStatement;
		}());
		exports.LabeledStatement = LabeledStatement;
		var Literal = (function () {
		    function Literal(value, raw) {
		        this.type = syntax_1.Syntax.Literal;
		        this.value = value;
		        this.raw = raw;
		    }
		    return Literal;
		}());
		exports.Literal = Literal;
		var MetaProperty = (function () {
		    function MetaProperty(meta, property) {
		        this.type = syntax_1.Syntax.MetaProperty;
		        this.meta = meta;
		        this.property = property;
		    }
		    return MetaProperty;
		}());
		exports.MetaProperty = MetaProperty;
		var MethodDefinition = (function () {
		    function MethodDefinition(key, computed, value, kind, isStatic) {
		        this.type = syntax_1.Syntax.MethodDefinition;
		        this.key = key;
		        this.computed = computed;
		        this.value = value;
		        this.kind = kind;
		        this.static = isStatic;
		    }
		    return MethodDefinition;
		}());
		exports.MethodDefinition = MethodDefinition;
		var Module = (function () {
		    function Module(body) {
		        this.type = syntax_1.Syntax.Program;
		        this.body = body;
		        this.sourceType = 'module';
		    }
		    return Module;
		}());
		exports.Module = Module;
		var NewExpression = (function () {
		    function NewExpression(callee, args) {
		        this.type = syntax_1.Syntax.NewExpression;
		        this.callee = callee;
		        this.arguments = args;
		    }
		    return NewExpression;
		}());
		exports.NewExpression = NewExpression;
		var ObjectExpression = (function () {
		    function ObjectExpression(properties) {
		        this.type = syntax_1.Syntax.ObjectExpression;
		        this.properties = properties;
		    }
		    return ObjectExpression;
		}());
		exports.ObjectExpression = ObjectExpression;
		var ObjectPattern = (function () {
		    function ObjectPattern(properties) {
		        this.type = syntax_1.Syntax.ObjectPattern;
		        this.properties = properties;
		    }
		    return ObjectPattern;
		}());
		exports.ObjectPattern = ObjectPattern;
		var Property = (function () {
		    function Property(kind, key, computed, value, method, shorthand) {
		        this.type = syntax_1.Syntax.Property;
		        this.key = key;
		        this.computed = computed;
		        this.value = value;
		        this.kind = kind;
		        this.method = method;
		        this.shorthand = shorthand;
		    }
		    return Property;
		}());
		exports.Property = Property;
		var RegexLiteral = (function () {
		    function RegexLiteral(value, raw, pattern, flags) {
		        this.type = syntax_1.Syntax.Literal;
		        this.value = value;
		        this.raw = raw;
		        this.regex = { pattern: pattern, flags: flags };
		    }
		    return RegexLiteral;
		}());
		exports.RegexLiteral = RegexLiteral;
		var RestElement = (function () {
		    function RestElement(argument) {
		        this.type = syntax_1.Syntax.RestElement;
		        this.argument = argument;
		    }
		    return RestElement;
		}());
		exports.RestElement = RestElement;
		var ReturnStatement = (function () {
		    function ReturnStatement(argument) {
		        this.type = syntax_1.Syntax.ReturnStatement;
		        this.argument = argument;
		    }
		    return ReturnStatement;
		}());
		exports.ReturnStatement = ReturnStatement;
		var Script = (function () {
		    function Script(body) {
		        this.type = syntax_1.Syntax.Program;
		        this.body = body;
		        this.sourceType = 'script';
		    }
		    return Script;
		}());
		exports.Script = Script;
		var SequenceExpression = (function () {
		    function SequenceExpression(expressions) {
		        this.type = syntax_1.Syntax.SequenceExpression;
		        this.expressions = expressions;
		    }
		    return SequenceExpression;
		}());
		exports.SequenceExpression = SequenceExpression;
		var SpreadElement = (function () {
		    function SpreadElement(argument) {
		        this.type = syntax_1.Syntax.SpreadElement;
		        this.argument = argument;
		    }
		    return SpreadElement;
		}());
		exports.SpreadElement = SpreadElement;
		var StaticMemberExpression = (function () {
		    function StaticMemberExpression(object, property) {
		        this.type = syntax_1.Syntax.MemberExpression;
		        this.computed = false;
		        this.object = object;
		        this.property = property;
		    }
		    return StaticMemberExpression;
		}());
		exports.StaticMemberExpression = StaticMemberExpression;
		var Super = (function () {
		    function Super() {
		        this.type = syntax_1.Syntax.Super;
		    }
		    return Super;
		}());
		exports.Super = Super;
		var SwitchCase = (function () {
		    function SwitchCase(test, consequent) {
		        this.type = syntax_1.Syntax.SwitchCase;
		        this.test = test;
		        this.consequent = consequent;
		    }
		    return SwitchCase;
		}());
		exports.SwitchCase = SwitchCase;
		var SwitchStatement = (function () {
		    function SwitchStatement(discriminant, cases) {
		        this.type = syntax_1.Syntax.SwitchStatement;
		        this.discriminant = discriminant;
		        this.cases = cases;
		    }
		    return SwitchStatement;
		}());
		exports.SwitchStatement = SwitchStatement;
		var TaggedTemplateExpression = (function () {
		    function TaggedTemplateExpression(tag, quasi) {
		        this.type = syntax_1.Syntax.TaggedTemplateExpression;
		        this.tag = tag;
		        this.quasi = quasi;
		    }
		    return TaggedTemplateExpression;
		}());
		exports.TaggedTemplateExpression = TaggedTemplateExpression;
		var TemplateElement = (function () {
		    function TemplateElement(value, tail) {
		        this.type = syntax_1.Syntax.TemplateElement;
		        this.value = value;
		        this.tail = tail;
		    }
		    return TemplateElement;
		}());
		exports.TemplateElement = TemplateElement;
		var TemplateLiteral = (function () {
		    function TemplateLiteral(quasis, expressions) {
		        this.type = syntax_1.Syntax.TemplateLiteral;
		        this.quasis = quasis;
		        this.expressions = expressions;
		    }
		    return TemplateLiteral;
		}());
		exports.TemplateLiteral = TemplateLiteral;
		var ThisExpression = (function () {
		    function ThisExpression() {
		        this.type = syntax_1.Syntax.ThisExpression;
		    }
		    return ThisExpression;
		}());
		exports.ThisExpression = ThisExpression;
		var ThrowStatement = (function () {
		    function ThrowStatement(argument) {
		        this.type = syntax_1.Syntax.ThrowStatement;
		        this.argument = argument;
		    }
		    return ThrowStatement;
		}());
		exports.ThrowStatement = ThrowStatement;
		var TryStatement = (function () {
		    function TryStatement(block, handler, finalizer) {
		        this.type = syntax_1.Syntax.TryStatement;
		        this.block = block;
		        this.handler = handler;
		        this.finalizer = finalizer;
		    }
		    return TryStatement;
		}());
		exports.TryStatement = TryStatement;
		var UnaryExpression = (function () {
		    function UnaryExpression(operator, argument) {
		        this.type = syntax_1.Syntax.UnaryExpression;
		        this.operator = operator;
		        this.argument = argument;
		        this.prefix = true;
		    }
		    return UnaryExpression;
		}());
		exports.UnaryExpression = UnaryExpression;
		var UpdateExpression = (function () {
		    function UpdateExpression(operator, argument, prefix) {
		        this.type = syntax_1.Syntax.UpdateExpression;
		        this.operator = operator;
		        this.argument = argument;
		        this.prefix = prefix;
		    }
		    return UpdateExpression;
		}());
		exports.UpdateExpression = UpdateExpression;
		var VariableDeclaration = (function () {
		    function VariableDeclaration(declarations, kind) {
		        this.type = syntax_1.Syntax.VariableDeclaration;
		        this.declarations = declarations;
		        this.kind = kind;
		    }
		    return VariableDeclaration;
		}());
		exports.VariableDeclaration = VariableDeclaration;
		var VariableDeclarator = (function () {
		    function VariableDeclarator(id, init) {
		        this.type = syntax_1.Syntax.VariableDeclarator;
		        this.id = id;
		        this.init = init;
		    }
		    return VariableDeclarator;
		}());
		exports.VariableDeclarator = VariableDeclarator;
		var WhileStatement = (function () {
		    function WhileStatement(test, body) {
		        this.type = syntax_1.Syntax.WhileStatement;
		        this.test = test;
		        this.body = body;
		    }
		    return WhileStatement;
		}());
		exports.WhileStatement = WhileStatement;
		var WithStatement = (function () {
		    function WithStatement(object, body) {
		        this.type = syntax_1.Syntax.WithStatement;
		        this.object = object;
		        this.body = body;
		    }
		    return WithStatement;
		}());
		exports.WithStatement = WithStatement;
		var YieldExpression = (function () {
		    function YieldExpression(argument, delegate) {
		        this.type = syntax_1.Syntax.YieldExpression;
		        this.argument = argument;
		        this.delegate = delegate;
		    }
		    return YieldExpression;
		}());
		exports.YieldExpression = YieldExpression;


	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var assert_1 = __webpack_require__(9);
		var error_handler_1 = __webpack_require__(10);
		var messages_1 = __webpack_require__(11);
		var Node = __webpack_require__(7);
		var scanner_1 = __webpack_require__(12);
		var syntax_1 = __webpack_require__(2);
		var token_1 = __webpack_require__(13);
		var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';
		var Parser = (function () {
		    function Parser(code, options, delegate) {
		        if (options === void 0) { options = {}; }
		        this.config = {
		            range: (typeof options.range === 'boolean') && options.range,
		            loc: (typeof options.loc === 'boolean') && options.loc,
		            source: null,
		            tokens: (typeof options.tokens === 'boolean') && options.tokens,
		            comment: (typeof options.comment === 'boolean') && options.comment,
		            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant
		        };
		        if (this.config.loc && options.source && options.source !== null) {
		            this.config.source = String(options.source);
		        }
		        this.delegate = delegate;
		        this.errorHandler = new error_handler_1.ErrorHandler();
		        this.errorHandler.tolerant = this.config.tolerant;
		        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
		        this.scanner.trackComment = this.config.comment;
		        this.operatorPrecedence = {
		            ')': 0,
		            ';': 0,
		            ',': 0,
		            '=': 0,
		            ']': 0,
		            '||': 1,
		            '&&': 2,
		            '|': 3,
		            '^': 4,
		            '&': 5,
		            '==': 6,
		            '!=': 6,
		            '===': 6,
		            '!==': 6,
		            '<': 7,
		            '>': 7,
		            '<=': 7,
		            '>=': 7,
		            '<<': 8,
		            '>>': 8,
		            '>>>': 8,
		            '+': 9,
		            '-': 9,
		            '*': 11,
		            '/': 11,
		            '%': 11
		        };
		        this.lookahead = {
		            type: 2 /* EOF */,
		            value: '',
		            lineNumber: this.scanner.lineNumber,
		            lineStart: 0,
		            start: 0,
		            end: 0
		        };
		        this.hasLineTerminator = false;
		        this.context = {
		            isModule: false,
		            await: false,
		            allowIn: true,
		            allowStrictDirective: true,
		            allowYield: true,
		            firstCoverInitializedNameError: null,
		            isAssignmentTarget: false,
		            isBindingElement: false,
		            inFunctionBody: false,
		            inIteration: false,
		            inSwitch: false,
		            labelSet: {},
		            strict: false
		        };
		        this.tokens = [];
		        this.startMarker = {
		            index: 0,
		            line: this.scanner.lineNumber,
		            column: 0
		        };
		        this.lastMarker = {
		            index: 0,
		            line: this.scanner.lineNumber,
		            column: 0
		        };
		        this.nextToken();
		        this.lastMarker = {
		            index: this.scanner.index,
		            line: this.scanner.lineNumber,
		            column: this.scanner.index - this.scanner.lineStart
		        };
		    }
		    Parser.prototype.throwError = function (messageFormat) {
		        var values = [];
		        for (var _i = 1; _i < arguments.length; _i++) {
		            values[_i - 1] = arguments[_i];
		        }
		        var args = Array.prototype.slice.call(arguments, 1);
		        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
		            assert_1.assert(idx < args.length, 'Message reference must be in range');
		            return args[idx];
		        });
		        var index = this.lastMarker.index;
		        var line = this.lastMarker.line;
		        var column = this.lastMarker.column + 1;
		        throw this.errorHandler.createError(index, line, column, msg);
		    };
		    Parser.prototype.tolerateError = function (messageFormat) {
		        var values = [];
		        for (var _i = 1; _i < arguments.length; _i++) {
		            values[_i - 1] = arguments[_i];
		        }
		        var args = Array.prototype.slice.call(arguments, 1);
		        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
		            assert_1.assert(idx < args.length, 'Message reference must be in range');
		            return args[idx];
		        });
		        var index = this.lastMarker.index;
		        var line = this.scanner.lineNumber;
		        var column = this.lastMarker.column + 1;
		        this.errorHandler.tolerateError(index, line, column, msg);
		    };
		    // Throw an exception because of the token.
		    Parser.prototype.unexpectedTokenError = function (token, message) {
		        var msg = message || messages_1.Messages.UnexpectedToken;
		        var value;
		        if (token) {
		            if (!message) {
		                msg = (token.type === 2 /* EOF */) ? messages_1.Messages.UnexpectedEOS :
		                    (token.type === 3 /* Identifier */) ? messages_1.Messages.UnexpectedIdentifier :
		                        (token.type === 6 /* NumericLiteral */) ? messages_1.Messages.UnexpectedNumber :
		                            (token.type === 8 /* StringLiteral */) ? messages_1.Messages.UnexpectedString :
		                                (token.type === 10 /* Template */) ? messages_1.Messages.UnexpectedTemplate :
		                                    messages_1.Messages.UnexpectedToken;
		                if (token.type === 4 /* Keyword */) {
		                    if (this.scanner.isFutureReservedWord(token.value)) {
		                        msg = messages_1.Messages.UnexpectedReserved;
		                    }
		                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
		                        msg = messages_1.Messages.StrictReservedWord;
		                    }
		                }
		            }
		            value = token.value;
		        }
		        else {
		            value = 'ILLEGAL';
		        }
		        msg = msg.replace('%0', value);
		        if (token && typeof token.lineNumber === 'number') {
		            var index = token.start;
		            var line = token.lineNumber;
		            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;
		            var column = token.start - lastMarkerLineStart + 1;
		            return this.errorHandler.createError(index, line, column, msg);
		        }
		        else {
		            var index = this.lastMarker.index;
		            var line = this.lastMarker.line;
		            var column = this.lastMarker.column + 1;
		            return this.errorHandler.createError(index, line, column, msg);
		        }
		    };
		    Parser.prototype.throwUnexpectedToken = function (token, message) {
		        throw this.unexpectedTokenError(token, message);
		    };
		    Parser.prototype.tolerateUnexpectedToken = function (token, message) {
		        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
		    };
		    Parser.prototype.collectComments = function () {
		        if (!this.config.comment) {
		            this.scanner.scanComments();
		        }
		        else {
		            var comments = this.scanner.scanComments();
		            if (comments.length > 0 && this.delegate) {
		                for (var i = 0; i < comments.length; ++i) {
		                    var e = comments[i];
		                    var node = void 0;
		                    node = {
		                        type: e.multiLine ? 'BlockComment' : 'LineComment',
		                        value: this.scanner.source.slice(e.slice[0], e.slice[1])
		                    };
		                    if (this.config.range) {
		                        node.range = e.range;
		                    }
		                    if (this.config.loc) {
		                        node.loc = e.loc;
		                    }
		                    var metadata = {
		                        start: {
		                            line: e.loc.start.line,
		                            column: e.loc.start.column,
		                            offset: e.range[0]
		                        },
		                        end: {
		                            line: e.loc.end.line,
		                            column: e.loc.end.column,
		                            offset: e.range[1]
		                        }
		                    };
		                    this.delegate(node, metadata);
		                }
		            }
		        }
		    };
		    // From internal representation to an external structure
		    Parser.prototype.getTokenRaw = function (token) {
		        return this.scanner.source.slice(token.start, token.end);
		    };
		    Parser.prototype.convertToken = function (token) {
		        var t = {
		            type: token_1.TokenName[token.type],
		            value: this.getTokenRaw(token)
		        };
		        if (this.config.range) {
		            t.range = [token.start, token.end];
		        }
		        if (this.config.loc) {
		            t.loc = {
		                start: {
		                    line: this.startMarker.line,
		                    column: this.startMarker.column
		                },
		                end: {
		                    line: this.scanner.lineNumber,
		                    column: this.scanner.index - this.scanner.lineStart
		                }
		            };
		        }
		        if (token.type === 9 /* RegularExpression */) {
		            var pattern = token.pattern;
		            var flags = token.flags;
		            t.regex = { pattern: pattern, flags: flags };
		        }
		        return t;
		    };
		    Parser.prototype.nextToken = function () {
		        var token = this.lookahead;
		        this.lastMarker.index = this.scanner.index;
		        this.lastMarker.line = this.scanner.lineNumber;
		        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
		        this.collectComments();
		        if (this.scanner.index !== this.startMarker.index) {
		            this.startMarker.index = this.scanner.index;
		            this.startMarker.line = this.scanner.lineNumber;
		            this.startMarker.column = this.scanner.index - this.scanner.lineStart;
		        }
		        var next = this.scanner.lex();
		        this.hasLineTerminator = (token.lineNumber !== next.lineNumber);
		        if (next && this.context.strict && next.type === 3 /* Identifier */) {
		            if (this.scanner.isStrictModeReservedWord(next.value)) {
		                next.type = 4 /* Keyword */;
		            }
		        }
		        this.lookahead = next;
		        if (this.config.tokens && next.type !== 2 /* EOF */) {
		            this.tokens.push(this.convertToken(next));
		        }
		        return token;
		    };
		    Parser.prototype.nextRegexToken = function () {
		        this.collectComments();
		        var token = this.scanner.scanRegExp();
		        if (this.config.tokens) {
		            // Pop the previous token, '/' or '/='
		            // This is added from the lookahead token.
		            this.tokens.pop();
		            this.tokens.push(this.convertToken(token));
		        }
		        // Prime the next lookahead.
		        this.lookahead = token;
		        this.nextToken();
		        return token;
		    };
		    Parser.prototype.createNode = function () {
		        return {
		            index: this.startMarker.index,
		            line: this.startMarker.line,
		            column: this.startMarker.column
		        };
		    };
		    Parser.prototype.startNode = function (token, lastLineStart) {
		        if (lastLineStart === void 0) { lastLineStart = 0; }
		        var column = token.start - token.lineStart;
		        var line = token.lineNumber;
		        if (column < 0) {
		            column += lastLineStart;
		            line--;
		        }
		        return {
		            index: token.start,
		            line: line,
		            column: column
		        };
		    };
		    Parser.prototype.finalize = function (marker, node) {
		        if (this.config.range) {
		            node.range = [marker.index, this.lastMarker.index];
		        }
		        if (this.config.loc) {
		            node.loc = {
		                start: {
		                    line: marker.line,
		                    column: marker.column,
		                },
		                end: {
		                    line: this.lastMarker.line,
		                    column: this.lastMarker.column
		                }
		            };
		            if (this.config.source) {
		                node.loc.source = this.config.source;
		            }
		        }
		        if (this.delegate) {
		            var metadata = {
		                start: {
		                    line: marker.line,
		                    column: marker.column,
		                    offset: marker.index
		                },
		                end: {
		                    line: this.lastMarker.line,
		                    column: this.lastMarker.column,
		                    offset: this.lastMarker.index
		                }
		            };
		            this.delegate(node, metadata);
		        }
		        return node;
		    };
		    // Expect the next token to match the specified punctuator.
		    // If not, an exception will be thrown.
		    Parser.prototype.expect = function (value) {
		        var token = this.nextToken();
		        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
		            this.throwUnexpectedToken(token);
		        }
		    };
		    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().
		    Parser.prototype.expectCommaSeparator = function () {
		        if (this.config.tolerant) {
		            var token = this.lookahead;
		            if (token.type === 7 /* Punctuator */ && token.value === ',') {
		                this.nextToken();
		            }
		            else if (token.type === 7 /* Punctuator */ && token.value === ';') {
		                this.nextToken();
		                this.tolerateUnexpectedToken(token);
		            }
		            else {
		                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
		            }
		        }
		        else {
		            this.expect(',');
		        }
		    };
		    // Expect the next token to match the specified keyword.
		    // If not, an exception will be thrown.
		    Parser.prototype.expectKeyword = function (keyword) {
		        var token = this.nextToken();
		        if (token.type !== 4 /* Keyword */ || token.value !== keyword) {
		            this.throwUnexpectedToken(token);
		        }
		    };
		    // Return true if the next token matches the specified punctuator.
		    Parser.prototype.match = function (value) {
		        return this.lookahead.type === 7 /* Punctuator */ && this.lookahead.value === value;
		    };
		    // Return true if the next token matches the specified keyword
		    Parser.prototype.matchKeyword = function (keyword) {
		        return this.lookahead.type === 4 /* Keyword */ && this.lookahead.value === keyword;
		    };
		    // Return true if the next token matches the specified contextual keyword
		    // (where an identifier is sometimes a keyword depending on the context)
		    Parser.prototype.matchContextualKeyword = function (keyword) {
		        return this.lookahead.type === 3 /* Identifier */ && this.lookahead.value === keyword;
		    };
		    // Return true if the next token is an assignment operator
		    Parser.prototype.matchAssign = function () {
		        if (this.lookahead.type !== 7 /* Punctuator */) {
		            return false;
		        }
		        var op = this.lookahead.value;
		        return op === '=' ||
		            op === '*=' ||
		            op === '**=' ||
		            op === '/=' ||
		            op === '%=' ||
		            op === '+=' ||
		            op === '-=' ||
		            op === '<<=' ||
		            op === '>>=' ||
		            op === '>>>=' ||
		            op === '&=' ||
		            op === '^=' ||
		            op === '|=';
		    };
		    // Cover grammar support.
		    //
		    // When an assignment expression position starts with an left parenthesis, the determination of the type
		    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
		    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
		    //
		    // There are three productions that can be parsed in a parentheses pair that needs to be determined
		    // after the outermost pair is closed. They are:
		    //
		    //   1. AssignmentExpression
		    //   2. BindingElements
		    //   3. AssignmentTargets
		    //
		    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
		    // binding element or assignment target.
		    //
		    // The three productions have the relationship:
		    //
		    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
		    //
		    // with a single exception that CoverInitializedName when used directly in an Expression, generates
		    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
		    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
		    //
		    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
		    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
		    // the CoverInitializedName check is conducted.
		    //
		    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
		    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
		    // pattern. The CoverInitializedName check is deferred.
		    Parser.prototype.isolateCoverGrammar = function (parseFunction) {
		        var previousIsBindingElement = this.context.isBindingElement;
		        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
		        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
		        this.context.isBindingElement = true;
		        this.context.isAssignmentTarget = true;
		        this.context.firstCoverInitializedNameError = null;
		        var result = parseFunction.call(this);
		        if (this.context.firstCoverInitializedNameError !== null) {
		            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
		        }
		        this.context.isBindingElement = previousIsBindingElement;
		        this.context.isAssignmentTarget = previousIsAssignmentTarget;
		        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
		        return result;
		    };
		    Parser.prototype.inheritCoverGrammar = function (parseFunction) {
		        var previousIsBindingElement = this.context.isBindingElement;
		        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
		        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
		        this.context.isBindingElement = true;
		        this.context.isAssignmentTarget = true;
		        this.context.firstCoverInitializedNameError = null;
		        var result = parseFunction.call(this);
		        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
		        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
		        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
		        return result;
		    };
		    Parser.prototype.consumeSemicolon = function () {
		        if (this.match(';')) {
		            this.nextToken();
		        }
		        else if (!this.hasLineTerminator) {
		            if (this.lookahead.type !== 2 /* EOF */ && !this.match('}')) {
		                this.throwUnexpectedToken(this.lookahead);
		            }
		            this.lastMarker.index = this.startMarker.index;
		            this.lastMarker.line = this.startMarker.line;
		            this.lastMarker.column = this.startMarker.column;
		        }
		    };
		    // https://tc39.github.io/ecma262/#sec-primary-expression
		    Parser.prototype.parsePrimaryExpression = function () {
		        var node = this.createNode();
		        var expr;
		        var token, raw;
		        switch (this.lookahead.type) {
		            case 3 /* Identifier */:
		                if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {
		                    this.tolerateUnexpectedToken(this.lookahead);
		                }
		                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));
		                break;
		            case 6 /* NumericLiteral */:
		            case 8 /* StringLiteral */:
		                if (this.context.strict && this.lookahead.octal) {
		                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
		                }
		                this.context.isAssignmentTarget = false;
		                this.context.isBindingElement = false;
		                token = this.nextToken();
		                raw = this.getTokenRaw(token);
		                expr = this.finalize(node, new Node.Literal(token.value, raw));
		                break;
		            case 1 /* BooleanLiteral */:
		                this.context.isAssignmentTarget = false;
		                this.context.isBindingElement = false;
		                token = this.nextToken();
		                raw = this.getTokenRaw(token);
		                expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));
		                break;
		            case 5 /* NullLiteral */:
		                this.context.isAssignmentTarget = false;
		                this.context.isBindingElement = false;
		                token = this.nextToken();
		                raw = this.getTokenRaw(token);
		                expr = this.finalize(node, new Node.Literal(null, raw));
		                break;
		            case 10 /* Template */:
		                expr = this.parseTemplateLiteral();
		                break;
		            case 7 /* Punctuator */:
		                switch (this.lookahead.value) {
		                    case '(':
		                        this.context.isBindingElement = false;
		                        expr = this.inheritCoverGrammar(this.parseGroupExpression);
		                        break;
		                    case '[':
		                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);
		                        break;
		                    case '{':
		                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);
		                        break;
		                    case '/':
		                    case '/=':
		                        this.context.isAssignmentTarget = false;
		                        this.context.isBindingElement = false;
		                        this.scanner.index = this.startMarker.index;
		                        token = this.nextRegexToken();
		                        raw = this.getTokenRaw(token);
		                        expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));
		                        break;
		                    default:
		                        expr = this.throwUnexpectedToken(this.nextToken());
		                }
		                break;
		            case 4 /* Keyword */:
		                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {
		                    expr = this.parseIdentifierName();
		                }
		                else if (!this.context.strict && this.matchKeyword('let')) {
		                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
		                }
		                else {
		                    this.context.isAssignmentTarget = false;
		                    this.context.isBindingElement = false;
		                    if (this.matchKeyword('function')) {
		                        expr = this.parseFunctionExpression();
		                    }
		                    else if (this.matchKeyword('this')) {
		                        this.nextToken();
		                        expr = this.finalize(node, new Node.ThisExpression());
		                    }
		                    else if (this.matchKeyword('class')) {
		                        expr = this.parseClassExpression();
		                    }
		                    else {
		                        expr = this.throwUnexpectedToken(this.nextToken());
		                    }
		                }
		                break;
		            default:
		                expr = this.throwUnexpectedToken(this.nextToken());
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-array-initializer
		    Parser.prototype.parseSpreadElement = function () {
		        var node = this.createNode();
		        this.expect('...');
		        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
		        return this.finalize(node, new Node.SpreadElement(arg));
		    };
		    Parser.prototype.parseArrayInitializer = function () {
		        var node = this.createNode();
		        var elements = [];
		        this.expect('[');
		        while (!this.match(']')) {
		            if (this.match(',')) {
		                this.nextToken();
		                elements.push(null);
		            }
		            else if (this.match('...')) {
		                var element = this.parseSpreadElement();
		                if (!this.match(']')) {
		                    this.context.isAssignmentTarget = false;
		                    this.context.isBindingElement = false;
		                    this.expect(',');
		                }
		                elements.push(element);
		            }
		            else {
		                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
		                if (!this.match(']')) {
		                    this.expect(',');
		                }
		            }
		        }
		        this.expect(']');
		        return this.finalize(node, new Node.ArrayExpression(elements));
		    };
		    // https://tc39.github.io/ecma262/#sec-object-initializer
		    Parser.prototype.parsePropertyMethod = function (params) {
		        this.context.isAssignmentTarget = false;
		        this.context.isBindingElement = false;
		        var previousStrict = this.context.strict;
		        var previousAllowStrictDirective = this.context.allowStrictDirective;
		        this.context.allowStrictDirective = params.simple;
		        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);
		        if (this.context.strict && params.firstRestricted) {
		            this.tolerateUnexpectedToken(params.firstRestricted, params.message);
		        }
		        if (this.context.strict && params.stricted) {
		            this.tolerateUnexpectedToken(params.stricted, params.message);
		        }
		        this.context.strict = previousStrict;
		        this.context.allowStrictDirective = previousAllowStrictDirective;
		        return body;
		    };
		    Parser.prototype.parsePropertyMethodFunction = function () {
		        var isGenerator = false;
		        var node = this.createNode();
		        var previousAllowYield = this.context.allowYield;
		        this.context.allowYield = true;
		        var params = this.parseFormalParameters();
		        var method = this.parsePropertyMethod(params);
		        this.context.allowYield = previousAllowYield;
		        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
		    };
		    Parser.prototype.parsePropertyMethodAsyncFunction = function () {
		        var node = this.createNode();
		        var previousAllowYield = this.context.allowYield;
		        var previousAwait = this.context.await;
		        this.context.allowYield = false;
		        this.context.await = true;
		        var params = this.parseFormalParameters();
		        var method = this.parsePropertyMethod(params);
		        this.context.allowYield = previousAllowYield;
		        this.context.await = previousAwait;
		        return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));
		    };
		    Parser.prototype.parseObjectPropertyKey = function () {
		        var node = this.createNode();
		        var token = this.nextToken();
		        var key;
		        switch (token.type) {
		            case 8 /* StringLiteral */:
		            case 6 /* NumericLiteral */:
		                if (this.context.strict && token.octal) {
		                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
		                }
		                var raw = this.getTokenRaw(token);
		                key = this.finalize(node, new Node.Literal(token.value, raw));
		                break;
		            case 3 /* Identifier */:
		            case 1 /* BooleanLiteral */:
		            case 5 /* NullLiteral */:
		            case 4 /* Keyword */:
		                key = this.finalize(node, new Node.Identifier(token.value));
		                break;
		            case 7 /* Punctuator */:
		                if (token.value === '[') {
		                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);
		                    this.expect(']');
		                }
		                else {
		                    key = this.throwUnexpectedToken(token);
		                }
		                break;
		            default:
		                key = this.throwUnexpectedToken(token);
		        }
		        return key;
		    };
		    Parser.prototype.isPropertyKey = function (key, value) {
		        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||
		            (key.type === syntax_1.Syntax.Literal && key.value === value);
		    };
		    Parser.prototype.parseObjectProperty = function (hasProto) {
		        var node = this.createNode();
		        var token = this.lookahead;
		        var kind;
		        var key = null;
		        var value = null;
		        var computed = false;
		        var method = false;
		        var shorthand = false;
		        var isAsync = false;
		        if (token.type === 3 /* Identifier */) {
		            var id = token.value;
		            this.nextToken();
		            computed = this.match('[');
		            isAsync = !this.hasLineTerminator && (id === 'async') &&
		                !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');
		            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));
		        }
		        else if (this.match('*')) {
		            this.nextToken();
		        }
		        else {
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		        }
		        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
		        if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {
		            kind = 'get';
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            this.context.allowYield = false;
		            value = this.parseGetterMethod();
		        }
		        else if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {
		            kind = 'set';
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            value = this.parseSetterMethod();
		        }
		        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
		            kind = 'init';
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            value = this.parseGeneratorMethod();
		            method = true;
		        }
		        else {
		            if (!key) {
		                this.throwUnexpectedToken(this.lookahead);
		            }
		            kind = 'init';
		            if (this.match(':') && !isAsync) {
		                if (!computed && this.isPropertyKey(key, '__proto__')) {
		                    if (hasProto.value) {
		                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
		                    }
		                    hasProto.value = true;
		                }
		                this.nextToken();
		                value = this.inheritCoverGrammar(this.parseAssignmentExpression);
		            }
		            else if (this.match('(')) {
		                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
		                method = true;
		            }
		            else if (token.type === 3 /* Identifier */) {
		                var id = this.finalize(node, new Node.Identifier(token.value));
		                if (this.match('=')) {
		                    this.context.firstCoverInitializedNameError = this.lookahead;
		                    this.nextToken();
		                    shorthand = true;
		                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
		                    value = this.finalize(node, new Node.AssignmentPattern(id, init));
		                }
		                else {
		                    shorthand = true;
		                    value = id;
		                }
		            }
		            else {
		                this.throwUnexpectedToken(this.nextToken());
		            }
		        }
		        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
		    };
		    Parser.prototype.parseObjectInitializer = function () {
		        var node = this.createNode();
		        this.expect('{');
		        var properties = [];
		        var hasProto = { value: false };
		        while (!this.match('}')) {
		            properties.push(this.parseObjectProperty(hasProto));
		            if (!this.match('}')) {
		                this.expectCommaSeparator();
		            }
		        }
		        this.expect('}');
		        return this.finalize(node, new Node.ObjectExpression(properties));
		    };
		    // https://tc39.github.io/ecma262/#sec-template-literals
		    Parser.prototype.parseTemplateHead = function () {
		        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');
		        var node = this.createNode();
		        var token = this.nextToken();
		        var raw = token.value;
		        var cooked = token.cooked;
		        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
		    };
		    Parser.prototype.parseTemplateElement = function () {
		        if (this.lookahead.type !== 10 /* Template */) {
		            this.throwUnexpectedToken();
		        }
		        var node = this.createNode();
		        var token = this.nextToken();
		        var raw = token.value;
		        var cooked = token.cooked;
		        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
		    };
		    Parser.prototype.parseTemplateLiteral = function () {
		        var node = this.createNode();
		        var expressions = [];
		        var quasis = [];
		        var quasi = this.parseTemplateHead();
		        quasis.push(quasi);
		        while (!quasi.tail) {
		            expressions.push(this.parseExpression());
		            quasi = this.parseTemplateElement();
		            quasis.push(quasi);
		        }
		        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
		    };
		    // https://tc39.github.io/ecma262/#sec-grouping-operator
		    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {
		        switch (expr.type) {
		            case syntax_1.Syntax.Identifier:
		            case syntax_1.Syntax.MemberExpression:
		            case syntax_1.Syntax.RestElement:
		            case syntax_1.Syntax.AssignmentPattern:
		                break;
		            case syntax_1.Syntax.SpreadElement:
		                expr.type = syntax_1.Syntax.RestElement;
		                this.reinterpretExpressionAsPattern(expr.argument);
		                break;
		            case syntax_1.Syntax.ArrayExpression:
		                expr.type = syntax_1.Syntax.ArrayPattern;
		                for (var i = 0; i < expr.elements.length; i++) {
		                    if (expr.elements[i] !== null) {
		                        this.reinterpretExpressionAsPattern(expr.elements[i]);
		                    }
		                }
		                break;
		            case syntax_1.Syntax.ObjectExpression:
		                expr.type = syntax_1.Syntax.ObjectPattern;
		                for (var i = 0; i < expr.properties.length; i++) {
		                    this.reinterpretExpressionAsPattern(expr.properties[i].value);
		                }
		                break;
		            case syntax_1.Syntax.AssignmentExpression:
		                expr.type = syntax_1.Syntax.AssignmentPattern;
		                delete expr.operator;
		                this.reinterpretExpressionAsPattern(expr.left);
		                break;
		        }
		    };
		    Parser.prototype.parseGroupExpression = function () {
		        var expr;
		        this.expect('(');
		        if (this.match(')')) {
		            this.nextToken();
		            if (!this.match('=>')) {
		                this.expect('=>');
		            }
		            expr = {
		                type: ArrowParameterPlaceHolder,
		                params: [],
		                async: false
		            };
		        }
		        else {
		            var startToken = this.lookahead;
		            var params = [];
		            if (this.match('...')) {
		                expr = this.parseRestElement(params);
		                this.expect(')');
		                if (!this.match('=>')) {
		                    this.expect('=>');
		                }
		                expr = {
		                    type: ArrowParameterPlaceHolder,
		                    params: [expr],
		                    async: false
		                };
		            }
		            else {
		                var arrow = false;
		                this.context.isBindingElement = true;
		                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);
		                if (this.match(',')) {
		                    var expressions = [];
		                    this.context.isAssignmentTarget = false;
		                    expressions.push(expr);
		                    while (this.lookahead.type !== 2 /* EOF */) {
		                        if (!this.match(',')) {
		                            break;
		                        }
		                        this.nextToken();
		                        if (this.match(')')) {
		                            this.nextToken();
		                            for (var i = 0; i < expressions.length; i++) {
		                                this.reinterpretExpressionAsPattern(expressions[i]);
		                            }
		                            arrow = true;
		                            expr = {
		                                type: ArrowParameterPlaceHolder,
		                                params: expressions,
		                                async: false
		                            };
		                        }
		                        else if (this.match('...')) {
		                            if (!this.context.isBindingElement) {
		                                this.throwUnexpectedToken(this.lookahead);
		                            }
		                            expressions.push(this.parseRestElement(params));
		                            this.expect(')');
		                            if (!this.match('=>')) {
		                                this.expect('=>');
		                            }
		                            this.context.isBindingElement = false;
		                            for (var i = 0; i < expressions.length; i++) {
		                                this.reinterpretExpressionAsPattern(expressions[i]);
		                            }
		                            arrow = true;
		                            expr = {
		                                type: ArrowParameterPlaceHolder,
		                                params: expressions,
		                                async: false
		                            };
		                        }
		                        else {
		                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
		                        }
		                        if (arrow) {
		                            break;
		                        }
		                    }
		                    if (!arrow) {
		                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
		                    }
		                }
		                if (!arrow) {
		                    this.expect(')');
		                    if (this.match('=>')) {
		                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {
		                            arrow = true;
		                            expr = {
		                                type: ArrowParameterPlaceHolder,
		                                params: [expr],
		                                async: false
		                            };
		                        }
		                        if (!arrow) {
		                            if (!this.context.isBindingElement) {
		                                this.throwUnexpectedToken(this.lookahead);
		                            }
		                            if (expr.type === syntax_1.Syntax.SequenceExpression) {
		                                for (var i = 0; i < expr.expressions.length; i++) {
		                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);
		                                }
		                            }
		                            else {
		                                this.reinterpretExpressionAsPattern(expr);
		                            }
		                            var parameters = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);
		                            expr = {
		                                type: ArrowParameterPlaceHolder,
		                                params: parameters,
		                                async: false
		                            };
		                        }
		                    }
		                    this.context.isBindingElement = false;
		                }
		            }
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions
		    Parser.prototype.parseArguments = function () {
		        this.expect('(');
		        var args = [];
		        if (!this.match(')')) {
		            while (true) {
		                var expr = this.match('...') ? this.parseSpreadElement() :
		                    this.isolateCoverGrammar(this.parseAssignmentExpression);
		                args.push(expr);
		                if (this.match(')')) {
		                    break;
		                }
		                this.expectCommaSeparator();
		                if (this.match(')')) {
		                    break;
		                }
		            }
		        }
		        this.expect(')');
		        return args;
		    };
		    Parser.prototype.isIdentifierName = function (token) {
		        return token.type === 3 /* Identifier */ ||
		            token.type === 4 /* Keyword */ ||
		            token.type === 1 /* BooleanLiteral */ ||
		            token.type === 5 /* NullLiteral */;
		    };
		    Parser.prototype.parseIdentifierName = function () {
		        var node = this.createNode();
		        var token = this.nextToken();
		        if (!this.isIdentifierName(token)) {
		            this.throwUnexpectedToken(token);
		        }
		        return this.finalize(node, new Node.Identifier(token.value));
		    };
		    Parser.prototype.parseNewExpression = function () {
		        var node = this.createNode();
		        var id = this.parseIdentifierName();
		        assert_1.assert(id.name === 'new', 'New expression must start with `new`');
		        var expr;
		        if (this.match('.')) {
		            this.nextToken();
		            if (this.lookahead.type === 3 /* Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {
		                var property = this.parseIdentifierName();
		                expr = new Node.MetaProperty(id, property);
		            }
		            else {
		                this.throwUnexpectedToken(this.lookahead);
		            }
		        }
		        else {
		            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
		            var args = this.match('(') ? this.parseArguments() : [];
		            expr = new Node.NewExpression(callee, args);
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		        }
		        return this.finalize(node, expr);
		    };
		    Parser.prototype.parseAsyncArgument = function () {
		        var arg = this.parseAssignmentExpression();
		        this.context.firstCoverInitializedNameError = null;
		        return arg;
		    };
		    Parser.prototype.parseAsyncArguments = function () {
		        this.expect('(');
		        var args = [];
		        if (!this.match(')')) {
		            while (true) {
		                var expr = this.match('...') ? this.parseSpreadElement() :
		                    this.isolateCoverGrammar(this.parseAsyncArgument);
		                args.push(expr);
		                if (this.match(')')) {
		                    break;
		                }
		                this.expectCommaSeparator();
		                if (this.match(')')) {
		                    break;
		                }
		            }
		        }
		        this.expect(')');
		        return args;
		    };
		    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
		        var startToken = this.lookahead;
		        var maybeAsync = this.matchContextualKeyword('async');
		        var previousAllowIn = this.context.allowIn;
		        this.context.allowIn = true;
		        var expr;
		        if (this.matchKeyword('super') && this.context.inFunctionBody) {
		            expr = this.createNode();
		            this.nextToken();
		            expr = this.finalize(expr, new Node.Super());
		            if (!this.match('(') && !this.match('.') && !this.match('[')) {
		                this.throwUnexpectedToken(this.lookahead);
		            }
		        }
		        else {
		            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
		        }
		        while (true) {
		            if (this.match('.')) {
		                this.context.isBindingElement = false;
		                this.context.isAssignmentTarget = true;
		                this.expect('.');
		                var property = this.parseIdentifierName();
		                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
		            }
		            else if (this.match('(')) {
		                var asyncArrow = maybeAsync && (startToken.lineNumber === this.lookahead.lineNumber);
		                this.context.isBindingElement = false;
		                this.context.isAssignmentTarget = false;
		                var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();
		                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));
		                if (asyncArrow && this.match('=>')) {
		                    for (var i = 0; i < args.length; ++i) {
		                        this.reinterpretExpressionAsPattern(args[i]);
		                    }
		                    expr = {
		                        type: ArrowParameterPlaceHolder,
		                        params: args,
		                        async: true
		                    };
		                }
		            }
		            else if (this.match('[')) {
		                this.context.isBindingElement = false;
		                this.context.isAssignmentTarget = true;
		                this.expect('[');
		                var property = this.isolateCoverGrammar(this.parseExpression);
		                this.expect(']');
		                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
		            }
		            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
		                var quasi = this.parseTemplateLiteral();
		                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
		            }
		            else {
		                break;
		            }
		        }
		        this.context.allowIn = previousAllowIn;
		        return expr;
		    };
		    Parser.prototype.parseSuper = function () {
		        var node = this.createNode();
		        this.expectKeyword('super');
		        if (!this.match('[') && !this.match('.')) {
		            this.throwUnexpectedToken(this.lookahead);
		        }
		        return this.finalize(node, new Node.Super());
		    };
		    Parser.prototype.parseLeftHandSideExpression = function () {
		        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');
		        var node = this.startNode(this.lookahead);
		        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :
		            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
		        while (true) {
		            if (this.match('[')) {
		                this.context.isBindingElement = false;
		                this.context.isAssignmentTarget = true;
		                this.expect('[');
		                var property = this.isolateCoverGrammar(this.parseExpression);
		                this.expect(']');
		                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
		            }
		            else if (this.match('.')) {
		                this.context.isBindingElement = false;
		                this.context.isAssignmentTarget = true;
		                this.expect('.');
		                var property = this.parseIdentifierName();
		                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
		            }
		            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
		                var quasi = this.parseTemplateLiteral();
		                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
		            }
		            else {
		                break;
		            }
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-update-expressions
		    Parser.prototype.parseUpdateExpression = function () {
		        var expr;
		        var startToken = this.lookahead;
		        if (this.match('++') || this.match('--')) {
		            var node = this.startNode(startToken);
		            var token = this.nextToken();
		            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
		            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
		                this.tolerateError(messages_1.Messages.StrictLHSPrefix);
		            }
		            if (!this.context.isAssignmentTarget) {
		                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
		            }
		            var prefix = true;
		            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		        }
		        else {
		            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
		            if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */) {
		                if (this.match('++') || this.match('--')) {
		                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
		                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);
		                    }
		                    if (!this.context.isAssignmentTarget) {
		                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
		                    }
		                    this.context.isAssignmentTarget = false;
		                    this.context.isBindingElement = false;
		                    var operator = this.nextToken().value;
		                    var prefix = false;
		                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
		                }
		            }
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-unary-operators
		    Parser.prototype.parseAwaitExpression = function () {
		        var node = this.createNode();
		        this.nextToken();
		        var argument = this.parseUnaryExpression();
		        return this.finalize(node, new Node.AwaitExpression(argument));
		    };
		    Parser.prototype.parseUnaryExpression = function () {
		        var expr;
		        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||
		            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {
		            var node = this.startNode(this.lookahead);
		            var token = this.nextToken();
		            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
		            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));
		            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {
		                this.tolerateError(messages_1.Messages.StrictDelete);
		            }
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		        }
		        else if (this.context.await && this.matchContextualKeyword('await')) {
		            expr = this.parseAwaitExpression();
		        }
		        else {
		            expr = this.parseUpdateExpression();
		        }
		        return expr;
		    };
		    Parser.prototype.parseExponentiationExpression = function () {
		        var startToken = this.lookahead;
		        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);
		        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {
		            this.nextToken();
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		            var left = expr;
		            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
		            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-exp-operator
		    // https://tc39.github.io/ecma262/#sec-multiplicative-operators
		    // https://tc39.github.io/ecma262/#sec-additive-operators
		    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators
		    // https://tc39.github.io/ecma262/#sec-relational-operators
		    // https://tc39.github.io/ecma262/#sec-equality-operators
		    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators
		    // https://tc39.github.io/ecma262/#sec-binary-logical-operators
		    Parser.prototype.binaryPrecedence = function (token) {
		        var op = token.value;
		        var precedence;
		        if (token.type === 7 /* Punctuator */) {
		            precedence = this.operatorPrecedence[op] || 0;
		        }
		        else if (token.type === 4 /* Keyword */) {
		            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;
		        }
		        else {
		            precedence = 0;
		        }
		        return precedence;
		    };
		    Parser.prototype.parseBinaryExpression = function () {
		        var startToken = this.lookahead;
		        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
		        var token = this.lookahead;
		        var prec = this.binaryPrecedence(token);
		        if (prec > 0) {
		            this.nextToken();
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		            var markers = [startToken, this.lookahead];
		            var left = expr;
		            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
		            var stack = [left, token.value, right];
		            var precedences = [prec];
		            while (true) {
		                prec = this.binaryPrecedence(this.lookahead);
		                if (prec <= 0) {
		                    break;
		                }
		                // Reduce: make a binary expression from the three topmost entries.
		                while ((stack.length > 2) && (prec <= precedences[precedences.length - 1])) {
		                    right = stack.pop();
		                    var operator = stack.pop();
		                    precedences.pop();
		                    left = stack.pop();
		                    markers.pop();
		                    var node = this.startNode(markers[markers.length - 1]);
		                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
		                }
		                // Shift.
		                stack.push(this.nextToken().value);
		                precedences.push(prec);
		                markers.push(this.lookahead);
		                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
		            }
		            // Final reduce to clean-up the stack.
		            var i = stack.length - 1;
		            expr = stack[i];
		            var lastMarker = markers.pop();
		            while (i > 1) {
		                var marker = markers.pop();
		                var lastLineStart = lastMarker && lastMarker.lineStart;
		                var node = this.startNode(marker, lastLineStart);
		                var operator = stack[i - 1];
		                expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));
		                i -= 2;
		                lastMarker = marker;
		            }
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-conditional-operator
		    Parser.prototype.parseConditionalExpression = function () {
		        var startToken = this.lookahead;
		        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);
		        if (this.match('?')) {
		            this.nextToken();
		            var previousAllowIn = this.context.allowIn;
		            this.context.allowIn = true;
		            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
		            this.context.allowIn = previousAllowIn;
		            this.expect(':');
		            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
		            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-assignment-operators
		    Parser.prototype.checkPatternParam = function (options, param) {
		        switch (param.type) {
		            case syntax_1.Syntax.Identifier:
		                this.validateParam(options, param, param.name);
		                break;
		            case syntax_1.Syntax.RestElement:
		                this.checkPatternParam(options, param.argument);
		                break;
		            case syntax_1.Syntax.AssignmentPattern:
		                this.checkPatternParam(options, param.left);
		                break;
		            case syntax_1.Syntax.ArrayPattern:
		                for (var i = 0; i < param.elements.length; i++) {
		                    if (param.elements[i] !== null) {
		                        this.checkPatternParam(options, param.elements[i]);
		                    }
		                }
		                break;
		            case syntax_1.Syntax.ObjectPattern:
		                for (var i = 0; i < param.properties.length; i++) {
		                    this.checkPatternParam(options, param.properties[i].value);
		                }
		                break;
		        }
		        options.simple = options.simple && (param instanceof Node.Identifier);
		    };
		    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {
		        var params = [expr];
		        var options;
		        var asyncArrow = false;
		        switch (expr.type) {
		            case syntax_1.Syntax.Identifier:
		                break;
		            case ArrowParameterPlaceHolder:
		                params = expr.params;
		                asyncArrow = expr.async;
		                break;
		            default:
		                return null;
		        }
		        options = {
		            simple: true,
		            paramSet: {}
		        };
		        for (var i = 0; i < params.length; ++i) {
		            var param = params[i];
		            if (param.type === syntax_1.Syntax.AssignmentPattern) {
		                if (param.right.type === syntax_1.Syntax.YieldExpression) {
		                    if (param.right.argument) {
		                        this.throwUnexpectedToken(this.lookahead);
		                    }
		                    param.right.type = syntax_1.Syntax.Identifier;
		                    param.right.name = 'yield';
		                    delete param.right.argument;
		                    delete param.right.delegate;
		                }
		            }
		            else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {
		                this.throwUnexpectedToken(this.lookahead);
		            }
		            this.checkPatternParam(options, param);
		            params[i] = param;
		        }
		        if (this.context.strict || !this.context.allowYield) {
		            for (var i = 0; i < params.length; ++i) {
		                var param = params[i];
		                if (param.type === syntax_1.Syntax.YieldExpression) {
		                    this.throwUnexpectedToken(this.lookahead);
		                }
		            }
		        }
		        if (options.message === messages_1.Messages.StrictParamDupe) {
		            var token = this.context.strict ? options.stricted : options.firstRestricted;
		            this.throwUnexpectedToken(token, options.message);
		        }
		        return {
		            simple: options.simple,
		            params: params,
		            stricted: options.stricted,
		            firstRestricted: options.firstRestricted,
		            message: options.message
		        };
		    };
		    Parser.prototype.parseAssignmentExpression = function () {
		        var expr;
		        if (!this.context.allowYield && this.matchKeyword('yield')) {
		            expr = this.parseYieldExpression();
		        }
		        else {
		            var startToken = this.lookahead;
		            var token = startToken;
		            expr = this.parseConditionalExpression();
		            if (token.type === 3 /* Identifier */ && (token.lineNumber === this.lookahead.lineNumber) && token.value === 'async') {
		                if (this.lookahead.type === 3 /* Identifier */ || this.matchKeyword('yield')) {
		                    var arg = this.parsePrimaryExpression();
		                    this.reinterpretExpressionAsPattern(arg);
		                    expr = {
		                        type: ArrowParameterPlaceHolder,
		                        params: [arg],
		                        async: true
		                    };
		                }
		            }
		            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {
		                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions
		                this.context.isAssignmentTarget = false;
		                this.context.isBindingElement = false;
		                var isAsync = expr.async;
		                var list = this.reinterpretAsCoverFormalsList(expr);
		                if (list) {
		                    if (this.hasLineTerminator) {
		                        this.tolerateUnexpectedToken(this.lookahead);
		                    }
		                    this.context.firstCoverInitializedNameError = null;
		                    var previousStrict = this.context.strict;
		                    var previousAllowStrictDirective = this.context.allowStrictDirective;
		                    this.context.allowStrictDirective = list.simple;
		                    var previousAllowYield = this.context.allowYield;
		                    var previousAwait = this.context.await;
		                    this.context.allowYield = true;
		                    this.context.await = isAsync;
		                    var node = this.startNode(startToken);
		                    this.expect('=>');
		                    var body = void 0;
		                    if (this.match('{')) {
		                        var previousAllowIn = this.context.allowIn;
		                        this.context.allowIn = true;
		                        body = this.parseFunctionSourceElements();
		                        this.context.allowIn = previousAllowIn;
		                    }
		                    else {
		                        body = this.isolateCoverGrammar(this.parseAssignmentExpression);
		                    }
		                    var expression = body.type !== syntax_1.Syntax.BlockStatement;
		                    if (this.context.strict && list.firstRestricted) {
		                        this.throwUnexpectedToken(list.firstRestricted, list.message);
		                    }
		                    if (this.context.strict && list.stricted) {
		                        this.tolerateUnexpectedToken(list.stricted, list.message);
		                    }
		                    expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) :
		                        this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
		                    this.context.strict = previousStrict;
		                    this.context.allowStrictDirective = previousAllowStrictDirective;
		                    this.context.allowYield = previousAllowYield;
		                    this.context.await = previousAwait;
		                }
		            }
		            else {
		                if (this.matchAssign()) {
		                    if (!this.context.isAssignmentTarget) {
		                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
		                    }
		                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
		                        var id = expr;
		                        if (this.scanner.isRestrictedWord(id.name)) {
		                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
		                        }
		                        if (this.scanner.isStrictModeReservedWord(id.name)) {
		                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
		                        }
		                    }
		                    if (!this.match('=')) {
		                        this.context.isAssignmentTarget = false;
		                        this.context.isBindingElement = false;
		                    }
		                    else {
		                        this.reinterpretExpressionAsPattern(expr);
		                    }
		                    token = this.nextToken();
		                    var operator = token.value;
		                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
		                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));
		                    this.context.firstCoverInitializedNameError = null;
		                }
		            }
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-comma-operator
		    Parser.prototype.parseExpression = function () {
		        var startToken = this.lookahead;
		        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);
		        if (this.match(',')) {
		            var expressions = [];
		            expressions.push(expr);
		            while (this.lookahead.type !== 2 /* EOF */) {
		                if (!this.match(',')) {
		                    break;
		                }
		                this.nextToken();
		                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
		            }
		            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-block
		    Parser.prototype.parseStatementListItem = function () {
		        var statement;
		        this.context.isAssignmentTarget = true;
		        this.context.isBindingElement = true;
		        if (this.lookahead.type === 4 /* Keyword */) {
		            switch (this.lookahead.value) {
		                case 'export':
		                    if (!this.context.isModule) {
		                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
		                    }
		                    statement = this.parseExportDeclaration();
		                    break;
		                case 'import':
		                    if (!this.context.isModule) {
		                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
		                    }
		                    statement = this.parseImportDeclaration();
		                    break;
		                case 'const':
		                    statement = this.parseLexicalDeclaration({ inFor: false });
		                    break;
		                case 'function':
		                    statement = this.parseFunctionDeclaration();
		                    break;
		                case 'class':
		                    statement = this.parseClassDeclaration();
		                    break;
		                case 'let':
		                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
		                    break;
		                default:
		                    statement = this.parseStatement();
		                    break;
		            }
		        }
		        else {
		            statement = this.parseStatement();
		        }
		        return statement;
		    };
		    Parser.prototype.parseBlock = function () {
		        var node = this.createNode();
		        this.expect('{');
		        var block = [];
		        while (true) {
		            if (this.match('}')) {
		                break;
		            }
		            block.push(this.parseStatementListItem());
		        }
		        this.expect('}');
		        return this.finalize(node, new Node.BlockStatement(block));
		    };
		    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations
		    Parser.prototype.parseLexicalBinding = function (kind, options) {
		        var node = this.createNode();
		        var params = [];
		        var id = this.parsePattern(params, kind);
		        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
		            if (this.scanner.isRestrictedWord(id.name)) {
		                this.tolerateError(messages_1.Messages.StrictVarName);
		            }
		        }
		        var init = null;
		        if (kind === 'const') {
		            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {
		                if (this.match('=')) {
		                    this.nextToken();
		                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);
		                }
		                else {
		                    this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');
		                }
		            }
		        }
		        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {
		            this.expect('=');
		            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
		        }
		        return this.finalize(node, new Node.VariableDeclarator(id, init));
		    };
		    Parser.prototype.parseBindingList = function (kind, options) {
		        var list = [this.parseLexicalBinding(kind, options)];
		        while (this.match(',')) {
		            this.nextToken();
		            list.push(this.parseLexicalBinding(kind, options));
		        }
		        return list;
		    };
		    Parser.prototype.isLexicalDeclaration = function () {
		        var state = this.scanner.saveState();
		        this.scanner.scanComments();
		        var next = this.scanner.lex();
		        this.scanner.restoreState(state);
		        return (next.type === 3 /* Identifier */) ||
		            (next.type === 7 /* Punctuator */ && next.value === '[') ||
		            (next.type === 7 /* Punctuator */ && next.value === '{') ||
		            (next.type === 4 /* Keyword */ && next.value === 'let') ||
		            (next.type === 4 /* Keyword */ && next.value === 'yield');
		    };
		    Parser.prototype.parseLexicalDeclaration = function (options) {
		        var node = this.createNode();
		        var kind = this.nextToken().value;
		        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');
		        var declarations = this.parseBindingList(kind, options);
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
		    };
		    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns
		    Parser.prototype.parseBindingRestElement = function (params, kind) {
		        var node = this.createNode();
		        this.expect('...');
		        var arg = this.parsePattern(params, kind);
		        return this.finalize(node, new Node.RestElement(arg));
		    };
		    Parser.prototype.parseArrayPattern = function (params, kind) {
		        var node = this.createNode();
		        this.expect('[');
		        var elements = [];
		        while (!this.match(']')) {
		            if (this.match(',')) {
		                this.nextToken();
		                elements.push(null);
		            }
		            else {
		                if (this.match('...')) {
		                    elements.push(this.parseBindingRestElement(params, kind));
		                    break;
		                }
		                else {
		                    elements.push(this.parsePatternWithDefault(params, kind));
		                }
		                if (!this.match(']')) {
		                    this.expect(',');
		                }
		            }
		        }
		        this.expect(']');
		        return this.finalize(node, new Node.ArrayPattern(elements));
		    };
		    Parser.prototype.parsePropertyPattern = function (params, kind) {
		        var node = this.createNode();
		        var computed = false;
		        var shorthand = false;
		        var method = false;
		        var key;
		        var value;
		        if (this.lookahead.type === 3 /* Identifier */) {
		            var keyToken = this.lookahead;
		            key = this.parseVariableIdentifier();
		            var init = this.finalize(node, new Node.Identifier(keyToken.value));
		            if (this.match('=')) {
		                params.push(keyToken);
		                shorthand = true;
		                this.nextToken();
		                var expr = this.parseAssignmentExpression();
		                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
		            }
		            else if (!this.match(':')) {
		                params.push(keyToken);
		                shorthand = true;
		                value = init;
		            }
		            else {
		                this.expect(':');
		                value = this.parsePatternWithDefault(params, kind);
		            }
		        }
		        else {
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            this.expect(':');
		            value = this.parsePatternWithDefault(params, kind);
		        }
		        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));
		    };
		    Parser.prototype.parseObjectPattern = function (params, kind) {
		        var node = this.createNode();
		        var properties = [];
		        this.expect('{');
		        while (!this.match('}')) {
		            properties.push(this.parsePropertyPattern(params, kind));
		            if (!this.match('}')) {
		                this.expect(',');
		            }
		        }
		        this.expect('}');
		        return this.finalize(node, new Node.ObjectPattern(properties));
		    };
		    Parser.prototype.parsePattern = function (params, kind) {
		        var pattern;
		        if (this.match('[')) {
		            pattern = this.parseArrayPattern(params, kind);
		        }
		        else if (this.match('{')) {
		            pattern = this.parseObjectPattern(params, kind);
		        }
		        else {
		            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {
		                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);
		            }
		            params.push(this.lookahead);
		            pattern = this.parseVariableIdentifier(kind);
		        }
		        return pattern;
		    };
		    Parser.prototype.parsePatternWithDefault = function (params, kind) {
		        var startToken = this.lookahead;
		        var pattern = this.parsePattern(params, kind);
		        if (this.match('=')) {
		            this.nextToken();
		            var previousAllowYield = this.context.allowYield;
		            this.context.allowYield = true;
		            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
		            this.context.allowYield = previousAllowYield;
		            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
		        }
		        return pattern;
		    };
		    // https://tc39.github.io/ecma262/#sec-variable-statement
		    Parser.prototype.parseVariableIdentifier = function (kind) {
		        var node = this.createNode();
		        var token = this.nextToken();
		        if (token.type === 4 /* Keyword */ && token.value === 'yield') {
		            if (this.context.strict) {
		                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
		            }
		            else if (!this.context.allowYield) {
		                this.throwUnexpectedToken(token);
		            }
		        }
		        else if (token.type !== 3 /* Identifier */) {
		            if (this.context.strict && token.type === 4 /* Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {
		                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
		            }
		            else {
		                if (this.context.strict || token.value !== 'let' || kind !== 'var') {
		                    this.throwUnexpectedToken(token);
		                }
		            }
		        }
		        else if ((this.context.isModule || this.context.await) && token.type === 3 /* Identifier */ && token.value === 'await') {
		            this.tolerateUnexpectedToken(token);
		        }
		        return this.finalize(node, new Node.Identifier(token.value));
		    };
		    Parser.prototype.parseVariableDeclaration = function (options) {
		        var node = this.createNode();
		        var params = [];
		        var id = this.parsePattern(params, 'var');
		        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
		            if (this.scanner.isRestrictedWord(id.name)) {
		                this.tolerateError(messages_1.Messages.StrictVarName);
		            }
		        }
		        var init = null;
		        if (this.match('=')) {
		            this.nextToken();
		            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
		        }
		        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
		            this.expect('=');
		        }
		        return this.finalize(node, new Node.VariableDeclarator(id, init));
		    };
		    Parser.prototype.parseVariableDeclarationList = function (options) {
		        var opt = { inFor: options.inFor };
		        var list = [];
		        list.push(this.parseVariableDeclaration(opt));
		        while (this.match(',')) {
		            this.nextToken();
		            list.push(this.parseVariableDeclaration(opt));
		        }
		        return list;
		    };
		    Parser.prototype.parseVariableStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('var');
		        var declarations = this.parseVariableDeclarationList({ inFor: false });
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));
		    };
		    // https://tc39.github.io/ecma262/#sec-empty-statement
		    Parser.prototype.parseEmptyStatement = function () {
		        var node = this.createNode();
		        this.expect(';');
		        return this.finalize(node, new Node.EmptyStatement());
		    };
		    // https://tc39.github.io/ecma262/#sec-expression-statement
		    Parser.prototype.parseExpressionStatement = function () {
		        var node = this.createNode();
		        var expr = this.parseExpression();
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.ExpressionStatement(expr));
		    };
		    // https://tc39.github.io/ecma262/#sec-if-statement
		    Parser.prototype.parseIfClause = function () {
		        if (this.context.strict && this.matchKeyword('function')) {
		            this.tolerateError(messages_1.Messages.StrictFunction);
		        }
		        return this.parseStatement();
		    };
		    Parser.prototype.parseIfStatement = function () {
		        var node = this.createNode();
		        var consequent;
		        var alternate = null;
		        this.expectKeyword('if');
		        this.expect('(');
		        var test = this.parseExpression();
		        if (!this.match(')') && this.config.tolerant) {
		            this.tolerateUnexpectedToken(this.nextToken());
		            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
		        }
		        else {
		            this.expect(')');
		            consequent = this.parseIfClause();
		            if (this.matchKeyword('else')) {
		                this.nextToken();
		                alternate = this.parseIfClause();
		            }
		        }
		        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
		    };
		    // https://tc39.github.io/ecma262/#sec-do-while-statement
		    Parser.prototype.parseDoWhileStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('do');
		        var previousInIteration = this.context.inIteration;
		        this.context.inIteration = true;
		        var body = this.parseStatement();
		        this.context.inIteration = previousInIteration;
		        this.expectKeyword('while');
		        this.expect('(');
		        var test = this.parseExpression();
		        if (!this.match(')') && this.config.tolerant) {
		            this.tolerateUnexpectedToken(this.nextToken());
		        }
		        else {
		            this.expect(')');
		            if (this.match(';')) {
		                this.nextToken();
		            }
		        }
		        return this.finalize(node, new Node.DoWhileStatement(body, test));
		    };
		    // https://tc39.github.io/ecma262/#sec-while-statement
		    Parser.prototype.parseWhileStatement = function () {
		        var node = this.createNode();
		        var body;
		        this.expectKeyword('while');
		        this.expect('(');
		        var test = this.parseExpression();
		        if (!this.match(')') && this.config.tolerant) {
		            this.tolerateUnexpectedToken(this.nextToken());
		            body = this.finalize(this.createNode(), new Node.EmptyStatement());
		        }
		        else {
		            this.expect(')');
		            var previousInIteration = this.context.inIteration;
		            this.context.inIteration = true;
		            body = this.parseStatement();
		            this.context.inIteration = previousInIteration;
		        }
		        return this.finalize(node, new Node.WhileStatement(test, body));
		    };
		    // https://tc39.github.io/ecma262/#sec-for-statement
		    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements
		    Parser.prototype.parseForStatement = function () {
		        var init = null;
		        var test = null;
		        var update = null;
		        var forIn = true;
		        var left, right;
		        var node = this.createNode();
		        this.expectKeyword('for');
		        this.expect('(');
		        if (this.match(';')) {
		            this.nextToken();
		        }
		        else {
		            if (this.matchKeyword('var')) {
		                init = this.createNode();
		                this.nextToken();
		                var previousAllowIn = this.context.allowIn;
		                this.context.allowIn = false;
		                var declarations = this.parseVariableDeclarationList({ inFor: true });
		                this.context.allowIn = previousAllowIn;
		                if (declarations.length === 1 && this.matchKeyword('in')) {
		                    var decl = declarations[0];
		                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
		                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');
		                    }
		                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
		                    this.nextToken();
		                    left = init;
		                    right = this.parseExpression();
		                    init = null;
		                }
		                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
		                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
		                    this.nextToken();
		                    left = init;
		                    right = this.parseAssignmentExpression();
		                    init = null;
		                    forIn = false;
		                }
		                else {
		                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
		                    this.expect(';');
		                }
		            }
		            else if (this.matchKeyword('const') || this.matchKeyword('let')) {
		                init = this.createNode();
		                var kind = this.nextToken().value;
		                if (!this.context.strict && this.lookahead.value === 'in') {
		                    init = this.finalize(init, new Node.Identifier(kind));
		                    this.nextToken();
		                    left = init;
		                    right = this.parseExpression();
		                    init = null;
		                }
		                else {
		                    var previousAllowIn = this.context.allowIn;
		                    this.context.allowIn = false;
		                    var declarations = this.parseBindingList(kind, { inFor: true });
		                    this.context.allowIn = previousAllowIn;
		                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {
		                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
		                        this.nextToken();
		                        left = init;
		                        right = this.parseExpression();
		                        init = null;
		                    }
		                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
		                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
		                        this.nextToken();
		                        left = init;
		                        right = this.parseAssignmentExpression();
		                        init = null;
		                        forIn = false;
		                    }
		                    else {
		                        this.consumeSemicolon();
		                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
		                    }
		                }
		            }
		            else {
		                var initStartToken = this.lookahead;
		                var previousAllowIn = this.context.allowIn;
		                this.context.allowIn = false;
		                init = this.inheritCoverGrammar(this.parseAssignmentExpression);
		                this.context.allowIn = previousAllowIn;
		                if (this.matchKeyword('in')) {
		                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
		                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
		                    }
		                    this.nextToken();
		                    this.reinterpretExpressionAsPattern(init);
		                    left = init;
		                    right = this.parseExpression();
		                    init = null;
		                }
		                else if (this.matchContextualKeyword('of')) {
		                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
		                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
		                    }
		                    this.nextToken();
		                    this.reinterpretExpressionAsPattern(init);
		                    left = init;
		                    right = this.parseAssignmentExpression();
		                    init = null;
		                    forIn = false;
		                }
		                else {
		                    if (this.match(',')) {
		                        var initSeq = [init];
		                        while (this.match(',')) {
		                            this.nextToken();
		                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
		                        }
		                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
		                    }
		                    this.expect(';');
		                }
		            }
		        }
		        if (typeof left === 'undefined') {
		            if (!this.match(';')) {
		                test = this.parseExpression();
		            }
		            this.expect(';');
		            if (!this.match(')')) {
		                update = this.parseExpression();
		            }
		        }
		        var body;
		        if (!this.match(')') && this.config.tolerant) {
		            this.tolerateUnexpectedToken(this.nextToken());
		            body = this.finalize(this.createNode(), new Node.EmptyStatement());
		        }
		        else {
		            this.expect(')');
		            var previousInIteration = this.context.inIteration;
		            this.context.inIteration = true;
		            body = this.isolateCoverGrammar(this.parseStatement);
		            this.context.inIteration = previousInIteration;
		        }
		        return (typeof left === 'undefined') ?
		            this.finalize(node, new Node.ForStatement(init, test, update, body)) :
		            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :
		                this.finalize(node, new Node.ForOfStatement(left, right, body));
		    };
		    // https://tc39.github.io/ecma262/#sec-continue-statement
		    Parser.prototype.parseContinueStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('continue');
		        var label = null;
		        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
		            var id = this.parseVariableIdentifier();
		            label = id;
		            var key = '$' + id.name;
		            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
		                this.throwError(messages_1.Messages.UnknownLabel, id.name);
		            }
		        }
		        this.consumeSemicolon();
		        if (label === null && !this.context.inIteration) {
		            this.throwError(messages_1.Messages.IllegalContinue);
		        }
		        return this.finalize(node, new Node.ContinueStatement(label));
		    };
		    // https://tc39.github.io/ecma262/#sec-break-statement
		    Parser.prototype.parseBreakStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('break');
		        var label = null;
		        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
		            var id = this.parseVariableIdentifier();
		            var key = '$' + id.name;
		            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
		                this.throwError(messages_1.Messages.UnknownLabel, id.name);
		            }
		            label = id;
		        }
		        this.consumeSemicolon();
		        if (label === null && !this.context.inIteration && !this.context.inSwitch) {
		            this.throwError(messages_1.Messages.IllegalBreak);
		        }
		        return this.finalize(node, new Node.BreakStatement(label));
		    };
		    // https://tc39.github.io/ecma262/#sec-return-statement
		    Parser.prototype.parseReturnStatement = function () {
		        if (!this.context.inFunctionBody) {
		            this.tolerateError(messages_1.Messages.IllegalReturn);
		        }
		        var node = this.createNode();
		        this.expectKeyword('return');
		        var hasArgument = (!this.match(';') && !this.match('}') &&
		            !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */) ||
		            this.lookahead.type === 8 /* StringLiteral */ ||
		            this.lookahead.type === 10 /* Template */;
		        var argument = hasArgument ? this.parseExpression() : null;
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.ReturnStatement(argument));
		    };
		    // https://tc39.github.io/ecma262/#sec-with-statement
		    Parser.prototype.parseWithStatement = function () {
		        if (this.context.strict) {
		            this.tolerateError(messages_1.Messages.StrictModeWith);
		        }
		        var node = this.createNode();
		        var body;
		        this.expectKeyword('with');
		        this.expect('(');
		        var object = this.parseExpression();
		        if (!this.match(')') && this.config.tolerant) {
		            this.tolerateUnexpectedToken(this.nextToken());
		            body = this.finalize(this.createNode(), new Node.EmptyStatement());
		        }
		        else {
		            this.expect(')');
		            body = this.parseStatement();
		        }
		        return this.finalize(node, new Node.WithStatement(object, body));
		    };
		    // https://tc39.github.io/ecma262/#sec-switch-statement
		    Parser.prototype.parseSwitchCase = function () {
		        var node = this.createNode();
		        var test;
		        if (this.matchKeyword('default')) {
		            this.nextToken();
		            test = null;
		        }
		        else {
		            this.expectKeyword('case');
		            test = this.parseExpression();
		        }
		        this.expect(':');
		        var consequent = [];
		        while (true) {
		            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {
		                break;
		            }
		            consequent.push(this.parseStatementListItem());
		        }
		        return this.finalize(node, new Node.SwitchCase(test, consequent));
		    };
		    Parser.prototype.parseSwitchStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('switch');
		        this.expect('(');
		        var discriminant = this.parseExpression();
		        this.expect(')');
		        var previousInSwitch = this.context.inSwitch;
		        this.context.inSwitch = true;
		        var cases = [];
		        var defaultFound = false;
		        this.expect('{');
		        while (true) {
		            if (this.match('}')) {
		                break;
		            }
		            var clause = this.parseSwitchCase();
		            if (clause.test === null) {
		                if (defaultFound) {
		                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
		                }
		                defaultFound = true;
		            }
		            cases.push(clause);
		        }
		        this.expect('}');
		        this.context.inSwitch = previousInSwitch;
		        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
		    };
		    // https://tc39.github.io/ecma262/#sec-labelled-statements
		    Parser.prototype.parseLabelledStatement = function () {
		        var node = this.createNode();
		        var expr = this.parseExpression();
		        var statement;
		        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {
		            this.nextToken();
		            var id = expr;
		            var key = '$' + id.name;
		            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
		                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);
		            }
		            this.context.labelSet[key] = true;
		            var body = void 0;
		            if (this.matchKeyword('class')) {
		                this.tolerateUnexpectedToken(this.lookahead);
		                body = this.parseClassDeclaration();
		            }
		            else if (this.matchKeyword('function')) {
		                var token = this.lookahead;
		                var declaration = this.parseFunctionDeclaration();
		                if (this.context.strict) {
		                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);
		                }
		                else if (declaration.generator) {
		                    this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);
		                }
		                body = declaration;
		            }
		            else {
		                body = this.parseStatement();
		            }
		            delete this.context.labelSet[key];
		            statement = new Node.LabeledStatement(id, body);
		        }
		        else {
		            this.consumeSemicolon();
		            statement = new Node.ExpressionStatement(expr);
		        }
		        return this.finalize(node, statement);
		    };
		    // https://tc39.github.io/ecma262/#sec-throw-statement
		    Parser.prototype.parseThrowStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('throw');
		        if (this.hasLineTerminator) {
		            this.throwError(messages_1.Messages.NewlineAfterThrow);
		        }
		        var argument = this.parseExpression();
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.ThrowStatement(argument));
		    };
		    // https://tc39.github.io/ecma262/#sec-try-statement
		    Parser.prototype.parseCatchClause = function () {
		        var node = this.createNode();
		        this.expectKeyword('catch');
		        this.expect('(');
		        if (this.match(')')) {
		            this.throwUnexpectedToken(this.lookahead);
		        }
		        var params = [];
		        var param = this.parsePattern(params);
		        var paramMap = {};
		        for (var i = 0; i < params.length; i++) {
		            var key = '$' + params[i].value;
		            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
		                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
		            }
		            paramMap[key] = true;
		        }
		        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
		            if (this.scanner.isRestrictedWord(param.name)) {
		                this.tolerateError(messages_1.Messages.StrictCatchVariable);
		            }
		        }
		        this.expect(')');
		        var body = this.parseBlock();
		        return this.finalize(node, new Node.CatchClause(param, body));
		    };
		    Parser.prototype.parseFinallyClause = function () {
		        this.expectKeyword('finally');
		        return this.parseBlock();
		    };
		    Parser.prototype.parseTryStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('try');
		        var block = this.parseBlock();
		        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;
		        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;
		        if (!handler && !finalizer) {
		            this.throwError(messages_1.Messages.NoCatchOrFinally);
		        }
		        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
		    };
		    // https://tc39.github.io/ecma262/#sec-debugger-statement
		    Parser.prototype.parseDebuggerStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('debugger');
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.DebuggerStatement());
		    };
		    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations
		    Parser.prototype.parseStatement = function () {
		        var statement;
		        switch (this.lookahead.type) {
		            case 1 /* BooleanLiteral */:
		            case 5 /* NullLiteral */:
		            case 6 /* NumericLiteral */:
		            case 8 /* StringLiteral */:
		            case 10 /* Template */:
		            case 9 /* RegularExpression */:
		                statement = this.parseExpressionStatement();
		                break;
		            case 7 /* Punctuator */:
		                var value = this.lookahead.value;
		                if (value === '{') {
		                    statement = this.parseBlock();
		                }
		                else if (value === '(') {
		                    statement = this.parseExpressionStatement();
		                }
		                else if (value === ';') {
		                    statement = this.parseEmptyStatement();
		                }
		                else {
		                    statement = this.parseExpressionStatement();
		                }
		                break;
		            case 3 /* Identifier */:
		                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
		                break;
		            case 4 /* Keyword */:
		                switch (this.lookahead.value) {
		                    case 'break':
		                        statement = this.parseBreakStatement();
		                        break;
		                    case 'continue':
		                        statement = this.parseContinueStatement();
		                        break;
		                    case 'debugger':
		                        statement = this.parseDebuggerStatement();
		                        break;
		                    case 'do':
		                        statement = this.parseDoWhileStatement();
		                        break;
		                    case 'for':
		                        statement = this.parseForStatement();
		                        break;
		                    case 'function':
		                        statement = this.parseFunctionDeclaration();
		                        break;
		                    case 'if':
		                        statement = this.parseIfStatement();
		                        break;
		                    case 'return':
		                        statement = this.parseReturnStatement();
		                        break;
		                    case 'switch':
		                        statement = this.parseSwitchStatement();
		                        break;
		                    case 'throw':
		                        statement = this.parseThrowStatement();
		                        break;
		                    case 'try':
		                        statement = this.parseTryStatement();
		                        break;
		                    case 'var':
		                        statement = this.parseVariableStatement();
		                        break;
		                    case 'while':
		                        statement = this.parseWhileStatement();
		                        break;
		                    case 'with':
		                        statement = this.parseWithStatement();
		                        break;
		                    default:
		                        statement = this.parseExpressionStatement();
		                        break;
		                }
		                break;
		            default:
		                statement = this.throwUnexpectedToken(this.lookahead);
		        }
		        return statement;
		    };
		    // https://tc39.github.io/ecma262/#sec-function-definitions
		    Parser.prototype.parseFunctionSourceElements = function () {
		        var node = this.createNode();
		        this.expect('{');
		        var body = this.parseDirectivePrologues();
		        var previousLabelSet = this.context.labelSet;
		        var previousInIteration = this.context.inIteration;
		        var previousInSwitch = this.context.inSwitch;
		        var previousInFunctionBody = this.context.inFunctionBody;
		        this.context.labelSet = {};
		        this.context.inIteration = false;
		        this.context.inSwitch = false;
		        this.context.inFunctionBody = true;
		        while (this.lookahead.type !== 2 /* EOF */) {
		            if (this.match('}')) {
		                break;
		            }
		            body.push(this.parseStatementListItem());
		        }
		        this.expect('}');
		        this.context.labelSet = previousLabelSet;
		        this.context.inIteration = previousInIteration;
		        this.context.inSwitch = previousInSwitch;
		        this.context.inFunctionBody = previousInFunctionBody;
		        return this.finalize(node, new Node.BlockStatement(body));
		    };
		    Parser.prototype.validateParam = function (options, param, name) {
		        var key = '$' + name;
		        if (this.context.strict) {
		            if (this.scanner.isRestrictedWord(name)) {
		                options.stricted = param;
		                options.message = messages_1.Messages.StrictParamName;
		            }
		            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
		                options.stricted = param;
		                options.message = messages_1.Messages.StrictParamDupe;
		            }
		        }
		        else if (!options.firstRestricted) {
		            if (this.scanner.isRestrictedWord(name)) {
		                options.firstRestricted = param;
		                options.message = messages_1.Messages.StrictParamName;
		            }
		            else if (this.scanner.isStrictModeReservedWord(name)) {
		                options.firstRestricted = param;
		                options.message = messages_1.Messages.StrictReservedWord;
		            }
		            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
		                options.stricted = param;
		                options.message = messages_1.Messages.StrictParamDupe;
		            }
		        }
		        /* istanbul ignore next */
		        if (typeof Object.defineProperty === 'function') {
		            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });
		        }
		        else {
		            options.paramSet[key] = true;
		        }
		    };
		    Parser.prototype.parseRestElement = function (params) {
		        var node = this.createNode();
		        this.expect('...');
		        var arg = this.parsePattern(params);
		        if (this.match('=')) {
		            this.throwError(messages_1.Messages.DefaultRestParameter);
		        }
		        if (!this.match(')')) {
		            this.throwError(messages_1.Messages.ParameterAfterRestParameter);
		        }
		        return this.finalize(node, new Node.RestElement(arg));
		    };
		    Parser.prototype.parseFormalParameter = function (options) {
		        var params = [];
		        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);
		        for (var i = 0; i < params.length; i++) {
		            this.validateParam(options, params[i], params[i].value);
		        }
		        options.simple = options.simple && (param instanceof Node.Identifier);
		        options.params.push(param);
		    };
		    Parser.prototype.parseFormalParameters = function (firstRestricted) {
		        var options;
		        options = {
		            simple: true,
		            params: [],
		            firstRestricted: firstRestricted
		        };
		        this.expect('(');
		        if (!this.match(')')) {
		            options.paramSet = {};
		            while (this.lookahead.type !== 2 /* EOF */) {
		                this.parseFormalParameter(options);
		                if (this.match(')')) {
		                    break;
		                }
		                this.expect(',');
		                if (this.match(')')) {
		                    break;
		                }
		            }
		        }
		        this.expect(')');
		        return {
		            simple: options.simple,
		            params: options.params,
		            stricted: options.stricted,
		            firstRestricted: options.firstRestricted,
		            message: options.message
		        };
		    };
		    Parser.prototype.matchAsyncFunction = function () {
		        var match = this.matchContextualKeyword('async');
		        if (match) {
		            var state = this.scanner.saveState();
		            this.scanner.scanComments();
		            var next = this.scanner.lex();
		            this.scanner.restoreState(state);
		            match = (state.lineNumber === next.lineNumber) && (next.type === 4 /* Keyword */) && (next.value === 'function');
		        }
		        return match;
		    };
		    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {
		        var node = this.createNode();
		        var isAsync = this.matchContextualKeyword('async');
		        if (isAsync) {
		            this.nextToken();
		        }
		        this.expectKeyword('function');
		        var isGenerator = isAsync ? false : this.match('*');
		        if (isGenerator) {
		            this.nextToken();
		        }
		        var message;
		        var id = null;
		        var firstRestricted = null;
		        if (!identifierIsOptional || !this.match('(')) {
		            var token = this.lookahead;
		            id = this.parseVariableIdentifier();
		            if (this.context.strict) {
		                if (this.scanner.isRestrictedWord(token.value)) {
		                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
		                }
		            }
		            else {
		                if (this.scanner.isRestrictedWord(token.value)) {
		                    firstRestricted = token;
		                    message = messages_1.Messages.StrictFunctionName;
		                }
		                else if (this.scanner.isStrictModeReservedWord(token.value)) {
		                    firstRestricted = token;
		                    message = messages_1.Messages.StrictReservedWord;
		                }
		            }
		        }
		        var previousAllowAwait = this.context.await;
		        var previousAllowYield = this.context.allowYield;
		        this.context.await = isAsync;
		        this.context.allowYield = !isGenerator;
		        var formalParameters = this.parseFormalParameters(firstRestricted);
		        var params = formalParameters.params;
		        var stricted = formalParameters.stricted;
		        firstRestricted = formalParameters.firstRestricted;
		        if (formalParameters.message) {
		            message = formalParameters.message;
		        }
		        var previousStrict = this.context.strict;
		        var previousAllowStrictDirective = this.context.allowStrictDirective;
		        this.context.allowStrictDirective = formalParameters.simple;
		        var body = this.parseFunctionSourceElements();
		        if (this.context.strict && firstRestricted) {
		            this.throwUnexpectedToken(firstRestricted, message);
		        }
		        if (this.context.strict && stricted) {
		            this.tolerateUnexpectedToken(stricted, message);
		        }
		        this.context.strict = previousStrict;
		        this.context.allowStrictDirective = previousAllowStrictDirective;
		        this.context.await = previousAllowAwait;
		        this.context.allowYield = previousAllowYield;
		        return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) :
		            this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
		    };
		    Parser.prototype.parseFunctionExpression = function () {
		        var node = this.createNode();
		        var isAsync = this.matchContextualKeyword('async');
		        if (isAsync) {
		            this.nextToken();
		        }
		        this.expectKeyword('function');
		        var isGenerator = isAsync ? false : this.match('*');
		        if (isGenerator) {
		            this.nextToken();
		        }
		        var message;
		        var id = null;
		        var firstRestricted;
		        var previousAllowAwait = this.context.await;
		        var previousAllowYield = this.context.allowYield;
		        this.context.await = isAsync;
		        this.context.allowYield = !isGenerator;
		        if (!this.match('(')) {
		            var token = this.lookahead;
		            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();
		            if (this.context.strict) {
		                if (this.scanner.isRestrictedWord(token.value)) {
		                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
		                }
		            }
		            else {
		                if (this.scanner.isRestrictedWord(token.value)) {
		                    firstRestricted = token;
		                    message = messages_1.Messages.StrictFunctionName;
		                }
		                else if (this.scanner.isStrictModeReservedWord(token.value)) {
		                    firstRestricted = token;
		                    message = messages_1.Messages.StrictReservedWord;
		                }
		            }
		        }
		        var formalParameters = this.parseFormalParameters(firstRestricted);
		        var params = formalParameters.params;
		        var stricted = formalParameters.stricted;
		        firstRestricted = formalParameters.firstRestricted;
		        if (formalParameters.message) {
		            message = formalParameters.message;
		        }
		        var previousStrict = this.context.strict;
		        var previousAllowStrictDirective = this.context.allowStrictDirective;
		        this.context.allowStrictDirective = formalParameters.simple;
		        var body = this.parseFunctionSourceElements();
		        if (this.context.strict && firstRestricted) {
		            this.throwUnexpectedToken(firstRestricted, message);
		        }
		        if (this.context.strict && stricted) {
		            this.tolerateUnexpectedToken(stricted, message);
		        }
		        this.context.strict = previousStrict;
		        this.context.allowStrictDirective = previousAllowStrictDirective;
		        this.context.await = previousAllowAwait;
		        this.context.allowYield = previousAllowYield;
		        return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) :
		            this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
		    };
		    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive
		    Parser.prototype.parseDirective = function () {
		        var token = this.lookahead;
		        var node = this.createNode();
		        var expr = this.parseExpression();
		        var directive = (expr.type === syntax_1.Syntax.Literal) ? this.getTokenRaw(token).slice(1, -1) : null;
		        this.consumeSemicolon();
		        return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));
		    };
		    Parser.prototype.parseDirectivePrologues = function () {
		        var firstRestricted = null;
		        var body = [];
		        while (true) {
		            var token = this.lookahead;
		            if (token.type !== 8 /* StringLiteral */) {
		                break;
		            }
		            var statement = this.parseDirective();
		            body.push(statement);
		            var directive = statement.directive;
		            if (typeof directive !== 'string') {
		                break;
		            }
		            if (directive === 'use strict') {
		                this.context.strict = true;
		                if (firstRestricted) {
		                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
		                }
		                if (!this.context.allowStrictDirective) {
		                    this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);
		                }
		            }
		            else {
		                if (!firstRestricted && token.octal) {
		                    firstRestricted = token;
		                }
		            }
		        }
		        return body;
		    };
		    // https://tc39.github.io/ecma262/#sec-method-definitions
		    Parser.prototype.qualifiedPropertyName = function (token) {
		        switch (token.type) {
		            case 3 /* Identifier */:
		            case 8 /* StringLiteral */:
		            case 1 /* BooleanLiteral */:
		            case 5 /* NullLiteral */:
		            case 6 /* NumericLiteral */:
		            case 4 /* Keyword */:
		                return true;
		            case 7 /* Punctuator */:
		                return token.value === '[';
		        }
		        return false;
		    };
		    Parser.prototype.parseGetterMethod = function () {
		        var node = this.createNode();
		        var isGenerator = false;
		        var previousAllowYield = this.context.allowYield;
		        this.context.allowYield = !isGenerator;
		        var formalParameters = this.parseFormalParameters();
		        if (formalParameters.params.length > 0) {
		            this.tolerateError(messages_1.Messages.BadGetterArity);
		        }
		        var method = this.parsePropertyMethod(formalParameters);
		        this.context.allowYield = previousAllowYield;
		        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
		    };
		    Parser.prototype.parseSetterMethod = function () {
		        var node = this.createNode();
		        var isGenerator = false;
		        var previousAllowYield = this.context.allowYield;
		        this.context.allowYield = !isGenerator;
		        var formalParameters = this.parseFormalParameters();
		        if (formalParameters.params.length !== 1) {
		            this.tolerateError(messages_1.Messages.BadSetterArity);
		        }
		        else if (formalParameters.params[0] instanceof Node.RestElement) {
		            this.tolerateError(messages_1.Messages.BadSetterRestParameter);
		        }
		        var method = this.parsePropertyMethod(formalParameters);
		        this.context.allowYield = previousAllowYield;
		        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
		    };
		    Parser.prototype.parseGeneratorMethod = function () {
		        var node = this.createNode();
		        var isGenerator = true;
		        var previousAllowYield = this.context.allowYield;
		        this.context.allowYield = true;
		        var params = this.parseFormalParameters();
		        this.context.allowYield = false;
		        var method = this.parsePropertyMethod(params);
		        this.context.allowYield = previousAllowYield;
		        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
		    };
		    // https://tc39.github.io/ecma262/#sec-generator-function-definitions
		    Parser.prototype.isStartOfExpression = function () {
		        var start = true;
		        var value = this.lookahead.value;
		        switch (this.lookahead.type) {
		            case 7 /* Punctuator */:
		                start = (value === '[') || (value === '(') || (value === '{') ||
		                    (value === '+') || (value === '-') ||
		                    (value === '!') || (value === '~') ||
		                    (value === '++') || (value === '--') ||
		                    (value === '/') || (value === '/='); // regular expression literal
		                break;
		            case 4 /* Keyword */:
		                start = (value === 'class') || (value === 'delete') ||
		                    (value === 'function') || (value === 'let') || (value === 'new') ||
		                    (value === 'super') || (value === 'this') || (value === 'typeof') ||
		                    (value === 'void') || (value === 'yield');
		                break;
		        }
		        return start;
		    };
		    Parser.prototype.parseYieldExpression = function () {
		        var node = this.createNode();
		        this.expectKeyword('yield');
		        var argument = null;
		        var delegate = false;
		        if (!this.hasLineTerminator) {
		            var previousAllowYield = this.context.allowYield;
		            this.context.allowYield = false;
		            delegate = this.match('*');
		            if (delegate) {
		                this.nextToken();
		                argument = this.parseAssignmentExpression();
		            }
		            else if (this.isStartOfExpression()) {
		                argument = this.parseAssignmentExpression();
		            }
		            this.context.allowYield = previousAllowYield;
		        }
		        return this.finalize(node, new Node.YieldExpression(argument, delegate));
		    };
		    // https://tc39.github.io/ecma262/#sec-class-definitions
		    Parser.prototype.parseClassElement = function (hasConstructor) {
		        var token = this.lookahead;
		        var node = this.createNode();
		        var kind = '';
		        var key = null;
		        var value = null;
		        var computed = false;
		        var method = false;
		        var isStatic = false;
		        var isAsync = false;
		        if (this.match('*')) {
		            this.nextToken();
		        }
		        else {
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            var id = key;
		            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {
		                token = this.lookahead;
		                isStatic = true;
		                computed = this.match('[');
		                if (this.match('*')) {
		                    this.nextToken();
		                }
		                else {
		                    key = this.parseObjectPropertyKey();
		                }
		            }
		            if ((token.type === 3 /* Identifier */) && !this.hasLineTerminator && (token.value === 'async')) {
		                var punctuator = this.lookahead.value;
		                if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {
		                    isAsync = true;
		                    token = this.lookahead;
		                    key = this.parseObjectPropertyKey();
		                    if (token.type === 3 /* Identifier */ && token.value === 'constructor') {
		                        this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);
		                    }
		                }
		            }
		        }
		        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
		        if (token.type === 3 /* Identifier */) {
		            if (token.value === 'get' && lookaheadPropertyKey) {
		                kind = 'get';
		                computed = this.match('[');
		                key = this.parseObjectPropertyKey();
		                this.context.allowYield = false;
		                value = this.parseGetterMethod();
		            }
		            else if (token.value === 'set' && lookaheadPropertyKey) {
		                kind = 'set';
		                computed = this.match('[');
		                key = this.parseObjectPropertyKey();
		                value = this.parseSetterMethod();
		            }
		        }
		        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
		            kind = 'init';
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            value = this.parseGeneratorMethod();
		            method = true;
		        }
		        if (!kind && key && this.match('(')) {
		            kind = 'init';
		            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
		            method = true;
		        }
		        if (!kind) {
		            this.throwUnexpectedToken(this.lookahead);
		        }
		        if (kind === 'init') {
		            kind = 'method';
		        }
		        if (!computed) {
		            if (isStatic && this.isPropertyKey(key, 'prototype')) {
		                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
		            }
		            if (!isStatic && this.isPropertyKey(key, 'constructor')) {
		                if (kind !== 'method' || !method || (value && value.generator)) {
		                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
		                }
		                if (hasConstructor.value) {
		                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
		                }
		                else {
		                    hasConstructor.value = true;
		                }
		                kind = 'constructor';
		            }
		        }
		        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
		    };
		    Parser.prototype.parseClassElementList = function () {
		        var body = [];
		        var hasConstructor = { value: false };
		        this.expect('{');
		        while (!this.match('}')) {
		            if (this.match(';')) {
		                this.nextToken();
		            }
		            else {
		                body.push(this.parseClassElement(hasConstructor));
		            }
		        }
		        this.expect('}');
		        return body;
		    };
		    Parser.prototype.parseClassBody = function () {
		        var node = this.createNode();
		        var elementList = this.parseClassElementList();
		        return this.finalize(node, new Node.ClassBody(elementList));
		    };
		    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {
		        var node = this.createNode();
		        var previousStrict = this.context.strict;
		        this.context.strict = true;
		        this.expectKeyword('class');
		        var id = (identifierIsOptional && (this.lookahead.type !== 3 /* Identifier */)) ? null : this.parseVariableIdentifier();
		        var superClass = null;
		        if (this.matchKeyword('extends')) {
		            this.nextToken();
		            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
		        }
		        var classBody = this.parseClassBody();
		        this.context.strict = previousStrict;
		        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
		    };
		    Parser.prototype.parseClassExpression = function () {
		        var node = this.createNode();
		        var previousStrict = this.context.strict;
		        this.context.strict = true;
		        this.expectKeyword('class');
		        var id = (this.lookahead.type === 3 /* Identifier */) ? this.parseVariableIdentifier() : null;
		        var superClass = null;
		        if (this.matchKeyword('extends')) {
		            this.nextToken();
		            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
		        }
		        var classBody = this.parseClassBody();
		        this.context.strict = previousStrict;
		        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
		    };
		    // https://tc39.github.io/ecma262/#sec-scripts
		    // https://tc39.github.io/ecma262/#sec-modules
		    Parser.prototype.parseModule = function () {
		        this.context.strict = true;
		        this.context.isModule = true;
		        this.scanner.isModule = true;
		        var node = this.createNode();
		        var body = this.parseDirectivePrologues();
		        while (this.lookahead.type !== 2 /* EOF */) {
		            body.push(this.parseStatementListItem());
		        }
		        return this.finalize(node, new Node.Module(body));
		    };
		    Parser.prototype.parseScript = function () {
		        var node = this.createNode();
		        var body = this.parseDirectivePrologues();
		        while (this.lookahead.type !== 2 /* EOF */) {
		            body.push(this.parseStatementListItem());
		        }
		        return this.finalize(node, new Node.Script(body));
		    };
		    // https://tc39.github.io/ecma262/#sec-imports
		    Parser.prototype.parseModuleSpecifier = function () {
		        var node = this.createNode();
		        if (this.lookahead.type !== 8 /* StringLiteral */) {
		            this.throwError(messages_1.Messages.InvalidModuleSpecifier);
		        }
		        var token = this.nextToken();
		        var raw = this.getTokenRaw(token);
		        return this.finalize(node, new Node.Literal(token.value, raw));
		    };
		    // import {<foo as bar>} ...;
		    Parser.prototype.parseImportSpecifier = function () {
		        var node = this.createNode();
		        var imported;
		        var local;
		        if (this.lookahead.type === 3 /* Identifier */) {
		            imported = this.parseVariableIdentifier();
		            local = imported;
		            if (this.matchContextualKeyword('as')) {
		                this.nextToken();
		                local = this.parseVariableIdentifier();
		            }
		        }
		        else {
		            imported = this.parseIdentifierName();
		            local = imported;
		            if (this.matchContextualKeyword('as')) {
		                this.nextToken();
		                local = this.parseVariableIdentifier();
		            }
		            else {
		                this.throwUnexpectedToken(this.nextToken());
		            }
		        }
		        return this.finalize(node, new Node.ImportSpecifier(local, imported));
		    };
		    // {foo, bar as bas}
		    Parser.prototype.parseNamedImports = function () {
		        this.expect('{');
		        var specifiers = [];
		        while (!this.match('}')) {
		            specifiers.push(this.parseImportSpecifier());
		            if (!this.match('}')) {
		                this.expect(',');
		            }
		        }
		        this.expect('}');
		        return specifiers;
		    };
		    // import <foo> ...;
		    Parser.prototype.parseImportDefaultSpecifier = function () {
		        var node = this.createNode();
		        var local = this.parseIdentifierName();
		        return this.finalize(node, new Node.ImportDefaultSpecifier(local));
		    };
		    // import <* as foo> ...;
		    Parser.prototype.parseImportNamespaceSpecifier = function () {
		        var node = this.createNode();
		        this.expect('*');
		        if (!this.matchContextualKeyword('as')) {
		            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
		        }
		        this.nextToken();
		        var local = this.parseIdentifierName();
		        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
		    };
		    Parser.prototype.parseImportDeclaration = function () {
		        if (this.context.inFunctionBody) {
		            this.throwError(messages_1.Messages.IllegalImportDeclaration);
		        }
		        var node = this.createNode();
		        this.expectKeyword('import');
		        var src;
		        var specifiers = [];
		        if (this.lookahead.type === 8 /* StringLiteral */) {
		            // import 'foo';
		            src = this.parseModuleSpecifier();
		        }
		        else {
		            if (this.match('{')) {
		                // import {bar}
		                specifiers = specifiers.concat(this.parseNamedImports());
		            }
		            else if (this.match('*')) {
		                // import * as foo
		                specifiers.push(this.parseImportNamespaceSpecifier());
		            }
		            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {
		                // import foo
		                specifiers.push(this.parseImportDefaultSpecifier());
		                if (this.match(',')) {
		                    this.nextToken();
		                    if (this.match('*')) {
		                        // import foo, * as foo
		                        specifiers.push(this.parseImportNamespaceSpecifier());
		                    }
		                    else if (this.match('{')) {
		                        // import foo, {bar}
		                        specifiers = specifiers.concat(this.parseNamedImports());
		                    }
		                    else {
		                        this.throwUnexpectedToken(this.lookahead);
		                    }
		                }
		            }
		            else {
		                this.throwUnexpectedToken(this.nextToken());
		            }
		            if (!this.matchContextualKeyword('from')) {
		                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
		                this.throwError(message, this.lookahead.value);
		            }
		            this.nextToken();
		            src = this.parseModuleSpecifier();
		        }
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
		    };
		    // https://tc39.github.io/ecma262/#sec-exports
		    Parser.prototype.parseExportSpecifier = function () {
		        var node = this.createNode();
		        var local = this.parseIdentifierName();
		        var exported = local;
		        if (this.matchContextualKeyword('as')) {
		            this.nextToken();
		            exported = this.parseIdentifierName();
		        }
		        return this.finalize(node, new Node.ExportSpecifier(local, exported));
		    };
		    Parser.prototype.parseExportDeclaration = function () {
		        if (this.context.inFunctionBody) {
		            this.throwError(messages_1.Messages.IllegalExportDeclaration);
		        }
		        var node = this.createNode();
		        this.expectKeyword('export');
		        var exportDeclaration;
		        if (this.matchKeyword('default')) {
		            // export default ...
		            this.nextToken();
		            if (this.matchKeyword('function')) {
		                // export default function foo () {}
		                // export default function () {}
		                var declaration = this.parseFunctionDeclaration(true);
		                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
		            }
		            else if (this.matchKeyword('class')) {
		                // export default class foo {}
		                var declaration = this.parseClassDeclaration(true);
		                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
		            }
		            else if (this.matchContextualKeyword('async')) {
		                // export default async function f () {}
		                // export default async function () {}
		                // export default async x => x
		                var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();
		                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
		            }
		            else {
		                if (this.matchContextualKeyword('from')) {
		                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
		                }
		                // export default {};
		                // export default [];
		                // export default (1 + 2);
		                var declaration = this.match('{') ? this.parseObjectInitializer() :
		                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();
		                this.consumeSemicolon();
		                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
		            }
		        }
		        else if (this.match('*')) {
		            // export * from 'foo';
		            this.nextToken();
		            if (!this.matchContextualKeyword('from')) {
		                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
		                this.throwError(message, this.lookahead.value);
		            }
		            this.nextToken();
		            var src = this.parseModuleSpecifier();
		            this.consumeSemicolon();
		            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
		        }
		        else if (this.lookahead.type === 4 /* Keyword */) {
		            // export var f = 1;
		            var declaration = void 0;
		            switch (this.lookahead.value) {
		                case 'let':
		                case 'const':
		                    declaration = this.parseLexicalDeclaration({ inFor: false });
		                    break;
		                case 'var':
		                case 'class':
		                case 'function':
		                    declaration = this.parseStatementListItem();
		                    break;
		                default:
		                    this.throwUnexpectedToken(this.lookahead);
		            }
		            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
		        }
		        else if (this.matchAsyncFunction()) {
		            var declaration = this.parseFunctionDeclaration();
		            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
		        }
		        else {
		            var specifiers = [];
		            var source = null;
		            var isExportFromIdentifier = false;
		            this.expect('{');
		            while (!this.match('}')) {
		                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');
		                specifiers.push(this.parseExportSpecifier());
		                if (!this.match('}')) {
		                    this.expect(',');
		                }
		            }
		            this.expect('}');
		            if (this.matchContextualKeyword('from')) {
		                // export {default} from 'foo';
		                // export {foo} from 'foo';
		                this.nextToken();
		                source = this.parseModuleSpecifier();
		                this.consumeSemicolon();
		            }
		            else if (isExportFromIdentifier) {
		                // export {default}; // missing fromClause
		                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
		                this.throwError(message, this.lookahead.value);
		            }
		            else {
		                // export {foo};
		                this.consumeSemicolon();
		            }
		            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
		        }
		        return exportDeclaration;
		    };
		    return Parser;
		}());
		exports.Parser = Parser;


	/***/ },
	/* 9 */
	/***/ function(module, exports) {
		// Ensure the condition is true, otherwise throw an error.
		// This is only to have a better contract semantic, i.e. another safety net
		// to catch a logic error. The condition shall be fulfilled in normal case.
		// Do NOT use this to enforce a certain condition on any user input.
		Object.defineProperty(exports, "__esModule", { value: true });
		function assert(condition, message) {
		    /* istanbul ignore if */
		    if (!condition) {
		        throw new Error('ASSERT: ' + message);
		    }
		}
		exports.assert = assert;


	/***/ },
	/* 10 */
	/***/ function(module, exports) {
		/* tslint:disable:max-classes-per-file */
		Object.defineProperty(exports, "__esModule", { value: true });
		var ErrorHandler = (function () {
		    function ErrorHandler() {
		        this.errors = [];
		        this.tolerant = false;
		    }
		    ErrorHandler.prototype.recordError = function (error) {
		        this.errors.push(error);
		    };
		    ErrorHandler.prototype.tolerate = function (error) {
		        if (this.tolerant) {
		            this.recordError(error);
		        }
		        else {
		            throw error;
		        }
		    };
		    ErrorHandler.prototype.constructError = function (msg, column) {
		        var error = new Error(msg);
		        try {
		            throw error;
		        }
		        catch (base) {
		            /* istanbul ignore else */
		            if (Object.create && Object.defineProperty) {
		                error = Object.create(base);
		                Object.defineProperty(error, 'column', { value: column });
		            }
		        }
		        /* istanbul ignore next */
		        return error;
		    };
		    ErrorHandler.prototype.createError = function (index, line, col, description) {
		        var msg = 'Line ' + line + ': ' + description;
		        var error = this.constructError(msg, col);
		        error.index = index;
		        error.lineNumber = line;
		        error.description = description;
		        return error;
		    };
		    ErrorHandler.prototype.throwError = function (index, line, col, description) {
		        throw this.createError(index, line, col, description);
		    };
		    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {
		        var error = this.createError(index, line, col, description);
		        if (this.tolerant) {
		            this.recordError(error);
		        }
		        else {
		            throw error;
		        }
		    };
		    return ErrorHandler;
		}());
		exports.ErrorHandler = ErrorHandler;


	/***/ },
	/* 11 */
	/***/ function(module, exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		// Error messages should be identical to V8.
		exports.Messages = {
		    BadGetterArity: 'Getter must not have any formal parameters',
		    BadSetterArity: 'Setter must have exactly one formal parameter',
		    BadSetterRestParameter: 'Setter function argument must not be a rest parameter',
		    ConstructorIsAsync: 'Class constructor may not be an async method',
		    ConstructorSpecialMethod: 'Class constructor may not be an accessor',
		    DeclarationMissingInitializer: 'Missing initializer in %0 declaration',
		    DefaultRestParameter: 'Unexpected token =',
		    DuplicateBinding: 'Duplicate binding %0',
		    DuplicateConstructor: 'A class may only have one constructor',
		    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
		    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',
		    GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',
		    IllegalBreak: 'Illegal break statement',
		    IllegalContinue: 'Illegal continue statement',
		    IllegalExportDeclaration: 'Unexpected token',
		    IllegalImportDeclaration: 'Unexpected token',
		    IllegalLanguageModeDirective: 'Illegal \'use strict\' directive in function with non-simple parameter list',
		    IllegalReturn: 'Illegal return statement',
		    InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',
		    InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',
		    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
		    InvalidLHSInForIn: 'Invalid left-hand side in for-in',
		    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
		    InvalidModuleSpecifier: 'Unexpected token',
		    InvalidRegExp: 'Invalid regular expression',
		    LetInLexicalBinding: 'let is disallowed as a lexically bound name',
		    MissingFromClause: 'Unexpected token',
		    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
		    NewlineAfterThrow: 'Illegal newline after throw',
		    NoAsAfterImportNamespace: 'Unexpected token',
		    NoCatchOrFinally: 'Missing catch or finally after try',
		    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
		    Redeclaration: '%0 \'%1\' has already been declared',
		    StaticPrototype: 'Classes may not have static property named prototype',
		    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
		    StrictDelete: 'Delete of an unqualified identifier in strict mode.',
		    StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',
		    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
		    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
		    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
		    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
		    StrictModeWith: 'Strict mode code may not include a with statement',
		    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
		    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
		    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
		    StrictReservedWord: 'Use of future reserved word in strict mode',
		    StrictVarName: 'Variable name may not be eval or arguments in strict mode',
		    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
		    UnexpectedEOS: 'Unexpected end of input',
		    UnexpectedIdentifier: 'Unexpected identifier',
		    UnexpectedNumber: 'Unexpected number',
		    UnexpectedReserved: 'Unexpected reserved word',
		    UnexpectedString: 'Unexpected string',
		    UnexpectedTemplate: 'Unexpected quasi %0',
		    UnexpectedToken: 'Unexpected token %0',
		    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
		    UnknownLabel: 'Undefined label \'%0\'',
		    UnterminatedRegExp: 'Invalid regular expression: missing /'
		};


	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var assert_1 = __webpack_require__(9);
		var character_1 = __webpack_require__(4);
		var messages_1 = __webpack_require__(11);
		function hexValue(ch) {
		    return '0123456789abcdef'.indexOf(ch.toLowerCase());
		}
		function octalValue(ch) {
		    return '01234567'.indexOf(ch);
		}
		var Scanner = (function () {
		    function Scanner(code, handler) {
		        this.source = code;
		        this.errorHandler = handler;
		        this.trackComment = false;
		        this.isModule = false;
		        this.length = code.length;
		        this.index = 0;
		        this.lineNumber = (code.length > 0) ? 1 : 0;
		        this.lineStart = 0;
		        this.curlyStack = [];
		    }
		    Scanner.prototype.saveState = function () {
		        return {
		            index: this.index,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart
		        };
		    };
		    Scanner.prototype.restoreState = function (state) {
		        this.index = state.index;
		        this.lineNumber = state.lineNumber;
		        this.lineStart = state.lineStart;
		    };
		    Scanner.prototype.eof = function () {
		        return this.index >= this.length;
		    };
		    Scanner.prototype.throwUnexpectedToken = function (message) {
		        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
		        return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
		    };
		    Scanner.prototype.tolerateUnexpectedToken = function (message) {
		        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
		        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
		    };
		    // https://tc39.github.io/ecma262/#sec-comments
		    Scanner.prototype.skipSingleLineComment = function (offset) {
		        var comments = [];
		        var start, loc;
		        if (this.trackComment) {
		            comments = [];
		            start = this.index - offset;
		            loc = {
		                start: {
		                    line: this.lineNumber,
		                    column: this.index - this.lineStart - offset
		                },
		                end: {}
		            };
		        }
		        while (!this.eof()) {
		            var ch = this.source.charCodeAt(this.index);
		            ++this.index;
		            if (character_1.Character.isLineTerminator(ch)) {
		                if (this.trackComment) {
		                    loc.end = {
		                        line: this.lineNumber,
		                        column: this.index - this.lineStart - 1
		                    };
		                    var entry = {
		                        multiLine: false,
		                        slice: [start + offset, this.index - 1],
		                        range: [start, this.index - 1],
		                        loc: loc
		                    };
		                    comments.push(entry);
		                }
		                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
		                    ++this.index;
		                }
		                ++this.lineNumber;
		                this.lineStart = this.index;
		                return comments;
		            }
		        }
		        if (this.trackComment) {
		            loc.end = {
		                line: this.lineNumber,
		                column: this.index - this.lineStart
		            };
		            var entry = {
		                multiLine: false,
		                slice: [start + offset, this.index],
		                range: [start, this.index],
		                loc: loc
		            };
		            comments.push(entry);
		        }
		        return comments;
		    };
		    Scanner.prototype.skipMultiLineComment = function () {
		        var comments = [];
		        var start, loc;
		        if (this.trackComment) {
		            comments = [];
		            start = this.index - 2;
		            loc = {
		                start: {
		                    line: this.lineNumber,
		                    column: this.index - this.lineStart - 2
		                },
		                end: {}
		            };
		        }
		        while (!this.eof()) {
		            var ch = this.source.charCodeAt(this.index);
		            if (character_1.Character.isLineTerminator(ch)) {
		                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {
		                    ++this.index;
		                }
		                ++this.lineNumber;
		                ++this.index;
		                this.lineStart = this.index;
		            }
		            else if (ch === 0x2A) {
		                // Block comment ends with '*/'.
		                if (this.source.charCodeAt(this.index + 1) === 0x2F) {
		                    this.index += 2;
		                    if (this.trackComment) {
		                        loc.end = {
		                            line: this.lineNumber,
		                            column: this.index - this.lineStart
		                        };
		                        var entry = {
		                            multiLine: true,
		                            slice: [start + 2, this.index - 2],
		                            range: [start, this.index],
		                            loc: loc
		                        };
		                        comments.push(entry);
		                    }
		                    return comments;
		                }
		                ++this.index;
		            }
		            else {
		                ++this.index;
		            }
		        }
		        // Ran off the end of the file - the whole thing is a comment
		        if (this.trackComment) {
		            loc.end = {
		                line: this.lineNumber,
		                column: this.index - this.lineStart
		            };
		            var entry = {
		                multiLine: true,
		                slice: [start + 2, this.index],
		                range: [start, this.index],
		                loc: loc
		            };
		            comments.push(entry);
		        }
		        this.tolerateUnexpectedToken();
		        return comments;
		    };
		    Scanner.prototype.scanComments = function () {
		        var comments;
		        if (this.trackComment) {
		            comments = [];
		        }
		        var start = (this.index === 0);
		        while (!this.eof()) {
		            var ch = this.source.charCodeAt(this.index);
		            if (character_1.Character.isWhiteSpace(ch)) {
		                ++this.index;
		            }
		            else if (character_1.Character.isLineTerminator(ch)) {
		                ++this.index;
		                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {
		                    ++this.index;
		                }
		                ++this.lineNumber;
		                this.lineStart = this.index;
		                start = true;
		            }
		            else if (ch === 0x2F) {
		                ch = this.source.charCodeAt(this.index + 1);
		                if (ch === 0x2F) {
		                    this.index += 2;
		                    var comment = this.skipSingleLineComment(2);
		                    if (this.trackComment) {
		                        comments = comments.concat(comment);
		                    }
		                    start = true;
		                }
		                else if (ch === 0x2A) {
		                    this.index += 2;
		                    var comment = this.skipMultiLineComment();
		                    if (this.trackComment) {
		                        comments = comments.concat(comment);
		                    }
		                }
		                else {
		                    break;
		                }
		            }
		            else if (start && ch === 0x2D) {
		                // U+003E is '>'
		                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {
		                    // '-->' is a single-line comment
		                    this.index += 3;
		                    var comment = this.skipSingleLineComment(3);
		                    if (this.trackComment) {
		                        comments = comments.concat(comment);
		                    }
		                }
		                else {
		                    break;
		                }
		            }
		            else if (ch === 0x3C && !this.isModule) {
		                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
		                    this.index += 4; // `<!--`
		                    var comment = this.skipSingleLineComment(4);
		                    if (this.trackComment) {
		                        comments = comments.concat(comment);
		                    }
		                }
		                else {
		                    break;
		                }
		            }
		            else {
		                break;
		            }
		        }
		        return comments;
		    };
		    // https://tc39.github.io/ecma262/#sec-future-reserved-words
		    Scanner.prototype.isFutureReservedWord = function (id) {
		        switch (id) {
		            case 'enum':
		            case 'export':
		            case 'import':
		            case 'super':
		                return true;
		            default:
		                return false;
		        }
		    };
		    Scanner.prototype.isStrictModeReservedWord = function (id) {
		        switch (id) {
		            case 'implements':
		            case 'interface':
		            case 'package':
		            case 'private':
		            case 'protected':
		            case 'public':
		            case 'static':
		            case 'yield':
		            case 'let':
		                return true;
		            default:
		                return false;
		        }
		    };
		    Scanner.prototype.isRestrictedWord = function (id) {
		        return id === 'eval' || id === 'arguments';
		    };
		    // https://tc39.github.io/ecma262/#sec-keywords
		    Scanner.prototype.isKeyword = function (id) {
		        switch (id.length) {
		            case 2:
		                return (id === 'if') || (id === 'in') || (id === 'do');
		            case 3:
		                return (id === 'var') || (id === 'for') || (id === 'new') ||
		                    (id === 'try') || (id === 'let');
		            case 4:
		                return (id === 'this') || (id === 'else') || (id === 'case') ||
		                    (id === 'void') || (id === 'with') || (id === 'enum');
		            case 5:
		                return (id === 'while') || (id === 'break') || (id === 'catch') ||
		                    (id === 'throw') || (id === 'const') || (id === 'yield') ||
		                    (id === 'class') || (id === 'super');
		            case 6:
		                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
		                    (id === 'switch') || (id === 'export') || (id === 'import');
		            case 7:
		                return (id === 'default') || (id === 'finally') || (id === 'extends');
		            case 8:
		                return (id === 'function') || (id === 'continue') || (id === 'debugger');
		            case 10:
		                return (id === 'instanceof');
		            default:
		                return false;
		        }
		    };
		    Scanner.prototype.codePointAt = function (i) {
		        var cp = this.source.charCodeAt(i);
		        if (cp >= 0xD800 && cp <= 0xDBFF) {
		            var second = this.source.charCodeAt(i + 1);
		            if (second >= 0xDC00 && second <= 0xDFFF) {
		                var first = cp;
		                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
		            }
		        }
		        return cp;
		    };
		    Scanner.prototype.scanHexEscape = function (prefix) {
		        var len = (prefix === 'u') ? 4 : 2;
		        var code = 0;
		        for (var i = 0; i < len; ++i) {
		            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
		                code = code * 16 + hexValue(this.source[this.index++]);
		            }
		            else {
		                return null;
		            }
		        }
		        return String.fromCharCode(code);
		    };
		    Scanner.prototype.scanUnicodeCodePointEscape = function () {
		        var ch = this.source[this.index];
		        var code = 0;
		        // At least, one hex digit is required.
		        if (ch === '}') {
		            this.throwUnexpectedToken();
		        }
		        while (!this.eof()) {
		            ch = this.source[this.index++];
		            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
		                break;
		            }
		            code = code * 16 + hexValue(ch);
		        }
		        if (code > 0x10FFFF || ch !== '}') {
		            this.throwUnexpectedToken();
		        }
		        return character_1.Character.fromCodePoint(code);
		    };
		    Scanner.prototype.getIdentifier = function () {
		        var start = this.index++;
		        while (!this.eof()) {
		            var ch = this.source.charCodeAt(this.index);
		            if (ch === 0x5C) {
		                // Blackslash (U+005C) marks Unicode escape sequence.
		                this.index = start;
		                return this.getComplexIdentifier();
		            }
		            else if (ch >= 0xD800 && ch < 0xDFFF) {
		                // Need to handle surrogate pairs.
		                this.index = start;
		                return this.getComplexIdentifier();
		            }
		            if (character_1.Character.isIdentifierPart(ch)) {
		                ++this.index;
		            }
		            else {
		                break;
		            }
		        }
		        return this.source.slice(start, this.index);
		    };
		    Scanner.prototype.getComplexIdentifier = function () {
		        var cp = this.codePointAt(this.index);
		        var id = character_1.Character.fromCodePoint(cp);
		        this.index += id.length;
		        // '\u' (U+005C, U+0075) denotes an escaped character.
		        var ch;
		        if (cp === 0x5C) {
		            if (this.source.charCodeAt(this.index) !== 0x75) {
		                this.throwUnexpectedToken();
		            }
		            ++this.index;
		            if (this.source[this.index] === '{') {
		                ++this.index;
		                ch = this.scanUnicodeCodePointEscape();
		            }
		            else {
		                ch = this.scanHexEscape('u');
		                if (ch === null || ch === '\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {
		                    this.throwUnexpectedToken();
		                }
		            }
		            id = ch;
		        }
		        while (!this.eof()) {
		            cp = this.codePointAt(this.index);
		            if (!character_1.Character.isIdentifierPart(cp)) {
		                break;
		            }
		            ch = character_1.Character.fromCodePoint(cp);
		            id += ch;
		            this.index += ch.length;
		            // '\u' (U+005C, U+0075) denotes an escaped character.
		            if (cp === 0x5C) {
		                id = id.substr(0, id.length - 1);
		                if (this.source.charCodeAt(this.index) !== 0x75) {
		                    this.throwUnexpectedToken();
		                }
		                ++this.index;
		                if (this.source[this.index] === '{') {
		                    ++this.index;
		                    ch = this.scanUnicodeCodePointEscape();
		                }
		                else {
		                    ch = this.scanHexEscape('u');
		                    if (ch === null || ch === '\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
		                        this.throwUnexpectedToken();
		                    }
		                }
		                id += ch;
		            }
		        }
		        return id;
		    };
		    Scanner.prototype.octalToDecimal = function (ch) {
		        // \0 is not octal escape sequence
		        var octal = (ch !== '0');
		        var code = octalValue(ch);
		        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
		            octal = true;
		            code = code * 8 + octalValue(this.source[this.index++]);
		            // 3 digits are only allowed when string starts
		            // with 0, 1, 2, 3
		            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
		                code = code * 8 + octalValue(this.source[this.index++]);
		            }
		        }
		        return {
		            code: code,
		            octal: octal
		        };
		    };
		    // https://tc39.github.io/ecma262/#sec-names-and-keywords
		    Scanner.prototype.scanIdentifier = function () {
		        var type;
		        var start = this.index;
		        // Backslash (U+005C) starts an escaped character.
		        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();
		        // There is no keyword or literal with only one character.
		        // Thus, it must be an identifier.
		        if (id.length === 1) {
		            type = 3 /* Identifier */;
		        }
		        else if (this.isKeyword(id)) {
		            type = 4 /* Keyword */;
		        }
		        else if (id === 'null') {
		            type = 5 /* NullLiteral */;
		        }
		        else if (id === 'true' || id === 'false') {
		            type = 1 /* BooleanLiteral */;
		        }
		        else {
		            type = 3 /* Identifier */;
		        }
		        if (type !== 3 /* Identifier */ && (start + id.length !== this.index)) {
		            var restore = this.index;
		            this.index = start;
		            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);
		            this.index = restore;
		        }
		        return {
		            type: type,
		            value: id,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    // https://tc39.github.io/ecma262/#sec-punctuators
		    Scanner.prototype.scanPunctuator = function () {
		        var start = this.index;
		        // Check for most common single-character punctuators.
		        var str = this.source[this.index];
		        switch (str) {
		            case '(':
		            case '{':
		                if (str === '{') {
		                    this.curlyStack.push('{');
		                }
		                ++this.index;
		                break;
		            case '.':
		                ++this.index;
		                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {
		                    // Spread operator: ...
		                    this.index += 2;
		                    str = '...';
		                }
		                break;
		            case '}':
		                ++this.index;
		                this.curlyStack.pop();
		                break;
		            case ')':
		            case ';':
		            case ',':
		            case '[':
		            case ']':
		            case ':':
		            case '?':
		            case '~':
		                ++this.index;
		                break;
		            default:
		                // 4-character punctuator.
		                str = this.source.substr(this.index, 4);
		                if (str === '>>>=') {
		                    this.index += 4;
		                }
		                else {
		                    // 3-character punctuators.
		                    str = str.substr(0, 3);
		                    if (str === '===' || str === '!==' || str === '>>>' ||
		                        str === '<<=' || str === '>>=' || str === '**=') {
		                        this.index += 3;
		                    }
		                    else {
		                        // 2-character punctuators.
		                        str = str.substr(0, 2);
		                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
		                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
		                            str === '++' || str === '--' || str === '<<' || str === '>>' ||
		                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
		                            str === '<=' || str === '>=' || str === '=>' || str === '**') {
		                            this.index += 2;
		                        }
		                        else {
		                            // 1-character punctuators.
		                            str = this.source[this.index];
		                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
		                                ++this.index;
		                            }
		                        }
		                    }
		                }
		        }
		        if (this.index === start) {
		            this.throwUnexpectedToken();
		        }
		        return {
		            type: 7 /* Punctuator */,
		            value: str,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
		    Scanner.prototype.scanHexLiteral = function (start) {
		        var num = '';
		        while (!this.eof()) {
		            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
		                break;
		            }
		            num += this.source[this.index++];
		        }
		        if (num.length === 0) {
		            this.throwUnexpectedToken();
		        }
		        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
		            this.throwUnexpectedToken();
		        }
		        return {
		            type: 6 /* NumericLiteral */,
		            value: parseInt('0x' + num, 16),
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    Scanner.prototype.scanBinaryLiteral = function (start) {
		        var num = '';
		        var ch;
		        while (!this.eof()) {
		            ch = this.source[this.index];
		            if (ch !== '0' && ch !== '1') {
		                break;
		            }
		            num += this.source[this.index++];
		        }
		        if (num.length === 0) {
		            // only 0b or 0B
		            this.throwUnexpectedToken();
		        }
		        if (!this.eof()) {
		            ch = this.source.charCodeAt(this.index);
		            /* istanbul ignore else */
		            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
		                this.throwUnexpectedToken();
		            }
		        }
		        return {
		            type: 6 /* NumericLiteral */,
		            value: parseInt(num, 2),
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    Scanner.prototype.scanOctalLiteral = function (prefix, start) {
		        var num = '';
		        var octal = false;
		        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
		            octal = true;
		            num = '0' + this.source[this.index++];
		        }
		        else {
		            ++this.index;
		        }
		        while (!this.eof()) {
		            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
		                break;
		            }
		            num += this.source[this.index++];
		        }
		        if (!octal && num.length === 0) {
		            // only 0o or 0O
		            this.throwUnexpectedToken();
		        }
		        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		            this.throwUnexpectedToken();
		        }
		        return {
		            type: 6 /* NumericLiteral */,
		            value: parseInt(num, 8),
		            octal: octal,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    Scanner.prototype.isImplicitOctalLiteral = function () {
		        // Implicit octal, unless there is a non-octal digit.
		        // (Annex B.1.1 on Numeric Literals)
		        for (var i = this.index + 1; i < this.length; ++i) {
		            var ch = this.source[i];
		            if (ch === '8' || ch === '9') {
		                return false;
		            }
		            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
		                return true;
		            }
		        }
		        return true;
		    };
		    Scanner.prototype.scanNumericLiteral = function () {
		        var start = this.index;
		        var ch = this.source[start];
		        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');
		        var num = '';
		        if (ch !== '.') {
		            num = this.source[this.index++];
		            ch = this.source[this.index];
		            // Hex number starts with '0x'.
		            // Octal number starts with '0'.
		            // Octal number in ES6 starts with '0o'.
		            // Binary number in ES6 starts with '0b'.
		            if (num === '0') {
		                if (ch === 'x' || ch === 'X') {
		                    ++this.index;
		                    return this.scanHexLiteral(start);
		                }
		                if (ch === 'b' || ch === 'B') {
		                    ++this.index;
		                    return this.scanBinaryLiteral(start);
		                }
		                if (ch === 'o' || ch === 'O') {
		                    return this.scanOctalLiteral(ch, start);
		                }
		                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
		                    if (this.isImplicitOctalLiteral()) {
		                        return this.scanOctalLiteral(ch, start);
		                    }
		                }
		            }
		            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		                num += this.source[this.index++];
		            }
		            ch = this.source[this.index];
		        }
		        if (ch === '.') {
		            num += this.source[this.index++];
		            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		                num += this.source[this.index++];
		            }
		            ch = this.source[this.index];
		        }
		        if (ch === 'e' || ch === 'E') {
		            num += this.source[this.index++];
		            ch = this.source[this.index];
		            if (ch === '+' || ch === '-') {
		                num += this.source[this.index++];
		            }
		            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		                    num += this.source[this.index++];
		                }
		            }
		            else {
		                this.throwUnexpectedToken();
		            }
		        }
		        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
		            this.throwUnexpectedToken();
		        }
		        return {
		            type: 6 /* NumericLiteral */,
		            value: parseFloat(num),
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    // https://tc39.github.io/ecma262/#sec-literals-string-literals
		    Scanner.prototype.scanStringLiteral = function () {
		        var start = this.index;
		        var quote = this.source[start];
		        assert_1.assert((quote === '\'' || quote === '"'), 'String literal must starts with a quote');
		        ++this.index;
		        var octal = false;
		        var str = '';
		        while (!this.eof()) {
		            var ch = this.source[this.index++];
		            if (ch === quote) {
		                quote = '';
		                break;
		            }
		            else if (ch === '\\') {
		                ch = this.source[this.index++];
		                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                    switch (ch) {
		                        case 'u':
		                            if (this.source[this.index] === '{') {
		                                ++this.index;
		                                str += this.scanUnicodeCodePointEscape();
		                            }
		                            else {
		                                var unescaped_1 = this.scanHexEscape(ch);
		                                if (unescaped_1 === null) {
		                                    this.throwUnexpectedToken();
		                                }
		                                str += unescaped_1;
		                            }
		                            break;
		                        case 'x':
		                            var unescaped = this.scanHexEscape(ch);
		                            if (unescaped === null) {
		                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
		                            }
		                            str += unescaped;
		                            break;
		                        case 'n':
		                            str += '\n';
		                            break;
		                        case 'r':
		                            str += '\r';
		                            break;
		                        case 't':
		                            str += '\t';
		                            break;
		                        case 'b':
		                            str += '\b';
		                            break;
		                        case 'f':
		                            str += '\f';
		                            break;
		                        case 'v':
		                            str += '\x0B';
		                            break;
		                        case '8':
		                        case '9':
		                            str += ch;
		                            this.tolerateUnexpectedToken();
		                            break;
		                        default:
		                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
		                                var octToDec = this.octalToDecimal(ch);
		                                octal = octToDec.octal || octal;
		                                str += String.fromCharCode(octToDec.code);
		                            }
		                            else {
		                                str += ch;
		                            }
		                            break;
		                    }
		                }
		                else {
		                    ++this.lineNumber;
		                    if (ch === '\r' && this.source[this.index] === '\n') {
		                        ++this.index;
		                    }
		                    this.lineStart = this.index;
		                }
		            }
		            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                break;
		            }
		            else {
		                str += ch;
		            }
		        }
		        if (quote !== '') {
		            this.index = start;
		            this.throwUnexpectedToken();
		        }
		        return {
		            type: 8 /* StringLiteral */,
		            value: str,
		            octal: octal,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components
		    Scanner.prototype.scanTemplate = function () {
		        var cooked = '';
		        var terminated = false;
		        var start = this.index;
		        var head = (this.source[start] === '`');
		        var tail = false;
		        var rawOffset = 2;
		        ++this.index;
		        while (!this.eof()) {
		            var ch = this.source[this.index++];
		            if (ch === '`') {
		                rawOffset = 1;
		                tail = true;
		                terminated = true;
		                break;
		            }
		            else if (ch === '$') {
		                if (this.source[this.index] === '{') {
		                    this.curlyStack.push('${');
		                    ++this.index;
		                    terminated = true;
		                    break;
		                }
		                cooked += ch;
		            }
		            else if (ch === '\\') {
		                ch = this.source[this.index++];
		                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                    switch (ch) {
		                        case 'n':
		                            cooked += '\n';
		                            break;
		                        case 'r':
		                            cooked += '\r';
		                            break;
		                        case 't':
		                            cooked += '\t';
		                            break;
		                        case 'u':
		                            if (this.source[this.index] === '{') {
		                                ++this.index;
		                                cooked += this.scanUnicodeCodePointEscape();
		                            }
		                            else {
		                                var restore = this.index;
		                                var unescaped_2 = this.scanHexEscape(ch);
		                                if (unescaped_2 !== null) {
		                                    cooked += unescaped_2;
		                                }
		                                else {
		                                    this.index = restore;
		                                    cooked += ch;
		                                }
		                            }
		                            break;
		                        case 'x':
		                            var unescaped = this.scanHexEscape(ch);
		                            if (unescaped === null) {
		                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
		                            }
		                            cooked += unescaped;
		                            break;
		                        case 'b':
		                            cooked += '\b';
		                            break;
		                        case 'f':
		                            cooked += '\f';
		                            break;
		                        case 'v':
		                            cooked += '\v';
		                            break;
		                        default:
		                            if (ch === '0') {
		                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		                                    // Illegal: \01 \02 and so on
		                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
		                                }
		                                cooked += '\0';
		                            }
		                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
		                                // Illegal: \1 \2
		                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
		                            }
		                            else {
		                                cooked += ch;
		                            }
		                            break;
		                    }
		                }
		                else {
		                    ++this.lineNumber;
		                    if (ch === '\r' && this.source[this.index] === '\n') {
		                        ++this.index;
		                    }
		                    this.lineStart = this.index;
		                }
		            }
		            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                ++this.lineNumber;
		                if (ch === '\r' && this.source[this.index] === '\n') {
		                    ++this.index;
		                }
		                this.lineStart = this.index;
		                cooked += '\n';
		            }
		            else {
		                cooked += ch;
		            }
		        }
		        if (!terminated) {
		            this.throwUnexpectedToken();
		        }
		        if (!head) {
		            this.curlyStack.pop();
		        }
		        return {
		            type: 10 /* Template */,
		            value: this.source.slice(start + 1, this.index - rawOffset),
		            cooked: cooked,
		            head: head,
		            tail: tail,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
		    Scanner.prototype.testRegExp = function (pattern, flags) {
		        // The BMP character to use as a replacement for astral symbols when
		        // translating an ES6 "u"-flagged pattern to an ES5-compatible
		        // approximation.
		        // Note: replacing with '\uFFFF' enables false positives in unlikely
		        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
		        // pattern that would not be detected by this substitution.
		        var astralSubstitute = '\uFFFF';
		        var tmp = pattern;
		        var self = this;
		        if (flags.indexOf('u') >= 0) {
		            tmp = tmp
		                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
		                var codePoint = parseInt($1 || $2, 16);
		                if (codePoint > 0x10FFFF) {
		                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
		                }
		                if (codePoint <= 0xFFFF) {
		                    return String.fromCharCode(codePoint);
		                }
		                return astralSubstitute;
		            })
		                .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
		        }
		        // First, detect invalid regular expressions.
		        try {
		            RegExp(tmp);
		        }
		        catch (e) {
		            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
		        }
		        // Return a regular expression object for this pattern-flag pair, or
		        // `null` in case the current environment doesn't support the flags it
		        // uses.
		        try {
		            return new RegExp(pattern, flags);
		        }
		        catch (exception) {
		            /* istanbul ignore next */
		            return null;
		        }
		    };
		    Scanner.prototype.scanRegExpBody = function () {
		        var ch = this.source[this.index];
		        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');
		        var str = this.source[this.index++];
		        var classMarker = false;
		        var terminated = false;
		        while (!this.eof()) {
		            ch = this.source[this.index++];
		            str += ch;
		            if (ch === '\\') {
		                ch = this.source[this.index++];
		                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
		                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
		                }
		                str += ch;
		            }
		            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
		            }
		            else if (classMarker) {
		                if (ch === ']') {
		                    classMarker = false;
		                }
		            }
		            else {
		                if (ch === '/') {
		                    terminated = true;
		                    break;
		                }
		                else if (ch === '[') {
		                    classMarker = true;
		                }
		            }
		        }
		        if (!terminated) {
		            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
		        }
		        // Exclude leading and trailing slash.
		        return str.substr(1, str.length - 2);
		    };
		    Scanner.prototype.scanRegExpFlags = function () {
		        var str = '';
		        var flags = '';
		        while (!this.eof()) {
		            var ch = this.source[this.index];
		            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
		                break;
		            }
		            ++this.index;
		            if (ch === '\\' && !this.eof()) {
		                ch = this.source[this.index];
		                if (ch === 'u') {
		                    ++this.index;
		                    var restore = this.index;
		                    var char = this.scanHexEscape('u');
		                    if (char !== null) {
		                        flags += char;
		                        for (str += '\\u'; restore < this.index; ++restore) {
		                            str += this.source[restore];
		                        }
		                    }
		                    else {
		                        this.index = restore;
		                        flags += 'u';
		                        str += '\\u';
		                    }
		                    this.tolerateUnexpectedToken();
		                }
		                else {
		                    str += '\\';
		                    this.tolerateUnexpectedToken();
		                }
		            }
		            else {
		                flags += ch;
		                str += ch;
		            }
		        }
		        return flags;
		    };
		    Scanner.prototype.scanRegExp = function () {
		        var start = this.index;
		        var pattern = this.scanRegExpBody();
		        var flags = this.scanRegExpFlags();
		        var value = this.testRegExp(pattern, flags);
		        return {
		            type: 9 /* RegularExpression */,
		            value: '',
		            pattern: pattern,
		            flags: flags,
		            regex: value,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    Scanner.prototype.lex = function () {
		        if (this.eof()) {
		            return {
		                type: 2 /* EOF */,
		                value: '',
		                lineNumber: this.lineNumber,
		                lineStart: this.lineStart,
		                start: this.index,
		                end: this.index
		            };
		        }
		        var cp = this.source.charCodeAt(this.index);
		        if (character_1.Character.isIdentifierStart(cp)) {
		            return this.scanIdentifier();
		        }
		        // Very common: ( and ) and ;
		        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
		            return this.scanPunctuator();
		        }
		        // String literal starts with single quote (U+0027) or double quote (U+0022).
		        if (cp === 0x27 || cp === 0x22) {
		            return this.scanStringLiteral();
		        }
		        // Dot (.) U+002E can also start a floating-point number, hence the need
		        // to check the next character.
		        if (cp === 0x2E) {
		            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
		                return this.scanNumericLiteral();
		            }
		            return this.scanPunctuator();
		        }
		        if (character_1.Character.isDecimalDigit(cp)) {
		            return this.scanNumericLiteral();
		        }
		        // Template literals start with ` (U+0060) for template head
		        // or } (U+007D) for template middle or template tail.
		        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {
		            return this.scanTemplate();
		        }
		        // Possible identifier start in a surrogate pair.
		        if (cp >= 0xD800 && cp < 0xDFFF) {
		            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
		                return this.scanIdentifier();
		            }
		        }
		        return this.scanPunctuator();
		    };
		    return Scanner;
		}());
		exports.Scanner = Scanner;


	/***/ },
	/* 13 */
	/***/ function(module, exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.TokenName = {};
		exports.TokenName[1 /* BooleanLiteral */] = 'Boolean';
		exports.TokenName[2 /* EOF */] = '<end>';
		exports.TokenName[3 /* Identifier */] = 'Identifier';
		exports.TokenName[4 /* Keyword */] = 'Keyword';
		exports.TokenName[5 /* NullLiteral */] = 'Null';
		exports.TokenName[6 /* NumericLiteral */] = 'Numeric';
		exports.TokenName[7 /* Punctuator */] = 'Punctuator';
		exports.TokenName[8 /* StringLiteral */] = 'String';
		exports.TokenName[9 /* RegularExpression */] = 'RegularExpression';
		exports.TokenName[10 /* Template */] = 'Template';


	/***/ },
	/* 14 */
	/***/ function(module, exports) {
		// Generated by generate-xhtml-entities.js. DO NOT MODIFY!
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.XHTMLEntities = {
		    quot: '\u0022',
		    amp: '\u0026',
		    apos: '\u0027',
		    gt: '\u003E',
		    nbsp: '\u00A0',
		    iexcl: '\u00A1',
		    cent: '\u00A2',
		    pound: '\u00A3',
		    curren: '\u00A4',
		    yen: '\u00A5',
		    brvbar: '\u00A6',
		    sect: '\u00A7',
		    uml: '\u00A8',
		    copy: '\u00A9',
		    ordf: '\u00AA',
		    laquo: '\u00AB',
		    not: '\u00AC',
		    shy: '\u00AD',
		    reg: '\u00AE',
		    macr: '\u00AF',
		    deg: '\u00B0',
		    plusmn: '\u00B1',
		    sup2: '\u00B2',
		    sup3: '\u00B3',
		    acute: '\u00B4',
		    micro: '\u00B5',
		    para: '\u00B6',
		    middot: '\u00B7',
		    cedil: '\u00B8',
		    sup1: '\u00B9',
		    ordm: '\u00BA',
		    raquo: '\u00BB',
		    frac14: '\u00BC',
		    frac12: '\u00BD',
		    frac34: '\u00BE',
		    iquest: '\u00BF',
		    Agrave: '\u00C0',
		    Aacute: '\u00C1',
		    Acirc: '\u00C2',
		    Atilde: '\u00C3',
		    Auml: '\u00C4',
		    Aring: '\u00C5',
		    AElig: '\u00C6',
		    Ccedil: '\u00C7',
		    Egrave: '\u00C8',
		    Eacute: '\u00C9',
		    Ecirc: '\u00CA',
		    Euml: '\u00CB',
		    Igrave: '\u00CC',
		    Iacute: '\u00CD',
		    Icirc: '\u00CE',
		    Iuml: '\u00CF',
		    ETH: '\u00D0',
		    Ntilde: '\u00D1',
		    Ograve: '\u00D2',
		    Oacute: '\u00D3',
		    Ocirc: '\u00D4',
		    Otilde: '\u00D5',
		    Ouml: '\u00D6',
		    times: '\u00D7',
		    Oslash: '\u00D8',
		    Ugrave: '\u00D9',
		    Uacute: '\u00DA',
		    Ucirc: '\u00DB',
		    Uuml: '\u00DC',
		    Yacute: '\u00DD',
		    THORN: '\u00DE',
		    szlig: '\u00DF',
		    agrave: '\u00E0',
		    aacute: '\u00E1',
		    acirc: '\u00E2',
		    atilde: '\u00E3',
		    auml: '\u00E4',
		    aring: '\u00E5',
		    aelig: '\u00E6',
		    ccedil: '\u00E7',
		    egrave: '\u00E8',
		    eacute: '\u00E9',
		    ecirc: '\u00EA',
		    euml: '\u00EB',
		    igrave: '\u00EC',
		    iacute: '\u00ED',
		    icirc: '\u00EE',
		    iuml: '\u00EF',
		    eth: '\u00F0',
		    ntilde: '\u00F1',
		    ograve: '\u00F2',
		    oacute: '\u00F3',
		    ocirc: '\u00F4',
		    otilde: '\u00F5',
		    ouml: '\u00F6',
		    divide: '\u00F7',
		    oslash: '\u00F8',
		    ugrave: '\u00F9',
		    uacute: '\u00FA',
		    ucirc: '\u00FB',
		    uuml: '\u00FC',
		    yacute: '\u00FD',
		    thorn: '\u00FE',
		    yuml: '\u00FF',
		    OElig: '\u0152',
		    oelig: '\u0153',
		    Scaron: '\u0160',
		    scaron: '\u0161',
		    Yuml: '\u0178',
		    fnof: '\u0192',
		    circ: '\u02C6',
		    tilde: '\u02DC',
		    Alpha: '\u0391',
		    Beta: '\u0392',
		    Gamma: '\u0393',
		    Delta: '\u0394',
		    Epsilon: '\u0395',
		    Zeta: '\u0396',
		    Eta: '\u0397',
		    Theta: '\u0398',
		    Iota: '\u0399',
		    Kappa: '\u039A',
		    Lambda: '\u039B',
		    Mu: '\u039C',
		    Nu: '\u039D',
		    Xi: '\u039E',
		    Omicron: '\u039F',
		    Pi: '\u03A0',
		    Rho: '\u03A1',
		    Sigma: '\u03A3',
		    Tau: '\u03A4',
		    Upsilon: '\u03A5',
		    Phi: '\u03A6',
		    Chi: '\u03A7',
		    Psi: '\u03A8',
		    Omega: '\u03A9',
		    alpha: '\u03B1',
		    beta: '\u03B2',
		    gamma: '\u03B3',
		    delta: '\u03B4',
		    epsilon: '\u03B5',
		    zeta: '\u03B6',
		    eta: '\u03B7',
		    theta: '\u03B8',
		    iota: '\u03B9',
		    kappa: '\u03BA',
		    lambda: '\u03BB',
		    mu: '\u03BC',
		    nu: '\u03BD',
		    xi: '\u03BE',
		    omicron: '\u03BF',
		    pi: '\u03C0',
		    rho: '\u03C1',
		    sigmaf: '\u03C2',
		    sigma: '\u03C3',
		    tau: '\u03C4',
		    upsilon: '\u03C5',
		    phi: '\u03C6',
		    chi: '\u03C7',
		    psi: '\u03C8',
		    omega: '\u03C9',
		    thetasym: '\u03D1',
		    upsih: '\u03D2',
		    piv: '\u03D6',
		    ensp: '\u2002',
		    emsp: '\u2003',
		    thinsp: '\u2009',
		    zwnj: '\u200C',
		    zwj: '\u200D',
		    lrm: '\u200E',
		    rlm: '\u200F',
		    ndash: '\u2013',
		    mdash: '\u2014',
		    lsquo: '\u2018',
		    rsquo: '\u2019',
		    sbquo: '\u201A',
		    ldquo: '\u201C',
		    rdquo: '\u201D',
		    bdquo: '\u201E',
		    dagger: '\u2020',
		    Dagger: '\u2021',
		    bull: '\u2022',
		    hellip: '\u2026',
		    permil: '\u2030',
		    prime: '\u2032',
		    Prime: '\u2033',
		    lsaquo: '\u2039',
		    rsaquo: '\u203A',
		    oline: '\u203E',
		    frasl: '\u2044',
		    euro: '\u20AC',
		    image: '\u2111',
		    weierp: '\u2118',
		    real: '\u211C',
		    trade: '\u2122',
		    alefsym: '\u2135',
		    larr: '\u2190',
		    uarr: '\u2191',
		    rarr: '\u2192',
		    darr: '\u2193',
		    harr: '\u2194',
		    crarr: '\u21B5',
		    lArr: '\u21D0',
		    uArr: '\u21D1',
		    rArr: '\u21D2',
		    dArr: '\u21D3',
		    hArr: '\u21D4',
		    forall: '\u2200',
		    part: '\u2202',
		    exist: '\u2203',
		    empty: '\u2205',
		    nabla: '\u2207',
		    isin: '\u2208',
		    notin: '\u2209',
		    ni: '\u220B',
		    prod: '\u220F',
		    sum: '\u2211',
		    minus: '\u2212',
		    lowast: '\u2217',
		    radic: '\u221A',
		    prop: '\u221D',
		    infin: '\u221E',
		    ang: '\u2220',
		    and: '\u2227',
		    or: '\u2228',
		    cap: '\u2229',
		    cup: '\u222A',
		    int: '\u222B',
		    there4: '\u2234',
		    sim: '\u223C',
		    cong: '\u2245',
		    asymp: '\u2248',
		    ne: '\u2260',
		    equiv: '\u2261',
		    le: '\u2264',
		    ge: '\u2265',
		    sub: '\u2282',
		    sup: '\u2283',
		    nsub: '\u2284',
		    sube: '\u2286',
		    supe: '\u2287',
		    oplus: '\u2295',
		    otimes: '\u2297',
		    perp: '\u22A5',
		    sdot: '\u22C5',
		    lceil: '\u2308',
		    rceil: '\u2309',
		    lfloor: '\u230A',
		    rfloor: '\u230B',
		    loz: '\u25CA',
		    spades: '\u2660',
		    clubs: '\u2663',
		    hearts: '\u2665',
		    diams: '\u2666',
		    lang: '\u27E8',
		    rang: '\u27E9'
		};


	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var error_handler_1 = __webpack_require__(10);
		var scanner_1 = __webpack_require__(12);
		var token_1 = __webpack_require__(13);
		var Reader = (function () {
		    function Reader() {
		        this.values = [];
		        this.curly = this.paren = -1;
		    }
		    // A function following one of those tokens is an expression.
		    Reader.prototype.beforeFunctionExpression = function (t) {
		        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
		            'return', 'case', 'delete', 'throw', 'void',
		            // assignment operators
		            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',
		            '&=', '|=', '^=', ',',
		            // binary/unary operators
		            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
		            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
		            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;
		    };
		    // Determine if forward slash (/) is an operator or part of a regular expression
		    // https://github.com/mozilla/sweet.js/wiki/design
		    Reader.prototype.isRegexStart = function () {
		        var previous = this.values[this.values.length - 1];
		        var regex = (previous !== null);
		        switch (previous) {
		            case 'this':
		            case ']':
		                regex = false;
		                break;
		            case ')':
		                var keyword = this.values[this.paren - 1];
		                regex = (keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with');
		                break;
		            case '}':
		                // Dividing a function by anything makes little sense,
		                // but we have to check for that.
		                regex = false;
		                if (this.values[this.curly - 3] === 'function') {
		                    // Anonymous function, e.g. function(){} /42
		                    var check = this.values[this.curly - 4];
		                    regex = check ? !this.beforeFunctionExpression(check) : false;
		                }
		                else if (this.values[this.curly - 4] === 'function') {
		                    // Named function, e.g. function f(){} /42/
		                    var check = this.values[this.curly - 5];
		                    regex = check ? !this.beforeFunctionExpression(check) : true;
		                }
		                break;
		        }
		        return regex;
		    };
		    Reader.prototype.push = function (token) {
		        if (token.type === 7 /* Punctuator */ || token.type === 4 /* Keyword */) {
		            if (token.value === '{') {
		                this.curly = this.values.length;
		            }
		            else if (token.value === '(') {
		                this.paren = this.values.length;
		            }
		            this.values.push(token.value);
		        }
		        else {
		            this.values.push(null);
		        }
		    };
		    return Reader;
		}());
		var Tokenizer = (function () {
		    function Tokenizer(code, config) {
		        this.errorHandler = new error_handler_1.ErrorHandler();
		        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;
		        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
		        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;
		        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;
		        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;
		        this.buffer = [];
		        this.reader = new Reader();
		    }
		    Tokenizer.prototype.errors = function () {
		        return this.errorHandler.errors;
		    };
		    Tokenizer.prototype.getNextToken = function () {
		        if (this.buffer.length === 0) {
		            var comments = this.scanner.scanComments();
		            if (this.scanner.trackComment) {
		                for (var i = 0; i < comments.length; ++i) {
		                    var e = comments[i];
		                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
		                    var comment = {
		                        type: e.multiLine ? 'BlockComment' : 'LineComment',
		                        value: value
		                    };
		                    if (this.trackRange) {
		                        comment.range = e.range;
		                    }
		                    if (this.trackLoc) {
		                        comment.loc = e.loc;
		                    }
		                    this.buffer.push(comment);
		                }
		            }
		            if (!this.scanner.eof()) {
		                var loc = void 0;
		                if (this.trackLoc) {
		                    loc = {
		                        start: {
		                            line: this.scanner.lineNumber,
		                            column: this.scanner.index - this.scanner.lineStart
		                        },
		                        end: {}
		                    };
		                }
		                var startRegex = (this.scanner.source[this.scanner.index] === '/') && this.reader.isRegexStart();
		                var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();
		                this.reader.push(token);
		                var entry = {
		                    type: token_1.TokenName[token.type],
		                    value: this.scanner.source.slice(token.start, token.end)
		                };
		                if (this.trackRange) {
		                    entry.range = [token.start, token.end];
		                }
		                if (this.trackLoc) {
		                    loc.end = {
		                        line: this.scanner.lineNumber,
		                        column: this.scanner.index - this.scanner.lineStart
		                    };
		                    entry.loc = loc;
		                }
		                if (token.type === 9 /* RegularExpression */) {
		                    var pattern = token.pattern;
		                    var flags = token.flags;
		                    entry.regex = { pattern: pattern, flags: flags };
		                }
		                this.buffer.push(entry);
		            }
		        }
		        return this.buffer.shift();
		    };
		    return Tokenizer;
		}());
		exports.Tokenizer = Tokenizer;


	/***/ }
	/******/ ])
	});
	}(esprima));

	Object.defineProperty(esprima$1, "__esModule", { value: true });
	esprima$1.parse = void 0;
	// This module is suitable for passing as options.parser when calling
	// recast.parse to process ECMAScript code with Esprima:
	//
	//   const ast = recast.parse(source, {
	//     parser: require("recast/parsers/esprima")
	//   });
	//
	var util_1$5 = util$r;
	function parse$h(source, options) {
	    var comments = [];
	    var ast = esprima.exports.parse(source, {
	        loc: true,
	        locations: true,
	        comment: true,
	        onComment: comments,
	        range: util_1$5.getOption(options, "range", false),
	        tolerant: util_1$5.getOption(options, "tolerant", true),
	        tokens: true,
	        jsx: util_1$5.getOption(options, "jsx", false)
	    });
	    if (!Array.isArray(ast.comments)) {
	        ast.comments = comments;
	    }
	    return ast;
	}
	esprima$1.parse = parse$h;

	Object.defineProperty(options$3, "__esModule", { value: true });
	options$3.normalize = void 0;
	var defaults = {
	    parser: esprima$1,
	    tabWidth: 4,
	    useTabs: false,
	    reuseWhitespace: true,
	    lineTerminator: require$$0__default$1['default'].EOL || "\n",
	    wrapColumn: 74,
	    sourceFileName: null,
	    sourceMapName: null,
	    sourceRoot: null,
	    inputSourceMap: null,
	    range: false,
	    tolerant: true,
	    quote: null,
	    trailingComma: false,
	    arrayBracketSpacing: false,
	    objectCurlySpacing: true,
	    arrowParensAlways: false,
	    flowObjectCommas: true,
	    tokens: true,
	};
	var hasOwn$1 = defaults.hasOwnProperty;
	// Copy options and fill in default values.
	function normalize$2(opts) {
	    var options = opts || defaults;
	    function get(key) {
	        return hasOwn$1.call(options, key) ? options[key] : defaults[key];
	    }
	    return {
	        tabWidth: +get("tabWidth"),
	        useTabs: !!get("useTabs"),
	        reuseWhitespace: !!get("reuseWhitespace"),
	        lineTerminator: get("lineTerminator"),
	        wrapColumn: Math.max(get("wrapColumn"), 0),
	        sourceFileName: get("sourceFileName"),
	        sourceMapName: get("sourceMapName"),
	        sourceRoot: get("sourceRoot"),
	        inputSourceMap: get("inputSourceMap"),
	        parser: get("esprima") || get("parser"),
	        range: get("range"),
	        tolerant: get("tolerant"),
	        quote: get("quote"),
	        trailingComma: get("trailingComma"),
	        arrayBracketSpacing: get("arrayBracketSpacing"),
	        objectCurlySpacing: get("objectCurlySpacing"),
	        arrowParensAlways: get("arrowParensAlways"),
	        flowObjectCommas: get("flowObjectCommas"),
	        tokens: !!get("tokens"),
	    };
	}
	options$3.normalize = normalize$2;

	var lines = {};

	var mapping = {};

	Object.defineProperty(mapping, "__esModule", { value: true });
	var tslib_1$7 = require$$0$6;
	var assert_1$6 = tslib_1$7.__importDefault(require$$1__default['default']);
	var util_1$4 = util$r;
	var Mapping$3 = /** @class */ (function () {
	    function Mapping(sourceLines, sourceLoc, targetLoc) {
	        if (targetLoc === void 0) { targetLoc = sourceLoc; }
	        this.sourceLines = sourceLines;
	        this.sourceLoc = sourceLoc;
	        this.targetLoc = targetLoc;
	    }
	    Mapping.prototype.slice = function (lines, start, end) {
	        if (end === void 0) { end = lines.lastPos(); }
	        var sourceLines = this.sourceLines;
	        var sourceLoc = this.sourceLoc;
	        var targetLoc = this.targetLoc;
	        function skip(name) {
	            var sourceFromPos = sourceLoc[name];
	            var targetFromPos = targetLoc[name];
	            var targetToPos = start;
	            if (name === "end") {
	                targetToPos = end;
	            }
	            else {
	                assert_1$6.default.strictEqual(name, "start");
	            }
	            return skipChars(sourceLines, sourceFromPos, lines, targetFromPos, targetToPos);
	        }
	        if (util_1$4.comparePos(start, targetLoc.start) <= 0) {
	            if (util_1$4.comparePos(targetLoc.end, end) <= 0) {
	                targetLoc = {
	                    start: subtractPos(targetLoc.start, start.line, start.column),
	                    end: subtractPos(targetLoc.end, start.line, start.column),
	                };
	                // The sourceLoc can stay the same because the contents of the
	                // targetLoc have not changed.
	            }
	            else if (util_1$4.comparePos(end, targetLoc.start) <= 0) {
	                return null;
	            }
	            else {
	                sourceLoc = {
	                    start: sourceLoc.start,
	                    end: skip("end"),
	                };
	                targetLoc = {
	                    start: subtractPos(targetLoc.start, start.line, start.column),
	                    end: subtractPos(end, start.line, start.column),
	                };
	            }
	        }
	        else {
	            if (util_1$4.comparePos(targetLoc.end, start) <= 0) {
	                return null;
	            }
	            if (util_1$4.comparePos(targetLoc.end, end) <= 0) {
	                sourceLoc = {
	                    start: skip("start"),
	                    end: sourceLoc.end,
	                };
	                targetLoc = {
	                    // Same as subtractPos(start, start.line, start.column):
	                    start: { line: 1, column: 0 },
	                    end: subtractPos(targetLoc.end, start.line, start.column),
	                };
	            }
	            else {
	                sourceLoc = {
	                    start: skip("start"),
	                    end: skip("end"),
	                };
	                targetLoc = {
	                    // Same as subtractPos(start, start.line, start.column):
	                    start: { line: 1, column: 0 },
	                    end: subtractPos(end, start.line, start.column),
	                };
	            }
	        }
	        return new Mapping(this.sourceLines, sourceLoc, targetLoc);
	    };
	    Mapping.prototype.add = function (line, column) {
	        return new Mapping(this.sourceLines, this.sourceLoc, {
	            start: addPos(this.targetLoc.start, line, column),
	            end: addPos(this.targetLoc.end, line, column),
	        });
	    };
	    Mapping.prototype.subtract = function (line, column) {
	        return new Mapping(this.sourceLines, this.sourceLoc, {
	            start: subtractPos(this.targetLoc.start, line, column),
	            end: subtractPos(this.targetLoc.end, line, column),
	        });
	    };
	    Mapping.prototype.indent = function (by, skipFirstLine, noNegativeColumns) {
	        if (skipFirstLine === void 0) { skipFirstLine = false; }
	        if (noNegativeColumns === void 0) { noNegativeColumns = false; }
	        if (by === 0) {
	            return this;
	        }
	        var targetLoc = this.targetLoc;
	        var startLine = targetLoc.start.line;
	        var endLine = targetLoc.end.line;
	        if (skipFirstLine && startLine === 1 && endLine === 1) {
	            return this;
	        }
	        targetLoc = {
	            start: targetLoc.start,
	            end: targetLoc.end,
	        };
	        if (!skipFirstLine || startLine > 1) {
	            var startColumn = targetLoc.start.column + by;
	            targetLoc.start = {
	                line: startLine,
	                column: noNegativeColumns ? Math.max(0, startColumn) : startColumn,
	            };
	        }
	        if (!skipFirstLine || endLine > 1) {
	            var endColumn = targetLoc.end.column + by;
	            targetLoc.end = {
	                line: endLine,
	                column: noNegativeColumns ? Math.max(0, endColumn) : endColumn,
	            };
	        }
	        return new Mapping(this.sourceLines, this.sourceLoc, targetLoc);
	    };
	    return Mapping;
	}());
	mapping.default = Mapping$3;
	function addPos(toPos, line, column) {
	    return {
	        line: toPos.line + line - 1,
	        column: toPos.line === 1 ? toPos.column + column : toPos.column,
	    };
	}
	function subtractPos(fromPos, line, column) {
	    return {
	        line: fromPos.line - line + 1,
	        column: fromPos.line === line ? fromPos.column - column : fromPos.column,
	    };
	}
	function skipChars(sourceLines, sourceFromPos, targetLines, targetFromPos, targetToPos) {
	    var targetComparison = util_1$4.comparePos(targetFromPos, targetToPos);
	    if (targetComparison === 0) {
	        // Trivial case: no characters to skip.
	        return sourceFromPos;
	    }
	    var sourceCursor, targetCursor;
	    if (targetComparison < 0) {
	        // Skipping forward.
	        sourceCursor =
	            sourceLines.skipSpaces(sourceFromPos) || sourceLines.lastPos();
	        targetCursor =
	            targetLines.skipSpaces(targetFromPos) || targetLines.lastPos();
	        var lineDiff = targetToPos.line - targetCursor.line;
	        sourceCursor.line += lineDiff;
	        targetCursor.line += lineDiff;
	        if (lineDiff > 0) {
	            // If jumping to later lines, reset columns to the beginnings
	            // of those lines.
	            sourceCursor.column = 0;
	            targetCursor.column = 0;
	        }
	        else {
	            assert_1$6.default.strictEqual(lineDiff, 0);
	        }
	        while (util_1$4.comparePos(targetCursor, targetToPos) < 0 &&
	            targetLines.nextPos(targetCursor, true)) {
	            assert_1$6.default.ok(sourceLines.nextPos(sourceCursor, true));
	            assert_1$6.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));
	        }
	    }
	    else {
	        // Skipping backward.
	        sourceCursor =
	            sourceLines.skipSpaces(sourceFromPos, true) || sourceLines.firstPos();
	        targetCursor =
	            targetLines.skipSpaces(targetFromPos, true) || targetLines.firstPos();
	        var lineDiff = targetToPos.line - targetCursor.line;
	        sourceCursor.line += lineDiff;
	        targetCursor.line += lineDiff;
	        if (lineDiff < 0) {
	            // If jumping to earlier lines, reset columns to the ends of
	            // those lines.
	            sourceCursor.column = sourceLines.getLineLength(sourceCursor.line);
	            targetCursor.column = targetLines.getLineLength(targetCursor.line);
	        }
	        else {
	            assert_1$6.default.strictEqual(lineDiff, 0);
	        }
	        while (util_1$4.comparePos(targetToPos, targetCursor) < 0 &&
	            targetLines.prevPos(targetCursor, true)) {
	            assert_1$6.default.ok(sourceLines.prevPos(sourceCursor, true));
	            assert_1$6.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));
	        }
	    }
	    return sourceCursor;
	}

	Object.defineProperty(lines, "__esModule", { value: true });
	lines.concat = lines.fromString = lines.countSpaces = lines.Lines = void 0;
	var tslib_1$6 = require$$0$6;
	var assert_1$5 = tslib_1$6.__importDefault(require$$1__default['default']);
	var source_map_1 = tslib_1$6.__importDefault(sourceMap$3);
	var options_1$2 = options$3;
	var util_1$3 = util$r;
	var mapping_1 = tslib_1$6.__importDefault(mapping);
	var Lines = /** @class */ (function () {
	    function Lines(infos, sourceFileName) {
	        if (sourceFileName === void 0) { sourceFileName = null; }
	        this.infos = infos;
	        this.mappings = [];
	        this.cachedSourceMap = null;
	        this.cachedTabWidth = void 0;
	        assert_1$5.default.ok(infos.length > 0);
	        this.length = infos.length;
	        this.name = sourceFileName || null;
	        if (this.name) {
	            this.mappings.push(new mapping_1.default(this, {
	                start: this.firstPos(),
	                end: this.lastPos(),
	            }));
	        }
	    }
	    Lines.prototype.toString = function (options) {
	        return this.sliceString(this.firstPos(), this.lastPos(), options);
	    };
	    Lines.prototype.getSourceMap = function (sourceMapName, sourceRoot) {
	        if (!sourceMapName) {
	            // Although we could make up a name or generate an anonymous
	            // source map, instead we assume that any consumer who does not
	            // provide a name does not actually want a source map.
	            return null;
	        }
	        var targetLines = this;
	        function updateJSON(json) {
	            json = json || {};
	            json.file = sourceMapName;
	            if (sourceRoot) {
	                json.sourceRoot = sourceRoot;
	            }
	            return json;
	        }
	        if (targetLines.cachedSourceMap) {
	            // Since Lines objects are immutable, we can reuse any source map
	            // that was previously generated. Nevertheless, we return a new
	            // JSON object here to protect the cached source map from outside
	            // modification.
	            return updateJSON(targetLines.cachedSourceMap.toJSON());
	        }
	        var smg = new source_map_1.default.SourceMapGenerator(updateJSON());
	        var sourcesToContents = {};
	        targetLines.mappings.forEach(function (mapping) {
	            var sourceCursor = mapping.sourceLines.skipSpaces(mapping.sourceLoc.start) ||
	                mapping.sourceLines.lastPos();
	            var targetCursor = targetLines.skipSpaces(mapping.targetLoc.start) ||
	                targetLines.lastPos();
	            while (util_1$3.comparePos(sourceCursor, mapping.sourceLoc.end) < 0 &&
	                util_1$3.comparePos(targetCursor, mapping.targetLoc.end) < 0) {
	                var sourceChar = mapping.sourceLines.charAt(sourceCursor);
	                var targetChar = targetLines.charAt(targetCursor);
	                assert_1$5.default.strictEqual(sourceChar, targetChar);
	                var sourceName = mapping.sourceLines.name;
	                // Add mappings one character at a time for maximum resolution.
	                smg.addMapping({
	                    source: sourceName,
	                    original: { line: sourceCursor.line, column: sourceCursor.column },
	                    generated: { line: targetCursor.line, column: targetCursor.column },
	                });
	                if (!hasOwn.call(sourcesToContents, sourceName)) {
	                    var sourceContent = mapping.sourceLines.toString();
	                    smg.setSourceContent(sourceName, sourceContent);
	                    sourcesToContents[sourceName] = sourceContent;
	                }
	                targetLines.nextPos(targetCursor, true);
	                mapping.sourceLines.nextPos(sourceCursor, true);
	            }
	        });
	        targetLines.cachedSourceMap = smg;
	        return smg.toJSON();
	    };
	    Lines.prototype.bootstrapCharAt = function (pos) {
	        assert_1$5.default.strictEqual(typeof pos, "object");
	        assert_1$5.default.strictEqual(typeof pos.line, "number");
	        assert_1$5.default.strictEqual(typeof pos.column, "number");
	        var line = pos.line, column = pos.column, strings = this.toString().split(lineTerminatorSeqExp), string = strings[line - 1];
	        if (typeof string === "undefined")
	            return "";
	        if (column === string.length && line < strings.length)
	            return "\n";
	        if (column >= string.length)
	            return "";
	        return string.charAt(column);
	    };
	    Lines.prototype.charAt = function (pos) {
	        assert_1$5.default.strictEqual(typeof pos, "object");
	        assert_1$5.default.strictEqual(typeof pos.line, "number");
	        assert_1$5.default.strictEqual(typeof pos.column, "number");
	        var line = pos.line, column = pos.column, secret = this, infos = secret.infos, info = infos[line - 1], c = column;
	        if (typeof info === "undefined" || c < 0)
	            return "";
	        var indent = this.getIndentAt(line);
	        if (c < indent)
	            return " ";
	        c += info.sliceStart - indent;
	        if (c === info.sliceEnd && line < this.length)
	            return "\n";
	        if (c >= info.sliceEnd)
	            return "";
	        return info.line.charAt(c);
	    };
	    Lines.prototype.stripMargin = function (width, skipFirstLine) {
	        if (width === 0)
	            return this;
	        assert_1$5.default.ok(width > 0, "negative margin: " + width);
	        if (skipFirstLine && this.length === 1)
	            return this;
	        var lines = new Lines(this.infos.map(function (info, i) {
	            if (info.line && (i > 0 || !skipFirstLine)) {
	                info = tslib_1$6.__assign(tslib_1$6.__assign({}, info), { indent: Math.max(0, info.indent - width) });
	            }
	            return info;
	        }));
	        if (this.mappings.length > 0) {
	            var newMappings_1 = lines.mappings;
	            assert_1$5.default.strictEqual(newMappings_1.length, 0);
	            this.mappings.forEach(function (mapping) {
	                newMappings_1.push(mapping.indent(width, skipFirstLine, true));
	            });
	        }
	        return lines;
	    };
	    Lines.prototype.indent = function (by) {
	        if (by === 0) {
	            return this;
	        }
	        var lines = new Lines(this.infos.map(function (info) {
	            if (info.line && !info.locked) {
	                info = tslib_1$6.__assign(tslib_1$6.__assign({}, info), { indent: info.indent + by });
	            }
	            return info;
	        }));
	        if (this.mappings.length > 0) {
	            var newMappings_2 = lines.mappings;
	            assert_1$5.default.strictEqual(newMappings_2.length, 0);
	            this.mappings.forEach(function (mapping) {
	                newMappings_2.push(mapping.indent(by));
	            });
	        }
	        return lines;
	    };
	    Lines.prototype.indentTail = function (by) {
	        if (by === 0) {
	            return this;
	        }
	        if (this.length < 2) {
	            return this;
	        }
	        var lines = new Lines(this.infos.map(function (info, i) {
	            if (i > 0 && info.line && !info.locked) {
	                info = tslib_1$6.__assign(tslib_1$6.__assign({}, info), { indent: info.indent + by });
	            }
	            return info;
	        }));
	        if (this.mappings.length > 0) {
	            var newMappings_3 = lines.mappings;
	            assert_1$5.default.strictEqual(newMappings_3.length, 0);
	            this.mappings.forEach(function (mapping) {
	                newMappings_3.push(mapping.indent(by, true));
	            });
	        }
	        return lines;
	    };
	    Lines.prototype.lockIndentTail = function () {
	        if (this.length < 2) {
	            return this;
	        }
	        return new Lines(this.infos.map(function (info, i) { return (tslib_1$6.__assign(tslib_1$6.__assign({}, info), { locked: i > 0 })); }));
	    };
	    Lines.prototype.getIndentAt = function (line) {
	        assert_1$5.default.ok(line >= 1, "no line " + line + " (line numbers start from 1)");
	        return Math.max(this.infos[line - 1].indent, 0);
	    };
	    Lines.prototype.guessTabWidth = function () {
	        if (typeof this.cachedTabWidth === "number") {
	            return this.cachedTabWidth;
	        }
	        var counts = []; // Sparse array.
	        var lastIndent = 0;
	        for (var line = 1, last = this.length; line <= last; ++line) {
	            var info = this.infos[line - 1];
	            var sliced = info.line.slice(info.sliceStart, info.sliceEnd);
	            // Whitespace-only lines don't tell us much about the likely tab
	            // width of this code.
	            if (isOnlyWhitespace(sliced)) {
	                continue;
	            }
	            var diff = Math.abs(info.indent - lastIndent);
	            counts[diff] = ~~counts[diff] + 1;
	            lastIndent = info.indent;
	        }
	        var maxCount = -1;
	        var result = 2;
	        for (var tabWidth = 1; tabWidth < counts.length; tabWidth += 1) {
	            if (hasOwn.call(counts, tabWidth) && counts[tabWidth] > maxCount) {
	                maxCount = counts[tabWidth];
	                result = tabWidth;
	            }
	        }
	        return (this.cachedTabWidth = result);
	    };
	    // Determine if the list of lines has a first line that starts with a //
	    // or /* comment. If this is the case, the code may need to be wrapped in
	    // parens to avoid ASI issues.
	    Lines.prototype.startsWithComment = function () {
	        if (this.infos.length === 0) {
	            return false;
	        }
	        var firstLineInfo = this.infos[0], sliceStart = firstLineInfo.sliceStart, sliceEnd = firstLineInfo.sliceEnd, firstLine = firstLineInfo.line.slice(sliceStart, sliceEnd).trim();
	        return (firstLine.length === 0 ||
	            firstLine.slice(0, 2) === "//" ||
	            firstLine.slice(0, 2) === "/*");
	    };
	    Lines.prototype.isOnlyWhitespace = function () {
	        return isOnlyWhitespace(this.toString());
	    };
	    Lines.prototype.isPrecededOnlyByWhitespace = function (pos) {
	        var info = this.infos[pos.line - 1];
	        var indent = Math.max(info.indent, 0);
	        var diff = pos.column - indent;
	        if (diff <= 0) {
	            // If pos.column does not exceed the indentation amount, then
	            // there must be only whitespace before it.
	            return true;
	        }
	        var start = info.sliceStart;
	        var end = Math.min(start + diff, info.sliceEnd);
	        var prefix = info.line.slice(start, end);
	        return isOnlyWhitespace(prefix);
	    };
	    Lines.prototype.getLineLength = function (line) {
	        var info = this.infos[line - 1];
	        return this.getIndentAt(line) + info.sliceEnd - info.sliceStart;
	    };
	    Lines.prototype.nextPos = function (pos, skipSpaces) {
	        if (skipSpaces === void 0) { skipSpaces = false; }
	        var l = Math.max(pos.line, 0), c = Math.max(pos.column, 0);
	        if (c < this.getLineLength(l)) {
	            pos.column += 1;
	            return skipSpaces ? !!this.skipSpaces(pos, false, true) : true;
	        }
	        if (l < this.length) {
	            pos.line += 1;
	            pos.column = 0;
	            return skipSpaces ? !!this.skipSpaces(pos, false, true) : true;
	        }
	        return false;
	    };
	    Lines.prototype.prevPos = function (pos, skipSpaces) {
	        if (skipSpaces === void 0) { skipSpaces = false; }
	        var l = pos.line, c = pos.column;
	        if (c < 1) {
	            l -= 1;
	            if (l < 1)
	                return false;
	            c = this.getLineLength(l);
	        }
	        else {
	            c = Math.min(c - 1, this.getLineLength(l));
	        }
	        pos.line = l;
	        pos.column = c;
	        return skipSpaces ? !!this.skipSpaces(pos, true, true) : true;
	    };
	    Lines.prototype.firstPos = function () {
	        // Trivial, but provided for completeness.
	        return { line: 1, column: 0 };
	    };
	    Lines.prototype.lastPos = function () {
	        return {
	            line: this.length,
	            column: this.getLineLength(this.length),
	        };
	    };
	    Lines.prototype.skipSpaces = function (pos, backward, modifyInPlace) {
	        if (backward === void 0) { backward = false; }
	        if (modifyInPlace === void 0) { modifyInPlace = false; }
	        if (pos) {
	            pos = modifyInPlace
	                ? pos
	                : {
	                    line: pos.line,
	                    column: pos.column,
	                };
	        }
	        else if (backward) {
	            pos = this.lastPos();
	        }
	        else {
	            pos = this.firstPos();
	        }
	        if (backward) {
	            while (this.prevPos(pos)) {
	                if (!isOnlyWhitespace(this.charAt(pos)) && this.nextPos(pos)) {
	                    return pos;
	                }
	            }
	            return null;
	        }
	        else {
	            while (isOnlyWhitespace(this.charAt(pos))) {
	                if (!this.nextPos(pos)) {
	                    return null;
	                }
	            }
	            return pos;
	        }
	    };
	    Lines.prototype.trimLeft = function () {
	        var pos = this.skipSpaces(this.firstPos(), false, true);
	        return pos ? this.slice(pos) : emptyLines;
	    };
	    Lines.prototype.trimRight = function () {
	        var pos = this.skipSpaces(this.lastPos(), true, true);
	        return pos ? this.slice(this.firstPos(), pos) : emptyLines;
	    };
	    Lines.prototype.trim = function () {
	        var start = this.skipSpaces(this.firstPos(), false, true);
	        if (start === null) {
	            return emptyLines;
	        }
	        var end = this.skipSpaces(this.lastPos(), true, true);
	        if (end === null) {
	            return emptyLines;
	        }
	        return this.slice(start, end);
	    };
	    Lines.prototype.eachPos = function (callback, startPos, skipSpaces) {
	        if (startPos === void 0) { startPos = this.firstPos(); }
	        if (skipSpaces === void 0) { skipSpaces = false; }
	        var pos = this.firstPos();
	        if (startPos) {
	            (pos.line = startPos.line), (pos.column = startPos.column);
	        }
	        if (skipSpaces && !this.skipSpaces(pos, false, true)) {
	            return; // Encountered nothing but spaces.
	        }
	        do
	            callback.call(this, pos);
	        while (this.nextPos(pos, skipSpaces));
	    };
	    Lines.prototype.bootstrapSlice = function (start, end) {
	        var strings = this.toString()
	            .split(lineTerminatorSeqExp)
	            .slice(start.line - 1, end.line);
	        if (strings.length > 0) {
	            strings.push(strings.pop().slice(0, end.column));
	            strings[0] = strings[0].slice(start.column);
	        }
	        return fromString(strings.join("\n"));
	    };
	    Lines.prototype.slice = function (start, end) {
	        if (!end) {
	            if (!start) {
	                // The client seems to want a copy of this Lines object, but
	                // Lines objects are immutable, so it's perfectly adequate to
	                // return the same object.
	                return this;
	            }
	            // Slice to the end if no end position was provided.
	            end = this.lastPos();
	        }
	        if (!start) {
	            throw new Error("cannot slice with end but not start");
	        }
	        var sliced = this.infos.slice(start.line - 1, end.line);
	        if (start.line === end.line) {
	            sliced[0] = sliceInfo(sliced[0], start.column, end.column);
	        }
	        else {
	            assert_1$5.default.ok(start.line < end.line);
	            sliced[0] = sliceInfo(sliced[0], start.column);
	            sliced.push(sliceInfo(sliced.pop(), 0, end.column));
	        }
	        var lines = new Lines(sliced);
	        if (this.mappings.length > 0) {
	            var newMappings_4 = lines.mappings;
	            assert_1$5.default.strictEqual(newMappings_4.length, 0);
	            this.mappings.forEach(function (mapping) {
	                var sliced = mapping.slice(this, start, end);
	                if (sliced) {
	                    newMappings_4.push(sliced);
	                }
	            }, this);
	        }
	        return lines;
	    };
	    Lines.prototype.bootstrapSliceString = function (start, end, options) {
	        return this.slice(start, end).toString(options);
	    };
	    Lines.prototype.sliceString = function (start, end, options) {
	        if (start === void 0) { start = this.firstPos(); }
	        if (end === void 0) { end = this.lastPos(); }
	        var _a = options_1$2.normalize(options), tabWidth = _a.tabWidth, useTabs = _a.useTabs, reuseWhitespace = _a.reuseWhitespace, lineTerminator = _a.lineTerminator;
	        var parts = [];
	        for (var line = start.line; line <= end.line; ++line) {
	            var info = this.infos[line - 1];
	            if (line === start.line) {
	                if (line === end.line) {
	                    info = sliceInfo(info, start.column, end.column);
	                }
	                else {
	                    info = sliceInfo(info, start.column);
	                }
	            }
	            else if (line === end.line) {
	                info = sliceInfo(info, 0, end.column);
	            }
	            var indent = Math.max(info.indent, 0);
	            var before_1 = info.line.slice(0, info.sliceStart);
	            if (reuseWhitespace &&
	                isOnlyWhitespace(before_1) &&
	                countSpaces(before_1, tabWidth) === indent) {
	                // Reuse original spaces if the indentation is correct.
	                parts.push(info.line.slice(0, info.sliceEnd));
	                continue;
	            }
	            var tabs = 0;
	            var spaces = indent;
	            if (useTabs) {
	                tabs = Math.floor(indent / tabWidth);
	                spaces -= tabs * tabWidth;
	            }
	            var result = "";
	            if (tabs > 0) {
	                result += new Array(tabs + 1).join("\t");
	            }
	            if (spaces > 0) {
	                result += new Array(spaces + 1).join(" ");
	            }
	            result += info.line.slice(info.sliceStart, info.sliceEnd);
	            parts.push(result);
	        }
	        return parts.join(lineTerminator);
	    };
	    Lines.prototype.isEmpty = function () {
	        return this.length < 2 && this.getLineLength(1) < 1;
	    };
	    Lines.prototype.join = function (elements) {
	        var separator = this;
	        var infos = [];
	        var mappings = [];
	        var prevInfo;
	        function appendLines(linesOrNull) {
	            if (linesOrNull === null) {
	                return;
	            }
	            if (prevInfo) {
	                var info = linesOrNull.infos[0];
	                var indent = new Array(info.indent + 1).join(" ");
	                var prevLine_1 = infos.length;
	                var prevColumn_1 = Math.max(prevInfo.indent, 0) +
	                    prevInfo.sliceEnd -
	                    prevInfo.sliceStart;
	                prevInfo.line =
	                    prevInfo.line.slice(0, prevInfo.sliceEnd) +
	                        indent +
	                        info.line.slice(info.sliceStart, info.sliceEnd);
	                // If any part of a line is indentation-locked, the whole line
	                // will be indentation-locked.
	                prevInfo.locked = prevInfo.locked || info.locked;
	                prevInfo.sliceEnd = prevInfo.line.length;
	                if (linesOrNull.mappings.length > 0) {
	                    linesOrNull.mappings.forEach(function (mapping) {
	                        mappings.push(mapping.add(prevLine_1, prevColumn_1));
	                    });
	                }
	            }
	            else if (linesOrNull.mappings.length > 0) {
	                mappings.push.apply(mappings, linesOrNull.mappings);
	            }
	            linesOrNull.infos.forEach(function (info, i) {
	                if (!prevInfo || i > 0) {
	                    prevInfo = tslib_1$6.__assign({}, info);
	                    infos.push(prevInfo);
	                }
	            });
	        }
	        function appendWithSeparator(linesOrNull, i) {
	            if (i > 0)
	                appendLines(separator);
	            appendLines(linesOrNull);
	        }
	        elements
	            .map(function (elem) {
	            var lines = fromString(elem);
	            if (lines.isEmpty())
	                return null;
	            return lines;
	        })
	            .forEach(function (linesOrNull, i) {
	            if (separator.isEmpty()) {
	                appendLines(linesOrNull);
	            }
	            else {
	                appendWithSeparator(linesOrNull, i);
	            }
	        });
	        if (infos.length < 1)
	            return emptyLines;
	        var lines = new Lines(infos);
	        lines.mappings = mappings;
	        return lines;
	    };
	    Lines.prototype.concat = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var list = [this];
	        list.push.apply(list, args);
	        assert_1$5.default.strictEqual(list.length, args.length + 1);
	        return emptyLines.join(list);
	    };
	    return Lines;
	}());
	lines.Lines = Lines;
	var fromStringCache = {};
	var hasOwn = fromStringCache.hasOwnProperty;
	var maxCacheKeyLen = 10;
	function countSpaces(spaces, tabWidth) {
	    var count = 0;
	    var len = spaces.length;
	    for (var i = 0; i < len; ++i) {
	        switch (spaces.charCodeAt(i)) {
	            case 9: {
	                // '\t'
	                assert_1$5.default.strictEqual(typeof tabWidth, "number");
	                assert_1$5.default.ok(tabWidth > 0);
	                var next = Math.ceil(count / tabWidth) * tabWidth;
	                if (next === count) {
	                    count += tabWidth;
	                }
	                else {
	                    count = next;
	                }
	                break;
	            }
	            case 11: // '\v'
	            case 12: // '\f'
	            case 13: // '\r'
	            case 0xfeff: // zero-width non-breaking space
	                // These characters contribute nothing to indentation.
	                break;
	            case 32: // ' '
	            default:
	                // Treat all other whitespace like ' '.
	                count += 1;
	                break;
	        }
	    }
	    return count;
	}
	lines.countSpaces = countSpaces;
	var leadingSpaceExp = /^\s*/;
	// As specified here: http://www.ecma-international.org/ecma-262/6.0/#sec-line-terminators
	var lineTerminatorSeqExp = /\u000D\u000A|\u000D(?!\u000A)|\u000A|\u2028|\u2029/;
	/**
	 * @param {Object} options - Options object that configures printing.
	 */
	function fromString(string, options) {
	    if (string instanceof Lines)
	        return string;
	    string += "";
	    var tabWidth = options && options.tabWidth;
	    var tabless = string.indexOf("\t") < 0;
	    var cacheable = !options && tabless && string.length <= maxCacheKeyLen;
	    assert_1$5.default.ok(tabWidth || tabless, "No tab width specified but encountered tabs in string\n" + string);
	    if (cacheable && hasOwn.call(fromStringCache, string))
	        return fromStringCache[string];
	    var lines = new Lines(string.split(lineTerminatorSeqExp).map(function (line) {
	        // TODO: handle null exec result
	        var spaces = leadingSpaceExp.exec(line)[0];
	        return {
	            line: line,
	            indent: countSpaces(spaces, tabWidth),
	            // Boolean indicating whether this line can be reindented.
	            locked: false,
	            sliceStart: spaces.length,
	            sliceEnd: line.length,
	        };
	    }), options_1$2.normalize(options).sourceFileName);
	    if (cacheable)
	        fromStringCache[string] = lines;
	    return lines;
	}
	lines.fromString = fromString;
	function isOnlyWhitespace(string) {
	    return !/\S/.test(string);
	}
	function sliceInfo(info, startCol, endCol) {
	    var sliceStart = info.sliceStart;
	    var sliceEnd = info.sliceEnd;
	    var indent = Math.max(info.indent, 0);
	    var lineLength = indent + sliceEnd - sliceStart;
	    if (typeof endCol === "undefined") {
	        endCol = lineLength;
	    }
	    startCol = Math.max(startCol, 0);
	    endCol = Math.min(endCol, lineLength);
	    endCol = Math.max(endCol, startCol);
	    if (endCol < indent) {
	        indent = endCol;
	        sliceEnd = sliceStart;
	    }
	    else {
	        sliceEnd -= lineLength - endCol;
	    }
	    lineLength = endCol;
	    lineLength -= startCol;
	    if (startCol < indent) {
	        indent -= startCol;
	    }
	    else {
	        startCol -= indent;
	        indent = 0;
	        sliceStart += startCol;
	    }
	    assert_1$5.default.ok(indent >= 0);
	    assert_1$5.default.ok(sliceStart <= sliceEnd);
	    assert_1$5.default.strictEqual(lineLength, indent + sliceEnd - sliceStart);
	    if (info.indent === indent &&
	        info.sliceStart === sliceStart &&
	        info.sliceEnd === sliceEnd) {
	        return info;
	    }
	    return {
	        line: info.line,
	        indent: indent,
	        // A destructive slice always unlocks indentation.
	        locked: false,
	        sliceStart: sliceStart,
	        sliceEnd: sliceEnd,
	    };
	}
	function concat(elements) {
	    return emptyLines.join(elements);
	}
	lines.concat = concat;
	// The emptyLines object needs to be created all the way down here so that
	// Lines.prototype will be fully populated.
	var emptyLines = fromString("");

	var comments$1 = {};

	Object.defineProperty(comments$1, "__esModule", { value: true });
	comments$1.printComments = comments$1.attach = void 0;
	var tslib_1$5 = require$$0$6;
	var assert_1$4 = tslib_1$5.__importDefault(require$$1__default['default']);
	var types$7 = tslib_1$5.__importStar(main);
	var n$3 = types$7.namedTypes;
	var isArray$5 = types$7.builtInTypes.array;
	var isObject$5 = types$7.builtInTypes.object;
	var lines_1$2 = lines;
	var util_1$2 = util$r;
	var childNodesCache = new WeakMap();
	// TODO Move a non-caching implementation of this function into ast-types,
	// and implement a caching wrapper function here.
	function getSortedChildNodes(node, lines, resultArray) {
	    if (!node) {
	        return resultArray;
	    }
	    // The .loc checks below are sensitive to some of the problems that
	    // are fixed by this utility function. Specifically, if it decides to
	    // set node.loc to null, indicating that the node's .loc information
	    // is unreliable, then we don't want to add node to the resultArray.
	    util_1$2.fixFaultyLocations(node, lines);
	    if (resultArray) {
	        if (n$3.Node.check(node) && n$3.SourceLocation.check(node.loc)) {
	            // This reverse insertion sort almost always takes constant
	            // time because we almost always (maybe always?) append the
	            // nodes in order anyway.
	            var i = resultArray.length - 1;
	            for (; i >= 0; --i) {
	                var child = resultArray[i];
	                if (child &&
	                    child.loc &&
	                    util_1$2.comparePos(child.loc.end, node.loc.start) <= 0) {
	                    break;
	                }
	            }
	            resultArray.splice(i + 1, 0, node);
	            return resultArray;
	        }
	    }
	    else {
	        var childNodes = childNodesCache.get(node);
	        if (childNodes) {
	            return childNodes;
	        }
	    }
	    var names;
	    if (isArray$5.check(node)) {
	        names = Object.keys(node);
	    }
	    else if (isObject$5.check(node)) {
	        names = types$7.getFieldNames(node);
	    }
	    else {
	        return resultArray;
	    }
	    if (!resultArray) {
	        childNodesCache.set(node, (resultArray = []));
	    }
	    for (var i = 0, nameCount = names.length; i < nameCount; ++i) {
	        getSortedChildNodes(node[names[i]], lines, resultArray);
	    }
	    return resultArray;
	}
	// As efficiently as possible, decorate the comment object with
	// .precedingNode, .enclosingNode, and/or .followingNode properties, at
	// least one of which is guaranteed to be defined.
	function decorateComment(node, comment, lines) {
	    var childNodes = getSortedChildNodes(node, lines);
	    // Time to dust off the old binary search robes and wizard hat.
	    var left = 0;
	    var right = childNodes && childNodes.length;
	    var precedingNode;
	    var followingNode;
	    while (typeof right === "number" && left < right) {
	        var middle = (left + right) >> 1;
	        var child = childNodes[middle];
	        if (util_1$2.comparePos(child.loc.start, comment.loc.start) <= 0 &&
	            util_1$2.comparePos(comment.loc.end, child.loc.end) <= 0) {
	            // The comment is completely contained by this child node.
	            decorateComment((comment.enclosingNode = child), comment, lines);
	            return; // Abandon the binary search at this level.
	        }
	        if (util_1$2.comparePos(child.loc.end, comment.loc.start) <= 0) {
	            // This child node falls completely before the comment.
	            // Because we will never consider this node or any nodes
	            // before it again, this node must be the closest preceding
	            // node we have encountered so far.
	            precedingNode = child;
	            left = middle + 1;
	            continue;
	        }
	        if (util_1$2.comparePos(comment.loc.end, child.loc.start) <= 0) {
	            // This child node falls completely after the comment.
	            // Because we will never consider this node or any nodes after
	            // it again, this node must be the closest following node we
	            // have encountered so far.
	            followingNode = child;
	            right = middle;
	            continue;
	        }
	        throw new Error("Comment location overlaps with node location");
	    }
	    if (precedingNode) {
	        comment.precedingNode = precedingNode;
	    }
	    if (followingNode) {
	        comment.followingNode = followingNode;
	    }
	}
	function attach(comments, ast, lines) {
	    if (!isArray$5.check(comments)) {
	        return;
	    }
	    var tiesToBreak = [];
	    comments.forEach(function (comment) {
	        comment.loc.lines = lines;
	        decorateComment(ast, comment, lines);
	        var pn = comment.precedingNode;
	        var en = comment.enclosingNode;
	        var fn = comment.followingNode;
	        if (pn && fn) {
	            var tieCount = tiesToBreak.length;
	            if (tieCount > 0) {
	                var lastTie = tiesToBreak[tieCount - 1];
	                assert_1$4.default.strictEqual(lastTie.precedingNode === comment.precedingNode, lastTie.followingNode === comment.followingNode);
	                if (lastTie.followingNode !== comment.followingNode) {
	                    breakTies(tiesToBreak, lines);
	                }
	            }
	            tiesToBreak.push(comment);
	        }
	        else if (pn) {
	            // No contest: we have a trailing comment.
	            breakTies(tiesToBreak, lines);
	            addTrailingComment(pn, comment);
	        }
	        else if (fn) {
	            // No contest: we have a leading comment.
	            breakTies(tiesToBreak, lines);
	            addLeadingComment(fn, comment);
	        }
	        else if (en) {
	            // The enclosing node has no child nodes at all, so what we
	            // have here is a dangling comment, e.g. [/* crickets */].
	            breakTies(tiesToBreak, lines);
	            addDanglingComment(en, comment);
	        }
	        else {
	            throw new Error("AST contains no nodes at all?");
	        }
	    });
	    breakTies(tiesToBreak, lines);
	    comments.forEach(function (comment) {
	        // These node references were useful for breaking ties, but we
	        // don't need them anymore, and they create cycles in the AST that
	        // may lead to infinite recursion if we don't delete them here.
	        delete comment.precedingNode;
	        delete comment.enclosingNode;
	        delete comment.followingNode;
	    });
	}
	comments$1.attach = attach;
	function breakTies(tiesToBreak, lines) {
	    var tieCount = tiesToBreak.length;
	    if (tieCount === 0) {
	        return;
	    }
	    var pn = tiesToBreak[0].precedingNode;
	    var fn = tiesToBreak[0].followingNode;
	    var gapEndPos = fn.loc.start;
	    // Iterate backwards through tiesToBreak, examining the gaps
	    // between the tied comments. In order to qualify as leading, a
	    // comment must be separated from fn by an unbroken series of
	    // whitespace-only gaps (or other comments).
	    var indexOfFirstLeadingComment = tieCount;
	    var comment;
	    for (; indexOfFirstLeadingComment > 0; --indexOfFirstLeadingComment) {
	        comment = tiesToBreak[indexOfFirstLeadingComment - 1];
	        assert_1$4.default.strictEqual(comment.precedingNode, pn);
	        assert_1$4.default.strictEqual(comment.followingNode, fn);
	        var gap = lines.sliceString(comment.loc.end, gapEndPos);
	        if (/\S/.test(gap)) {
	            // The gap string contained something other than whitespace.
	            break;
	        }
	        gapEndPos = comment.loc.start;
	    }
	    while (indexOfFirstLeadingComment <= tieCount &&
	        (comment = tiesToBreak[indexOfFirstLeadingComment]) &&
	        // If the comment is a //-style comment and indented more
	        // deeply than the node itself, reconsider it as trailing.
	        (comment.type === "Line" || comment.type === "CommentLine") &&
	        comment.loc.start.column > fn.loc.start.column) {
	        ++indexOfFirstLeadingComment;
	    }
	    tiesToBreak.forEach(function (comment, i) {
	        if (i < indexOfFirstLeadingComment) {
	            addTrailingComment(pn, comment);
	        }
	        else {
	            addLeadingComment(fn, comment);
	        }
	    });
	    tiesToBreak.length = 0;
	}
	function addCommentHelper(node, comment) {
	    var comments = node.comments || (node.comments = []);
	    comments.push(comment);
	}
	function addLeadingComment(node, comment) {
	    comment.leading = true;
	    comment.trailing = false;
	    addCommentHelper(node, comment);
	}
	function addDanglingComment(node, comment) {
	    comment.leading = false;
	    comment.trailing = false;
	    addCommentHelper(node, comment);
	}
	function addTrailingComment(node, comment) {
	    comment.leading = false;
	    comment.trailing = true;
	    addCommentHelper(node, comment);
	}
	function printLeadingComment(commentPath, print) {
	    var comment = commentPath.getValue();
	    n$3.Comment.assert(comment);
	    var loc = comment.loc;
	    var lines = loc && loc.lines;
	    var parts = [print(commentPath)];
	    if (comment.trailing) {
	        // When we print trailing comments as leading comments, we don't
	        // want to bring any trailing spaces along.
	        parts.push("\n");
	    }
	    else if (lines instanceof lines_1$2.Lines) {
	        var trailingSpace = lines.slice(loc.end, lines.skipSpaces(loc.end) || lines.lastPos());
	        if (trailingSpace.length === 1) {
	            // If the trailing space contains no newlines, then we want to
	            // preserve it exactly as we found it.
	            parts.push(trailingSpace);
	        }
	        else {
	            // If the trailing space contains newlines, then replace it
	            // with just that many newlines, with all other spaces removed.
	            parts.push(new Array(trailingSpace.length).join("\n"));
	        }
	    }
	    else {
	        parts.push("\n");
	    }
	    return lines_1$2.concat(parts);
	}
	function printTrailingComment(commentPath, print) {
	    var comment = commentPath.getValue(commentPath);
	    n$3.Comment.assert(comment);
	    var loc = comment.loc;
	    var lines = loc && loc.lines;
	    var parts = [];
	    if (lines instanceof lines_1$2.Lines) {
	        var fromPos = lines.skipSpaces(loc.start, true) || lines.firstPos();
	        var leadingSpace = lines.slice(fromPos, loc.start);
	        if (leadingSpace.length === 1) {
	            // If the leading space contains no newlines, then we want to
	            // preserve it exactly as we found it.
	            parts.push(leadingSpace);
	        }
	        else {
	            // If the leading space contains newlines, then replace it
	            // with just that many newlines, sans all other spaces.
	            parts.push(new Array(leadingSpace.length).join("\n"));
	        }
	    }
	    parts.push(print(commentPath));
	    return lines_1$2.concat(parts);
	}
	function printComments(path, print) {
	    var value = path.getValue();
	    var innerLines = print(path);
	    var comments = n$3.Node.check(value) && types$7.getFieldValue(value, "comments");
	    if (!comments || comments.length === 0) {
	        return innerLines;
	    }
	    var leadingParts = [];
	    var trailingParts = [innerLines];
	    path.each(function (commentPath) {
	        var comment = commentPath.getValue();
	        var leading = types$7.getFieldValue(comment, "leading");
	        var trailing = types$7.getFieldValue(comment, "trailing");
	        if (leading ||
	            (trailing &&
	                !(n$3.Statement.check(value) ||
	                    comment.type === "Block" ||
	                    comment.type === "CommentBlock"))) {
	            leadingParts.push(printLeadingComment(commentPath, print));
	        }
	        else if (trailing) {
	            trailingParts.push(printTrailingComment(commentPath, print));
	        }
	    }, "comments");
	    leadingParts.push.apply(leadingParts, trailingParts);
	    return lines_1$2.concat(leadingParts);
	}
	comments$1.printComments = printComments;

	Object.defineProperty(parser$3, "__esModule", { value: true });
	parser$3.parse = void 0;
	var tslib_1$4 = require$$0$6;
	var assert_1$3 = tslib_1$4.__importDefault(require$$1__default['default']);
	var types$6 = tslib_1$4.__importStar(main);
	var b = types$6.builders;
	var isObject$4 = types$6.builtInTypes.object;
	var isArray$4 = types$6.builtInTypes.array;
	var options_1$1 = options$3;
	var lines_1$1 = lines;
	var comments_1$1 = comments$1;
	var util$k = tslib_1$4.__importStar(util$r);
	function parse$g(source, options) {
	    options = options_1$1.normalize(options);
	    var lines = lines_1$1.fromString(source, options);
	    var sourceWithoutTabs = lines.toString({
	        tabWidth: options.tabWidth,
	        reuseWhitespace: false,
	        useTabs: false,
	    });
	    var comments = [];
	    var ast = options.parser.parse(sourceWithoutTabs, {
	        jsx: true,
	        loc: true,
	        locations: true,
	        range: options.range,
	        comment: true,
	        onComment: comments,
	        tolerant: util$k.getOption(options, "tolerant", true),
	        ecmaVersion: 6,
	        sourceType: util$k.getOption(options, "sourceType", "module"),
	    });
	    // Use ast.tokens if possible, and otherwise fall back to the Esprima
	    // tokenizer. All the preconfigured ../parsers/* expose ast.tokens
	    // automatically, but custom parsers might need additional configuration
	    // to avoid this fallback.
	    var tokens = Array.isArray(ast.tokens)
	        ? ast.tokens
	        : esprima.exports.tokenize(sourceWithoutTabs, {
	            loc: true,
	        });
	    // We will reattach the tokens array to the file object below.
	    delete ast.tokens;
	    // Make sure every token has a token.value string.
	    tokens.forEach(function (token) {
	        if (typeof token.value !== "string") {
	            token.value = lines.sliceString(token.loc.start, token.loc.end);
	        }
	    });
	    if (Array.isArray(ast.comments)) {
	        comments = ast.comments;
	        delete ast.comments;
	    }
	    if (ast.loc) {
	        // If the source was empty, some parsers give loc.{start,end}.line
	        // values of 0, instead of the minimum of 1.
	        util$k.fixFaultyLocations(ast, lines);
	    }
	    else {
	        ast.loc = {
	            start: lines.firstPos(),
	            end: lines.lastPos(),
	        };
	    }
	    ast.loc.lines = lines;
	    ast.loc.indent = 0;
	    var file;
	    var program;
	    if (ast.type === "Program") {
	        program = ast;
	        // In order to ensure we reprint leading and trailing program
	        // comments, wrap the original Program node with a File node. Only
	        // ESTree parsers (Acorn and Esprima) return a Program as the root AST
	        // node. Most other (Babylon-like) parsers return a File.
	        file = b.file(ast, options.sourceFileName || null);
	        file.loc = {
	            start: lines.firstPos(),
	            end: lines.lastPos(),
	            lines: lines,
	            indent: 0,
	        };
	    }
	    else if (ast.type === "File") {
	        file = ast;
	        program = file.program;
	    }
	    // Expose file.tokens unless the caller passed false for options.tokens.
	    if (options.tokens) {
	        file.tokens = tokens;
	    }
	    // Expand the Program's .loc to include all comments (not just those
	    // attached to the Program node, as its children may have comments as
	    // well), since sometimes program.loc.{start,end} will coincide with the
	    // .loc.{start,end} of the first and last *statements*, mistakenly
	    // excluding comments that fall outside that region.
	    var trueProgramLoc = util$k.getTrueLoc({
	        type: program.type,
	        loc: program.loc,
	        body: [],
	        comments: comments,
	    }, lines);
	    program.loc.start = trueProgramLoc.start;
	    program.loc.end = trueProgramLoc.end;
	    // Passing file.program here instead of just file means that initial
	    // comments will be attached to program.body[0] instead of program.
	    comments_1$1.attach(comments, program.body.length ? file.program : file, lines);
	    // Return a copy of the original AST so that any changes made may be
	    // compared to the original.
	    return new TreeCopier(lines, tokens).copy(file);
	}
	parser$3.parse = parse$g;
	var TreeCopier = function TreeCopier(lines, tokens) {
	    assert_1$3.default.ok(this instanceof TreeCopier);
	    this.lines = lines;
	    this.tokens = tokens;
	    this.startTokenIndex = 0;
	    this.endTokenIndex = tokens.length;
	    this.indent = 0;
	    this.seen = new Map();
	};
	var TCp = TreeCopier.prototype;
	TCp.copy = function (node) {
	    if (this.seen.has(node)) {
	        return this.seen.get(node);
	    }
	    if (isArray$4.check(node)) {
	        var copy_1 = new Array(node.length);
	        this.seen.set(node, copy_1);
	        node.forEach(function (item, i) {
	            copy_1[i] = this.copy(item);
	        }, this);
	        return copy_1;
	    }
	    if (!isObject$4.check(node)) {
	        return node;
	    }
	    util$k.fixFaultyLocations(node, this.lines);
	    var copy = Object.create(Object.getPrototypeOf(node), {
	        original: {
	            // Provide a link from the copy to the original.
	            value: node,
	            configurable: false,
	            enumerable: false,
	            writable: true,
	        },
	    });
	    this.seen.set(node, copy);
	    var loc = node.loc;
	    var oldIndent = this.indent;
	    var newIndent = oldIndent;
	    var oldStartTokenIndex = this.startTokenIndex;
	    var oldEndTokenIndex = this.endTokenIndex;
	    if (loc) {
	        // When node is a comment, we set node.loc.indent to
	        // node.loc.start.column so that, when/if we print the comment by
	        // itself, we can strip that much whitespace from the left margin of
	        // the comment. This only really matters for multiline Block comments,
	        // but it doesn't hurt for Line comments.
	        if (node.type === "Block" ||
	            node.type === "Line" ||
	            node.type === "CommentBlock" ||
	            node.type === "CommentLine" ||
	            this.lines.isPrecededOnlyByWhitespace(loc.start)) {
	            newIndent = this.indent = loc.start.column;
	        }
	        // Every node.loc has a reference to the original source lines as well
	        // as a complete list of source tokens.
	        loc.lines = this.lines;
	        loc.tokens = this.tokens;
	        loc.indent = newIndent;
	        // Set loc.start.token and loc.end.token such that
	        // loc.tokens.slice(loc.start.token, loc.end.token) returns a list of
	        // all the tokens that make up this node.
	        this.findTokenRange(loc);
	    }
	    var keys = Object.keys(node);
	    var keyCount = keys.length;
	    for (var i = 0; i < keyCount; ++i) {
	        var key = keys[i];
	        if (key === "loc") {
	            copy[key] = node[key];
	        }
	        else if (key === "tokens" && node.type === "File") {
	            // Preserve file.tokens (uncopied) in case client code cares about
	            // it, even though Recast ignores it when reprinting.
	            copy[key] = node[key];
	        }
	        else {
	            copy[key] = this.copy(node[key]);
	        }
	    }
	    this.indent = oldIndent;
	    this.startTokenIndex = oldStartTokenIndex;
	    this.endTokenIndex = oldEndTokenIndex;
	    return copy;
	};
	// If we didn't have any idea where in loc.tokens to look for tokens
	// contained by this loc, a binary search would be appropriate, but
	// because we maintain this.startTokenIndex and this.endTokenIndex as we
	// traverse the AST, we only need to make small (linear) adjustments to
	// those indexes with each recursive iteration.
	TCp.findTokenRange = function (loc) {
	    // In the unlikely event that loc.tokens[this.startTokenIndex] starts
	    // *after* loc.start, we need to rewind this.startTokenIndex first.
	    while (this.startTokenIndex > 0) {
	        var token = loc.tokens[this.startTokenIndex];
	        if (util$k.comparePos(loc.start, token.loc.start) < 0) {
	            --this.startTokenIndex;
	        }
	        else
	            break;
	    }
	    // In the unlikely event that loc.tokens[this.endTokenIndex - 1] ends
	    // *before* loc.end, we need to fast-forward this.endTokenIndex first.
	    while (this.endTokenIndex < loc.tokens.length) {
	        var token = loc.tokens[this.endTokenIndex];
	        if (util$k.comparePos(token.loc.end, loc.end) < 0) {
	            ++this.endTokenIndex;
	        }
	        else
	            break;
	    }
	    // Increment this.startTokenIndex until we've found the first token
	    // contained by this node.
	    while (this.startTokenIndex < this.endTokenIndex) {
	        var token = loc.tokens[this.startTokenIndex];
	        if (util$k.comparePos(token.loc.start, loc.start) < 0) {
	            ++this.startTokenIndex;
	        }
	        else
	            break;
	    }
	    // Index into loc.tokens of the first token within this node.
	    loc.start.token = this.startTokenIndex;
	    // Decrement this.endTokenIndex until we've found the first token after
	    // this node (not contained by the node).
	    while (this.endTokenIndex > this.startTokenIndex) {
	        var token = loc.tokens[this.endTokenIndex - 1];
	        if (util$k.comparePos(loc.end, token.loc.end) < 0) {
	            --this.endTokenIndex;
	        }
	        else
	            break;
	    }
	    // Index into loc.tokens of the first token *after* this node.
	    // If loc.start.token === loc.end.token, the node contains no tokens,
	    // and the index is that of the next token following this node.
	    loc.end.token = this.endTokenIndex;
	};

	var printer$2 = {};

	var patcher = {};

	var fastPath = {};

	Object.defineProperty(fastPath, "__esModule", { value: true });
	var tslib_1$3 = require$$0$6;
	var assert_1$2 = tslib_1$3.__importDefault(require$$1__default['default']);
	var types$5 = tslib_1$3.__importStar(main);
	var util$j = tslib_1$3.__importStar(util$r);
	var n$2 = types$5.namedTypes;
	var isArray$3 = types$5.builtInTypes.array;
	var isNumber$1 = types$5.builtInTypes.number;
	var PRECEDENCE$1 = {};
	[
	    ["||"],
	    ["&&"],
	    ["|"],
	    ["^"],
	    ["&"],
	    ["==", "===", "!=", "!=="],
	    ["<", ">", "<=", ">=", "in", "instanceof"],
	    [">>", "<<", ">>>"],
	    ["+", "-"],
	    ["*", "/", "%"],
	    ["**"],
	].forEach(function (tier, i) {
	    tier.forEach(function (op) {
	        PRECEDENCE$1[op] = i;
	    });
	});
	var FastPath = function FastPath(value) {
	    assert_1$2.default.ok(this instanceof FastPath);
	    this.stack = [value];
	};
	var FPp = FastPath.prototype;
	// Static convenience function for coercing a value to a FastPath.
	FastPath.from = function (obj) {
	    if (obj instanceof FastPath) {
	        // Return a defensive copy of any existing FastPath instances.
	        return obj.copy();
	    }
	    if (obj instanceof types$5.NodePath) {
	        // For backwards compatibility, unroll NodePath instances into
	        // lightweight FastPath [..., name, value] stacks.
	        var copy = Object.create(FastPath.prototype);
	        var stack = [obj.value];
	        for (var pp = void 0; (pp = obj.parentPath); obj = pp)
	            stack.push(obj.name, pp.value);
	        copy.stack = stack.reverse();
	        return copy;
	    }
	    // Otherwise use obj as the value of the new FastPath instance.
	    return new FastPath(obj);
	};
	FPp.copy = function copy() {
	    var copy = Object.create(FastPath.prototype);
	    copy.stack = this.stack.slice(0);
	    return copy;
	};
	// The name of the current property is always the penultimate element of
	// this.stack, and always a String.
	FPp.getName = function getName() {
	    var s = this.stack;
	    var len = s.length;
	    if (len > 1) {
	        return s[len - 2];
	    }
	    // Since the name is always a string, null is a safe sentinel value to
	    // return if we do not know the name of the (root) value.
	    return null;
	};
	// The value of the current property is always the final element of
	// this.stack.
	FPp.getValue = function getValue() {
	    var s = this.stack;
	    return s[s.length - 1];
	};
	FPp.valueIsDuplicate = function () {
	    var s = this.stack;
	    var valueIndex = s.length - 1;
	    return s.lastIndexOf(s[valueIndex], valueIndex - 1) >= 0;
	};
	function getNodeHelper(path, count) {
	    var s = path.stack;
	    for (var i = s.length - 1; i >= 0; i -= 2) {
	        var value = s[i];
	        if (n$2.Node.check(value) && --count < 0) {
	            return value;
	        }
	    }
	    return null;
	}
	FPp.getNode = function getNode(count) {
	    if (count === void 0) { count = 0; }
	    return getNodeHelper(this, ~~count);
	};
	FPp.getParentNode = function getParentNode(count) {
	    if (count === void 0) { count = 0; }
	    return getNodeHelper(this, ~~count + 1);
	};
	// The length of the stack can be either even or odd, depending on whether
	// or not we have a name for the root value. The difference between the
	// index of the root value and the index of the final value is always
	// even, though, which allows us to return the root value in constant time
	// (i.e. without iterating backwards through the stack).
	FPp.getRootValue = function getRootValue() {
	    var s = this.stack;
	    if (s.length % 2 === 0) {
	        return s[1];
	    }
	    return s[0];
	};
	// Temporarily push properties named by string arguments given after the
	// callback function onto this.stack, then call the callback with a
	// reference to this (modified) FastPath object. Note that the stack will
	// be restored to its original state after the callback is finished, so it
	// is probably a mistake to retain a reference to the path.
	FPp.call = function call(callback /*, name1, name2, ... */) {
	    var s = this.stack;
	    var origLen = s.length;
	    var value = s[origLen - 1];
	    var argc = arguments.length;
	    for (var i = 1; i < argc; ++i) {
	        var name = arguments[i];
	        value = value[name];
	        s.push(name, value);
	    }
	    var result = callback(this);
	    s.length = origLen;
	    return result;
	};
	// Similar to FastPath.prototype.call, except that the value obtained by
	// accessing this.getValue()[name1][name2]... should be array-like. The
	// callback will be called with a reference to this path object for each
	// element of the array.
	FPp.each = function each(callback /*, name1, name2, ... */) {
	    var s = this.stack;
	    var origLen = s.length;
	    var value = s[origLen - 1];
	    var argc = arguments.length;
	    for (var i = 1; i < argc; ++i) {
	        var name = arguments[i];
	        value = value[name];
	        s.push(name, value);
	    }
	    for (var i = 0; i < value.length; ++i) {
	        if (i in value) {
	            s.push(i, value[i]);
	            // If the callback needs to know the value of i, call
	            // path.getName(), assuming path is the parameter name.
	            callback(this);
	            s.length -= 2;
	        }
	    }
	    s.length = origLen;
	};
	// Similar to FastPath.prototype.each, except that the results of the
	// callback function invocations are stored in an array and returned at
	// the end of the iteration.
	FPp.map = function map(callback /*, name1, name2, ... */) {
	    var s = this.stack;
	    var origLen = s.length;
	    var value = s[origLen - 1];
	    var argc = arguments.length;
	    for (var i = 1; i < argc; ++i) {
	        var name = arguments[i];
	        value = value[name];
	        s.push(name, value);
	    }
	    var result = new Array(value.length);
	    for (var i = 0; i < value.length; ++i) {
	        if (i in value) {
	            s.push(i, value[i]);
	            result[i] = callback(this, i);
	            s.length -= 2;
	        }
	    }
	    s.length = origLen;
	    return result;
	};
	// Returns true if the node at the tip of the path is wrapped with
	// parentheses, OR if the only reason the node needed parentheses was that
	// it couldn't be the first expression in the enclosing statement (see
	// FastPath#canBeFirstInStatement), and it has an opening `(` character.
	// For example, the FunctionExpression in `(function(){}())` appears to
	// need parentheses only because it's the first expression in the AST, but
	// since it happens to be preceded by a `(` (which is not apparent from
	// the AST but can be determined using FastPath#getPrevToken), there is no
	// ambiguity about how to parse it, so it counts as having parentheses,
	// even though it is not immediately followed by a `)`.
	FPp.hasParens = function () {
	    var node = this.getNode();
	    var prevToken = this.getPrevToken(node);
	    if (!prevToken) {
	        return false;
	    }
	    var nextToken = this.getNextToken(node);
	    if (!nextToken) {
	        return false;
	    }
	    if (prevToken.value === "(") {
	        if (nextToken.value === ")") {
	            // If the node preceded by a `(` token and followed by a `)` token,
	            // then of course it has parentheses.
	            return true;
	        }
	        // If this is one of the few Expression types that can't come first in
	        // the enclosing statement because of parsing ambiguities (namely,
	        // FunctionExpression, ObjectExpression, and ClassExpression) and
	        // this.firstInStatement() returns true, and the node would not need
	        // parentheses in an expression context because this.needsParens(true)
	        // returns false, then it just needs an opening parenthesis to resolve
	        // the parsing ambiguity that made it appear to need parentheses.
	        var justNeedsOpeningParen = !this.canBeFirstInStatement() &&
	            this.firstInStatement() &&
	            !this.needsParens(true);
	        if (justNeedsOpeningParen) {
	            return true;
	        }
	    }
	    return false;
	};
	FPp.getPrevToken = function (node) {
	    node = node || this.getNode();
	    var loc = node && node.loc;
	    var tokens = loc && loc.tokens;
	    if (tokens && loc.start.token > 0) {
	        var token = tokens[loc.start.token - 1];
	        if (token) {
	            // Do not return tokens that fall outside the root subtree.
	            var rootLoc = this.getRootValue().loc;
	            if (util$j.comparePos(rootLoc.start, token.loc.start) <= 0) {
	                return token;
	            }
	        }
	    }
	    return null;
	};
	FPp.getNextToken = function (node) {
	    node = node || this.getNode();
	    var loc = node && node.loc;
	    var tokens = loc && loc.tokens;
	    if (tokens && loc.end.token < tokens.length) {
	        var token = tokens[loc.end.token];
	        if (token) {
	            // Do not return tokens that fall outside the root subtree.
	            var rootLoc = this.getRootValue().loc;
	            if (util$j.comparePos(token.loc.end, rootLoc.end) <= 0) {
	                return token;
	            }
	        }
	    }
	    return null;
	};
	// Inspired by require("ast-types").NodePath.prototype.needsParens, but
	// more efficient because we're iterating backwards through a stack.
	FPp.needsParens = function (assumeExpressionContext) {
	    var node = this.getNode();
	    // This needs to come before `if (!parent) { return false }` because
	    // an object destructuring assignment requires parens for
	    // correctness even when it's the topmost expression.
	    if (node.type === "AssignmentExpression" &&
	        node.left.type === "ObjectPattern") {
	        return true;
	    }
	    var parent = this.getParentNode();
	    if (!parent) {
	        return false;
	    }
	    var name = this.getName();
	    // If the value of this path is some child of a Node and not a Node
	    // itself, then it doesn't need parentheses. Only Node objects (in fact,
	    // only Expression nodes) need parentheses.
	    if (this.getValue() !== node) {
	        return false;
	    }
	    // Only statements don't need parentheses.
	    if (n$2.Statement.check(node)) {
	        return false;
	    }
	    // Identifiers never need parentheses.
	    if (node.type === "Identifier") {
	        return false;
	    }
	    if (parent.type === "ParenthesizedExpression" ||
	        (node.extra && node.extra.parenthesized)) {
	        return false;
	    }
	    switch (node.type) {
	        case "UnaryExpression":
	        case "SpreadElement":
	        case "SpreadProperty":
	            return (parent.type === "MemberExpression" &&
	                name === "object" &&
	                parent.object === node);
	        case "BinaryExpression":
	        case "LogicalExpression":
	            switch (parent.type) {
	                case "CallExpression":
	                    return name === "callee" && parent.callee === node;
	                case "UnaryExpression":
	                case "SpreadElement":
	                case "SpreadProperty":
	                    return true;
	                case "MemberExpression":
	                    return name === "object" && parent.object === node;
	                case "BinaryExpression":
	                case "LogicalExpression": {
	                    var po = parent.operator;
	                    var pp = PRECEDENCE$1[po];
	                    var no = node.operator;
	                    var np = PRECEDENCE$1[no];
	                    if (pp > np) {
	                        return true;
	                    }
	                    if (pp === np && name === "right") {
	                        assert_1$2.default.strictEqual(parent.right, node);
	                        return true;
	                    }
	                    break;
	                }
	                default:
	                    return false;
	            }
	            break;
	        case "SequenceExpression":
	            switch (parent.type) {
	                case "ReturnStatement":
	                    return false;
	                case "ForStatement":
	                    // Although parentheses wouldn't hurt around sequence expressions in
	                    // the head of for loops, traditional style dictates that e.g. i++,
	                    // j++ should not be wrapped with parentheses.
	                    return false;
	                case "ExpressionStatement":
	                    return name !== "expression";
	                default:
	                    // Otherwise err on the side of overparenthesization, adding
	                    // explicit exceptions above if this proves overzealous.
	                    return true;
	            }
	        case "IntersectionTypeAnnotation":
	        case "UnionTypeAnnotation":
	            return parent.type === "NullableTypeAnnotation";
	        case "Literal":
	            return (parent.type === "MemberExpression" &&
	                isNumber$1.check(node.value) &&
	                name === "object" &&
	                parent.object === node);
	        // Babel 6 Literal split
	        case "NumericLiteral":
	            return (parent.type === "MemberExpression" &&
	                name === "object" &&
	                parent.object === node);
	        case "YieldExpression":
	        case "AwaitExpression":
	        case "AssignmentExpression":
	        case "ConditionalExpression":
	            switch (parent.type) {
	                case "UnaryExpression":
	                case "SpreadElement":
	                case "SpreadProperty":
	                case "BinaryExpression":
	                case "LogicalExpression":
	                    return true;
	                case "CallExpression":
	                case "NewExpression":
	                    return name === "callee" && parent.callee === node;
	                case "ConditionalExpression":
	                    return name === "test" && parent.test === node;
	                case "MemberExpression":
	                    return name === "object" && parent.object === node;
	                default:
	                    return false;
	            }
	        case "ArrowFunctionExpression":
	            if (n$2.CallExpression.check(parent) &&
	                name === "callee" &&
	                parent.callee === node) {
	                return true;
	            }
	            if (n$2.MemberExpression.check(parent) &&
	                name === "object" &&
	                parent.object === node) {
	                return true;
	            }
	            if (n$2.TSAsExpression &&
	                n$2.TSAsExpression.check(parent) &&
	                name === "expression" &&
	                parent.expression === node) {
	                return true;
	            }
	            return isBinary$4(parent);
	        case "ObjectExpression":
	            if (parent.type === "ArrowFunctionExpression" &&
	                name === "body" &&
	                parent.body === node) {
	                return true;
	            }
	            break;
	        case "TSAsExpression":
	            if (parent.type === "ArrowFunctionExpression" &&
	                name === "body" &&
	                parent.body === node &&
	                node.expression.type === "ObjectExpression") {
	                return true;
	            }
	            break;
	        case "CallExpression":
	            if (name === "declaration" &&
	                n$2.ExportDefaultDeclaration.check(parent) &&
	                n$2.FunctionExpression.check(node.callee)) {
	                return true;
	            }
	    }
	    if (parent.type === "NewExpression" &&
	        name === "callee" &&
	        parent.callee === node) {
	        return containsCallExpression(node);
	    }
	    if (assumeExpressionContext !== true &&
	        !this.canBeFirstInStatement() &&
	        this.firstInStatement()) {
	        return true;
	    }
	    return false;
	};
	function isBinary$4(node) {
	    return n$2.BinaryExpression.check(node) || n$2.LogicalExpression.check(node);
	}
	function containsCallExpression(node) {
	    if (n$2.CallExpression.check(node)) {
	        return true;
	    }
	    if (isArray$3.check(node)) {
	        return node.some(containsCallExpression);
	    }
	    if (n$2.Node.check(node)) {
	        return types$5.someField(node, function (_name, child) {
	            return containsCallExpression(child);
	        });
	    }
	    return false;
	}
	FPp.canBeFirstInStatement = function () {
	    var node = this.getNode();
	    if (n$2.FunctionExpression.check(node)) {
	        return false;
	    }
	    if (n$2.ObjectExpression.check(node)) {
	        return false;
	    }
	    if (n$2.ClassExpression.check(node)) {
	        return false;
	    }
	    return true;
	};
	FPp.firstInStatement = function () {
	    var s = this.stack;
	    var parentName, parent;
	    var childName, child;
	    for (var i = s.length - 1; i >= 0; i -= 2) {
	        if (n$2.Node.check(s[i])) {
	            childName = parentName;
	            child = parent;
	            parentName = s[i - 1];
	            parent = s[i];
	        }
	        if (!parent || !child) {
	            continue;
	        }
	        if (n$2.BlockStatement.check(parent) &&
	            parentName === "body" &&
	            childName === 0) {
	            assert_1$2.default.strictEqual(parent.body[0], child);
	            return true;
	        }
	        if (n$2.ExpressionStatement.check(parent) && childName === "expression") {
	            assert_1$2.default.strictEqual(parent.expression, child);
	            return true;
	        }
	        if (n$2.AssignmentExpression.check(parent) && childName === "left") {
	            assert_1$2.default.strictEqual(parent.left, child);
	            return true;
	        }
	        if (n$2.ArrowFunctionExpression.check(parent) && childName === "body") {
	            assert_1$2.default.strictEqual(parent.body, child);
	            return true;
	        }
	        if (n$2.SequenceExpression.check(parent) &&
	            parentName === "expressions" &&
	            childName === 0) {
	            assert_1$2.default.strictEqual(parent.expressions[0], child);
	            continue;
	        }
	        if (n$2.CallExpression.check(parent) && childName === "callee") {
	            assert_1$2.default.strictEqual(parent.callee, child);
	            continue;
	        }
	        if (n$2.MemberExpression.check(parent) && childName === "object") {
	            assert_1$2.default.strictEqual(parent.object, child);
	            continue;
	        }
	        if (n$2.ConditionalExpression.check(parent) && childName === "test") {
	            assert_1$2.default.strictEqual(parent.test, child);
	            continue;
	        }
	        if (isBinary$4(parent) && childName === "left") {
	            assert_1$2.default.strictEqual(parent.left, child);
	            continue;
	        }
	        if (n$2.UnaryExpression.check(parent) &&
	            !parent.prefix &&
	            childName === "argument") {
	            assert_1$2.default.strictEqual(parent.argument, child);
	            continue;
	        }
	        return false;
	    }
	    return true;
	};
	fastPath.default = FastPath;

	Object.defineProperty(patcher, "__esModule", { value: true });
	patcher.getReprinter = patcher.Patcher = void 0;
	var tslib_1$2 = require$$0$6;
	var assert_1$1 = tslib_1$2.__importDefault(require$$1__default['default']);
	var linesModule = tslib_1$2.__importStar(lines);
	var types$4 = tslib_1$2.__importStar(main);
	var Printable = types$4.namedTypes.Printable;
	var Expression$2 = types$4.namedTypes.Expression;
	var ReturnStatement$1 = types$4.namedTypes.ReturnStatement;
	var SourceLocation$2 = types$4.namedTypes.SourceLocation;
	var util_1$1 = util$r;
	var fast_path_1$1 = tslib_1$2.__importDefault(fastPath);
	var isObject$3 = types$4.builtInTypes.object;
	var isArray$2 = types$4.builtInTypes.array;
	var isString$2 = types$4.builtInTypes.string;
	var riskyAdjoiningCharExp = /[0-9a-z_$]/i;
	var Patcher = function Patcher(lines) {
	    assert_1$1.default.ok(this instanceof Patcher);
	    assert_1$1.default.ok(lines instanceof linesModule.Lines);
	    var self = this, replacements = [];
	    self.replace = function (loc, lines) {
	        if (isString$2.check(lines))
	            lines = linesModule.fromString(lines);
	        replacements.push({
	            lines: lines,
	            start: loc.start,
	            end: loc.end,
	        });
	    };
	    self.get = function (loc) {
	        // If no location is provided, return the complete Lines object.
	        loc = loc || {
	            start: { line: 1, column: 0 },
	            end: { line: lines.length, column: lines.getLineLength(lines.length) },
	        };
	        var sliceFrom = loc.start, toConcat = [];
	        function pushSlice(from, to) {
	            assert_1$1.default.ok(util_1$1.comparePos(from, to) <= 0);
	            toConcat.push(lines.slice(from, to));
	        }
	        replacements
	            .sort(function (a, b) { return util_1$1.comparePos(a.start, b.start); })
	            .forEach(function (rep) {
	            if (util_1$1.comparePos(sliceFrom, rep.start) > 0) ;
	            else {
	                pushSlice(sliceFrom, rep.start);
	                toConcat.push(rep.lines);
	                sliceFrom = rep.end;
	            }
	        });
	        pushSlice(sliceFrom, loc.end);
	        return linesModule.concat(toConcat);
	    };
	};
	patcher.Patcher = Patcher;
	var Pp = Patcher.prototype;
	Pp.tryToReprintComments = function (newNode, oldNode, print) {
	    var patcher = this;
	    if (!newNode.comments && !oldNode.comments) {
	        // We were (vacuously) able to reprint all the comments!
	        return true;
	    }
	    var newPath = fast_path_1$1.default.from(newNode);
	    var oldPath = fast_path_1$1.default.from(oldNode);
	    newPath.stack.push("comments", getSurroundingComments(newNode));
	    oldPath.stack.push("comments", getSurroundingComments(oldNode));
	    var reprints = [];
	    var ableToReprintComments = findArrayReprints(newPath, oldPath, reprints);
	    // No need to pop anything from newPath.stack or oldPath.stack, since
	    // newPath and oldPath are fresh local variables.
	    if (ableToReprintComments && reprints.length > 0) {
	        reprints.forEach(function (reprint) {
	            var oldComment = reprint.oldPath.getValue();
	            assert_1$1.default.ok(oldComment.leading || oldComment.trailing);
	            patcher.replace(oldComment.loc, 
	            // Comments can't have .comments, so it doesn't matter whether we
	            // print with comments or without.
	            print(reprint.newPath).indentTail(oldComment.loc.indent));
	        });
	    }
	    return ableToReprintComments;
	};
	// Get all comments that are either leading or trailing, ignoring any
	// comments that occur inside node.loc. Returns an empty array for nodes
	// with no leading or trailing comments.
	function getSurroundingComments(node) {
	    var result = [];
	    if (node.comments && node.comments.length > 0) {
	        node.comments.forEach(function (comment) {
	            if (comment.leading || comment.trailing) {
	                result.push(comment);
	            }
	        });
	    }
	    return result;
	}
	Pp.deleteComments = function (node) {
	    if (!node.comments) {
	        return;
	    }
	    var patcher = this;
	    node.comments.forEach(function (comment) {
	        if (comment.leading) {
	            // Delete leading comments along with any trailing whitespace they
	            // might have.
	            patcher.replace({
	                start: comment.loc.start,
	                end: node.loc.lines.skipSpaces(comment.loc.end, false, false),
	            }, "");
	        }
	        else if (comment.trailing) {
	            // Delete trailing comments along with any leading whitespace they
	            // might have.
	            patcher.replace({
	                start: node.loc.lines.skipSpaces(comment.loc.start, true, false),
	                end: comment.loc.end,
	            }, "");
	        }
	    });
	};
	function getReprinter(path) {
	    assert_1$1.default.ok(path instanceof fast_path_1$1.default);
	    // Make sure that this path refers specifically to a Node, rather than
	    // some non-Node subproperty of a Node.
	    var node = path.getValue();
	    if (!Printable.check(node))
	        return;
	    var orig = node.original;
	    var origLoc = orig && orig.loc;
	    var lines = origLoc && origLoc.lines;
	    var reprints = [];
	    if (!lines || !findReprints(path, reprints))
	        return;
	    return function (print) {
	        var patcher = new Patcher(lines);
	        reprints.forEach(function (reprint) {
	            var newNode = reprint.newPath.getValue();
	            var oldNode = reprint.oldPath.getValue();
	            SourceLocation$2.assert(oldNode.loc, true);
	            var needToPrintNewPathWithComments = !patcher.tryToReprintComments(newNode, oldNode, print);
	            if (needToPrintNewPathWithComments) {
	                // Since we were not able to preserve all leading/trailing
	                // comments, we delete oldNode's comments, print newPath with
	                // comments, and then patch the resulting lines where oldNode used
	                // to be.
	                patcher.deleteComments(oldNode);
	            }
	            var newLines = print(reprint.newPath, {
	                includeComments: needToPrintNewPathWithComments,
	                // If the oldNode we're replacing already had parentheses, we may
	                // not need to print the new node with any extra parentheses,
	                // because the existing parentheses will suffice. However, if the
	                // newNode has a different type than the oldNode, let the printer
	                // decide if reprint.newPath needs parentheses, as usual.
	                avoidRootParens: oldNode.type === newNode.type && reprint.oldPath.hasParens(),
	            }).indentTail(oldNode.loc.indent);
	            var nls = needsLeadingSpace(lines, oldNode.loc, newLines);
	            var nts = needsTrailingSpace(lines, oldNode.loc, newLines);
	            // If we try to replace the argument of a ReturnStatement like
	            // return"asdf" with e.g. a literal null expression, we run the risk
	            // of ending up with returnnull, so we need to add an extra leading
	            // space in situations where that might happen. Likewise for
	            // "asdf"in obj. See #170.
	            if (nls || nts) {
	                var newParts = [];
	                nls && newParts.push(" ");
	                newParts.push(newLines);
	                nts && newParts.push(" ");
	                newLines = linesModule.concat(newParts);
	            }
	            patcher.replace(oldNode.loc, newLines);
	        });
	        // Recall that origLoc is the .loc of an ancestor node that is
	        // guaranteed to contain all the reprinted nodes and comments.
	        var patchedLines = patcher.get(origLoc).indentTail(-orig.loc.indent);
	        if (path.needsParens()) {
	            return linesModule.concat(["(", patchedLines, ")"]);
	        }
	        return patchedLines;
	    };
	}
	patcher.getReprinter = getReprinter;
	// If the last character before oldLoc and the first character of newLines
	// are both identifier characters, they must be separated by a space,
	// otherwise they will most likely get fused together into a single token.
	function needsLeadingSpace(oldLines, oldLoc, newLines) {
	    var posBeforeOldLoc = util_1$1.copyPos(oldLoc.start);
	    // The character just before the location occupied by oldNode.
	    var charBeforeOldLoc = oldLines.prevPos(posBeforeOldLoc) && oldLines.charAt(posBeforeOldLoc);
	    // First character of the reprinted node.
	    var newFirstChar = newLines.charAt(newLines.firstPos());
	    return (charBeforeOldLoc &&
	        riskyAdjoiningCharExp.test(charBeforeOldLoc) &&
	        newFirstChar &&
	        riskyAdjoiningCharExp.test(newFirstChar));
	}
	// If the last character of newLines and the first character after oldLoc
	// are both identifier characters, they must be separated by a space,
	// otherwise they will most likely get fused together into a single token.
	function needsTrailingSpace(oldLines, oldLoc, newLines) {
	    // The character just after the location occupied by oldNode.
	    var charAfterOldLoc = oldLines.charAt(oldLoc.end);
	    var newLastPos = newLines.lastPos();
	    // Last character of the reprinted node.
	    var newLastChar = newLines.prevPos(newLastPos) && newLines.charAt(newLastPos);
	    return (newLastChar &&
	        riskyAdjoiningCharExp.test(newLastChar) &&
	        charAfterOldLoc &&
	        riskyAdjoiningCharExp.test(charAfterOldLoc));
	}
	function findReprints(newPath, reprints) {
	    var newNode = newPath.getValue();
	    Printable.assert(newNode);
	    var oldNode = newNode.original;
	    Printable.assert(oldNode);
	    assert_1$1.default.deepEqual(reprints, []);
	    if (newNode.type !== oldNode.type) {
	        return false;
	    }
	    var oldPath = new fast_path_1$1.default(oldNode);
	    var canReprint = findChildReprints(newPath, oldPath, reprints);
	    if (!canReprint) {
	        // Make absolutely sure the calling code does not attempt to reprint
	        // any nodes.
	        reprints.length = 0;
	    }
	    return canReprint;
	}
	function findAnyReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    var oldNode = oldPath.getValue();
	    if (newNode === oldNode)
	        return true;
	    if (isArray$2.check(newNode))
	        return findArrayReprints(newPath, oldPath, reprints);
	    if (isObject$3.check(newNode))
	        return findObjectReprints(newPath, oldPath, reprints);
	    return false;
	}
	function findArrayReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    var oldNode = oldPath.getValue();
	    if (newNode === oldNode ||
	        newPath.valueIsDuplicate() ||
	        oldPath.valueIsDuplicate()) {
	        return true;
	    }
	    isArray$2.assert(newNode);
	    var len = newNode.length;
	    if (!(isArray$2.check(oldNode) && oldNode.length === len))
	        return false;
	    for (var i = 0; i < len; ++i) {
	        newPath.stack.push(i, newNode[i]);
	        oldPath.stack.push(i, oldNode[i]);
	        var canReprint = findAnyReprints(newPath, oldPath, reprints);
	        newPath.stack.length -= 2;
	        oldPath.stack.length -= 2;
	        if (!canReprint) {
	            return false;
	        }
	    }
	    return true;
	}
	function findObjectReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    isObject$3.assert(newNode);
	    if (newNode.original === null) {
	        // If newNode.original node was set to null, reprint the node.
	        return false;
	    }
	    var oldNode = oldPath.getValue();
	    if (!isObject$3.check(oldNode))
	        return false;
	    if (newNode === oldNode ||
	        newPath.valueIsDuplicate() ||
	        oldPath.valueIsDuplicate()) {
	        return true;
	    }
	    if (Printable.check(newNode)) {
	        if (!Printable.check(oldNode)) {
	            return false;
	        }
	        var newParentNode = newPath.getParentNode();
	        var oldParentNode = oldPath.getParentNode();
	        if (oldParentNode !== null &&
	            oldParentNode.type === "FunctionTypeAnnotation" &&
	            newParentNode !== null &&
	            newParentNode.type === "FunctionTypeAnnotation") {
	            var oldNeedsParens = oldParentNode.params.length !== 1 || !!oldParentNode.params[0].name;
	            var newNeedParens = newParentNode.params.length !== 1 || !!newParentNode.params[0].name;
	            if (!oldNeedsParens && newNeedParens) {
	                return false;
	            }
	        }
	        // Here we need to decide whether the reprinted code for newNode is
	        // appropriate for patching into the location of oldNode.
	        if (newNode.type === oldNode.type) {
	            var childReprints = [];
	            if (findChildReprints(newPath, oldPath, childReprints)) {
	                reprints.push.apply(reprints, childReprints);
	            }
	            else if (oldNode.loc) {
	                // If we have no .loc information for oldNode, then we won't be
	                // able to reprint it.
	                reprints.push({
	                    oldPath: oldPath.copy(),
	                    newPath: newPath.copy(),
	                });
	            }
	            else {
	                return false;
	            }
	            return true;
	        }
	        if (Expression$2.check(newNode) &&
	            Expression$2.check(oldNode) &&
	            // If we have no .loc information for oldNode, then we won't be
	            // able to reprint it.
	            oldNode.loc) {
	            // If both nodes are subtypes of Expression, then we should be able
	            // to fill the location occupied by the old node with code printed
	            // for the new node with no ill consequences.
	            reprints.push({
	                oldPath: oldPath.copy(),
	                newPath: newPath.copy(),
	            });
	            return true;
	        }
	        // The nodes have different types, and at least one of the types is
	        // not a subtype of the Expression type, so we cannot safely assume
	        // the nodes are syntactically interchangeable.
	        return false;
	    }
	    return findChildReprints(newPath, oldPath, reprints);
	}
	function findChildReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    var oldNode = oldPath.getValue();
	    isObject$3.assert(newNode);
	    isObject$3.assert(oldNode);
	    if (newNode.original === null) {
	        // If newNode.original node was set to null, reprint the node.
	        return false;
	    }
	    // If this node needs parentheses and will not be wrapped with
	    // parentheses when reprinted, then return false to skip reprinting and
	    // let it be printed generically.
	    if (newPath.needsParens() && !oldPath.hasParens()) {
	        return false;
	    }
	    var keys = util_1$1.getUnionOfKeys(oldNode, newNode);
	    if (oldNode.type === "File" || newNode.type === "File") {
	        // Don't bother traversing file.tokens, an often very large array
	        // returned by Babylon, and useless for our purposes.
	        delete keys.tokens;
	    }
	    // Don't bother traversing .loc objects looking for reprintable nodes.
	    delete keys.loc;
	    var originalReprintCount = reprints.length;
	    for (var k in keys) {
	        if (k.charAt(0) === "_") {
	            // Ignore "private" AST properties added by e.g. Babel plugins and
	            // parsers like Babylon.
	            continue;
	        }
	        newPath.stack.push(k, types$4.getFieldValue(newNode, k));
	        oldPath.stack.push(k, types$4.getFieldValue(oldNode, k));
	        var canReprint = findAnyReprints(newPath, oldPath, reprints);
	        newPath.stack.length -= 2;
	        oldPath.stack.length -= 2;
	        if (!canReprint) {
	            return false;
	        }
	    }
	    // Return statements might end up running into ASI issues due to
	    // comments inserted deep within the tree, so reprint them if anything
	    // changed within them.
	    if (ReturnStatement$1.check(newPath.getNode()) &&
	        reprints.length > originalReprintCount) {
	        return false;
	    }
	    return true;
	}

	Object.defineProperty(printer$2, "__esModule", { value: true });
	printer$2.Printer = void 0;
	var tslib_1$1 = require$$0$6;
	var assert_1 = tslib_1$1.__importDefault(require$$1__default['default']);
	var comments_1 = comments$1;
	var lines_1 = lines;
	var options_1 = options$3;
	var patcher_1 = patcher;
	var types$3 = tslib_1$1.__importStar(main);
	var namedTypes = types$3.namedTypes;
	var isString$1 = types$3.builtInTypes.string;
	var isObject$2 = types$3.builtInTypes.object;
	var fast_path_1 = tslib_1$1.__importDefault(fastPath);
	var util$i = tslib_1$1.__importStar(util$r);
	var PrintResult = function PrintResult(code, sourceMap) {
	    assert_1.default.ok(this instanceof PrintResult);
	    isString$1.assert(code);
	    this.code = code;
	    if (sourceMap) {
	        isObject$2.assert(sourceMap);
	        this.map = sourceMap;
	    }
	};
	var PRp = PrintResult.prototype;
	var warnedAboutToString = false;
	PRp.toString = function () {
	    if (!warnedAboutToString) {
	        console.warn("Deprecation warning: recast.print now returns an object with " +
	            "a .code property. You appear to be treating the object as a " +
	            "string, which might still work but is strongly discouraged.");
	        warnedAboutToString = true;
	    }
	    return this.code;
	};
	var emptyPrintResult = new PrintResult("");
	var Printer$1 = function Printer(config) {
	    assert_1.default.ok(this instanceof Printer);
	    var explicitTabWidth = config && config.tabWidth;
	    config = options_1.normalize(config);
	    // It's common for client code to pass the same options into both
	    // recast.parse and recast.print, but the Printer doesn't need (and
	    // can be confused by) config.sourceFileName, so we null it out.
	    config.sourceFileName = null;
	    // Non-destructively modifies options with overrides, and returns a
	    // new print function that uses the modified options.
	    function makePrintFunctionWith(options, overrides) {
	        options = Object.assign({}, options, overrides);
	        return function (path) { return print(path, options); };
	    }
	    function print(path, options) {
	        assert_1.default.ok(path instanceof fast_path_1.default);
	        options = options || {};
	        if (options.includeComments) {
	            return comments_1.printComments(path, makePrintFunctionWith(options, {
	                includeComments: false,
	            }));
	        }
	        var oldTabWidth = config.tabWidth;
	        if (!explicitTabWidth) {
	            var loc = path.getNode().loc;
	            if (loc && loc.lines && loc.lines.guessTabWidth) {
	                config.tabWidth = loc.lines.guessTabWidth();
	            }
	        }
	        var reprinter = patcher_1.getReprinter(path);
	        var lines = reprinter
	            ? // Since the print function that we pass to the reprinter will
	                // be used to print "new" nodes, it's tempting to think we
	                // should pass printRootGenerically instead of print, to avoid
	                // calling maybeReprint again, but that would be a mistake
	                // because the new nodes might not be entirely new, but merely
	                // moved from elsewhere in the AST. The print function is the
	                // right choice because it gives us the opportunity to reprint
	                // such nodes using their original source.
	                reprinter(print)
	            : genericPrint(path, config, options, makePrintFunctionWith(options, {
	                includeComments: true,
	                avoidRootParens: false,
	            }));
	        config.tabWidth = oldTabWidth;
	        return lines;
	    }
	    this.print = function (ast) {
	        if (!ast) {
	            return emptyPrintResult;
	        }
	        var lines = print(fast_path_1.default.from(ast), {
	            includeComments: true,
	            avoidRootParens: false,
	        });
	        return new PrintResult(lines.toString(config), util$i.composeSourceMaps(config.inputSourceMap, lines.getSourceMap(config.sourceMapName, config.sourceRoot)));
	    };
	    this.printGenerically = function (ast) {
	        if (!ast) {
	            return emptyPrintResult;
	        }
	        // Print the entire AST generically.
	        function printGenerically(path) {
	            return comments_1.printComments(path, function (path) {
	                return genericPrint(path, config, {
	                    includeComments: true,
	                    avoidRootParens: false,
	                }, printGenerically);
	            });
	        }
	        var path = fast_path_1.default.from(ast);
	        var oldReuseWhitespace = config.reuseWhitespace;
	        // Do not reuse whitespace (or anything else, for that matter)
	        // when printing generically.
	        config.reuseWhitespace = false;
	        // TODO Allow printing of comments?
	        var pr = new PrintResult(printGenerically(path).toString(config));
	        config.reuseWhitespace = oldReuseWhitespace;
	        return pr;
	    };
	};
	printer$2.Printer = Printer$1;
	function genericPrint(path, config, options, printPath) {
	    assert_1.default.ok(path instanceof fast_path_1.default);
	    var node = path.getValue();
	    var parts = [];
	    var linesWithoutParens = genericPrintNoParens(path, config, printPath);
	    if (!node || linesWithoutParens.isEmpty()) {
	        return linesWithoutParens;
	    }
	    var shouldAddParens = node.extra ? node.extra.parenthesized : false;
	    var decoratorsLines = printDecorators(path, printPath);
	    if (decoratorsLines.isEmpty()) {
	        // Nodes with decorators can't have parentheses, so we can avoid
	        // computing path.needsParens() except in this case.
	        if (!options.avoidRootParens) {
	            shouldAddParens = shouldAddParens || path.needsParens();
	        }
	    }
	    else {
	        parts.push(decoratorsLines);
	    }
	    if (shouldAddParens) {
	        parts.unshift("(");
	    }
	    parts.push(linesWithoutParens);
	    if (shouldAddParens) {
	        parts.push(")");
	    }
	    return lines_1.concat(parts);
	}
	// Note that the `options` parameter of this function is what other
	// functions in this file call the `config` object (that is, the
	// configuration object originally passed into the Printer constructor).
	// Its properties are documented in lib/options.js.
	function genericPrintNoParens(path, options, print) {
	    var n = path.getValue();
	    if (!n) {
	        return lines_1.fromString("");
	    }
	    if (typeof n === "string") {
	        return lines_1.fromString(n, options);
	    }
	    namedTypes.Printable.assert(n);
	    var parts = [];
	    switch (n.type) {
	        case "File":
	            return path.call(print, "program");
	        case "Program":
	            // Babel 6
	            if (n.directives) {
	                path.each(function (childPath) {
	                    parts.push(print(childPath), ";\n");
	                }, "directives");
	            }
	            if (n.interpreter) {
	                parts.push(path.call(print, "interpreter"));
	            }
	            parts.push(path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body"));
	            return lines_1.concat(parts);
	        case "Noop": // Babel extension.
	        case "EmptyStatement":
	            return lines_1.fromString("");
	        case "ExpressionStatement":
	            return lines_1.concat([path.call(print, "expression"), ";"]);
	        case "ParenthesizedExpression": // Babel extension.
	            return lines_1.concat(["(", path.call(print, "expression"), ")"]);
	        case "BinaryExpression":
	        case "LogicalExpression":
	        case "AssignmentExpression":
	            return lines_1.fromString(" ").join([
	                path.call(print, "left"),
	                n.operator,
	                path.call(print, "right"),
	            ]);
	        case "AssignmentPattern":
	            return lines_1.concat([
	                path.call(print, "left"),
	                " = ",
	                path.call(print, "right"),
	            ]);
	        case "MemberExpression":
	        case "OptionalMemberExpression": {
	            parts.push(path.call(print, "object"));
	            var property = path.call(print, "property");
	            // Like n.optional, except with defaults applied, so optional
	            // defaults to true for OptionalMemberExpression nodes.
	            var optional = types$3.getFieldValue(n, "optional");
	            if (n.computed) {
	                parts.push(optional ? "?.[" : "[", property, "]");
	            }
	            else {
	                parts.push(optional ? "?." : ".", property);
	            }
	            return lines_1.concat(parts);
	        }
	        case "ChainExpression":
	            return path.call(print, "expression");
	        case "MetaProperty":
	            return lines_1.concat([
	                path.call(print, "meta"),
	                ".",
	                path.call(print, "property"),
	            ]);
	        case "BindExpression":
	            if (n.object) {
	                parts.push(path.call(print, "object"));
	            }
	            parts.push("::", path.call(print, "callee"));
	            return lines_1.concat(parts);
	        case "Path":
	            return lines_1.fromString(".").join(n.body);
	        case "Identifier":
	            return lines_1.concat([
	                lines_1.fromString(n.name, options),
	                n.optional ? "?" : "",
	                path.call(print, "typeAnnotation"),
	            ]);
	        case "SpreadElement":
	        case "SpreadElementPattern":
	        case "RestProperty": // Babel 6 for ObjectPattern
	        case "SpreadProperty":
	        case "SpreadPropertyPattern":
	        case "ObjectTypeSpreadProperty":
	        case "RestElement":
	            return lines_1.concat([
	                "...",
	                path.call(print, "argument"),
	                path.call(print, "typeAnnotation"),
	            ]);
	        case "FunctionDeclaration":
	        case "FunctionExpression":
	        case "TSDeclareFunction":
	            if (n.declare) {
	                parts.push("declare ");
	            }
	            if (n.async) {
	                parts.push("async ");
	            }
	            parts.push("function");
	            if (n.generator)
	                parts.push("*");
	            if (n.id) {
	                parts.push(" ", path.call(print, "id"), path.call(print, "typeParameters"));
	            }
	            else {
	                if (n.typeParameters) {
	                    parts.push(path.call(print, "typeParameters"));
	                }
	            }
	            parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"));
	            if (n.body) {
	                parts.push(" ", path.call(print, "body"));
	            }
	            return lines_1.concat(parts);
	        case "ArrowFunctionExpression":
	            if (n.async) {
	                parts.push("async ");
	            }
	            if (n.typeParameters) {
	                parts.push(path.call(print, "typeParameters"));
	            }
	            if (!options.arrowParensAlways &&
	                n.params.length === 1 &&
	                !n.rest &&
	                n.params[0].type === "Identifier" &&
	                !n.params[0].typeAnnotation &&
	                !n.returnType) {
	                parts.push(path.call(print, "params", 0));
	            }
	            else {
	                parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"));
	            }
	            parts.push(" => ", path.call(print, "body"));
	            return lines_1.concat(parts);
	        case "MethodDefinition":
	            return printMethod(path, options, print);
	        case "YieldExpression":
	            parts.push("yield");
	            if (n.delegate)
	                parts.push("*");
	            if (n.argument)
	                parts.push(" ", path.call(print, "argument"));
	            return lines_1.concat(parts);
	        case "AwaitExpression":
	            parts.push("await");
	            if (n.all)
	                parts.push("*");
	            if (n.argument)
	                parts.push(" ", path.call(print, "argument"));
	            return lines_1.concat(parts);
	        case "ModuleDeclaration":
	            parts.push("module", path.call(print, "id"));
	            if (n.source) {
	                assert_1.default.ok(!n.body);
	                parts.push("from", path.call(print, "source"));
	            }
	            else {
	                parts.push(path.call(print, "body"));
	            }
	            return lines_1.fromString(" ").join(parts);
	        case "ImportSpecifier":
	            if (n.importKind && n.importKind !== "value") {
	                parts.push(n.importKind + " ");
	            }
	            if (n.imported) {
	                parts.push(path.call(print, "imported"));
	                if (n.local && n.local.name !== n.imported.name) {
	                    parts.push(" as ", path.call(print, "local"));
	                }
	            }
	            else if (n.id) {
	                parts.push(path.call(print, "id"));
	                if (n.name) {
	                    parts.push(" as ", path.call(print, "name"));
	                }
	            }
	            return lines_1.concat(parts);
	        case "ExportSpecifier":
	            if (n.local) {
	                parts.push(path.call(print, "local"));
	                if (n.exported && n.exported.name !== n.local.name) {
	                    parts.push(" as ", path.call(print, "exported"));
	                }
	            }
	            else if (n.id) {
	                parts.push(path.call(print, "id"));
	                if (n.name) {
	                    parts.push(" as ", path.call(print, "name"));
	                }
	            }
	            return lines_1.concat(parts);
	        case "ExportBatchSpecifier":
	            return lines_1.fromString("*");
	        case "ImportNamespaceSpecifier":
	            parts.push("* as ");
	            if (n.local) {
	                parts.push(path.call(print, "local"));
	            }
	            else if (n.id) {
	                parts.push(path.call(print, "id"));
	            }
	            return lines_1.concat(parts);
	        case "ImportDefaultSpecifier":
	            if (n.local) {
	                return path.call(print, "local");
	            }
	            return path.call(print, "id");
	        case "TSExportAssignment":
	            return lines_1.concat(["export = ", path.call(print, "expression")]);
	        case "ExportDeclaration":
	        case "ExportDefaultDeclaration":
	        case "ExportNamedDeclaration":
	            return printExportDeclaration(path, options, print);
	        case "ExportAllDeclaration":
	            parts.push("export *");
	            if (n.exported) {
	                parts.push(" as ", path.call(print, "exported"));
	            }
	            parts.push(" from ", path.call(print, "source"), ";");
	            return lines_1.concat(parts);
	        case "TSNamespaceExportDeclaration":
	            parts.push("export as namespace ", path.call(print, "id"));
	            return maybeAddSemicolon(lines_1.concat(parts));
	        case "ExportNamespaceSpecifier":
	            return lines_1.concat(["* as ", path.call(print, "exported")]);
	        case "ExportDefaultSpecifier":
	            return path.call(print, "exported");
	        case "Import":
	            return lines_1.fromString("import", options);
	        // Recast and ast-types currently support dynamic import(...) using
	        // either this dedicated ImportExpression type or a CallExpression
	        // whose callee has type Import.
	        // https://github.com/benjamn/ast-types/pull/365#issuecomment-605214486
	        case "ImportExpression":
	            return lines_1.concat(["import(", path.call(print, "source"), ")"]);
	        case "ImportDeclaration": {
	            parts.push("import ");
	            if (n.importKind && n.importKind !== "value") {
	                parts.push(n.importKind + " ");
	            }
	            if (n.specifiers && n.specifiers.length > 0) {
	                var unbracedSpecifiers_1 = [];
	                var bracedSpecifiers_1 = [];
	                path.each(function (specifierPath) {
	                    var spec = specifierPath.getValue();
	                    if (spec.type === "ImportSpecifier") {
	                        bracedSpecifiers_1.push(print(specifierPath));
	                    }
	                    else if (spec.type === "ImportDefaultSpecifier" ||
	                        spec.type === "ImportNamespaceSpecifier") {
	                        unbracedSpecifiers_1.push(print(specifierPath));
	                    }
	                }, "specifiers");
	                unbracedSpecifiers_1.forEach(function (lines, i) {
	                    if (i > 0) {
	                        parts.push(", ");
	                    }
	                    parts.push(lines);
	                });
	                if (bracedSpecifiers_1.length > 0) {
	                    var lines = lines_1.fromString(", ").join(bracedSpecifiers_1);
	                    if (lines.getLineLength(1) > options.wrapColumn) {
	                        lines = lines_1.concat([
	                            lines_1.fromString(",\n").join(bracedSpecifiers_1).indent(options.tabWidth),
	                            ",",
	                        ]);
	                    }
	                    if (unbracedSpecifiers_1.length > 0) {
	                        parts.push(", ");
	                    }
	                    if (lines.length > 1) {
	                        parts.push("{\n", lines, "\n}");
	                    }
	                    else if (options.objectCurlySpacing) {
	                        parts.push("{ ", lines, " }");
	                    }
	                    else {
	                        parts.push("{", lines, "}");
	                    }
	                }
	                parts.push(" from ");
	            }
	            parts.push(path.call(print, "source"), ";");
	            return lines_1.concat(parts);
	        }
	        case "BlockStatement": {
	            var naked_1 = path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body");
	            if (naked_1.isEmpty()) {
	                if (!n.directives || n.directives.length === 0) {
	                    return lines_1.fromString("{}");
	                }
	            }
	            parts.push("{\n");
	            // Babel 6
	            if (n.directives) {
	                path.each(function (childPath) {
	                    parts.push(maybeAddSemicolon(print(childPath).indent(options.tabWidth)), n.directives.length > 1 || !naked_1.isEmpty() ? "\n" : "");
	                }, "directives");
	            }
	            parts.push(naked_1.indent(options.tabWidth));
	            parts.push("\n}");
	            return lines_1.concat(parts);
	        }
	        case "ReturnStatement": {
	            parts.push("return");
	            if (n.argument) {
	                var argLines = path.call(print, "argument");
	                if (argLines.startsWithComment() ||
	                    (argLines.length > 1 &&
	                        namedTypes.JSXElement &&
	                        namedTypes.JSXElement.check(n.argument))) {
	                    parts.push(" (\n", argLines.indent(options.tabWidth), "\n)");
	                }
	                else {
	                    parts.push(" ", argLines);
	                }
	            }
	            parts.push(";");
	            return lines_1.concat(parts);
	        }
	        case "CallExpression":
	        case "OptionalCallExpression":
	            parts.push(path.call(print, "callee"));
	            if (n.typeParameters) {
	                parts.push(path.call(print, "typeParameters"));
	            }
	            if (n.typeArguments) {
	                parts.push(path.call(print, "typeArguments"));
	            }
	            // Like n.optional, but defaults to true for OptionalCallExpression
	            // nodes that are missing an n.optional property (unusual),
	            // according to the OptionalCallExpression definition in ast-types.
	            if (types$3.getFieldValue(n, "optional")) {
	                parts.push("?.");
	            }
	            parts.push(printArgumentsList(path, options, print));
	            return lines_1.concat(parts);
	        case "ObjectExpression":
	        case "ObjectPattern":
	        case "ObjectTypeAnnotation": {
	            var isTypeAnnotation_1 = n.type === "ObjectTypeAnnotation";
	            var separator_1 = options.flowObjectCommas
	                ? ","
	                : isTypeAnnotation_1
	                    ? ";"
	                    : ",";
	            var fields = [];
	            var allowBreak_1 = false;
	            if (isTypeAnnotation_1) {
	                fields.push("indexers", "callProperties");
	                if (n.internalSlots != null) {
	                    fields.push("internalSlots");
	                }
	            }
	            fields.push("properties");
	            var len_1 = 0;
	            fields.forEach(function (field) {
	                len_1 += n[field].length;
	            });
	            var oneLine_1 = (isTypeAnnotation_1 && len_1 === 1) || len_1 === 0;
	            var leftBrace = n.exact ? "{|" : "{";
	            var rightBrace = n.exact ? "|}" : "}";
	            parts.push(oneLine_1 ? leftBrace : leftBrace + "\n");
	            var leftBraceIndex = parts.length - 1;
	            var i_1 = 0;
	            fields.forEach(function (field) {
	                path.each(function (childPath) {
	                    var lines = print(childPath);
	                    if (!oneLine_1) {
	                        lines = lines.indent(options.tabWidth);
	                    }
	                    var multiLine = !isTypeAnnotation_1 && lines.length > 1;
	                    if (multiLine && allowBreak_1) {
	                        // Similar to the logic for BlockStatement.
	                        parts.push("\n");
	                    }
	                    parts.push(lines);
	                    if (i_1 < len_1 - 1) {
	                        // Add an extra line break if the previous object property
	                        // had a multi-line value.
	                        parts.push(separator_1 + (multiLine ? "\n\n" : "\n"));
	                        allowBreak_1 = !multiLine;
	                    }
	                    else if (len_1 !== 1 && isTypeAnnotation_1) {
	                        parts.push(separator_1);
	                    }
	                    else if (!oneLine_1 &&
	                        util$i.isTrailingCommaEnabled(options, "objects") &&
	                        childPath.getValue().type !== "RestElement") {
	                        parts.push(separator_1);
	                    }
	                    i_1++;
	                }, field);
	            });
	            if (n.inexact) {
	                var line = lines_1.fromString("...", options);
	                if (oneLine_1) {
	                    if (len_1 > 0) {
	                        parts.push(separator_1, " ");
	                    }
	                    parts.push(line);
	                }
	                else {
	                    // No trailing separator after ... to maintain parity with prettier.
	                    parts.push("\n", line.indent(options.tabWidth));
	                }
	            }
	            parts.push(oneLine_1 ? rightBrace : "\n" + rightBrace);
	            if (i_1 !== 0 && oneLine_1 && options.objectCurlySpacing) {
	                parts[leftBraceIndex] = leftBrace + " ";
	                parts[parts.length - 1] = " " + rightBrace;
	            }
	            if (n.typeAnnotation) {
	                parts.push(path.call(print, "typeAnnotation"));
	            }
	            return lines_1.concat(parts);
	        }
	        case "PropertyPattern":
	            return lines_1.concat([
	                path.call(print, "key"),
	                ": ",
	                path.call(print, "pattern"),
	            ]);
	        case "ObjectProperty": // Babel 6
	        case "Property": {
	            // Non-standard AST node type.
	            if (n.method || n.kind === "get" || n.kind === "set") {
	                return printMethod(path, options, print);
	            }
	            if (n.shorthand && n.value.type === "AssignmentPattern") {
	                return path.call(print, "value");
	            }
	            var key = path.call(print, "key");
	            if (n.computed) {
	                parts.push("[", key, "]");
	            }
	            else {
	                parts.push(key);
	            }
	            if (!n.shorthand || n.key.name !== n.value.name) {
	                parts.push(": ", path.call(print, "value"));
	            }
	            return lines_1.concat(parts);
	        }
	        case "ClassMethod": // Babel 6
	        case "ObjectMethod": // Babel 6
	        case "ClassPrivateMethod":
	        case "TSDeclareMethod":
	            return printMethod(path, options, print);
	        case "PrivateName":
	            return lines_1.concat(["#", path.call(print, "id")]);
	        case "Decorator":
	            return lines_1.concat(["@", path.call(print, "expression")]);
	        case "ArrayExpression":
	        case "ArrayPattern": {
	            var elems = n.elements;
	            var len_2 = elems.length;
	            var printed_1 = path.map(print, "elements");
	            var joined = lines_1.fromString(", ").join(printed_1);
	            var oneLine_2 = joined.getLineLength(1) <= options.wrapColumn;
	            if (oneLine_2) {
	                if (options.arrayBracketSpacing) {
	                    parts.push("[ ");
	                }
	                else {
	                    parts.push("[");
	                }
	            }
	            else {
	                parts.push("[\n");
	            }
	            path.each(function (elemPath) {
	                var i = elemPath.getName();
	                var elem = elemPath.getValue();
	                if (!elem) {
	                    // If the array expression ends with a hole, that hole
	                    // will be ignored by the interpreter, but if it ends with
	                    // two (or more) holes, we need to write out two (or more)
	                    // commas so that the resulting code is interpreted with
	                    // both (all) of the holes.
	                    parts.push(",");
	                }
	                else {
	                    var lines = printed_1[i];
	                    if (oneLine_2) {
	                        if (i > 0)
	                            parts.push(" ");
	                    }
	                    else {
	                        lines = lines.indent(options.tabWidth);
	                    }
	                    parts.push(lines);
	                    if (i < len_2 - 1 ||
	                        (!oneLine_2 && util$i.isTrailingCommaEnabled(options, "arrays")))
	                        parts.push(",");
	                    if (!oneLine_2)
	                        parts.push("\n");
	                }
	            }, "elements");
	            if (oneLine_2 && options.arrayBracketSpacing) {
	                parts.push(" ]");
	            }
	            else {
	                parts.push("]");
	            }
	            if (n.typeAnnotation) {
	                parts.push(path.call(print, "typeAnnotation"));
	            }
	            return lines_1.concat(parts);
	        }
	        case "SequenceExpression":
	            return lines_1.fromString(", ").join(path.map(print, "expressions"));
	        case "ThisExpression":
	            return lines_1.fromString("this");
	        case "Super":
	            return lines_1.fromString("super");
	        case "NullLiteral": // Babel 6 Literal split
	            return lines_1.fromString("null");
	        case "RegExpLiteral": // Babel 6 Literal split
	            return lines_1.fromString(n.extra.raw);
	        case "BigIntLiteral": // Babel 7 Literal split
	            return lines_1.fromString(n.value + "n");
	        case "NumericLiteral": // Babel 6 Literal Split
	            // Keep original representation for numeric values not in base 10.
	            if (n.extra &&
	                typeof n.extra.raw === "string" &&
	                Number(n.extra.raw) === n.value) {
	                return lines_1.fromString(n.extra.raw, options);
	            }
	            return lines_1.fromString(n.value, options);
	        case "BooleanLiteral": // Babel 6 Literal split
	        case "StringLiteral": // Babel 6 Literal split
	        case "Literal":
	            // Numeric values may be in bases other than 10. Use their raw
	            // representation if equivalent.
	            if (typeof n.value === "number" &&
	                typeof n.raw === "string" &&
	                Number(n.raw) === n.value) {
	                return lines_1.fromString(n.raw, options);
	            }
	            if (typeof n.value !== "string") {
	                return lines_1.fromString(n.value, options);
	            }
	            return lines_1.fromString(nodeStr(n.value, options), options);
	        case "Directive": // Babel 6
	            return path.call(print, "value");
	        case "DirectiveLiteral": // Babel 6
	            return lines_1.fromString(nodeStr(n.value, options));
	        case "InterpreterDirective":
	            return lines_1.fromString("#!" + n.value + "\n", options);
	        case "ModuleSpecifier":
	            if (n.local) {
	                throw new Error("The ESTree ModuleSpecifier type should be abstract");
	            }
	            // The Esprima ModuleSpecifier type is just a string-valued
	            // Literal identifying the imported-from module.
	            return lines_1.fromString(nodeStr(n.value, options), options);
	        case "UnaryExpression":
	            parts.push(n.operator);
	            if (/[a-z]$/.test(n.operator))
	                parts.push(" ");
	            parts.push(path.call(print, "argument"));
	            return lines_1.concat(parts);
	        case "UpdateExpression":
	            parts.push(path.call(print, "argument"), n.operator);
	            if (n.prefix)
	                parts.reverse();
	            return lines_1.concat(parts);
	        case "ConditionalExpression":
	            return lines_1.concat([
	                path.call(print, "test"),
	                " ? ",
	                path.call(print, "consequent"),
	                " : ",
	                path.call(print, "alternate"),
	            ]);
	        case "NewExpression": {
	            parts.push("new ", path.call(print, "callee"));
	            if (n.typeParameters) {
	                parts.push(path.call(print, "typeParameters"));
	            }
	            if (n.typeArguments) {
	                parts.push(path.call(print, "typeArguments"));
	            }
	            var args = n.arguments;
	            if (args) {
	                parts.push(printArgumentsList(path, options, print));
	            }
	            return lines_1.concat(parts);
	        }
	        case "VariableDeclaration": {
	            if (n.declare) {
	                parts.push("declare ");
	            }
	            parts.push(n.kind, " ");
	            var maxLen_1 = 0;
	            var printed = path.map(function (childPath) {
	                var lines = print(childPath);
	                maxLen_1 = Math.max(lines.length, maxLen_1);
	                return lines;
	            }, "declarations");
	            if (maxLen_1 === 1) {
	                parts.push(lines_1.fromString(", ").join(printed));
	            }
	            else if (printed.length > 1) {
	                parts.push(lines_1.fromString(",\n")
	                    .join(printed)
	                    .indentTail(n.kind.length + 1));
	            }
	            else {
	                parts.push(printed[0]);
	            }
	            // We generally want to terminate all variable declarations with a
	            // semicolon, except when they are children of for loops.
	            var parentNode = path.getParentNode();
	            if (!namedTypes.ForStatement.check(parentNode) &&
	                !namedTypes.ForInStatement.check(parentNode) &&
	                !(namedTypes.ForOfStatement &&
	                    namedTypes.ForOfStatement.check(parentNode)) &&
	                !(namedTypes.ForAwaitStatement &&
	                    namedTypes.ForAwaitStatement.check(parentNode))) {
	                parts.push(";");
	            }
	            return lines_1.concat(parts);
	        }
	        case "VariableDeclarator":
	            return n.init
	                ? lines_1.fromString(" = ").join([
	                    path.call(print, "id"),
	                    path.call(print, "init"),
	                ])
	                : path.call(print, "id");
	        case "WithStatement":
	            return lines_1.concat([
	                "with (",
	                path.call(print, "object"),
	                ") ",
	                path.call(print, "body"),
	            ]);
	        case "IfStatement": {
	            var con = adjustClause(path.call(print, "consequent"), options);
	            parts.push("if (", path.call(print, "test"), ")", con);
	            if (n.alternate)
	                parts.push(endsWithBrace(con) ? " else" : "\nelse", adjustClause(path.call(print, "alternate"), options));
	            return lines_1.concat(parts);
	        }
	        case "ForStatement": {
	            // TODO Get the for (;;) case right.
	            var init = path.call(print, "init");
	            var sep = init.length > 1 ? ";\n" : "; ";
	            var forParen = "for (";
	            var indented = lines_1.fromString(sep)
	                .join([init, path.call(print, "test"), path.call(print, "update")])
	                .indentTail(forParen.length);
	            var head = lines_1.concat([forParen, indented, ")"]);
	            var clause = adjustClause(path.call(print, "body"), options);
	            parts.push(head);
	            if (head.length > 1) {
	                parts.push("\n");
	                clause = clause.trimLeft();
	            }
	            parts.push(clause);
	            return lines_1.concat(parts);
	        }
	        case "WhileStatement":
	            return lines_1.concat([
	                "while (",
	                path.call(print, "test"),
	                ")",
	                adjustClause(path.call(print, "body"), options),
	            ]);
	        case "ForInStatement":
	            // Note: esprima can't actually parse "for each (".
	            return lines_1.concat([
	                n.each ? "for each (" : "for (",
	                path.call(print, "left"),
	                " in ",
	                path.call(print, "right"),
	                ")",
	                adjustClause(path.call(print, "body"), options),
	            ]);
	        case "ForOfStatement":
	        case "ForAwaitStatement":
	            parts.push("for ");
	            if (n.await || n.type === "ForAwaitStatement") {
	                parts.push("await ");
	            }
	            parts.push("(", path.call(print, "left"), " of ", path.call(print, "right"), ")", adjustClause(path.call(print, "body"), options));
	            return lines_1.concat(parts);
	        case "DoWhileStatement": {
	            var doBody = lines_1.concat([
	                "do",
	                adjustClause(path.call(print, "body"), options),
	            ]);
	            parts.push(doBody);
	            if (endsWithBrace(doBody))
	                parts.push(" while");
	            else
	                parts.push("\nwhile");
	            parts.push(" (", path.call(print, "test"), ");");
	            return lines_1.concat(parts);
	        }
	        case "DoExpression": {
	            var statements = path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body");
	            return lines_1.concat(["do {\n", statements.indent(options.tabWidth), "\n}"]);
	        }
	        case "BreakStatement":
	            parts.push("break");
	            if (n.label)
	                parts.push(" ", path.call(print, "label"));
	            parts.push(";");
	            return lines_1.concat(parts);
	        case "ContinueStatement":
	            parts.push("continue");
	            if (n.label)
	                parts.push(" ", path.call(print, "label"));
	            parts.push(";");
	            return lines_1.concat(parts);
	        case "LabeledStatement":
	            return lines_1.concat([
	                path.call(print, "label"),
	                ":\n",
	                path.call(print, "body"),
	            ]);
	        case "TryStatement":
	            parts.push("try ", path.call(print, "block"));
	            if (n.handler) {
	                parts.push(" ", path.call(print, "handler"));
	            }
	            else if (n.handlers) {
	                path.each(function (handlerPath) {
	                    parts.push(" ", print(handlerPath));
	                }, "handlers");
	            }
	            if (n.finalizer) {
	                parts.push(" finally ", path.call(print, "finalizer"));
	            }
	            return lines_1.concat(parts);
	        case "CatchClause":
	            parts.push("catch ");
	            if (n.param) {
	                parts.push("(", path.call(print, "param"));
	            }
	            if (n.guard) {
	                // Note: esprima does not recognize conditional catch clauses.
	                parts.push(" if ", path.call(print, "guard"));
	            }
	            if (n.param) {
	                parts.push(") ");
	            }
	            parts.push(path.call(print, "body"));
	            return lines_1.concat(parts);
	        case "ThrowStatement":
	            return lines_1.concat(["throw ", path.call(print, "argument"), ";"]);
	        case "SwitchStatement":
	            return lines_1.concat([
	                "switch (",
	                path.call(print, "discriminant"),
	                ") {\n",
	                lines_1.fromString("\n").join(path.map(print, "cases")),
	                "\n}",
	            ]);
	        // Note: ignoring n.lexical because it has no printing consequences.
	        case "SwitchCase":
	            if (n.test)
	                parts.push("case ", path.call(print, "test"), ":");
	            else
	                parts.push("default:");
	            if (n.consequent.length > 0) {
	                parts.push("\n", path
	                    .call(function (consequentPath) {
	                    return printStatementSequence(consequentPath, options, print);
	                }, "consequent")
	                    .indent(options.tabWidth));
	            }
	            return lines_1.concat(parts);
	        case "DebuggerStatement":
	            return lines_1.fromString("debugger;");
	        // JSX extensions below.
	        case "JSXAttribute":
	            parts.push(path.call(print, "name"));
	            if (n.value)
	                parts.push("=", path.call(print, "value"));
	            return lines_1.concat(parts);
	        case "JSXIdentifier":
	            return lines_1.fromString(n.name, options);
	        case "JSXNamespacedName":
	            return lines_1.fromString(":").join([
	                path.call(print, "namespace"),
	                path.call(print, "name"),
	            ]);
	        case "JSXMemberExpression":
	            return lines_1.fromString(".").join([
	                path.call(print, "object"),
	                path.call(print, "property"),
	            ]);
	        case "JSXSpreadAttribute":
	            return lines_1.concat(["{...", path.call(print, "argument"), "}"]);
	        case "JSXSpreadChild":
	            return lines_1.concat(["{...", path.call(print, "expression"), "}"]);
	        case "JSXExpressionContainer":
	            return lines_1.concat(["{", path.call(print, "expression"), "}"]);
	        case "JSXElement":
	        case "JSXFragment": {
	            var openingPropName = "opening" + (n.type === "JSXElement" ? "Element" : "Fragment");
	            var closingPropName = "closing" + (n.type === "JSXElement" ? "Element" : "Fragment");
	            var openingLines = path.call(print, openingPropName);
	            if (n[openingPropName].selfClosing) {
	                assert_1.default.ok(!n[closingPropName], "unexpected " +
	                    closingPropName +
	                    " element in self-closing " +
	                    n.type);
	                return openingLines;
	            }
	            var childLines = lines_1.concat(path.map(function (childPath) {
	                var child = childPath.getValue();
	                if (namedTypes.Literal.check(child) &&
	                    typeof child.value === "string") {
	                    if (/\S/.test(child.value)) {
	                        return child.value.replace(/^\s+|\s+$/g, "");
	                    }
	                    else if (/\n/.test(child.value)) {
	                        return "\n";
	                    }
	                }
	                return print(childPath);
	            }, "children")).indentTail(options.tabWidth);
	            var closingLines = path.call(print, closingPropName);
	            return lines_1.concat([openingLines, childLines, closingLines]);
	        }
	        case "JSXOpeningElement": {
	            parts.push("<", path.call(print, "name"));
	            var attrParts_1 = [];
	            path.each(function (attrPath) {
	                attrParts_1.push(" ", print(attrPath));
	            }, "attributes");
	            var attrLines = lines_1.concat(attrParts_1);
	            var needLineWrap = attrLines.length > 1 || attrLines.getLineLength(1) > options.wrapColumn;
	            if (needLineWrap) {
	                attrParts_1.forEach(function (part, i) {
	                    if (part === " ") {
	                        assert_1.default.strictEqual(i % 2, 0);
	                        attrParts_1[i] = "\n";
	                    }
	                });
	                attrLines = lines_1.concat(attrParts_1).indentTail(options.tabWidth);
	            }
	            parts.push(attrLines, n.selfClosing ? " />" : ">");
	            return lines_1.concat(parts);
	        }
	        case "JSXClosingElement":
	            return lines_1.concat(["</", path.call(print, "name"), ">"]);
	        case "JSXOpeningFragment":
	            return lines_1.fromString("<>");
	        case "JSXClosingFragment":
	            return lines_1.fromString("</>");
	        case "JSXText":
	            return lines_1.fromString(n.value, options);
	        case "JSXEmptyExpression":
	            return lines_1.fromString("");
	        case "TypeAnnotatedIdentifier":
	            return lines_1.concat([
	                path.call(print, "annotation"),
	                " ",
	                path.call(print, "identifier"),
	            ]);
	        case "ClassBody":
	            if (n.body.length === 0) {
	                return lines_1.fromString("{}");
	            }
	            return lines_1.concat([
	                "{\n",
	                path
	                    .call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body")
	                    .indent(options.tabWidth),
	                "\n}",
	            ]);
	        case "ClassPropertyDefinition":
	            parts.push("static ", path.call(print, "definition"));
	            if (!namedTypes.MethodDefinition.check(n.definition))
	                parts.push(";");
	            return lines_1.concat(parts);
	        case "ClassProperty": {
	            if (n.declare) {
	                parts.push("declare ");
	            }
	            var access = n.accessibility || n.access;
	            if (typeof access === "string") {
	                parts.push(access, " ");
	            }
	            if (n.static) {
	                parts.push("static ");
	            }
	            if (n.abstract) {
	                parts.push("abstract ");
	            }
	            if (n.readonly) {
	                parts.push("readonly ");
	            }
	            var key = path.call(print, "key");
	            if (n.computed) {
	                key = lines_1.concat(["[", key, "]"]);
	            }
	            if (n.variance) {
	                key = lines_1.concat([printVariance(path, print), key]);
	            }
	            parts.push(key);
	            if (n.optional) {
	                parts.push("?");
	            }
	            if (n.typeAnnotation) {
	                parts.push(path.call(print, "typeAnnotation"));
	            }
	            if (n.value) {
	                parts.push(" = ", path.call(print, "value"));
	            }
	            parts.push(";");
	            return lines_1.concat(parts);
	        }
	        case "ClassPrivateProperty":
	            if (n.static) {
	                parts.push("static ");
	            }
	            parts.push(path.call(print, "key"));
	            if (n.typeAnnotation) {
	                parts.push(path.call(print, "typeAnnotation"));
	            }
	            if (n.value) {
	                parts.push(" = ", path.call(print, "value"));
	            }
	            parts.push(";");
	            return lines_1.concat(parts);
	        case "ClassDeclaration":
	        case "ClassExpression":
	            if (n.declare) {
	                parts.push("declare ");
	            }
	            if (n.abstract) {
	                parts.push("abstract ");
	            }
	            parts.push("class");
	            if (n.id) {
	                parts.push(" ", path.call(print, "id"));
	            }
	            if (n.typeParameters) {
	                parts.push(path.call(print, "typeParameters"));
	            }
	            if (n.superClass) {
	                parts.push(" extends ", path.call(print, "superClass"), path.call(print, "superTypeParameters"));
	            }
	            if (n["implements"] && n["implements"].length > 0) {
	                parts.push(" implements ", lines_1.fromString(", ").join(path.map(print, "implements")));
	            }
	            parts.push(" ", path.call(print, "body"));
	            return lines_1.concat(parts);
	        case "TemplateElement":
	            return lines_1.fromString(n.value.raw, options).lockIndentTail();
	        case "TemplateLiteral": {
	            var expressions_1 = path.map(print, "expressions");
	            parts.push("`");
	            path.each(function (childPath) {
	                var i = childPath.getName();
	                parts.push(print(childPath));
	                if (i < expressions_1.length) {
	                    parts.push("${", expressions_1[i], "}");
	                }
	            }, "quasis");
	            parts.push("`");
	            return lines_1.concat(parts).lockIndentTail();
	        }
	        case "TaggedTemplateExpression":
	            return lines_1.concat([path.call(print, "tag"), path.call(print, "quasi")]);
	        // These types are unprintable because they serve as abstract
	        // supertypes for other (printable) types.
	        case "Node":
	        case "Printable":
	        case "SourceLocation":
	        case "Position":
	        case "Statement":
	        case "Function":
	        case "Pattern":
	        case "Expression":
	        case "Declaration":
	        case "Specifier":
	        case "NamedSpecifier":
	        case "Comment": // Supertype of Block and Line
	        case "Flow": // Supertype of all Flow AST node types
	        case "FlowType": // Supertype of all Flow types
	        case "FlowPredicate": // Supertype of InferredPredicate and DeclaredPredicate
	        case "MemberTypeAnnotation": // Flow
	        case "Type": // Flow
	        case "TSHasOptionalTypeParameterInstantiation":
	        case "TSHasOptionalTypeParameters":
	        case "TSHasOptionalTypeAnnotation":
	        case "ChainElement": // Supertype of MemberExpression and CallExpression
	            throw new Error("unprintable type: " + JSON.stringify(n.type));
	        case "CommentBlock": // Babel block comment.
	        case "Block": // Esprima block comment.
	            return lines_1.concat(["/*", lines_1.fromString(n.value, options), "*/"]);
	        case "CommentLine": // Babel line comment.
	        case "Line": // Esprima line comment.
	            return lines_1.concat(["//", lines_1.fromString(n.value, options)]);
	        // Type Annotations for Facebook Flow, typically stripped out or
	        // transformed away before printing.
	        case "TypeAnnotation":
	            if (n.typeAnnotation) {
	                if (n.typeAnnotation.type !== "FunctionTypeAnnotation") {
	                    parts.push(": ");
	                }
	                parts.push(path.call(print, "typeAnnotation"));
	                return lines_1.concat(parts);
	            }
	            return lines_1.fromString("");
	        case "ExistentialTypeParam":
	        case "ExistsTypeAnnotation":
	            return lines_1.fromString("*", options);
	        case "EmptyTypeAnnotation":
	            return lines_1.fromString("empty", options);
	        case "AnyTypeAnnotation":
	            return lines_1.fromString("any", options);
	        case "MixedTypeAnnotation":
	            return lines_1.fromString("mixed", options);
	        case "ArrayTypeAnnotation":
	            return lines_1.concat([path.call(print, "elementType"), "[]"]);
	        case "TupleTypeAnnotation": {
	            var printed_2 = path.map(print, "types");
	            var joined = lines_1.fromString(", ").join(printed_2);
	            var oneLine_3 = joined.getLineLength(1) <= options.wrapColumn;
	            if (oneLine_3) {
	                if (options.arrayBracketSpacing) {
	                    parts.push("[ ");
	                }
	                else {
	                    parts.push("[");
	                }
	            }
	            else {
	                parts.push("[\n");
	            }
	            path.each(function (elemPath) {
	                var i = elemPath.getName();
	                var elem = elemPath.getValue();
	                if (!elem) {
	                    // If the array expression ends with a hole, that hole
	                    // will be ignored by the interpreter, but if it ends with
	                    // two (or more) holes, we need to write out two (or more)
	                    // commas so that the resulting code is interpreted with
	                    // both (all) of the holes.
	                    parts.push(",");
	                }
	                else {
	                    var lines = printed_2[i];
	                    if (oneLine_3) {
	                        if (i > 0)
	                            parts.push(" ");
	                    }
	                    else {
	                        lines = lines.indent(options.tabWidth);
	                    }
	                    parts.push(lines);
	                    if (i < n.types.length - 1 ||
	                        (!oneLine_3 && util$i.isTrailingCommaEnabled(options, "arrays")))
	                        parts.push(",");
	                    if (!oneLine_3)
	                        parts.push("\n");
	                }
	            }, "types");
	            if (oneLine_3 && options.arrayBracketSpacing) {
	                parts.push(" ]");
	            }
	            else {
	                parts.push("]");
	            }
	            return lines_1.concat(parts);
	        }
	        case "BooleanTypeAnnotation":
	            return lines_1.fromString("boolean", options);
	        case "BooleanLiteralTypeAnnotation":
	            assert_1.default.strictEqual(typeof n.value, "boolean");
	            return lines_1.fromString("" + n.value, options);
	        case "InterfaceTypeAnnotation":
	            parts.push("interface");
	            if (n.extends && n.extends.length > 0) {
	                parts.push(" extends ", lines_1.fromString(", ").join(path.map(print, "extends")));
	            }
	            parts.push(" ", path.call(print, "body"));
	            return lines_1.concat(parts);
	        case "DeclareClass":
	            return printFlowDeclaration(path, [
	                "class ",
	                path.call(print, "id"),
	                " ",
	                path.call(print, "body"),
	            ]);
	        case "DeclareFunction":
	            return printFlowDeclaration(path, [
	                "function ",
	                path.call(print, "id"),
	                ";",
	            ]);
	        case "DeclareModule":
	            return printFlowDeclaration(path, [
	                "module ",
	                path.call(print, "id"),
	                " ",
	                path.call(print, "body"),
	            ]);
	        case "DeclareModuleExports":
	            return printFlowDeclaration(path, [
	                "module.exports",
	                path.call(print, "typeAnnotation"),
	            ]);
	        case "DeclareVariable":
	            return printFlowDeclaration(path, ["var ", path.call(print, "id"), ";"]);
	        case "DeclareExportDeclaration":
	        case "DeclareExportAllDeclaration":
	            return lines_1.concat(["declare ", printExportDeclaration(path, options, print)]);
	        case "EnumDeclaration":
	            return lines_1.concat([
	                "enum ",
	                path.call(print, "id"),
	                path.call(print, "body"),
	            ]);
	        case "EnumBooleanBody":
	        case "EnumNumberBody":
	        case "EnumStringBody":
	        case "EnumSymbolBody": {
	            if (n.type === "EnumSymbolBody" || n.explicitType) {
	                parts.push(" of ", 
	                // EnumBooleanBody => boolean, etc.
	                n.type.slice(4, -4).toLowerCase());
	            }
	            parts.push(" {\n", lines_1.fromString("\n")
	                .join(path.map(print, "members"))
	                .indent(options.tabWidth), "\n}");
	            return lines_1.concat(parts);
	        }
	        case "EnumDefaultedMember":
	            return lines_1.concat([path.call(print, "id"), ","]);
	        case "EnumBooleanMember":
	        case "EnumNumberMember":
	        case "EnumStringMember":
	            return lines_1.concat([
	                path.call(print, "id"),
	                " = ",
	                path.call(print, "init"),
	                ",",
	            ]);
	        case "InferredPredicate":
	            return lines_1.fromString("%checks", options);
	        case "DeclaredPredicate":
	            return lines_1.concat(["%checks(", path.call(print, "value"), ")"]);
	        case "FunctionTypeAnnotation": {
	            // FunctionTypeAnnotation is ambiguous:
	            // declare function(a: B): void; OR
	            // const A: (a: B) => void;
	            var parent = path.getParentNode(0);
	            var isArrowFunctionTypeAnnotation = !(namedTypes.ObjectTypeCallProperty.check(parent) ||
	                (namedTypes.ObjectTypeInternalSlot.check(parent) && parent.method) ||
	                namedTypes.DeclareFunction.check(path.getParentNode(2)));
	            var needsColon = isArrowFunctionTypeAnnotation &&
	                !namedTypes.FunctionTypeParam.check(parent) &&
	                !namedTypes.TypeAlias.check(parent);
	            if (needsColon) {
	                parts.push(": ");
	            }
	            var hasTypeParameters = !!n.typeParameters;
	            var needsParens = hasTypeParameters || n.params.length !== 1 || n.params[0].name;
	            parts.push(hasTypeParameters ? path.call(print, "typeParameters") : "", needsParens ? "(" : "", printFunctionParams(path, options, print), needsParens ? ")" : "");
	            // The returnType is not wrapped in a TypeAnnotation, so the colon
	            // needs to be added separately.
	            if (n.returnType) {
	                parts.push(isArrowFunctionTypeAnnotation ? " => " : ": ", path.call(print, "returnType"));
	            }
	            return lines_1.concat(parts);
	        }
	        case "FunctionTypeParam": {
	            var name = path.call(print, "name");
	            parts.push(name);
	            if (n.optional) {
	                parts.push("?");
	            }
	            if (name.infos[0].line) {
	                parts.push(": ");
	            }
	            parts.push(path.call(print, "typeAnnotation"));
	            return lines_1.concat(parts);
	        }
	        case "GenericTypeAnnotation":
	            return lines_1.concat([
	                path.call(print, "id"),
	                path.call(print, "typeParameters"),
	            ]);
	        case "DeclareInterface":
	            parts.push("declare ");
	        // Fall through to InterfaceDeclaration...
	        case "InterfaceDeclaration":
	        case "TSInterfaceDeclaration":
	            if (n.declare) {
	                parts.push("declare ");
	            }
	            parts.push("interface ", path.call(print, "id"), path.call(print, "typeParameters"), " ");
	            if (n["extends"] && n["extends"].length > 0) {
	                parts.push("extends ", lines_1.fromString(", ").join(path.map(print, "extends")), " ");
	            }
	            if (n.body) {
	                parts.push(path.call(print, "body"));
	            }
	            return lines_1.concat(parts);
	        case "ClassImplements":
	        case "InterfaceExtends":
	            return lines_1.concat([
	                path.call(print, "id"),
	                path.call(print, "typeParameters"),
	            ]);
	        case "IntersectionTypeAnnotation":
	            return lines_1.fromString(" & ").join(path.map(print, "types"));
	        case "NullableTypeAnnotation":
	            return lines_1.concat(["?", path.call(print, "typeAnnotation")]);
	        case "NullLiteralTypeAnnotation":
	            return lines_1.fromString("null", options);
	        case "ThisTypeAnnotation":
	            return lines_1.fromString("this", options);
	        case "NumberTypeAnnotation":
	            return lines_1.fromString("number", options);
	        case "ObjectTypeCallProperty":
	            return path.call(print, "value");
	        case "ObjectTypeIndexer":
	            if (n.static) {
	                parts.push("static ");
	            }
	            parts.push(printVariance(path, print), "[");
	            if (n.id) {
	                parts.push(path.call(print, "id"), ": ");
	            }
	            parts.push(path.call(print, "key"), "]: ", path.call(print, "value"));
	            return lines_1.concat(parts);
	        case "ObjectTypeProperty":
	            return lines_1.concat([
	                printVariance(path, print),
	                path.call(print, "key"),
	                n.optional ? "?" : "",
	                ": ",
	                path.call(print, "value"),
	            ]);
	        case "ObjectTypeInternalSlot":
	            return lines_1.concat([
	                n.static ? "static " : "",
	                "[[",
	                path.call(print, "id"),
	                "]]",
	                n.optional ? "?" : "",
	                n.value.type !== "FunctionTypeAnnotation" ? ": " : "",
	                path.call(print, "value"),
	            ]);
	        case "QualifiedTypeIdentifier":
	            return lines_1.concat([
	                path.call(print, "qualification"),
	                ".",
	                path.call(print, "id"),
	            ]);
	        case "StringLiteralTypeAnnotation":
	            return lines_1.fromString(nodeStr(n.value, options), options);
	        case "NumberLiteralTypeAnnotation":
	        case "NumericLiteralTypeAnnotation":
	            assert_1.default.strictEqual(typeof n.value, "number");
	            return lines_1.fromString(JSON.stringify(n.value), options);
	        case "BigIntLiteralTypeAnnotation":
	            return lines_1.fromString(n.raw, options);
	        case "StringTypeAnnotation":
	            return lines_1.fromString("string", options);
	        case "DeclareTypeAlias":
	            parts.push("declare ");
	        // Fall through to TypeAlias...
	        case "TypeAlias":
	            return lines_1.concat([
	                "type ",
	                path.call(print, "id"),
	                path.call(print, "typeParameters"),
	                " = ",
	                path.call(print, "right"),
	                ";",
	            ]);
	        case "DeclareOpaqueType":
	            parts.push("declare ");
	        // Fall through to OpaqueType...
	        case "OpaqueType":
	            parts.push("opaque type ", path.call(print, "id"), path.call(print, "typeParameters"));
	            if (n["supertype"]) {
	                parts.push(": ", path.call(print, "supertype"));
	            }
	            if (n["impltype"]) {
	                parts.push(" = ", path.call(print, "impltype"));
	            }
	            parts.push(";");
	            return lines_1.concat(parts);
	        case "TypeCastExpression":
	            return lines_1.concat([
	                "(",
	                path.call(print, "expression"),
	                path.call(print, "typeAnnotation"),
	                ")",
	            ]);
	        case "TypeParameterDeclaration":
	        case "TypeParameterInstantiation":
	            return lines_1.concat([
	                "<",
	                lines_1.fromString(", ").join(path.map(print, "params")),
	                ">",
	            ]);
	        case "Variance":
	            if (n.kind === "plus") {
	                return lines_1.fromString("+");
	            }
	            if (n.kind === "minus") {
	                return lines_1.fromString("-");
	            }
	            return lines_1.fromString("");
	        case "TypeParameter":
	            if (n.variance) {
	                parts.push(printVariance(path, print));
	            }
	            parts.push(path.call(print, "name"));
	            if (n.bound) {
	                parts.push(path.call(print, "bound"));
	            }
	            if (n["default"]) {
	                parts.push("=", path.call(print, "default"));
	            }
	            return lines_1.concat(parts);
	        case "TypeofTypeAnnotation":
	            return lines_1.concat([
	                lines_1.fromString("typeof ", options),
	                path.call(print, "argument"),
	            ]);
	        case "UnionTypeAnnotation":
	            return lines_1.fromString(" | ").join(path.map(print, "types"));
	        case "VoidTypeAnnotation":
	            return lines_1.fromString("void", options);
	        case "NullTypeAnnotation":
	            return lines_1.fromString("null", options);
	        case "SymbolTypeAnnotation":
	            return lines_1.fromString("symbol", options);
	        case "BigIntTypeAnnotation":
	            return lines_1.fromString("bigint", options);
	        // Type Annotations for TypeScript (when using Babylon as parser)
	        case "TSType":
	            throw new Error("unprintable type: " + JSON.stringify(n.type));
	        case "TSNumberKeyword":
	            return lines_1.fromString("number", options);
	        case "TSBigIntKeyword":
	            return lines_1.fromString("bigint", options);
	        case "TSObjectKeyword":
	            return lines_1.fromString("object", options);
	        case "TSBooleanKeyword":
	            return lines_1.fromString("boolean", options);
	        case "TSStringKeyword":
	            return lines_1.fromString("string", options);
	        case "TSSymbolKeyword":
	            return lines_1.fromString("symbol", options);
	        case "TSAnyKeyword":
	            return lines_1.fromString("any", options);
	        case "TSVoidKeyword":
	            return lines_1.fromString("void", options);
	        case "TSThisType":
	            return lines_1.fromString("this", options);
	        case "TSNullKeyword":
	            return lines_1.fromString("null", options);
	        case "TSUndefinedKeyword":
	            return lines_1.fromString("undefined", options);
	        case "TSUnknownKeyword":
	            return lines_1.fromString("unknown", options);
	        case "TSNeverKeyword":
	            return lines_1.fromString("never", options);
	        case "TSArrayType":
	            return lines_1.concat([path.call(print, "elementType"), "[]"]);
	        case "TSLiteralType":
	            return path.call(print, "literal");
	        case "TSUnionType":
	            return lines_1.fromString(" | ").join(path.map(print, "types"));
	        case "TSIntersectionType":
	            return lines_1.fromString(" & ").join(path.map(print, "types"));
	        case "TSConditionalType":
	            parts.push(path.call(print, "checkType"), " extends ", path.call(print, "extendsType"), " ? ", path.call(print, "trueType"), " : ", path.call(print, "falseType"));
	            return lines_1.concat(parts);
	        case "TSInferType":
	            parts.push("infer ", path.call(print, "typeParameter"));
	            return lines_1.concat(parts);
	        case "TSParenthesizedType":
	            return lines_1.concat(["(", path.call(print, "typeAnnotation"), ")"]);
	        case "TSFunctionType":
	            return lines_1.concat([
	                path.call(print, "typeParameters"),
	                "(",
	                printFunctionParams(path, options, print),
	                ") => ",
	                path.call(print, "typeAnnotation", "typeAnnotation"),
	            ]);
	        case "TSConstructorType":
	            return lines_1.concat([
	                "new ",
	                path.call(print, "typeParameters"),
	                "(",
	                printFunctionParams(path, options, print),
	                ") => ",
	                path.call(print, "typeAnnotation", "typeAnnotation"),
	            ]);
	        case "TSMappedType": {
	            parts.push(n.readonly ? "readonly " : "", "[", path.call(print, "typeParameter"), "]", n.optional ? "?" : "");
	            if (n.typeAnnotation) {
	                parts.push(": ", path.call(print, "typeAnnotation"), ";");
	            }
	            return lines_1.concat(["{\n", lines_1.concat(parts).indent(options.tabWidth), "\n}"]);
	        }
	        case "TSTupleType":
	            return lines_1.concat([
	                "[",
	                lines_1.fromString(", ").join(path.map(print, "elementTypes")),
	                "]",
	            ]);
	        case "TSNamedTupleMember":
	            parts.push(path.call(print, "label"));
	            if (n.optional) {
	                parts.push("?");
	            }
	            parts.push(": ", path.call(print, "elementType"));
	            return lines_1.concat(parts);
	        case "TSRestType":
	            return lines_1.concat(["...", path.call(print, "typeAnnotation")]);
	        case "TSOptionalType":
	            return lines_1.concat([path.call(print, "typeAnnotation"), "?"]);
	        case "TSIndexedAccessType":
	            return lines_1.concat([
	                path.call(print, "objectType"),
	                "[",
	                path.call(print, "indexType"),
	                "]",
	            ]);
	        case "TSTypeOperator":
	            return lines_1.concat([
	                path.call(print, "operator"),
	                " ",
	                path.call(print, "typeAnnotation"),
	            ]);
	        case "TSTypeLiteral": {
	            var memberLines = lines_1.fromString(",\n").join(path.map(print, "members"));
	            if (memberLines.isEmpty()) {
	                return lines_1.fromString("{}", options);
	            }
	            parts.push("{\n", memberLines.indent(options.tabWidth), "\n}");
	            return lines_1.concat(parts);
	        }
	        case "TSEnumMember":
	            parts.push(path.call(print, "id"));
	            if (n.initializer) {
	                parts.push(" = ", path.call(print, "initializer"));
	            }
	            return lines_1.concat(parts);
	        case "TSTypeQuery":
	            return lines_1.concat(["typeof ", path.call(print, "exprName")]);
	        case "TSParameterProperty":
	            if (n.accessibility) {
	                parts.push(n.accessibility, " ");
	            }
	            if (n.export) {
	                parts.push("export ");
	            }
	            if (n.static) {
	                parts.push("static ");
	            }
	            if (n.readonly) {
	                parts.push("readonly ");
	            }
	            parts.push(path.call(print, "parameter"));
	            return lines_1.concat(parts);
	        case "TSTypeReference":
	            return lines_1.concat([
	                path.call(print, "typeName"),
	                path.call(print, "typeParameters"),
	            ]);
	        case "TSQualifiedName":
	            return lines_1.concat([path.call(print, "left"), ".", path.call(print, "right")]);
	        case "TSAsExpression": {
	            var expression = path.call(print, "expression");
	            parts.push(expression, lines_1.fromString(" as "), path.call(print, "typeAnnotation"));
	            return lines_1.concat(parts);
	        }
	        case "TSNonNullExpression":
	            return lines_1.concat([path.call(print, "expression"), "!"]);
	        case "TSTypeAnnotation":
	            return lines_1.concat([": ", path.call(print, "typeAnnotation")]);
	        case "TSIndexSignature":
	            return lines_1.concat([
	                n.readonly ? "readonly " : "",
	                "[",
	                path.map(print, "parameters"),
	                "]",
	                path.call(print, "typeAnnotation"),
	            ]);
	        case "TSPropertySignature":
	            parts.push(printVariance(path, print), n.readonly ? "readonly " : "");
	            if (n.computed) {
	                parts.push("[", path.call(print, "key"), "]");
	            }
	            else {
	                parts.push(path.call(print, "key"));
	            }
	            parts.push(n.optional ? "?" : "", path.call(print, "typeAnnotation"));
	            return lines_1.concat(parts);
	        case "TSMethodSignature":
	            if (n.computed) {
	                parts.push("[", path.call(print, "key"), "]");
	            }
	            else {
	                parts.push(path.call(print, "key"));
	            }
	            if (n.optional) {
	                parts.push("?");
	            }
	            parts.push(path.call(print, "typeParameters"), "(", printFunctionParams(path, options, print), ")", path.call(print, "typeAnnotation"));
	            return lines_1.concat(parts);
	        case "TSTypePredicate":
	            if (n.asserts) {
	                parts.push("asserts ");
	            }
	            parts.push(path.call(print, "parameterName"));
	            if (n.typeAnnotation) {
	                parts.push(" is ", path.call(print, "typeAnnotation", "typeAnnotation"));
	            }
	            return lines_1.concat(parts);
	        case "TSCallSignatureDeclaration":
	            return lines_1.concat([
	                path.call(print, "typeParameters"),
	                "(",
	                printFunctionParams(path, options, print),
	                ")",
	                path.call(print, "typeAnnotation"),
	            ]);
	        case "TSConstructSignatureDeclaration":
	            if (n.typeParameters) {
	                parts.push("new", path.call(print, "typeParameters"));
	            }
	            else {
	                parts.push("new ");
	            }
	            parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "typeAnnotation"));
	            return lines_1.concat(parts);
	        case "TSTypeAliasDeclaration":
	            return lines_1.concat([
	                n.declare ? "declare " : "",
	                "type ",
	                path.call(print, "id"),
	                path.call(print, "typeParameters"),
	                " = ",
	                path.call(print, "typeAnnotation"),
	                ";",
	            ]);
	        case "TSTypeParameter": {
	            parts.push(path.call(print, "name"));
	            // ambiguous because of TSMappedType
	            var parent = path.getParentNode(0);
	            var isInMappedType = namedTypes.TSMappedType.check(parent);
	            if (n.constraint) {
	                parts.push(isInMappedType ? " in " : " extends ", path.call(print, "constraint"));
	            }
	            if (n["default"]) {
	                parts.push(" = ", path.call(print, "default"));
	            }
	            return lines_1.concat(parts);
	        }
	        case "TSTypeAssertion": {
	            parts.push("<", path.call(print, "typeAnnotation"), "> ", path.call(print, "expression"));
	            return lines_1.concat(parts);
	        }
	        case "TSTypeParameterDeclaration":
	        case "TSTypeParameterInstantiation":
	            return lines_1.concat([
	                "<",
	                lines_1.fromString(", ").join(path.map(print, "params")),
	                ">",
	            ]);
	        case "TSEnumDeclaration": {
	            parts.push(n.declare ? "declare " : "", n.const ? "const " : "", "enum ", path.call(print, "id"));
	            var memberLines = lines_1.fromString(",\n").join(path.map(print, "members"));
	            if (memberLines.isEmpty()) {
	                parts.push(" {}");
	            }
	            else {
	                parts.push(" {\n", memberLines.indent(options.tabWidth), "\n}");
	            }
	            return lines_1.concat(parts);
	        }
	        case "TSExpressionWithTypeArguments":
	            return lines_1.concat([
	                path.call(print, "expression"),
	                path.call(print, "typeParameters"),
	            ]);
	        case "TSInterfaceBody": {
	            var lines = lines_1.fromString(";\n").join(path.map(print, "body"));
	            if (lines.isEmpty()) {
	                return lines_1.fromString("{}", options);
	            }
	            return lines_1.concat(["{\n", lines.indent(options.tabWidth), ";", "\n}"]);
	        }
	        case "TSImportType":
	            parts.push("import(", path.call(print, "argument"), ")");
	            if (n.qualifier) {
	                parts.push(".", path.call(print, "qualifier"));
	            }
	            if (n.typeParameters) {
	                parts.push(path.call(print, "typeParameters"));
	            }
	            return lines_1.concat(parts);
	        case "TSImportEqualsDeclaration":
	            if (n.isExport) {
	                parts.push("export ");
	            }
	            parts.push("import ", path.call(print, "id"), " = ", path.call(print, "moduleReference"));
	            return maybeAddSemicolon(lines_1.concat(parts));
	        case "TSExternalModuleReference":
	            return lines_1.concat(["require(", path.call(print, "expression"), ")"]);
	        case "TSModuleDeclaration": {
	            var parent = path.getParentNode();
	            if (parent.type === "TSModuleDeclaration") {
	                parts.push(".");
	            }
	            else {
	                if (n.declare) {
	                    parts.push("declare ");
	                }
	                if (!n.global) {
	                    var isExternal = n.id.type === "StringLiteral" ||
	                        (n.id.type === "Literal" && typeof n.id.value === "string");
	                    if (isExternal) {
	                        parts.push("module ");
	                    }
	                    else if (n.loc && n.loc.lines && n.id.loc) {
	                        var prefix = n.loc.lines.sliceString(n.loc.start, n.id.loc.start);
	                        // These keywords are fundamentally ambiguous in the
	                        // Babylon parser, and not reflected in the AST, so
	                        // the best we can do is to match the original code,
	                        // when possible.
	                        if (prefix.indexOf("module") >= 0) {
	                            parts.push("module ");
	                        }
	                        else {
	                            parts.push("namespace ");
	                        }
	                    }
	                    else {
	                        parts.push("namespace ");
	                    }
	                }
	            }
	            parts.push(path.call(print, "id"));
	            if (n.body && n.body.type === "TSModuleDeclaration") {
	                parts.push(path.call(print, "body"));
	            }
	            else if (n.body) {
	                var bodyLines = path.call(print, "body");
	                if (bodyLines.isEmpty()) {
	                    parts.push(" {}");
	                }
	                else {
	                    parts.push(" {\n", bodyLines.indent(options.tabWidth), "\n}");
	                }
	            }
	            return lines_1.concat(parts);
	        }
	        case "TSModuleBlock":
	            return path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body");
	        // Unhandled types below. If encountered, nodes of these types should
	        // be either left alone or desugared into AST types that are fully
	        // supported by the pretty-printer.
	        case "ClassHeritage": // TODO
	        case "ComprehensionBlock": // TODO
	        case "ComprehensionExpression": // TODO
	        case "Glob": // TODO
	        case "GeneratorExpression": // TODO
	        case "LetStatement": // TODO
	        case "LetExpression": // TODO
	        case "GraphExpression": // TODO
	        case "GraphIndexExpression": // TODO
	        case "XMLDefaultDeclaration":
	        case "XMLAnyName":
	        case "XMLQualifiedIdentifier":
	        case "XMLFunctionQualifiedIdentifier":
	        case "XMLAttributeSelector":
	        case "XMLFilterExpression":
	        case "XML":
	        case "XMLElement":
	        case "XMLList":
	        case "XMLEscape":
	        case "XMLText":
	        case "XMLStartTag":
	        case "XMLEndTag":
	        case "XMLPointTag":
	        case "XMLName":
	        case "XMLAttribute":
	        case "XMLCdata":
	        case "XMLComment":
	        case "XMLProcessingInstruction":
	        default:
	            debugger;
	            throw new Error("unknown type: " + JSON.stringify(n.type));
	    }
	}
	function printDecorators(path, printPath) {
	    var parts = [];
	    var node = path.getValue();
	    if (node.decorators &&
	        node.decorators.length > 0 &&
	        // If the parent node is an export declaration, it will be
	        // responsible for printing node.decorators.
	        !util$i.getParentExportDeclaration(path)) {
	        path.each(function (decoratorPath) {
	            parts.push(printPath(decoratorPath), "\n");
	        }, "decorators");
	    }
	    else if (util$i.isExportDeclaration(node) &&
	        node.declaration &&
	        node.declaration.decorators) {
	        // Export declarations are responsible for printing any decorators
	        // that logically apply to node.declaration.
	        path.each(function (decoratorPath) {
	            parts.push(printPath(decoratorPath), "\n");
	        }, "declaration", "decorators");
	    }
	    return lines_1.concat(parts);
	}
	function printStatementSequence(path, options, print) {
	    var filtered = [];
	    var sawComment = false;
	    var sawStatement = false;
	    path.each(function (stmtPath) {
	        var stmt = stmtPath.getValue();
	        // Just in case the AST has been modified to contain falsy
	        // "statements," it's safer simply to skip them.
	        if (!stmt) {
	            return;
	        }
	        // Skip printing EmptyStatement nodes to avoid leaving stray
	        // semicolons lying around.
	        if (stmt.type === "EmptyStatement" &&
	            !(stmt.comments && stmt.comments.length > 0)) {
	            return;
	        }
	        if (namedTypes.Comment.check(stmt)) {
	            // The pretty printer allows a dangling Comment node to act as
	            // a Statement when the Comment can't be attached to any other
	            // non-Comment node in the tree.
	            sawComment = true;
	        }
	        else if (namedTypes.Statement.check(stmt)) {
	            sawStatement = true;
	        }
	        else {
	            // When the pretty printer encounters a string instead of an
	            // AST node, it just prints the string. This behavior can be
	            // useful for fine-grained formatting decisions like inserting
	            // blank lines.
	            isString$1.assert(stmt);
	        }
	        // We can't hang onto stmtPath outside of this function, because
	        // it's just a reference to a mutable FastPath object, so we have
	        // to go ahead and print it here.
	        filtered.push({
	            node: stmt,
	            printed: print(stmtPath),
	        });
	    });
	    if (sawComment) {
	        assert_1.default.strictEqual(sawStatement, false, "Comments may appear as statements in otherwise empty statement " +
	            "lists, but may not coexist with non-Comment nodes.");
	    }
	    var prevTrailingSpace = null;
	    var len = filtered.length;
	    var parts = [];
	    filtered.forEach(function (info, i) {
	        var printed = info.printed;
	        var stmt = info.node;
	        var multiLine = printed.length > 1;
	        var notFirst = i > 0;
	        var notLast = i < len - 1;
	        var leadingSpace;
	        var trailingSpace;
	        var lines = stmt && stmt.loc && stmt.loc.lines;
	        var trueLoc = lines && options.reuseWhitespace && util$i.getTrueLoc(stmt, lines);
	        if (notFirst) {
	            if (trueLoc) {
	                var beforeStart = lines.skipSpaces(trueLoc.start, true);
	                var beforeStartLine = beforeStart ? beforeStart.line : 1;
	                var leadingGap = trueLoc.start.line - beforeStartLine;
	                leadingSpace = Array(leadingGap + 1).join("\n");
	            }
	            else {
	                leadingSpace = multiLine ? "\n\n" : "\n";
	            }
	        }
	        else {
	            leadingSpace = "";
	        }
	        if (notLast) {
	            if (trueLoc) {
	                var afterEnd = lines.skipSpaces(trueLoc.end);
	                var afterEndLine = afterEnd ? afterEnd.line : lines.length;
	                var trailingGap = afterEndLine - trueLoc.end.line;
	                trailingSpace = Array(trailingGap + 1).join("\n");
	            }
	            else {
	                trailingSpace = multiLine ? "\n\n" : "\n";
	            }
	        }
	        else {
	            trailingSpace = "";
	        }
	        parts.push(maxSpace(prevTrailingSpace, leadingSpace), printed);
	        if (notLast) {
	            prevTrailingSpace = trailingSpace;
	        }
	        else if (trailingSpace) {
	            parts.push(trailingSpace);
	        }
	    });
	    return lines_1.concat(parts);
	}
	function maxSpace(s1, s2) {
	    if (!s1 && !s2) {
	        return lines_1.fromString("");
	    }
	    if (!s1) {
	        return lines_1.fromString(s2);
	    }
	    if (!s2) {
	        return lines_1.fromString(s1);
	    }
	    var spaceLines1 = lines_1.fromString(s1);
	    var spaceLines2 = lines_1.fromString(s2);
	    if (spaceLines2.length > spaceLines1.length) {
	        return spaceLines2;
	    }
	    return spaceLines1;
	}
	function printMethod(path, options, print) {
	    var node = path.getNode();
	    var kind = node.kind;
	    var parts = [];
	    var nodeValue = node.value;
	    if (!namedTypes.FunctionExpression.check(nodeValue)) {
	        nodeValue = node;
	    }
	    var access = node.accessibility || node.access;
	    if (typeof access === "string") {
	        parts.push(access, " ");
	    }
	    if (node.static) {
	        parts.push("static ");
	    }
	    if (node.abstract) {
	        parts.push("abstract ");
	    }
	    if (node.readonly) {
	        parts.push("readonly ");
	    }
	    if (nodeValue.async) {
	        parts.push("async ");
	    }
	    if (nodeValue.generator) {
	        parts.push("*");
	    }
	    if (kind === "get" || kind === "set") {
	        parts.push(kind, " ");
	    }
	    var key = path.call(print, "key");
	    if (node.computed) {
	        key = lines_1.concat(["[", key, "]"]);
	    }
	    parts.push(key);
	    if (node.optional) {
	        parts.push("?");
	    }
	    if (node === nodeValue) {
	        parts.push(path.call(print, "typeParameters"), "(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"));
	        if (node.body) {
	            parts.push(" ", path.call(print, "body"));
	        }
	        else {
	            parts.push(";");
	        }
	    }
	    else {
	        parts.push(path.call(print, "value", "typeParameters"), "(", path.call(function (valuePath) { return printFunctionParams(valuePath, options, print); }, "value"), ")", path.call(print, "value", "returnType"));
	        if (nodeValue.body) {
	            parts.push(" ", path.call(print, "value", "body"));
	        }
	        else {
	            parts.push(";");
	        }
	    }
	    return lines_1.concat(parts);
	}
	function printArgumentsList(path, options, print) {
	    var printed = path.map(print, "arguments");
	    var trailingComma = util$i.isTrailingCommaEnabled(options, "parameters");
	    var joined = lines_1.fromString(", ").join(printed);
	    if (joined.getLineLength(1) > options.wrapColumn) {
	        joined = lines_1.fromString(",\n").join(printed);
	        return lines_1.concat([
	            "(\n",
	            joined.indent(options.tabWidth),
	            trailingComma ? ",\n)" : "\n)",
	        ]);
	    }
	    return lines_1.concat(["(", joined, ")"]);
	}
	function printFunctionParams(path, options, print) {
	    var fun = path.getValue();
	    var params;
	    var printed = [];
	    if (fun.params) {
	        params = fun.params;
	        printed = path.map(print, "params");
	    }
	    else if (fun.parameters) {
	        params = fun.parameters;
	        printed = path.map(print, "parameters");
	    }
	    if (fun.defaults) {
	        path.each(function (defExprPath) {
	            var i = defExprPath.getName();
	            var p = printed[i];
	            if (p && defExprPath.getValue()) {
	                printed[i] = lines_1.concat([p, " = ", print(defExprPath)]);
	            }
	        }, "defaults");
	    }
	    if (fun.rest) {
	        printed.push(lines_1.concat(["...", path.call(print, "rest")]));
	    }
	    var joined = lines_1.fromString(", ").join(printed);
	    if (joined.length > 1 || joined.getLineLength(1) > options.wrapColumn) {
	        joined = lines_1.fromString(",\n").join(printed);
	        if (util$i.isTrailingCommaEnabled(options, "parameters") &&
	            !fun.rest &&
	            params[params.length - 1].type !== "RestElement") {
	            joined = lines_1.concat([joined, ",\n"]);
	        }
	        else {
	            joined = lines_1.concat([joined, "\n"]);
	        }
	        return lines_1.concat(["\n", joined.indent(options.tabWidth)]);
	    }
	    return joined;
	}
	function printExportDeclaration(path, options, print) {
	    var decl = path.getValue();
	    var parts = ["export "];
	    if (decl.exportKind && decl.exportKind === "type") {
	        if (!decl.declaration) {
	            parts.push("type ");
	        }
	    }
	    var shouldPrintSpaces = options.objectCurlySpacing;
	    namedTypes.Declaration.assert(decl);
	    if (decl["default"] || decl.type === "ExportDefaultDeclaration") {
	        parts.push("default ");
	    }
	    if (decl.declaration) {
	        parts.push(path.call(print, "declaration"));
	    }
	    else if (decl.specifiers) {
	        if (decl.specifiers.length === 1 &&
	            decl.specifiers[0].type === "ExportBatchSpecifier") {
	            parts.push("*");
	        }
	        else if (decl.specifiers.length === 0) {
	            parts.push("{}");
	        }
	        else if (decl.specifiers[0].type === "ExportDefaultSpecifier") {
	            var unbracedSpecifiers_2 = [];
	            var bracedSpecifiers_2 = [];
	            path.each(function (specifierPath) {
	                var spec = specifierPath.getValue();
	                if (spec.type === "ExportDefaultSpecifier") {
	                    unbracedSpecifiers_2.push(print(specifierPath));
	                }
	                else {
	                    bracedSpecifiers_2.push(print(specifierPath));
	                }
	            }, "specifiers");
	            unbracedSpecifiers_2.forEach(function (lines, i) {
	                if (i > 0) {
	                    parts.push(", ");
	                }
	                parts.push(lines);
	            });
	            if (bracedSpecifiers_2.length > 0) {
	                var lines_2 = lines_1.fromString(", ").join(bracedSpecifiers_2);
	                if (lines_2.getLineLength(1) > options.wrapColumn) {
	                    lines_2 = lines_1.concat([
	                        lines_1.fromString(",\n").join(bracedSpecifiers_2).indent(options.tabWidth),
	                        ",",
	                    ]);
	                }
	                if (unbracedSpecifiers_2.length > 0) {
	                    parts.push(", ");
	                }
	                if (lines_2.length > 1) {
	                    parts.push("{\n", lines_2, "\n}");
	                }
	                else if (options.objectCurlySpacing) {
	                    parts.push("{ ", lines_2, " }");
	                }
	                else {
	                    parts.push("{", lines_2, "}");
	                }
	            }
	        }
	        else {
	            parts.push(shouldPrintSpaces ? "{ " : "{", lines_1.fromString(", ").join(path.map(print, "specifiers")), shouldPrintSpaces ? " }" : "}");
	        }
	        if (decl.source) {
	            parts.push(" from ", path.call(print, "source"));
	        }
	    }
	    var lines = lines_1.concat(parts);
	    if (lastNonSpaceCharacter(lines) !== ";" &&
	        !(decl.declaration &&
	            (decl.declaration.type === "FunctionDeclaration" ||
	                decl.declaration.type === "ClassDeclaration" ||
	                decl.declaration.type === "TSModuleDeclaration" ||
	                decl.declaration.type === "TSInterfaceDeclaration" ||
	                decl.declaration.type === "TSEnumDeclaration"))) {
	        lines = lines_1.concat([lines, ";"]);
	    }
	    return lines;
	}
	function printFlowDeclaration(path, parts) {
	    var parentExportDecl = util$i.getParentExportDeclaration(path);
	    if (parentExportDecl) {
	        assert_1.default.strictEqual(parentExportDecl.type, "DeclareExportDeclaration");
	    }
	    else {
	        // If the parent node has type DeclareExportDeclaration, then it
	        // will be responsible for printing the "declare" token. Otherwise
	        // it needs to be printed with this non-exported declaration node.
	        parts.unshift("declare ");
	    }
	    return lines_1.concat(parts);
	}
	function printVariance(path, print) {
	    return path.call(function (variancePath) {
	        var value = variancePath.getValue();
	        if (value) {
	            if (value === "plus") {
	                return lines_1.fromString("+");
	            }
	            if (value === "minus") {
	                return lines_1.fromString("-");
	            }
	            return print(variancePath);
	        }
	        return lines_1.fromString("");
	    }, "variance");
	}
	function adjustClause(clause, options) {
	    if (clause.length > 1)
	        return lines_1.concat([" ", clause]);
	    return lines_1.concat(["\n", maybeAddSemicolon(clause).indent(options.tabWidth)]);
	}
	function lastNonSpaceCharacter(lines) {
	    var pos = lines.lastPos();
	    do {
	        var ch = lines.charAt(pos);
	        if (/\S/.test(ch))
	            return ch;
	    } while (lines.prevPos(pos));
	}
	function endsWithBrace(lines) {
	    return lastNonSpaceCharacter(lines) === "}";
	}
	function swapQuotes(str) {
	    return str.replace(/['"]/g, function (m) { return (m === '"' ? "'" : '"'); });
	}
	function nodeStr(str, options) {
	    isString$1.assert(str);
	    switch (options.quote) {
	        case "auto": {
	            var double = JSON.stringify(str);
	            var single = swapQuotes(JSON.stringify(swapQuotes(str)));
	            return double.length > single.length ? single : double;
	        }
	        case "single":
	            return swapQuotes(JSON.stringify(swapQuotes(str)));
	        case "double":
	        default:
	            return JSON.stringify(str);
	    }
	}
	function maybeAddSemicolon(lines) {
	    var eoc = lastNonSpaceCharacter(lines);
	    if (!eoc || "\n};".indexOf(eoc) < 0)
	        return lines_1.concat([lines, ";"]);
	    return lines;
	}

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.run = exports.prettyPrint = exports.print = exports.types = exports.parse = void 0;
	var tslib_1 = require$$0$6;
	var fs_1 = tslib_1.__importDefault(require$$0__default$2['default']);
	var types = tslib_1.__importStar(main);
	exports.types = types;
	var parser_1 = parser$3;
	Object.defineProperty(exports, "parse", { enumerable: true, get: function () { return parser_1.parse; } });
	var printer_1 = printer$2;
	/**
	 * Traverse and potentially modify an abstract syntax tree using a
	 * convenient visitor syntax:
	 *
	 *   recast.visit(ast, {
	 *     names: [],
	 *     visitIdentifier: function(path) {
	 *       var node = path.value;
	 *       this.visitor.names.push(node.name);
	 *       this.traverse(path);
	 *     }
	 *   });
	 */
	var ast_types_1 = main;
	Object.defineProperty(exports, "visit", { enumerable: true, get: function () { return ast_types_1.visit; } });
	/**
	 * Reprint a modified syntax tree using as much of the original source
	 * code as possible.
	 */
	function print(node, options) {
	    return new printer_1.Printer(options).print(node);
	}
	exports.print = print;
	/**
	 * Print without attempting to reuse any original source code.
	 */
	function prettyPrint(node, options) {
	    return new printer_1.Printer(options).printGenerically(node);
	}
	exports.prettyPrint = prettyPrint;
	/**
	 * Convenient command-line interface (see e.g. example/add-braces).
	 */
	function run(transformer, options) {
	    return runFile(process.argv[2], transformer, options);
	}
	exports.run = run;
	function runFile(path, transformer, options) {
	    fs_1.default.readFile(path, "utf-8", function (err, code) {
	        if (err) {
	            console.error(err);
	            return;
	        }
	        runString(code, transformer, options);
	    });
	}
	function defaultWriteback(output) {
	    process.stdout.write(output);
	}
	function runString(code, transformer, options) {
	    var writeback = options && options.writeback || defaultWriteback;
	    transformer(parser_1.parse(code, options), function (node) {
	        writeback(print(node, options).code);
	    });
	}
	}(main$1));

	var base64Vlq$2 = {};

	var base64$5 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	const intToCharMap$2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");

	/**
	 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	 */
	base64$5.encode = function(number) {
	  if (0 <= number && number < intToCharMap$2.length) {
	    return intToCharMap$2[number];
	  }
	  throw new TypeError("Must be between 0 and 63: " + number);
	};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	const base64$4 = base64$5;

	// A single base 64 digit can contain 6 bits of data. For the base 64 variable
	// length quantities we use in the source map spec, the first bit is the sign,
	// the next four bits are the actual value, and the 6th bit is the
	// continuation bit. The continuation bit tells us whether there are more
	// digits in this value following this digit.
	//
	//   Continuation
	//   |    Sign
	//   |    |
	//   V    V
	//   101011

	const VLQ_BASE_SHIFT$2 = 5;

	// binary: 100000
	const VLQ_BASE$2 = 1 << VLQ_BASE_SHIFT$2;

	// binary: 011111
	const VLQ_BASE_MASK$2 = VLQ_BASE$2 - 1;

	// binary: 100000
	const VLQ_CONTINUATION_BIT$2 = VLQ_BASE$2;

	/**
	 * Converts from a two-complement value to a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	 */
	function toVLQSigned$2(aValue) {
	  return aValue < 0
	    ? ((-aValue) << 1) + 1
	    : (aValue << 1) + 0;
	}

	/**
	 * Returns the base 64 VLQ encoded value.
	 */
	base64Vlq$2.encode = function base64VLQ_encode(aValue) {
	  let encoded = "";
	  let digit;

	  let vlq = toVLQSigned$2(aValue);

	  do {
	    digit = vlq & VLQ_BASE_MASK$2;
	    vlq >>>= VLQ_BASE_SHIFT$2;
	    if (vlq > 0) {
	      // There are still more digits in this value, so we must make sure the
	      // continuation bit is marked.
	      digit |= VLQ_CONTINUATION_BIT$2;
	    }
	    encoded += base64$4.encode(digit);
	  } while (vlq > 0);

	  return encoded;
	};

	var util$h = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	(function (exports) {
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	/**
	 * This is a helper function for getting values from parameter/options
	 * objects.
	 *
	 * @param args The object we are extracting values from
	 * @param name The name of the property we are getting.
	 * @param defaultValue An optional value to return if the property is missing
	 * from the object. If this is not specified and the property is missing, an
	 * error will be thrown.
	 */
	function getArg(aArgs, aName, aDefaultValue) {
	  if (aName in aArgs) {
	    return aArgs[aName];
	  } else if (arguments.length === 3) {
	    return aDefaultValue;
	  }
	    throw new Error('"' + aName + '" is a required argument.');

	}
	exports.getArg = getArg;

	const urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
	const dataUrlRegexp = /^data:.+\,.+$/;

	function urlParse(aUrl) {
	  const match = aUrl.match(urlRegexp);
	  if (!match) {
	    return null;
	  }
	  return {
	    scheme: match[1],
	    auth: match[2],
	    host: match[3],
	    port: match[4],
	    path: match[5]
	  };
	}
	exports.urlParse = urlParse;

	function urlGenerate(aParsedUrl) {
	  let url = "";
	  if (aParsedUrl.scheme) {
	    url += aParsedUrl.scheme + ":";
	  }
	  url += "//";
	  if (aParsedUrl.auth) {
	    url += aParsedUrl.auth + "@";
	  }
	  if (aParsedUrl.host) {
	    url += aParsedUrl.host;
	  }
	  if (aParsedUrl.port) {
	    url += ":" + aParsedUrl.port;
	  }
	  if (aParsedUrl.path) {
	    url += aParsedUrl.path;
	  }
	  return url;
	}
	exports.urlGenerate = urlGenerate;

	const MAX_CACHED_INPUTS = 32;

	/**
	 * Takes some function `f(input) -> result` and returns a memoized version of
	 * `f`.
	 *
	 * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The
	 * memoization is a dumb-simple, linear least-recently-used cache.
	 */
	function lruMemoize(f) {
	  const cache = [];

	  return function(input) {
	    for (let i = 0; i < cache.length; i++) {
	      if (cache[i].input === input) {
	        const temp = cache[0];
	        cache[0] = cache[i];
	        cache[i] = temp;
	        return cache[0].result;
	      }
	    }

	    const result = f(input);

	    cache.unshift({
	      input,
	      result,
	    });

	    if (cache.length > MAX_CACHED_INPUTS) {
	      cache.pop();
	    }

	    return result;
	  };
	}

	/**
	 * Normalizes a path, or the path portion of a URL:
	 *
	 * - Replaces consecutive slashes with one slash.
	 * - Removes unnecessary '.' parts.
	 * - Removes unnecessary '<dir>/..' parts.
	 *
	 * Based on code in the Node.js 'path' core module.
	 *
	 * @param aPath The path or url to normalize.
	 */
	const normalize = lruMemoize(function normalize(aPath) {
	  let path = aPath;
	  const url = urlParse(aPath);
	  if (url) {
	    if (!url.path) {
	      return aPath;
	    }
	    path = url.path;
	  }
	  const isAbsolute = exports.isAbsolute(path);

	  // Split the path into parts between `/` characters. This is much faster than
	  // using `.split(/\/+/g)`.
	  const parts = [];
	  let start = 0;
	  let i = 0;
	  while (true) {
	    start = i;
	    i = path.indexOf("/", start);
	    if (i === -1) {
	      parts.push(path.slice(start));
	      break;
	    } else {
	      parts.push(path.slice(start, i));
	      while (i < path.length && path[i] === "/") {
	        i++;
	      }
	    }
	  }

	  let up = 0;
	  for (i = parts.length - 1; i >= 0; i--) {
	    const part = parts[i];
	    if (part === ".") {
	      parts.splice(i, 1);
	    } else if (part === "..") {
	      up++;
	    } else if (up > 0) {
	      if (part === "") {
	        // The first part is blank if the path is absolute. Trying to go
	        // above the root is a no-op. Therefore we can remove all '..' parts
	        // directly after the root.
	        parts.splice(i + 1, up);
	        up = 0;
	      } else {
	        parts.splice(i, 2);
	        up--;
	      }
	    }
	  }
	  path = parts.join("/");

	  if (path === "") {
	    path = isAbsolute ? "/" : ".";
	  }

	  if (url) {
	    url.path = path;
	    return urlGenerate(url);
	  }
	  return path;
	});
	exports.normalize = normalize;

	/**
	 * Joins two paths/URLs.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be joined with the root.
	 *
	 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	 *   first.
	 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	 *   is updated with the result and aRoot is returned. Otherwise the result
	 *   is returned.
	 *   - If aPath is absolute, the result is aPath.
	 *   - Otherwise the two paths are joined with a slash.
	 * - Joining for example 'http://' and 'www.example.com' is also supported.
	 */
	function join(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }
	  if (aPath === "") {
	    aPath = ".";
	  }
	  const aPathUrl = urlParse(aPath);
	  const aRootUrl = urlParse(aRoot);
	  if (aRootUrl) {
	    aRoot = aRootUrl.path || "/";
	  }

	  // `join(foo, '//www.example.org')`
	  if (aPathUrl && !aPathUrl.scheme) {
	    if (aRootUrl) {
	      aPathUrl.scheme = aRootUrl.scheme;
	    }
	    return urlGenerate(aPathUrl);
	  }

	  if (aPathUrl || aPath.match(dataUrlRegexp)) {
	    return aPath;
	  }

	  // `join('http://', 'www.example.com')`
	  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	    aRootUrl.host = aPath;
	    return urlGenerate(aRootUrl);
	  }

	  const joined = aPath.charAt(0) === "/"
	    ? aPath
	    : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);

	  if (aRootUrl) {
	    aRootUrl.path = joined;
	    return urlGenerate(aRootUrl);
	  }
	  return joined;
	}
	exports.join = join;

	exports.isAbsolute = function(aPath) {
	  return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
	};

	/**
	 * Make a path relative to a URL or another path.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be made relative to aRoot.
	 */
	function relative(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }

	  aRoot = aRoot.replace(/\/$/, "");

	  // It is possible for the path to be above the root. In this case, simply
	  // checking whether the root is a prefix of the path won't work. Instead, we
	  // need to remove components from the root one by one, until either we find
	  // a prefix that fits, or we run out of components to remove.
	  let level = 0;
	  while (aPath.indexOf(aRoot + "/") !== 0) {
	    const index = aRoot.lastIndexOf("/");
	    if (index < 0) {
	      return aPath;
	    }

	    // If the only part of the root that is left is the scheme (i.e. http://,
	    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	    // have exhausted all components, so the path is not relative to the root.
	    aRoot = aRoot.slice(0, index);
	    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	      return aPath;
	    }

	    ++level;
	  }

	  // Make sure we add a "../" for each component we removed from the root.
	  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	}
	exports.relative = relative;

	const supportsNullProto = (function() {
	  const obj = Object.create(null);
	  return !("__proto__" in obj);
	}());

	function identity(s) {
	  return s;
	}

	/**
	 * Because behavior goes wacky when you set `__proto__` on objects, we
	 * have to prefix all the strings in our set with an arbitrary character.
	 *
	 * See https://github.com/mozilla/source-map/pull/31 and
	 * https://github.com/mozilla/source-map/issues/30
	 *
	 * @param String aStr
	 */
	function toSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return "$" + aStr;
	  }

	  return aStr;
	}
	exports.toSetString = supportsNullProto ? identity : toSetString;

	function fromSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return aStr.slice(1);
	  }

	  return aStr;
	}
	exports.fromSetString = supportsNullProto ? identity : fromSetString;

	function isProtoString(s) {
	  if (!s) {
	    return false;
	  }

	  const length = s.length;

	  if (length < 9 /* "__proto__".length */) {
	    return false;
	  }

	  /* eslint-disable no-multi-spaces */
	  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
	      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
	      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
	      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 9) !== 95  /* '_' */) {
	    return false;
	  }
	  /* eslint-enable no-multi-spaces */

	  for (let i = length - 10; i >= 0; i--) {
	    if (s.charCodeAt(i) !== 36 /* '$' */) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Comparator between two mappings where the original positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same original source/line/column, but different generated
	 * line and column the same. Useful when searching for a mapping with a
	 * stubbed out mapping.
	 */
	function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	  let cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0 || onlyCompareOriginal) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByOriginalPositions = compareByOriginalPositions;

	/**
	 * Comparator between two mappings with deflated source and name indices where
	 * the generated positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same generated line and column, but different
	 * source/name/original line and column the same. Useful when searching for a
	 * mapping with a stubbed out mapping.
	 */
	function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	  let cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0 || onlyCompareGenerated) {
	    return cmp;
	  }

	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

	function strcmp(aStr1, aStr2) {
	  if (aStr1 === aStr2) {
	    return 0;
	  }

	  if (aStr1 === null) {
	    return 1; // aStr2 !== null
	  }

	  if (aStr2 === null) {
	    return -1; // aStr1 !== null
	  }

	  if (aStr1 > aStr2) {
	    return 1;
	  }

	  return -1;
	}

	/**
	 * Comparator between two mappings with inflated source and name strings where
	 * the generated positions are compared.
	 */
	function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	  let cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

	/**
	 * Strip any JSON XSSI avoidance prefix from the string (as documented
	 * in the source maps specification), and then parse the string as
	 * JSON.
	 */
	function parseSourceMapInput(str) {
	  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
	}
	exports.parseSourceMapInput = parseSourceMapInput;

	/**
	 * Compute the URL of a source given the the source root, the source's
	 * URL, and the source map's URL.
	 */
	function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
	  sourceURL = sourceURL || "";

	  if (sourceRoot) {
	    // This follows what Chrome does.
	    if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
	      sourceRoot += "/";
	    }
	    // The spec says:
	    //   Line 4: An optional source root, useful for relocating source
	    //   files on a server or removing repeated values in the
	    //   “sources” entry.  This value is prepended to the individual
	    //   entries in the “source” field.
	    sourceURL = sourceRoot + sourceURL;
	  }

	  // Historically, SourceMapConsumer did not take the sourceMapURL as
	  // a parameter.  This mode is still somewhat supported, which is why
	  // this code block is conditional.  However, it's preferable to pass
	  // the source map URL to SourceMapConsumer, so that this function
	  // can implement the source URL resolution algorithm as outlined in
	  // the spec.  This block is basically the equivalent of:
	  //    new URL(sourceURL, sourceMapURL).toString()
	  // ... except it avoids using URL, which wasn't available in the
	  // older releases of node still supported by this library.
	  //
	  // The spec says:
	  //   If the sources are not absolute URLs after prepending of the
	  //   “sourceRoot”, the sources are resolved relative to the
	  //   SourceMap (like resolving script src in a html document).
	  if (sourceMapURL) {
	    const parsed = urlParse(sourceMapURL);
	    if (!parsed) {
	      throw new Error("sourceMapURL could not be parsed");
	    }
	    if (parsed.path) {
	      // Strip the last path component, but keep the "/".
	      const index = parsed.path.lastIndexOf("/");
	      if (index >= 0) {
	        parsed.path = parsed.path.substring(0, index + 1);
	      }
	    }
	    sourceURL = join(urlGenerate(parsed), sourceURL);
	  }

	  return normalize(sourceURL);
	}
	exports.computeSourceURL = computeSourceURL;
	}(util$h));

	var arraySet$2 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	/**
	 * A data structure which is a combination of an array and a set. Adding a new
	 * member is O(1), testing for membership is O(1), and finding the index of an
	 * element is O(1). Removing elements from the set is not supported. Only
	 * strings are supported for membership.
	 */
	class ArraySet$8 {
	  constructor() {
	    this._array = [];
	    this._set = new Map();
	  }

	  /**
	   * Static method for creating ArraySet instances from an existing array.
	   */
	  static fromArray(aArray, aAllowDuplicates) {
	    const set = new ArraySet$8();
	    for (let i = 0, len = aArray.length; i < len; i++) {
	      set.add(aArray[i], aAllowDuplicates);
	    }
	    return set;
	  }

	  /**
	   * Return how many unique items are in this ArraySet. If duplicates have been
	   * added, than those do not count towards the size.
	   *
	   * @returns Number
	   */
	  size() {
	    return this._set.size;
	  }

	  /**
	   * Add the given string to this set.
	   *
	   * @param String aStr
	   */
	  add(aStr, aAllowDuplicates) {
	    const isDuplicate = this.has(aStr);
	    const idx = this._array.length;
	    if (!isDuplicate || aAllowDuplicates) {
	      this._array.push(aStr);
	    }
	    if (!isDuplicate) {
	      this._set.set(aStr, idx);
	    }
	  }

	  /**
	   * Is the given string a member of this set?
	   *
	   * @param String aStr
	   */
	  has(aStr) {
	      return this._set.has(aStr);
	  }

	  /**
	   * What is the index of the given string in the array?
	   *
	   * @param String aStr
	   */
	  indexOf(aStr) {
	    const idx = this._set.get(aStr);
	    if (idx >= 0) {
	        return idx;
	    }
	    throw new Error('"' + aStr + '" is not in the set.');
	  }

	  /**
	   * What is the element at the given index?
	   *
	   * @param Number aIdx
	   */
	  at(aIdx) {
	    if (aIdx >= 0 && aIdx < this._array.length) {
	      return this._array[aIdx];
	    }
	    throw new Error("No element indexed by " + aIdx);
	  }

	  /**
	   * Returns the array representation of this set (which has the proper indices
	   * indicated by indexOf). Note that this is a copy of the internal array used
	   * for storing the members so that no one can mess with internal state.
	   */
	  toArray() {
	    return this._array.slice();
	  }
	}
	arraySet$2.ArraySet = ArraySet$8;

	var mappingList$2 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	const util$g = util$h;

	/**
	 * Determine whether mappingB is after mappingA with respect to generated
	 * position.
	 */
	function generatedPositionAfter$2(mappingA, mappingB) {
	  // Optimized for most common case
	  const lineA = mappingA.generatedLine;
	  const lineB = mappingB.generatedLine;
	  const columnA = mappingA.generatedColumn;
	  const columnB = mappingB.generatedColumn;
	  return lineB > lineA || lineB == lineA && columnB >= columnA ||
	         util$g.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	}

	/**
	 * A data structure to provide a sorted view of accumulated mappings in a
	 * performance conscious manner. It trades a negligible overhead in general
	 * case for a large speedup in case of mappings being added in order.
	 */
	class MappingList$5 {
	  constructor() {
	    this._array = [];
	    this._sorted = true;
	    // Serves as infimum
	    this._last = {generatedLine: -1, generatedColumn: 0};
	  }

	  /**
	   * Iterate through internal items. This method takes the same arguments that
	   * `Array.prototype.forEach` takes.
	   *
	   * NOTE: The order of the mappings is NOT guaranteed.
	   */
	  unsortedForEach(aCallback, aThisArg) {
	    this._array.forEach(aCallback, aThisArg);
	  }

	  /**
	   * Add the given source mapping.
	   *
	   * @param Object aMapping
	   */
	  add(aMapping) {
	    if (generatedPositionAfter$2(this._last, aMapping)) {
	      this._last = aMapping;
	      this._array.push(aMapping);
	    } else {
	      this._sorted = false;
	      this._array.push(aMapping);
	    }
	  }

	  /**
	   * Returns the flat, sorted array of mappings. The mappings are sorted by
	   * generated position.
	   *
	   * WARNING: This method returns internal data without copying, for
	   * performance. The return value must NOT be mutated, and should be treated as
	   * an immutable borrow. If you want to take ownership, you must make your own
	   * copy.
	   */
	  toArray() {
	    if (!this._sorted) {
	      this._array.sort(util$g.compareByGeneratedPositionsInflated);
	      this._sorted = true;
	    }
	    return this._array;
	  }
	}

	mappingList$2.MappingList = MappingList$5;

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	const base64VLQ$4 = base64Vlq$2;
	const util$f = util$h;
	const ArraySet$7 = arraySet$2.ArraySet;
	const MappingList$4 = mappingList$2.MappingList;

	/**
	 * An instance of the SourceMapGenerator represents a source map which is
	 * being built incrementally. You may pass an object with the following
	 * properties:
	 *
	 *   - file: The filename of the generated source.
	 *   - sourceRoot: A root for all relative URLs in this source map.
	 */
	class SourceMapGenerator$4 {
	  constructor(aArgs) {
	    if (!aArgs) {
	      aArgs = {};
	    }
	    this._file = util$f.getArg(aArgs, "file", null);
	    this._sourceRoot = util$f.getArg(aArgs, "sourceRoot", null);
	    this._skipValidation = util$f.getArg(aArgs, "skipValidation", false);
	    this._sources = new ArraySet$7();
	    this._names = new ArraySet$7();
	    this._mappings = new MappingList$4();
	    this._sourcesContents = null;
	  }

	  /**
	   * Creates a new SourceMapGenerator based on a SourceMapConsumer
	   *
	   * @param aSourceMapConsumer The SourceMap.
	   */
	  static fromSourceMap(aSourceMapConsumer) {
	    const sourceRoot = aSourceMapConsumer.sourceRoot;
	    const generator = new SourceMapGenerator$4({
	      file: aSourceMapConsumer.file,
	      sourceRoot
	    });
	    aSourceMapConsumer.eachMapping(function(mapping) {
	      const newMapping = {
	        generated: {
	          line: mapping.generatedLine,
	          column: mapping.generatedColumn
	        }
	      };

	      if (mapping.source != null) {
	        newMapping.source = mapping.source;
	        if (sourceRoot != null) {
	          newMapping.source = util$f.relative(sourceRoot, newMapping.source);
	        }

	        newMapping.original = {
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        };

	        if (mapping.name != null) {
	          newMapping.name = mapping.name;
	        }
	      }

	      generator.addMapping(newMapping);
	    });
	    aSourceMapConsumer.sources.forEach(function(sourceFile) {
	      let sourceRelative = sourceFile;
	      if (sourceRoot !== null) {
	        sourceRelative = util$f.relative(sourceRoot, sourceFile);
	      }

	      if (!generator._sources.has(sourceRelative)) {
	        generator._sources.add(sourceRelative);
	      }

	      const content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        generator.setSourceContent(sourceFile, content);
	      }
	    });
	    return generator;
	  }

	  /**
	   * Add a single mapping from original source line and column to the generated
	   * source's line and column for this source map being created. The mapping
	   * object should have the following properties:
	   *
	   *   - generated: An object with the generated line and column positions.
	   *   - original: An object with the original line and column positions.
	   *   - source: The original source file (relative to the sourceRoot).
	   *   - name: An optional original token name for this mapping.
	   */
	  addMapping(aArgs) {
	    const generated = util$f.getArg(aArgs, "generated");
	    const original = util$f.getArg(aArgs, "original", null);
	    let source = util$f.getArg(aArgs, "source", null);
	    let name = util$f.getArg(aArgs, "name", null);

	    if (!this._skipValidation) {
	      this._validateMapping(generated, original, source, name);
	    }

	    if (source != null) {
	      source = String(source);
	      if (!this._sources.has(source)) {
	        this._sources.add(source);
	      }
	    }

	    if (name != null) {
	      name = String(name);
	      if (!this._names.has(name)) {
	        this._names.add(name);
	      }
	    }

	    this._mappings.add({
	      generatedLine: generated.line,
	      generatedColumn: generated.column,
	      originalLine: original != null && original.line,
	      originalColumn: original != null && original.column,
	      source,
	      name
	    });
	  }

	  /**
	   * Set the source content for a source file.
	   */
	  setSourceContent(aSourceFile, aSourceContent) {
	    let source = aSourceFile;
	    if (this._sourceRoot != null) {
	      source = util$f.relative(this._sourceRoot, source);
	    }

	    if (aSourceContent != null) {
	      // Add the source content to the _sourcesContents map.
	      // Create a new _sourcesContents map if the property is null.
	      if (!this._sourcesContents) {
	        this._sourcesContents = Object.create(null);
	      }
	      this._sourcesContents[util$f.toSetString(source)] = aSourceContent;
	    } else if (this._sourcesContents) {
	      // Remove the source file from the _sourcesContents map.
	      // If the _sourcesContents map is empty, set the property to null.
	      delete this._sourcesContents[util$f.toSetString(source)];
	      if (Object.keys(this._sourcesContents).length === 0) {
	        this._sourcesContents = null;
	      }
	    }
	  }

	  /**
	   * Applies the mappings of a sub-source-map for a specific source file to the
	   * source map being generated. Each mapping to the supplied source file is
	   * rewritten using the supplied source map. Note: The resolution for the
	   * resulting mappings is the minimium of this map and the supplied map.
	   *
	   * @param aSourceMapConsumer The source map to be applied.
	   * @param aSourceFile Optional. The filename of the source file.
	   *        If omitted, SourceMapConsumer's file property will be used.
	   * @param aSourceMapPath Optional. The dirname of the path to the source map
	   *        to be applied. If relative, it is relative to the SourceMapConsumer.
	   *        This parameter is needed when the two source maps aren't in the same
	   *        directory, and the source map to be applied contains relative source
	   *        paths. If so, those relative source paths need to be rewritten
	   *        relative to the SourceMapGenerator.
	   */
	  applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	    let sourceFile = aSourceFile;
	    // If aSourceFile is omitted, we will use the file property of the SourceMap
	    if (aSourceFile == null) {
	      if (aSourceMapConsumer.file == null) {
	        throw new Error(
	          "SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, " +
	          'or the source map\'s "file" property. Both were omitted.'
	        );
	      }
	      sourceFile = aSourceMapConsumer.file;
	    }
	    const sourceRoot = this._sourceRoot;
	    // Make "sourceFile" relative if an absolute Url is passed.
	    if (sourceRoot != null) {
	      sourceFile = util$f.relative(sourceRoot, sourceFile);
	    }
	    // Applying the SourceMap can add and remove items from the sources and
	    // the names array.
	    const newSources = this._mappings.toArray().length > 0
	      ? new ArraySet$7()
	      : this._sources;
	    const newNames = new ArraySet$7();

	    // Find mappings for the "sourceFile"
	    this._mappings.unsortedForEach(function(mapping) {
	      if (mapping.source === sourceFile && mapping.originalLine != null) {
	        // Check if it can be mapped by the source map, then update the mapping.
	        const original = aSourceMapConsumer.originalPositionFor({
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        });
	        if (original.source != null) {
	          // Copy mapping
	          mapping.source = original.source;
	          if (aSourceMapPath != null) {
	            mapping.source = util$f.join(aSourceMapPath, mapping.source);
	          }
	          if (sourceRoot != null) {
	            mapping.source = util$f.relative(sourceRoot, mapping.source);
	          }
	          mapping.originalLine = original.line;
	          mapping.originalColumn = original.column;
	          if (original.name != null) {
	            mapping.name = original.name;
	          }
	        }
	      }

	      const source = mapping.source;
	      if (source != null && !newSources.has(source)) {
	        newSources.add(source);
	      }

	      const name = mapping.name;
	      if (name != null && !newNames.has(name)) {
	        newNames.add(name);
	      }

	    }, this);
	    this._sources = newSources;
	    this._names = newNames;

	    // Copy sourcesContents of applied map.
	    aSourceMapConsumer.sources.forEach(function(srcFile) {
	      const content = aSourceMapConsumer.sourceContentFor(srcFile);
	      if (content != null) {
	        if (aSourceMapPath != null) {
	          srcFile = util$f.join(aSourceMapPath, srcFile);
	        }
	        if (sourceRoot != null) {
	          srcFile = util$f.relative(sourceRoot, srcFile);
	        }
	        this.setSourceContent(srcFile, content);
	      }
	    }, this);
	  }

	  /**
	   * A mapping can have one of the three levels of data:
	   *
	   *   1. Just the generated position.
	   *   2. The Generated position, original position, and original source.
	   *   3. Generated and original position, original source, as well as a name
	   *      token.
	   *
	   * To maintain consistency, we validate that any new mapping being added falls
	   * in to one of these categories.
	   */
	  _validateMapping(aGenerated, aOriginal, aSource, aName) {
	    // When aOriginal is truthy but has empty values for .line and .column,
	    // it is most likely a programmer error. In this case we throw a very
	    // specific error message to try to guide them the right way.
	    // For example: https://github.com/Polymer/polymer-bundler/pull/519
	    if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
	        throw new Error(
	            "original.line and original.column are not numbers -- you probably meant to omit " +
	            "the original mapping entirely and only map the generated position. If so, pass " +
	            "null for the original mapping instead of an object with empty or null values."
	        );
	    }

	    if (aGenerated && "line" in aGenerated && "column" in aGenerated
	        && aGenerated.line > 0 && aGenerated.column >= 0
	        && !aOriginal && !aSource && !aName) ; else if (aGenerated && "line" in aGenerated && "column" in aGenerated
	             && aOriginal && "line" in aOriginal && "column" in aOriginal
	             && aGenerated.line > 0 && aGenerated.column >= 0
	             && aOriginal.line > 0 && aOriginal.column >= 0
	             && aSource) ; else {
	      throw new Error("Invalid mapping: " + JSON.stringify({
	        generated: aGenerated,
	        source: aSource,
	        original: aOriginal,
	        name: aName
	      }));
	    }
	  }

	  /**
	   * Serialize the accumulated mappings in to the stream of base 64 VLQs
	   * specified by the source map format.
	   */
	  _serializeMappings() {
	    let previousGeneratedColumn = 0;
	    let previousGeneratedLine = 1;
	    let previousOriginalColumn = 0;
	    let previousOriginalLine = 0;
	    let previousName = 0;
	    let previousSource = 0;
	    let result = "";
	    let next;
	    let mapping;
	    let nameIdx;
	    let sourceIdx;

	    const mappings = this._mappings.toArray();
	    for (let i = 0, len = mappings.length; i < len; i++) {
	      mapping = mappings[i];
	      next = "";

	      if (mapping.generatedLine !== previousGeneratedLine) {
	        previousGeneratedColumn = 0;
	        while (mapping.generatedLine !== previousGeneratedLine) {
	          next += ";";
	          previousGeneratedLine++;
	        }
	      } else if (i > 0) {
	        if (!util$f.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	          continue;
	        }
	        next += ",";
	      }

	      next += base64VLQ$4.encode(mapping.generatedColumn
	                                 - previousGeneratedColumn);
	      previousGeneratedColumn = mapping.generatedColumn;

	      if (mapping.source != null) {
	        sourceIdx = this._sources.indexOf(mapping.source);
	        next += base64VLQ$4.encode(sourceIdx - previousSource);
	        previousSource = sourceIdx;

	        // lines are stored 0-based in SourceMap spec version 3
	        next += base64VLQ$4.encode(mapping.originalLine - 1
	                                   - previousOriginalLine);
	        previousOriginalLine = mapping.originalLine - 1;

	        next += base64VLQ$4.encode(mapping.originalColumn
	                                   - previousOriginalColumn);
	        previousOriginalColumn = mapping.originalColumn;

	        if (mapping.name != null) {
	          nameIdx = this._names.indexOf(mapping.name);
	          next += base64VLQ$4.encode(nameIdx - previousName);
	          previousName = nameIdx;
	        }
	      }

	      result += next;
	    }

	    return result;
	  }

	  _generateSourcesContent(aSources, aSourceRoot) {
	    return aSources.map(function(source) {
	      if (!this._sourcesContents) {
	        return null;
	      }
	      if (aSourceRoot != null) {
	        source = util$f.relative(aSourceRoot, source);
	      }
	      const key = util$f.toSetString(source);
	      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
	        ? this._sourcesContents[key]
	        : null;
	    }, this);
	  }

	  /**
	   * Externalize the source map.
	   */
	  toJSON() {
	    const map = {
	      version: this._version,
	      sources: this._sources.toArray(),
	      names: this._names.toArray(),
	      mappings: this._serializeMappings()
	    };
	    if (this._file != null) {
	      map.file = this._file;
	    }
	    if (this._sourceRoot != null) {
	      map.sourceRoot = this._sourceRoot;
	    }
	    if (this._sourcesContents) {
	      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	    }

	    return map;
	  }

	  /**
	   * Render the source map being generated to a string.
	   */
	  toString() {
	    return JSON.stringify(this.toJSON());
	  }
	}

	SourceMapGenerator$4.prototype._version = 3;

	var binarySearch$5 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	(function (exports) {
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	exports.GREATEST_LOWER_BOUND = 1;
	exports.LEAST_UPPER_BOUND = 2;

	/**
	 * Recursive implementation of binary search.
	 *
	 * @param aLow Indices here and lower do not contain the needle.
	 * @param aHigh Indices here and higher do not contain the needle.
	 * @param aNeedle The element being searched for.
	 * @param aHaystack The non-empty array being searched.
	 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 */
	function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	  // This function terminates when one of the following is true:
	  //
	  //   1. We find the exact element we are looking for.
	  //
	  //   2. We did not find the exact element, but we can return the index of
	  //      the next-closest element.
	  //
	  //   3. We did not find the exact element, and there is no next-closest
	  //      element than the one we are searching for, so we return -1.
	  const mid = Math.floor((aHigh - aLow) / 2) + aLow;
	  const cmp = aCompare(aNeedle, aHaystack[mid], true);
	  if (cmp === 0) {
	    // Found the element we are looking for.
	    return mid;
	  } else if (cmp > 0) {
	    // Our needle is greater than aHaystack[mid].
	    if (aHigh - mid > 1) {
	      // The element is in the upper half.
	      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	    }

	    // The exact needle element was not found in this haystack. Determine if
	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return aHigh < aHaystack.length ? aHigh : -1;
	    }
	    return mid;
	  }

	  // Our needle is less than aHaystack[mid].
	  if (mid - aLow > 1) {
	    // The element is in the lower half.
	    return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	  }

	  // we are in termination case (3) or (2) and return the appropriate thing.
	  if (aBias == exports.LEAST_UPPER_BOUND) {
	    return mid;
	  }
	  return aLow < 0 ? -1 : aLow;
	}

	/**
	 * This is an implementation of binary search which will always try and return
	 * the index of the closest element if there is no exact hit. This is because
	 * mappings between original and generated line/col pairs are single points,
	 * and there is an implicit region between each of them, so a miss just means
	 * that you aren't on the very start of a region.
	 *
	 * @param aNeedle The element you are looking for.
	 * @param aHaystack The array that is being searched.
	 * @param aCompare A function which takes the needle and an element in the
	 *     array and returns -1, 0, or 1 depending on whether the needle is less
	 *     than, equal to, or greater than the element, respectively.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	 */
	exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	  if (aHaystack.length === 0) {
	    return -1;
	  }

	  let index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	  if (index < 0) {
	    return -1;
	  }

	  // We have found either the exact element, or the next-closest element than
	  // the one we are searching for. However, there may be more than one such
	  // element. Make sure we always return the smallest of these.
	  while (index - 1 >= 0) {
	    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	      break;
	    }
	    --index;
	  }

	  return index;
	};
	}(binarySearch$5));

	var readWasm$2 = {exports: {}};

	if (typeof fetch === "function") {
	  // Web version of reading a wasm file into an array buffer.

	  let mappingsWasmUrl = null;

	  readWasm$2.exports = function readWasm() {
	    if (typeof mappingsWasmUrl !== "string") {
	      throw new Error("You must provide the URL of lib/mappings.wasm by calling " +
	                      "SourceMapConsumer.initialize({ 'lib/mappings.wasm': ... }) " +
	                      "before using SourceMapConsumer");
	    }

	    return fetch(mappingsWasmUrl)
	      .then(response => response.arrayBuffer());
	  };

	  readWasm$2.exports.initialize = url => mappingsWasmUrl = url;
	} else {
	  // Node version of reading a wasm file into an array buffer.
	  const fs = require$$0__default$2['default'];
	  const path = require$$0__default['default'];

	  readWasm$2.exports = function readWasm() {
	    return new Promise((resolve, reject) => {
	      const wasmPath = path.join(__dirname, "mappings.wasm");
	      fs.readFile(wasmPath, null, (error, data) => {
	        if (error) {
	          reject(error);
	          return;
	        }

	        resolve(data.buffer);
	      });
	    });
	  };

	  readWasm$2.exports.initialize = _ => {
	    console.debug("SourceMapConsumer.initialize is a no-op when running in node.js");
	  };
	}

	const readWasm$1 = readWasm$2.exports;

	/**
	 * Provide the JIT with a nice shape / hidden class.
	 */
	function Mapping$2() {
	  this.generatedLine = 0;
	  this.generatedColumn = 0;
	  this.lastGeneratedColumn = null;
	  this.source = null;
	  this.originalLine = null;
	  this.originalColumn = null;
	  this.name = null;
	}

	let cachedWasm = null;

	var wasm$1 = function wasm() {
	  if (cachedWasm) {
	    return cachedWasm;
	  }

	  const callbackStack = [];

	  cachedWasm = readWasm$1().then(buffer => {
	      return WebAssembly.instantiate(buffer, {
	        env: {
	          mapping_callback(
	            generatedLine,
	            generatedColumn,

	            hasLastGeneratedColumn,
	            lastGeneratedColumn,

	            hasOriginal,
	            source,
	            originalLine,
	            originalColumn,

	            hasName,
	            name
	          ) {
	            const mapping = new Mapping$2();
	            // JS uses 1-based line numbers, wasm uses 0-based.
	            mapping.generatedLine = generatedLine + 1;
	            mapping.generatedColumn = generatedColumn;

	            if (hasLastGeneratedColumn) {
	              // JS uses inclusive last generated column, wasm uses exclusive.
	              mapping.lastGeneratedColumn = lastGeneratedColumn - 1;
	            }

	            if (hasOriginal) {
	              mapping.source = source;
	              // JS uses 1-based line numbers, wasm uses 0-based.
	              mapping.originalLine = originalLine + 1;
	              mapping.originalColumn = originalColumn;

	              if (hasName) {
	                mapping.name = name;
	              }
	            }

	            callbackStack[callbackStack.length - 1](mapping);
	          },

	          start_all_generated_locations_for() { console.time("all_generated_locations_for"); },
	          end_all_generated_locations_for() { console.timeEnd("all_generated_locations_for"); },

	          start_compute_column_spans() { console.time("compute_column_spans"); },
	          end_compute_column_spans() { console.timeEnd("compute_column_spans"); },

	          start_generated_location_for() { console.time("generated_location_for"); },
	          end_generated_location_for() { console.timeEnd("generated_location_for"); },

	          start_original_location_for() { console.time("original_location_for"); },
	          end_original_location_for() { console.timeEnd("original_location_for"); },

	          start_parse_mappings() { console.time("parse_mappings"); },
	          end_parse_mappings() { console.timeEnd("parse_mappings"); },

	          start_sort_by_generated_location() { console.time("sort_by_generated_location"); },
	          end_sort_by_generated_location() { console.timeEnd("sort_by_generated_location"); },

	          start_sort_by_original_location() { console.time("sort_by_original_location"); },
	          end_sort_by_original_location() { console.timeEnd("sort_by_original_location"); },
	        }
	      });
	  }).then(Wasm => {
	    return {
	      exports: Wasm.instance.exports,
	      withMappingCallback: (mappingCallback, f) => {
	        callbackStack.push(mappingCallback);
	        try {
	          f();
	        } finally {
	          callbackStack.pop();
	        }
	      }
	    };
	  }).then(null, e => {
	    cachedWasm = null;
	    throw e;
	  });

	  return cachedWasm;
	};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	const util$e = util$h;
	const binarySearch$4 = binarySearch$5;
	const ArraySet$6 = arraySet$2.ArraySet;
	const readWasm = readWasm$2.exports;
	const wasm = wasm$1;

	const INTERNAL = Symbol("smcInternal");

	class SourceMapConsumer$2 {
	  constructor(aSourceMap, aSourceMapURL) {
	    // If the constructor was called by super(), just return Promise<this>.
	    // Yes, this is a hack to retain the pre-existing API of the base-class
	    // constructor also being an async factory function.
	    if (aSourceMap == INTERNAL) {
	      return Promise.resolve(this);
	    }

	    return _factory(aSourceMap, aSourceMapURL);
	  }

	  static initialize(opts) {
	    readWasm.initialize(opts["lib/mappings.wasm"]);
	  }

	  static fromSourceMap(aSourceMap, aSourceMapURL) {
	    return _factoryBSM(aSourceMap, aSourceMapURL);
	  }

	  /**
	   * Construct a new `SourceMapConsumer` from `rawSourceMap` and `sourceMapUrl`
	   * (see the `SourceMapConsumer` constructor for details. Then, invoke the `async
	   * function f(SourceMapConsumer) -> T` with the newly constructed consumer, wait
	   * for `f` to complete, call `destroy` on the consumer, and return `f`'s return
	   * value.
	   *
	   * You must not use the consumer after `f` completes!
	   *
	   * By using `with`, you do not have to remember to manually call `destroy` on
	   * the consumer, since it will be called automatically once `f` completes.
	   *
	   * ```js
	   * const xSquared = await SourceMapConsumer.with(
	   *   myRawSourceMap,
	   *   null,
	   *   async function (consumer) {
	   *     // Use `consumer` inside here and don't worry about remembering
	   *     // to call `destroy`.
	   *
	   *     const x = await whatever(consumer);
	   *     return x * x;
	   *   }
	   * );
	   *
	   * // You may not use that `consumer` anymore out here; it has
	   * // been destroyed. But you can use `xSquared`.
	   * console.log(xSquared);
	   * ```
	   */
	  static with(rawSourceMap, sourceMapUrl, f) {
	    // Note: The `acorn` version that `webpack` currently depends on doesn't
	    // support `async` functions, and the nodes that we support don't all have
	    // `.finally`. Therefore, this is written a bit more convolutedly than it
	    // should really be.

	    let consumer = null;
	    const promise = new SourceMapConsumer$2(rawSourceMap, sourceMapUrl);
	    return promise
	      .then(c => {
	        consumer = c;
	        return f(c);
	      })
	      .then(x => {
	        if (consumer) {
	          consumer.destroy();
	        }
	        return x;
	      }, e => {
	        if (consumer) {
	          consumer.destroy();
	        }
	        throw e;
	      });
	  }

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  _parseMappings(aStr, aSourceRoot) {
	    throw new Error("Subclasses must implement _parseMappings");
	  }

	  /**
	   * Iterate over each mapping between an original source/line/column and a
	   * generated line/column in this source map.
	   *
	   * @param Function aCallback
	   *        The function that is called with each mapping.
	   * @param Object aContext
	   *        Optional. If specified, this object will be the value of `this` every
	   *        time that `aCallback` is called.
	   * @param aOrder
	   *        Either `SourceMapConsumer.GENERATED_ORDER` or
	   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	   *        iterate over the mappings sorted by the generated file's line/column
	   *        order or the original's source/line/column order, respectively. Defaults to
	   *        `SourceMapConsumer.GENERATED_ORDER`.
	   */
	  eachMapping(aCallback, aContext, aOrder) {
	    throw new Error("Subclasses must implement eachMapping");
	  }

	  /**
	   * Returns all generated line and column information for the original source,
	   * line, and column provided. If no column is provided, returns all mappings
	   * corresponding to a either the line we are searching for or the next
	   * closest line that has any mappings. Otherwise, returns all mappings
	   * corresponding to the given line and either the column we are searching for
	   * or the next closest column that has any offsets.
	   *
	   * The only argument is an object with the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.  The line number is 1-based.
	   *   - column: Optional. the column number in the original source.
	   *    The column number is 0-based.
	   *
	   * and an array of objects is returned, each with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.  The
	   *    line number is 1-based.
	   *   - column: The column number in the generated source, or null.
	   *    The column number is 0-based.
	   */
	  allGeneratedPositionsFor(aArgs) {
	    throw new Error("Subclasses must implement allGeneratedPositionsFor");
	  }

	  destroy() {
	    throw new Error("Subclasses must implement destroy");
	  }
	}

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	SourceMapConsumer$2.prototype._version = 3;
	SourceMapConsumer$2.GENERATED_ORDER = 1;
	SourceMapConsumer$2.ORIGINAL_ORDER = 2;

	SourceMapConsumer$2.GREATEST_LOWER_BOUND = 1;
	SourceMapConsumer$2.LEAST_UPPER_BOUND = 2;

	/**
	 * A BasicSourceMapConsumer instance represents a parsed source map which we can
	 * query for information about the original file positions by giving it a file
	 * position in the generated source.
	 *
	 * The first parameter is the raw source map (either as a JSON string, or
	 * already parsed to an object). According to the spec, source maps have the
	 * following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - sources: An array of URLs to the original source files.
	 *   - names: An array of identifiers which can be referenced by individual mappings.
	 *   - sourceRoot: Optional. The URL root from which all sources are relative.
	 *   - sourcesContent: Optional. An array of contents of the original source files.
	 *   - mappings: A string of base64 VLQs which contain the actual mappings.
	 *   - file: Optional. The generated file this source map is associated with.
	 *
	 * Here is an example source map, taken from the source map spec[0]:
	 *
	 *     {
	 *       version : 3,
	 *       file: "out.js",
	 *       sourceRoot : "",
	 *       sources: ["foo.js", "bar.js"],
	 *       names: ["src", "maps", "are", "fun"],
	 *       mappings: "AA,AB;;ABCDE;"
	 *     }
	 *
	 * The second parameter, if given, is a string whose value is the URL
	 * at which the source map was found.  This URL is used to compute the
	 * sources array.
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	 */
	class BasicSourceMapConsumer$2 extends SourceMapConsumer$2 {
	  constructor(aSourceMap, aSourceMapURL) {
	    return super(INTERNAL).then(that => {
	      let sourceMap = aSourceMap;
	      if (typeof aSourceMap === "string") {
	        sourceMap = util$e.parseSourceMapInput(aSourceMap);
	      }

	      const version = util$e.getArg(sourceMap, "version");
	      let sources = util$e.getArg(sourceMap, "sources");
	      // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	      // requires the array) to play nice here.
	      const names = util$e.getArg(sourceMap, "names", []);
	      let sourceRoot = util$e.getArg(sourceMap, "sourceRoot", null);
	      const sourcesContent = util$e.getArg(sourceMap, "sourcesContent", null);
	      const mappings = util$e.getArg(sourceMap, "mappings");
	      const file = util$e.getArg(sourceMap, "file", null);

	      // Once again, Sass deviates from the spec and supplies the version as a
	      // string rather than a number, so we use loose equality checking here.
	      if (version != that._version) {
	        throw new Error("Unsupported version: " + version);
	      }

	      if (sourceRoot) {
	        sourceRoot = util$e.normalize(sourceRoot);
	      }

	      sources = sources
	        .map(String)
	        // Some source maps produce relative source paths like "./foo.js" instead of
	        // "foo.js".  Normalize these first so that future comparisons will succeed.
	        // See bugzil.la/1090768.
	        .map(util$e.normalize)
	        // Always ensure that absolute sources are internally stored relative to
	        // the source root, if the source root is absolute. Not doing this would
	        // be particularly problematic when the source root is a prefix of the
	        // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
	        .map(function(source) {
	          return sourceRoot && util$e.isAbsolute(sourceRoot) && util$e.isAbsolute(source)
	            ? util$e.relative(sourceRoot, source)
	            : source;
	        });

	      // Pass `true` below to allow duplicate names and sources. While source maps
	      // are intended to be compressed and deduplicated, the TypeScript compiler
	      // sometimes generates source maps with duplicates in them. See Github issue
	      // #72 and bugzil.la/889492.
	      that._names = ArraySet$6.fromArray(names.map(String), true);
	      that._sources = ArraySet$6.fromArray(sources, true);

	      that._absoluteSources = that._sources.toArray().map(function(s) {
	        return util$e.computeSourceURL(sourceRoot, s, aSourceMapURL);
	      });

	      that.sourceRoot = sourceRoot;
	      that.sourcesContent = sourcesContent;
	      that._mappings = mappings;
	      that._sourceMapURL = aSourceMapURL;
	      that.file = file;

	      that._computedColumnSpans = false;
	      that._mappingsPtr = 0;
	      that._wasm = null;

	      return wasm().then(w => {
	        that._wasm = w;
	        return that;
	      });
	    });
	  }

	  /**
	   * Utility function to find the index of a source.  Returns -1 if not
	   * found.
	   */
	  _findSourceIndex(aSource) {
	    let relativeSource = aSource;
	    if (this.sourceRoot != null) {
	      relativeSource = util$e.relative(this.sourceRoot, relativeSource);
	    }

	    if (this._sources.has(relativeSource)) {
	      return this._sources.indexOf(relativeSource);
	    }

	    // Maybe aSource is an absolute URL as returned by |sources|.  In
	    // this case we can't simply undo the transform.
	    for (let i = 0; i < this._absoluteSources.length; ++i) {
	      if (this._absoluteSources[i] == aSource) {
	        return i;
	      }
	    }

	    return -1;
	  }

	  /**
	   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	   *
	   * @param SourceMapGenerator aSourceMap
	   *        The source map that will be consumed.
	   * @param String aSourceMapURL
	   *        The URL at which the source map can be found (optional)
	   * @returns BasicSourceMapConsumer
	   */
	  static fromSourceMap(aSourceMap, aSourceMapURL) {
	    return new BasicSourceMapConsumer$2(aSourceMap.toString());
	  }

	  get sources() {
	    return this._absoluteSources.slice();
	  }

	  _getMappingsPtr() {
	    if (this._mappingsPtr === 0) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }

	    return this._mappingsPtr;
	  }

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  _parseMappings(aStr, aSourceRoot) {
	    const size = aStr.length;

	    const mappingsBufPtr = this._wasm.exports.allocate_mappings(size);
	    const mappingsBuf = new Uint8Array(this._wasm.exports.memory.buffer, mappingsBufPtr, size);
	    for (let i = 0; i < size; i++) {
	      mappingsBuf[i] = aStr.charCodeAt(i);
	    }

	    const mappingsPtr = this._wasm.exports.parse_mappings(mappingsBufPtr);

	    if (!mappingsPtr) {
	      const error = this._wasm.exports.get_last_error();
	      let msg = `Error parsing mappings (code ${error}): `;

	      // XXX: keep these error codes in sync with `fitzgen/source-map-mappings`.
	      switch (error) {
	        case 1:
	          msg += "the mappings contained a negative line, column, source index, or name index";
	          break;
	        case 2:
	          msg += "the mappings contained a number larger than 2**32";
	          break;
	        case 3:
	          msg += "reached EOF while in the middle of parsing a VLQ";
	          break;
	        case 4:
	          msg += "invalid base 64 character while parsing a VLQ";
	          break;
	        default:
	          msg += "unknown error code";
	          break;
	      }

	      throw new Error(msg);
	    }

	    this._mappingsPtr = mappingsPtr;
	  }

	  eachMapping(aCallback, aContext, aOrder) {
	    const context = aContext || null;
	    const order = aOrder || SourceMapConsumer$2.GENERATED_ORDER;
	    const sourceRoot = this.sourceRoot;

	    this._wasm.withMappingCallback(
	      mapping => {
	        if (mapping.source !== null) {
	          mapping.source = this._sources.at(mapping.source);
	          mapping.source = util$e.computeSourceURL(sourceRoot, mapping.source, this._sourceMapURL);

	          if (mapping.name !== null) {
	            mapping.name = this._names.at(mapping.name);
	          }
	        }

	        aCallback.call(context, mapping);
	      },
	      () => {
	        switch (order) {
	        case SourceMapConsumer$2.GENERATED_ORDER:
	          this._wasm.exports.by_generated_location(this._getMappingsPtr());
	          break;
	        case SourceMapConsumer$2.ORIGINAL_ORDER:
	          this._wasm.exports.by_original_location(this._getMappingsPtr());
	          break;
	        default:
	          throw new Error("Unknown order of iteration.");
	        }
	      }
	    );
	  }

	  allGeneratedPositionsFor(aArgs) {
	    let source = util$e.getArg(aArgs, "source");
	    const originalLine = util$e.getArg(aArgs, "line");
	    const originalColumn = aArgs.column || 0;

	    source = this._findSourceIndex(source);
	    if (source < 0) {
	      return [];
	    }

	    if (originalLine < 1) {
	      throw new Error("Line numbers must be >= 1");
	    }

	    if (originalColumn < 0) {
	      throw new Error("Column numbers must be >= 0");
	    }

	    const mappings = [];

	    this._wasm.withMappingCallback(
	      m => {
	        let lastColumn = m.lastGeneratedColumn;
	        if (this._computedColumnSpans && lastColumn === null) {
	          lastColumn = Infinity;
	        }
	        mappings.push({
	          line: m.generatedLine,
	          column: m.generatedColumn,
	          lastColumn,
	        });
	      }, () => {
	        this._wasm.exports.all_generated_locations_for(
	          this._getMappingsPtr(),
	          source,
	          originalLine - 1,
	          "column" in aArgs,
	          originalColumn
	        );
	      }
	    );

	    return mappings;
	  }

	  destroy() {
	    if (this._mappingsPtr !== 0) {
	      this._wasm.exports.free_mappings(this._mappingsPtr);
	      this._mappingsPtr = 0;
	    }
	  }

	  /**
	   * Compute the last column for each generated mapping. The last column is
	   * inclusive.
	   */
	  computeColumnSpans() {
	    if (this._computedColumnSpans) {
	      return;
	    }

	    this._wasm.exports.compute_column_spans(this._getMappingsPtr());
	    this._computedColumnSpans = true;
	  }

	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.  The line number
	   *     is 1-based.
	   *   - column: The column number in the generated source.  The column
	   *     number is 0-based.
	   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.  The
	   *     line number is 1-based.
	   *   - column: The column number in the original source, or null.  The
	   *     column number is 0-based.
	   *   - name: The original identifier, or null.
	   */
	  originalPositionFor(aArgs) {
	    const needle = {
	      generatedLine: util$e.getArg(aArgs, "line"),
	      generatedColumn: util$e.getArg(aArgs, "column")
	    };

	    if (needle.generatedLine < 1) {
	      throw new Error("Line numbers must be >= 1");
	    }

	    if (needle.generatedColumn < 0) {
	      throw new Error("Column numbers must be >= 0");
	    }

	    let bias = util$e.getArg(aArgs, "bias", SourceMapConsumer$2.GREATEST_LOWER_BOUND);
	    if (bias == null) {
	      bias = SourceMapConsumer$2.GREATEST_LOWER_BOUND;
	    }

	    let mapping;
	    this._wasm.withMappingCallback(m => mapping = m, () => {
	      this._wasm.exports.original_location_for(
	        this._getMappingsPtr(),
	        needle.generatedLine - 1,
	        needle.generatedColumn,
	        bias
	      );
	    });

	    if (mapping) {
	      if (mapping.generatedLine === needle.generatedLine) {
	        let source = util$e.getArg(mapping, "source", null);
	        if (source !== null) {
	          source = this._sources.at(source);
	          source = util$e.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
	        }

	        let name = util$e.getArg(mapping, "name", null);
	        if (name !== null) {
	          name = this._names.at(name);
	        }

	        return {
	          source,
	          line: util$e.getArg(mapping, "originalLine", null),
	          column: util$e.getArg(mapping, "originalColumn", null),
	          name
	        };
	      }
	    }

	    return {
	      source: null,
	      line: null,
	      column: null,
	      name: null
	    };
	  }

	  /**
	   * Return true if we have the source content for every source in the source
	   * map, false otherwise.
	   */
	  hasContentsOfAllSources() {
	    if (!this.sourcesContent) {
	      return false;
	    }
	    return this.sourcesContent.length >= this._sources.size() &&
	      !this.sourcesContent.some(function(sc) { return sc == null; });
	  }

	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * available.
	   */
	  sourceContentFor(aSource, nullOnMissing) {
	    if (!this.sourcesContent) {
	      return null;
	    }

	    const index = this._findSourceIndex(aSource);
	    if (index >= 0) {
	      return this.sourcesContent[index];
	    }

	    let relativeSource = aSource;
	    if (this.sourceRoot != null) {
	      relativeSource = util$e.relative(this.sourceRoot, relativeSource);
	    }

	    let url;
	    if (this.sourceRoot != null
	        && (url = util$e.urlParse(this.sourceRoot))) {
	      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	      // many users. We can help them out when they expect file:// URIs to
	      // behave like it would if they were running a local HTTP server. See
	      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	      const fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
	      if (url.scheme == "file"
	          && this._sources.has(fileUriAbsPath)) {
	        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
	      }

	      if ((!url.path || url.path == "/")
	          && this._sources.has("/" + relativeSource)) {
	        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
	      }
	    }

	    // This function is used recursively from
	    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	    // don't want to throw if we can't find the source - we just want to
	    // return null, so we provide a flag to exit gracefully.
	    if (nullOnMissing) {
	      return null;
	    }

	    throw new Error('"' + relativeSource + '" is not in the SourceMap.');
	  }

	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.  The line number
	   *     is 1-based.
	   *   - column: The column number in the original source.  The column
	   *     number is 0-based.
	   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.  The
	   *     line number is 1-based.
	   *   - column: The column number in the generated source, or null.
	   *     The column number is 0-based.
	   */
	  generatedPositionFor(aArgs) {
	    let source = util$e.getArg(aArgs, "source");
	    source = this._findSourceIndex(source);
	    if (source < 0) {
	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    }

	    const needle = {
	      source,
	      originalLine: util$e.getArg(aArgs, "line"),
	      originalColumn: util$e.getArg(aArgs, "column")
	    };

	    if (needle.originalLine < 1) {
	      throw new Error("Line numbers must be >= 1");
	    }

	    if (needle.originalColumn < 0) {
	      throw new Error("Column numbers must be >= 0");
	    }

	    let bias = util$e.getArg(aArgs, "bias", SourceMapConsumer$2.GREATEST_LOWER_BOUND);
	    if (bias == null) {
	      bias = SourceMapConsumer$2.GREATEST_LOWER_BOUND;
	    }

	    let mapping;
	    this._wasm.withMappingCallback(m => mapping = m, () => {
	      this._wasm.exports.generated_location_for(
	        this._getMappingsPtr(),
	        needle.source,
	        needle.originalLine - 1,
	        needle.originalColumn,
	        bias
	      );
	    });

	    if (mapping) {
	      if (mapping.source === needle.source) {
	        let lastColumn = mapping.lastGeneratedColumn;
	        if (this._computedColumnSpans && lastColumn === null) {
	          lastColumn = Infinity;
	        }
	        return {
	          line: util$e.getArg(mapping, "generatedLine", null),
	          column: util$e.getArg(mapping, "generatedColumn", null),
	          lastColumn,
	        };
	      }
	    }

	    return {
	      line: null,
	      column: null,
	      lastColumn: null
	    };
	  }
	}

	BasicSourceMapConsumer$2.prototype.consumer = SourceMapConsumer$2;

	/**
	 * An IndexedSourceMapConsumer instance represents a parsed source map which
	 * we can query for information. It differs from BasicSourceMapConsumer in
	 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	 * input.
	 *
	 * The first parameter is a raw source map (either as a JSON string, or already
	 * parsed to an object). According to the spec for indexed source maps, they
	 * have the following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - file: Optional. The generated file this source map is associated with.
	 *   - sections: A list of section definitions.
	 *
	 * Each value under the "sections" field has two fields:
	 *   - offset: The offset into the original specified at which this section
	 *       begins to apply, defined as an object with a "line" and "column"
	 *       field.
	 *   - map: A source map definition. This source map could also be indexed,
	 *       but doesn't have to be.
	 *
	 * Instead of the "map" field, it's also possible to have a "url" field
	 * specifying a URL to retrieve a source map from, but that's currently
	 * unsupported.
	 *
	 * Here's an example source map, taken from the source map spec[0], but
	 * modified to omit a section which uses the "url" field.
	 *
	 *  {
	 *    version : 3,
	 *    file: "app.js",
	 *    sections: [{
	 *      offset: {line:100, column:10},
	 *      map: {
	 *        version : 3,
	 *        file: "section.js",
	 *        sources: ["foo.js", "bar.js"],
	 *        names: ["src", "maps", "are", "fun"],
	 *        mappings: "AAAA,E;;ABCDE;"
	 *      }
	 *    }],
	 *  }
	 *
	 * The second parameter, if given, is a string whose value is the URL
	 * at which the source map was found.  This URL is used to compute the
	 * sources array.
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	 */
	class IndexedSourceMapConsumer$2 extends SourceMapConsumer$2 {
	  constructor(aSourceMap, aSourceMapURL) {
	    return super(INTERNAL).then(that => {
	      let sourceMap = aSourceMap;
	      if (typeof aSourceMap === "string") {
	        sourceMap = util$e.parseSourceMapInput(aSourceMap);
	      }

	      const version = util$e.getArg(sourceMap, "version");
	      const sections = util$e.getArg(sourceMap, "sections");

	      if (version != that._version) {
	        throw new Error("Unsupported version: " + version);
	      }

	      that._sources = new ArraySet$6();
	      that._names = new ArraySet$6();
	      that.__generatedMappings = null;
	      that.__originalMappings = null;
	      that.__generatedMappingsUnsorted = null;
	      that.__originalMappingsUnsorted = null;

	      let lastOffset = {
	        line: -1,
	        column: 0
	      };
	      return Promise.all(sections.map(s => {
	        if (s.url) {
	          // The url field will require support for asynchronicity.
	          // See https://github.com/mozilla/source-map/issues/16
	          throw new Error("Support for url field in sections not implemented.");
	        }
	        const offset = util$e.getArg(s, "offset");
	        const offsetLine = util$e.getArg(offset, "line");
	        const offsetColumn = util$e.getArg(offset, "column");

	        if (offsetLine < lastOffset.line ||
	            (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	          throw new Error("Section offsets must be ordered and non-overlapping.");
	        }
	        lastOffset = offset;

	        const cons = new SourceMapConsumer$2(util$e.getArg(s, "map"), aSourceMapURL);
	        return cons.then(consumer => {
	          return {
	            generatedOffset: {
	              // The offset fields are 0-based, but we use 1-based indices when
	              // encoding/decoding from VLQ.
	              generatedLine: offsetLine + 1,
	              generatedColumn: offsetColumn + 1
	            },
	            consumer
	          };
	        });
	      })).then(s => {
	        that._sections = s;
	        return that;
	      });
	    });
	  }

	  // `__generatedMappings` and `__originalMappings` are arrays that hold the
	  // parsed mapping coordinates from the source map's "mappings" attribute. They
	  // are lazily instantiated, accessed via the `_generatedMappings` and
	  // `_originalMappings` getters respectively, and we only parse the mappings
	  // and create these arrays once queried for a source location. We jump through
	  // these hoops because there can be many thousands of mappings, and parsing
	  // them is expensive, so we only want to do it if we must.
	  //
	  // Each object in the arrays is of the form:
	  //
	  //     {
	  //       generatedLine: The line number in the generated code,
	  //       generatedColumn: The column number in the generated code,
	  //       source: The path to the original source file that generated this
	  //               chunk of code,
	  //       originalLine: The line number in the original source that
	  //                     corresponds to this chunk of generated code,
	  //       originalColumn: The column number in the original source that
	  //                       corresponds to this chunk of generated code,
	  //       name: The name of the original symbol which generated this chunk of
	  //             code.
	  //     }
	  //
	  // All properties except for `generatedLine` and `generatedColumn` can be
	  // `null`.
	  //
	  // `_generatedMappings` is ordered by the generated positions.
	  //
	  // `_originalMappings` is ordered by the original positions.
	  get _generatedMappings() {
	    if (!this.__generatedMappings) {
	      this._sortGeneratedMappings();
	    }

	    return this.__generatedMappings;
	  }

	  get _originalMappings() {
	    if (!this.__originalMappings) {
	      this._sortOriginalMappings();
	    }

	    return this.__originalMappings;
	  }

	  get _generatedMappingsUnsorted() {
	    if (!this.__generatedMappingsUnsorted) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }

	    return this.__generatedMappingsUnsorted;
	  }

	  get _originalMappingsUnsorted() {
	    if (!this.__originalMappingsUnsorted) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }

	    return this.__originalMappingsUnsorted;
	  }

	  _sortGeneratedMappings() {
	    const mappings = this._generatedMappingsUnsorted;
	    mappings.sort(util$e.compareByGeneratedPositionsDeflated);
	    this.__generatedMappings = mappings;
	  }

	  _sortOriginalMappings() {
	    const mappings = this._originalMappingsUnsorted;
	    mappings.sort(util$e.compareByOriginalPositions);
	    this.__originalMappings = mappings;
	  }

	  /**
	   * The list of original sources.
	   */
	  get sources() {
	    const sources = [];
	    for (let i = 0; i < this._sections.length; i++) {
	      for (let j = 0; j < this._sections[i].consumer.sources.length; j++) {
	        sources.push(this._sections[i].consumer.sources[j]);
	      }
	    }
	    return sources;
	  }

	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.  The line number
	   *     is 1-based.
	   *   - column: The column number in the generated source.  The column
	   *     number is 0-based.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.  The
	   *     line number is 1-based.
	   *   - column: The column number in the original source, or null.  The
	   *     column number is 0-based.
	   *   - name: The original identifier, or null.
	   */
	  originalPositionFor(aArgs) {
	    const needle = {
	      generatedLine: util$e.getArg(aArgs, "line"),
	      generatedColumn: util$e.getArg(aArgs, "column")
	    };

	    // Find the section containing the generated position we're trying to map
	    // to an original position.
	    const sectionIndex = binarySearch$4.search(needle, this._sections,
	      function(aNeedle, section) {
	        const cmp = aNeedle.generatedLine - section.generatedOffset.generatedLine;
	        if (cmp) {
	          return cmp;
	        }

	        return (aNeedle.generatedColumn -
	                section.generatedOffset.generatedColumn);
	      });
	    const section = this._sections[sectionIndex];

	    if (!section) {
	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    }

	    return section.consumer.originalPositionFor({
	      line: needle.generatedLine -
	        (section.generatedOffset.generatedLine - 1),
	      column: needle.generatedColumn -
	        (section.generatedOffset.generatedLine === needle.generatedLine
	         ? section.generatedOffset.generatedColumn - 1
	         : 0),
	      bias: aArgs.bias
	    });
	  }

	  /**
	   * Return true if we have the source content for every source in the source
	   * map, false otherwise.
	   */
	  hasContentsOfAllSources() {
	    return this._sections.every(function(s) {
	      return s.consumer.hasContentsOfAllSources();
	    });
	  }

	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * available.
	   */
	  sourceContentFor(aSource, nullOnMissing) {
	    for (let i = 0; i < this._sections.length; i++) {
	      const section = this._sections[i];

	      const content = section.consumer.sourceContentFor(aSource, true);
	      if (content) {
	        return content;
	      }
	    }
	    if (nullOnMissing) {
	      return null;
	    }
	    throw new Error('"' + aSource + '" is not in the SourceMap.');
	  }

	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.  The line number
	   *     is 1-based.
	   *   - column: The column number in the original source.  The column
	   *     number is 0-based.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.  The
	   *     line number is 1-based.
	   *   - column: The column number in the generated source, or null.
	   *     The column number is 0-based.
	   */
	  generatedPositionFor(aArgs) {
	    for (let i = 0; i < this._sections.length; i++) {
	      const section = this._sections[i];

	      // Only consider this section if the requested source is in the list of
	      // sources of the consumer.
	      if (section.consumer._findSourceIndex(util$e.getArg(aArgs, "source")) === -1) {
	        continue;
	      }
	      const generatedPosition = section.consumer.generatedPositionFor(aArgs);
	      if (generatedPosition) {
	        const ret = {
	          line: generatedPosition.line +
	            (section.generatedOffset.generatedLine - 1),
	          column: generatedPosition.column +
	            (section.generatedOffset.generatedLine === generatedPosition.line
	             ? section.generatedOffset.generatedColumn - 1
	             : 0)
	        };
	        return ret;
	      }
	    }

	    return {
	      line: null,
	      column: null
	    };
	  }

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  _parseMappings(aStr, aSourceRoot) {
	    const generatedMappings = this.__generatedMappingsUnsorted = [];
	    const originalMappings = this.__originalMappingsUnsorted = [];
	    for (let i = 0; i < this._sections.length; i++) {
	      const section = this._sections[i];

	      const sectionMappings = [];
	      section.consumer.eachMapping(m => sectionMappings.push(m));

	      for (let j = 0; j < sectionMappings.length; j++) {
	        const mapping = sectionMappings[j];

	        // TODO: test if null is correct here.  The original code used
	        // `source`, which would actually have gotten used as null because
	        // var's get hoisted.
	        // See: https://github.com/mozilla/source-map/issues/333
	        let source = util$e.computeSourceURL(section.consumer.sourceRoot, null, this._sourceMapURL);
	        this._sources.add(source);
	        source = this._sources.indexOf(source);

	        let name = null;
	        if (mapping.name) {
	          this._names.add(mapping.name);
	          name = this._names.indexOf(mapping.name);
	        }

	        // The mappings coming from the consumer for the section have
	        // generated positions relative to the start of the section, so we
	        // need to offset them to be relative to the start of the concatenated
	        // generated file.
	        const adjustedMapping = {
	          source,
	          generatedLine: mapping.generatedLine +
	            (section.generatedOffset.generatedLine - 1),
	          generatedColumn: mapping.generatedColumn +
	            (section.generatedOffset.generatedLine === mapping.generatedLine
	            ? section.generatedOffset.generatedColumn - 1
	            : 0),
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name
	        };

	        generatedMappings.push(adjustedMapping);
	        if (typeof adjustedMapping.originalLine === "number") {
	          originalMappings.push(adjustedMapping);
	        }
	      }
	    }
	  }

	  eachMapping(aCallback, aContext, aOrder) {
	    const context = aContext || null;
	    const order = aOrder || SourceMapConsumer$2.GENERATED_ORDER;

	    let mappings;
	    switch (order) {
	    case SourceMapConsumer$2.GENERATED_ORDER:
	      mappings = this._generatedMappings;
	      break;
	    case SourceMapConsumer$2.ORIGINAL_ORDER:
	      mappings = this._originalMappings;
	      break;
	    default:
	      throw new Error("Unknown order of iteration.");
	    }

	    const sourceRoot = this.sourceRoot;
	    mappings.map(function(mapping) {
	      let source = null;
	      if (mapping.source !== null) {
	        source = this._sources.at(mapping.source);
	        source = util$e.computeSourceURL(sourceRoot, source, this._sourceMapURL);
	      }
	      return {
	        source,
	        generatedLine: mapping.generatedLine,
	        generatedColumn: mapping.generatedColumn,
	        originalLine: mapping.originalLine,
	        originalColumn: mapping.originalColumn,
	        name: mapping.name === null ? null : this._names.at(mapping.name)
	      };
	    }, this).forEach(aCallback, context);
	  }

	  /**
	   * Find the mapping that best matches the hypothetical "needle" mapping that
	   * we are searching for in the given "haystack" of mappings.
	   */
	  _findMapping(aNeedle, aMappings, aLineName,
	              aColumnName, aComparator, aBias) {
	    // To return the position we are searching for, we must first find the
	    // mapping for the given position and then return the opposite position it
	    // points to. Because the mappings are sorted, we can use binary search to
	    // find the best mapping.

	    if (aNeedle[aLineName] <= 0) {
	      throw new TypeError("Line must be greater than or equal to 1, got "
	                          + aNeedle[aLineName]);
	    }
	    if (aNeedle[aColumnName] < 0) {
	      throw new TypeError("Column must be greater than or equal to 0, got "
	                          + aNeedle[aColumnName]);
	    }

	    return binarySearch$4.search(aNeedle, aMappings, aComparator, aBias);
	  }

	  allGeneratedPositionsFor(aArgs) {
	    const line = util$e.getArg(aArgs, "line");

	    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	    // returns the index of the closest mapping less than the needle. By
	    // setting needle.originalColumn to 0, we thus find the last mapping for
	    // the given line, provided such a mapping exists.
	    const needle = {
	      source: util$e.getArg(aArgs, "source"),
	      originalLine: line,
	      originalColumn: util$e.getArg(aArgs, "column", 0)
	    };

	    needle.source = this._findSourceIndex(needle.source);
	    if (needle.source < 0) {
	      return [];
	    }

	    if (needle.originalLine < 1) {
	      throw new Error("Line numbers must be >= 1");
	    }

	    if (needle.originalColumn < 0) {
	      throw new Error("Column numbers must be >= 0");
	    }

	    const mappings = [];

	    let index = this._findMapping(needle,
	                                  this._originalMappings,
	                                  "originalLine",
	                                  "originalColumn",
	                                  util$e.compareByOriginalPositions,
	                                  binarySearch$4.LEAST_UPPER_BOUND);
	    if (index >= 0) {
	      let mapping = this._originalMappings[index];

	      if (aArgs.column === undefined) {
	        const originalLine = mapping.originalLine;

	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we found. Since
	        // mappings are sorted, this is guaranteed to find all mappings for
	        // the line we found.
	        while (mapping && mapping.originalLine === originalLine) {
	          let lastColumn = mapping.lastGeneratedColumn;
	          if (this._computedColumnSpans && lastColumn === null) {
	            lastColumn = Infinity;
	          }
	          mappings.push({
	            line: util$e.getArg(mapping, "generatedLine", null),
	            column: util$e.getArg(mapping, "generatedColumn", null),
	            lastColumn,
	          });

	          mapping = this._originalMappings[++index];
	        }
	      } else {
	        const originalColumn = mapping.originalColumn;

	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we were searching for.
	        // Since mappings are sorted, this is guaranteed to find all mappings for
	        // the line we are searching for.
	        while (mapping &&
	               mapping.originalLine === line &&
	               mapping.originalColumn == originalColumn) {
	          let lastColumn = mapping.lastGeneratedColumn;
	          if (this._computedColumnSpans && lastColumn === null) {
	            lastColumn = Infinity;
	          }
	          mappings.push({
	            line: util$e.getArg(mapping, "generatedLine", null),
	            column: util$e.getArg(mapping, "generatedColumn", null),
	            lastColumn,
	          });

	          mapping = this._originalMappings[++index];
	        }
	      }
	    }

	    return mappings;
	  }

	  destroy() {
	    for (let i = 0; i < this._sections.length; i++) {
	      this._sections[i].consumer.destroy();
	    }
	  }
	}

	/*
	 * Cheat to get around inter-twingled classes.  `factory()` can be at the end
	 * where it has access to non-hoisted classes, but it gets hoisted itself.
	 */
	function _factory(aSourceMap, aSourceMapURL) {
	  let sourceMap = aSourceMap;
	  if (typeof aSourceMap === "string") {
	    sourceMap = util$e.parseSourceMapInput(aSourceMap);
	  }

	  const consumer = sourceMap.sections != null
	      ? new IndexedSourceMapConsumer$2(sourceMap, aSourceMapURL)
	      : new BasicSourceMapConsumer$2(sourceMap, aSourceMapURL);
	  return Promise.resolve(consumer);
	}

	function _factoryBSM(aSourceMap, aSourceMapURL) {
	  return BasicSourceMapConsumer$2.fromSourceMap(aSourceMap, aSourceMapURL);
	}

	var typescript$2 = {};

	var babel = {};

	var _babel_options = {};

	Object.defineProperty(_babel_options, "__esModule", { value: true });
	var util_1 = util$r;
	function getBabelOptions(options) {
	    // The goal here is to tolerate as much syntax as possible, since Recast
	    // is not in the business of forbidding anything. If you want your
	    // parser to be more restrictive for some reason, you can always pass
	    // your own parser object to recast.parse.
	    return {
	        sourceType: util_1.getOption(options, "sourceType", "module"),
	        strictMode: util_1.getOption(options, "strictMode", false),
	        allowImportExportEverywhere: true,
	        allowReturnOutsideFunction: true,
	        startLine: 1,
	        tokens: true,
	        plugins: [
	            "asyncGenerators",
	            "bigInt",
	            "classPrivateMethods",
	            "classPrivateProperties",
	            "classProperties",
	            "decorators-legacy",
	            "doExpressions",
	            "dynamicImport",
	            "exportDefaultFrom",
	            "exportExtensions",
	            "exportNamespaceFrom",
	            "functionBind",
	            "functionSent",
	            "importMeta",
	            "nullishCoalescingOperator",
	            "numericSeparator",
	            "objectRestSpread",
	            "optionalCatchBinding",
	            "optionalChaining",
	            ["pipelineOperator", { proposal: "minimal" }],
	            "throwExpressions",
	        ]
	    };
	}
	_babel_options.default = getBabelOptions;

	var lib$x = {};

	Object.defineProperty(lib$x, '__esModule', { value: true });

	const lineBreak$1 = /\r\n?|[\n\u2028\u2029]/;
	const lineBreakG$1 = new RegExp(lineBreak$1.source, "g");
	function isNewLine$1(code) {
	  switch (code) {
	    case 10:
	    case 13:
	    case 8232:
	    case 8233:
	      return true;

	    default:
	      return false;
	  }
	}
	const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
	const skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/y;
	const skipWhiteSpaceToLineBreak = new RegExp("(?=(" + skipWhiteSpaceInLine.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
	function isWhitespace$1(code) {
	  switch (code) {
	    case 0x0009:
	    case 0x000b:
	    case 0x000c:
	    case 32:
	    case 160:
	    case 5760:
	    case 0x2000:
	    case 0x2001:
	    case 0x2002:
	    case 0x2003:
	    case 0x2004:
	    case 0x2005:
	    case 0x2006:
	    case 0x2007:
	    case 0x2008:
	    case 0x2009:
	    case 0x200a:
	    case 0x202f:
	    case 0x205f:
	    case 0x3000:
	    case 0xfeff:
	      return true;

	    default:
	      return false;
	  }
	}

	class Position$1 {
	  constructor(line, col) {
	    this.line = void 0;
	    this.column = void 0;
	    this.line = line;
	    this.column = col;
	  }

	}
	class SourceLocation$1 {
	  constructor(start, end) {
	    this.start = void 0;
	    this.end = void 0;
	    this.filename = void 0;
	    this.identifierName = void 0;
	    this.start = start;
	    this.end = end;
	  }

	}
	function getLineInfo$1(input, offset) {
	  let line = 1;
	  let lineStart = 0;
	  let match;
	  lineBreakG$1.lastIndex = 0;

	  while ((match = lineBreakG$1.exec(input)) && match.index < offset) {
	    line++;
	    lineStart = lineBreakG$1.lastIndex;
	  }

	  return new Position$1(line, offset - lineStart);
	}

	class BaseParser {
	  constructor() {
	    this.sawUnambiguousESM = false;
	    this.ambiguousScriptDifferentAst = false;
	  }

	  hasPlugin(name) {
	    return this.plugins.has(name);
	  }

	  getPluginOption(plugin, name) {
	    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];
	  }

	}

	function setTrailingComments(node, comments) {
	  if (node.trailingComments === undefined) {
	    node.trailingComments = comments;
	  } else {
	    node.trailingComments.unshift(...comments);
	  }
	}

	function setInnerComments(node, comments) {
	  if (node.innerComments === undefined) {
	    node.innerComments = comments;
	  } else if (comments !== undefined) {
	    node.innerComments.unshift(...comments);
	  }
	}

	function adjustInnerComments(node, elements, commentWS) {
	  let lastElement = null;
	  let i = elements.length;

	  while (lastElement === null && i > 0) {
	    lastElement = elements[--i];
	  }

	  if (lastElement === null || lastElement.start > commentWS.start) {
	    setInnerComments(node, commentWS.comments);
	  } else {
	    setTrailingComments(lastElement, commentWS.comments);
	  }
	}

	class CommentsParser extends BaseParser {
	  addComment(comment) {
	    if (this.filename) comment.loc.filename = this.filename;
	    this.state.comments.push(comment);
	  }

	  processComment(node) {
	    const {
	      commentStack
	    } = this.state;
	    const commentStackLength = commentStack.length;
	    if (commentStackLength === 0) return;
	    let i = commentStackLength - 1;
	    const lastCommentWS = commentStack[i];

	    if (lastCommentWS.start === node.end) {
	      lastCommentWS.leadingNode = node;
	      i--;
	    }

	    const {
	      start: nodeStart
	    } = node;

	    for (; i >= 0; i--) {
	      const commentWS = commentStack[i];
	      const commentEnd = commentWS.end;

	      if (commentEnd > nodeStart) {
	        commentWS.containingNode = node;
	        this.finalizeComment(commentWS);
	        commentStack.splice(i, 1);
	      } else {
	        if (commentEnd === nodeStart) {
	          commentWS.trailingNode = node;
	        }

	        break;
	      }
	    }
	  }

	  finalizeComment(commentWS) {
	    const {
	      comments
	    } = commentWS;

	    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {
	      if (commentWS.leadingNode !== null) {
	        setTrailingComments(commentWS.leadingNode, comments);
	      }

	      if (commentWS.trailingNode !== null) {
	        commentWS.trailingNode.leadingComments = comments;
	      }
	    } else {
	      const {
	        containingNode: node,
	        start: commentStart
	      } = commentWS;

	      if (this.input.charCodeAt(commentStart - 1) === 44) {
	        switch (node.type) {
	          case "ObjectExpression":
	          case "ObjectPattern":
	          case "RecordExpression":
	            adjustInnerComments(node, node.properties, commentWS);
	            break;

	          case "CallExpression":
	          case "OptionalCallExpression":
	            adjustInnerComments(node, node.arguments, commentWS);
	            break;

	          case "FunctionDeclaration":
	          case "FunctionExpression":
	          case "ArrowFunctionExpression":
	          case "ObjectMethod":
	          case "ClassMethod":
	          case "ClassPrivateMethod":
	            adjustInnerComments(node, node.params, commentWS);
	            break;

	          case "ArrayExpression":
	          case "ArrayPattern":
	          case "TupleExpression":
	            adjustInnerComments(node, node.elements, commentWS);
	            break;

	          case "ExportNamedDeclaration":
	          case "ImportDeclaration":
	            adjustInnerComments(node, node.specifiers, commentWS);
	            break;

	          default:
	            {
	              setInnerComments(node, comments);
	            }
	        }
	      } else {
	        setInnerComments(node, comments);
	      }
	    }
	  }

	  finalizeRemainingComments() {
	    const {
	      commentStack
	    } = this.state;

	    for (let i = commentStack.length - 1; i >= 0; i--) {
	      this.finalizeComment(commentStack[i]);
	    }

	    this.state.commentStack = [];
	  }

	  resetPreviousNodeTrailingComments(node) {
	    const {
	      commentStack
	    } = this.state;
	    const {
	      length
	    } = commentStack;
	    if (length === 0) return;
	    const commentWS = commentStack[length - 1];

	    if (commentWS.leadingNode === node) {
	      commentWS.leadingNode = null;
	    }
	  }

	}

	const ErrorCodes = Object.freeze({
	  SyntaxError: "BABEL_PARSER_SYNTAX_ERROR",
	  SourceTypeModuleError: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"
	});

	const ErrorMessages = makeErrorTemplates({
	  AccessorIsGenerator: "A %0ter cannot be a generator.",
	  ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
	  AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
	  AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
	  AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
	  AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
	  AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
	  AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
	  BadGetterArity: "A 'get' accesor must not have any formal parameters.",
	  BadSetterArity: "A 'set' accesor must have exactly one formal parameter.",
	  BadSetterRestParameter: "A 'set' accesor function argument must not be a rest parameter.",
	  ConstructorClassField: "Classes may not have a field named 'constructor'.",
	  ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
	  ConstructorIsAccessor: "Class constructor may not be an accessor.",
	  ConstructorIsAsync: "Constructor can't be an async function.",
	  ConstructorIsGenerator: "Constructor can't be a generator.",
	  DeclarationMissingInitializer: "'%0' require an initialization value.",
	  DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.",
	  DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
	  DecoratorExportClass: "Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.",
	  DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
	  DecoratorStaticBlock: "Decorators can't be used with a static block.",
	  DeletePrivateField: "Deleting a private field is not allowed.",
	  DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
	  DuplicateConstructor: "Duplicate constructor in the same class.",
	  DuplicateDefaultExport: "Only one default export allowed per module.",
	  DuplicateExport: "`%0` has already been exported. Exported identifiers must be unique.",
	  DuplicateProto: "Redefinition of __proto__ property.",
	  DuplicateRegExpFlags: "Duplicate regular expression flag.",
	  ElementAfterRest: "Rest element must be last element.",
	  EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
	  ExportBindingIsString: "A string literal cannot be used as an exported binding without `from`.\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?",
	  ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
	  ForInOfLoopInitializer: "'%0' loop variable declaration may not have an initializer.",
	  ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
	  ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
	  GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
	  IllegalBreakContinue: "Unsyntactic %0.",
	  IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
	  IllegalReturn: "'return' outside of function.",
	  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\n- Did you mean `import { "%0" as foo }`?',
	  ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.",
	  ImportCallArity: "`import()` requires exactly %0.",
	  ImportCallNotNewExpression: "Cannot use new with import(...).",
	  ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
	  InvalidBigIntLiteral: "Invalid BigIntLiteral.",
	  InvalidCodePoint: "Code point out of bounds.",
	  InvalidDecimal: "Invalid decimal.",
	  InvalidDigit: "Expected number in radix %0.",
	  InvalidEscapeSequence: "Bad character escape sequence.",
	  InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
	  InvalidEscapedReservedWord: "Escape sequence in keyword %0.",
	  InvalidIdentifier: "Invalid identifier %0.",
	  InvalidLhs: "Invalid left-hand side in %0.",
	  InvalidLhsBinding: "Binding invalid left-hand side in %0.",
	  InvalidNumber: "Invalid number.",
	  InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
	  InvalidOrUnexpectedToken: "Unexpected character '%0'.",
	  InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
	  InvalidPrivateFieldResolution: "Private name #%0 is not defined.",
	  InvalidPropertyBindingPattern: "Binding member expression.",
	  InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
	  InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
	  LabelRedeclaration: "Label '%0' is already declared.",
	  LetInLexicalBinding: "'let' is not allowed to be used as a name in 'let' or 'const' declarations.",
	  LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
	  MalformedRegExpFlags: "Invalid regular expression flag.",
	  MissingClassName: "A class name is required.",
	  MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
	  MissingSemicolon: "Missing semicolon.",
	  MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
	  MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
	  ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
	  ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
	  ModuleAttributesWithDuplicateKeys: 'Duplicate key "%0" is not allowed in module attributes.',
	  ModuleExportNameHasLoneSurrogate: "An export name cannot include a lone surrogate, found '\\u%0'.",
	  ModuleExportUndefined: "Export '%0' is not defined.",
	  MultipleDefaultsInSwitch: "Multiple default clauses.",
	  NewlineAfterThrow: "Illegal newline after throw.",
	  NoCatchOrFinally: "Missing catch or finally clause.",
	  NumberIdentifier: "Identifier directly after number.",
	  NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
	  ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
	  OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
	  OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
	  OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
	  ParamDupe: "Argument name clash.",
	  PatternHasAccessor: "Object pattern can't contain getter or setter.",
	  PatternHasMethod: "Object pattern can't contain methods.",
	  PipeBodyIsTighter: "Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
	  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
	  PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
	  PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "%0" }.',
	  PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
	  PipeUnparenthesizedBody: "Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.",
	  PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
	  PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
	  PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
	  PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
	  PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
	  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
	  PrivateInExpectedIn: "Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).",
	  PrivateNameRedeclaration: "Duplicate private name #%0.",
	  RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
	  RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
	  RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
	  RecordNoProto: "'__proto__' is not allowed in Record expressions.",
	  RestTrailingComma: "Unexpected trailing comma after rest element.",
	  SloppyFunction: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
	  StaticPrototype: "Classes may not have static property named prototype.",
	  StrictDelete: "Deleting local variable in strict mode.",
	  StrictEvalArguments: "Assigning to '%0' in strict mode.",
	  StrictEvalArgumentsBinding: "Binding '%0' in strict mode.",
	  StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
	  StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
	  StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
	  StrictWith: "'with' in strict mode.",
	  SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
	  SuperPrivateField: "Private fields can't be accessed on super.",
	  TrailingDecorator: "Decorators must be attached to a class element.",
	  TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
	  TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
	  TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
	  UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
	  UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
	  UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
	  UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
	  UnexpectedKeyword: "Unexpected keyword '%0'.",
	  UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
	  UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
	  UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
	  UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
	  UnexpectedPrivateField: "Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\n or a property of member expression (i.e. this.#p).",
	  UnexpectedReservedWord: "Unexpected reserved word '%0'.",
	  UnexpectedSuper: "'super' is only allowed in object methods and classes.",
	  UnexpectedToken: "Unexpected token '%0'.",
	  UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
	  UnsupportedBind: "Binding should be performed on object property.",
	  UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
	  UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
	  UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
	  UnsupportedMetaProperty: "The only valid meta property for %0 is %0.%1.",
	  UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
	  UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
	  UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
	  UnterminatedComment: "Unterminated comment.",
	  UnterminatedRegExp: "Unterminated regular expression.",
	  UnterminatedString: "Unterminated string constant.",
	  UnterminatedTemplate: "Unterminated template.",
	  VarRedeclaration: "Identifier '%0' has already been declared.",
	  YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
	  YieldInParameter: "Yield expression is not allowed in formal parameters.",
	  ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
	}, ErrorCodes.SyntaxError);
	const SourceTypeModuleErrorMessages = makeErrorTemplates({
	  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: "module"'`,
	  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: "module"'`
	}, ErrorCodes.SourceTypeModuleError);

	function keepReasonCodeCompat(reasonCode, syntaxPlugin) {
	  {
	    if (syntaxPlugin === "flow" && reasonCode === "PatternIsOptional") {
	      return "OptionalBindingPattern";
	    }
	  }
	  return reasonCode;
	}

	function makeErrorTemplates(messages, code, syntaxPlugin) {
	  const templates = {};
	  Object.keys(messages).forEach(reasonCode => {
	    templates[reasonCode] = Object.freeze({
	      code,
	      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),
	      template: messages[reasonCode]
	    });
	  });
	  return Object.freeze(templates);
	}
	class ParserError extends CommentsParser {
	  getLocationForPosition(pos) {
	    let loc;
	    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo$1(this.input, pos);
	    return loc;
	  }

	  raise(pos, {
	    code,
	    reasonCode,
	    template
	  }, ...params) {
	    return this.raiseWithData(pos, {
	      code,
	      reasonCode
	    }, template, ...params);
	  }

	  raiseOverwrite(pos, {
	    code,
	    template
	  }, ...params) {
	    const loc = this.getLocationForPosition(pos);
	    const message = template.replace(/%(\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;

	    if (this.options.errorRecovery) {
	      const errors = this.state.errors;

	      for (let i = errors.length - 1; i >= 0; i--) {
	        const error = errors[i];

	        if (error.pos === pos) {
	          return Object.assign(error, {
	            message
	          });
	        } else if (error.pos < pos) {
	          break;
	        }
	      }
	    }

	    return this._raise({
	      code,
	      loc,
	      pos
	    }, message);
	  }

	  raiseWithData(pos, data, errorTemplate, ...params) {
	    const loc = this.getLocationForPosition(pos);
	    const message = errorTemplate.replace(/%(\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;
	    return this._raise(Object.assign({
	      loc,
	      pos
	    }, data), message);
	  }

	  _raise(errorContext, message) {
	    const err = new SyntaxError(message);
	    Object.assign(err, errorContext);

	    if (this.options.errorRecovery) {
	      if (!this.isLookahead) this.state.errors.push(err);
	      return err;
	    } else {
	      throw err;
	    }
	  }

	}

	var estree = (superClass => class extends superClass {
	  parseRegExpLiteral({
	    pattern,
	    flags
	  }) {
	    let regex = null;

	    try {
	      regex = new RegExp(pattern, flags);
	    } catch (e) {}

	    const node = this.estreeParseLiteral(regex);
	    node.regex = {
	      pattern,
	      flags
	    };
	    return node;
	  }

	  parseBigIntLiteral(value) {
	    let bigInt;

	    try {
	      bigInt = BigInt(value);
	    } catch (_unused) {
	      bigInt = null;
	    }

	    const node = this.estreeParseLiteral(bigInt);
	    node.bigint = String(node.value || value);
	    return node;
	  }

	  parseDecimalLiteral(value) {
	    const decimal = null;
	    const node = this.estreeParseLiteral(decimal);
	    node.decimal = String(node.value || value);
	    return node;
	  }

	  estreeParseLiteral(value) {
	    return this.parseLiteral(value, "Literal");
	  }

	  parseStringLiteral(value) {
	    return this.estreeParseLiteral(value);
	  }

	  parseNumericLiteral(value) {
	    return this.estreeParseLiteral(value);
	  }

	  parseNullLiteral() {
	    return this.estreeParseLiteral(null);
	  }

	  parseBooleanLiteral(value) {
	    return this.estreeParseLiteral(value);
	  }

	  directiveToStmt(directive) {
	    const directiveLiteral = directive.value;
	    const stmt = this.startNodeAt(directive.start, directive.loc.start);
	    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);
	    expression.value = directiveLiteral.extra.expressionValue;
	    expression.raw = directiveLiteral.extra.raw;
	    stmt.expression = this.finishNodeAt(expression, "Literal", directiveLiteral.end, directiveLiteral.loc.end);
	    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);
	    return this.finishNodeAt(stmt, "ExpressionStatement", directive.end, directive.loc.end);
	  }

	  initFunction(node, isAsync) {
	    super.initFunction(node, isAsync);
	    node.expression = false;
	  }

	  checkDeclaration(node) {
	    if (node != null && this.isObjectProperty(node)) {
	      this.checkDeclaration(node.value);
	    } else {
	      super.checkDeclaration(node);
	    }
	  }

	  getObjectOrClassMethodParams(method) {
	    return method.value.params;
	  }

	  isValidDirective(stmt) {
	    var _stmt$expression$extr;

	    return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
	  }

	  stmtToDirective(stmt) {
	    const value = stmt.expression.value;
	    const directive = super.stmtToDirective(stmt);
	    this.addExtra(directive.value, "expressionValue", value);
	    return directive;
	  }

	  parseBlockBody(node, ...args) {
	    super.parseBlockBody(node, ...args);
	    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));
	    node.body = directiveStatements.concat(node.body);
	    delete node.directives;
	  }

	  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
	    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true);

	    if (method.typeParameters) {
	      method.value.typeParameters = method.typeParameters;
	      delete method.typeParameters;
	    }

	    classBody.body.push(method);
	  }

	  parsePrivateName() {
	    const node = super.parsePrivateName();

	    if (!this.getPluginOption("estree", "classFeatures")) {
	      return node;
	    }

	    return this.convertPrivateNameToPrivateIdentifier(node);
	  }

	  convertPrivateNameToPrivateIdentifier(node) {
	    const name = super.getPrivateNameSV(node);
	    node = node;
	    delete node.id;
	    node.name = name;
	    node.type = "PrivateIdentifier";
	    return node;
	  }

	  isPrivateName(node) {
	    if (!this.getPluginOption("estree", "classFeatures")) {
	      return super.isPrivateName(node);
	    }

	    return node.type === "PrivateIdentifier";
	  }

	  getPrivateNameSV(node) {
	    if (!this.getPluginOption("estree", "classFeatures")) {
	      return super.getPrivateNameSV(node);
	    }

	    return node.name;
	  }

	  parseLiteral(value, type) {
	    const node = super.parseLiteral(value, type);
	    node.raw = node.extra.raw;
	    delete node.extra;
	    return node;
	  }

	  parseFunctionBody(node, allowExpression, isMethod = false) {
	    super.parseFunctionBody(node, allowExpression, isMethod);
	    node.expression = node.body.type !== "BlockStatement";
	  }

	  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
	    let funcNode = this.startNode();
	    funcNode.kind = node.kind;
	    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
	    funcNode.type = "FunctionExpression";
	    delete funcNode.kind;
	    node.value = funcNode;

	    if (type === "ClassPrivateMethod") {
	      node.computed = false;
	    }

	    type = "MethodDefinition";
	    return this.finishNode(node, type);
	  }

	  parseClassProperty(...args) {
	    const propertyNode = super.parseClassProperty(...args);

	    if (this.getPluginOption("estree", "classFeatures")) {
	      propertyNode.type = "PropertyDefinition";
	    }

	    return propertyNode;
	  }

	  parseClassPrivateProperty(...args) {
	    const propertyNode = super.parseClassPrivateProperty(...args);

	    if (this.getPluginOption("estree", "classFeatures")) {
	      propertyNode.type = "PropertyDefinition";
	      propertyNode.computed = false;
	    }

	    return propertyNode;
	  }

	  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
	    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);

	    if (node) {
	      node.type = "Property";
	      if (node.kind === "method") node.kind = "init";
	      node.shorthand = false;
	    }

	    return node;
	  }

	  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
	    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);

	    if (node) {
	      node.kind = "init";
	      node.type = "Property";
	    }

	    return node;
	  }

	  isAssignable(node, isBinding) {
	    if (node != null && this.isObjectProperty(node)) {
	      return this.isAssignable(node.value, isBinding);
	    }

	    return super.isAssignable(node, isBinding);
	  }

	  toAssignable(node, isLHS = false) {
	    if (node != null && this.isObjectProperty(node)) {
	      this.toAssignable(node.value, isLHS);
	      return node;
	    }

	    return super.toAssignable(node, isLHS);
	  }

	  toAssignableObjectExpressionProp(prop, ...args) {
	    if (prop.kind === "get" || prop.kind === "set") {
	      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);
	    } else if (prop.method) {
	      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);
	    } else {
	      super.toAssignableObjectExpressionProp(prop, ...args);
	    }
	  }

	  finishCallExpression(node, optional) {
	    super.finishCallExpression(node, optional);

	    if (node.callee.type === "Import") {
	      node.type = "ImportExpression";
	      node.source = node.arguments[0];

	      if (this.hasPlugin("importAssertions")) {
	        var _node$arguments$;

	        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;
	      }

	      delete node.arguments;
	      delete node.callee;
	    }

	    return node;
	  }

	  toReferencedArguments(node) {
	    if (node.type === "ImportExpression") {
	      return;
	    }

	    super.toReferencedArguments(node);
	  }

	  parseExport(node) {
	    super.parseExport(node);

	    switch (node.type) {
	      case "ExportAllDeclaration":
	        node.exported = null;
	        break;

	      case "ExportNamedDeclaration":
	        if (node.specifiers.length === 1 && node.specifiers[0].type === "ExportNamespaceSpecifier") {
	          node.type = "ExportAllDeclaration";
	          node.exported = node.specifiers[0].exported;
	          delete node.specifiers;
	        }

	        break;
	    }

	    return node;
	  }

	  parseSubscript(base, startPos, startLoc, noCalls, state) {
	    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);

	    if (state.optionalChainMember) {
	      if (node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression") {
	        node.type = node.type.substring(8);
	      }

	      if (state.stop) {
	        const chain = this.startNodeAtNode(node);
	        chain.expression = node;
	        return this.finishNode(chain, "ChainExpression");
	      }
	    } else if (node.type === "MemberExpression" || node.type === "CallExpression") {
	      node.optional = false;
	    }

	    return node;
	  }

	  hasPropertyAsPrivateName(node) {
	    if (node.type === "ChainExpression") {
	      node = node.expression;
	    }

	    return super.hasPropertyAsPrivateName(node);
	  }

	  isOptionalChain(node) {
	    return node.type === "ChainExpression";
	  }

	  isObjectProperty(node) {
	    return node.type === "Property" && node.kind === "init" && !node.method;
	  }

	  isObjectMethod(node) {
	    return node.method || node.kind === "get" || node.kind === "set";
	  }

	});

	class TokContext$1 {
	  constructor(token, preserveSpace) {
	    this.token = void 0;
	    this.preserveSpace = void 0;
	    this.token = token;
	    this.preserveSpace = !!preserveSpace;
	  }

	}
	const types$2 = {
	  brace: new TokContext$1("{"),
	  template: new TokContext$1("`", true)
	};

	const beforeExpr$1 = true;
	const startsExpr$1 = true;
	const isLoop$2 = true;
	const isAssign$1 = true;
	const prefix$1 = true;
	const postfix$1 = true;
	class ExportedTokenType {
	  constructor(label, conf = {}) {
	    this.label = void 0;
	    this.keyword = void 0;
	    this.beforeExpr = void 0;
	    this.startsExpr = void 0;
	    this.rightAssociative = void 0;
	    this.isLoop = void 0;
	    this.isAssign = void 0;
	    this.prefix = void 0;
	    this.postfix = void 0;
	    this.binop = void 0;
	    this.label = label;
	    this.keyword = conf.keyword;
	    this.beforeExpr = !!conf.beforeExpr;
	    this.startsExpr = !!conf.startsExpr;
	    this.rightAssociative = !!conf.rightAssociative;
	    this.isLoop = !!conf.isLoop;
	    this.isAssign = !!conf.isAssign;
	    this.prefix = !!conf.prefix;
	    this.postfix = !!conf.postfix;
	    this.binop = conf.binop != null ? conf.binop : null;
	    {
	      this.updateContext = null;
	    }
	  }

	}
	const keywords$1$1 = new Map();

	function createKeyword(name, options = {}) {
	  options.keyword = name;
	  const token = createToken(name, options);
	  keywords$1$1.set(name, token);
	  return token;
	}

	function createBinop(name, binop) {
	  return createToken(name, {
	    beforeExpr: beforeExpr$1,
	    binop
	  });
	}

	let tokenTypeCounter = -1;
	const tokenTypes = [];
	const tokenLabels = [];
	const tokenBinops = [];
	const tokenBeforeExprs = [];
	const tokenStartsExprs = [];
	const tokenPrefixes = [];

	function createToken(name, options = {}) {
	  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;

	  ++tokenTypeCounter;
	  tokenLabels.push(name);
	  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);
	  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);
	  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);
	  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);
	  tokenTypes.push(new ExportedTokenType(name, options));
	  return tokenTypeCounter;
	}

	const tt = {
	  num: createToken("num", {
	    startsExpr: startsExpr$1
	  }),
	  bigint: createToken("bigint", {
	    startsExpr: startsExpr$1
	  }),
	  decimal: createToken("decimal", {
	    startsExpr: startsExpr$1
	  }),
	  regexp: createToken("regexp", {
	    startsExpr: startsExpr$1
	  }),
	  string: createToken("string", {
	    startsExpr: startsExpr$1
	  }),
	  name: createToken("name", {
	    startsExpr: startsExpr$1
	  }),
	  privateName: createToken("#name", {
	    startsExpr: startsExpr$1
	  }),
	  eof: createToken("eof"),
	  bracketL: createToken("[", {
	    beforeExpr: beforeExpr$1,
	    startsExpr: startsExpr$1
	  }),
	  bracketHashL: createToken("#[", {
	    beforeExpr: beforeExpr$1,
	    startsExpr: startsExpr$1
	  }),
	  bracketBarL: createToken("[|", {
	    beforeExpr: beforeExpr$1,
	    startsExpr: startsExpr$1
	  }),
	  bracketR: createToken("]"),
	  bracketBarR: createToken("|]"),
	  braceL: createToken("{", {
	    beforeExpr: beforeExpr$1,
	    startsExpr: startsExpr$1
	  }),
	  braceBarL: createToken("{|", {
	    beforeExpr: beforeExpr$1,
	    startsExpr: startsExpr$1
	  }),
	  braceHashL: createToken("#{", {
	    beforeExpr: beforeExpr$1,
	    startsExpr: startsExpr$1
	  }),
	  braceR: createToken("}", {
	    beforeExpr: beforeExpr$1
	  }),
	  braceBarR: createToken("|}"),
	  parenL: createToken("(", {
	    beforeExpr: beforeExpr$1,
	    startsExpr: startsExpr$1
	  }),
	  parenR: createToken(")"),
	  comma: createToken(",", {
	    beforeExpr: beforeExpr$1
	  }),
	  semi: createToken(";", {
	    beforeExpr: beforeExpr$1
	  }),
	  colon: createToken(":", {
	    beforeExpr: beforeExpr$1
	  }),
	  doubleColon: createToken("::", {
	    beforeExpr: beforeExpr$1
	  }),
	  dot: createToken("."),
	  question: createToken("?", {
	    beforeExpr: beforeExpr$1
	  }),
	  questionDot: createToken("?."),
	  arrow: createToken("=>", {
	    beforeExpr: beforeExpr$1
	  }),
	  template: createToken("template"),
	  ellipsis: createToken("...", {
	    beforeExpr: beforeExpr$1
	  }),
	  backQuote: createToken("`", {
	    startsExpr: startsExpr$1
	  }),
	  dollarBraceL: createToken("${", {
	    beforeExpr: beforeExpr$1,
	    startsExpr: startsExpr$1
	  }),
	  at: createToken("@"),
	  hash: createToken("#", {
	    startsExpr: startsExpr$1
	  }),
	  interpreterDirective: createToken("#!..."),
	  eq: createToken("=", {
	    beforeExpr: beforeExpr$1,
	    isAssign: isAssign$1
	  }),
	  assign: createToken("_=", {
	    beforeExpr: beforeExpr$1,
	    isAssign: isAssign$1
	  }),
	  slashAssign: createToken("_=", {
	    beforeExpr: beforeExpr$1,
	    isAssign: isAssign$1
	  }),
	  moduloAssign: createToken("_=", {
	    beforeExpr: beforeExpr$1,
	    isAssign: isAssign$1
	  }),
	  incDec: createToken("++/--", {
	    prefix: prefix$1,
	    postfix: postfix$1,
	    startsExpr: startsExpr$1
	  }),
	  bang: createToken("!", {
	    beforeExpr: beforeExpr$1,
	    prefix: prefix$1,
	    startsExpr: startsExpr$1
	  }),
	  tilde: createToken("~", {
	    beforeExpr: beforeExpr$1,
	    prefix: prefix$1,
	    startsExpr: startsExpr$1
	  }),
	  pipeline: createBinop("|>", 0),
	  nullishCoalescing: createBinop("??", 1),
	  logicalOR: createBinop("||", 1),
	  logicalAND: createBinop("&&", 2),
	  bitwiseOR: createBinop("|", 3),
	  bitwiseXOR: createBinop("^", 4),
	  bitwiseAND: createBinop("&", 5),
	  equality: createBinop("==/!=/===/!==", 6),
	  relational: createBinop("</>/<=/>=", 7),
	  bitShift: createBinop("<</>>/>>>", 8),
	  plusMin: createToken("+/-", {
	    beforeExpr: beforeExpr$1,
	    binop: 9,
	    prefix: prefix$1,
	    startsExpr: startsExpr$1
	  }),
	  modulo: createToken("%", {
	    binop: 10,
	    startsExpr: startsExpr$1
	  }),
	  star: createToken("*", {
	    binop: 10
	  }),
	  slash: createBinop("/", 10),
	  exponent: createToken("**", {
	    beforeExpr: beforeExpr$1,
	    binop: 11,
	    rightAssociative: true
	  }),
	  _in: createKeyword("in", {
	    beforeExpr: beforeExpr$1,
	    binop: 7
	  }),
	  _instanceof: createKeyword("instanceof", {
	    beforeExpr: beforeExpr$1,
	    binop: 7
	  }),
	  _break: createKeyword("break"),
	  _case: createKeyword("case", {
	    beforeExpr: beforeExpr$1
	  }),
	  _catch: createKeyword("catch"),
	  _continue: createKeyword("continue"),
	  _debugger: createKeyword("debugger"),
	  _default: createKeyword("default", {
	    beforeExpr: beforeExpr$1
	  }),
	  _else: createKeyword("else", {
	    beforeExpr: beforeExpr$1
	  }),
	  _finally: createKeyword("finally"),
	  _function: createKeyword("function", {
	    startsExpr: startsExpr$1
	  }),
	  _if: createKeyword("if"),
	  _return: createKeyword("return", {
	    beforeExpr: beforeExpr$1
	  }),
	  _switch: createKeyword("switch"),
	  _throw: createKeyword("throw", {
	    beforeExpr: beforeExpr$1,
	    prefix: prefix$1,
	    startsExpr: startsExpr$1
	  }),
	  _try: createKeyword("try"),
	  _var: createKeyword("var"),
	  _const: createKeyword("const"),
	  _with: createKeyword("with"),
	  _new: createKeyword("new", {
	    beforeExpr: beforeExpr$1,
	    startsExpr: startsExpr$1
	  }),
	  _this: createKeyword("this", {
	    startsExpr: startsExpr$1
	  }),
	  _super: createKeyword("super", {
	    startsExpr: startsExpr$1
	  }),
	  _class: createKeyword("class", {
	    startsExpr: startsExpr$1
	  }),
	  _extends: createKeyword("extends", {
	    beforeExpr: beforeExpr$1
	  }),
	  _export: createKeyword("export"),
	  _import: createKeyword("import", {
	    startsExpr: startsExpr$1
	  }),
	  _null: createKeyword("null", {
	    startsExpr: startsExpr$1
	  }),
	  _true: createKeyword("true", {
	    startsExpr: startsExpr$1
	  }),
	  _false: createKeyword("false", {
	    startsExpr: startsExpr$1
	  }),
	  _typeof: createKeyword("typeof", {
	    beforeExpr: beforeExpr$1,
	    prefix: prefix$1,
	    startsExpr: startsExpr$1
	  }),
	  _void: createKeyword("void", {
	    beforeExpr: beforeExpr$1,
	    prefix: prefix$1,
	    startsExpr: startsExpr$1
	  }),
	  _delete: createKeyword("delete", {
	    beforeExpr: beforeExpr$1,
	    prefix: prefix$1,
	    startsExpr: startsExpr$1
	  }),
	  _do: createKeyword("do", {
	    isLoop: isLoop$2,
	    beforeExpr: beforeExpr$1
	  }),
	  _for: createKeyword("for", {
	    isLoop: isLoop$2
	  }),
	  _while: createKeyword("while", {
	    isLoop: isLoop$2
	  }),
	  jsxName: createToken("jsxName"),
	  jsxText: createToken("jsxText", {
	    beforeExpr: true
	  }),
	  jsxTagStart: createToken("jsxTagStart", {
	    startsExpr: true
	  }),
	  jsxTagEnd: createToken("jsxTagEnd"),
	  placeholder: createToken("%%", {
	    startsExpr: true
	  })
	};
	function tokenComesBeforeExpression(token) {
	  return tokenBeforeExprs[token];
	}
	function tokenCanStartExpression(token) {
	  return tokenStartsExprs[token];
	}
	function tokenIsAssignment(token) {
	  return token >= 35 && token <= 38;
	}
	function tokenIsLoop(token) {
	  return token >= 89 && token <= 91;
	}
	function tokenIsKeyword(token) {
	  return token >= 57 && token <= 91;
	}
	function tokenIsOperator(token) {
	  return token >= 42 && token <= 58;
	}
	function tokenIsPostfix(token) {
	  return token === 39;
	}
	function tokenIsPrefix(token) {
	  return tokenPrefixes[token];
	}
	function tokenLabelName(token) {
	  return tokenLabels[token];
	}
	function tokenOperatorPrecedence(token) {
	  return tokenBinops[token];
	}
	function tokenIsRightAssociative(token) {
	  return token === 56;
	}
	function getExportedToken(token) {
	  return tokenTypes[token];
	}
	function isTokenType(obj) {
	  return typeof obj === "number";
	}
	{
	  tokenTypes[16].updateContext = context => {
	    context.pop();
	  };

	  tokenTypes[13].updateContext = tokenTypes[15].updateContext = tokenTypes[31].updateContext = context => {
	    context.push(types$2.brace);
	  };

	  tokenTypes[30].updateContext = context => {
	    if (context[context.length - 1] === types$2.template) {
	      context.pop();
	    } else {
	      context.push(types$2.template);
	    }
	  };

	  tokenTypes[94].updateContext = context => {
	    context.push(types$2.j_expr, types$2.j_oTag);
	  };
	}

	let nonASCIIidentifierStartChars$2 = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u0870-\u0887\u0889-\u088e\u08a0-\u08c9\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c5d\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cdd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u1711\u171f-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4c\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ca\ua7d0\ua7d1\ua7d3\ua7d5-\ua7d9\ua7f2-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
	let nonASCIIidentifierChars$2 = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u0898-\u089f\u08ca-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3c\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u180f-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf-\u1ace\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
	const nonASCIIidentifierStart$2 = new RegExp("[" + nonASCIIidentifierStartChars$2 + "]");
	const nonASCIIidentifier$2 = new RegExp("[" + nonASCIIidentifierStartChars$2 + nonASCIIidentifierChars$2 + "]");
	nonASCIIidentifierStartChars$2 = nonASCIIidentifierChars$2 = null;
	const astralIdentifierStartCodes$2 = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
	const astralIdentifierCodes$2 = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];

	function isInAstralSet$2(code, set) {
	  let pos = 0x10000;

	  for (let i = 0, length = set.length; i < length; i += 2) {
	    pos += set[i];
	    if (pos > code) return false;
	    pos += set[i + 1];
	    if (pos >= code) return true;
	  }

	  return false;
	}

	function isIdentifierStart$2(code) {
	  if (code < 65) return code === 36;
	  if (code <= 90) return true;
	  if (code < 97) return code === 95;
	  if (code <= 122) return true;

	  if (code <= 0xffff) {
	    return code >= 0xaa && nonASCIIidentifierStart$2.test(String.fromCharCode(code));
	  }

	  return isInAstralSet$2(code, astralIdentifierStartCodes$2);
	}
	function isIdentifierChar$2(code) {
	  if (code < 48) return code === 36;
	  if (code < 58) return true;
	  if (code < 65) return false;
	  if (code <= 90) return true;
	  if (code < 97) return code === 95;
	  if (code <= 122) return true;

	  if (code <= 0xffff) {
	    return code >= 0xaa && nonASCIIidentifier$2.test(String.fromCharCode(code));
	  }

	  return isInAstralSet$2(code, astralIdentifierStartCodes$2) || isInAstralSet$2(code, astralIdentifierCodes$2);
	}

	const reservedWords$2 = {
	  keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
	  strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
	  strictBind: ["eval", "arguments"]
	};
	const keywords$2 = new Set(reservedWords$2.keyword);
	const reservedWordsStrictSet$1 = new Set(reservedWords$2.strict);
	const reservedWordsStrictBindSet$1 = new Set(reservedWords$2.strictBind);
	function isReservedWord$1(word, inModule) {
	  return inModule && word === "await" || word === "enum";
	}
	function isStrictReservedWord$1(word, inModule) {
	  return isReservedWord$1(word, inModule) || reservedWordsStrictSet$1.has(word);
	}
	function isStrictBindOnlyReservedWord$1(word) {
	  return reservedWordsStrictBindSet$1.has(word);
	}
	function isStrictBindReservedWord$1(word, inModule) {
	  return isStrictReservedWord$1(word, inModule) || isStrictBindOnlyReservedWord$1(word);
	}
	function isKeyword$2(word) {
	  return keywords$2.has(word);
	}

	function isIteratorStart(current, next) {
	  return current === 64 && next === 64;
	}
	const reservedWordLikeSet = new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
	function canBeReservedWord(word) {
	  return reservedWordLikeSet.has(word);
	}

	const SCOPE_OTHER = 0b000000000,
	      SCOPE_PROGRAM = 0b000000001,
	      SCOPE_FUNCTION = 0b000000010,
	      SCOPE_ARROW = 0b000000100,
	      SCOPE_SIMPLE_CATCH = 0b000001000,
	      SCOPE_SUPER = 0b000010000,
	      SCOPE_DIRECT_SUPER = 0b000100000,
	      SCOPE_CLASS = 0b001000000,
	      SCOPE_STATIC_BLOCK = 0b010000000,
	      SCOPE_TS_MODULE = 0b100000000,
	      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;
	const BIND_KIND_VALUE = 0b000000000001,
	      BIND_KIND_TYPE = 0b000000000010,
	      BIND_SCOPE_VAR = 0b000000000100,
	      BIND_SCOPE_LEXICAL = 0b000000001000,
	      BIND_SCOPE_FUNCTION = 0b000000010000,
	      BIND_FLAGS_NONE = 0b000001000000,
	      BIND_FLAGS_CLASS = 0b000010000000,
	      BIND_FLAGS_TS_ENUM = 0b000100000000,
	      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,
	      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,
	      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;
	const BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,
	      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,
	      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,
	      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,
	      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,
	      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,
	      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,
	      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,
	      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,
	      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,
	      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,
	      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,
	      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;
	const CLASS_ELEMENT_FLAG_STATIC = 0b100,
	      CLASS_ELEMENT_KIND_GETTER = 0b010,
	      CLASS_ELEMENT_KIND_SETTER = 0b001,
	      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;
	const CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,
	      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,
	      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,
	      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,
	      CLASS_ELEMENT_OTHER = 0;

	class Scope$2 {
	  constructor(flags) {
	    this.var = new Set();
	    this.lexical = new Set();
	    this.functions = new Set();
	    this.flags = flags;
	  }

	}
	class ScopeHandler {
	  constructor(raise, inModule) {
	    this.scopeStack = [];
	    this.undefinedExports = new Map();
	    this.undefinedPrivateNames = new Map();
	    this.raise = raise;
	    this.inModule = inModule;
	  }

	  get inFunction() {
	    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;
	  }

	  get allowSuper() {
	    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;
	  }

	  get allowDirectSuper() {
	    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;
	  }

	  get inClass() {
	    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;
	  }

	  get inClassAndNotInNonArrowFunction() {
	    const flags = this.currentThisScopeFlags();
	    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;
	  }

	  get inStaticBlock() {
	    for (let i = this.scopeStack.length - 1;; i--) {
	      const {
	        flags
	      } = this.scopeStack[i];

	      if (flags & SCOPE_STATIC_BLOCK) {
	        return true;
	      }

	      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {
	        return false;
	      }
	    }
	  }

	  get inNonArrowFunction() {
	    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;
	  }

	  get treatFunctionsAsVar() {
	    return this.treatFunctionsAsVarInScope(this.currentScope());
	  }

	  createScope(flags) {
	    return new Scope$2(flags);
	  }

	  enter(flags) {
	    this.scopeStack.push(this.createScope(flags));
	  }

	  exit() {
	    this.scopeStack.pop();
	  }

	  treatFunctionsAsVarInScope(scope) {
	    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);
	  }

	  declareName(name, bindingType, pos) {
	    let scope = this.currentScope();

	    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {
	      this.checkRedeclarationInScope(scope, name, bindingType, pos);

	      if (bindingType & BIND_SCOPE_FUNCTION) {
	        scope.functions.add(name);
	      } else {
	        scope.lexical.add(name);
	      }

	      if (bindingType & BIND_SCOPE_LEXICAL) {
	        this.maybeExportDefined(scope, name);
	      }
	    } else if (bindingType & BIND_SCOPE_VAR) {
	      for (let i = this.scopeStack.length - 1; i >= 0; --i) {
	        scope = this.scopeStack[i];
	        this.checkRedeclarationInScope(scope, name, bindingType, pos);
	        scope.var.add(name);
	        this.maybeExportDefined(scope, name);
	        if (scope.flags & SCOPE_VAR) break;
	      }
	    }

	    if (this.inModule && scope.flags & SCOPE_PROGRAM) {
	      this.undefinedExports.delete(name);
	    }
	  }

	  maybeExportDefined(scope, name) {
	    if (this.inModule && scope.flags & SCOPE_PROGRAM) {
	      this.undefinedExports.delete(name);
	    }
	  }

	  checkRedeclarationInScope(scope, name, bindingType, pos) {
	    if (this.isRedeclaredInScope(scope, name, bindingType)) {
	      this.raise(pos, ErrorMessages.VarRedeclaration, name);
	    }
	  }

	  isRedeclaredInScope(scope, name, bindingType) {
	    if (!(bindingType & BIND_KIND_VALUE)) return false;

	    if (bindingType & BIND_SCOPE_LEXICAL) {
	      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);
	    }

	    if (bindingType & BIND_SCOPE_FUNCTION) {
	      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);
	    }

	    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);
	  }

	  checkLocalExport(id) {
	    const {
	      name
	    } = id;
	    const topLevelScope = this.scopeStack[0];

	    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {
	      this.undefinedExports.set(name, id.start);
	    }
	  }

	  currentScope() {
	    return this.scopeStack[this.scopeStack.length - 1];
	  }

	  currentVarScopeFlags() {
	    for (let i = this.scopeStack.length - 1;; i--) {
	      const {
	        flags
	      } = this.scopeStack[i];

	      if (flags & SCOPE_VAR) {
	        return flags;
	      }
	    }
	  }

	  currentThisScopeFlags() {
	    for (let i = this.scopeStack.length - 1;; i--) {
	      const {
	        flags
	      } = this.scopeStack[i];

	      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {
	        return flags;
	      }
	    }
	  }

	}

	class FlowScope extends Scope$2 {
	  constructor(...args) {
	    super(...args);
	    this.declareFunctions = new Set();
	  }

	}

	class FlowScopeHandler extends ScopeHandler {
	  createScope(flags) {
	    return new FlowScope(flags);
	  }

	  declareName(name, bindingType, pos) {
	    const scope = this.currentScope();

	    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
	      this.checkRedeclarationInScope(scope, name, bindingType, pos);
	      this.maybeExportDefined(scope, name);
	      scope.declareFunctions.add(name);
	      return;
	    }

	    super.declareName(...arguments);
	  }

	  isRedeclaredInScope(scope, name, bindingType) {
	    if (super.isRedeclaredInScope(...arguments)) return true;

	    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
	      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));
	    }

	    return false;
	  }

	  checkLocalExport(id) {
	    if (!this.scopeStack[0].declareFunctions.has(id.name)) {
	      super.checkLocalExport(id);
	    }
	  }

	}

	class State$1 {
	  constructor() {
	    this.strict = void 0;
	    this.curLine = void 0;
	    this.startLoc = void 0;
	    this.endLoc = void 0;
	    this.errors = [];
	    this.potentialArrowAt = -1;
	    this.noArrowAt = [];
	    this.noArrowParamsConversionAt = [];
	    this.maybeInArrowParameters = false;
	    this.inType = false;
	    this.noAnonFunctionType = false;
	    this.inPropertyName = false;
	    this.hasFlowComment = false;
	    this.isAmbientContext = false;
	    this.inAbstractClass = false;
	    this.topicContext = {
	      maxNumOfResolvableTopics: 0,
	      maxTopicIndex: null
	    };
	    this.soloAwait = false;
	    this.inFSharpPipelineDirectBody = false;
	    this.labels = [];
	    this.decoratorStack = [[]];
	    this.comments = [];
	    this.commentStack = [];
	    this.pos = 0;
	    this.lineStart = 0;
	    this.type = 7;
	    this.value = null;
	    this.start = 0;
	    this.end = 0;
	    this.lastTokEndLoc = null;
	    this.lastTokStartLoc = null;
	    this.lastTokStart = 0;
	    this.lastTokEnd = 0;
	    this.context = [types$2.brace];
	    this.exprAllowed = true;
	    this.containsEsc = false;
	    this.strictErrors = new Map();
	    this.tokensLength = 0;
	  }

	  init(options) {
	    this.strict = options.strictMode === false ? false : options.strictMode === true ? true : options.sourceType === "module";
	    this.curLine = options.startLine;
	    this.startLoc = this.endLoc = this.curPosition();
	  }

	  curPosition() {
	    return new Position$1(this.curLine, this.pos - this.lineStart);
	  }

	  clone(skipArrays) {
	    const state = new State$1();
	    const keys = Object.keys(this);

	    for (let i = 0, length = keys.length; i < length; i++) {
	      const key = keys[i];
	      let val = this[key];

	      if (!skipArrays && Array.isArray(val)) {
	        val = val.slice();
	      }

	      state[key] = val;
	    }

	    return state;
	  }

	}

	var _isDigit = function isDigit(code) {
	  return code >= 48 && code <= 57;
	};
	const VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);
	const forbiddenNumericSeparatorSiblings = {
	  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],
	  hex: [46, 88, 95, 120]
	};
	const allowedNumericSeparatorSiblings = {};
	allowedNumericSeparatorSiblings.bin = [48, 49];
	allowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];
	allowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];
	allowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];
	class Token$1 {
	  constructor(state) {
	    this.type = state.type;
	    this.value = state.value;
	    this.start = state.start;
	    this.end = state.end;
	    this.loc = new SourceLocation$1(state.startLoc, state.endLoc);
	  }

	}
	class Tokenizer$3 extends ParserError {
	  constructor(options, input) {
	    super();
	    this.isLookahead = void 0;
	    this.tokens = [];
	    this.state = new State$1();
	    this.state.init(options);
	    this.input = input;
	    this.length = input.length;
	    this.isLookahead = false;
	  }

	  pushToken(token) {
	    this.tokens.length = this.state.tokensLength;
	    this.tokens.push(token);
	    ++this.state.tokensLength;
	  }

	  next() {
	    this.checkKeywordEscapes();

	    if (this.options.tokens) {
	      this.pushToken(new Token$1(this.state));
	    }

	    this.state.lastTokEnd = this.state.end;
	    this.state.lastTokStart = this.state.start;
	    this.state.lastTokEndLoc = this.state.endLoc;
	    this.state.lastTokStartLoc = this.state.startLoc;
	    this.nextToken();
	  }

	  eat(type) {
	    if (this.match(type)) {
	      this.next();
	      return true;
	    } else {
	      return false;
	    }
	  }

	  match(type) {
	    return this.state.type === type;
	  }

	  createLookaheadState(state) {
	    return {
	      pos: state.pos,
	      value: null,
	      type: state.type,
	      start: state.start,
	      end: state.end,
	      lastTokEnd: state.end,
	      context: [this.curContext()],
	      inType: state.inType
	    };
	  }

	  lookahead() {
	    const old = this.state;
	    this.state = this.createLookaheadState(old);
	    this.isLookahead = true;
	    this.nextToken();
	    this.isLookahead = false;
	    const curr = this.state;
	    this.state = old;
	    return curr;
	  }

	  nextTokenStart() {
	    return this.nextTokenStartSince(this.state.pos);
	  }

	  nextTokenStartSince(pos) {
	    skipWhiteSpace.lastIndex = pos;
	    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
	  }

	  lookaheadCharCode() {
	    return this.input.charCodeAt(this.nextTokenStart());
	  }

	  codePointAtPos(pos) {
	    let cp = this.input.charCodeAt(pos);

	    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {
	      const trail = this.input.charCodeAt(pos);

	      if ((trail & 0xfc00) === 0xdc00) {
	        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);
	      }
	    }

	    return cp;
	  }

	  setStrict(strict) {
	    this.state.strict = strict;

	    if (strict) {
	      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));
	      this.state.strictErrors.clear();
	    }
	  }

	  curContext() {
	    return this.state.context[this.state.context.length - 1];
	  }

	  nextToken() {
	    const curContext = this.curContext();
	    if (!curContext.preserveSpace) this.skipSpace();
	    this.state.start = this.state.pos;
	    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();

	    if (this.state.pos >= this.length) {
	      this.finishToken(7);
	      return;
	    }

	    if (curContext === types$2.template) {
	      this.readTmplToken();
	    } else {
	      this.getTokenFromCode(this.codePointAtPos(this.state.pos));
	    }
	  }

	  skipBlockComment() {
	    let startLoc;
	    if (!this.isLookahead) startLoc = this.state.curPosition();
	    const start = this.state.pos;
	    const end = this.input.indexOf("*/", start + 2);
	    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);
	    this.state.pos = end + 2;
	    lineBreakG$1.lastIndex = start + 2;

	    while (lineBreakG$1.test(this.input) && lineBreakG$1.lastIndex <= end) {
	      ++this.state.curLine;
	      this.state.lineStart = lineBreakG$1.lastIndex;
	    }

	    if (this.isLookahead) return;
	    const comment = {
	      type: "CommentBlock",
	      value: this.input.slice(start + 2, end),
	      start,
	      end: end + 2,
	      loc: new SourceLocation$1(startLoc, this.state.curPosition())
	    };
	    if (this.options.tokens) this.pushToken(comment);
	    return comment;
	  }

	  skipLineComment(startSkip) {
	    const start = this.state.pos;
	    let startLoc;
	    if (!this.isLookahead) startLoc = this.state.curPosition();
	    let ch = this.input.charCodeAt(this.state.pos += startSkip);

	    if (this.state.pos < this.length) {
	      while (!isNewLine$1(ch) && ++this.state.pos < this.length) {
	        ch = this.input.charCodeAt(this.state.pos);
	      }
	    }

	    if (this.isLookahead) return;
	    const end = this.state.pos;
	    const value = this.input.slice(start + startSkip, end);
	    const comment = {
	      type: "CommentLine",
	      value,
	      start,
	      end,
	      loc: new SourceLocation$1(startLoc, this.state.curPosition())
	    };
	    if (this.options.tokens) this.pushToken(comment);
	    return comment;
	  }

	  skipSpace() {
	    const spaceStart = this.state.pos;
	    const comments = [];

	    loop: while (this.state.pos < this.length) {
	      const ch = this.input.charCodeAt(this.state.pos);

	      switch (ch) {
	        case 32:
	        case 160:
	        case 9:
	          ++this.state.pos;
	          break;

	        case 13:
	          if (this.input.charCodeAt(this.state.pos + 1) === 10) {
	            ++this.state.pos;
	          }

	        case 10:
	        case 8232:
	        case 8233:
	          ++this.state.pos;
	          ++this.state.curLine;
	          this.state.lineStart = this.state.pos;
	          break;

	        case 47:
	          switch (this.input.charCodeAt(this.state.pos + 1)) {
	            case 42:
	              {
	                const comment = this.skipBlockComment();

	                if (comment !== undefined) {
	                  this.addComment(comment);
	                  if (this.options.attachComment) comments.push(comment);
	                }

	                break;
	              }

	            case 47:
	              {
	                const comment = this.skipLineComment(2);

	                if (comment !== undefined) {
	                  this.addComment(comment);
	                  if (this.options.attachComment) comments.push(comment);
	                }

	                break;
	              }

	            default:
	              break loop;
	          }

	          break;

	        default:
	          if (isWhitespace$1(ch)) {
	            ++this.state.pos;
	          } else if (ch === 45 && !this.inModule) {
	            const pos = this.state.pos;

	            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {
	              const comment = this.skipLineComment(3);

	              if (comment !== undefined) {
	                this.addComment(comment);
	                if (this.options.attachComment) comments.push(comment);
	              }
	            } else {
	              break loop;
	            }
	          } else if (ch === 60 && !this.inModule) {
	            const pos = this.state.pos;

	            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {
	              const comment = this.skipLineComment(4);

	              if (comment !== undefined) {
	                this.addComment(comment);
	                if (this.options.attachComment) comments.push(comment);
	              }
	            } else {
	              break loop;
	            }
	          } else {
	            break loop;
	          }

	      }
	    }

	    if (comments.length > 0) {
	      const end = this.state.pos;
	      const CommentWhitespace = {
	        start: spaceStart,
	        end,
	        comments,
	        leadingNode: null,
	        trailingNode: null,
	        containingNode: null
	      };
	      this.state.commentStack.push(CommentWhitespace);
	    }
	  }

	  finishToken(type, val) {
	    this.state.end = this.state.pos;
	    const prevType = this.state.type;
	    this.state.type = type;
	    this.state.value = val;

	    if (!this.isLookahead) {
	      this.state.endLoc = this.state.curPosition();
	      this.updateContext(prevType);
	    }
	  }

	  readToken_numberSign() {
	    if (this.state.pos === 0 && this.readToken_interpreter()) {
	      return;
	    }

	    const nextPos = this.state.pos + 1;
	    const next = this.codePointAtPos(nextPos);

	    if (next >= 48 && next <= 57) {
	      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);
	    }

	    if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
	      this.expectPlugin("recordAndTuple");

	      if (this.getPluginOption("recordAndTuple", "syntaxType") !== "hash") {
	        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);
	      }

	      this.state.pos += 2;

	      if (next === 123) {
	        this.finishToken(15);
	      } else {
	        this.finishToken(9);
	      }
	    } else if (isIdentifierStart$2(next)) {
	      ++this.state.pos;
	      this.finishToken(6, this.readWord1(next));
	    } else if (next === 92) {
	      ++this.state.pos;
	      this.finishToken(6, this.readWord1());
	    } else {
	      this.finishOp(33, 1);
	    }
	  }

	  readToken_dot() {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (next >= 48 && next <= 57) {
	      this.readNumber(true);
	      return;
	    }

	    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
	      this.state.pos += 3;
	      this.finishToken(29);
	    } else {
	      ++this.state.pos;
	      this.finishToken(24);
	    }
	  }

	  readToken_slash() {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === 61) {
	      this.finishOp(37, 2);
	    } else {
	      this.finishOp(55, 1);
	    }
	  }

	  readToken_interpreter() {
	    if (this.state.pos !== 0 || this.length < 2) return false;
	    let ch = this.input.charCodeAt(this.state.pos + 1);
	    if (ch !== 33) return false;
	    const start = this.state.pos;
	    this.state.pos += 1;

	    while (!isNewLine$1(ch) && ++this.state.pos < this.length) {
	      ch = this.input.charCodeAt(this.state.pos);
	    }

	    const value = this.input.slice(start + 2, this.state.pos);
	    this.finishToken(34, value);
	    return true;
	  }

	  readToken_mult_modulo(code) {
	    let type = code === 42 ? 54 : 53;
	    let width = 1;
	    let next = this.input.charCodeAt(this.state.pos + 1);

	    if (code === 42 && next === 42) {
	      width++;
	      next = this.input.charCodeAt(this.state.pos + 2);
	      type = 56;
	    }

	    if (next === 61 && !this.state.inType) {
	      width++;
	      type = code === 37 ? 38 : 36;
	    }

	    this.finishOp(type, width);
	  }

	  readToken_pipe_amp(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === code) {
	      if (this.input.charCodeAt(this.state.pos + 2) === 61) {
	        this.finishOp(36, 3);
	      } else {
	        this.finishOp(code === 124 ? 44 : 45, 2);
	      }

	      return;
	    }

	    if (code === 124) {
	      if (next === 62) {
	        this.finishOp(42, 2);
	        return;
	      }

	      if (this.hasPlugin("recordAndTuple") && next === 125) {
	        if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
	          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);
	        }

	        this.state.pos += 2;
	        this.finishToken(17);
	        return;
	      }

	      if (this.hasPlugin("recordAndTuple") && next === 93) {
	        if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
	          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);
	        }

	        this.state.pos += 2;
	        this.finishToken(12);
	        return;
	      }
	    }

	    if (next === 61) {
	      this.finishOp(36, 2);
	      return;
	    }

	    this.finishOp(code === 124 ? 46 : 48, 1);
	  }

	  readToken_caret() {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === 61) {
	      this.finishOp(36, 2);
	    } else {
	      this.finishOp(47, 1);
	    }
	  }

	  readToken_plus_min(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === code) {
	      this.finishOp(39, 2);
	      return;
	    }

	    if (next === 61) {
	      this.finishOp(36, 2);
	    } else {
	      this.finishOp(52, 1);
	    }
	  }

	  readToken_lt_gt(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);
	    let size = 1;

	    if (next === code) {
	      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;

	      if (this.input.charCodeAt(this.state.pos + size) === 61) {
	        this.finishOp(36, size + 1);
	        return;
	      }

	      this.finishOp(51, size);
	      return;
	    }

	    if (next === 61) {
	      size = 2;
	    }

	    this.finishOp(50, size);
	  }

	  readToken_eq_excl(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === 61) {
	      this.finishOp(49, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
	      return;
	    }

	    if (code === 61 && next === 62) {
	      this.state.pos += 2;
	      this.finishToken(27);
	      return;
	    }

	    this.finishOp(code === 61 ? 35 : 40, 1);
	  }

	  readToken_question() {
	    const next = this.input.charCodeAt(this.state.pos + 1);
	    const next2 = this.input.charCodeAt(this.state.pos + 2);

	    if (next === 63) {
	      if (next2 === 61) {
	        this.finishOp(36, 3);
	      } else {
	        this.finishOp(43, 2);
	      }
	    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
	      this.state.pos += 2;
	      this.finishToken(26);
	    } else {
	      ++this.state.pos;
	      this.finishToken(25);
	    }
	  }

	  getTokenFromCode(code) {
	    switch (code) {
	      case 46:
	        this.readToken_dot();
	        return;

	      case 40:
	        ++this.state.pos;
	        this.finishToken(18);
	        return;

	      case 41:
	        ++this.state.pos;
	        this.finishToken(19);
	        return;

	      case 59:
	        ++this.state.pos;
	        this.finishToken(21);
	        return;

	      case 44:
	        ++this.state.pos;
	        this.finishToken(20);
	        return;

	      case 91:
	        if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
	          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
	            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);
	          }

	          this.state.pos += 2;
	          this.finishToken(10);
	        } else {
	          ++this.state.pos;
	          this.finishToken(8);
	        }

	        return;

	      case 93:
	        ++this.state.pos;
	        this.finishToken(11);
	        return;

	      case 123:
	        if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
	          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
	            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);
	          }

	          this.state.pos += 2;
	          this.finishToken(14);
	        } else {
	          ++this.state.pos;
	          this.finishToken(13);
	        }

	        return;

	      case 125:
	        ++this.state.pos;
	        this.finishToken(16);
	        return;

	      case 58:
	        if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
	          this.finishOp(23, 2);
	        } else {
	          ++this.state.pos;
	          this.finishToken(22);
	        }

	        return;

	      case 63:
	        this.readToken_question();
	        return;

	      case 96:
	        ++this.state.pos;
	        this.finishToken(30);
	        return;

	      case 48:
	        {
	          const next = this.input.charCodeAt(this.state.pos + 1);

	          if (next === 120 || next === 88) {
	            this.readRadixNumber(16);
	            return;
	          }

	          if (next === 111 || next === 79) {
	            this.readRadixNumber(8);
	            return;
	          }

	          if (next === 98 || next === 66) {
	            this.readRadixNumber(2);
	            return;
	          }
	        }

	      case 49:
	      case 50:
	      case 51:
	      case 52:
	      case 53:
	      case 54:
	      case 55:
	      case 56:
	      case 57:
	        this.readNumber(false);
	        return;

	      case 34:
	      case 39:
	        this.readString(code);
	        return;

	      case 47:
	        this.readToken_slash();
	        return;

	      case 37:
	      case 42:
	        this.readToken_mult_modulo(code);
	        return;

	      case 124:
	      case 38:
	        this.readToken_pipe_amp(code);
	        return;

	      case 94:
	        this.readToken_caret();
	        return;

	      case 43:
	      case 45:
	        this.readToken_plus_min(code);
	        return;

	      case 60:
	      case 62:
	        this.readToken_lt_gt(code);
	        return;

	      case 61:
	      case 33:
	        this.readToken_eq_excl(code);
	        return;

	      case 126:
	        this.finishOp(41, 1);
	        return;

	      case 64:
	        ++this.state.pos;
	        this.finishToken(32);
	        return;

	      case 35:
	        this.readToken_numberSign();
	        return;

	      case 92:
	        this.readWord();
	        return;

	      default:
	        if (isIdentifierStart$2(code)) {
	          this.readWord(code);
	          return;
	        }

	    }

	    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));
	  }

	  finishOp(type, size) {
	    const str = this.input.slice(this.state.pos, this.state.pos + size);
	    this.state.pos += size;
	    this.finishToken(type, str);
	  }

	  readRegexp() {
	    const start = this.state.start + 1;
	    let escaped, inClass;
	    let {
	      pos
	    } = this.state;

	    for (;; ++pos) {
	      if (pos >= this.length) {
	        throw this.raise(start, ErrorMessages.UnterminatedRegExp);
	      }

	      const ch = this.input.charCodeAt(pos);

	      if (isNewLine$1(ch)) {
	        throw this.raise(start, ErrorMessages.UnterminatedRegExp);
	      }

	      if (escaped) {
	        escaped = false;
	      } else {
	        if (ch === 91) {
	          inClass = true;
	        } else if (ch === 93 && inClass) {
	          inClass = false;
	        } else if (ch === 47 && !inClass) {
	          break;
	        }

	        escaped = ch === 92;
	      }
	    }

	    const content = this.input.slice(start, pos);
	    ++pos;
	    let mods = "";

	    while (pos < this.length) {
	      const cp = this.codePointAtPos(pos);
	      const char = String.fromCharCode(cp);

	      if (VALID_REGEX_FLAGS.has(cp)) {
	        if (mods.includes(char)) {
	          this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);
	        }
	      } else if (isIdentifierChar$2(cp) || cp === 92) {
	        this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);
	      } else {
	        break;
	      }

	      ++pos;
	      mods += char;
	    }

	    this.state.pos = pos;
	    this.finishToken(3, {
	      pattern: content,
	      flags: mods
	    });
	  }

	  readInt(radix, len, forceLen, allowNumSeparator = true) {
	    const start = this.state.pos;
	    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
	    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;
	    let invalid = false;
	    let total = 0;

	    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	      const code = this.input.charCodeAt(this.state.pos);
	      let val;

	      if (code === 95) {
	        const prev = this.input.charCodeAt(this.state.pos - 1);
	        const next = this.input.charCodeAt(this.state.pos + 1);

	        if (allowedSiblings.indexOf(next) === -1) {
	          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);
	        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {
	          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);
	        }

	        if (!allowNumSeparator) {
	          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);
	        }

	        ++this.state.pos;
	        continue;
	      }

	      if (code >= 97) {
	        val = code - 97 + 10;
	      } else if (code >= 65) {
	        val = code - 65 + 10;
	      } else if (_isDigit(code)) {
	        val = code - 48;
	      } else {
	        val = Infinity;
	      }

	      if (val >= radix) {
	        if (this.options.errorRecovery && val <= 9) {
	          val = 0;
	          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);
	        } else if (forceLen) {
	          val = 0;
	          invalid = true;
	        } else {
	          break;
	        }
	      }

	      ++this.state.pos;
	      total = total * radix + val;
	    }

	    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {
	      return null;
	    }

	    return total;
	  }

	  readRadixNumber(radix) {
	    const start = this.state.pos;
	    let isBigInt = false;
	    this.state.pos += 2;
	    const val = this.readInt(radix);

	    if (val == null) {
	      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);
	    }

	    const next = this.input.charCodeAt(this.state.pos);

	    if (next === 110) {
	      ++this.state.pos;
	      isBigInt = true;
	    } else if (next === 109) {
	      throw this.raise(start, ErrorMessages.InvalidDecimal);
	    }

	    if (isIdentifierStart$2(this.codePointAtPos(this.state.pos))) {
	      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);
	    }

	    if (isBigInt) {
	      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, "");
	      this.finishToken(1, str);
	      return;
	    }

	    this.finishToken(0, val);
	  }

	  readNumber(startsWithDot) {
	    const start = this.state.pos;
	    let isFloat = false;
	    let isBigInt = false;
	    let isDecimal = false;
	    let hasExponent = false;
	    let isOctal = false;

	    if (!startsWithDot && this.readInt(10) === null) {
	      this.raise(start, ErrorMessages.InvalidNumber);
	    }

	    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;

	    if (hasLeadingZero) {
	      const integer = this.input.slice(start, this.state.pos);
	      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);

	      if (!this.state.strict) {
	        const underscorePos = integer.indexOf("_");

	        if (underscorePos > 0) {
	          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);
	        }
	      }

	      isOctal = hasLeadingZero && !/[89]/.test(integer);
	    }

	    let next = this.input.charCodeAt(this.state.pos);

	    if (next === 46 && !isOctal) {
	      ++this.state.pos;
	      this.readInt(10);
	      isFloat = true;
	      next = this.input.charCodeAt(this.state.pos);
	    }

	    if ((next === 69 || next === 101) && !isOctal) {
	      next = this.input.charCodeAt(++this.state.pos);

	      if (next === 43 || next === 45) {
	        ++this.state.pos;
	      }

	      if (this.readInt(10) === null) {
	        this.raise(start, ErrorMessages.InvalidOrMissingExponent);
	      }

	      isFloat = true;
	      hasExponent = true;
	      next = this.input.charCodeAt(this.state.pos);
	    }

	    if (next === 110) {
	      if (isFloat || hasLeadingZero) {
	        this.raise(start, ErrorMessages.InvalidBigIntLiteral);
	      }

	      ++this.state.pos;
	      isBigInt = true;
	    }

	    if (next === 109) {
	      this.expectPlugin("decimal", this.state.pos);

	      if (hasExponent || hasLeadingZero) {
	        this.raise(start, ErrorMessages.InvalidDecimal);
	      }

	      ++this.state.pos;
	      isDecimal = true;
	    }

	    if (isIdentifierStart$2(this.codePointAtPos(this.state.pos))) {
	      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);
	    }

	    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");

	    if (isBigInt) {
	      this.finishToken(1, str);
	      return;
	    }

	    if (isDecimal) {
	      this.finishToken(2, str);
	      return;
	    }

	    const val = isOctal ? parseInt(str, 8) : parseFloat(str);
	    this.finishToken(0, val);
	  }

	  readCodePoint(throwOnInvalid) {
	    const ch = this.input.charCodeAt(this.state.pos);
	    let code;

	    if (ch === 123) {
	      const codePos = ++this.state.pos;
	      code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos, true, throwOnInvalid);
	      ++this.state.pos;

	      if (code !== null && code > 0x10ffff) {
	        if (throwOnInvalid) {
	          this.raise(codePos, ErrorMessages.InvalidCodePoint);
	        } else {
	          return null;
	        }
	      }
	    } else {
	      code = this.readHexChar(4, false, throwOnInvalid);
	    }

	    return code;
	  }

	  readString(quote) {
	    let out = "",
	        chunkStart = ++this.state.pos;

	    for (;;) {
	      if (this.state.pos >= this.length) {
	        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);
	      }

	      const ch = this.input.charCodeAt(this.state.pos);
	      if (ch === quote) break;

	      if (ch === 92) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(false);
	        chunkStart = this.state.pos;
	      } else if (ch === 8232 || ch === 8233) {
	        ++this.state.pos;
	        ++this.state.curLine;
	        this.state.lineStart = this.state.pos;
	      } else if (isNewLine$1(ch)) {
	        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);
	      } else {
	        ++this.state.pos;
	      }
	    }

	    out += this.input.slice(chunkStart, this.state.pos++);
	    this.finishToken(4, out);
	  }

	  readTmplToken() {
	    let out = "",
	        chunkStart = this.state.pos,
	        containsInvalid = false;

	    for (;;) {
	      if (this.state.pos >= this.length) {
	        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);
	      }

	      const ch = this.input.charCodeAt(this.state.pos);

	      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
	        if (this.state.pos === this.state.start && this.match(28)) {
	          if (ch === 36) {
	            this.state.pos += 2;
	            this.finishToken(31);
	            return;
	          } else {
	            ++this.state.pos;
	            this.finishToken(30);
	            return;
	          }
	        }

	        out += this.input.slice(chunkStart, this.state.pos);
	        this.finishToken(28, containsInvalid ? null : out);
	        return;
	      }

	      if (ch === 92) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        const escaped = this.readEscapedChar(true);

	        if (escaped === null) {
	          containsInvalid = true;
	        } else {
	          out += escaped;
	        }

	        chunkStart = this.state.pos;
	      } else if (isNewLine$1(ch)) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        ++this.state.pos;

	        switch (ch) {
	          case 13:
	            if (this.input.charCodeAt(this.state.pos) === 10) {
	              ++this.state.pos;
	            }

	          case 10:
	            out += "\n";
	            break;

	          default:
	            out += String.fromCharCode(ch);
	            break;
	        }

	        ++this.state.curLine;
	        this.state.lineStart = this.state.pos;
	        chunkStart = this.state.pos;
	      } else {
	        ++this.state.pos;
	      }
	    }
	  }

	  recordStrictModeErrors(pos, message) {
	    if (this.state.strict && !this.state.strictErrors.has(pos)) {
	      this.raise(pos, message);
	    } else {
	      this.state.strictErrors.set(pos, message);
	    }
	  }

	  readEscapedChar(inTemplate) {
	    const throwOnInvalid = !inTemplate;
	    const ch = this.input.charCodeAt(++this.state.pos);
	    ++this.state.pos;

	    switch (ch) {
	      case 110:
	        return "\n";

	      case 114:
	        return "\r";

	      case 120:
	        {
	          const code = this.readHexChar(2, false, throwOnInvalid);
	          return code === null ? null : String.fromCharCode(code);
	        }

	      case 117:
	        {
	          const code = this.readCodePoint(throwOnInvalid);
	          return code === null ? null : String.fromCodePoint(code);
	        }

	      case 116:
	        return "\t";

	      case 98:
	        return "\b";

	      case 118:
	        return "\u000b";

	      case 102:
	        return "\f";

	      case 13:
	        if (this.input.charCodeAt(this.state.pos) === 10) {
	          ++this.state.pos;
	        }

	      case 10:
	        this.state.lineStart = this.state.pos;
	        ++this.state.curLine;

	      case 8232:
	      case 8233:
	        return "";

	      case 56:
	      case 57:
	        if (inTemplate) {
	          return null;
	        } else {
	          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);
	        }

	      default:
	        if (ch >= 48 && ch <= 55) {
	          const codePos = this.state.pos - 1;
	          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);
	          let octalStr = match[0];
	          let octal = parseInt(octalStr, 8);

	          if (octal > 255) {
	            octalStr = octalStr.slice(0, -1);
	            octal = parseInt(octalStr, 8);
	          }

	          this.state.pos += octalStr.length - 1;
	          const next = this.input.charCodeAt(this.state.pos);

	          if (octalStr !== "0" || next === 56 || next === 57) {
	            if (inTemplate) {
	              return null;
	            } else {
	              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);
	            }
	          }

	          return String.fromCharCode(octal);
	        }

	        return String.fromCharCode(ch);
	    }
	  }

	  readHexChar(len, forceLen, throwOnInvalid) {
	    const codePos = this.state.pos;
	    const n = this.readInt(16, len, forceLen, false);

	    if (n === null) {
	      if (throwOnInvalid) {
	        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);
	      } else {
	        this.state.pos = codePos - 1;
	      }
	    }

	    return n;
	  }

	  readWord1(firstCode) {
	    this.state.containsEsc = false;
	    let word = "";
	    const start = this.state.pos;
	    let chunkStart = this.state.pos;

	    if (firstCode !== undefined) {
	      this.state.pos += firstCode <= 0xffff ? 1 : 2;
	    }

	    while (this.state.pos < this.length) {
	      const ch = this.codePointAtPos(this.state.pos);

	      if (isIdentifierChar$2(ch)) {
	        this.state.pos += ch <= 0xffff ? 1 : 2;
	      } else if (ch === 92) {
	        this.state.containsEsc = true;
	        word += this.input.slice(chunkStart, this.state.pos);
	        const escStart = this.state.pos;
	        const identifierCheck = this.state.pos === start ? isIdentifierStart$2 : isIdentifierChar$2;

	        if (this.input.charCodeAt(++this.state.pos) !== 117) {
	          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);
	          chunkStart = this.state.pos - 1;
	          continue;
	        }

	        ++this.state.pos;
	        const esc = this.readCodePoint(true);

	        if (esc !== null) {
	          if (!identifierCheck(esc)) {
	            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);
	          }

	          word += String.fromCodePoint(esc);
	        }

	        chunkStart = this.state.pos;
	      } else {
	        break;
	      }
	    }

	    return word + this.input.slice(chunkStart, this.state.pos);
	  }

	  readWord(firstCode) {
	    const word = this.readWord1(firstCode);
	    const type = keywords$1$1.get(word) || 5;
	    this.finishToken(type, word);
	  }

	  checkKeywordEscapes() {
	    const {
	      type
	    } = this.state;

	    if (tokenIsKeyword(type) && this.state.containsEsc) {
	      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, tokenLabelName(type));
	    }
	  }

	  updateContext(prevType) {
	    const {
	      context,
	      type
	    } = this.state;

	    switch (type) {
	      case 16:
	        context.pop();
	        break;

	      case 13:
	      case 15:
	      case 31:
	        context.push(types$2.brace);
	        break;

	      case 30:
	        if (context[context.length - 1] === types$2.template) {
	          context.pop();
	        } else {
	          context.push(types$2.template);
	        }

	        break;
	    }
	  }

	}

	class ClassScope {
	  constructor() {
	    this.privateNames = new Set();
	    this.loneAccessors = new Map();
	    this.undefinedPrivateNames = new Map();
	  }

	}
	class ClassScopeHandler {
	  constructor(raise) {
	    this.stack = [];
	    this.undefinedPrivateNames = new Map();
	    this.raise = raise;
	  }

	  current() {
	    return this.stack[this.stack.length - 1];
	  }

	  enter() {
	    this.stack.push(new ClassScope());
	  }

	  exit() {
	    const oldClassScope = this.stack.pop();
	    const current = this.current();

	    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {
	      if (current) {
	        if (!current.undefinedPrivateNames.has(name)) {
	          current.undefinedPrivateNames.set(name, pos);
	        }
	      } else {
	        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);
	      }
	    }
	  }

	  declarePrivateName(name, elementType, pos) {
	    const classScope = this.current();
	    let redefined = classScope.privateNames.has(name);

	    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {
	      const accessor = redefined && classScope.loneAccessors.get(name);

	      if (accessor) {
	        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;
	        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;
	        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;
	        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;
	        redefined = oldKind === newKind || oldStatic !== newStatic;
	        if (!redefined) classScope.loneAccessors.delete(name);
	      } else if (!redefined) {
	        classScope.loneAccessors.set(name, elementType);
	      }
	    }

	    if (redefined) {
	      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);
	    }

	    classScope.privateNames.add(name);
	    classScope.undefinedPrivateNames.delete(name);
	  }

	  usePrivateName(name, pos) {
	    let classScope;

	    for (classScope of this.stack) {
	      if (classScope.privateNames.has(name)) return;
	    }

	    if (classScope) {
	      classScope.undefinedPrivateNames.set(name, pos);
	    } else {
	      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);
	    }
	  }

	}

	const kExpression = 0,
	      kMaybeArrowParameterDeclaration = 1,
	      kMaybeAsyncArrowParameterDeclaration = 2,
	      kParameterDeclaration = 3;

	class ExpressionScope {
	  constructor(type = kExpression) {
	    this.type = void 0;
	    this.type = type;
	  }

	  canBeArrowParameterDeclaration() {
	    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;
	  }

	  isCertainlyParameterDeclaration() {
	    return this.type === kParameterDeclaration;
	  }

	}

	class ArrowHeadParsingScope extends ExpressionScope {
	  constructor(type) {
	    super(type);
	    this.errors = new Map();
	  }

	  recordDeclarationError(pos, template) {
	    this.errors.set(pos, template);
	  }

	  clearDeclarationError(pos) {
	    this.errors.delete(pos);
	  }

	  iterateErrors(iterator) {
	    this.errors.forEach(iterator);
	  }

	}

	class ExpressionScopeHandler {
	  constructor(raise) {
	    this.stack = [new ExpressionScope()];
	    this.raise = raise;
	  }

	  enter(scope) {
	    this.stack.push(scope);
	  }

	  exit() {
	    this.stack.pop();
	  }

	  recordParameterInitializerError(pos, template) {
	    const {
	      stack
	    } = this;
	    let i = stack.length - 1;
	    let scope = stack[i];

	    while (!scope.isCertainlyParameterDeclaration()) {
	      if (scope.canBeArrowParameterDeclaration()) {
	        scope.recordDeclarationError(pos, template);
	      } else {
	        return;
	      }

	      scope = stack[--i];
	    }

	    this.raise(pos, template);
	  }

	  recordParenthesizedIdentifierError(pos, template) {
	    const {
	      stack
	    } = this;
	    const scope = stack[stack.length - 1];

	    if (scope.isCertainlyParameterDeclaration()) {
	      this.raise(pos, template);
	    } else if (scope.canBeArrowParameterDeclaration()) {
	      scope.recordDeclarationError(pos, template);
	    } else {
	      return;
	    }
	  }

	  recordAsyncArrowParametersError(pos, template) {
	    const {
	      stack
	    } = this;
	    let i = stack.length - 1;
	    let scope = stack[i];

	    while (scope.canBeArrowParameterDeclaration()) {
	      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {
	        scope.recordDeclarationError(pos, template);
	      }

	      scope = stack[--i];
	    }
	  }

	  validateAsPattern() {
	    const {
	      stack
	    } = this;
	    const currentScope = stack[stack.length - 1];
	    if (!currentScope.canBeArrowParameterDeclaration()) return;
	    currentScope.iterateErrors((template, pos) => {
	      this.raise(pos, template);
	      let i = stack.length - 2;
	      let scope = stack[i];

	      while (scope.canBeArrowParameterDeclaration()) {
	        scope.clearDeclarationError(pos);
	        scope = stack[--i];
	      }
	    });
	  }

	}
	function newParameterDeclarationScope() {
	  return new ExpressionScope(kParameterDeclaration);
	}
	function newArrowHeadScope() {
	  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);
	}
	function newAsyncArrowScope() {
	  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);
	}
	function newExpressionScope() {
	  return new ExpressionScope();
	}

	const PARAM = 0b0000,
	      PARAM_YIELD = 0b0001,
	      PARAM_AWAIT = 0b0010,
	      PARAM_RETURN = 0b0100,
	      PARAM_IN = 0b1000;
	class ProductionParameterHandler {
	  constructor() {
	    this.stacks = [];
	  }

	  enter(flags) {
	    this.stacks.push(flags);
	  }

	  exit() {
	    this.stacks.pop();
	  }

	  currentFlags() {
	    return this.stacks[this.stacks.length - 1];
	  }

	  get hasAwait() {
	    return (this.currentFlags() & PARAM_AWAIT) > 0;
	  }

	  get hasYield() {
	    return (this.currentFlags() & PARAM_YIELD) > 0;
	  }

	  get hasReturn() {
	    return (this.currentFlags() & PARAM_RETURN) > 0;
	  }

	  get hasIn() {
	    return (this.currentFlags() & PARAM_IN) > 0;
	  }

	}
	function functionFlags(isAsync, isGenerator) {
	  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);
	}

	class UtilParser extends Tokenizer$3 {
	  addExtra(node, key, val) {
	    if (!node) return;
	    const extra = node.extra = node.extra || {};
	    extra[key] = val;
	  }

	  isRelational(op) {
	    return this.match(50) && this.state.value === op;
	  }

	  expectRelational(op) {
	    if (this.isRelational(op)) {
	      this.next();
	    } else {
	      this.unexpected(null, 50);
	    }
	  }

	  isContextual(name) {
	    return this.match(5) && this.state.value === name && !this.state.containsEsc;
	  }

	  isUnparsedContextual(nameStart, name) {
	    const nameEnd = nameStart + name.length;

	    if (this.input.slice(nameStart, nameEnd) === name) {
	      const nextCh = this.input.charCodeAt(nameEnd);
	      return !(isIdentifierChar$2(nextCh) || (nextCh & 0xfc00) === 0xd800);
	    }

	    return false;
	  }

	  isLookaheadContextual(name) {
	    const next = this.nextTokenStart();
	    return this.isUnparsedContextual(next, name);
	  }

	  eatContextual(name) {
	    return this.isContextual(name) && this.eat(5);
	  }

	  expectContextual(name, template) {
	    if (!this.eatContextual(name)) this.unexpected(null, template);
	  }

	  canInsertSemicolon() {
	    return this.match(7) || this.match(16) || this.hasPrecedingLineBreak();
	  }

	  hasPrecedingLineBreak() {
	    return lineBreak$1.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	  }

	  hasFollowingLineBreak() {
	    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;
	    return skipWhiteSpaceToLineBreak.test(this.input);
	  }

	  isLineTerminator() {
	    return this.eat(21) || this.canInsertSemicolon();
	  }

	  semicolon(allowAsi = true) {
	    if (allowAsi ? this.isLineTerminator() : this.eat(21)) return;
	    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);
	  }

	  expect(type, pos) {
	    this.eat(type) || this.unexpected(pos, type);
	  }

	  assertNoSpace(message = "Unexpected space.") {
	    if (this.state.start > this.state.lastTokEnd) {
	      this.raise(this.state.lastTokEnd, {
	        code: ErrorCodes.SyntaxError,
	        reasonCode: "UnexpectedSpace",
	        template: message
	      });
	    }
	  }

	  unexpected(pos, messageOrType = {
	    code: ErrorCodes.SyntaxError,
	    reasonCode: "UnexpectedToken",
	    template: "Unexpected token"
	  }) {
	    if (isTokenType(messageOrType)) {
	      messageOrType = {
	        code: ErrorCodes.SyntaxError,
	        reasonCode: "UnexpectedToken",
	        template: `Unexpected token, expected "${tokenLabelName(messageOrType)}"`
	      };
	    }

	    throw this.raise(pos != null ? pos : this.state.start, messageOrType);
	  }

	  expectPlugin(name, pos) {
	    if (!this.hasPlugin(name)) {
	      throw this.raiseWithData(pos != null ? pos : this.state.start, {
	        missingPlugin: [name]
	      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);
	    }

	    return true;
	  }

	  expectOnePlugin(names, pos) {
	    if (!names.some(n => this.hasPlugin(n))) {
	      throw this.raiseWithData(pos != null ? pos : this.state.start, {
	        missingPlugin: names
	      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(", ")}'`);
	    }
	  }

	  tryParse(fn, oldState = this.state.clone()) {
	    const abortSignal = {
	      node: null
	    };

	    try {
	      const node = fn((node = null) => {
	        abortSignal.node = node;
	        throw abortSignal;
	      });

	      if (this.state.errors.length > oldState.errors.length) {
	        const failState = this.state;
	        this.state = oldState;
	        this.state.tokensLength = failState.tokensLength;
	        return {
	          node,
	          error: failState.errors[oldState.errors.length],
	          thrown: false,
	          aborted: false,
	          failState
	        };
	      }

	      return {
	        node,
	        error: null,
	        thrown: false,
	        aborted: false,
	        failState: null
	      };
	    } catch (error) {
	      const failState = this.state;
	      this.state = oldState;

	      if (error instanceof SyntaxError) {
	        return {
	          node: null,
	          error,
	          thrown: true,
	          aborted: false,
	          failState
	        };
	      }

	      if (error === abortSignal) {
	        return {
	          node: abortSignal.node,
	          error: null,
	          thrown: false,
	          aborted: true,
	          failState
	        };
	      }

	      throw error;
	    }
	  }

	  checkExpressionErrors(refExpressionErrors, andThrow) {
	    if (!refExpressionErrors) return false;
	    const {
	      shorthandAssign,
	      doubleProto,
	      optionalParameters
	    } = refExpressionErrors;

	    if (!andThrow) {
	      return shorthandAssign >= 0 || doubleProto >= 0 || optionalParameters >= 0;
	    }

	    if (shorthandAssign >= 0) {
	      this.unexpected(shorthandAssign);
	    }

	    if (doubleProto >= 0) {
	      this.raise(doubleProto, ErrorMessages.DuplicateProto);
	    }

	    if (optionalParameters >= 0) {
	      this.unexpected(optionalParameters);
	    }
	  }

	  isLiteralPropertyName() {
	    return this.match(5) || tokenIsKeyword(this.state.type) || this.match(4) || this.match(0) || this.match(1) || this.match(2);
	  }

	  isPrivateName(node) {
	    return node.type === "PrivateName";
	  }

	  getPrivateNameSV(node) {
	    return node.id.name;
	  }

	  hasPropertyAsPrivateName(node) {
	    return (node.type === "MemberExpression" || node.type === "OptionalMemberExpression") && this.isPrivateName(node.property);
	  }

	  isOptionalChain(node) {
	    return node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression";
	  }

	  isObjectProperty(node) {
	    return node.type === "ObjectProperty";
	  }

	  isObjectMethod(node) {
	    return node.type === "ObjectMethod";
	  }

	  initializeScopes(inModule = this.options.sourceType === "module") {
	    const oldLabels = this.state.labels;
	    this.state.labels = [];
	    const oldExportedIdentifiers = this.exportedIdentifiers;
	    this.exportedIdentifiers = new Set();
	    const oldInModule = this.inModule;
	    this.inModule = inModule;
	    const oldScope = this.scope;
	    const ScopeHandler = this.getScopeHandler();
	    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);
	    const oldProdParam = this.prodParam;
	    this.prodParam = new ProductionParameterHandler();
	    const oldClassScope = this.classScope;
	    this.classScope = new ClassScopeHandler(this.raise.bind(this));
	    const oldExpressionScope = this.expressionScope;
	    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));
	    return () => {
	      this.state.labels = oldLabels;
	      this.exportedIdentifiers = oldExportedIdentifiers;
	      this.inModule = oldInModule;
	      this.scope = oldScope;
	      this.prodParam = oldProdParam;
	      this.classScope = oldClassScope;
	      this.expressionScope = oldExpressionScope;
	    };
	  }

	  enterInitialScopes() {
	    let paramFlags = PARAM;

	    if (this.inModule) {
	      paramFlags |= PARAM_AWAIT;
	    }

	    this.scope.enter(SCOPE_PROGRAM);
	    this.prodParam.enter(paramFlags);
	  }

	}
	class ExpressionErrors {
	  constructor() {
	    this.shorthandAssign = -1;
	    this.doubleProto = -1;
	    this.optionalParameters = -1;
	  }

	}

	class Node$9 {
	  constructor(parser, pos, loc) {
	    this.type = "";
	    this.start = pos;
	    this.end = 0;
	    this.loc = new SourceLocation$1(loc);
	    if (parser != null && parser.options.ranges) this.range = [pos, 0];
	    if (parser != null && parser.filename) this.loc.filename = parser.filename;
	  }

	}

	const NodePrototype = Node$9.prototype;
	{
	  NodePrototype.__clone = function () {
	    const newNode = new Node$9();
	    const keys = Object.keys(this);

	    for (let i = 0, length = keys.length; i < length; i++) {
	      const key = keys[i];

	      if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") {
	        newNode[key] = this[key];
	      }
	    }

	    return newNode;
	  };
	}

	function clonePlaceholder(node) {
	  return cloneIdentifier(node);
	}

	function cloneIdentifier(node) {
	  const {
	    type,
	    start,
	    end,
	    loc,
	    range,
	    extra,
	    name
	  } = node;
	  const cloned = Object.create(NodePrototype);
	  cloned.type = type;
	  cloned.start = start;
	  cloned.end = end;
	  cloned.loc = loc;
	  cloned.range = range;
	  cloned.extra = extra;
	  cloned.name = name;

	  if (type === "Placeholder") {
	    cloned.expectedNode = node.expectedNode;
	  }

	  return cloned;
	}
	function cloneStringLiteral(node) {
	  const {
	    type,
	    start,
	    end,
	    loc,
	    range,
	    extra
	  } = node;

	  if (type === "Placeholder") {
	    return clonePlaceholder(node);
	  }

	  const cloned = Object.create(NodePrototype);
	  cloned.type = "StringLiteral";
	  cloned.start = start;
	  cloned.end = end;
	  cloned.loc = loc;
	  cloned.range = range;
	  cloned.extra = extra;
	  cloned.value = node.value;
	  return cloned;
	}
	class NodeUtils extends UtilParser {
	  startNode() {
	    return new Node$9(this, this.state.start, this.state.startLoc);
	  }

	  startNodeAt(pos, loc) {
	    return new Node$9(this, pos, loc);
	  }

	  startNodeAtNode(type) {
	    return this.startNodeAt(type.start, type.loc.start);
	  }

	  finishNode(node, type) {
	    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
	  }

	  finishNodeAt(node, type, pos, loc) {

	    node.type = type;
	    node.end = pos;
	    node.loc.end = loc;
	    if (this.options.ranges) node.range[1] = pos;
	    if (this.options.attachComment) this.processComment(node);
	    return node;
	  }

	  resetStartLocation(node, start, startLoc) {
	    node.start = start;
	    node.loc.start = startLoc;
	    if (this.options.ranges) node.range[0] = start;
	  }

	  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {
	    node.end = end;
	    node.loc.end = endLoc;
	    if (this.options.ranges) node.range[1] = end;
	  }

	  resetStartLocationFromNode(node, locationNode) {
	    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);
	  }

	}

	const reservedTypes = new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]);
	const FlowErrors = makeErrorTemplates({
	  AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
	  AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
	  AssignReservedType: "Cannot overwrite reserved type %0.",
	  DeclareClassElement: "The `declare` modifier can only appear on class fields.",
	  DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
	  DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
	  EnumBooleanMemberNotInitialized: "Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.",
	  EnumDuplicateMemberName: "Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.",
	  EnumInconsistentMemberValues: "Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.",
	  EnumInvalidExplicitType: "Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.",
	  EnumInvalidExplicitTypeUnknownSupplied: "Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.",
	  EnumInvalidMemberInitializerPrimaryType: "Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.",
	  EnumInvalidMemberInitializerSymbolType: "Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.",
	  EnumInvalidMemberInitializerUnknownType: "The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.",
	  EnumInvalidMemberName: "Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.",
	  EnumNumberMemberNotInitialized: "Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.",
	  EnumStringMemberInconsistentlyInitailized: "String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.",
	  GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
	  ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
	  InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
	  InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
	  InexactVariance: "Explicit inexact syntax cannot have variance.",
	  InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
	  MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
	  NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
	  NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
	  PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
	  SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
	  SpreadVariance: "Spread properties cannot have variance.",
	  ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
	  ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
	  ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
	  ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
	  ThisParamNoDefault: "The `this` parameter may not have a default value.",
	  TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
	  TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
	  UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
	  UnexpectedReservedType: "Unexpected reserved type %0.",
	  UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
	  UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
	  UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
	  UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
	  UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
	  UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
	  UnsupportedDeclareExportKind: "`declare export %0` is not supported. Use `%1` instead.",
	  UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
	  UnterminatedFlowComment: "Unterminated flow-comment."
	}, ErrorCodes.SyntaxError, "flow");

	function isEsModuleType(bodyElement) {
	  return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
	}

	function hasTypeImportKind(node) {
	  return node.importKind === "type" || node.importKind === "typeof";
	}

	function isMaybeDefaultImport(state) {
	  return (state.type === 5 || tokenIsKeyword(state.type)) && state.value !== "from";
	}

	const exportSuggestions = {
	  const: "declare export var",
	  let: "declare export var",
	  type: "export type",
	  interface: "export interface"
	};

	function partition(list, test) {
	  const list1 = [];
	  const list2 = [];

	  for (let i = 0; i < list.length; i++) {
	    (test(list[i], i, list) ? list1 : list2).push(list[i]);
	  }

	  return [list1, list2];
	}

	const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
	var flow$1 = (superClass => class extends superClass {
	  constructor(...args) {
	    super(...args);
	    this.flowPragma = undefined;
	  }

	  getScopeHandler() {
	    return FlowScopeHandler;
	  }

	  shouldParseTypes() {
	    return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
	  }

	  shouldParseEnums() {
	    return !!this.getPluginOption("flow", "enums");
	  }

	  finishToken(type, val) {
	    if (type !== 4 && type !== 21 && type !== 34) {
	      if (this.flowPragma === undefined) {
	        this.flowPragma = null;
	      }
	    }

	    return super.finishToken(type, val);
	  }

	  addComment(comment) {
	    if (this.flowPragma === undefined) {
	      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);

	      if (!matches) ; else if (matches[1] === "flow") {
	        this.flowPragma = "flow";
	      } else if (matches[1] === "noflow") {
	        this.flowPragma = "noflow";
	      } else {
	        throw new Error("Unexpected flow pragma");
	      }
	    }

	    return super.addComment(comment);
	  }

	  flowParseTypeInitialiser(tok) {
	    const oldInType = this.state.inType;
	    this.state.inType = true;
	    this.expect(tok || 22);
	    const type = this.flowParseType();
	    this.state.inType = oldInType;
	    return type;
	  }

	  flowParsePredicate() {
	    const node = this.startNode();
	    const moduloPos = this.state.start;
	    this.next();
	    this.expectContextual("checks");

	    if (this.state.lastTokStart > moduloPos + 1) {
	      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);
	    }

	    if (this.eat(18)) {
	      node.value = this.parseExpression();
	      this.expect(19);
	      return this.finishNode(node, "DeclaredPredicate");
	    } else {
	      return this.finishNode(node, "InferredPredicate");
	    }
	  }

	  flowParseTypeAndPredicateInitialiser() {
	    const oldInType = this.state.inType;
	    this.state.inType = true;
	    this.expect(22);
	    let type = null;
	    let predicate = null;

	    if (this.match(53)) {
	      this.state.inType = oldInType;
	      predicate = this.flowParsePredicate();
	    } else {
	      type = this.flowParseType();
	      this.state.inType = oldInType;

	      if (this.match(53)) {
	        predicate = this.flowParsePredicate();
	      }
	    }

	    return [type, predicate];
	  }

	  flowParseDeclareClass(node) {
	    this.next();
	    this.flowParseInterfaceish(node, true);
	    return this.finishNode(node, "DeclareClass");
	  }

	  flowParseDeclareFunction(node) {
	    this.next();
	    const id = node.id = this.parseIdentifier();
	    const typeNode = this.startNode();
	    const typeContainer = this.startNode();

	    if (this.isRelational("<")) {
	      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
	    } else {
	      typeNode.typeParameters = null;
	    }

	    this.expect(18);
	    const tmp = this.flowParseFunctionTypeParams();
	    typeNode.params = tmp.params;
	    typeNode.rest = tmp.rest;
	    typeNode.this = tmp._this;
	    this.expect(19);
	    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
	    typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
	    id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
	    this.resetEndLocation(id);
	    this.semicolon();
	    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);
	    return this.finishNode(node, "DeclareFunction");
	  }

	  flowParseDeclare(node, insideModule) {
	    if (this.match(79)) {
	      return this.flowParseDeclareClass(node);
	    } else if (this.match(67)) {
	      return this.flowParseDeclareFunction(node);
	    } else if (this.match(73)) {
	      return this.flowParseDeclareVariable(node);
	    } else if (this.eatContextual("module")) {
	      if (this.match(24)) {
	        return this.flowParseDeclareModuleExports(node);
	      } else {
	        if (insideModule) {
	          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);
	        }

	        return this.flowParseDeclareModule(node);
	      }
	    } else if (this.isContextual("type")) {
	      return this.flowParseDeclareTypeAlias(node);
	    } else if (this.isContextual("opaque")) {
	      return this.flowParseDeclareOpaqueType(node);
	    } else if (this.isContextual("interface")) {
	      return this.flowParseDeclareInterface(node);
	    } else if (this.match(81)) {
	      return this.flowParseDeclareExportDeclaration(node, insideModule);
	    } else {
	      throw this.unexpected();
	    }
	  }

	  flowParseDeclareVariable(node) {
	    this.next();
	    node.id = this.flowParseTypeAnnotatableIdentifier(true);
	    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);
	    this.semicolon();
	    return this.finishNode(node, "DeclareVariable");
	  }

	  flowParseDeclareModule(node) {
	    this.scope.enter(SCOPE_OTHER);

	    if (this.match(4)) {
	      node.id = this.parseExprAtom();
	    } else {
	      node.id = this.parseIdentifier();
	    }

	    const bodyNode = node.body = this.startNode();
	    const body = bodyNode.body = [];
	    this.expect(13);

	    while (!this.match(16)) {
	      let bodyNode = this.startNode();

	      if (this.match(82)) {
	        this.next();

	        if (!this.isContextual("type") && !this.match(86)) {
	          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);
	        }

	        this.parseImport(bodyNode);
	      } else {
	        this.expectContextual("declare", FlowErrors.UnsupportedStatementInDeclareModule);
	        bodyNode = this.flowParseDeclare(bodyNode, true);
	      }

	      body.push(bodyNode);
	    }

	    this.scope.exit();
	    this.expect(16);
	    this.finishNode(bodyNode, "BlockStatement");
	    let kind = null;
	    let hasModuleExport = false;
	    body.forEach(bodyElement => {
	      if (isEsModuleType(bodyElement)) {
	        if (kind === "CommonJS") {
	          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);
	        }

	        kind = "ES";
	      } else if (bodyElement.type === "DeclareModuleExports") {
	        if (hasModuleExport) {
	          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);
	        }

	        if (kind === "ES") {
	          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);
	        }

	        kind = "CommonJS";
	        hasModuleExport = true;
	      }
	    });
	    node.kind = kind || "CommonJS";
	    return this.finishNode(node, "DeclareModule");
	  }

	  flowParseDeclareExportDeclaration(node, insideModule) {
	    this.expect(81);

	    if (this.eat(64)) {
	      if (this.match(67) || this.match(79)) {
	        node.declaration = this.flowParseDeclare(this.startNode());
	      } else {
	        node.declaration = this.flowParseType();
	        this.semicolon();
	      }

	      node.default = true;
	      return this.finishNode(node, "DeclareExportDeclaration");
	    } else {
	      if (this.match(74) || this.isLet() || (this.isContextual("type") || this.isContextual("interface")) && !insideModule) {
	        const label = this.state.value;
	        const suggestion = exportSuggestions[label];
	        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);
	      }

	      if (this.match(73) || this.match(67) || this.match(79) || this.isContextual("opaque")) {
	        node.declaration = this.flowParseDeclare(this.startNode());
	        node.default = false;
	        return this.finishNode(node, "DeclareExportDeclaration");
	      } else if (this.match(54) || this.match(13) || this.isContextual("interface") || this.isContextual("type") || this.isContextual("opaque")) {
	        node = this.parseExport(node);

	        if (node.type === "ExportNamedDeclaration") {
	          node.type = "ExportDeclaration";
	          node.default = false;
	          delete node.exportKind;
	        }

	        node.type = "Declare" + node.type;
	        return node;
	      }
	    }

	    throw this.unexpected();
	  }

	  flowParseDeclareModuleExports(node) {
	    this.next();
	    this.expectContextual("exports");
	    node.typeAnnotation = this.flowParseTypeAnnotation();
	    this.semicolon();
	    return this.finishNode(node, "DeclareModuleExports");
	  }

	  flowParseDeclareTypeAlias(node) {
	    this.next();
	    this.flowParseTypeAlias(node);
	    node.type = "DeclareTypeAlias";
	    return node;
	  }

	  flowParseDeclareOpaqueType(node) {
	    this.next();
	    this.flowParseOpaqueType(node, true);
	    node.type = "DeclareOpaqueType";
	    return node;
	  }

	  flowParseDeclareInterface(node) {
	    this.next();
	    this.flowParseInterfaceish(node);
	    return this.finishNode(node, "DeclareInterface");
	  }

	  flowParseInterfaceish(node, isClass = false) {
	    node.id = this.flowParseRestrictedIdentifier(!isClass, true);
	    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);

	    if (this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    } else {
	      node.typeParameters = null;
	    }

	    node.extends = [];
	    node.implements = [];
	    node.mixins = [];

	    if (this.eat(80)) {
	      do {
	        node.extends.push(this.flowParseInterfaceExtends());
	      } while (!isClass && this.eat(20));
	    }

	    if (this.isContextual("mixins")) {
	      this.next();

	      do {
	        node.mixins.push(this.flowParseInterfaceExtends());
	      } while (this.eat(20));
	    }

	    if (this.isContextual("implements")) {
	      this.next();

	      do {
	        node.implements.push(this.flowParseInterfaceExtends());
	      } while (this.eat(20));
	    }

	    node.body = this.flowParseObjectType({
	      allowStatic: isClass,
	      allowExact: false,
	      allowSpread: false,
	      allowProto: isClass,
	      allowInexact: false
	    });
	  }

	  flowParseInterfaceExtends() {
	    const node = this.startNode();
	    node.id = this.flowParseQualifiedTypeIdentifier();

	    if (this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterInstantiation();
	    } else {
	      node.typeParameters = null;
	    }

	    return this.finishNode(node, "InterfaceExtends");
	  }

	  flowParseInterface(node) {
	    this.flowParseInterfaceish(node);
	    return this.finishNode(node, "InterfaceDeclaration");
	  }

	  checkNotUnderscore(word) {
	    if (word === "_") {
	      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);
	    }
	  }

	  checkReservedType(word, startLoc, declaration) {
	    if (!reservedTypes.has(word)) return;
	    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);
	  }

	  flowParseRestrictedIdentifier(liberal, declaration) {
	    this.checkReservedType(this.state.value, this.state.start, declaration);
	    return this.parseIdentifier(liberal);
	  }

	  flowParseTypeAlias(node) {
	    node.id = this.flowParseRestrictedIdentifier(false, true);
	    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);

	    if (this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    } else {
	      node.typeParameters = null;
	    }

	    node.right = this.flowParseTypeInitialiser(35);
	    this.semicolon();
	    return this.finishNode(node, "TypeAlias");
	  }

	  flowParseOpaqueType(node, declare) {
	    this.expectContextual("type");
	    node.id = this.flowParseRestrictedIdentifier(true, true);
	    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);

	    if (this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    } else {
	      node.typeParameters = null;
	    }

	    node.supertype = null;

	    if (this.match(22)) {
	      node.supertype = this.flowParseTypeInitialiser(22);
	    }

	    node.impltype = null;

	    if (!declare) {
	      node.impltype = this.flowParseTypeInitialiser(35);
	    }

	    this.semicolon();
	    return this.finishNode(node, "OpaqueType");
	  }

	  flowParseTypeParameter(requireDefault = false) {
	    const nodeStart = this.state.start;
	    const node = this.startNode();
	    const variance = this.flowParseVariance();
	    const ident = this.flowParseTypeAnnotatableIdentifier();
	    node.name = ident.name;
	    node.variance = variance;
	    node.bound = ident.typeAnnotation;

	    if (this.match(35)) {
	      this.eat(35);
	      node.default = this.flowParseType();
	    } else {
	      if (requireDefault) {
	        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);
	      }
	    }

	    return this.finishNode(node, "TypeParameter");
	  }

	  flowParseTypeParameterDeclaration() {
	    const oldInType = this.state.inType;
	    const node = this.startNode();
	    node.params = [];
	    this.state.inType = true;

	    if (this.isRelational("<") || this.match(94)) {
	      this.next();
	    } else {
	      this.unexpected();
	    }

	    let defaultRequired = false;

	    do {
	      const typeParameter = this.flowParseTypeParameter(defaultRequired);
	      node.params.push(typeParameter);

	      if (typeParameter.default) {
	        defaultRequired = true;
	      }

	      if (!this.isRelational(">")) {
	        this.expect(20);
	      }
	    } while (!this.isRelational(">"));

	    this.expectRelational(">");
	    this.state.inType = oldInType;
	    return this.finishNode(node, "TypeParameterDeclaration");
	  }

	  flowParseTypeParameterInstantiation() {
	    const node = this.startNode();
	    const oldInType = this.state.inType;
	    node.params = [];
	    this.state.inType = true;
	    this.expectRelational("<");
	    const oldNoAnonFunctionType = this.state.noAnonFunctionType;
	    this.state.noAnonFunctionType = false;

	    while (!this.isRelational(">")) {
	      node.params.push(this.flowParseType());

	      if (!this.isRelational(">")) {
	        this.expect(20);
	      }
	    }

	    this.state.noAnonFunctionType = oldNoAnonFunctionType;
	    this.expectRelational(">");
	    this.state.inType = oldInType;
	    return this.finishNode(node, "TypeParameterInstantiation");
	  }

	  flowParseTypeParameterInstantiationCallOrNew() {
	    const node = this.startNode();
	    const oldInType = this.state.inType;
	    node.params = [];
	    this.state.inType = true;
	    this.expectRelational("<");

	    while (!this.isRelational(">")) {
	      node.params.push(this.flowParseTypeOrImplicitInstantiation());

	      if (!this.isRelational(">")) {
	        this.expect(20);
	      }
	    }

	    this.expectRelational(">");
	    this.state.inType = oldInType;
	    return this.finishNode(node, "TypeParameterInstantiation");
	  }

	  flowParseInterfaceType() {
	    const node = this.startNode();
	    this.expectContextual("interface");
	    node.extends = [];

	    if (this.eat(80)) {
	      do {
	        node.extends.push(this.flowParseInterfaceExtends());
	      } while (this.eat(20));
	    }

	    node.body = this.flowParseObjectType({
	      allowStatic: false,
	      allowExact: false,
	      allowSpread: false,
	      allowProto: false,
	      allowInexact: false
	    });
	    return this.finishNode(node, "InterfaceTypeAnnotation");
	  }

	  flowParseObjectPropertyKey() {
	    return this.match(0) || this.match(4) ? this.parseExprAtom() : this.parseIdentifier(true);
	  }

	  flowParseObjectTypeIndexer(node, isStatic, variance) {
	    node.static = isStatic;

	    if (this.lookahead().type === 22) {
	      node.id = this.flowParseObjectPropertyKey();
	      node.key = this.flowParseTypeInitialiser();
	    } else {
	      node.id = null;
	      node.key = this.flowParseType();
	    }

	    this.expect(11);
	    node.value = this.flowParseTypeInitialiser();
	    node.variance = variance;
	    return this.finishNode(node, "ObjectTypeIndexer");
	  }

	  flowParseObjectTypeInternalSlot(node, isStatic) {
	    node.static = isStatic;
	    node.id = this.flowParseObjectPropertyKey();
	    this.expect(11);
	    this.expect(11);

	    if (this.isRelational("<") || this.match(18)) {
	      node.method = true;
	      node.optional = false;
	      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));
	    } else {
	      node.method = false;

	      if (this.eat(25)) {
	        node.optional = true;
	      }

	      node.value = this.flowParseTypeInitialiser();
	    }

	    return this.finishNode(node, "ObjectTypeInternalSlot");
	  }

	  flowParseObjectTypeMethodish(node) {
	    node.params = [];
	    node.rest = null;
	    node.typeParameters = null;
	    node.this = null;

	    if (this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    }

	    this.expect(18);

	    if (this.match(77)) {
	      node.this = this.flowParseFunctionTypeParam(true);
	      node.this.name = null;

	      if (!this.match(19)) {
	        this.expect(20);
	      }
	    }

	    while (!this.match(19) && !this.match(29)) {
	      node.params.push(this.flowParseFunctionTypeParam(false));

	      if (!this.match(19)) {
	        this.expect(20);
	      }
	    }

	    if (this.eat(29)) {
	      node.rest = this.flowParseFunctionTypeParam(false);
	    }

	    this.expect(19);
	    node.returnType = this.flowParseTypeInitialiser();
	    return this.finishNode(node, "FunctionTypeAnnotation");
	  }

	  flowParseObjectTypeCallProperty(node, isStatic) {
	    const valueNode = this.startNode();
	    node.static = isStatic;
	    node.value = this.flowParseObjectTypeMethodish(valueNode);
	    return this.finishNode(node, "ObjectTypeCallProperty");
	  }

	  flowParseObjectType({
	    allowStatic,
	    allowExact,
	    allowSpread,
	    allowProto,
	    allowInexact
	  }) {
	    const oldInType = this.state.inType;
	    this.state.inType = true;
	    const nodeStart = this.startNode();
	    nodeStart.callProperties = [];
	    nodeStart.properties = [];
	    nodeStart.indexers = [];
	    nodeStart.internalSlots = [];
	    let endDelim;
	    let exact;
	    let inexact = false;

	    if (allowExact && this.match(14)) {
	      this.expect(14);
	      endDelim = 17;
	      exact = true;
	    } else {
	      this.expect(13);
	      endDelim = 16;
	      exact = false;
	    }

	    nodeStart.exact = exact;

	    while (!this.match(endDelim)) {
	      let isStatic = false;
	      let protoStart = null;
	      let inexactStart = null;
	      const node = this.startNode();

	      if (allowProto && this.isContextual("proto")) {
	        const lookahead = this.lookahead();

	        if (lookahead.type !== 22 && lookahead.type !== 25) {
	          this.next();
	          protoStart = this.state.start;
	          allowStatic = false;
	        }
	      }

	      if (allowStatic && this.isContextual("static")) {
	        const lookahead = this.lookahead();

	        if (lookahead.type !== 22 && lookahead.type !== 25) {
	          this.next();
	          isStatic = true;
	        }
	      }

	      const variance = this.flowParseVariance();

	      if (this.eat(8)) {
	        if (protoStart != null) {
	          this.unexpected(protoStart);
	        }

	        if (this.eat(8)) {
	          if (variance) {
	            this.unexpected(variance.start);
	          }

	          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));
	        } else {
	          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
	        }
	      } else if (this.match(18) || this.isRelational("<")) {
	        if (protoStart != null) {
	          this.unexpected(protoStart);
	        }

	        if (variance) {
	          this.unexpected(variance.start);
	        }

	        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
	      } else {
	        let kind = "init";

	        if (this.isContextual("get") || this.isContextual("set")) {
	          const lookahead = this.lookahead();

	          if (lookahead.type === 5 || lookahead.type === 4 || lookahead.type === 0) {
	            kind = this.state.value;
	            this.next();
	          }
	        }

	        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);

	        if (propOrInexact === null) {
	          inexact = true;
	          inexactStart = this.state.lastTokStart;
	        } else {
	          nodeStart.properties.push(propOrInexact);
	        }
	      }

	      this.flowObjectTypeSemicolon();

	      if (inexactStart && !this.match(16) && !this.match(17)) {
	        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);
	      }
	    }

	    this.expect(endDelim);

	    if (allowSpread) {
	      nodeStart.inexact = inexact;
	    }

	    const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
	    this.state.inType = oldInType;
	    return out;
	  }

	  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {
	    if (this.eat(29)) {
	      const isInexactToken = this.match(20) || this.match(21) || this.match(16) || this.match(17);

	      if (isInexactToken) {
	        if (!allowSpread) {
	          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);
	        } else if (!allowInexact) {
	          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);
	        }

	        if (variance) {
	          this.raise(variance.start, FlowErrors.InexactVariance);
	        }

	        return null;
	      }

	      if (!allowSpread) {
	        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);
	      }

	      if (protoStart != null) {
	        this.unexpected(protoStart);
	      }

	      if (variance) {
	        this.raise(variance.start, FlowErrors.SpreadVariance);
	      }

	      node.argument = this.flowParseType();
	      return this.finishNode(node, "ObjectTypeSpreadProperty");
	    } else {
	      node.key = this.flowParseObjectPropertyKey();
	      node.static = isStatic;
	      node.proto = protoStart != null;
	      node.kind = kind;
	      let optional = false;

	      if (this.isRelational("<") || this.match(18)) {
	        node.method = true;

	        if (protoStart != null) {
	          this.unexpected(protoStart);
	        }

	        if (variance) {
	          this.unexpected(variance.start);
	        }

	        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));

	        if (kind === "get" || kind === "set") {
	          this.flowCheckGetterSetterParams(node);
	        }

	        if (!allowSpread && node.key.name === "constructor" && node.value.this) {
	          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);
	        }
	      } else {
	        if (kind !== "init") this.unexpected();
	        node.method = false;

	        if (this.eat(25)) {
	          optional = true;
	        }

	        node.value = this.flowParseTypeInitialiser();
	        node.variance = variance;
	      }

	      node.optional = optional;
	      return this.finishNode(node, "ObjectTypeProperty");
	    }
	  }

	  flowCheckGetterSetterParams(property) {
	    const paramCount = property.kind === "get" ? 0 : 1;
	    const start = property.start;
	    const length = property.value.params.length + (property.value.rest ? 1 : 0);

	    if (property.value.this) {
	      this.raise(property.value.this.start, property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);
	    }

	    if (length !== paramCount) {
	      if (property.kind === "get") {
	        this.raise(start, ErrorMessages.BadGetterArity);
	      } else {
	        this.raise(start, ErrorMessages.BadSetterArity);
	      }
	    }

	    if (property.kind === "set" && property.value.rest) {
	      this.raise(start, ErrorMessages.BadSetterRestParameter);
	    }
	  }

	  flowObjectTypeSemicolon() {
	    if (!this.eat(21) && !this.eat(20) && !this.match(16) && !this.match(17)) {
	      this.unexpected();
	    }
	  }

	  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {
	    startPos = startPos || this.state.start;
	    startLoc = startLoc || this.state.startLoc;
	    let node = id || this.flowParseRestrictedIdentifier(true);

	    while (this.eat(24)) {
	      const node2 = this.startNodeAt(startPos, startLoc);
	      node2.qualification = node;
	      node2.id = this.flowParseRestrictedIdentifier(true);
	      node = this.finishNode(node2, "QualifiedTypeIdentifier");
	    }

	    return node;
	  }

	  flowParseGenericType(startPos, startLoc, id) {
	    const node = this.startNodeAt(startPos, startLoc);
	    node.typeParameters = null;
	    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);

	    if (this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterInstantiation();
	    }

	    return this.finishNode(node, "GenericTypeAnnotation");
	  }

	  flowParseTypeofType() {
	    const node = this.startNode();
	    this.expect(86);
	    node.argument = this.flowParsePrimaryType();
	    return this.finishNode(node, "TypeofTypeAnnotation");
	  }

	  flowParseTupleType() {
	    const node = this.startNode();
	    node.types = [];
	    this.expect(8);

	    while (this.state.pos < this.length && !this.match(11)) {
	      node.types.push(this.flowParseType());
	      if (this.match(11)) break;
	      this.expect(20);
	    }

	    this.expect(11);
	    return this.finishNode(node, "TupleTypeAnnotation");
	  }

	  flowParseFunctionTypeParam(first) {
	    let name = null;
	    let optional = false;
	    let typeAnnotation = null;
	    const node = this.startNode();
	    const lh = this.lookahead();
	    const isThis = this.state.type === 77;

	    if (lh.type === 22 || lh.type === 25) {
	      if (isThis && !first) {
	        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);
	      }

	      name = this.parseIdentifier(isThis);

	      if (this.eat(25)) {
	        optional = true;

	        if (isThis) {
	          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);
	        }
	      }

	      typeAnnotation = this.flowParseTypeInitialiser();
	    } else {
	      typeAnnotation = this.flowParseType();
	    }

	    node.name = name;
	    node.optional = optional;
	    node.typeAnnotation = typeAnnotation;
	    return this.finishNode(node, "FunctionTypeParam");
	  }

	  reinterpretTypeAsFunctionTypeParam(type) {
	    const node = this.startNodeAt(type.start, type.loc.start);
	    node.name = null;
	    node.optional = false;
	    node.typeAnnotation = type;
	    return this.finishNode(node, "FunctionTypeParam");
	  }

	  flowParseFunctionTypeParams(params = []) {
	    let rest = null;
	    let _this = null;

	    if (this.match(77)) {
	      _this = this.flowParseFunctionTypeParam(true);
	      _this.name = null;

	      if (!this.match(19)) {
	        this.expect(20);
	      }
	    }

	    while (!this.match(19) && !this.match(29)) {
	      params.push(this.flowParseFunctionTypeParam(false));

	      if (!this.match(19)) {
	        this.expect(20);
	      }
	    }

	    if (this.eat(29)) {
	      rest = this.flowParseFunctionTypeParam(false);
	    }

	    return {
	      params,
	      rest,
	      _this
	    };
	  }

	  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {
	    switch (id.name) {
	      case "any":
	        return this.finishNode(node, "AnyTypeAnnotation");

	      case "bool":
	      case "boolean":
	        return this.finishNode(node, "BooleanTypeAnnotation");

	      case "mixed":
	        return this.finishNode(node, "MixedTypeAnnotation");

	      case "empty":
	        return this.finishNode(node, "EmptyTypeAnnotation");

	      case "number":
	        return this.finishNode(node, "NumberTypeAnnotation");

	      case "string":
	        return this.finishNode(node, "StringTypeAnnotation");

	      case "symbol":
	        return this.finishNode(node, "SymbolTypeAnnotation");

	      default:
	        this.checkNotUnderscore(id.name);
	        return this.flowParseGenericType(startPos, startLoc, id);
	    }
	  }

	  flowParsePrimaryType() {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const node = this.startNode();
	    let tmp;
	    let type;
	    let isGroupedType = false;
	    const oldNoAnonFunctionType = this.state.noAnonFunctionType;

	    switch (this.state.type) {
	      case 5:
	        if (this.isContextual("interface")) {
	          return this.flowParseInterfaceType();
	        }

	        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());

	      case 13:
	        return this.flowParseObjectType({
	          allowStatic: false,
	          allowExact: false,
	          allowSpread: true,
	          allowProto: false,
	          allowInexact: true
	        });

	      case 14:
	        return this.flowParseObjectType({
	          allowStatic: false,
	          allowExact: true,
	          allowSpread: true,
	          allowProto: false,
	          allowInexact: false
	        });

	      case 8:
	        this.state.noAnonFunctionType = false;
	        type = this.flowParseTupleType();
	        this.state.noAnonFunctionType = oldNoAnonFunctionType;
	        return type;

	      case 50:
	        if (this.state.value === "<") {
	          node.typeParameters = this.flowParseTypeParameterDeclaration();
	          this.expect(18);
	          tmp = this.flowParseFunctionTypeParams();
	          node.params = tmp.params;
	          node.rest = tmp.rest;
	          node.this = tmp._this;
	          this.expect(19);
	          this.expect(27);
	          node.returnType = this.flowParseType();
	          return this.finishNode(node, "FunctionTypeAnnotation");
	        }

	        break;

	      case 18:
	        this.next();

	        if (!this.match(19) && !this.match(29)) {
	          if (this.match(5) || this.match(77)) {
	            const token = this.lookahead().type;
	            isGroupedType = token !== 25 && token !== 22;
	          } else {
	            isGroupedType = true;
	          }
	        }

	        if (isGroupedType) {
	          this.state.noAnonFunctionType = false;
	          type = this.flowParseType();
	          this.state.noAnonFunctionType = oldNoAnonFunctionType;

	          if (this.state.noAnonFunctionType || !(this.match(20) || this.match(19) && this.lookahead().type === 27)) {
	            this.expect(19);
	            return type;
	          } else {
	            this.eat(20);
	          }
	        }

	        if (type) {
	          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
	        } else {
	          tmp = this.flowParseFunctionTypeParams();
	        }

	        node.params = tmp.params;
	        node.rest = tmp.rest;
	        node.this = tmp._this;
	        this.expect(19);
	        this.expect(27);
	        node.returnType = this.flowParseType();
	        node.typeParameters = null;
	        return this.finishNode(node, "FunctionTypeAnnotation");

	      case 4:
	        return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");

	      case 84:
	      case 85:
	        node.value = this.match(84);
	        this.next();
	        return this.finishNode(node, "BooleanLiteralTypeAnnotation");

	      case 52:
	        if (this.state.value === "-") {
	          this.next();

	          if (this.match(0)) {
	            return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
	          }

	          if (this.match(1)) {
	            return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
	          }

	          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);
	        }

	        throw this.unexpected();

	      case 0:
	        return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");

	      case 1:
	        return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");

	      case 87:
	        this.next();
	        return this.finishNode(node, "VoidTypeAnnotation");

	      case 83:
	        this.next();
	        return this.finishNode(node, "NullLiteralTypeAnnotation");

	      case 77:
	        this.next();
	        return this.finishNode(node, "ThisTypeAnnotation");

	      case 54:
	        this.next();
	        return this.finishNode(node, "ExistsTypeAnnotation");

	      case 86:
	        return this.flowParseTypeofType();

	      default:
	        if (tokenIsKeyword(this.state.type)) {
	          const label = tokenLabelName(this.state.type);
	          this.next();
	          return super.createIdentifier(node, label);
	        }

	    }

	    throw this.unexpected();
	  }

	  flowParsePostfixType() {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    let type = this.flowParsePrimaryType();
	    let seenOptionalIndexedAccess = false;

	    while ((this.match(8) || this.match(26)) && !this.canInsertSemicolon()) {
	      const node = this.startNodeAt(startPos, startLoc);
	      const optional = this.eat(26);
	      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
	      this.expect(8);

	      if (!optional && this.match(11)) {
	        node.elementType = type;
	        this.next();
	        type = this.finishNode(node, "ArrayTypeAnnotation");
	      } else {
	        node.objectType = type;
	        node.indexType = this.flowParseType();
	        this.expect(11);

	        if (seenOptionalIndexedAccess) {
	          node.optional = optional;
	          type = this.finishNode(node, "OptionalIndexedAccessType");
	        } else {
	          type = this.finishNode(node, "IndexedAccessType");
	        }
	      }
	    }

	    return type;
	  }

	  flowParsePrefixType() {
	    const node = this.startNode();

	    if (this.eat(25)) {
	      node.typeAnnotation = this.flowParsePrefixType();
	      return this.finishNode(node, "NullableTypeAnnotation");
	    } else {
	      return this.flowParsePostfixType();
	    }
	  }

	  flowParseAnonFunctionWithoutParens() {
	    const param = this.flowParsePrefixType();

	    if (!this.state.noAnonFunctionType && this.eat(27)) {
	      const node = this.startNodeAt(param.start, param.loc.start);
	      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
	      node.rest = null;
	      node.this = null;
	      node.returnType = this.flowParseType();
	      node.typeParameters = null;
	      return this.finishNode(node, "FunctionTypeAnnotation");
	    }

	    return param;
	  }

	  flowParseIntersectionType() {
	    const node = this.startNode();
	    this.eat(48);
	    const type = this.flowParseAnonFunctionWithoutParens();
	    node.types = [type];

	    while (this.eat(48)) {
	      node.types.push(this.flowParseAnonFunctionWithoutParens());
	    }

	    return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
	  }

	  flowParseUnionType() {
	    const node = this.startNode();
	    this.eat(46);
	    const type = this.flowParseIntersectionType();
	    node.types = [type];

	    while (this.eat(46)) {
	      node.types.push(this.flowParseIntersectionType());
	    }

	    return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
	  }

	  flowParseType() {
	    const oldInType = this.state.inType;
	    this.state.inType = true;
	    const type = this.flowParseUnionType();
	    this.state.inType = oldInType;
	    return type;
	  }

	  flowParseTypeOrImplicitInstantiation() {
	    if (this.state.type === 5 && this.state.value === "_") {
	      const startPos = this.state.start;
	      const startLoc = this.state.startLoc;
	      const node = this.parseIdentifier();
	      return this.flowParseGenericType(startPos, startLoc, node);
	    } else {
	      return this.flowParseType();
	    }
	  }

	  flowParseTypeAnnotation() {
	    const node = this.startNode();
	    node.typeAnnotation = this.flowParseTypeInitialiser();
	    return this.finishNode(node, "TypeAnnotation");
	  }

	  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
	    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();

	    if (this.match(22)) {
	      ident.typeAnnotation = this.flowParseTypeAnnotation();
	      this.resetEndLocation(ident);
	    }

	    return ident;
	  }

	  typeCastToParameter(node) {
	    node.expression.typeAnnotation = node.typeAnnotation;
	    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);
	    return node.expression;
	  }

	  flowParseVariance() {
	    let variance = null;

	    if (this.match(52)) {
	      variance = this.startNode();

	      if (this.state.value === "+") {
	        variance.kind = "plus";
	      } else {
	        variance.kind = "minus";
	      }

	      this.next();
	      this.finishNode(variance, "Variance");
	    }

	    return variance;
	  }

	  parseFunctionBody(node, allowExpressionBody, isMethod = false) {
	    if (allowExpressionBody) {
	      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));
	    }

	    return super.parseFunctionBody(node, false, isMethod);
	  }

	  parseFunctionBodyAndFinish(node, type, isMethod = false) {
	    if (this.match(22)) {
	      const typeNode = this.startNode();
	      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
	      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
	    }

	    super.parseFunctionBodyAndFinish(node, type, isMethod);
	  }

	  parseStatement(context, topLevel) {
	    if (this.state.strict && this.match(5) && this.state.value === "interface") {
	      const lookahead = this.lookahead();

	      if (lookahead.type === 5 || isKeyword$2(lookahead.value)) {
	        const node = this.startNode();
	        this.next();
	        return this.flowParseInterface(node);
	      }
	    } else if (this.shouldParseEnums() && this.isContextual("enum")) {
	      const node = this.startNode();
	      this.next();
	      return this.flowParseEnumDeclaration(node);
	    }

	    const stmt = super.parseStatement(context, topLevel);

	    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {
	      this.flowPragma = null;
	    }

	    return stmt;
	  }

	  parseExpressionStatement(node, expr) {
	    if (expr.type === "Identifier") {
	      if (expr.name === "declare") {
	        if (this.match(79) || this.match(5) || this.match(67) || this.match(73) || this.match(81)) {
	          return this.flowParseDeclare(node);
	        }
	      } else if (this.match(5)) {
	        if (expr.name === "interface") {
	          return this.flowParseInterface(node);
	        } else if (expr.name === "type") {
	          return this.flowParseTypeAlias(node);
	        } else if (expr.name === "opaque") {
	          return this.flowParseOpaqueType(node, false);
	        }
	      }
	    }

	    return super.parseExpressionStatement(node, expr);
	  }

	  shouldParseExportDeclaration() {
	    return this.isContextual("type") || this.isContextual("interface") || this.isContextual("opaque") || this.shouldParseEnums() && this.isContextual("enum") || super.shouldParseExportDeclaration();
	  }

	  isExportDefaultSpecifier() {
	    if (this.match(5) && (this.state.value === "type" || this.state.value === "interface" || this.state.value === "opaque" || this.shouldParseEnums() && this.state.value === "enum")) {
	      return false;
	    }

	    return super.isExportDefaultSpecifier();
	  }

	  parseExportDefaultExpression() {
	    if (this.shouldParseEnums() && this.isContextual("enum")) {
	      const node = this.startNode();
	      this.next();
	      return this.flowParseEnumDeclaration(node);
	    }

	    return super.parseExportDefaultExpression();
	  }

	  parseConditional(expr, startPos, startLoc, refExpressionErrors) {
	    if (!this.match(25)) return expr;

	    if (this.state.maybeInArrowParameters) {
	      const nextCh = this.lookaheadCharCode();

	      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
	        this.setOptionalParametersError(refExpressionErrors);
	        return expr;
	      }
	    }

	    this.expect(25);
	    const state = this.state.clone();
	    const originalNoArrowAt = this.state.noArrowAt;
	    const node = this.startNodeAt(startPos, startLoc);
	    let {
	      consequent,
	      failed
	    } = this.tryParseConditionalConsequent();
	    let [valid, invalid] = this.getArrowLikeExpressions(consequent);

	    if (failed || invalid.length > 0) {
	      const noArrowAt = [...originalNoArrowAt];

	      if (invalid.length > 0) {
	        this.state = state;
	        this.state.noArrowAt = noArrowAt;

	        for (let i = 0; i < invalid.length; i++) {
	          noArrowAt.push(invalid[i].start);
	        }

	        ({
	          consequent,
	          failed
	        } = this.tryParseConditionalConsequent());
	        [valid, invalid] = this.getArrowLikeExpressions(consequent);
	      }

	      if (failed && valid.length > 1) {
	        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);
	      }

	      if (failed && valid.length === 1) {
	        this.state = state;
	        noArrowAt.push(valid[0].start);
	        this.state.noArrowAt = noArrowAt;
	        ({
	          consequent,
	          failed
	        } = this.tryParseConditionalConsequent());
	      }
	    }

	    this.getArrowLikeExpressions(consequent, true);
	    this.state.noArrowAt = originalNoArrowAt;
	    this.expect(22);
	    node.test = expr;
	    node.consequent = consequent;
	    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));
	    return this.finishNode(node, "ConditionalExpression");
	  }

	  tryParseConditionalConsequent() {
	    this.state.noArrowParamsConversionAt.push(this.state.start);
	    const consequent = this.parseMaybeAssignAllowIn();
	    const failed = !this.match(22);
	    this.state.noArrowParamsConversionAt.pop();
	    return {
	      consequent,
	      failed
	    };
	  }

	  getArrowLikeExpressions(node, disallowInvalid) {
	    const stack = [node];
	    const arrows = [];

	    while (stack.length !== 0) {
	      const node = stack.pop();

	      if (node.type === "ArrowFunctionExpression") {
	        if (node.typeParameters || !node.returnType) {
	          this.finishArrowValidation(node);
	        } else {
	          arrows.push(node);
	        }

	        stack.push(node.body);
	      } else if (node.type === "ConditionalExpression") {
	        stack.push(node.consequent);
	        stack.push(node.alternate);
	      }
	    }

	    if (disallowInvalid) {
	      arrows.forEach(node => this.finishArrowValidation(node));
	      return [arrows, []];
	    }

	    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));
	  }

	  finishArrowValidation(node) {
	    var _node$extra;

	    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);
	    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
	    super.checkParams(node, false, true);
	    this.scope.exit();
	  }

	  forwardNoArrowParamsConversionAt(node, parse) {
	    let result;

	    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
	      this.state.noArrowParamsConversionAt.push(this.state.start);
	      result = parse();
	      this.state.noArrowParamsConversionAt.pop();
	    } else {
	      result = parse();
	    }

	    return result;
	  }

	  parseParenItem(node, startPos, startLoc) {
	    node = super.parseParenItem(node, startPos, startLoc);

	    if (this.eat(25)) {
	      node.optional = true;
	      this.resetEndLocation(node);
	    }

	    if (this.match(22)) {
	      const typeCastNode = this.startNodeAt(startPos, startLoc);
	      typeCastNode.expression = node;
	      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
	      return this.finishNode(typeCastNode, "TypeCastExpression");
	    }

	    return node;
	  }

	  assertModuleNodeAllowed(node) {
	    if (node.type === "ImportDeclaration" && (node.importKind === "type" || node.importKind === "typeof") || node.type === "ExportNamedDeclaration" && node.exportKind === "type" || node.type === "ExportAllDeclaration" && node.exportKind === "type") {
	      return;
	    }

	    super.assertModuleNodeAllowed(node);
	  }

	  parseExport(node) {
	    const decl = super.parseExport(node);

	    if (decl.type === "ExportNamedDeclaration" || decl.type === "ExportAllDeclaration") {
	      decl.exportKind = decl.exportKind || "value";
	    }

	    return decl;
	  }

	  parseExportDeclaration(node) {
	    if (this.isContextual("type")) {
	      node.exportKind = "type";
	      const declarationNode = this.startNode();
	      this.next();

	      if (this.match(13)) {
	        node.specifiers = this.parseExportSpecifiers();
	        this.parseExportFrom(node);
	        return null;
	      } else {
	        return this.flowParseTypeAlias(declarationNode);
	      }
	    } else if (this.isContextual("opaque")) {
	      node.exportKind = "type";
	      const declarationNode = this.startNode();
	      this.next();
	      return this.flowParseOpaqueType(declarationNode, false);
	    } else if (this.isContextual("interface")) {
	      node.exportKind = "type";
	      const declarationNode = this.startNode();
	      this.next();
	      return this.flowParseInterface(declarationNode);
	    } else if (this.shouldParseEnums() && this.isContextual("enum")) {
	      node.exportKind = "value";
	      const declarationNode = this.startNode();
	      this.next();
	      return this.flowParseEnumDeclaration(declarationNode);
	    } else {
	      return super.parseExportDeclaration(node);
	    }
	  }

	  eatExportStar(node) {
	    if (super.eatExportStar(...arguments)) return true;

	    if (this.isContextual("type") && this.lookahead().type === 54) {
	      node.exportKind = "type";
	      this.next();
	      this.next();
	      return true;
	    }

	    return false;
	  }

	  maybeParseExportNamespaceSpecifier(node) {
	    const pos = this.state.start;
	    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);

	    if (hasNamespace && node.exportKind === "type") {
	      this.unexpected(pos);
	    }

	    return hasNamespace;
	  }

	  parseClassId(node, isStatement, optionalId) {
	    super.parseClassId(node, isStatement, optionalId);

	    if (this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    }
	  }

	  parseClassMember(classBody, member, state) {
	    const pos = this.state.start;

	    if (this.isContextual("declare")) {
	      if (this.parseClassMemberFromModifier(classBody, member)) {
	        return;
	      }

	      member.declare = true;
	    }

	    super.parseClassMember(classBody, member, state);

	    if (member.declare) {
	      if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") {
	        this.raise(pos, FlowErrors.DeclareClassElement);
	      } else if (member.value) {
	        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);
	      }
	    }
	  }

	  isIterator(word) {
	    return word === "iterator" || word === "asyncIterator";
	  }

	  readIterator() {
	    const word = super.readWord1();
	    const fullWord = "@@" + word;

	    if (!this.isIterator(word) || !this.state.inType) {
	      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);
	    }

	    this.finishToken(5, fullWord);
	  }

	  getTokenFromCode(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (code === 123 && next === 124) {
	      return this.finishOp(14, 2);
	    } else if (this.state.inType && (code === 62 || code === 60)) {
	      return this.finishOp(50, 1);
	    } else if (this.state.inType && code === 63) {
	      if (next === 46) {
	        return this.finishOp(26, 2);
	      }

	      return this.finishOp(25, 1);
	    } else if (isIteratorStart(code, next)) {
	      this.state.pos += 2;
	      return this.readIterator();
	    } else {
	      return super.getTokenFromCode(code);
	    }
	  }

	  isAssignable(node, isBinding) {
	    if (node.type === "TypeCastExpression") {
	      return this.isAssignable(node.expression, isBinding);
	    } else {
	      return super.isAssignable(node, isBinding);
	    }
	  }

	  toAssignable(node, isLHS = false) {
	    if (node.type === "TypeCastExpression") {
	      return super.toAssignable(this.typeCastToParameter(node), isLHS);
	    } else {
	      return super.toAssignable(node, isLHS);
	    }
	  }

	  toAssignableList(exprList, trailingCommaPos, isLHS) {
	    for (let i = 0; i < exprList.length; i++) {
	      const expr = exprList[i];

	      if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") {
	        exprList[i] = this.typeCastToParameter(expr);
	      }
	    }

	    return super.toAssignableList(exprList, trailingCommaPos, isLHS);
	  }

	  toReferencedList(exprList, isParenthesizedExpr) {
	    for (let i = 0; i < exprList.length; i++) {
	      var _expr$extra;

	      const expr = exprList[i];

	      if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {
	        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);
	      }
	    }

	    return exprList;
	  }

	  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
	    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);

	    if (canBePattern && !this.state.maybeInArrowParameters) {
	      this.toReferencedList(node.elements);
	    }

	    return node;
	  }

	  checkLVal(expr, ...args) {
	    if (expr.type !== "TypeCastExpression") {
	      return super.checkLVal(expr, ...args);
	    }
	  }

	  parseClassProperty(node) {
	    if (this.match(22)) {
	      node.typeAnnotation = this.flowParseTypeAnnotation();
	    }

	    return super.parseClassProperty(node);
	  }

	  parseClassPrivateProperty(node) {
	    if (this.match(22)) {
	      node.typeAnnotation = this.flowParseTypeAnnotation();
	    }

	    return super.parseClassPrivateProperty(node);
	  }

	  isClassMethod() {
	    return this.isRelational("<") || super.isClassMethod();
	  }

	  isClassProperty() {
	    return this.match(22) || super.isClassProperty();
	  }

	  isNonstaticConstructor(method) {
	    return !this.match(22) && super.isNonstaticConstructor(method);
	  }

	  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
	    if (method.variance) {
	      this.unexpected(method.variance.start);
	    }

	    delete method.variance;

	    if (this.isRelational("<")) {
	      method.typeParameters = this.flowParseTypeParameterDeclaration();
	    }

	    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);

	    if (method.params && isConstructor) {
	      const params = method.params;

	      if (params.length > 0 && this.isThisParam(params[0])) {
	        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);
	      }
	    } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
	      const params = method.value.params;

	      if (params.length > 0 && this.isThisParam(params[0])) {
	        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);
	      }
	    }
	  }

	  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
	    if (method.variance) {
	      this.unexpected(method.variance.start);
	    }

	    delete method.variance;

	    if (this.isRelational("<")) {
	      method.typeParameters = this.flowParseTypeParameterDeclaration();
	    }

	    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
	  }

	  parseClassSuper(node) {
	    super.parseClassSuper(node);

	    if (node.superClass && this.isRelational("<")) {
	      node.superTypeParameters = this.flowParseTypeParameterInstantiation();
	    }

	    if (this.isContextual("implements")) {
	      this.next();
	      const implemented = node.implements = [];

	      do {
	        const node = this.startNode();
	        node.id = this.flowParseRestrictedIdentifier(true);

	        if (this.isRelational("<")) {
	          node.typeParameters = this.flowParseTypeParameterInstantiation();
	        } else {
	          node.typeParameters = null;
	        }

	        implemented.push(this.finishNode(node, "ClassImplements"));
	      } while (this.eat(20));
	    }
	  }

	  checkGetterSetterParams(method) {
	    super.checkGetterSetterParams(method);
	    const params = this.getObjectOrClassMethodParams(method);

	    if (params.length > 0) {
	      const param = params[0];

	      if (this.isThisParam(param) && method.kind === "get") {
	        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);
	      } else if (this.isThisParam(param)) {
	        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);
	      }
	    }
	  }

	  parsePropertyName(node, isPrivateNameAllowed) {
	    const variance = this.flowParseVariance();
	    const key = super.parsePropertyName(node, isPrivateNameAllowed);
	    node.variance = variance;
	    return key;
	  }

	  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
	    if (prop.variance) {
	      this.unexpected(prop.variance.start);
	    }

	    delete prop.variance;
	    let typeParameters;

	    if (this.isRelational("<") && !isAccessor) {
	      typeParameters = this.flowParseTypeParameterDeclaration();
	      if (!this.match(18)) this.unexpected();
	    }

	    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);

	    if (typeParameters) {
	      (prop.value || prop).typeParameters = typeParameters;
	    }
	  }

	  parseAssignableListItemTypes(param) {
	    if (this.eat(25)) {
	      if (param.type !== "Identifier") {
	        this.raise(param.start, FlowErrors.PatternIsOptional);
	      }

	      if (this.isThisParam(param)) {
	        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);
	      }

	      param.optional = true;
	    }

	    if (this.match(22)) {
	      param.typeAnnotation = this.flowParseTypeAnnotation();
	    } else if (this.isThisParam(param)) {
	      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);
	    }

	    if (this.match(35) && this.isThisParam(param)) {
	      this.raise(param.start, FlowErrors.ThisParamNoDefault);
	    }

	    this.resetEndLocation(param);
	    return param;
	  }

	  parseMaybeDefault(startPos, startLoc, left) {
	    const node = super.parseMaybeDefault(startPos, startLoc, left);

	    if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
	      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);
	    }

	    return node;
	  }

	  shouldParseDefaultImport(node) {
	    if (!hasTypeImportKind(node)) {
	      return super.shouldParseDefaultImport(node);
	    }

	    return isMaybeDefaultImport(this.state);
	  }

	  parseImportSpecifierLocal(node, specifier, type, contextDescription) {
	    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
	    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);
	    node.specifiers.push(this.finishNode(specifier, type));
	  }

	  maybeParseDefaultImportSpecifier(node) {
	    node.importKind = "value";
	    let kind = null;

	    if (this.match(86)) {
	      kind = "typeof";
	    } else if (this.isContextual("type")) {
	      kind = "type";
	    }

	    if (kind) {
	      const lh = this.lookahead();

	      if (kind === "type" && lh.type === 54) {
	        this.unexpected(lh.start);
	      }

	      if (isMaybeDefaultImport(lh) || lh.type === 13 || lh.type === 54) {
	        this.next();
	        node.importKind = kind;
	      }
	    }

	    return super.maybeParseDefaultImportSpecifier(node);
	  }

	  parseImportSpecifier(node) {
	    const specifier = this.startNode();
	    const firstIdentIsString = this.match(4);
	    const firstIdent = this.parseModuleExportName();
	    let specifierTypeKind = null;

	    if (firstIdent.type === "Identifier") {
	      if (firstIdent.name === "type") {
	        specifierTypeKind = "type";
	      } else if (firstIdent.name === "typeof") {
	        specifierTypeKind = "typeof";
	      }
	    }

	    let isBinding = false;

	    if (this.isContextual("as") && !this.isLookaheadContextual("as")) {
	      const as_ident = this.parseIdentifier(true);

	      if (specifierTypeKind !== null && !this.match(5) && !tokenIsKeyword(this.state.type)) {
	        specifier.imported = as_ident;
	        specifier.importKind = specifierTypeKind;
	        specifier.local = cloneIdentifier(as_ident);
	      } else {
	        specifier.imported = firstIdent;
	        specifier.importKind = null;
	        specifier.local = this.parseIdentifier();
	      }
	    } else {
	      if (specifierTypeKind !== null && (this.match(5) || tokenIsKeyword(this.state.type))) {
	        specifier.imported = this.parseIdentifier(true);
	        specifier.importKind = specifierTypeKind;
	      } else {
	        if (firstIdentIsString) {
	          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);
	        }

	        specifier.imported = firstIdent;
	        specifier.importKind = null;
	      }

	      if (this.eatContextual("as")) {
	        specifier.local = this.parseIdentifier();
	      } else {
	        isBinding = true;
	        specifier.local = cloneIdentifier(specifier.imported);
	      }
	    }

	    const nodeIsTypeImport = hasTypeImportKind(node);
	    const specifierIsTypeImport = hasTypeImportKind(specifier);

	    if (nodeIsTypeImport && specifierIsTypeImport) {
	      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);
	    }

	    if (nodeIsTypeImport || specifierIsTypeImport) {
	      this.checkReservedType(specifier.local.name, specifier.local.start, true);
	    }

	    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {
	      this.checkReservedWord(specifier.local.name, specifier.start, true, true);
	    }

	    this.checkLVal(specifier.local, "import specifier", BIND_LEXICAL);
	    node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
	  }

	  parseBindingAtom() {
	    switch (this.state.type) {
	      case 77:
	        return this.parseIdentifier(true);

	      default:
	        return super.parseBindingAtom();
	    }
	  }

	  parseFunctionParams(node, allowModifiers) {
	    const kind = node.kind;

	    if (kind !== "get" && kind !== "set" && this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    }

	    super.parseFunctionParams(node, allowModifiers);
	  }

	  parseVarId(decl, kind) {
	    super.parseVarId(decl, kind);

	    if (this.match(22)) {
	      decl.id.typeAnnotation = this.flowParseTypeAnnotation();
	      this.resetEndLocation(decl.id);
	    }
	  }

	  parseAsyncArrowFromCallExpression(node, call) {
	    if (this.match(22)) {
	      const oldNoAnonFunctionType = this.state.noAnonFunctionType;
	      this.state.noAnonFunctionType = true;
	      node.returnType = this.flowParseTypeAnnotation();
	      this.state.noAnonFunctionType = oldNoAnonFunctionType;
	    }

	    return super.parseAsyncArrowFromCallExpression(node, call);
	  }

	  shouldParseAsyncArrow() {
	    return this.match(22) || super.shouldParseAsyncArrow();
	  }

	  parseMaybeAssign(refExpressionErrors, afterLeftParse) {
	    var _jsx;

	    let state = null;
	    let jsx;

	    if (this.hasPlugin("jsx") && (this.match(94) || this.isRelational("<"))) {
	      state = this.state.clone();
	      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
	      if (!jsx.error) return jsx.node;
	      const {
	        context
	      } = this.state;
	      const curContext = context[context.length - 1];

	      if (curContext === types$2.j_oTag) {
	        context.length -= 2;
	      } else if (curContext === types$2.j_expr) {
	        context.length -= 1;
	      }
	    }

	    if ((_jsx = jsx) != null && _jsx.error || this.isRelational("<")) {
	      var _jsx2, _jsx3;

	      state = state || this.state.clone();
	      let typeParameters;
	      const arrow = this.tryParse(abort => {
	        var _arrowExpression$extr;

	        typeParameters = this.flowParseTypeParameterDeclaration();
	        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
	          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
	          this.resetStartLocationFromNode(result, typeParameters);
	          return result;
	        });
	        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();
	        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);
	        if (expr.type !== "ArrowFunctionExpression") abort();
	        expr.typeParameters = typeParameters;
	        this.resetStartLocationFromNode(expr, typeParameters);
	        return arrowExpression;
	      }, state);
	      let arrowExpression = null;

	      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
	        if (!arrow.error && !arrow.aborted) {
	          if (arrow.node.async) {
	            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);
	          }

	          return arrow.node;
	        }

	        arrowExpression = arrow.node;
	      }

	      if ((_jsx2 = jsx) != null && _jsx2.node) {
	        this.state = jsx.failState;
	        return jsx.node;
	      }

	      if (arrowExpression) {
	        this.state = arrow.failState;
	        return arrowExpression;
	      }

	      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;
	      if (arrow.thrown) throw arrow.error;
	      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);
	    }

	    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
	  }

	  parseArrow(node) {
	    if (this.match(22)) {
	      const result = this.tryParse(() => {
	        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
	        this.state.noAnonFunctionType = true;
	        const typeNode = this.startNode();
	        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
	        this.state.noAnonFunctionType = oldNoAnonFunctionType;
	        if (this.canInsertSemicolon()) this.unexpected();
	        if (!this.match(27)) this.unexpected();
	        return typeNode;
	      });
	      if (result.thrown) return null;
	      if (result.error) this.state = result.failState;
	      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
	    }

	    return super.parseArrow(node);
	  }

	  shouldParseArrow(params) {
	    return this.match(22) || super.shouldParseArrow(params);
	  }

	  setArrowFunctionParameters(node, params) {
	    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
	      node.params = params;
	    } else {
	      super.setArrowFunctionParameters(node, params);
	    }
	  }

	  checkParams(node, allowDuplicates, isArrowFunction) {
	    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
	      return;
	    }

	    for (let i = 0; i < node.params.length; i++) {
	      if (this.isThisParam(node.params[i]) && i > 0) {
	        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);
	      }
	    }

	    return super.checkParams(...arguments);
	  }

	  parseParenAndDistinguishExpression(canBeArrow) {
	    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);
	  }

	  parseSubscripts(base, startPos, startLoc, noCalls) {
	    if (base.type === "Identifier" && base.name === "async" && this.state.noArrowAt.indexOf(startPos) !== -1) {
	      this.next();
	      const node = this.startNodeAt(startPos, startLoc);
	      node.callee = base;
	      node.arguments = this.parseCallExpressionArguments(19, false);
	      base = this.finishNode(node, "CallExpression");
	    } else if (base.type === "Identifier" && base.name === "async" && this.isRelational("<")) {
	      const state = this.state.clone();
	      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);
	      if (!arrow.error && !arrow.aborted) return arrow.node;
	      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);
	      if (result.node && !result.error) return result.node;

	      if (arrow.node) {
	        this.state = arrow.failState;
	        return arrow.node;
	      }

	      if (result.node) {
	        this.state = result.failState;
	        return result.node;
	      }

	      throw arrow.error || result.error;
	    }

	    return super.parseSubscripts(base, startPos, startLoc, noCalls);
	  }

	  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {
	    if (this.match(26) && this.isLookaheadToken_lt()) {
	      subscriptState.optionalChainMember = true;

	      if (noCalls) {
	        subscriptState.stop = true;
	        return base;
	      }

	      this.next();
	      const node = this.startNodeAt(startPos, startLoc);
	      node.callee = base;
	      node.typeArguments = this.flowParseTypeParameterInstantiation();
	      this.expect(18);
	      node.arguments = this.parseCallExpressionArguments(19, false);
	      node.optional = true;
	      return this.finishCallExpression(node, true);
	    } else if (!noCalls && this.shouldParseTypes() && this.isRelational("<")) {
	      const node = this.startNodeAt(startPos, startLoc);
	      node.callee = base;
	      const result = this.tryParse(() => {
	        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
	        this.expect(18);
	        node.arguments = this.parseCallExpressionArguments(19, false);
	        if (subscriptState.optionalChainMember) node.optional = false;
	        return this.finishCallExpression(node, subscriptState.optionalChainMember);
	      });

	      if (result.node) {
	        if (result.error) this.state = result.failState;
	        return result.node;
	      }
	    }

	    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);
	  }

	  parseNewArguments(node) {
	    let targs = null;

	    if (this.shouldParseTypes() && this.isRelational("<")) {
	      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
	    }

	    node.typeArguments = targs;
	    super.parseNewArguments(node);
	  }

	  parseAsyncArrowWithTypeParameters(startPos, startLoc) {
	    const node = this.startNodeAt(startPos, startLoc);
	    this.parseFunctionParams(node);
	    if (!this.parseArrow(node)) return;
	    return this.parseArrowExpression(node, undefined, true);
	  }

	  readToken_mult_modulo(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (code === 42 && next === 47 && this.state.hasFlowComment) {
	      this.state.hasFlowComment = false;
	      this.state.pos += 2;
	      this.nextToken();
	      return;
	    }

	    super.readToken_mult_modulo(code);
	  }

	  readToken_pipe_amp(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (code === 124 && next === 125) {
	      this.finishOp(17, 2);
	      return;
	    }

	    super.readToken_pipe_amp(code);
	  }

	  parseTopLevel(file, program) {
	    const fileNode = super.parseTopLevel(file, program);

	    if (this.state.hasFlowComment) {
	      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);
	    }

	    return fileNode;
	  }

	  skipBlockComment() {
	    if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
	      if (this.state.hasFlowComment) {
	        this.unexpected(null, FlowErrors.NestedFlowComment);
	      }

	      this.hasFlowCommentCompletion();
	      this.state.pos += this.skipFlowComment();
	      this.state.hasFlowComment = true;
	      return;
	    }

	    if (this.state.hasFlowComment) {
	      const end = this.input.indexOf("*-/", this.state.pos += 2);

	      if (end === -1) {
	        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);
	      }

	      this.state.pos = end + 3;
	      return;
	    }

	    return super.skipBlockComment();
	  }

	  skipFlowComment() {
	    const {
	      pos
	    } = this.state;
	    let shiftToFirstNonWhiteSpace = 2;

	    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {
	      shiftToFirstNonWhiteSpace++;
	    }

	    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
	    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);

	    if (ch2 === 58 && ch3 === 58) {
	      return shiftToFirstNonWhiteSpace + 2;
	    }

	    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") {
	      return shiftToFirstNonWhiteSpace + 12;
	    }

	    if (ch2 === 58 && ch3 !== 58) {
	      return shiftToFirstNonWhiteSpace;
	    }

	    return false;
	  }

	  hasFlowCommentCompletion() {
	    const end = this.input.indexOf("*/", this.state.pos);

	    if (end === -1) {
	      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);
	    }
	  }

	  flowEnumErrorBooleanMemberNotInitialized(pos, {
	    enumName,
	    memberName
	  }) {
	    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);
	  }

	  flowEnumErrorInvalidMemberName(pos, {
	    enumName,
	    memberName
	  }) {
	    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);
	    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);
	  }

	  flowEnumErrorDuplicateMemberName(pos, {
	    enumName,
	    memberName
	  }) {
	    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);
	  }

	  flowEnumErrorInconsistentMemberValues(pos, {
	    enumName
	  }) {
	    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);
	  }

	  flowEnumErrorInvalidExplicitType(pos, {
	    enumName,
	    suppliedType
	  }) {
	    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);
	  }

	  flowEnumErrorInvalidMemberInitializer(pos, {
	    enumName,
	    explicitType,
	    memberName
	  }) {
	    let message = null;

	    switch (explicitType) {
	      case "boolean":
	      case "number":
	      case "string":
	        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;
	        break;

	      case "symbol":
	        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;
	        break;

	      default:
	        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;
	    }

	    return this.raise(pos, message, enumName, memberName, explicitType);
	  }

	  flowEnumErrorNumberMemberNotInitialized(pos, {
	    enumName,
	    memberName
	  }) {
	    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);
	  }

	  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {
	    enumName
	  }) {
	    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);
	  }

	  flowEnumMemberInit() {
	    const startPos = this.state.start;

	    const endOfInit = () => this.match(20) || this.match(16);

	    switch (this.state.type) {
	      case 0:
	        {
	          const literal = this.parseNumericLiteral(this.state.value);

	          if (endOfInit()) {
	            return {
	              type: "number",
	              pos: literal.start,
	              value: literal
	            };
	          }

	          return {
	            type: "invalid",
	            pos: startPos
	          };
	        }

	      case 4:
	        {
	          const literal = this.parseStringLiteral(this.state.value);

	          if (endOfInit()) {
	            return {
	              type: "string",
	              pos: literal.start,
	              value: literal
	            };
	          }

	          return {
	            type: "invalid",
	            pos: startPos
	          };
	        }

	      case 84:
	      case 85:
	        {
	          const literal = this.parseBooleanLiteral(this.match(84));

	          if (endOfInit()) {
	            return {
	              type: "boolean",
	              pos: literal.start,
	              value: literal
	            };
	          }

	          return {
	            type: "invalid",
	            pos: startPos
	          };
	        }

	      default:
	        return {
	          type: "invalid",
	          pos: startPos
	        };
	    }
	  }

	  flowEnumMemberRaw() {
	    const pos = this.state.start;
	    const id = this.parseIdentifier(true);
	    const init = this.eat(35) ? this.flowEnumMemberInit() : {
	      type: "none",
	      pos
	    };
	    return {
	      id,
	      init
	    };
	  }

	  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {
	    const {
	      explicitType
	    } = context;

	    if (explicitType === null) {
	      return;
	    }

	    if (explicitType !== expectedType) {
	      this.flowEnumErrorInvalidMemberInitializer(pos, context);
	    }
	  }

	  flowEnumMembers({
	    enumName,
	    explicitType
	  }) {
	    const seenNames = new Set();
	    const members = {
	      booleanMembers: [],
	      numberMembers: [],
	      stringMembers: [],
	      defaultedMembers: []
	    };
	    let hasUnknownMembers = false;

	    while (!this.match(16)) {
	      if (this.eat(29)) {
	        hasUnknownMembers = true;
	        break;
	      }

	      const memberNode = this.startNode();
	      const {
	        id,
	        init
	      } = this.flowEnumMemberRaw();
	      const memberName = id.name;

	      if (memberName === "") {
	        continue;
	      }

	      if (/^[a-z]/.test(memberName)) {
	        this.flowEnumErrorInvalidMemberName(id.start, {
	          enumName,
	          memberName
	        });
	      }

	      if (seenNames.has(memberName)) {
	        this.flowEnumErrorDuplicateMemberName(id.start, {
	          enumName,
	          memberName
	        });
	      }

	      seenNames.add(memberName);
	      const context = {
	        enumName,
	        explicitType,
	        memberName
	      };
	      memberNode.id = id;

	      switch (init.type) {
	        case "boolean":
	          {
	            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, "boolean");
	            memberNode.init = init.value;
	            members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
	            break;
	          }

	        case "number":
	          {
	            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, "number");
	            memberNode.init = init.value;
	            members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
	            break;
	          }

	        case "string":
	          {
	            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, "string");
	            memberNode.init = init.value;
	            members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
	            break;
	          }

	        case "invalid":
	          {
	            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);
	          }

	        case "none":
	          {
	            switch (explicitType) {
	              case "boolean":
	                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);
	                break;

	              case "number":
	                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);
	                break;

	              default:
	                members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
	            }
	          }
	      }

	      if (!this.match(16)) {
	        this.expect(20);
	      }
	    }

	    return {
	      members,
	      hasUnknownMembers
	    };
	  }

	  flowEnumStringMembers(initializedMembers, defaultedMembers, {
	    enumName
	  }) {
	    if (initializedMembers.length === 0) {
	      return defaultedMembers;
	    } else if (defaultedMembers.length === 0) {
	      return initializedMembers;
	    } else if (defaultedMembers.length > initializedMembers.length) {
	      for (const member of initializedMembers) {
	        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {
	          enumName
	        });
	      }

	      return defaultedMembers;
	    } else {
	      for (const member of defaultedMembers) {
	        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {
	          enumName
	        });
	      }

	      return initializedMembers;
	    }
	  }

	  flowEnumParseExplicitType({
	    enumName
	  }) {
	    if (this.eatContextual("of")) {
	      if (!this.match(5)) {
	        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {
	          enumName,
	          suppliedType: null
	        });
	      }

	      const {
	        value
	      } = this.state;
	      this.next();

	      if (value !== "boolean" && value !== "number" && value !== "string" && value !== "symbol") {
	        this.flowEnumErrorInvalidExplicitType(this.state.start, {
	          enumName,
	          suppliedType: value
	        });
	      }

	      return value;
	    }

	    return null;
	  }

	  flowEnumBody(node, {
	    enumName,
	    nameLoc
	  }) {
	    const explicitType = this.flowEnumParseExplicitType({
	      enumName
	    });
	    this.expect(13);
	    const {
	      members,
	      hasUnknownMembers
	    } = this.flowEnumMembers({
	      enumName,
	      explicitType
	    });
	    node.hasUnknownMembers = hasUnknownMembers;

	    switch (explicitType) {
	      case "boolean":
	        node.explicitType = true;
	        node.members = members.booleanMembers;
	        this.expect(16);
	        return this.finishNode(node, "EnumBooleanBody");

	      case "number":
	        node.explicitType = true;
	        node.members = members.numberMembers;
	        this.expect(16);
	        return this.finishNode(node, "EnumNumberBody");

	      case "string":
	        node.explicitType = true;
	        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
	          enumName
	        });
	        this.expect(16);
	        return this.finishNode(node, "EnumStringBody");

	      case "symbol":
	        node.members = members.defaultedMembers;
	        this.expect(16);
	        return this.finishNode(node, "EnumSymbolBody");

	      default:
	        {
	          const empty = () => {
	            node.members = [];
	            this.expect(16);
	            return this.finishNode(node, "EnumStringBody");
	          };

	          node.explicitType = false;
	          const boolsLen = members.booleanMembers.length;
	          const numsLen = members.numberMembers.length;
	          const strsLen = members.stringMembers.length;
	          const defaultedLen = members.defaultedMembers.length;

	          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
	            return empty();
	          } else if (!boolsLen && !numsLen) {
	            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
	              enumName
	            });
	            this.expect(16);
	            return this.finishNode(node, "EnumStringBody");
	          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
	            for (const member of members.defaultedMembers) {
	              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {
	                enumName,
	                memberName: member.id.name
	              });
	            }

	            node.members = members.booleanMembers;
	            this.expect(16);
	            return this.finishNode(node, "EnumBooleanBody");
	          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
	            for (const member of members.defaultedMembers) {
	              this.flowEnumErrorNumberMemberNotInitialized(member.start, {
	                enumName,
	                memberName: member.id.name
	              });
	            }

	            node.members = members.numberMembers;
	            this.expect(16);
	            return this.finishNode(node, "EnumNumberBody");
	          } else {
	            this.flowEnumErrorInconsistentMemberValues(nameLoc, {
	              enumName
	            });
	            return empty();
	          }
	        }
	    }
	  }

	  flowParseEnumDeclaration(node) {
	    const id = this.parseIdentifier();
	    node.id = id;
	    node.body = this.flowEnumBody(this.startNode(), {
	      enumName: id.name,
	      nameLoc: id.start
	    });
	    return this.finishNode(node, "EnumDeclaration");
	  }

	  isLookaheadToken_lt() {
	    const next = this.nextTokenStart();

	    if (this.input.charCodeAt(next) === 60) {
	      const afterNext = this.input.charCodeAt(next + 1);
	      return afterNext !== 60 && afterNext !== 61;
	    }

	    return false;
	  }

	  maybeUnwrapTypeCastExpression(node) {
	    return node.type === "TypeCastExpression" ? node.expression : node;
	  }

	});

	const entities = {
	  quot: "\u0022",
	  amp: "&",
	  apos: "\u0027",
	  lt: "<",
	  gt: ">",
	  nbsp: "\u00A0",
	  iexcl: "\u00A1",
	  cent: "\u00A2",
	  pound: "\u00A3",
	  curren: "\u00A4",
	  yen: "\u00A5",
	  brvbar: "\u00A6",
	  sect: "\u00A7",
	  uml: "\u00A8",
	  copy: "\u00A9",
	  ordf: "\u00AA",
	  laquo: "\u00AB",
	  not: "\u00AC",
	  shy: "\u00AD",
	  reg: "\u00AE",
	  macr: "\u00AF",
	  deg: "\u00B0",
	  plusmn: "\u00B1",
	  sup2: "\u00B2",
	  sup3: "\u00B3",
	  acute: "\u00B4",
	  micro: "\u00B5",
	  para: "\u00B6",
	  middot: "\u00B7",
	  cedil: "\u00B8",
	  sup1: "\u00B9",
	  ordm: "\u00BA",
	  raquo: "\u00BB",
	  frac14: "\u00BC",
	  frac12: "\u00BD",
	  frac34: "\u00BE",
	  iquest: "\u00BF",
	  Agrave: "\u00C0",
	  Aacute: "\u00C1",
	  Acirc: "\u00C2",
	  Atilde: "\u00C3",
	  Auml: "\u00C4",
	  Aring: "\u00C5",
	  AElig: "\u00C6",
	  Ccedil: "\u00C7",
	  Egrave: "\u00C8",
	  Eacute: "\u00C9",
	  Ecirc: "\u00CA",
	  Euml: "\u00CB",
	  Igrave: "\u00CC",
	  Iacute: "\u00CD",
	  Icirc: "\u00CE",
	  Iuml: "\u00CF",
	  ETH: "\u00D0",
	  Ntilde: "\u00D1",
	  Ograve: "\u00D2",
	  Oacute: "\u00D3",
	  Ocirc: "\u00D4",
	  Otilde: "\u00D5",
	  Ouml: "\u00D6",
	  times: "\u00D7",
	  Oslash: "\u00D8",
	  Ugrave: "\u00D9",
	  Uacute: "\u00DA",
	  Ucirc: "\u00DB",
	  Uuml: "\u00DC",
	  Yacute: "\u00DD",
	  THORN: "\u00DE",
	  szlig: "\u00DF",
	  agrave: "\u00E0",
	  aacute: "\u00E1",
	  acirc: "\u00E2",
	  atilde: "\u00E3",
	  auml: "\u00E4",
	  aring: "\u00E5",
	  aelig: "\u00E6",
	  ccedil: "\u00E7",
	  egrave: "\u00E8",
	  eacute: "\u00E9",
	  ecirc: "\u00EA",
	  euml: "\u00EB",
	  igrave: "\u00EC",
	  iacute: "\u00ED",
	  icirc: "\u00EE",
	  iuml: "\u00EF",
	  eth: "\u00F0",
	  ntilde: "\u00F1",
	  ograve: "\u00F2",
	  oacute: "\u00F3",
	  ocirc: "\u00F4",
	  otilde: "\u00F5",
	  ouml: "\u00F6",
	  divide: "\u00F7",
	  oslash: "\u00F8",
	  ugrave: "\u00F9",
	  uacute: "\u00FA",
	  ucirc: "\u00FB",
	  uuml: "\u00FC",
	  yacute: "\u00FD",
	  thorn: "\u00FE",
	  yuml: "\u00FF",
	  OElig: "\u0152",
	  oelig: "\u0153",
	  Scaron: "\u0160",
	  scaron: "\u0161",
	  Yuml: "\u0178",
	  fnof: "\u0192",
	  circ: "\u02C6",
	  tilde: "\u02DC",
	  Alpha: "\u0391",
	  Beta: "\u0392",
	  Gamma: "\u0393",
	  Delta: "\u0394",
	  Epsilon: "\u0395",
	  Zeta: "\u0396",
	  Eta: "\u0397",
	  Theta: "\u0398",
	  Iota: "\u0399",
	  Kappa: "\u039A",
	  Lambda: "\u039B",
	  Mu: "\u039C",
	  Nu: "\u039D",
	  Xi: "\u039E",
	  Omicron: "\u039F",
	  Pi: "\u03A0",
	  Rho: "\u03A1",
	  Sigma: "\u03A3",
	  Tau: "\u03A4",
	  Upsilon: "\u03A5",
	  Phi: "\u03A6",
	  Chi: "\u03A7",
	  Psi: "\u03A8",
	  Omega: "\u03A9",
	  alpha: "\u03B1",
	  beta: "\u03B2",
	  gamma: "\u03B3",
	  delta: "\u03B4",
	  epsilon: "\u03B5",
	  zeta: "\u03B6",
	  eta: "\u03B7",
	  theta: "\u03B8",
	  iota: "\u03B9",
	  kappa: "\u03BA",
	  lambda: "\u03BB",
	  mu: "\u03BC",
	  nu: "\u03BD",
	  xi: "\u03BE",
	  omicron: "\u03BF",
	  pi: "\u03C0",
	  rho: "\u03C1",
	  sigmaf: "\u03C2",
	  sigma: "\u03C3",
	  tau: "\u03C4",
	  upsilon: "\u03C5",
	  phi: "\u03C6",
	  chi: "\u03C7",
	  psi: "\u03C8",
	  omega: "\u03C9",
	  thetasym: "\u03D1",
	  upsih: "\u03D2",
	  piv: "\u03D6",
	  ensp: "\u2002",
	  emsp: "\u2003",
	  thinsp: "\u2009",
	  zwnj: "\u200C",
	  zwj: "\u200D",
	  lrm: "\u200E",
	  rlm: "\u200F",
	  ndash: "\u2013",
	  mdash: "\u2014",
	  lsquo: "\u2018",
	  rsquo: "\u2019",
	  sbquo: "\u201A",
	  ldquo: "\u201C",
	  rdquo: "\u201D",
	  bdquo: "\u201E",
	  dagger: "\u2020",
	  Dagger: "\u2021",
	  bull: "\u2022",
	  hellip: "\u2026",
	  permil: "\u2030",
	  prime: "\u2032",
	  Prime: "\u2033",
	  lsaquo: "\u2039",
	  rsaquo: "\u203A",
	  oline: "\u203E",
	  frasl: "\u2044",
	  euro: "\u20AC",
	  image: "\u2111",
	  weierp: "\u2118",
	  real: "\u211C",
	  trade: "\u2122",
	  alefsym: "\u2135",
	  larr: "\u2190",
	  uarr: "\u2191",
	  rarr: "\u2192",
	  darr: "\u2193",
	  harr: "\u2194",
	  crarr: "\u21B5",
	  lArr: "\u21D0",
	  uArr: "\u21D1",
	  rArr: "\u21D2",
	  dArr: "\u21D3",
	  hArr: "\u21D4",
	  forall: "\u2200",
	  part: "\u2202",
	  exist: "\u2203",
	  empty: "\u2205",
	  nabla: "\u2207",
	  isin: "\u2208",
	  notin: "\u2209",
	  ni: "\u220B",
	  prod: "\u220F",
	  sum: "\u2211",
	  minus: "\u2212",
	  lowast: "\u2217",
	  radic: "\u221A",
	  prop: "\u221D",
	  infin: "\u221E",
	  ang: "\u2220",
	  and: "\u2227",
	  or: "\u2228",
	  cap: "\u2229",
	  cup: "\u222A",
	  int: "\u222B",
	  there4: "\u2234",
	  sim: "\u223C",
	  cong: "\u2245",
	  asymp: "\u2248",
	  ne: "\u2260",
	  equiv: "\u2261",
	  le: "\u2264",
	  ge: "\u2265",
	  sub: "\u2282",
	  sup: "\u2283",
	  nsub: "\u2284",
	  sube: "\u2286",
	  supe: "\u2287",
	  oplus: "\u2295",
	  otimes: "\u2297",
	  perp: "\u22A5",
	  sdot: "\u22C5",
	  lceil: "\u2308",
	  rceil: "\u2309",
	  lfloor: "\u230A",
	  rfloor: "\u230B",
	  lang: "\u2329",
	  rang: "\u232A",
	  loz: "\u25CA",
	  spades: "\u2660",
	  clubs: "\u2663",
	  hearts: "\u2665",
	  diams: "\u2666"
	};

	const HEX_NUMBER$1 = /^[\da-fA-F]+$/;
	const DECIMAL_NUMBER$1 = /^\d+$/;
	const JsxErrors = makeErrorTemplates({
	  AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
	  MissingClosingTagElement: "Expected corresponding JSX closing tag for <%0>.",
	  MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
	  UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
	  UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
	  UnterminatedJsxContent: "Unterminated JSX contents.",
	  UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
	}, ErrorCodes.SyntaxError, "jsx");
	types$2.j_oTag = new TokContext$1("<tag");
	types$2.j_cTag = new TokContext$1("</tag");
	types$2.j_expr = new TokContext$1("<tag>...</tag>", true);

	function isFragment(object) {
	  return object ? object.type === "JSXOpeningFragment" || object.type === "JSXClosingFragment" : false;
	}

	function getQualifiedJSXName$1(object) {
	  if (object.type === "JSXIdentifier") {
	    return object.name;
	  }

	  if (object.type === "JSXNamespacedName") {
	    return object.namespace.name + ":" + object.name.name;
	  }

	  if (object.type === "JSXMemberExpression") {
	    return getQualifiedJSXName$1(object.object) + "." + getQualifiedJSXName$1(object.property);
	  }

	  throw new Error("Node had unexpected type: " + object.type);
	}

	var jsx$2 = (superClass => class extends superClass {
	  jsxReadToken() {
	    let out = "";
	    let chunkStart = this.state.pos;

	    for (;;) {
	      if (this.state.pos >= this.length) {
	        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);
	      }

	      const ch = this.input.charCodeAt(this.state.pos);

	      switch (ch) {
	        case 60:
	        case 123:
	          if (this.state.pos === this.state.start) {
	            if (ch === 60 && this.state.exprAllowed) {
	              ++this.state.pos;
	              return this.finishToken(94);
	            }

	            return super.getTokenFromCode(ch);
	          }

	          out += this.input.slice(chunkStart, this.state.pos);
	          return this.finishToken(93, out);

	        case 38:
	          out += this.input.slice(chunkStart, this.state.pos);
	          out += this.jsxReadEntity();
	          chunkStart = this.state.pos;
	          break;

	        case 62:
	        case 125:

	        default:
	          if (isNewLine$1(ch)) {
	            out += this.input.slice(chunkStart, this.state.pos);
	            out += this.jsxReadNewLine(true);
	            chunkStart = this.state.pos;
	          } else {
	            ++this.state.pos;
	          }

	      }
	    }
	  }

	  jsxReadNewLine(normalizeCRLF) {
	    const ch = this.input.charCodeAt(this.state.pos);
	    let out;
	    ++this.state.pos;

	    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
	      ++this.state.pos;
	      out = normalizeCRLF ? "\n" : "\r\n";
	    } else {
	      out = String.fromCharCode(ch);
	    }

	    ++this.state.curLine;
	    this.state.lineStart = this.state.pos;
	    return out;
	  }

	  jsxReadString(quote) {
	    let out = "";
	    let chunkStart = ++this.state.pos;

	    for (;;) {
	      if (this.state.pos >= this.length) {
	        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);
	      }

	      const ch = this.input.charCodeAt(this.state.pos);
	      if (ch === quote) break;

	      if (ch === 38) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.jsxReadEntity();
	        chunkStart = this.state.pos;
	      } else if (isNewLine$1(ch)) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.jsxReadNewLine(false);
	        chunkStart = this.state.pos;
	      } else {
	        ++this.state.pos;
	      }
	    }

	    out += this.input.slice(chunkStart, this.state.pos++);
	    return this.finishToken(4, out);
	  }

	  jsxReadEntity() {
	    let str = "";
	    let count = 0;
	    let entity;
	    let ch = this.input[this.state.pos];
	    const startPos = ++this.state.pos;

	    while (this.state.pos < this.length && count++ < 10) {
	      ch = this.input[this.state.pos++];

	      if (ch === ";") {
	        if (str[0] === "#") {
	          if (str[1] === "x") {
	            str = str.substr(2);

	            if (HEX_NUMBER$1.test(str)) {
	              entity = String.fromCodePoint(parseInt(str, 16));
	            }
	          } else {
	            str = str.substr(1);

	            if (DECIMAL_NUMBER$1.test(str)) {
	              entity = String.fromCodePoint(parseInt(str, 10));
	            }
	          }
	        } else {
	          entity = entities[str];
	        }

	        break;
	      }

	      str += ch;
	    }

	    if (!entity) {
	      this.state.pos = startPos;
	      return "&";
	    }

	    return entity;
	  }

	  jsxReadWord() {
	    let ch;
	    const start = this.state.pos;

	    do {
	      ch = this.input.charCodeAt(++this.state.pos);
	    } while (isIdentifierChar$2(ch) || ch === 45);

	    return this.finishToken(92, this.input.slice(start, this.state.pos));
	  }

	  jsxParseIdentifier() {
	    const node = this.startNode();

	    if (this.match(92)) {
	      node.name = this.state.value;
	    } else if (tokenIsKeyword(this.state.type)) {
	      node.name = tokenLabelName(this.state.type);
	    } else {
	      this.unexpected();
	    }

	    this.next();
	    return this.finishNode(node, "JSXIdentifier");
	  }

	  jsxParseNamespacedName() {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const name = this.jsxParseIdentifier();
	    if (!this.eat(22)) return name;
	    const node = this.startNodeAt(startPos, startLoc);
	    node.namespace = name;
	    node.name = this.jsxParseIdentifier();
	    return this.finishNode(node, "JSXNamespacedName");
	  }

	  jsxParseElementName() {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    let node = this.jsxParseNamespacedName();

	    if (node.type === "JSXNamespacedName") {
	      return node;
	    }

	    while (this.eat(24)) {
	      const newNode = this.startNodeAt(startPos, startLoc);
	      newNode.object = node;
	      newNode.property = this.jsxParseIdentifier();
	      node = this.finishNode(newNode, "JSXMemberExpression");
	    }

	    return node;
	  }

	  jsxParseAttributeValue() {
	    let node;

	    switch (this.state.type) {
	      case 13:
	        node = this.startNode();
	        this.next();
	        node = this.jsxParseExpressionContainer(node);

	        if (node.expression.type === "JSXEmptyExpression") {
	          this.raise(node.start, JsxErrors.AttributeIsEmpty);
	        }

	        return node;

	      case 94:
	      case 4:
	        return this.parseExprAtom();

	      default:
	        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);
	    }
	  }

	  jsxParseEmptyExpression() {
	    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);
	    return this.finishNodeAt(node, "JSXEmptyExpression", this.state.start, this.state.startLoc);
	  }

	  jsxParseSpreadChild(node) {
	    this.next();
	    node.expression = this.parseExpression();
	    this.expect(16);
	    return this.finishNode(node, "JSXSpreadChild");
	  }

	  jsxParseExpressionContainer(node) {
	    if (this.match(16)) {
	      node.expression = this.jsxParseEmptyExpression();
	    } else {
	      const expression = this.parseExpression();
	      node.expression = expression;
	    }

	    this.expect(16);
	    return this.finishNode(node, "JSXExpressionContainer");
	  }

	  jsxParseAttribute() {
	    const node = this.startNode();

	    if (this.eat(13)) {
	      this.expect(29);
	      node.argument = this.parseMaybeAssignAllowIn();
	      this.expect(16);
	      return this.finishNode(node, "JSXSpreadAttribute");
	    }

	    node.name = this.jsxParseNamespacedName();
	    node.value = this.eat(35) ? this.jsxParseAttributeValue() : null;
	    return this.finishNode(node, "JSXAttribute");
	  }

	  jsxParseOpeningElementAt(startPos, startLoc) {
	    const node = this.startNodeAt(startPos, startLoc);

	    if (this.match(95)) {
	      this.expect(95);
	      return this.finishNode(node, "JSXOpeningFragment");
	    }

	    node.name = this.jsxParseElementName();
	    return this.jsxParseOpeningElementAfterName(node);
	  }

	  jsxParseOpeningElementAfterName(node) {
	    const attributes = [];

	    while (!this.match(55) && !this.match(95)) {
	      attributes.push(this.jsxParseAttribute());
	    }

	    node.attributes = attributes;
	    node.selfClosing = this.eat(55);
	    this.expect(95);
	    return this.finishNode(node, "JSXOpeningElement");
	  }

	  jsxParseClosingElementAt(startPos, startLoc) {
	    const node = this.startNodeAt(startPos, startLoc);

	    if (this.match(95)) {
	      this.expect(95);
	      return this.finishNode(node, "JSXClosingFragment");
	    }

	    node.name = this.jsxParseElementName();
	    this.expect(95);
	    return this.finishNode(node, "JSXClosingElement");
	  }

	  jsxParseElementAt(startPos, startLoc) {
	    const node = this.startNodeAt(startPos, startLoc);
	    const children = [];
	    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
	    let closingElement = null;

	    if (!openingElement.selfClosing) {
	      contents: for (;;) {
	        switch (this.state.type) {
	          case 94:
	            startPos = this.state.start;
	            startLoc = this.state.startLoc;
	            this.next();

	            if (this.eat(55)) {
	              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
	              break contents;
	            }

	            children.push(this.jsxParseElementAt(startPos, startLoc));
	            break;

	          case 93:
	            children.push(this.parseExprAtom());
	            break;

	          case 13:
	            {
	              const node = this.startNode();
	              this.next();

	              if (this.match(29)) {
	                children.push(this.jsxParseSpreadChild(node));
	              } else {
	                children.push(this.jsxParseExpressionContainer(node));
	              }

	              break;
	            }

	          default:
	            throw this.unexpected();
	        }
	      }

	      if (isFragment(openingElement) && !isFragment(closingElement)) {
	        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);
	      } else if (!isFragment(openingElement) && isFragment(closingElement)) {
	        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName$1(openingElement.name));
	      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {
	        if (getQualifiedJSXName$1(closingElement.name) !== getQualifiedJSXName$1(openingElement.name)) {
	          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName$1(openingElement.name));
	        }
	      }
	    }

	    if (isFragment(openingElement)) {
	      node.openingFragment = openingElement;
	      node.closingFragment = closingElement;
	    } else {
	      node.openingElement = openingElement;
	      node.closingElement = closingElement;
	    }

	    node.children = children;

	    if (this.isRelational("<")) {
	      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);
	    }

	    return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
	  }

	  jsxParseElement() {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    this.next();
	    return this.jsxParseElementAt(startPos, startLoc);
	  }

	  parseExprAtom(refExpressionErrors) {
	    if (this.match(93)) {
	      return this.parseLiteral(this.state.value, "JSXText");
	    } else if (this.match(94)) {
	      return this.jsxParseElement();
	    } else if (this.isRelational("<") && this.input.charCodeAt(this.state.pos) !== 33) {
	      this.finishToken(94);
	      return this.jsxParseElement();
	    } else {
	      return super.parseExprAtom(refExpressionErrors);
	    }
	  }

	  createLookaheadState(state) {
	    const lookaheadState = super.createLookaheadState(state);
	    lookaheadState.inPropertyName = state.inPropertyName;
	    return lookaheadState;
	  }

	  getTokenFromCode(code) {
	    if (this.state.inPropertyName) return super.getTokenFromCode(code);
	    const context = this.curContext();

	    if (context === types$2.j_expr) {
	      return this.jsxReadToken();
	    }

	    if (context === types$2.j_oTag || context === types$2.j_cTag) {
	      if (isIdentifierStart$2(code)) {
	        return this.jsxReadWord();
	      }

	      if (code === 62) {
	        ++this.state.pos;
	        return this.finishToken(95);
	      }

	      if ((code === 34 || code === 39) && context === types$2.j_oTag) {
	        return this.jsxReadString(code);
	      }
	    }

	    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {
	      ++this.state.pos;
	      return this.finishToken(94);
	    }

	    return super.getTokenFromCode(code);
	  }

	  updateContext(prevType) {
	    super.updateContext(prevType);
	    const {
	      context,
	      type
	    } = this.state;

	    if (type === 55 && prevType === 94) {
	      context.splice(-2, 2, types$2.j_cTag);
	      this.state.exprAllowed = false;
	    } else if (type === 94) {
	      context.push(types$2.j_expr, types$2.j_oTag);
	    } else if (type === 95) {
	      const out = context.pop();

	      if (out === types$2.j_oTag && prevType === 55 || out === types$2.j_cTag) {
	        context.pop();
	        this.state.exprAllowed = context[context.length - 1] === types$2.j_expr;
	      } else {
	        this.state.exprAllowed = true;
	      }
	    } else if (tokenIsKeyword(type) && (prevType === 24 || prevType === 26)) {
	      this.state.exprAllowed = false;
	    } else {
	      this.state.exprAllowed = tokenComesBeforeExpression(type);
	    }
	  }

	});

	class TypeScriptScope extends Scope$2 {
	  constructor(...args) {
	    super(...args);
	    this.types = new Set();
	    this.enums = new Set();
	    this.constEnums = new Set();
	    this.classes = new Set();
	    this.exportOnlyBindings = new Set();
	  }

	}

	class TypeScriptScopeHandler extends ScopeHandler {
	  createScope(flags) {
	    return new TypeScriptScope(flags);
	  }

	  declareName(name, bindingType, pos) {
	    const scope = this.currentScope();

	    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {
	      this.maybeExportDefined(scope, name);
	      scope.exportOnlyBindings.add(name);
	      return;
	    }

	    super.declareName(...arguments);

	    if (bindingType & BIND_KIND_TYPE) {
	      if (!(bindingType & BIND_KIND_VALUE)) {
	        this.checkRedeclarationInScope(scope, name, bindingType, pos);
	        this.maybeExportDefined(scope, name);
	      }

	      scope.types.add(name);
	    }

	    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);
	    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);
	    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);
	  }

	  isRedeclaredInScope(scope, name, bindingType) {
	    if (scope.enums.has(name)) {
	      if (bindingType & BIND_FLAGS_TS_ENUM) {
	        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);
	        const wasConst = scope.constEnums.has(name);
	        return isConst !== wasConst;
	      }

	      return true;
	    }

	    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {
	      if (scope.lexical.has(name)) {
	        return !!(bindingType & BIND_KIND_VALUE);
	      } else {
	        return false;
	      }
	    }

	    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {
	      return true;
	    }

	    return super.isRedeclaredInScope(...arguments);
	  }

	  checkLocalExport(id) {
	    const topLevelScope = this.scopeStack[0];
	    const {
	      name
	    } = id;

	    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {
	      super.checkLocalExport(id);
	    }
	  }

	}

	function nonNull(x) {
	  if (x == null) {
	    throw new Error(`Unexpected ${x} value.`);
	  }

	  return x;
	}

	function assert$1(x) {
	  if (!x) {
	    throw new Error("Assert fail");
	  }
	}

	const TSErrors = makeErrorTemplates({
	  AbstractMethodHasImplementation: "Method '%0' cannot have an implementation because it is marked abstract.",
	  AbstractPropertyHasInitializer: "Property '%0' cannot have an initializer because it is marked abstract.",
	  AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
	  AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
	  ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
	  ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
	  ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
	  DeclareAccessor: "'declare' is not allowed in %0ters.",
	  DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
	  DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
	  DuplicateAccessibilityModifier: "Accessibility modifier already seen.",
	  DuplicateModifier: "Duplicate modifier: '%0'.",
	  EmptyHeritageClauseType: "'%0' list cannot be empty.",
	  EmptyTypeArguments: "Type argument list cannot be empty.",
	  EmptyTypeParameters: "Type parameter list cannot be empty.",
	  ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
	  ImportAliasHasImportType: "An import alias can not use 'import type'.",
	  IncompatibleModifiers: "'%0' modifier cannot be used with '%1' modifier.",
	  IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
	  IndexSignatureHasAccessibility: "Index signatures cannot have an accessibility modifier ('%0').",
	  IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
	  IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
	  IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
	  InvalidModifierOnTypeMember: "'%0' modifier cannot appear on a type member.",
	  InvalidModifiersOrder: "'%0' modifier must precede '%1' modifier.",
	  InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
	  MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
	  MixedLabeledAndUnlabeledElements: "Tuple members must all have names or all not have names.",
	  NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
	  NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
	  OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
	  OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
	  PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
	  PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
	  PrivateElementHasAccessibility: "Private elements cannot have an accessibility modifier ('%0').",
	  ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
	  SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
	  SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
	  SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
	  StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
	  TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
	  TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
	  UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
	  UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
	  UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
	  UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
	  UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
	  UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
	  UnsupportedSignatureParameterKind: "Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0."
	}, ErrorCodes.SyntaxError, "typescript");

	function keywordTypeFromName(value) {
	  switch (value) {
	    case "any":
	      return "TSAnyKeyword";

	    case "boolean":
	      return "TSBooleanKeyword";

	    case "bigint":
	      return "TSBigIntKeyword";

	    case "never":
	      return "TSNeverKeyword";

	    case "number":
	      return "TSNumberKeyword";

	    case "object":
	      return "TSObjectKeyword";

	    case "string":
	      return "TSStringKeyword";

	    case "symbol":
	      return "TSSymbolKeyword";

	    case "undefined":
	      return "TSUndefinedKeyword";

	    case "unknown":
	      return "TSUnknownKeyword";

	    default:
	      return undefined;
	  }
	}

	function tsIsAccessModifier(modifier) {
	  return modifier === "private" || modifier === "public" || modifier === "protected";
	}

	var typescript$1 = (superClass => class extends superClass {
	  getScopeHandler() {
	    return TypeScriptScopeHandler;
	  }

	  tsIsIdentifier() {
	    return this.match(5);
	  }

	  tsTokenCanFollowModifier() {
	    return (this.match(8) || this.match(13) || this.match(54) || this.match(29) || this.match(6) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
	  }

	  tsNextTokenCanFollowModifier() {
	    this.next();
	    return this.tsTokenCanFollowModifier();
	  }

	  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
	    if (!this.match(5)) {
	      return undefined;
	    }

	    const modifier = this.state.value;

	    if (allowedModifiers.indexOf(modifier) !== -1) {
	      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {
	        return undefined;
	      }

	      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {
	        return modifier;
	      }
	    }

	    return undefined;
	  }

	  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate, stopOnStartOfClassStaticBlock) {
	    const enforceOrder = (pos, modifier, before, after) => {
	      if (modifier === before && modified[after]) {
	        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);
	      }
	    };

	    const incompatible = (pos, modifier, mod1, mod2) => {
	      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {
	        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);
	      }
	    };

	    for (;;) {
	      const startPos = this.state.start;
	      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
	      if (!modifier) break;

	      if (tsIsAccessModifier(modifier)) {
	        if (modified.accessibility) {
	          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);
	        } else {
	          enforceOrder(startPos, modifier, modifier, "override");
	          enforceOrder(startPos, modifier, modifier, "static");
	          enforceOrder(startPos, modifier, modifier, "readonly");
	          modified.accessibility = modifier;
	        }
	      } else {
	        if (Object.hasOwnProperty.call(modified, modifier)) {
	          this.raise(startPos, TSErrors.DuplicateModifier, modifier);
	        } else {
	          enforceOrder(startPos, modifier, "static", "readonly");
	          enforceOrder(startPos, modifier, "static", "override");
	          enforceOrder(startPos, modifier, "override", "readonly");
	          enforceOrder(startPos, modifier, "abstract", "override");
	          incompatible(startPos, modifier, "declare", "override");
	          incompatible(startPos, modifier, "static", "abstract");
	        }

	        modified[modifier] = true;
	      }

	      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {
	        this.raise(startPos, errorTemplate, modifier);
	      }
	    }
	  }

	  tsIsListTerminator(kind) {
	    switch (kind) {
	      case "EnumMembers":
	      case "TypeMembers":
	        return this.match(16);

	      case "HeritageClauseElement":
	        return this.match(13);

	      case "TupleElementTypes":
	        return this.match(11);

	      case "TypeParametersOrArguments":
	        return this.isRelational(">");
	    }

	    throw new Error("Unreachable");
	  }

	  tsParseList(kind, parseElement) {
	    const result = [];

	    while (!this.tsIsListTerminator(kind)) {
	      result.push(parseElement());
	    }

	    return result;
	  }

	  tsParseDelimitedList(kind, parseElement) {
	    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));
	  }

	  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {
	    const result = [];

	    for (;;) {
	      if (this.tsIsListTerminator(kind)) {
	        break;
	      }

	      const element = parseElement();

	      if (element == null) {
	        return undefined;
	      }

	      result.push(element);

	      if (this.eat(20)) {
	        continue;
	      }

	      if (this.tsIsListTerminator(kind)) {
	        break;
	      }

	      if (expectSuccess) {
	        this.expect(20);
	      }

	      return undefined;
	    }

	    return result;
	  }

	  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {
	    if (!skipFirstToken) {
	      if (bracket) {
	        this.expect(8);
	      } else {
	        this.expectRelational("<");
	      }
	    }

	    const result = this.tsParseDelimitedList(kind, parseElement);

	    if (bracket) {
	      this.expect(11);
	    } else {
	      this.expectRelational(">");
	    }

	    return result;
	  }

	  tsParseImportType() {
	    const node = this.startNode();
	    this.expect(82);
	    this.expect(18);

	    if (!this.match(4)) {
	      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);
	    }

	    node.argument = this.parseExprAtom();
	    this.expect(19);

	    if (this.eat(24)) {
	      node.qualifier = this.tsParseEntityName(true);
	    }

	    if (this.isRelational("<")) {
	      node.typeParameters = this.tsParseTypeArguments();
	    }

	    return this.finishNode(node, "TSImportType");
	  }

	  tsParseEntityName(allowReservedWords) {
	    let entity = this.parseIdentifier();

	    while (this.eat(24)) {
	      const node = this.startNodeAtNode(entity);
	      node.left = entity;
	      node.right = this.parseIdentifier(allowReservedWords);
	      entity = this.finishNode(node, "TSQualifiedName");
	    }

	    return entity;
	  }

	  tsParseTypeReference() {
	    const node = this.startNode();
	    node.typeName = this.tsParseEntityName(false);

	    if (!this.hasPrecedingLineBreak() && this.isRelational("<")) {
	      node.typeParameters = this.tsParseTypeArguments();
	    }

	    return this.finishNode(node, "TSTypeReference");
	  }

	  tsParseThisTypePredicate(lhs) {
	    this.next();
	    const node = this.startNodeAtNode(lhs);
	    node.parameterName = lhs;
	    node.typeAnnotation = this.tsParseTypeAnnotation(false);
	    node.asserts = false;
	    return this.finishNode(node, "TSTypePredicate");
	  }

	  tsParseThisTypeNode() {
	    const node = this.startNode();
	    this.next();
	    return this.finishNode(node, "TSThisType");
	  }

	  tsParseTypeQuery() {
	    const node = this.startNode();
	    this.expect(86);

	    if (this.match(82)) {
	      node.exprName = this.tsParseImportType();
	    } else {
	      node.exprName = this.tsParseEntityName(true);
	    }

	    return this.finishNode(node, "TSTypeQuery");
	  }

	  tsParseTypeParameter() {
	    const node = this.startNode();
	    node.name = this.tsParseTypeParameterName();
	    node.constraint = this.tsEatThenParseType(80);
	    node.default = this.tsEatThenParseType(35);
	    return this.finishNode(node, "TSTypeParameter");
	  }

	  tsTryParseTypeParameters() {
	    if (this.isRelational("<")) {
	      return this.tsParseTypeParameters();
	    }
	  }

	  tsParseTypeParameters() {
	    const node = this.startNode();

	    if (this.isRelational("<") || this.match(94)) {
	      this.next();
	    } else {
	      this.unexpected();
	    }

	    node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this), false, true);

	    if (node.params.length === 0) {
	      this.raise(node.start, TSErrors.EmptyTypeParameters);
	    }

	    return this.finishNode(node, "TSTypeParameterDeclaration");
	  }

	  tsTryNextParseConstantContext() {
	    if (this.lookahead().type === 74) {
	      this.next();
	      return this.tsParseTypeReference();
	    }

	    return null;
	  }

	  tsFillSignature(returnToken, signature) {
	    const returnTokenRequired = returnToken === 27;
	    signature.typeParameters = this.tsTryParseTypeParameters();
	    this.expect(18);
	    signature.parameters = this.tsParseBindingListForSignature();

	    if (returnTokenRequired) {
	      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
	    } else if (this.match(returnToken)) {
	      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
	    }
	  }

	  tsParseBindingListForSignature() {
	    return this.parseBindingList(19, 41).map(pattern => {
	      if (pattern.type !== "Identifier" && pattern.type !== "RestElement" && pattern.type !== "ObjectPattern" && pattern.type !== "ArrayPattern") {
	        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);
	      }

	      return pattern;
	    });
	  }

	  tsParseTypeMemberSemicolon() {
	    if (!this.eat(20) && !this.isLineTerminator()) {
	      this.expect(21);
	    }
	  }

	  tsParseSignatureMember(kind, node) {
	    this.tsFillSignature(22, node);
	    this.tsParseTypeMemberSemicolon();
	    return this.finishNode(node, kind);
	  }

	  tsIsUnambiguouslyIndexSignature() {
	    this.next();
	    return this.eat(5) && this.match(22);
	  }

	  tsTryParseIndexSignature(node) {
	    if (!(this.match(8) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {
	      return undefined;
	    }

	    this.expect(8);
	    const id = this.parseIdentifier();
	    id.typeAnnotation = this.tsParseTypeAnnotation();
	    this.resetEndLocation(id);
	    this.expect(11);
	    node.parameters = [id];
	    const type = this.tsTryParseTypeAnnotation();
	    if (type) node.typeAnnotation = type;
	    this.tsParseTypeMemberSemicolon();
	    return this.finishNode(node, "TSIndexSignature");
	  }

	  tsParsePropertyOrMethodSignature(node, readonly) {
	    if (this.eat(25)) node.optional = true;
	    const nodeAny = node;

	    if (this.match(18) || this.isRelational("<")) {
	      if (readonly) {
	        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);
	      }

	      const method = nodeAny;

	      if (method.kind && this.isRelational("<")) {
	        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);
	      }

	      this.tsFillSignature(22, method);
	      this.tsParseTypeMemberSemicolon();

	      if (method.kind === "get") {
	        if (method.parameters.length > 0) {
	          this.raise(this.state.pos, ErrorMessages.BadGetterArity);

	          if (this.isThisParam(method.parameters[0])) {
	            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);
	          }
	        }
	      } else if (method.kind === "set") {
	        if (method.parameters.length !== 1) {
	          this.raise(this.state.pos, ErrorMessages.BadSetterArity);
	        } else {
	          const firstParameter = method.parameters[0];

	          if (this.isThisParam(firstParameter)) {
	            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);
	          }

	          if (firstParameter.type === "Identifier" && firstParameter.optional) {
	            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);
	          }

	          if (firstParameter.type === "RestElement") {
	            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);
	          }
	        }

	        if (method.typeAnnotation) {
	          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);
	        }
	      } else {
	        method.kind = "method";
	      }

	      return this.finishNode(method, "TSMethodSignature");
	    } else {
	      const property = nodeAny;
	      if (readonly) property.readonly = true;
	      const type = this.tsTryParseTypeAnnotation();
	      if (type) property.typeAnnotation = type;
	      this.tsParseTypeMemberSemicolon();
	      return this.finishNode(property, "TSPropertySignature");
	    }
	  }

	  tsParseTypeMember() {
	    const node = this.startNode();

	    if (this.match(18) || this.isRelational("<")) {
	      return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
	    }

	    if (this.match(76)) {
	      const id = this.startNode();
	      this.next();

	      if (this.match(18) || this.isRelational("<")) {
	        return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node);
	      } else {
	        node.key = this.createIdentifier(id, "new");
	        return this.tsParsePropertyOrMethodSignature(node, false);
	      }
	    }

	    this.tsParseModifiers(node, ["readonly"], ["declare", "abstract", "private", "protected", "public", "static", "override"], TSErrors.InvalidModifierOnTypeMember);
	    const idx = this.tsTryParseIndexSignature(node);

	    if (idx) {
	      return idx;
	    }

	    this.parsePropertyName(node, false);

	    if (!node.computed && node.key.type === "Identifier" && (node.key.name === "get" || node.key.name === "set") && this.tsTokenCanFollowModifier()) {
	      node.kind = node.key.name;
	      this.parsePropertyName(node, false);
	    }

	    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);
	  }

	  tsParseTypeLiteral() {
	    const node = this.startNode();
	    node.members = this.tsParseObjectTypeMembers();
	    return this.finishNode(node, "TSTypeLiteral");
	  }

	  tsParseObjectTypeMembers() {
	    this.expect(13);
	    const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
	    this.expect(16);
	    return members;
	  }

	  tsIsStartOfMappedType() {
	    this.next();

	    if (this.eat(52)) {
	      return this.isContextual("readonly");
	    }

	    if (this.isContextual("readonly")) {
	      this.next();
	    }

	    if (!this.match(8)) {
	      return false;
	    }

	    this.next();

	    if (!this.tsIsIdentifier()) {
	      return false;
	    }

	    this.next();
	    return this.match(57);
	  }

	  tsParseMappedTypeParameter() {
	    const node = this.startNode();
	    node.name = this.tsParseTypeParameterName();
	    node.constraint = this.tsExpectThenParseType(57);
	    return this.finishNode(node, "TSTypeParameter");
	  }

	  tsParseMappedType() {
	    const node = this.startNode();
	    this.expect(13);

	    if (this.match(52)) {
	      node.readonly = this.state.value;
	      this.next();
	      this.expectContextual("readonly");
	    } else if (this.eatContextual("readonly")) {
	      node.readonly = true;
	    }

	    this.expect(8);
	    node.typeParameter = this.tsParseMappedTypeParameter();
	    node.nameType = this.eatContextual("as") ? this.tsParseType() : null;
	    this.expect(11);

	    if (this.match(52)) {
	      node.optional = this.state.value;
	      this.next();
	      this.expect(25);
	    } else if (this.eat(25)) {
	      node.optional = true;
	    }

	    node.typeAnnotation = this.tsTryParseType();
	    this.semicolon();
	    this.expect(16);
	    return this.finishNode(node, "TSMappedType");
	  }

	  tsParseTupleType() {
	    const node = this.startNode();
	    node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
	    let seenOptionalElement = false;
	    let labeledElements = null;
	    node.elementTypes.forEach(elementNode => {
	      var _labeledElements;

	      let {
	        type
	      } = elementNode;

	      if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) {
	        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);
	      }

	      seenOptionalElement = seenOptionalElement || type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType";

	      if (type === "TSRestType") {
	        elementNode = elementNode.typeAnnotation;
	        type = elementNode.type;
	      }

	      const isLabeled = type === "TSNamedTupleMember";
	      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;

	      if (labeledElements !== isLabeled) {
	        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);
	      }
	    });
	    return this.finishNode(node, "TSTupleType");
	  }

	  tsParseTupleElementType() {
	    const {
	      start: startPos,
	      startLoc
	    } = this.state;
	    const rest = this.eat(29);
	    let type = this.tsParseType();
	    const optional = this.eat(25);
	    const labeled = this.eat(22);

	    if (labeled) {
	      const labeledNode = this.startNodeAtNode(type);
	      labeledNode.optional = optional;

	      if (type.type === "TSTypeReference" && !type.typeParameters && type.typeName.type === "Identifier") {
	        labeledNode.label = type.typeName;
	      } else {
	        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);
	        labeledNode.label = type;
	      }

	      labeledNode.elementType = this.tsParseType();
	      type = this.finishNode(labeledNode, "TSNamedTupleMember");
	    } else if (optional) {
	      const optionalTypeNode = this.startNodeAtNode(type);
	      optionalTypeNode.typeAnnotation = type;
	      type = this.finishNode(optionalTypeNode, "TSOptionalType");
	    }

	    if (rest) {
	      const restNode = this.startNodeAt(startPos, startLoc);
	      restNode.typeAnnotation = type;
	      type = this.finishNode(restNode, "TSRestType");
	    }

	    return type;
	  }

	  tsParseParenthesizedType() {
	    const node = this.startNode();
	    this.expect(18);
	    node.typeAnnotation = this.tsParseType();
	    this.expect(19);
	    return this.finishNode(node, "TSParenthesizedType");
	  }

	  tsParseFunctionOrConstructorType(type, abstract) {
	    const node = this.startNode();

	    if (type === "TSConstructorType") {
	      node.abstract = !!abstract;
	      if (abstract) this.next();
	      this.next();
	    }

	    this.tsFillSignature(27, node);
	    return this.finishNode(node, type);
	  }

	  tsParseLiteralTypeNode() {
	    const node = this.startNode();

	    node.literal = (() => {
	      switch (this.state.type) {
	        case 0:
	        case 1:
	        case 4:
	        case 84:
	        case 85:
	          return this.parseExprAtom();

	        default:
	          throw this.unexpected();
	      }
	    })();

	    return this.finishNode(node, "TSLiteralType");
	  }

	  tsParseTemplateLiteralType() {
	    const node = this.startNode();
	    node.literal = this.parseTemplate(false);
	    return this.finishNode(node, "TSLiteralType");
	  }

	  parseTemplateSubstitution() {
	    if (this.state.inType) return this.tsParseType();
	    return super.parseTemplateSubstitution();
	  }

	  tsParseThisTypeOrThisTypePredicate() {
	    const thisKeyword = this.tsParseThisTypeNode();

	    if (this.isContextual("is") && !this.hasPrecedingLineBreak()) {
	      return this.tsParseThisTypePredicate(thisKeyword);
	    } else {
	      return thisKeyword;
	    }
	  }

	  tsParseNonArrayType() {
	    switch (this.state.type) {
	      case 5:
	      case 87:
	      case 83:
	        {
	          const type = this.match(87) ? "TSVoidKeyword" : this.match(83) ? "TSNullKeyword" : keywordTypeFromName(this.state.value);

	          if (type !== undefined && this.lookaheadCharCode() !== 46) {
	            const node = this.startNode();
	            this.next();
	            return this.finishNode(node, type);
	          }

	          return this.tsParseTypeReference();
	        }

	      case 4:
	      case 0:
	      case 1:
	      case 84:
	      case 85:
	        return this.tsParseLiteralTypeNode();

	      case 52:
	        if (this.state.value === "-") {
	          const node = this.startNode();
	          const nextToken = this.lookahead();

	          if (nextToken.type !== 0 && nextToken.type !== 1) {
	            throw this.unexpected();
	          }

	          node.literal = this.parseMaybeUnary();
	          return this.finishNode(node, "TSLiteralType");
	        }

	        break;

	      case 77:
	        return this.tsParseThisTypeOrThisTypePredicate();

	      case 86:
	        return this.tsParseTypeQuery();

	      case 82:
	        return this.tsParseImportType();

	      case 13:
	        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();

	      case 8:
	        return this.tsParseTupleType();

	      case 18:
	        return this.tsParseParenthesizedType();

	      case 30:
	        return this.tsParseTemplateLiteralType();
	    }

	    throw this.unexpected();
	  }

	  tsParseArrayTypeOrHigher() {
	    let type = this.tsParseNonArrayType();

	    while (!this.hasPrecedingLineBreak() && this.eat(8)) {
	      if (this.match(11)) {
	        const node = this.startNodeAtNode(type);
	        node.elementType = type;
	        this.expect(11);
	        type = this.finishNode(node, "TSArrayType");
	      } else {
	        const node = this.startNodeAtNode(type);
	        node.objectType = type;
	        node.indexType = this.tsParseType();
	        this.expect(11);
	        type = this.finishNode(node, "TSIndexedAccessType");
	      }
	    }

	    return type;
	  }

	  tsParseTypeOperator(operator) {
	    const node = this.startNode();
	    this.expectContextual(operator);
	    node.operator = operator;
	    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();

	    if (operator === "readonly") {
	      this.tsCheckTypeAnnotationForReadOnly(node);
	    }

	    return this.finishNode(node, "TSTypeOperator");
	  }

	  tsCheckTypeAnnotationForReadOnly(node) {
	    switch (node.typeAnnotation.type) {
	      case "TSTupleType":
	      case "TSArrayType":
	        return;

	      default:
	        this.raise(node.start, TSErrors.UnexpectedReadonly);
	    }
	  }

	  tsParseInferType() {
	    const node = this.startNode();
	    this.expectContextual("infer");
	    const typeParameter = this.startNode();
	    typeParameter.name = this.tsParseTypeParameterName();
	    node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
	    return this.finishNode(node, "TSInferType");
	  }

	  tsParseTypeOperatorOrHigher() {
	    const operator = ["keyof", "unique", "readonly"].find(kw => this.isContextual(kw));
	    return operator ? this.tsParseTypeOperator(operator) : this.isContextual("infer") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();
	  }

	  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
	    const node = this.startNode();
	    const hasLeadingOperator = this.eat(operator);
	    const types = [];

	    do {
	      types.push(parseConstituentType());
	    } while (this.eat(operator));

	    if (types.length === 1 && !hasLeadingOperator) {
	      return types[0];
	    }

	    node.types = types;
	    return this.finishNode(node, kind);
	  }

	  tsParseIntersectionTypeOrHigher() {
	    return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 48);
	  }

	  tsParseUnionTypeOrHigher() {
	    return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 46);
	  }

	  tsIsStartOfFunctionType() {
	    if (this.isRelational("<")) {
	      return true;
	    }

	    return this.match(18) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
	  }

	  tsSkipParameterStart() {
	    if (this.match(5) || this.match(77)) {
	      this.next();
	      return true;
	    }

	    if (this.match(13)) {
	      let braceStackCounter = 1;
	      this.next();

	      while (braceStackCounter > 0) {
	        if (this.match(13)) {
	          ++braceStackCounter;
	        } else if (this.match(16)) {
	          --braceStackCounter;
	        }

	        this.next();
	      }

	      return true;
	    }

	    if (this.match(8)) {
	      let braceStackCounter = 1;
	      this.next();

	      while (braceStackCounter > 0) {
	        if (this.match(8)) {
	          ++braceStackCounter;
	        } else if (this.match(11)) {
	          --braceStackCounter;
	        }

	        this.next();
	      }

	      return true;
	    }

	    return false;
	  }

	  tsIsUnambiguouslyStartOfFunctionType() {
	    this.next();

	    if (this.match(19) || this.match(29)) {
	      return true;
	    }

	    if (this.tsSkipParameterStart()) {
	      if (this.match(22) || this.match(20) || this.match(25) || this.match(35)) {
	        return true;
	      }

	      if (this.match(19)) {
	        this.next();

	        if (this.match(27)) {
	          return true;
	        }
	      }
	    }

	    return false;
	  }

	  tsParseTypeOrTypePredicateAnnotation(returnToken) {
	    return this.tsInType(() => {
	      const t = this.startNode();
	      this.expect(returnToken);
	      const node = this.startNode();
	      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));

	      if (asserts && this.match(77)) {
	        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();

	        if (thisTypePredicate.type === "TSThisType") {
	          node.parameterName = thisTypePredicate;
	          node.asserts = true;
	          node.typeAnnotation = null;
	          thisTypePredicate = this.finishNode(node, "TSTypePredicate");
	        } else {
	          this.resetStartLocationFromNode(thisTypePredicate, node);
	          thisTypePredicate.asserts = true;
	        }

	        t.typeAnnotation = thisTypePredicate;
	        return this.finishNode(t, "TSTypeAnnotation");
	      }

	      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));

	      if (!typePredicateVariable) {
	        if (!asserts) {
	          return this.tsParseTypeAnnotation(false, t);
	        }

	        node.parameterName = this.parseIdentifier();
	        node.asserts = asserts;
	        node.typeAnnotation = null;
	        t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
	        return this.finishNode(t, "TSTypeAnnotation");
	      }

	      const type = this.tsParseTypeAnnotation(false);
	      node.parameterName = typePredicateVariable;
	      node.typeAnnotation = type;
	      node.asserts = asserts;
	      t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
	      return this.finishNode(t, "TSTypeAnnotation");
	    });
	  }

	  tsTryParseTypeOrTypePredicateAnnotation() {
	    return this.match(22) ? this.tsParseTypeOrTypePredicateAnnotation(22) : undefined;
	  }

	  tsTryParseTypeAnnotation() {
	    return this.match(22) ? this.tsParseTypeAnnotation() : undefined;
	  }

	  tsTryParseType() {
	    return this.tsEatThenParseType(22);
	  }

	  tsParseTypePredicatePrefix() {
	    const id = this.parseIdentifier();

	    if (this.isContextual("is") && !this.hasPrecedingLineBreak()) {
	      this.next();
	      return id;
	    }
	  }

	  tsParseTypePredicateAsserts() {
	    if (!this.match(5) || this.state.value !== "asserts") {
	      return false;
	    }

	    const containsEsc = this.state.containsEsc;
	    this.next();

	    if (!this.match(5) && !this.match(77)) {
	      return false;
	    }

	    if (containsEsc) {
	      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, "asserts");
	    }

	    return true;
	  }

	  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
	    this.tsInType(() => {
	      if (eatColon) this.expect(22);
	      t.typeAnnotation = this.tsParseType();
	    });
	    return this.finishNode(t, "TSTypeAnnotation");
	  }

	  tsParseType() {
	    assert$1(this.state.inType);
	    const type = this.tsParseNonConditionalType();

	    if (this.hasPrecedingLineBreak() || !this.eat(80)) {
	      return type;
	    }

	    const node = this.startNodeAtNode(type);
	    node.checkType = type;
	    node.extendsType = this.tsParseNonConditionalType();
	    this.expect(25);
	    node.trueType = this.tsParseType();
	    this.expect(22);
	    node.falseType = this.tsParseType();
	    return this.finishNode(node, "TSConditionalType");
	  }

	  isAbstractConstructorSignature() {
	    return this.isContextual("abstract") && this.lookahead().type === 76;
	  }

	  tsParseNonConditionalType() {
	    if (this.tsIsStartOfFunctionType()) {
	      return this.tsParseFunctionOrConstructorType("TSFunctionType");
	    }

	    if (this.match(76)) {
	      return this.tsParseFunctionOrConstructorType("TSConstructorType");
	    } else if (this.isAbstractConstructorSignature()) {
	      return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
	    }

	    return this.tsParseUnionTypeOrHigher();
	  }

	  tsParseTypeAssertion() {
	    const node = this.startNode();

	    const _const = this.tsTryNextParseConstantContext();

	    node.typeAnnotation = _const || this.tsNextThenParseType();
	    this.expectRelational(">");
	    node.expression = this.parseMaybeUnary();
	    return this.finishNode(node, "TSTypeAssertion");
	  }

	  tsParseHeritageClause(descriptor) {
	    const originalStart = this.state.start;
	    const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", this.tsParseExpressionWithTypeArguments.bind(this));

	    if (!delimitedList.length) {
	      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);
	    }

	    return delimitedList;
	  }

	  tsParseExpressionWithTypeArguments() {
	    const node = this.startNode();
	    node.expression = this.tsParseEntityName(false);

	    if (this.isRelational("<")) {
	      node.typeParameters = this.tsParseTypeArguments();
	    }

	    return this.finishNode(node, "TSExpressionWithTypeArguments");
	  }

	  tsParseInterfaceDeclaration(node) {
	    if (this.match(5)) {
	      node.id = this.parseIdentifier();
	      this.checkLVal(node.id, "typescript interface declaration", BIND_TS_INTERFACE);
	    } else {
	      node.id = null;
	      this.raise(this.state.start, TSErrors.MissingInterfaceName);
	    }

	    node.typeParameters = this.tsTryParseTypeParameters();

	    if (this.eat(80)) {
	      node.extends = this.tsParseHeritageClause("extends");
	    }

	    const body = this.startNode();
	    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
	    node.body = this.finishNode(body, "TSInterfaceBody");
	    return this.finishNode(node, "TSInterfaceDeclaration");
	  }

	  tsParseTypeAliasDeclaration(node) {
	    node.id = this.parseIdentifier();
	    this.checkLVal(node.id, "typescript type alias", BIND_TS_TYPE);
	    node.typeParameters = this.tsTryParseTypeParameters();
	    node.typeAnnotation = this.tsInType(() => {
	      this.expect(35);

	      if (this.isContextual("intrinsic") && this.lookahead().type !== 24) {
	        const node = this.startNode();
	        this.next();
	        return this.finishNode(node, "TSIntrinsicKeyword");
	      }

	      return this.tsParseType();
	    });
	    this.semicolon();
	    return this.finishNode(node, "TSTypeAliasDeclaration");
	  }

	  tsInNoContext(cb) {
	    const oldContext = this.state.context;
	    this.state.context = [oldContext[0]];

	    try {
	      return cb();
	    } finally {
	      this.state.context = oldContext;
	    }
	  }

	  tsInType(cb) {
	    const oldInType = this.state.inType;
	    this.state.inType = true;

	    try {
	      return cb();
	    } finally {
	      this.state.inType = oldInType;
	    }
	  }

	  tsEatThenParseType(token) {
	    return !this.match(token) ? undefined : this.tsNextThenParseType();
	  }

	  tsExpectThenParseType(token) {
	    return this.tsDoThenParseType(() => this.expect(token));
	  }

	  tsNextThenParseType() {
	    return this.tsDoThenParseType(() => this.next());
	  }

	  tsDoThenParseType(cb) {
	    return this.tsInType(() => {
	      cb();
	      return this.tsParseType();
	    });
	  }

	  tsParseEnumMember() {
	    const node = this.startNode();
	    node.id = this.match(4) ? this.parseExprAtom() : this.parseIdentifier(true);

	    if (this.eat(35)) {
	      node.initializer = this.parseMaybeAssignAllowIn();
	    }

	    return this.finishNode(node, "TSEnumMember");
	  }

	  tsParseEnumDeclaration(node, isConst) {
	    if (isConst) node.const = true;
	    node.id = this.parseIdentifier();
	    this.checkLVal(node.id, "typescript enum declaration", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);
	    this.expect(13);
	    node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
	    this.expect(16);
	    return this.finishNode(node, "TSEnumDeclaration");
	  }

	  tsParseModuleBlock() {
	    const node = this.startNode();
	    this.scope.enter(SCOPE_OTHER);
	    this.expect(13);
	    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 16);
	    this.scope.exit();
	    return this.finishNode(node, "TSModuleBlock");
	  }

	  tsParseModuleOrNamespaceDeclaration(node, nested = false) {
	    node.id = this.parseIdentifier();

	    if (!nested) {
	      this.checkLVal(node.id, "module or namespace declaration", BIND_TS_NAMESPACE);
	    }

	    if (this.eat(24)) {
	      const inner = this.startNode();
	      this.tsParseModuleOrNamespaceDeclaration(inner, true);
	      node.body = inner;
	    } else {
	      this.scope.enter(SCOPE_TS_MODULE);
	      this.prodParam.enter(PARAM);
	      node.body = this.tsParseModuleBlock();
	      this.prodParam.exit();
	      this.scope.exit();
	    }

	    return this.finishNode(node, "TSModuleDeclaration");
	  }

	  tsParseAmbientExternalModuleDeclaration(node) {
	    if (this.isContextual("global")) {
	      node.global = true;
	      node.id = this.parseIdentifier();
	    } else if (this.match(4)) {
	      node.id = this.parseExprAtom();
	    } else {
	      this.unexpected();
	    }

	    if (this.match(13)) {
	      this.scope.enter(SCOPE_TS_MODULE);
	      this.prodParam.enter(PARAM);
	      node.body = this.tsParseModuleBlock();
	      this.prodParam.exit();
	      this.scope.exit();
	    } else {
	      this.semicolon();
	    }

	    return this.finishNode(node, "TSModuleDeclaration");
	  }

	  tsParseImportEqualsDeclaration(node, isExport) {
	    node.isExport = isExport || false;
	    node.id = this.parseIdentifier();
	    this.checkLVal(node.id, "import equals declaration", BIND_LEXICAL);
	    this.expect(35);
	    const moduleReference = this.tsParseModuleReference();

	    if (node.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") {
	      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);
	    }

	    node.moduleReference = moduleReference;
	    this.semicolon();
	    return this.finishNode(node, "TSImportEqualsDeclaration");
	  }

	  tsIsExternalModuleReference() {
	    return this.isContextual("require") && this.lookaheadCharCode() === 40;
	  }

	  tsParseModuleReference() {
	    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
	  }

	  tsParseExternalModuleReference() {
	    const node = this.startNode();
	    this.expectContextual("require");
	    this.expect(18);

	    if (!this.match(4)) {
	      throw this.unexpected();
	    }

	    node.expression = this.parseExprAtom();
	    this.expect(19);
	    return this.finishNode(node, "TSExternalModuleReference");
	  }

	  tsLookAhead(f) {
	    const state = this.state.clone();
	    const res = f();
	    this.state = state;
	    return res;
	  }

	  tsTryParseAndCatch(f) {
	    const result = this.tryParse(abort => f() || abort());
	    if (result.aborted || !result.node) return undefined;
	    if (result.error) this.state = result.failState;
	    return result.node;
	  }

	  tsTryParse(f) {
	    const state = this.state.clone();
	    const result = f();

	    if (result !== undefined && result !== false) {
	      return result;
	    } else {
	      this.state = state;
	      return undefined;
	    }
	  }

	  tsTryParseDeclare(nany) {
	    if (this.isLineTerminator()) {
	      return;
	    }

	    let starttype = this.state.type;
	    let kind;

	    if (this.isContextual("let")) {
	      starttype = 73;
	      kind = "let";
	    }

	    return this.tsInAmbientContext(() => {
	      switch (starttype) {
	        case 67:
	          nany.declare = true;
	          return this.parseFunctionStatement(nany, false, true);

	        case 79:
	          nany.declare = true;
	          return this.parseClass(nany, true, false);

	        case 74:
	          if (this.match(74) && this.isLookaheadContextual("enum")) {
	            this.expect(74);
	            this.expectContextual("enum");
	            return this.tsParseEnumDeclaration(nany, true);
	          }

	        case 73:
	          kind = kind || this.state.value;
	          return this.parseVarStatement(nany, kind);

	        case 5:
	          {
	            const value = this.state.value;

	            if (value === "global") {
	              return this.tsParseAmbientExternalModuleDeclaration(nany);
	            } else {
	              return this.tsParseDeclaration(nany, value, true);
	            }
	          }
	      }
	    });
	  }

	  tsTryParseExportDeclaration() {
	    return this.tsParseDeclaration(this.startNode(), this.state.value, true);
	  }

	  tsParseExpressionStatement(node, expr) {
	    switch (expr.name) {
	      case "declare":
	        {
	          const declaration = this.tsTryParseDeclare(node);

	          if (declaration) {
	            declaration.declare = true;
	            return declaration;
	          }

	          break;
	        }

	      case "global":
	        if (this.match(13)) {
	          this.scope.enter(SCOPE_TS_MODULE);
	          this.prodParam.enter(PARAM);
	          const mod = node;
	          mod.global = true;
	          mod.id = expr;
	          mod.body = this.tsParseModuleBlock();
	          this.scope.exit();
	          this.prodParam.exit();
	          return this.finishNode(mod, "TSModuleDeclaration");
	        }

	        break;

	      default:
	        return this.tsParseDeclaration(node, expr.name, false);
	    }
	  }

	  tsParseDeclaration(node, value, next) {
	    switch (value) {
	      case "abstract":
	        if (this.tsCheckLineTerminator(next) && (this.match(79) || this.match(5))) {
	          return this.tsParseAbstractDeclaration(node);
	        }

	        break;

	      case "enum":
	        if (next || this.match(5)) {
	          if (next) this.next();
	          return this.tsParseEnumDeclaration(node, false);
	        }

	        break;

	      case "interface":
	        if (this.tsCheckLineTerminator(next) && this.match(5)) {
	          return this.tsParseInterfaceDeclaration(node);
	        }

	        break;

	      case "module":
	        if (this.tsCheckLineTerminator(next)) {
	          if (this.match(4)) {
	            return this.tsParseAmbientExternalModuleDeclaration(node);
	          } else if (this.match(5)) {
	            return this.tsParseModuleOrNamespaceDeclaration(node);
	          }
	        }

	        break;

	      case "namespace":
	        if (this.tsCheckLineTerminator(next) && this.match(5)) {
	          return this.tsParseModuleOrNamespaceDeclaration(node);
	        }

	        break;

	      case "type":
	        if (this.tsCheckLineTerminator(next) && this.match(5)) {
	          return this.tsParseTypeAliasDeclaration(node);
	        }

	        break;
	    }
	  }

	  tsCheckLineTerminator(next) {
	    if (next) {
	      if (this.hasFollowingLineBreak()) return false;
	      this.next();
	      return true;
	    }

	    return !this.isLineTerminator();
	  }

	  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {
	    if (!this.isRelational("<")) {
	      return undefined;
	    }

	    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
	    this.state.maybeInArrowParameters = true;
	    const res = this.tsTryParseAndCatch(() => {
	      const node = this.startNodeAt(startPos, startLoc);
	      node.typeParameters = this.tsParseTypeParameters();
	      super.parseFunctionParams(node);
	      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
	      this.expect(27);
	      return node;
	    });
	    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;

	    if (!res) {
	      return undefined;
	    }

	    return this.parseArrowExpression(res, null, true);
	  }

	  tsParseTypeArguments() {
	    const node = this.startNode();
	    node.params = this.tsInType(() => this.tsInNoContext(() => {
	      this.expectRelational("<");
	      return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
	    }));

	    if (node.params.length === 0) {
	      this.raise(node.start, TSErrors.EmptyTypeArguments);
	    }

	    this.expectRelational(">");
	    return this.finishNode(node, "TSTypeParameterInstantiation");
	  }

	  tsIsDeclarationStart() {
	    if (this.match(5)) {
	      switch (this.state.value) {
	        case "abstract":
	        case "declare":
	        case "enum":
	        case "interface":
	        case "module":
	        case "namespace":
	        case "type":
	          return true;
	      }
	    }

	    return false;
	  }

	  isExportDefaultSpecifier() {
	    if (this.tsIsDeclarationStart()) return false;
	    return super.isExportDefaultSpecifier();
	  }

	  parseAssignableListItem(allowModifiers, decorators) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    let accessibility;
	    let readonly = false;
	    let override = false;

	    if (allowModifiers !== undefined) {
	      const modified = {};
	      this.tsParseModifiers(modified, ["public", "private", "protected", "override", "readonly"]);
	      accessibility = modified.accessibility;
	      override = modified.override;
	      readonly = modified.readonly;

	      if (allowModifiers === false && (accessibility || readonly || override)) {
	        this.raise(startPos, TSErrors.UnexpectedParameterModifier);
	      }
	    }

	    const left = this.parseMaybeDefault();
	    this.parseAssignableListItemTypes(left);
	    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);

	    if (accessibility || readonly || override) {
	      const pp = this.startNodeAt(startPos, startLoc);

	      if (decorators.length) {
	        pp.decorators = decorators;
	      }

	      if (accessibility) pp.accessibility = accessibility;
	      if (readonly) pp.readonly = readonly;
	      if (override) pp.override = override;

	      if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") {
	        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);
	      }

	      pp.parameter = elt;
	      return this.finishNode(pp, "TSParameterProperty");
	    }

	    if (decorators.length) {
	      left.decorators = decorators;
	    }

	    return elt;
	  }

	  parseFunctionBodyAndFinish(node, type, isMethod = false) {
	    if (this.match(22)) {
	      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(22);
	    }

	    const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" ? "TSDeclareMethod" : undefined;

	    if (bodilessType && !this.match(13) && this.isLineTerminator()) {
	      this.finishNode(node, bodilessType);
	      return;
	    }

	    if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
	      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);

	      if (node.declare) {
	        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);
	        return;
	      }
	    }

	    super.parseFunctionBodyAndFinish(node, type, isMethod);
	  }

	  registerFunctionStatementId(node) {
	    if (!node.body && node.id) {
	      this.checkLVal(node.id, "function name", BIND_TS_AMBIENT);
	    } else {
	      super.registerFunctionStatementId(...arguments);
	    }
	  }

	  tsCheckForInvalidTypeCasts(items) {
	    items.forEach(node => {
	      if ((node == null ? void 0 : node.type) === "TSTypeCastExpression") {
	        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);
	      }
	    });
	  }

	  toReferencedList(exprList, isInParens) {
	    this.tsCheckForInvalidTypeCasts(exprList);
	    return exprList;
	  }

	  parseArrayLike(...args) {
	    const node = super.parseArrayLike(...args);

	    if (node.type === "ArrayExpression") {
	      this.tsCheckForInvalidTypeCasts(node.elements);
	    }

	    return node;
	  }

	  parseSubscript(base, startPos, startLoc, noCalls, state) {
	    if (!this.hasPrecedingLineBreak() && this.match(40)) {
	      this.state.exprAllowed = false;
	      this.next();
	      const nonNullExpression = this.startNodeAt(startPos, startLoc);
	      nonNullExpression.expression = base;
	      return this.finishNode(nonNullExpression, "TSNonNullExpression");
	    }

	    let isOptionalCall = false;

	    if (this.match(26) && this.lookaheadCharCode() === 60) {
	      if (noCalls) {
	        state.stop = true;
	        return base;
	      }

	      state.optionalChainMember = isOptionalCall = true;
	      this.next();
	    }

	    if (this.isRelational("<")) {
	      let missingParenErrorPos;
	      const result = this.tsTryParseAndCatch(() => {
	        if (!noCalls && this.atPossibleAsyncArrow(base)) {
	          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);

	          if (asyncArrowFn) {
	            return asyncArrowFn;
	          }
	        }

	        const node = this.startNodeAt(startPos, startLoc);
	        node.callee = base;
	        const typeArguments = this.tsParseTypeArguments();

	        if (typeArguments) {
	          if (isOptionalCall && !this.match(18)) {
	            missingParenErrorPos = this.state.pos;
	            this.unexpected();
	          }

	          if (!noCalls && this.eat(18)) {
	            node.arguments = this.parseCallExpressionArguments(19, false);
	            this.tsCheckForInvalidTypeCasts(node.arguments);
	            node.typeParameters = typeArguments;

	            if (state.optionalChainMember) {
	              node.optional = isOptionalCall;
	            }

	            return this.finishCallExpression(node, state.optionalChainMember);
	          } else if (this.match(30)) {
	            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);
	            result.typeParameters = typeArguments;
	            return result;
	          }
	        }

	        this.unexpected();
	      });

	      if (missingParenErrorPos) {
	        this.unexpected(missingParenErrorPos, 18);
	      }

	      if (result) return result;
	    }

	    return super.parseSubscript(base, startPos, startLoc, noCalls, state);
	  }

	  parseNewArguments(node) {
	    if (this.isRelational("<")) {
	      const typeParameters = this.tsTryParseAndCatch(() => {
	        const args = this.tsParseTypeArguments();
	        if (!this.match(18)) this.unexpected();
	        return args;
	      });

	      if (typeParameters) {
	        node.typeParameters = typeParameters;
	      }
	    }

	    super.parseNewArguments(node);
	  }

	  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
	    if (tokenOperatorPrecedence(57) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual("as")) {
	      const node = this.startNodeAt(leftStartPos, leftStartLoc);
	      node.expression = left;

	      const _const = this.tsTryNextParseConstantContext();

	      if (_const) {
	        node.typeAnnotation = _const;
	      } else {
	        node.typeAnnotation = this.tsNextThenParseType();
	      }

	      this.finishNode(node, "TSAsExpression");
	      this.reScan_lt_gt();
	      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);
	    }

	    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);
	  }

	  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}

	  checkDuplicateExports() {}

	  parseImport(node) {
	    node.importKind = "value";

	    if (this.match(5) || this.match(54) || this.match(13)) {
	      let ahead = this.lookahead();

	      if (this.isContextual("type") && ahead.type !== 20 && !(ahead.type === 5 && ahead.value === "from") && ahead.type !== 35) {
	        node.importKind = "type";
	        this.next();
	        ahead = this.lookahead();
	      }

	      if (this.match(5) && ahead.type === 35) {
	        return this.tsParseImportEqualsDeclaration(node);
	      }
	    }

	    const importNode = super.parseImport(node);

	    if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") {
	      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);
	    }

	    return importNode;
	  }

	  parseExport(node) {
	    if (this.match(82)) {
	      this.next();

	      if (this.isContextual("type") && this.lookaheadCharCode() !== 61) {
	        node.importKind = "type";
	        this.next();
	      } else {
	        node.importKind = "value";
	      }

	      return this.tsParseImportEqualsDeclaration(node, true);
	    } else if (this.eat(35)) {
	      const assign = node;
	      assign.expression = this.parseExpression();
	      this.semicolon();
	      return this.finishNode(assign, "TSExportAssignment");
	    } else if (this.eatContextual("as")) {
	      const decl = node;
	      this.expectContextual("namespace");
	      decl.id = this.parseIdentifier();
	      this.semicolon();
	      return this.finishNode(decl, "TSNamespaceExportDeclaration");
	    } else {
	      if (this.isContextual("type") && this.lookahead().type === 13) {
	        this.next();
	        node.exportKind = "type";
	      } else {
	        node.exportKind = "value";
	      }

	      return super.parseExport(node);
	    }
	  }

	  isAbstractClass() {
	    return this.isContextual("abstract") && this.lookahead().type === 79;
	  }

	  parseExportDefaultExpression() {
	    if (this.isAbstractClass()) {
	      const cls = this.startNode();
	      this.next();
	      cls.abstract = true;
	      this.parseClass(cls, true, true);
	      return cls;
	    }

	    if (this.state.value === "interface") {
	      const interfaceNode = this.startNode();
	      this.next();
	      const result = this.tsParseInterfaceDeclaration(interfaceNode);
	      if (result) return result;
	    }

	    return super.parseExportDefaultExpression();
	  }

	  parseStatementContent(context, topLevel) {
	    if (this.state.type === 74) {
	      const ahead = this.lookahead();

	      if (ahead.type === 5 && ahead.value === "enum") {
	        const node = this.startNode();
	        this.expect(74);
	        this.expectContextual("enum");
	        return this.tsParseEnumDeclaration(node, true);
	      }
	    }

	    return super.parseStatementContent(context, topLevel);
	  }

	  parseAccessModifier() {
	    return this.tsParseModifier(["public", "protected", "private"]);
	  }

	  tsHasSomeModifiers(member, modifiers) {
	    return modifiers.some(modifier => {
	      if (tsIsAccessModifier(modifier)) {
	        return member.accessibility === modifier;
	      }

	      return !!member[modifier];
	    });
	  }

	  tsIsStartOfStaticBlocks() {
	    return this.isContextual("static") && this.lookaheadCharCode() === 123;
	  }

	  parseClassMember(classBody, member, state) {
	    const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
	    this.tsParseModifiers(member, modifiers, undefined, undefined, true);

	    const callParseClassMemberWithIsStatic = () => {
	      if (this.tsIsStartOfStaticBlocks()) {
	        this.next();
	        this.next();

	        if (this.tsHasSomeModifiers(member, modifiers)) {
	          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);
	        }

	        this.parseClassStaticBlock(classBody, member);
	      } else {
	        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
	      }
	    };

	    if (member.declare) {
	      this.tsInAmbientContext(callParseClassMemberWithIsStatic);
	    } else {
	      callParseClassMemberWithIsStatic();
	    }
	  }

	  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
	    const idx = this.tsTryParseIndexSignature(member);

	    if (idx) {
	      classBody.body.push(idx);

	      if (member.abstract) {
	        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);
	      }

	      if (member.accessibility) {
	        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);
	      }

	      if (member.declare) {
	        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);
	      }

	      if (member.override) {
	        this.raise(member.start, TSErrors.IndexSignatureHasOverride);
	      }

	      return;
	    }

	    if (!this.state.inAbstractClass && member.abstract) {
	      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);
	    }

	    if (member.override) {
	      if (!state.hadSuperClass) {
	        this.raise(member.start, TSErrors.OverrideNotInSubClass);
	      }
	    }

	    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
	  }

	  parsePostMemberNameModifiers(methodOrProp) {
	    const optional = this.eat(25);
	    if (optional) methodOrProp.optional = true;

	    if (methodOrProp.readonly && this.match(18)) {
	      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);
	    }

	    if (methodOrProp.declare && this.match(18)) {
	      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);
	    }
	  }

	  parseExpressionStatement(node, expr) {
	    const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node, expr) : undefined;
	    return decl || super.parseExpressionStatement(node, expr);
	  }

	  shouldParseExportDeclaration() {
	    if (this.tsIsDeclarationStart()) return true;
	    return super.shouldParseExportDeclaration();
	  }

	  parseConditional(expr, startPos, startLoc, refExpressionErrors) {
	    if (!this.state.maybeInArrowParameters || !this.match(25)) {
	      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);
	    }

	    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));

	    if (!result.node) {
	      if (result.error) {
	        super.setOptionalParametersError(refExpressionErrors, result.error);
	      }

	      return expr;
	    }

	    if (result.error) this.state = result.failState;
	    return result.node;
	  }

	  parseParenItem(node, startPos, startLoc) {
	    node = super.parseParenItem(node, startPos, startLoc);

	    if (this.eat(25)) {
	      node.optional = true;
	      this.resetEndLocation(node);
	    }

	    if (this.match(22)) {
	      const typeCastNode = this.startNodeAt(startPos, startLoc);
	      typeCastNode.expression = node;
	      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
	      return this.finishNode(typeCastNode, "TSTypeCastExpression");
	    }

	    return node;
	  }

	  parseExportDeclaration(node) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const isDeclare = this.eatContextual("declare");

	    if (isDeclare && (this.isContextual("declare") || !this.shouldParseExportDeclaration())) {
	      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);
	    }

	    let declaration;

	    if (this.match(5)) {
	      declaration = this.tsTryParseExportDeclaration();
	    }

	    if (!declaration) {
	      declaration = super.parseExportDeclaration(node);
	    }

	    if (declaration && (declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare)) {
	      node.exportKind = "type";
	    }

	    if (declaration && isDeclare) {
	      this.resetStartLocation(declaration, startPos, startLoc);
	      declaration.declare = true;
	    }

	    return declaration;
	  }

	  parseClassId(node, isStatement, optionalId) {
	    if ((!isStatement || optionalId) && this.isContextual("implements")) {
	      return;
	    }

	    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);
	    const typeParameters = this.tsTryParseTypeParameters();
	    if (typeParameters) node.typeParameters = typeParameters;
	  }

	  parseClassPropertyAnnotation(node) {
	    if (!node.optional && this.eat(40)) {
	      node.definite = true;
	    }

	    const type = this.tsTryParseTypeAnnotation();
	    if (type) node.typeAnnotation = type;
	  }

	  parseClassProperty(node) {
	    this.parseClassPropertyAnnotation(node);

	    if (this.state.isAmbientContext && this.match(35)) {
	      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);
	    }

	    if (node.abstract && this.match(35)) {
	      const {
	        key
	      } = node;
	      this.raise(this.state.start, TSErrors.AbstractPropertyHasInitializer, key.type === "Identifier" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);
	    }

	    return super.parseClassProperty(node);
	  }

	  parseClassPrivateProperty(node) {
	    if (node.abstract) {
	      this.raise(node.start, TSErrors.PrivateElementHasAbstract);
	    }

	    if (node.accessibility) {
	      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);
	    }

	    this.parseClassPropertyAnnotation(node);
	    return super.parseClassPrivateProperty(node);
	  }

	  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
	    const typeParameters = this.tsTryParseTypeParameters();

	    if (typeParameters && isConstructor) {
	      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);
	    }

	    if (method.declare && (method.kind === "get" || method.kind === "set")) {
	      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);
	    }

	    if (typeParameters) method.typeParameters = typeParameters;
	    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
	  }

	  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
	    const typeParameters = this.tsTryParseTypeParameters();
	    if (typeParameters) method.typeParameters = typeParameters;
	    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
	  }

	  parseClassSuper(node) {
	    super.parseClassSuper(node);

	    if (node.superClass && this.isRelational("<")) {
	      node.superTypeParameters = this.tsParseTypeArguments();
	    }

	    if (this.eatContextual("implements")) {
	      node.implements = this.tsParseHeritageClause("implements");
	    }
	  }

	  parseObjPropValue(prop, ...args) {
	    const typeParameters = this.tsTryParseTypeParameters();
	    if (typeParameters) prop.typeParameters = typeParameters;
	    super.parseObjPropValue(prop, ...args);
	  }

	  parseFunctionParams(node, allowModifiers) {
	    const typeParameters = this.tsTryParseTypeParameters();
	    if (typeParameters) node.typeParameters = typeParameters;
	    super.parseFunctionParams(node, allowModifiers);
	  }

	  parseVarId(decl, kind) {
	    super.parseVarId(decl, kind);

	    if (decl.id.type === "Identifier" && this.eat(40)) {
	      decl.definite = true;
	    }

	    const type = this.tsTryParseTypeAnnotation();

	    if (type) {
	      decl.id.typeAnnotation = type;
	      this.resetEndLocation(decl.id);
	    }
	  }

	  parseAsyncArrowFromCallExpression(node, call) {
	    if (this.match(22)) {
	      node.returnType = this.tsParseTypeAnnotation();
	    }

	    return super.parseAsyncArrowFromCallExpression(node, call);
	  }

	  parseMaybeAssign(...args) {
	    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;

	    let state;
	    let jsx;
	    let typeCast;

	    if (this.hasPlugin("jsx") && (this.match(94) || this.isRelational("<"))) {
	      state = this.state.clone();
	      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);
	      if (!jsx.error) return jsx.node;
	      const {
	        context
	      } = this.state;

	      if (context[context.length - 1] === types$2.j_oTag) {
	        context.length -= 2;
	      } else if (context[context.length - 1] === types$2.j_expr) {
	        context.length -= 1;
	      }
	    }

	    if (!((_jsx = jsx) != null && _jsx.error) && !this.isRelational("<")) {
	      return super.parseMaybeAssign(...args);
	    }

	    let typeParameters;
	    state = state || this.state.clone();
	    const arrow = this.tryParse(abort => {
	      var _expr$extra, _typeParameters;

	      typeParameters = this.tsParseTypeParameters();
	      const expr = super.parseMaybeAssign(...args);

	      if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
	        abort();
	      }

	      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {
	        this.resetStartLocationFromNode(expr, typeParameters);
	      }

	      expr.typeParameters = typeParameters;
	      return expr;
	    }, state);
	    if (!arrow.error && !arrow.aborted) return arrow.node;

	    if (!jsx) {
	      assert$1(!this.hasPlugin("jsx"));
	      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);
	      if (!typeCast.error) return typeCast.node;
	    }

	    if ((_jsx2 = jsx) != null && _jsx2.node) {
	      this.state = jsx.failState;
	      return jsx.node;
	    }

	    if (arrow.node) {
	      this.state = arrow.failState;
	      return arrow.node;
	    }

	    if ((_typeCast = typeCast) != null && _typeCast.node) {
	      this.state = typeCast.failState;
	      return typeCast.node;
	    }

	    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;
	    if (arrow.thrown) throw arrow.error;
	    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;
	    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);
	  }

	  parseMaybeUnary(refExpressionErrors) {
	    if (!this.hasPlugin("jsx") && this.isRelational("<")) {
	      return this.tsParseTypeAssertion();
	    } else {
	      return super.parseMaybeUnary(refExpressionErrors);
	    }
	  }

	  parseArrow(node) {
	    if (this.match(22)) {
	      const result = this.tryParse(abort => {
	        const returnType = this.tsParseTypeOrTypePredicateAnnotation(22);
	        if (this.canInsertSemicolon() || !this.match(27)) abort();
	        return returnType;
	      });
	      if (result.aborted) return;

	      if (!result.thrown) {
	        if (result.error) this.state = result.failState;
	        node.returnType = result.node;
	      }
	    }

	    return super.parseArrow(node);
	  }

	  parseAssignableListItemTypes(param) {
	    if (this.eat(25)) {
	      if (param.type !== "Identifier" && !this.state.isAmbientContext && !this.state.inType) {
	        this.raise(param.start, TSErrors.PatternIsOptional);
	      }

	      param.optional = true;
	    }

	    const type = this.tsTryParseTypeAnnotation();
	    if (type) param.typeAnnotation = type;
	    this.resetEndLocation(param);
	    return param;
	  }

	  isAssignable(node, isBinding) {
	    switch (node.type) {
	      case "TSTypeCastExpression":
	        return this.isAssignable(node.expression, isBinding);

	      case "TSParameterProperty":
	        return true;

	      default:
	        return super.isAssignable(node, isBinding);
	    }
	  }

	  toAssignable(node, isLHS = false) {
	    switch (node.type) {
	      case "TSTypeCastExpression":
	        return super.toAssignable(this.typeCastToParameter(node), isLHS);

	      case "TSParameterProperty":
	        return super.toAssignable(node, isLHS);

	      case "ParenthesizedExpression":
	        return this.toAssignableParenthesizedExpression(node, isLHS);

	      case "TSAsExpression":
	      case "TSNonNullExpression":
	      case "TSTypeAssertion":
	        node.expression = this.toAssignable(node.expression, isLHS);
	        return node;

	      default:
	        return super.toAssignable(node, isLHS);
	    }
	  }

	  toAssignableParenthesizedExpression(node, isLHS) {
	    switch (node.expression.type) {
	      case "TSAsExpression":
	      case "TSNonNullExpression":
	      case "TSTypeAssertion":
	      case "ParenthesizedExpression":
	        node.expression = this.toAssignable(node.expression, isLHS);
	        return node;

	      default:
	        return super.toAssignable(node, isLHS);
	    }
	  }

	  checkLVal(expr, contextDescription, ...args) {
	    var _expr$extra2;

	    switch (expr.type) {
	      case "TSTypeCastExpression":
	        return;

	      case "TSParameterProperty":
	        this.checkLVal(expr.parameter, "parameter property", ...args);
	        return;

	      case "TSAsExpression":
	      case "TSTypeAssertion":
	        if (!args[0] && contextDescription !== "parenthesized expression" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {
	          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);
	          break;
	        }

	        this.checkLVal(expr.expression, "parenthesized expression", ...args);
	        return;

	      case "TSNonNullExpression":
	        this.checkLVal(expr.expression, contextDescription, ...args);
	        return;

	      default:
	        super.checkLVal(expr, contextDescription, ...args);
	        return;
	    }
	  }

	  parseBindingAtom() {
	    switch (this.state.type) {
	      case 77:
	        return this.parseIdentifier(true);

	      default:
	        return super.parseBindingAtom();
	    }
	  }

	  parseMaybeDecoratorArguments(expr) {
	    if (this.isRelational("<")) {
	      const typeArguments = this.tsParseTypeArguments();

	      if (this.match(18)) {
	        const call = super.parseMaybeDecoratorArguments(expr);
	        call.typeParameters = typeArguments;
	        return call;
	      }

	      this.unexpected(this.state.start, 18);
	    }

	    return super.parseMaybeDecoratorArguments(expr);
	  }

	  checkCommaAfterRest(close) {
	    if (this.state.isAmbientContext && this.match(20) && this.lookaheadCharCode() === close) {
	      this.next();
	    } else {
	      super.checkCommaAfterRest(close);
	    }
	  }

	  isClassMethod() {
	    return this.isRelational("<") || super.isClassMethod();
	  }

	  isClassProperty() {
	    return this.match(40) || this.match(22) || super.isClassProperty();
	  }

	  parseMaybeDefault(...args) {
	    const node = super.parseMaybeDefault(...args);

	    if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
	      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);
	    }

	    return node;
	  }

	  getTokenFromCode(code) {
	    if (this.state.inType && (code === 62 || code === 60)) {
	      return this.finishOp(50, 1);
	    } else {
	      return super.getTokenFromCode(code);
	    }
	  }

	  reScan_lt_gt() {
	    if (this.match(50)) {
	      const code = this.input.charCodeAt(this.state.start);

	      if (code === 60 || code === 62) {
	        this.state.pos -= 1;
	        this.readToken_lt_gt(code);
	      }
	    }
	  }

	  toAssignableList(exprList) {
	    for (let i = 0; i < exprList.length; i++) {
	      const expr = exprList[i];
	      if (!expr) continue;

	      switch (expr.type) {
	        case "TSTypeCastExpression":
	          exprList[i] = this.typeCastToParameter(expr);
	          break;

	        case "TSAsExpression":
	        case "TSTypeAssertion":
	          if (!this.state.maybeInArrowParameters) {
	            exprList[i] = this.typeCastToParameter(expr);
	          } else {
	            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);
	          }

	          break;
	      }
	    }

	    return super.toAssignableList(...arguments);
	  }

	  typeCastToParameter(node) {
	    node.expression.typeAnnotation = node.typeAnnotation;
	    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);
	    return node.expression;
	  }

	  shouldParseArrow(params) {
	    if (this.match(22)) {
	      return params.every(expr => this.isAssignable(expr, true));
	    }

	    return super.shouldParseArrow(params);
	  }

	  shouldParseAsyncArrow() {
	    return this.match(22) || super.shouldParseAsyncArrow();
	  }

	  canHaveLeadingDecorator() {
	    return super.canHaveLeadingDecorator() || this.isAbstractClass();
	  }

	  jsxParseOpeningElementAfterName(node) {
	    if (this.isRelational("<")) {
	      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());
	      if (typeArguments) node.typeParameters = typeArguments;
	    }

	    return super.jsxParseOpeningElementAfterName(node);
	  }

	  getGetterSetterExpectedParamCount(method) {
	    const baseCount = super.getGetterSetterExpectedParamCount(method);
	    const params = this.getObjectOrClassMethodParams(method);
	    const firstParam = params[0];
	    const hasContextParam = firstParam && this.isThisParam(firstParam);
	    return hasContextParam ? baseCount + 1 : baseCount;
	  }

	  parseCatchClauseParam() {
	    const param = super.parseCatchClauseParam();
	    const type = this.tsTryParseTypeAnnotation();

	    if (type) {
	      param.typeAnnotation = type;
	      this.resetEndLocation(param);
	    }

	    return param;
	  }

	  tsInAmbientContext(cb) {
	    const oldIsAmbientContext = this.state.isAmbientContext;
	    this.state.isAmbientContext = true;

	    try {
	      return cb();
	    } finally {
	      this.state.isAmbientContext = oldIsAmbientContext;
	    }
	  }

	  parseClass(node, ...args) {
	    const oldInAbstractClass = this.state.inAbstractClass;
	    this.state.inAbstractClass = !!node.abstract;

	    try {
	      return super.parseClass(node, ...args);
	    } finally {
	      this.state.inAbstractClass = oldInAbstractClass;
	    }
	  }

	  tsParseAbstractDeclaration(node) {
	    if (this.match(79)) {
	      node.abstract = true;
	      return this.parseClass(node, true, false);
	    } else if (this.isContextual("interface")) {
	      if (!this.hasFollowingLineBreak()) {
	        node.abstract = true;
	        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);
	        this.next();
	        return this.tsParseInterfaceDeclaration(node);
	      }
	    } else {
	      this.unexpected(null, 79);
	    }
	  }

	  parseMethod(...args) {
	    const method = super.parseMethod(...args);

	    if (method.abstract) {
	      const hasBody = this.hasPlugin("estree") ? !!method.value.body : !!method.body;

	      if (hasBody) {
	        const {
	          key
	        } = method;
	        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === "Identifier" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);
	      }
	    }

	    return method;
	  }

	  tsParseTypeParameterName() {
	    const typeName = this.parseIdentifier();
	    return typeName.name;
	  }

	  shouldParseAsAmbientContext() {
	    return !!this.getPluginOption("typescript", "dts");
	  }

	  parse() {
	    if (this.shouldParseAsAmbientContext()) {
	      this.state.isAmbientContext = true;
	    }

	    return super.parse();
	  }

	  getExpression() {
	    if (this.shouldParseAsAmbientContext()) {
	      this.state.isAmbientContext = true;
	    }

	    return super.getExpression();
	  }

	});

	const PlaceHolderErrors = makeErrorTemplates({
	  ClassNameIsRequired: "A class name is required."
	}, ErrorCodes.SyntaxError);
	var placeholders$1 = (superClass => class extends superClass {
	  parsePlaceholder(expectedNode) {
	    if (this.match(96)) {
	      const node = this.startNode();
	      this.next();
	      this.assertNoSpace("Unexpected space in placeholder.");
	      node.name = super.parseIdentifier(true);
	      this.assertNoSpace("Unexpected space in placeholder.");
	      this.expect(96);
	      return this.finishPlaceholder(node, expectedNode);
	    }
	  }

	  finishPlaceholder(node, expectedNode) {
	    const isFinished = !!(node.expectedNode && node.type === "Placeholder");
	    node.expectedNode = expectedNode;
	    return isFinished ? node : this.finishNode(node, "Placeholder");
	  }

	  getTokenFromCode(code) {
	    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {
	      return this.finishOp(96, 2);
	    }

	    return super.getTokenFromCode(...arguments);
	  }

	  parseExprAtom() {
	    return this.parsePlaceholder("Expression") || super.parseExprAtom(...arguments);
	  }

	  parseIdentifier() {
	    return this.parsePlaceholder("Identifier") || super.parseIdentifier(...arguments);
	  }

	  checkReservedWord(word) {
	    if (word !== undefined) super.checkReservedWord(...arguments);
	  }

	  parseBindingAtom() {
	    return this.parsePlaceholder("Pattern") || super.parseBindingAtom(...arguments);
	  }

	  checkLVal(expr) {
	    if (expr.type !== "Placeholder") super.checkLVal(...arguments);
	  }

	  toAssignable(node) {
	    if (node && node.type === "Placeholder" && node.expectedNode === "Expression") {
	      node.expectedNode = "Pattern";
	      return node;
	    }

	    return super.toAssignable(...arguments);
	  }

	  isLet(context) {
	    if (super.isLet(context)) {
	      return true;
	    }

	    if (!this.isContextual("let")) {
	      return false;
	    }

	    if (context) return false;
	    const nextToken = this.lookahead();

	    if (nextToken.type === 96) {
	      return true;
	    }

	    return false;
	  }

	  verifyBreakContinue(node) {
	    if (node.label && node.label.type === "Placeholder") return;
	    super.verifyBreakContinue(...arguments);
	  }

	  parseExpressionStatement(node, expr) {
	    if (expr.type !== "Placeholder" || expr.extra && expr.extra.parenthesized) {
	      return super.parseExpressionStatement(...arguments);
	    }

	    if (this.match(22)) {
	      const stmt = node;
	      stmt.label = this.finishPlaceholder(expr, "Identifier");
	      this.next();
	      stmt.body = this.parseStatement("label");
	      return this.finishNode(stmt, "LabeledStatement");
	    }

	    this.semicolon();
	    node.name = expr.name;
	    return this.finishPlaceholder(node, "Statement");
	  }

	  parseBlock() {
	    return this.parsePlaceholder("BlockStatement") || super.parseBlock(...arguments);
	  }

	  parseFunctionId() {
	    return this.parsePlaceholder("Identifier") || super.parseFunctionId(...arguments);
	  }

	  parseClass(node, isStatement, optionalId) {
	    const type = isStatement ? "ClassDeclaration" : "ClassExpression";
	    this.next();
	    this.takeDecorators(node);
	    const oldStrict = this.state.strict;
	    const placeholder = this.parsePlaceholder("Identifier");

	    if (placeholder) {
	      if (this.match(80) || this.match(96) || this.match(13)) {
	        node.id = placeholder;
	      } else if (optionalId || !isStatement) {
	        node.id = null;
	        node.body = this.finishPlaceholder(placeholder, "ClassBody");
	        return this.finishNode(node, type);
	      } else {
	        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);
	      }
	    } else {
	      this.parseClassId(node, isStatement, optionalId);
	    }

	    this.parseClassSuper(node);
	    node.body = this.parsePlaceholder("ClassBody") || this.parseClassBody(!!node.superClass, oldStrict);
	    return this.finishNode(node, type);
	  }

	  parseExport(node) {
	    const placeholder = this.parsePlaceholder("Identifier");
	    if (!placeholder) return super.parseExport(...arguments);

	    if (!this.isContextual("from") && !this.match(20)) {
	      node.specifiers = [];
	      node.source = null;
	      node.declaration = this.finishPlaceholder(placeholder, "Declaration");
	      return this.finishNode(node, "ExportNamedDeclaration");
	    }

	    this.expectPlugin("exportDefaultFrom");
	    const specifier = this.startNode();
	    specifier.exported = placeholder;
	    node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
	    return super.parseExport(node);
	  }

	  isExportDefaultSpecifier() {
	    if (this.match(64)) {
	      const next = this.nextTokenStart();

	      if (this.isUnparsedContextual(next, "from")) {
	        if (this.input.startsWith(tokenLabelName(96), this.nextTokenStartSince(next + 4))) {
	          return true;
	        }
	      }
	    }

	    return super.isExportDefaultSpecifier();
	  }

	  maybeParseExportDefaultSpecifier(node) {
	    if (node.specifiers && node.specifiers.length > 0) {
	      return true;
	    }

	    return super.maybeParseExportDefaultSpecifier(...arguments);
	  }

	  checkExport(node) {
	    const {
	      specifiers
	    } = node;

	    if (specifiers != null && specifiers.length) {
	      node.specifiers = specifiers.filter(node => node.exported.type === "Placeholder");
	    }

	    super.checkExport(node);
	    node.specifiers = specifiers;
	  }

	  parseImport(node) {
	    const placeholder = this.parsePlaceholder("Identifier");
	    if (!placeholder) return super.parseImport(...arguments);
	    node.specifiers = [];

	    if (!this.isContextual("from") && !this.match(20)) {
	      node.source = this.finishPlaceholder(placeholder, "StringLiteral");
	      this.semicolon();
	      return this.finishNode(node, "ImportDeclaration");
	    }

	    const specifier = this.startNodeAtNode(placeholder);
	    specifier.local = placeholder;
	    this.finishNode(specifier, "ImportDefaultSpecifier");
	    node.specifiers.push(specifier);

	    if (this.eat(20)) {
	      const hasStarImport = this.maybeParseStarImportSpecifier(node);
	      if (!hasStarImport) this.parseNamedImportSpecifiers(node);
	    }

	    this.expectContextual("from");
	    node.source = this.parseImportSource();
	    this.semicolon();
	    return this.finishNode(node, "ImportDeclaration");
	  }

	  parseImportSource() {
	    return this.parsePlaceholder("StringLiteral") || super.parseImportSource(...arguments);
	  }

	});

	var v8intrinsic = (superClass => class extends superClass {
	  parseV8Intrinsic() {
	    if (this.match(53)) {
	      const v8IntrinsicStart = this.state.start;
	      const node = this.startNode();
	      this.eat(53);

	      if (this.match(5)) {
	        const name = this.parseIdentifierName(this.state.start);
	        const identifier = this.createIdentifier(node, name);
	        identifier.type = "V8IntrinsicIdentifier";

	        if (this.match(18)) {
	          return identifier;
	        }
	      }

	      this.unexpected(v8IntrinsicStart);
	    }
	  }

	  parseExprAtom() {
	    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);
	  }

	});

	function hasPlugin(plugins, name) {
	  return plugins.some(plugin => {
	    if (Array.isArray(plugin)) {
	      return plugin[0] === name;
	    } else {
	      return plugin === name;
	    }
	  });
	}
	function getPluginOption(plugins, name, option) {
	  const plugin = plugins.find(plugin => {
	    if (Array.isArray(plugin)) {
	      return plugin[0] === name;
	    } else {
	      return plugin === name;
	    }
	  });

	  if (plugin && Array.isArray(plugin)) {
	    return plugin[1][option];
	  }

	  return null;
	}
	const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"];
	const TOPIC_TOKENS = ["%", "#"];
	const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
	function validatePlugins(plugins) {
	  if (hasPlugin(plugins, "decorators")) {
	    if (hasPlugin(plugins, "decorators-legacy")) {
	      throw new Error("Cannot use the decorators and decorators-legacy plugin together");
	    }

	    const decoratorsBeforeExport = getPluginOption(plugins, "decorators", "decoratorsBeforeExport");

	    if (decoratorsBeforeExport == null) {
	      throw new Error("The 'decorators' plugin requires a 'decoratorsBeforeExport' option," + " whose value must be a boolean. If you are migrating from" + " Babylon/Babel 6 or want to use the old decorators proposal, you" + " should use the 'decorators-legacy' plugin instead of 'decorators'.");
	    } else if (typeof decoratorsBeforeExport !== "boolean") {
	      throw new Error("'decoratorsBeforeExport' must be a boolean.");
	    }
	  }

	  if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript")) {
	    throw new Error("Cannot combine flow and typescript plugins.");
	  }

	  if (hasPlugin(plugins, "placeholders") && hasPlugin(plugins, "v8intrinsic")) {
	    throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
	  }

	  if (hasPlugin(plugins, "pipelineOperator")) {
	    const proposal = getPluginOption(plugins, "pipelineOperator", "proposal");

	    if (!PIPELINE_PROPOSALS.includes(proposal)) {
	      const proposalList = PIPELINE_PROPOSALS.map(p => `"${p}"`).join(", ");
	      throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
	    }

	    const tupleSyntaxIsHash = hasPlugin(plugins, "recordAndTuple") && getPluginOption(plugins, "recordAndTuple", "syntaxType") === "hash";

	    if (proposal === "hack") {
	      if (hasPlugin(plugins, "placeholders")) {
	        throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
	      }

	      if (hasPlugin(plugins, "v8intrinsic")) {
	        throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
	      }

	      const topicToken = getPluginOption(plugins, "pipelineOperator", "topicToken");

	      if (!TOPIC_TOKENS.includes(topicToken)) {
	        const tokenList = TOPIC_TOKENS.map(t => `"${t}"`).join(", ");
	        throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
	      }

	      if (topicToken === "#" && tupleSyntaxIsHash) {
	        throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
	      }
	    } else if (proposal === "smart" && tupleSyntaxIsHash) {
	      throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
	    }
	  }

	  if (hasPlugin(plugins, "moduleAttributes")) {
	    {
	      if (hasPlugin(plugins, "importAssertions")) {
	        throw new Error("Cannot combine importAssertions and moduleAttributes plugins.");
	      }

	      const moduleAttributesVerionPluginOption = getPluginOption(plugins, "moduleAttributes", "version");

	      if (moduleAttributesVerionPluginOption !== "may-2020") {
	        throw new Error("The 'moduleAttributes' plugin requires a 'version' option," + " representing the last proposal update. Currently, the" + " only supported value is 'may-2020'.");
	      }
	    }
	  }

	  if (hasPlugin(plugins, "recordAndTuple") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, "recordAndTuple", "syntaxType"))) {
	    throw new Error("'recordAndTuple' requires 'syntaxType' option whose value should be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(", "));
	  }

	  if (hasPlugin(plugins, "asyncDoExpressions") && !hasPlugin(plugins, "doExpressions")) {
	    const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
	    error.missingPlugins = "doExpressions";
	    throw error;
	  }
	}
	const mixinPlugins = {
	  estree,
	  jsx: jsx$2,
	  flow: flow$1,
	  typescript: typescript$1,
	  v8intrinsic,
	  placeholders: placeholders$1
	};
	const mixinPluginNames = Object.keys(mixinPlugins);

	const defaultOptions$1 = {
	  sourceType: "script",
	  sourceFilename: undefined,
	  startLine: 1,
	  allowAwaitOutsideFunction: false,
	  allowReturnOutsideFunction: false,
	  allowImportExportEverywhere: false,
	  allowSuperOutsideMethod: false,
	  allowUndeclaredExports: false,
	  plugins: [],
	  strictMode: null,
	  ranges: false,
	  tokens: false,
	  createParenthesizedExpressions: false,
	  errorRecovery: false,
	  attachComment: true
	};
	function getOptions$1(opts) {
	  const options = {};

	  for (const key of Object.keys(defaultOptions$1)) {
	    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions$1[key];
	  }

	  return options;
	}

	const unwrapParenthesizedExpression = node => {
	  return node.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node.expression) : node;
	};

	class LValParser extends NodeUtils {
	  toAssignable(node, isLHS = false) {
	    var _node$extra, _node$extra3;

	    let parenthesized = undefined;

	    if (node.type === "ParenthesizedExpression" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {
	      parenthesized = unwrapParenthesizedExpression(node);

	      if (isLHS) {
	        if (parenthesized.type === "Identifier") {
	          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);
	        } else if (parenthesized.type !== "MemberExpression") {
	          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);
	        }
	      } else {
	        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);
	      }
	    }

	    switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	      case "AssignmentPattern":
	      case "RestElement":
	        break;

	      case "ObjectExpression":
	        node.type = "ObjectPattern";

	        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
	          var _node$extra2;

	          const prop = node.properties[i];
	          const isLast = i === last;
	          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);

	          if (isLast && prop.type === "RestElement" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {
	            this.raiseRestNotLast(node.extra.trailingComma);
	          }
	        }

	        break;

	      case "ObjectProperty":
	        this.toAssignable(node.value, isLHS);
	        break;

	      case "SpreadElement":
	        {
	          this.checkToRestConversion(node);
	          node.type = "RestElement";
	          const arg = node.argument;
	          this.toAssignable(arg, isLHS);
	          break;
	        }

	      case "ArrayExpression":
	        node.type = "ArrayPattern";
	        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);
	        break;

	      case "AssignmentExpression":
	        if (node.operator !== "=") {
	          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);
	        }

	        node.type = "AssignmentPattern";
	        delete node.operator;
	        this.toAssignable(node.left, isLHS);
	        break;

	      case "ParenthesizedExpression":
	        this.toAssignable(parenthesized, isLHS);
	        break;
	    }

	    return node;
	  }

	  toAssignableObjectExpressionProp(prop, isLast, isLHS) {
	    if (prop.type === "ObjectMethod") {
	      const error = prop.kind === "get" || prop.kind === "set" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;
	      this.raise(prop.key.start, error);
	    } else if (prop.type === "SpreadElement" && !isLast) {
	      this.raiseRestNotLast(prop.start);
	    } else {
	      this.toAssignable(prop, isLHS);
	    }
	  }

	  toAssignableList(exprList, trailingCommaPos, isLHS) {
	    let end = exprList.length;

	    if (end) {
	      const last = exprList[end - 1];

	      if ((last == null ? void 0 : last.type) === "RestElement") {
	        --end;
	      } else if ((last == null ? void 0 : last.type) === "SpreadElement") {
	        last.type = "RestElement";
	        let arg = last.argument;
	        this.toAssignable(arg, isLHS);
	        arg = unwrapParenthesizedExpression(arg);

	        if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern" && arg.type !== "ObjectPattern") {
	          this.unexpected(arg.start);
	        }

	        if (trailingCommaPos) {
	          this.raiseTrailingCommaAfterRest(trailingCommaPos);
	        }

	        --end;
	      }
	    }

	    for (let i = 0; i < end; i++) {
	      const elt = exprList[i];

	      if (elt) {
	        this.toAssignable(elt, isLHS);

	        if (elt.type === "RestElement") {
	          this.raiseRestNotLast(elt.start);
	        }
	      }
	    }

	    return exprList;
	  }

	  isAssignable(node, isBinding) {
	    switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	      case "AssignmentPattern":
	      case "RestElement":
	        return true;

	      case "ObjectExpression":
	        {
	          const last = node.properties.length - 1;
	          return node.properties.every((prop, i) => {
	            return prop.type !== "ObjectMethod" && (i === last || prop.type !== "SpreadElement") && this.isAssignable(prop);
	          });
	        }

	      case "ObjectProperty":
	        return this.isAssignable(node.value);

	      case "SpreadElement":
	        return this.isAssignable(node.argument);

	      case "ArrayExpression":
	        return node.elements.every(element => element === null || this.isAssignable(element));

	      case "AssignmentExpression":
	        return node.operator === "=";

	      case "ParenthesizedExpression":
	        return this.isAssignable(node.expression);

	      case "MemberExpression":
	      case "OptionalMemberExpression":
	        return !isBinding;

	      default:
	        return false;
	    }
	  }

	  toReferencedList(exprList, isParenthesizedExpr) {
	    return exprList;
	  }

	  toReferencedListDeep(exprList, isParenthesizedExpr) {
	    this.toReferencedList(exprList, isParenthesizedExpr);

	    for (const expr of exprList) {
	      if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {
	        this.toReferencedListDeep(expr.elements);
	      }
	    }
	  }

	  parseSpread(refExpressionErrors, refNeedsArrowPos) {
	    const node = this.startNode();
	    this.next();
	    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);
	    return this.finishNode(node, "SpreadElement");
	  }

	  parseRestBinding() {
	    const node = this.startNode();
	    this.next();
	    node.argument = this.parseBindingAtom();
	    return this.finishNode(node, "RestElement");
	  }

	  parseBindingAtom() {
	    switch (this.state.type) {
	      case 8:
	        {
	          const node = this.startNode();
	          this.next();
	          node.elements = this.parseBindingList(11, 93, true);
	          return this.finishNode(node, "ArrayPattern");
	        }

	      case 13:
	        return this.parseObjectLike(16, true);
	    }

	    return this.parseIdentifier();
	  }

	  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {
	    const elts = [];
	    let first = true;

	    while (!this.eat(close)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(20);
	      }

	      if (allowEmpty && this.match(20)) {
	        elts.push(null);
	      } else if (this.eat(close)) {
	        break;
	      } else if (this.match(29)) {
	        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));
	        this.checkCommaAfterRest(closeCharCode);
	        this.expect(close);
	        break;
	      } else {
	        const decorators = [];

	        if (this.match(32) && this.hasPlugin("decorators")) {
	          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);
	        }

	        while (this.match(32)) {
	          decorators.push(this.parseDecorator());
	        }

	        elts.push(this.parseAssignableListItem(allowModifiers, decorators));
	      }
	    }

	    return elts;
	  }

	  parseAssignableListItem(allowModifiers, decorators) {
	    const left = this.parseMaybeDefault();
	    this.parseAssignableListItemTypes(left);
	    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);

	    if (decorators.length) {
	      left.decorators = decorators;
	    }

	    return elt;
	  }

	  parseAssignableListItemTypes(param) {
	    return param;
	  }

	  parseMaybeDefault(startPos, startLoc, left) {
	    var _startLoc, _startPos, _left;

	    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;
	    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;
	    left = (_left = left) != null ? _left : this.parseBindingAtom();
	    if (!this.eat(35)) return left;
	    const node = this.startNodeAt(startPos, startLoc);
	    node.left = left;
	    node.right = this.parseMaybeAssignAllowIn();
	    return this.finishNode(node, "AssignmentPattern");
	  }

	  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {
	    switch (expr.type) {
	      case "Identifier":
	        {
	          const {
	            name
	          } = expr;

	          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord$1(name, this.inModule) : isStrictBindOnlyReservedWord$1(name))) {
	            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);
	          }

	          if (checkClashes) {
	            if (checkClashes.has(name)) {
	              this.raise(expr.start, ErrorMessages.ParamDupe);
	            } else {
	              checkClashes.add(name);
	            }
	          }

	          if (disallowLetBinding && name === "let") {
	            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);
	          }

	          if (!(bindingType & BIND_NONE)) {
	            this.scope.declareName(name, bindingType, expr.start);
	          }

	          break;
	        }

	      case "MemberExpression":
	        if (bindingType !== BIND_NONE) {
	          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);
	        }

	        break;

	      case "ObjectPattern":
	        for (let prop of expr.properties) {
	          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;
	          this.checkLVal(prop, "object destructuring pattern", bindingType, checkClashes, disallowLetBinding);
	        }

	        break;

	      case "ArrayPattern":
	        for (const elem of expr.elements) {
	          if (elem) {
	            this.checkLVal(elem, "array destructuring pattern", bindingType, checkClashes, disallowLetBinding);
	          }
	        }

	        break;

	      case "AssignmentPattern":
	        this.checkLVal(expr.left, "assignment pattern", bindingType, checkClashes);
	        break;

	      case "RestElement":
	        this.checkLVal(expr.argument, "rest element", bindingType, checkClashes);
	        break;

	      case "ParenthesizedExpression":
	        this.checkLVal(expr.expression, "parenthesized expression", bindingType, checkClashes);
	        break;

	      default:
	        {
	          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);
	        }
	    }
	  }

	  checkToRestConversion(node) {
	    if (node.argument.type !== "Identifier" && node.argument.type !== "MemberExpression") {
	      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);
	    }
	  }

	  checkCommaAfterRest(close) {
	    if (this.match(20)) {
	      if (this.lookaheadCharCode() === close) {
	        this.raiseTrailingCommaAfterRest(this.state.start);
	      } else {
	        this.raiseRestNotLast(this.state.start);
	      }
	    }
	  }

	  raiseRestNotLast(pos) {
	    throw this.raise(pos, ErrorMessages.ElementAfterRest);
	  }

	  raiseTrailingCommaAfterRest(pos) {
	    this.raise(pos, ErrorMessages.RestTrailingComma);
	  }

	}

	const invalidHackPipeBodies = new Map([["ArrowFunctionExpression", "arrow function"], ["AssignmentExpression", "assignment"], ["ConditionalExpression", "conditional"], ["YieldExpression", "yield"]]);
	class ExpressionParser extends LValParser {
	  checkProto(prop, isRecord, protoRef, refExpressionErrors) {
	    if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {
	      return;
	    }

	    const key = prop.key;
	    const name = key.type === "Identifier" ? key.name : key.value;

	    if (name === "__proto__") {
	      if (isRecord) {
	        this.raise(key.start, ErrorMessages.RecordNoProto);
	        return;
	      }

	      if (protoRef.used) {
	        if (refExpressionErrors) {
	          if (refExpressionErrors.doubleProto === -1) {
	            refExpressionErrors.doubleProto = key.start;
	          }
	        } else {
	          this.raise(key.start, ErrorMessages.DuplicateProto);
	        }
	      }

	      protoRef.used = true;
	    }
	  }

	  shouldExitDescending(expr, potentialArrowAt) {
	    return expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt;
	  }

	  getExpression() {
	    this.enterInitialScopes();
	    this.nextToken();
	    const expr = this.parseExpression();

	    if (!this.match(7)) {
	      this.unexpected();
	    }

	    this.finalizeRemainingComments();
	    expr.comments = this.state.comments;
	    expr.errors = this.state.errors;

	    if (this.options.tokens) {
	      expr.tokens = this.tokens;
	    }

	    return expr;
	  }

	  parseExpression(disallowIn, refExpressionErrors) {
	    if (disallowIn) {
	      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
	    }

	    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
	  }

	  parseExpressionBase(refExpressionErrors) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const expr = this.parseMaybeAssign(refExpressionErrors);

	    if (this.match(20)) {
	      const node = this.startNodeAt(startPos, startLoc);
	      node.expressions = [expr];

	      while (this.eat(20)) {
	        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
	      }

	      this.toReferencedList(node.expressions);
	      return this.finishNode(node, "SequenceExpression");
	    }

	    return expr;
	  }

	  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
	    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
	  }

	  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
	    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
	  }

	  setOptionalParametersError(refExpressionErrors, resultError) {
	    var _resultError$pos;

	    refExpressionErrors.optionalParameters = (_resultError$pos = resultError == null ? void 0 : resultError.pos) != null ? _resultError$pos : this.state.start;
	  }

	  parseMaybeAssign(refExpressionErrors, afterLeftParse) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;

	    if (this.isContextual("yield")) {
	      if (this.prodParam.hasYield) {
	        let left = this.parseYield();

	        if (afterLeftParse) {
	          left = afterLeftParse.call(this, left, startPos, startLoc);
	        }

	        return left;
	      }
	    }

	    let ownExpressionErrors;

	    if (refExpressionErrors) {
	      ownExpressionErrors = false;
	    } else {
	      refExpressionErrors = new ExpressionErrors();
	      ownExpressionErrors = true;
	    }

	    if (this.match(18) || this.match(5)) {
	      this.state.potentialArrowAt = this.state.start;
	    }

	    let left = this.parseMaybeConditional(refExpressionErrors);

	    if (afterLeftParse) {
	      left = afterLeftParse.call(this, left, startPos, startLoc);
	    }

	    if (tokenIsAssignment(this.state.type)) {
	      const node = this.startNodeAt(startPos, startLoc);
	      const operator = this.state.value;
	      node.operator = operator;

	      if (this.match(35)) {
	        node.left = this.toAssignable(left, true);
	        refExpressionErrors.doubleProto = -1;
	      } else {
	        node.left = left;
	      }

	      if (refExpressionErrors.shorthandAssign >= node.left.start) {
	        refExpressionErrors.shorthandAssign = -1;
	      }

	      this.checkLVal(left, "assignment expression");
	      this.next();
	      node.right = this.parseMaybeAssign();
	      return this.finishNode(node, "AssignmentExpression");
	    } else if (ownExpressionErrors) {
	      this.checkExpressionErrors(refExpressionErrors, true);
	    }

	    return left;
	  }

	  parseMaybeConditional(refExpressionErrors) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const potentialArrowAt = this.state.potentialArrowAt;
	    const expr = this.parseExprOps(refExpressionErrors);

	    if (this.shouldExitDescending(expr, potentialArrowAt)) {
	      return expr;
	    }

	    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);
	  }

	  parseConditional(expr, startPos, startLoc, refExpressionErrors) {
	    if (this.eat(25)) {
	      const node = this.startNodeAt(startPos, startLoc);
	      node.test = expr;
	      node.consequent = this.parseMaybeAssignAllowIn();
	      this.expect(22);
	      node.alternate = this.parseMaybeAssign();
	      return this.finishNode(node, "ConditionalExpression");
	    }

	    return expr;
	  }

	  parseMaybeUnaryOrPrivate(refExpressionErrors) {
	    return this.match(6) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
	  }

	  parseExprOps(refExpressionErrors) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const potentialArrowAt = this.state.potentialArrowAt;
	    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);

	    if (this.shouldExitDescending(expr, potentialArrowAt)) {
	      return expr;
	    }

	    return this.parseExprOp(expr, startPos, startLoc, -1);
	  }

	  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
	    if (this.isPrivateName(left)) {
	      const value = this.getPrivateNameSV(left);
	      const {
	        start
	      } = left;

	      if (minPrec >= tokenOperatorPrecedence(57) || !this.prodParam.hasIn || !this.match(57)) {
	        this.raise(start, ErrorMessages.PrivateInExpectedIn, value);
	      }

	      this.classScope.usePrivateName(value, start);
	    }

	    const op = this.state.type;

	    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(57))) {
	      let prec = tokenOperatorPrecedence(op);

	      if (prec > minPrec) {
	        if (op === 42) {
	          this.expectPlugin("pipelineOperator");

	          if (this.state.inFSharpPipelineDirectBody) {
	            return left;
	          }

	          this.checkPipelineAtInfixOperator(left, leftStartPos);
	        }

	        const node = this.startNodeAt(leftStartPos, leftStartLoc);
	        node.left = left;
	        node.operator = this.state.value;
	        const logical = op === 44 || op === 45;
	        const coalesce = op === 43;

	        if (coalesce) {
	          prec = tokenOperatorPrecedence(45);
	        }

	        this.next();

	        if (op === 42 && this.getPluginOption("pipelineOperator", "proposal") === "minimal") {
	          if (this.match(5) && this.state.value === "await" && this.prodParam.hasAwait) {
	            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);
	          }
	        }

	        node.right = this.parseExprOpRightExpr(op, prec);
	        this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
	        const nextOp = this.state.type;

	        if (coalesce && (nextOp === 44 || nextOp === 45) || logical && nextOp === 43) {
	          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);
	        }

	        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);
	      }
	    }

	    return left;
	  }

	  parseExprOpRightExpr(op, prec) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;

	    switch (op) {
	      case 42:
	        switch (this.getPluginOption("pipelineOperator", "proposal")) {
	          case "hack":
	            return this.withTopicBindingContext(() => {
	              return this.parseHackPipeBody();
	            });

	          case "smart":
	            return this.withTopicBindingContext(() => {
	              if (this.prodParam.hasYield && this.isContextual("yield")) {
	                throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, this.state.value);
	              }

	              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);
	            });

	          case "fsharp":
	            return this.withSoloAwaitPermittingContext(() => {
	              return this.parseFSharpPipelineBody(prec);
	            });
	        }

	      default:
	        return this.parseExprOpBaseRightExpr(op, prec);
	    }
	  }

	  parseExprOpBaseRightExpr(op, prec) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);
	  }

	  parseHackPipeBody() {
	    var _body$extra;

	    const {
	      start
	    } = this.state;
	    const body = this.parseMaybeAssign();

	    if (invalidHackPipeBodies.has(body.type) && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {
	      this.raise(start, ErrorMessages.PipeUnparenthesizedBody, invalidHackPipeBodies.get(body.type));
	    }

	    if (!this.topicReferenceWasUsedInCurrentContext()) {
	      this.raise(start, ErrorMessages.PipeTopicUnused);
	    }

	    return body;
	  }

	  checkExponentialAfterUnary(node) {
	    if (this.match(56)) {
	      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);
	    }
	  }

	  parseMaybeUnary(refExpressionErrors, sawUnary) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const isAwait = this.isContextual("await");

	    if (isAwait && this.isAwaitAllowed()) {
	      this.next();
	      const expr = this.parseAwait(startPos, startLoc);
	      if (!sawUnary) this.checkExponentialAfterUnary(expr);
	      return expr;
	    }

	    const update = this.match(39);
	    const node = this.startNode();

	    if (tokenIsPrefix(this.state.type)) {
	      node.operator = this.state.value;
	      node.prefix = true;

	      if (this.match(71)) {
	        this.expectPlugin("throwExpressions");
	      }

	      const isDelete = this.match(88);
	      this.next();
	      node.argument = this.parseMaybeUnary(null, true);
	      this.checkExpressionErrors(refExpressionErrors, true);

	      if (this.state.strict && isDelete) {
	        const arg = node.argument;

	        if (arg.type === "Identifier") {
	          this.raise(node.start, ErrorMessages.StrictDelete);
	        } else if (this.hasPropertyAsPrivateName(arg)) {
	          this.raise(node.start, ErrorMessages.DeletePrivateField);
	        }
	      }

	      if (!update) {
	        if (!sawUnary) this.checkExponentialAfterUnary(node);
	        return this.finishNode(node, "UnaryExpression");
	      }
	    }

	    const expr = this.parseUpdate(node, update, refExpressionErrors);

	    if (isAwait) {
	      const {
	        type
	      } = this.state;
	      const startsExpr = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(53);

	      if (startsExpr && !this.isAmbiguousAwait()) {
	        this.raiseOverwrite(startPos, ErrorMessages.AwaitNotInAsyncContext);
	        return this.parseAwait(startPos, startLoc);
	      }
	    }

	    return expr;
	  }

	  parseUpdate(node, update, refExpressionErrors) {
	    if (update) {
	      this.checkLVal(node.argument, "prefix operation");
	      return this.finishNode(node, "UpdateExpression");
	    }

	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    let expr = this.parseExprSubscripts(refExpressionErrors);
	    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;

	    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {
	      const node = this.startNodeAt(startPos, startLoc);
	      node.operator = this.state.value;
	      node.prefix = false;
	      node.argument = expr;
	      this.checkLVal(expr, "postfix operation");
	      this.next();
	      expr = this.finishNode(node, "UpdateExpression");
	    }

	    return expr;
	  }

	  parseExprSubscripts(refExpressionErrors) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const potentialArrowAt = this.state.potentialArrowAt;
	    const expr = this.parseExprAtom(refExpressionErrors);

	    if (this.shouldExitDescending(expr, potentialArrowAt)) {
	      return expr;
	    }

	    return this.parseSubscripts(expr, startPos, startLoc);
	  }

	  parseSubscripts(base, startPos, startLoc, noCalls) {
	    const state = {
	      optionalChainMember: false,
	      maybeAsyncArrow: this.atPossibleAsyncArrow(base),
	      stop: false
	    };

	    do {
	      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);
	      state.maybeAsyncArrow = false;
	    } while (!state.stop);

	    return base;
	  }

	  parseSubscript(base, startPos, startLoc, noCalls, state) {
	    if (!noCalls && this.eat(23)) {
	      return this.parseBind(base, startPos, startLoc, noCalls, state);
	    } else if (this.match(30)) {
	      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);
	    }

	    let optional = false;

	    if (this.match(26)) {
	      if (noCalls && this.lookaheadCharCode() === 40) {
	        state.stop = true;
	        return base;
	      }

	      state.optionalChainMember = optional = true;
	      this.next();
	    }

	    if (!noCalls && this.match(18)) {
	      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);
	    } else {
	      const computed = this.eat(8);

	      if (computed || optional || this.eat(24)) {
	        return this.parseMember(base, startPos, startLoc, state, computed, optional);
	      } else {
	        state.stop = true;
	        return base;
	      }
	    }
	  }

	  parseMember(base, startPos, startLoc, state, computed, optional) {
	    const node = this.startNodeAt(startPos, startLoc);
	    node.object = base;
	    node.computed = computed;
	    const privateName = !computed && this.match(6) && this.state.value;
	    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);

	    if (privateName !== false) {
	      if (node.object.type === "Super") {
	        this.raise(startPos, ErrorMessages.SuperPrivateField);
	      }

	      this.classScope.usePrivateName(privateName, property.start);
	    }

	    node.property = property;

	    if (computed) {
	      this.expect(11);
	    }

	    if (state.optionalChainMember) {
	      node.optional = optional;
	      return this.finishNode(node, "OptionalMemberExpression");
	    } else {
	      return this.finishNode(node, "MemberExpression");
	    }
	  }

	  parseBind(base, startPos, startLoc, noCalls, state) {
	    const node = this.startNodeAt(startPos, startLoc);
	    node.object = base;
	    node.callee = this.parseNoCallExpr();
	    state.stop = true;
	    return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
	  }

	  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {
	    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
	    let refExpressionErrors = null;
	    this.state.maybeInArrowParameters = true;
	    this.next();
	    let node = this.startNodeAt(startPos, startLoc);
	    node.callee = base;

	    if (state.maybeAsyncArrow) {
	      this.expressionScope.enter(newAsyncArrowScope());
	      refExpressionErrors = new ExpressionErrors();
	    }

	    if (state.optionalChainMember) {
	      node.optional = optional;
	    }

	    if (optional) {
	      node.arguments = this.parseCallExpressionArguments(19);
	    } else {
	      node.arguments = this.parseCallExpressionArguments(19, base.type === "Import", base.type !== "Super", node, refExpressionErrors);
	    }

	    this.finishCallExpression(node, state.optionalChainMember);

	    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
	      state.stop = true;
	      this.expressionScope.validateAsPattern();
	      this.expressionScope.exit();
	      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);
	    } else {
	      if (state.maybeAsyncArrow) {
	        this.checkExpressionErrors(refExpressionErrors, true);
	        this.expressionScope.exit();
	      }

	      this.toReferencedArguments(node);
	    }

	    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
	    return node;
	  }

	  toReferencedArguments(node, isParenthesizedExpr) {
	    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
	  }

	  parseTaggedTemplateExpression(base, startPos, startLoc, state) {
	    const node = this.startNodeAt(startPos, startLoc);
	    node.tag = base;
	    node.quasi = this.parseTemplate(true);

	    if (state.optionalChainMember) {
	      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);
	    }

	    return this.finishNode(node, "TaggedTemplateExpression");
	  }

	  atPossibleAsyncArrow(base) {
	    return base.type === "Identifier" && base.name === "async" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;
	  }

	  finishCallExpression(node, optional) {
	    if (node.callee.type === "Import") {
	      if (node.arguments.length === 2) {
	        {
	          if (!this.hasPlugin("moduleAttributes")) {
	            this.expectPlugin("importAssertions");
	          }
	        }
	      }

	      if (node.arguments.length === 0 || node.arguments.length > 2) {
	        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? "one or two arguments" : "one argument");
	      } else {
	        for (const arg of node.arguments) {
	          if (arg.type === "SpreadElement") {
	            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);
	          }
	        }
	      }
	    }

	    return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
	  }

	  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
	    const elts = [];
	    let first = true;
	    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
	    this.state.inFSharpPipelineDirectBody = false;

	    while (!this.eat(close)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(20);

	        if (this.match(close)) {
	          if (dynamicImport && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes")) {
	            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);
	          }

	          if (nodeForExtra) {
	            this.addExtra(nodeForExtra, "trailingComma", this.state.lastTokStart);
	          }

	          this.next();
	          break;
	        }
	      }

	      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
	    }

	    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
	    return elts;
	  }

	  shouldParseAsyncArrow() {
	    return this.match(27) && !this.canInsertSemicolon();
	  }

	  parseAsyncArrowFromCallExpression(node, call) {
	    var _call$extra;

	    this.resetPreviousNodeTrailingComments(call);
	    this.expect(27);
	    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);
	    setInnerComments(node, call.innerComments);
	    setInnerComments(node, call.callee.trailingComments);
	    return node;
	  }

	  parseNoCallExpr() {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
	  }

	  parseExprAtom(refExpressionErrors) {
	    let node;

	    switch (this.state.type) {
	      case 78:
	        return this.parseSuper();

	      case 82:
	        node = this.startNode();
	        this.next();

	        if (this.match(24)) {
	          return this.parseImportMetaProperty(node);
	        }

	        if (!this.match(18)) {
	          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);
	        }

	        return this.finishNode(node, "Import");

	      case 77:
	        node = this.startNode();
	        this.next();
	        return this.finishNode(node, "ThisExpression");

	      case 5:
	        {
	          if (this.isContextual("module") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {
	            return this.parseModuleExpression();
	          }

	          const canBeArrow = this.state.potentialArrowAt === this.state.start;
	          const containsEsc = this.state.containsEsc;
	          const id = this.parseIdentifier();

	          if (!containsEsc && id.name === "async" && !this.canInsertSemicolon()) {
	            if (this.match(67)) {
	              this.resetPreviousNodeTrailingComments(id);
	              this.next();
	              return this.parseFunction(this.startNodeAtNode(id), undefined, true);
	            } else if (this.match(5)) {
	              if (this.lookaheadCharCode() === 61) {
	                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));
	              } else {
	                return id;
	              }
	            } else if (this.match(89)) {
	              this.resetPreviousNodeTrailingComments(id);
	              return this.parseDo(this.startNodeAtNode(id), true);
	            }
	          }

	          if (canBeArrow && this.match(27) && !this.canInsertSemicolon()) {
	            this.next();
	            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);
	          }

	          return id;
	        }

	      case 89:
	        {
	          return this.parseDo(this.startNode(), false);
	        }

	      case 55:
	      case 37:
	        {
	          this.readRegexp();
	          return this.parseRegExpLiteral(this.state.value);
	        }

	      case 0:
	        return this.parseNumericLiteral(this.state.value);

	      case 1:
	        return this.parseBigIntLiteral(this.state.value);

	      case 2:
	        return this.parseDecimalLiteral(this.state.value);

	      case 4:
	        return this.parseStringLiteral(this.state.value);

	      case 83:
	        return this.parseNullLiteral();

	      case 84:
	        return this.parseBooleanLiteral(true);

	      case 85:
	        return this.parseBooleanLiteral(false);

	      case 18:
	        {
	          const canBeArrow = this.state.potentialArrowAt === this.state.start;
	          return this.parseParenAndDistinguishExpression(canBeArrow);
	        }

	      case 10:
	      case 9:
	        {
	          return this.parseArrayLike(this.state.type === 10 ? 12 : 11, false, true, refExpressionErrors);
	        }

	      case 8:
	        {
	          return this.parseArrayLike(11, true, false, refExpressionErrors);
	        }

	      case 14:
	      case 15:
	        {
	          return this.parseObjectLike(this.state.type === 14 ? 17 : 16, false, true, refExpressionErrors);
	        }

	      case 13:
	        {
	          return this.parseObjectLike(16, false, false, refExpressionErrors);
	        }

	      case 67:
	        return this.parseFunctionOrFunctionSent();

	      case 32:
	        this.parseDecorators();

	      case 79:
	        node = this.startNode();
	        this.takeDecorators(node);
	        return this.parseClass(node, false);

	      case 76:
	        return this.parseNewOrNewTarget();

	      case 30:
	        return this.parseTemplate(false);

	      case 23:
	        {
	          node = this.startNode();
	          this.next();
	          node.object = null;
	          const callee = node.callee = this.parseNoCallExpr();

	          if (callee.type === "MemberExpression") {
	            return this.finishNode(node, "BindExpression");
	          } else {
	            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);
	          }
	        }

	      case 6:
	        {
	          this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, this.state.value);
	          return this.parsePrivateName();
	        }

	      case 38:
	        if (this.getPluginOption("pipelineOperator", "proposal") === "hack" && this.getPluginOption("pipelineOperator", "topicToken") === "%") {
	          this.state.value = "%";
	          this.state.type = 53;
	          this.state.pos--;
	          this.state.end--;
	          this.state.endLoc.column--;
	        } else {
	          throw this.unexpected();
	        }

	      case 53:
	      case 33:
	        {
	          const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");

	          if (pipeProposal) {
	            node = this.startNode();
	            const start = this.state.start;
	            const tokenType = this.state.type;
	            this.next();
	            return this.finishTopicReference(node, start, pipeProposal, tokenType);
	          }
	        }

	      case 50:
	        {
	          if (this.state.value === "<") {
	            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());

	            if (isIdentifierStart$2(lookaheadCh) || lookaheadCh === 62) {
	              this.expectOnePlugin(["jsx", "flow", "typescript"]);
	            }
	          }
	        }

	      default:
	        throw this.unexpected();
	    }
	  }

	  finishTopicReference(node, start, pipeProposal, tokenType) {
	    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {
	      let nodeType;

	      if (pipeProposal === "smart") {
	        nodeType = "PipelinePrimaryTopicReference";
	      } else {
	        nodeType = "TopicReference";
	      }

	      if (!this.topicReferenceIsAllowedInCurrentContext()) {
	        if (pipeProposal === "smart") {
	          this.raise(start, ErrorMessages.PrimaryTopicNotAllowed);
	        } else {
	          this.raise(start, ErrorMessages.PipeTopicUnbound);
	        }
	      }

	      this.registerTopicReference();
	      return this.finishNode(node, nodeType);
	    } else {
	      throw this.raise(start, ErrorMessages.PipeTopicUnconfiguredToken, tokenLabelName(tokenType));
	    }
	  }

	  testTopicReferenceConfiguration(pipeProposal, start, tokenType) {
	    switch (pipeProposal) {
	      case "hack":
	        {
	          const pluginTopicToken = this.getPluginOption("pipelineOperator", "topicToken");
	          return tokenLabelName(tokenType) === pluginTopicToken;
	        }

	      case "smart":
	        return tokenType === 33;

	      default:
	        throw this.raise(start, ErrorMessages.PipeTopicRequiresHackPipes);
	    }
	  }

	  parseAsyncArrowUnaryFunction(node) {
	    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
	    const params = [this.parseIdentifier()];
	    this.prodParam.exit();

	    if (this.hasPrecedingLineBreak()) {
	      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);
	    }

	    this.expect(27);
	    this.parseArrowExpression(node, params, true);
	    return node;
	  }

	  parseDo(node, isAsync) {
	    this.expectPlugin("doExpressions");

	    if (isAsync) {
	      this.expectPlugin("asyncDoExpressions");
	    }

	    node.async = isAsync;
	    this.next();
	    const oldLabels = this.state.labels;
	    this.state.labels = [];

	    if (isAsync) {
	      this.prodParam.enter(PARAM_AWAIT);
	      node.body = this.parseBlock();
	      this.prodParam.exit();
	    } else {
	      node.body = this.parseBlock();
	    }

	    this.state.labels = oldLabels;
	    return this.finishNode(node, "DoExpression");
	  }

	  parseSuper() {
	    const node = this.startNode();
	    this.next();

	    if (this.match(18) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {
	      this.raise(node.start, ErrorMessages.SuperNotAllowed);
	    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {
	      this.raise(node.start, ErrorMessages.UnexpectedSuper);
	    }

	    if (!this.match(18) && !this.match(8) && !this.match(24)) {
	      this.raise(node.start, ErrorMessages.UnsupportedSuper);
	    }

	    return this.finishNode(node, "Super");
	  }

	  parseMaybePrivateName(isPrivateNameAllowed) {
	    const isPrivate = this.match(6);

	    if (isPrivate) {
	      if (!isPrivateNameAllowed) {
	        this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);
	      }

	      return this.parsePrivateName();
	    } else {
	      return this.parseIdentifier(true);
	    }
	  }

	  parsePrivateName() {
	    const node = this.startNode();
	    const id = this.startNodeAt(this.state.start + 1, new Position$1(this.state.curLine, this.state.start + 1 - this.state.lineStart));
	    const name = this.state.value;
	    this.next();
	    node.id = this.createIdentifier(id, name);
	    return this.finishNode(node, "PrivateName");
	  }

	  parseFunctionOrFunctionSent() {
	    const node = this.startNode();
	    this.next();

	    if (this.prodParam.hasYield && this.match(24)) {
	      const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
	      this.next();
	      return this.parseMetaProperty(node, meta, "sent");
	    }

	    return this.parseFunction(node);
	  }

	  parseMetaProperty(node, meta, propertyName) {
	    node.meta = meta;

	    if (meta.name === "function" && propertyName === "sent") {
	      if (this.isContextual(propertyName)) {
	        this.expectPlugin("functionSent");
	      } else if (!this.hasPlugin("functionSent")) {
	        this.unexpected();
	      }
	    }

	    const containsEsc = this.state.containsEsc;
	    node.property = this.parseIdentifier(true);

	    if (node.property.name !== propertyName || containsEsc) {
	      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);
	    }

	    return this.finishNode(node, "MetaProperty");
	  }

	  parseImportMetaProperty(node) {
	    const id = this.createIdentifier(this.startNodeAtNode(node), "import");
	    this.next();

	    if (this.isContextual("meta")) {
	      if (!this.inModule) {
	        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);
	      }

	      this.sawUnambiguousESM = true;
	    }

	    return this.parseMetaProperty(node, id, "meta");
	  }

	  parseLiteralAtNode(value, type, node) {
	    this.addExtra(node, "rawValue", value);
	    this.addExtra(node, "raw", this.input.slice(node.start, this.state.end));
	    node.value = value;
	    this.next();
	    return this.finishNode(node, type);
	  }

	  parseLiteral(value, type) {
	    const node = this.startNode();
	    return this.parseLiteralAtNode(value, type, node);
	  }

	  parseStringLiteral(value) {
	    return this.parseLiteral(value, "StringLiteral");
	  }

	  parseNumericLiteral(value) {
	    return this.parseLiteral(value, "NumericLiteral");
	  }

	  parseBigIntLiteral(value) {
	    return this.parseLiteral(value, "BigIntLiteral");
	  }

	  parseDecimalLiteral(value) {
	    return this.parseLiteral(value, "DecimalLiteral");
	  }

	  parseRegExpLiteral(value) {
	    const node = this.parseLiteral(value.value, "RegExpLiteral");
	    node.pattern = value.pattern;
	    node.flags = value.flags;
	    return node;
	  }

	  parseBooleanLiteral(value) {
	    const node = this.startNode();
	    node.value = value;
	    this.next();
	    return this.finishNode(node, "BooleanLiteral");
	  }

	  parseNullLiteral() {
	    const node = this.startNode();
	    this.next();
	    return this.finishNode(node, "NullLiteral");
	  }

	  parseParenAndDistinguishExpression(canBeArrow) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    let val;
	    this.next();
	    this.expressionScope.enter(newArrowHeadScope());
	    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
	    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
	    this.state.maybeInArrowParameters = true;
	    this.state.inFSharpPipelineDirectBody = false;
	    const innerStartPos = this.state.start;
	    const innerStartLoc = this.state.startLoc;
	    const exprList = [];
	    const refExpressionErrors = new ExpressionErrors();
	    let first = true;
	    let spreadStart;
	    let optionalCommaStart;

	    while (!this.match(19)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(20, refExpressionErrors.optionalParameters === -1 ? null : refExpressionErrors.optionalParameters);

	        if (this.match(19)) {
	          optionalCommaStart = this.state.start;
	          break;
	        }
	      }

	      if (this.match(29)) {
	        const spreadNodeStartPos = this.state.start;
	        const spreadNodeStartLoc = this.state.startLoc;
	        spreadStart = this.state.start;
	        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));
	        this.checkCommaAfterRest(41);
	        break;
	      } else {
	        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
	      }
	    }

	    const innerEndPos = this.state.lastTokEnd;
	    const innerEndLoc = this.state.lastTokEndLoc;
	    this.expect(19);
	    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
	    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
	    let arrowNode = this.startNodeAt(startPos, startLoc);

	    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {
	      this.expressionScope.validateAsPattern();
	      this.expressionScope.exit();
	      this.parseArrowExpression(arrowNode, exprList, false);
	      return arrowNode;
	    }

	    this.expressionScope.exit();

	    if (!exprList.length) {
	      this.unexpected(this.state.lastTokStart);
	    }

	    if (optionalCommaStart) this.unexpected(optionalCommaStart);
	    if (spreadStart) this.unexpected(spreadStart);
	    this.checkExpressionErrors(refExpressionErrors, true);
	    this.toReferencedListDeep(exprList, true);

	    if (exprList.length > 1) {
	      val = this.startNodeAt(innerStartPos, innerStartLoc);
	      val.expressions = exprList;
	      this.finishNode(val, "SequenceExpression");
	      this.resetEndLocation(val, innerEndPos, innerEndLoc);
	    } else {
	      val = exprList[0];
	    }

	    if (!this.options.createParenthesizedExpressions) {
	      this.addExtra(val, "parenthesized", true);
	      this.addExtra(val, "parenStart", startPos);
	      return val;
	    }

	    const parenExpression = this.startNodeAt(startPos, startLoc);
	    parenExpression.expression = val;
	    this.finishNode(parenExpression, "ParenthesizedExpression");
	    return parenExpression;
	  }

	  shouldParseArrow(params) {
	    return !this.canInsertSemicolon();
	  }

	  parseArrow(node) {
	    if (this.eat(27)) {
	      return node;
	    }
	  }

	  parseParenItem(node, startPos, startLoc) {
	    return node;
	  }

	  parseNewOrNewTarget() {
	    const node = this.startNode();
	    this.next();

	    if (this.match(24)) {
	      const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
	      this.next();
	      const metaProp = this.parseMetaProperty(node, meta, "target");

	      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {
	        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);
	      }

	      return metaProp;
	    }

	    return this.parseNew(node);
	  }

	  parseNew(node) {
	    node.callee = this.parseNoCallExpr();

	    if (node.callee.type === "Import") {
	      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);
	    } else if (this.isOptionalChain(node.callee)) {
	      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);
	    } else if (this.eat(26)) {
	      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);
	    }

	    this.parseNewArguments(node);
	    return this.finishNode(node, "NewExpression");
	  }

	  parseNewArguments(node) {
	    if (this.eat(18)) {
	      const args = this.parseExprList(19);
	      this.toReferencedList(args);
	      node.arguments = args;
	    } else {
	      node.arguments = [];
	    }
	  }

	  parseTemplateElement(isTagged) {
	    const elem = this.startNode();

	    if (this.state.value === null) {
	      if (!isTagged) {
	        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);
	      }
	    }

	    elem.value = {
	      raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
	      cooked: this.state.value
	    };
	    this.next();
	    elem.tail = this.match(30);
	    return this.finishNode(elem, "TemplateElement");
	  }

	  parseTemplate(isTagged) {
	    const node = this.startNode();
	    this.next();
	    node.expressions = [];
	    let curElt = this.parseTemplateElement(isTagged);
	    node.quasis = [curElt];

	    while (!curElt.tail) {
	      this.expect(31);
	      node.expressions.push(this.parseTemplateSubstitution());
	      this.expect(16);
	      node.quasis.push(curElt = this.parseTemplateElement(isTagged));
	    }

	    this.next();
	    return this.finishNode(node, "TemplateLiteral");
	  }

	  parseTemplateSubstitution() {
	    return this.parseExpression();
	  }

	  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
	    if (isRecord) {
	      this.expectPlugin("recordAndTuple");
	    }

	    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
	    this.state.inFSharpPipelineDirectBody = false;
	    const propHash = Object.create(null);
	    let first = true;
	    const node = this.startNode();
	    node.properties = [];
	    this.next();

	    while (!this.match(close)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(20);

	        if (this.match(close)) {
	          this.addExtra(node, "trailingComma", this.state.lastTokStart);
	          break;
	        }
	      }

	      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);

	      if (!isPattern) {
	        this.checkProto(prop, isRecord, propHash, refExpressionErrors);
	      }

	      if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") {
	        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);
	      }

	      if (prop.shorthand) {
	        this.addExtra(prop, "shorthand", true);
	      }

	      node.properties.push(prop);
	    }

	    this.next();
	    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
	    let type = "ObjectExpression";

	    if (isPattern) {
	      type = "ObjectPattern";
	    } else if (isRecord) {
	      type = "RecordExpression";
	    }

	    return this.finishNode(node, type);
	  }

	  maybeAsyncOrAccessorProp(prop) {
	    return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(8) || this.match(54));
	  }

	  parsePropertyDefinition(isPattern, refExpressionErrors) {
	    let decorators = [];

	    if (this.match(32)) {
	      if (this.hasPlugin("decorators")) {
	        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);
	      }

	      while (this.match(32)) {
	        decorators.push(this.parseDecorator());
	      }
	    }

	    const prop = this.startNode();
	    let isGenerator = false;
	    let isAsync = false;
	    let isAccessor = false;
	    let startPos;
	    let startLoc;

	    if (this.match(29)) {
	      if (decorators.length) this.unexpected();

	      if (isPattern) {
	        this.next();
	        prop.argument = this.parseIdentifier();
	        this.checkCommaAfterRest(125);
	        return this.finishNode(prop, "RestElement");
	      }

	      return this.parseSpread();
	    }

	    if (decorators.length) {
	      prop.decorators = decorators;
	      decorators = [];
	    }

	    prop.method = false;

	    if (isPattern || refExpressionErrors) {
	      startPos = this.state.start;
	      startLoc = this.state.startLoc;
	    }

	    if (!isPattern) {
	      isGenerator = this.eat(54);
	    }

	    const containsEsc = this.state.containsEsc;
	    const key = this.parsePropertyName(prop, false);

	    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
	      const keyName = key.name;

	      if (keyName === "async" && !this.hasPrecedingLineBreak()) {
	        isAsync = true;
	        this.resetPreviousNodeTrailingComments(key);
	        isGenerator = this.eat(54);
	        this.parsePropertyName(prop, false);
	      }

	      if (keyName === "get" || keyName === "set") {
	        isAccessor = true;
	        this.resetPreviousNodeTrailingComments(key);
	        prop.kind = keyName;

	        if (this.match(54)) {
	          isGenerator = true;
	          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);
	          this.next();
	        }

	        this.parsePropertyName(prop, false);
	      }
	    }

	    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
	    return prop;
	  }

	  getGetterSetterExpectedParamCount(method) {
	    return method.kind === "get" ? 0 : 1;
	  }

	  getObjectOrClassMethodParams(method) {
	    return method.params;
	  }

	  checkGetterSetterParams(method) {
	    var _params;

	    const paramCount = this.getGetterSetterExpectedParamCount(method);
	    const params = this.getObjectOrClassMethodParams(method);
	    const start = method.start;

	    if (params.length !== paramCount) {
	      if (method.kind === "get") {
	        this.raise(start, ErrorMessages.BadGetterArity);
	      } else {
	        this.raise(start, ErrorMessages.BadSetterArity);
	      }
	    }

	    if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") {
	      this.raise(start, ErrorMessages.BadSetterRestParameter);
	    }
	  }

	  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
	    if (isAccessor) {
	      this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
	      this.checkGetterSetterParams(prop);
	      return prop;
	    }

	    if (isAsync || isGenerator || this.match(18)) {
	      if (isPattern) this.unexpected();
	      prop.kind = "method";
	      prop.method = true;
	      return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
	    }
	  }

	  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
	    prop.shorthand = false;

	    if (this.eat(22)) {
	      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
	      return this.finishNode(prop, "ObjectProperty");
	    }

	    if (!prop.computed && prop.key.type === "Identifier") {
	      this.checkReservedWord(prop.key.name, prop.key.start, true, false);

	      if (isPattern) {
	        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));
	      } else if (this.match(35) && refExpressionErrors) {
	        if (refExpressionErrors.shorthandAssign === -1) {
	          refExpressionErrors.shorthandAssign = this.state.start;
	        }

	        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));
	      } else {
	        prop.value = cloneIdentifier(prop.key);
	      }

	      prop.shorthand = true;
	      return this.finishNode(prop, "ObjectProperty");
	    }
	  }

	  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
	    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);
	    if (!node) this.unexpected();
	    return node;
	  }

	  parsePropertyName(prop, isPrivateNameAllowed) {
	    if (this.eat(8)) {
	      prop.computed = true;
	      prop.key = this.parseMaybeAssignAllowIn();
	      this.expect(11);
	    } else {
	      const oldInPropertyName = this.state.inPropertyName;
	      this.state.inPropertyName = true;
	      const type = this.state.type;
	      prop.key = type === 0 || type === 4 || type === 1 || type === 2 ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);

	      if (type !== 6) {
	        prop.computed = false;
	      }

	      this.state.inPropertyName = oldInPropertyName;
	    }

	    return prop.key;
	  }

	  initFunction(node, isAsync) {
	    node.id = null;
	    node.generator = false;
	    node.async = !!isAsync;
	  }

	  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
	    this.initFunction(node, isAsync);
	    node.generator = !!isGenerator;
	    const allowModifiers = isConstructor;
	    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
	    this.prodParam.enter(functionFlags(isAsync, node.generator));
	    this.parseFunctionParams(node, allowModifiers);
	    this.parseFunctionBodyAndFinish(node, type, true);
	    this.prodParam.exit();
	    this.scope.exit();
	    return node;
	  }

	  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
	    if (isTuple) {
	      this.expectPlugin("recordAndTuple");
	    }

	    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
	    this.state.inFSharpPipelineDirectBody = false;
	    const node = this.startNode();
	    this.next();
	    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);
	    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
	    return this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
	  }

	  parseArrowExpression(node, params, isAsync, trailingCommaPos) {
	    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
	    let flags = functionFlags(isAsync, false);

	    if (!this.match(8) && this.prodParam.hasIn) {
	      flags |= PARAM_IN;
	    }

	    this.prodParam.enter(flags);
	    this.initFunction(node, isAsync);
	    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;

	    if (params) {
	      this.state.maybeInArrowParameters = true;
	      this.setArrowFunctionParameters(node, params, trailingCommaPos);
	    }

	    this.state.maybeInArrowParameters = false;
	    this.parseFunctionBody(node, true);
	    this.prodParam.exit();
	    this.scope.exit();
	    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
	    return this.finishNode(node, "ArrowFunctionExpression");
	  }

	  setArrowFunctionParameters(node, params, trailingCommaPos) {
	    node.params = this.toAssignableList(params, trailingCommaPos, false);
	  }

	  parseFunctionBodyAndFinish(node, type, isMethod = false) {
	    this.parseFunctionBody(node, false, isMethod);
	    this.finishNode(node, type);
	  }

	  parseFunctionBody(node, allowExpression, isMethod = false) {
	    const isExpression = allowExpression && !this.match(13);
	    this.expressionScope.enter(newExpressionScope());

	    if (isExpression) {
	      node.body = this.parseMaybeAssign();
	      this.checkParams(node, false, allowExpression, false);
	    } else {
	      const oldStrict = this.state.strict;
	      const oldLabels = this.state.labels;
	      this.state.labels = [];
	      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);
	      node.body = this.parseBlock(true, false, hasStrictModeDirective => {
	        const nonSimple = !this.isSimpleParamList(node.params);

	        if (hasStrictModeDirective && nonSimple) {
	          const errorPos = (node.kind === "method" || node.kind === "constructor") && !!node.key ? node.key.end : node.start;
	          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);
	        }

	        const strictModeChanged = !oldStrict && this.state.strict;
	        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);

	        if (this.state.strict && node.id) {
	          this.checkLVal(node.id, "function name", BIND_OUTSIDE, undefined, undefined, strictModeChanged);
	        }
	      });
	      this.prodParam.exit();
	      this.expressionScope.exit();
	      this.state.labels = oldLabels;
	    }
	  }

	  isSimpleParamList(params) {
	    for (let i = 0, len = params.length; i < len; i++) {
	      if (params[i].type !== "Identifier") return false;
	    }

	    return true;
	  }

	  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
	    const checkClashes = new Set();

	    for (const param of node.params) {
	      this.checkLVal(param, "function parameter list", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);
	    }
	  }

	  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
	    const elts = [];
	    let first = true;

	    while (!this.eat(close)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(20);

	        if (this.match(close)) {
	          if (nodeForExtra) {
	            this.addExtra(nodeForExtra, "trailingComma", this.state.lastTokStart);
	          }

	          this.next();
	          break;
	        }
	      }

	      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
	    }

	    return elts;
	  }

	  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
	    let elt;

	    if (this.match(20)) {
	      if (!allowEmpty) {
	        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, ",");
	      }

	      elt = null;
	    } else if (this.match(29)) {
	      const spreadNodeStartPos = this.state.start;
	      const spreadNodeStartLoc = this.state.startLoc;
	      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);
	    } else if (this.match(25)) {
	      this.expectPlugin("partialApplication");

	      if (!allowPlaceholder) {
	        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);
	      }

	      const node = this.startNode();
	      this.next();
	      elt = this.finishNode(node, "ArgumentPlaceholder");
	    } else {
	      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
	    }

	    return elt;
	  }

	  parseIdentifier(liberal) {
	    const node = this.startNode();
	    const name = this.parseIdentifierName(node.start, liberal);
	    return this.createIdentifier(node, name);
	  }

	  createIdentifier(node, name) {
	    node.name = name;
	    node.loc.identifierName = name;
	    return this.finishNode(node, "Identifier");
	  }

	  parseIdentifierName(pos, liberal) {
	    let name;
	    const {
	      start,
	      type
	    } = this.state;

	    if (type === 5) {
	      name = this.state.value;
	    } else if (tokenIsKeyword(type)) {
	      name = tokenLabelName(type);
	    } else {
	      throw this.unexpected();
	    }

	    if (liberal) {
	      this.state.type = 5;
	    } else {
	      this.checkReservedWord(name, start, tokenIsKeyword(type), false);
	    }

	    this.next();
	    return name;
	  }

	  checkReservedWord(word, startLoc, checkKeywords, isBinding) {
	    if (word.length > 10) {
	      return;
	    }

	    if (!canBeReservedWord(word)) {
	      return;
	    }

	    if (word === "yield") {
	      if (this.prodParam.hasYield) {
	        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);
	        return;
	      }
	    } else if (word === "await") {
	      if (this.prodParam.hasAwait) {
	        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);
	        return;
	      } else if (this.scope.inStaticBlock) {
	        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);
	        return;
	      } else {
	        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);
	      }
	    } else if (word === "arguments") {
	      if (this.scope.inClassAndNotInNonArrowFunction) {
	        this.raise(startLoc, ErrorMessages.ArgumentsInClass);
	        return;
	      }
	    }

	    if (checkKeywords && isKeyword$2(word)) {
	      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);
	      return;
	    }

	    const reservedTest = !this.state.strict ? isReservedWord$1 : isBinding ? isStrictBindReservedWord$1 : isStrictReservedWord$1;

	    if (reservedTest(word, this.inModule)) {
	      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);
	    }
	  }

	  isAwaitAllowed() {
	    if (this.prodParam.hasAwait) return true;

	    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {
	      return true;
	    }

	    return false;
	  }

	  parseAwait(startPos, startLoc) {
	    const node = this.startNodeAt(startPos, startLoc);
	    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);

	    if (this.eat(54)) {
	      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);
	    }

	    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {
	      if (this.isAmbiguousAwait()) {
	        this.ambiguousScriptDifferentAst = true;
	      } else {
	        this.sawUnambiguousESM = true;
	      }
	    }

	    if (!this.state.soloAwait) {
	      node.argument = this.parseMaybeUnary(null, true);
	    }

	    return this.finishNode(node, "AwaitExpression");
	  }

	  isAmbiguousAwait() {
	    return this.hasPrecedingLineBreak() || this.match(52) || this.match(18) || this.match(8) || this.match(30) || this.match(3) || this.match(55) || this.hasPlugin("v8intrinsic") && this.match(53);
	  }

	  parseYield() {
	    const node = this.startNode();
	    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);
	    this.next();
	    let delegating = false;
	    let argument = null;

	    if (!this.hasPrecedingLineBreak()) {
	      delegating = this.eat(54);

	      switch (this.state.type) {
	        case 21:
	        case 7:
	        case 16:
	        case 19:
	        case 11:
	        case 17:
	        case 22:
	        case 20:
	          if (!delegating) break;

	        default:
	          argument = this.parseMaybeAssign();
	      }
	    }

	    node.delegate = delegating;
	    node.argument = argument;
	    return this.finishNode(node, "YieldExpression");
	  }

	  checkPipelineAtInfixOperator(left, leftStartPos) {
	    if (this.getPluginOption("pipelineOperator", "proposal") === "smart") {
	      if (left.type === "SequenceExpression") {
	        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);
	      }
	    }
	  }

	  checkHackPipeBodyEarlyErrors(startPos) {
	    if (!this.topicReferenceWasUsedInCurrentContext()) {
	      this.raise(startPos, ErrorMessages.PipeTopicUnused);
	    }
	  }

	  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {
	    const bodyNode = this.startNodeAt(startPos, startLoc);

	    if (this.isSimpleReference(childExpr)) {
	      bodyNode.callee = childExpr;
	      return this.finishNode(bodyNode, "PipelineBareFunction");
	    } else {
	      this.checkSmartPipeTopicBodyEarlyErrors(startPos);
	      bodyNode.expression = childExpr;
	      return this.finishNode(bodyNode, "PipelineTopicExpression");
	    }
	  }

	  isSimpleReference(expression) {
	    switch (expression.type) {
	      case "MemberExpression":
	        return !expression.computed && this.isSimpleReference(expression.object);

	      case "Identifier":
	        return true;

	      default:
	        return false;
	    }
	  }

	  checkSmartPipeTopicBodyEarlyErrors(startPos) {
	    if (this.match(27)) {
	      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);
	    } else if (!this.topicReferenceWasUsedInCurrentContext()) {
	      this.raise(startPos, ErrorMessages.PipelineTopicUnused);
	    }
	  }

	  withTopicBindingContext(callback) {
	    const outerContextTopicState = this.state.topicContext;
	    this.state.topicContext = {
	      maxNumOfResolvableTopics: 1,
	      maxTopicIndex: null
	    };

	    try {
	      return callback();
	    } finally {
	      this.state.topicContext = outerContextTopicState;
	    }
	  }

	  withSmartMixTopicForbiddingContext(callback) {
	    const proposal = this.getPluginOption("pipelineOperator", "proposal");

	    if (proposal === "smart") {
	      const outerContextTopicState = this.state.topicContext;
	      this.state.topicContext = {
	        maxNumOfResolvableTopics: 0,
	        maxTopicIndex: null
	      };

	      try {
	        return callback();
	      } finally {
	        this.state.topicContext = outerContextTopicState;
	      }
	    } else {
	      return callback();
	    }
	  }

	  withSoloAwaitPermittingContext(callback) {
	    const outerContextSoloAwaitState = this.state.soloAwait;
	    this.state.soloAwait = true;

	    try {
	      return callback();
	    } finally {
	      this.state.soloAwait = outerContextSoloAwaitState;
	    }
	  }

	  allowInAnd(callback) {
	    const flags = this.prodParam.currentFlags();
	    const prodParamToSet = PARAM_IN & ~flags;

	    if (prodParamToSet) {
	      this.prodParam.enter(flags | PARAM_IN);

	      try {
	        return callback();
	      } finally {
	        this.prodParam.exit();
	      }
	    }

	    return callback();
	  }

	  disallowInAnd(callback) {
	    const flags = this.prodParam.currentFlags();
	    const prodParamToClear = PARAM_IN & flags;

	    if (prodParamToClear) {
	      this.prodParam.enter(flags & ~PARAM_IN);

	      try {
	        return callback();
	      } finally {
	        this.prodParam.exit();
	      }
	    }

	    return callback();
	  }

	  registerTopicReference() {
	    this.state.topicContext.maxTopicIndex = 0;
	  }

	  topicReferenceIsAllowedInCurrentContext() {
	    return this.state.topicContext.maxNumOfResolvableTopics >= 1;
	  }

	  topicReferenceWasUsedInCurrentContext() {
	    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
	  }

	  parseFSharpPipelineBody(prec) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    this.state.potentialArrowAt = this.state.start;
	    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
	    this.state.inFSharpPipelineDirectBody = true;
	    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);
	    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
	    return ret;
	  }

	  parseModuleExpression() {
	    this.expectPlugin("moduleBlocks");
	    const node = this.startNode();
	    this.next();
	    this.eat(13);
	    const revertScopes = this.initializeScopes(true);
	    this.enterInitialScopes();
	    const program = this.startNode();

	    try {
	      node.body = this.parseProgram(program, 16, "module");
	    } finally {
	      revertScopes();
	    }

	    this.eat(16);
	    return this.finishNode(node, "ModuleExpression");
	  }

	}

	const loopLabel$1 = {
	  kind: "loop"
	},
	      switchLabel$1 = {
	  kind: "switch"
	};
	const FUNC_NO_FLAGS = 0b000,
	      FUNC_STATEMENT = 0b001,
	      FUNC_HANGING_STATEMENT = 0b010,
	      FUNC_NULLABLE_ID = 0b100;
	const loneSurrogate = /[\uD800-\uDFFF]/u;
	const keywordRelationalOperator = /in(?:stanceof)?/y;

	function babel7CompatTokens(tokens) {
	  for (let i = 0; i < tokens.length; i++) {
	    const token = tokens[i];
	    const {
	      type
	    } = token;

	    if (type === 6) {
	      {
	        const {
	          loc,
	          start,
	          value,
	          end
	        } = token;
	        const hashEndPos = start + 1;
	        const hashEndLoc = new Position$1(loc.start.line, loc.start.column + 1);
	        tokens.splice(i, 1, new Token$1({
	          type: getExportedToken(33),
	          value: "#",
	          start: start,
	          end: hashEndPos,
	          startLoc: loc.start,
	          endLoc: hashEndLoc
	        }), new Token$1({
	          type: getExportedToken(5),
	          value: value,
	          start: hashEndPos,
	          end: end,
	          startLoc: hashEndLoc,
	          endLoc: loc.end
	        }));
	        i++;
	        continue;
	      }
	    }

	    if (typeof type === "number") {
	      token.type = getExportedToken(type);
	    }
	  }

	  return tokens;
	}

	class StatementParser extends ExpressionParser {
	  parseTopLevel(file, program) {
	    file.program = this.parseProgram(program);
	    file.comments = this.state.comments;
	    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);
	    return this.finishNode(file, "File");
	  }

	  parseProgram(program, end = 7, sourceType = this.options.sourceType) {
	    program.sourceType = sourceType;
	    program.interpreter = this.parseInterpreterDirective();
	    this.parseBlockBody(program, true, true, end);

	    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {
	      for (const [name] of Array.from(this.scope.undefinedExports)) {
	        const pos = this.scope.undefinedExports.get(name);
	        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);
	      }
	    }

	    return this.finishNode(program, "Program");
	  }

	  stmtToDirective(stmt) {
	    const directive = stmt;
	    directive.type = "Directive";
	    directive.value = directive.expression;
	    delete directive.expression;
	    const directiveLiteral = directive.value;
	    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);
	    const val = directiveLiteral.value = raw.slice(1, -1);
	    this.addExtra(directiveLiteral, "raw", raw);
	    this.addExtra(directiveLiteral, "rawValue", val);
	    directiveLiteral.type = "DirectiveLiteral";
	    return directive;
	  }

	  parseInterpreterDirective() {
	    if (!this.match(34)) {
	      return null;
	    }

	    const node = this.startNode();
	    node.value = this.state.value;
	    this.next();
	    return this.finishNode(node, "InterpreterDirective");
	  }

	  isLet(context) {
	    if (!this.isContextual("let")) {
	      return false;
	    }

	    return this.isLetKeyword(context);
	  }

	  isLetKeyword(context) {
	    const next = this.nextTokenStart();
	    const nextCh = this.codePointAtPos(next);

	    if (nextCh === 92 || nextCh === 91) {
	      return true;
	    }

	    if (context) return false;
	    if (nextCh === 123) return true;

	    if (isIdentifierStart$2(nextCh)) {
	      keywordRelationalOperator.lastIndex = next;

	      if (keywordRelationalOperator.test(this.input)) {
	        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);

	        if (!isIdentifierChar$2(endCh) && endCh !== 92) {
	          return false;
	        }
	      }

	      return true;
	    }

	    return false;
	  }

	  parseStatement(context, topLevel) {
	    if (this.match(32)) {
	      this.parseDecorators(true);
	    }

	    return this.parseStatementContent(context, topLevel);
	  }

	  parseStatementContent(context, topLevel) {
	    let starttype = this.state.type;
	    const node = this.startNode();
	    let kind;

	    if (this.isLet(context)) {
	      starttype = 73;
	      kind = "let";
	    }

	    switch (starttype) {
	      case 59:
	        return this.parseBreakContinueStatement(node, true);

	      case 62:
	        return this.parseBreakContinueStatement(node, false);

	      case 63:
	        return this.parseDebuggerStatement(node);

	      case 89:
	        return this.parseDoStatement(node);

	      case 90:
	        return this.parseForStatement(node);

	      case 67:
	        if (this.lookaheadCharCode() === 46) break;

	        if (context) {
	          if (this.state.strict) {
	            this.raise(this.state.start, ErrorMessages.StrictFunction);
	          } else if (context !== "if" && context !== "label") {
	            this.raise(this.state.start, ErrorMessages.SloppyFunction);
	          }
	        }

	        return this.parseFunctionStatement(node, false, !context);

	      case 79:
	        if (context) this.unexpected();
	        return this.parseClass(node, true);

	      case 68:
	        return this.parseIfStatement(node);

	      case 69:
	        return this.parseReturnStatement(node);

	      case 70:
	        return this.parseSwitchStatement(node);

	      case 71:
	        return this.parseThrowStatement(node);

	      case 72:
	        return this.parseTryStatement(node);

	      case 74:
	      case 73:
	        kind = kind || this.state.value;

	        if (context && kind !== "var") {
	          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);
	        }

	        return this.parseVarStatement(node, kind);

	      case 91:
	        return this.parseWhileStatement(node);

	      case 75:
	        return this.parseWithStatement(node);

	      case 13:
	        return this.parseBlock();

	      case 21:
	        return this.parseEmptyStatement(node);

	      case 82:
	        {
	          const nextTokenCharCode = this.lookaheadCharCode();

	          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
	            break;
	          }
	        }

	      case 81:
	        {
	          if (!this.options.allowImportExportEverywhere && !topLevel) {
	            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);
	          }

	          this.next();
	          let result;

	          if (starttype === 82) {
	            result = this.parseImport(node);

	            if (result.type === "ImportDeclaration" && (!result.importKind || result.importKind === "value")) {
	              this.sawUnambiguousESM = true;
	            }
	          } else {
	            result = this.parseExport(node);

	            if (result.type === "ExportNamedDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportAllDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportDefaultDeclaration") {
	              this.sawUnambiguousESM = true;
	            }
	          }

	          this.assertModuleNodeAllowed(node);
	          return result;
	        }

	      default:
	        {
	          if (this.isAsyncFunction()) {
	            if (context) {
	              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);
	            }

	            this.next();
	            return this.parseFunctionStatement(node, true, !context);
	          }
	        }
	    }

	    const maybeName = this.state.value;
	    const expr = this.parseExpression();

	    if (starttype === 5 && expr.type === "Identifier" && this.eat(22)) {
	      return this.parseLabeledStatement(node, maybeName, expr, context);
	    } else {
	      return this.parseExpressionStatement(node, expr);
	    }
	  }

	  assertModuleNodeAllowed(node) {
	    if (!this.options.allowImportExportEverywhere && !this.inModule) {
	      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);
	    }
	  }

	  takeDecorators(node) {
	    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];

	    if (decorators.length) {
	      node.decorators = decorators;
	      this.resetStartLocationFromNode(node, decorators[0]);
	      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];
	    }
	  }

	  canHaveLeadingDecorator() {
	    return this.match(79);
	  }

	  parseDecorators(allowExport) {
	    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];

	    while (this.match(32)) {
	      const decorator = this.parseDecorator();
	      currentContextDecorators.push(decorator);
	    }

	    if (this.match(81)) {
	      if (!allowExport) {
	        this.unexpected();
	      }

	      if (this.hasPlugin("decorators") && !this.getPluginOption("decorators", "decoratorsBeforeExport")) {
	        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);
	      }
	    } else if (!this.canHaveLeadingDecorator()) {
	      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);
	    }
	  }

	  parseDecorator() {
	    this.expectOnePlugin(["decorators-legacy", "decorators"]);
	    const node = this.startNode();
	    this.next();

	    if (this.hasPlugin("decorators")) {
	      this.state.decoratorStack.push([]);
	      const startPos = this.state.start;
	      const startLoc = this.state.startLoc;
	      let expr;

	      if (this.eat(18)) {
	        expr = this.parseExpression();
	        this.expect(19);
	      } else {
	        expr = this.parseIdentifier(false);

	        while (this.eat(24)) {
	          const node = this.startNodeAt(startPos, startLoc);
	          node.object = expr;
	          node.property = this.parseIdentifier(true);
	          node.computed = false;
	          expr = this.finishNode(node, "MemberExpression");
	        }
	      }

	      node.expression = this.parseMaybeDecoratorArguments(expr);
	      this.state.decoratorStack.pop();
	    } else {
	      node.expression = this.parseExprSubscripts();
	    }

	    return this.finishNode(node, "Decorator");
	  }

	  parseMaybeDecoratorArguments(expr) {
	    if (this.eat(18)) {
	      const node = this.startNodeAtNode(expr);
	      node.callee = expr;
	      node.arguments = this.parseCallExpressionArguments(19, false);
	      this.toReferencedList(node.arguments);
	      return this.finishNode(node, "CallExpression");
	    }

	    return expr;
	  }

	  parseBreakContinueStatement(node, isBreak) {
	    this.next();

	    if (this.isLineTerminator()) {
	      node.label = null;
	    } else {
	      node.label = this.parseIdentifier();
	      this.semicolon();
	    }

	    this.verifyBreakContinue(node, isBreak);
	    return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
	  }

	  verifyBreakContinue(node, isBreak) {
	    let i;

	    for (i = 0; i < this.state.labels.length; ++i) {
	      const lab = this.state.labels[i];

	      if (node.label == null || lab.name === node.label.name) {
	        if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
	        if (node.label && isBreak) break;
	      }
	    }

	    if (i === this.state.labels.length) {
	      this.raise(node.start, ErrorMessages.IllegalBreakContinue, isBreak ? "break" : "continue");
	    }
	  }

	  parseDebuggerStatement(node) {
	    this.next();
	    this.semicolon();
	    return this.finishNode(node, "DebuggerStatement");
	  }

	  parseHeaderExpression() {
	    this.expect(18);
	    const val = this.parseExpression();
	    this.expect(19);
	    return val;
	  }

	  parseDoStatement(node) {
	    this.next();
	    this.state.labels.push(loopLabel$1);
	    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("do"));
	    this.state.labels.pop();
	    this.expect(91);
	    node.test = this.parseHeaderExpression();
	    this.eat(21);
	    return this.finishNode(node, "DoWhileStatement");
	  }

	  parseForStatement(node) {
	    this.next();
	    this.state.labels.push(loopLabel$1);
	    let awaitAt = -1;

	    if (this.isAwaitAllowed() && this.eatContextual("await")) {
	      awaitAt = this.state.lastTokStart;
	    }

	    this.scope.enter(SCOPE_OTHER);
	    this.expect(18);

	    if (this.match(21)) {
	      if (awaitAt > -1) {
	        this.unexpected(awaitAt);
	      }

	      return this.parseFor(node, null);
	    }

	    const startsWithLet = this.isContextual("let");
	    const isLet = startsWithLet && this.isLetKeyword();

	    if (this.match(73) || this.match(74) || isLet) {
	      const init = this.startNode();
	      const kind = isLet ? "let" : this.state.value;
	      this.next();
	      this.parseVar(init, true, kind);
	      this.finishNode(init, "VariableDeclaration");

	      if ((this.match(57) || this.isContextual("of")) && init.declarations.length === 1) {
	        return this.parseForIn(node, init, awaitAt);
	      }

	      if (awaitAt > -1) {
	        this.unexpected(awaitAt);
	      }

	      return this.parseFor(node, init);
	    }

	    const startsWithUnescapedName = this.match(5) && !this.state.containsEsc;
	    const refExpressionErrors = new ExpressionErrors();
	    const init = this.parseExpression(true, refExpressionErrors);
	    const isForOf = this.isContextual("of");

	    if (isForOf) {
	      if (startsWithLet) {
	        this.raise(init.start, ErrorMessages.ForOfLet);
	      } else if (awaitAt === -1 && startsWithUnescapedName && init.type === "Identifier" && init.name === "async") {
	        this.raise(init.start, ErrorMessages.ForOfAsync);
	      }
	    }

	    if (isForOf || this.match(57)) {
	      this.toAssignable(init, true);
	      const description = isForOf ? "for-of statement" : "for-in statement";
	      this.checkLVal(init, description);
	      return this.parseForIn(node, init, awaitAt);
	    } else {
	      this.checkExpressionErrors(refExpressionErrors, true);
	    }

	    if (awaitAt > -1) {
	      this.unexpected(awaitAt);
	    }

	    return this.parseFor(node, init);
	  }

	  parseFunctionStatement(node, isAsync, declarationPosition) {
	    this.next();
	    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);
	  }

	  parseIfStatement(node) {
	    this.next();
	    node.test = this.parseHeaderExpression();
	    node.consequent = this.parseStatement("if");
	    node.alternate = this.eat(65) ? this.parseStatement("if") : null;
	    return this.finishNode(node, "IfStatement");
	  }

	  parseReturnStatement(node) {
	    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {
	      this.raise(this.state.start, ErrorMessages.IllegalReturn);
	    }

	    this.next();

	    if (this.isLineTerminator()) {
	      node.argument = null;
	    } else {
	      node.argument = this.parseExpression();
	      this.semicolon();
	    }

	    return this.finishNode(node, "ReturnStatement");
	  }

	  parseSwitchStatement(node) {
	    this.next();
	    node.discriminant = this.parseHeaderExpression();
	    const cases = node.cases = [];
	    this.expect(13);
	    this.state.labels.push(switchLabel$1);
	    this.scope.enter(SCOPE_OTHER);
	    let cur;

	    for (let sawDefault; !this.match(16);) {
	      if (this.match(60) || this.match(64)) {
	        const isCase = this.match(60);
	        if (cur) this.finishNode(cur, "SwitchCase");
	        cases.push(cur = this.startNode());
	        cur.consequent = [];
	        this.next();

	        if (isCase) {
	          cur.test = this.parseExpression();
	        } else {
	          if (sawDefault) {
	            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);
	          }

	          sawDefault = true;
	          cur.test = null;
	        }

	        this.expect(22);
	      } else {
	        if (cur) {
	          cur.consequent.push(this.parseStatement(null));
	        } else {
	          this.unexpected();
	        }
	      }
	    }

	    this.scope.exit();
	    if (cur) this.finishNode(cur, "SwitchCase");
	    this.next();
	    this.state.labels.pop();
	    return this.finishNode(node, "SwitchStatement");
	  }

	  parseThrowStatement(node) {
	    this.next();

	    if (this.hasPrecedingLineBreak()) {
	      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);
	    }

	    node.argument = this.parseExpression();
	    this.semicolon();
	    return this.finishNode(node, "ThrowStatement");
	  }

	  parseCatchClauseParam() {
	    const param = this.parseBindingAtom();
	    const simple = param.type === "Identifier";
	    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);
	    this.checkLVal(param, "catch clause", BIND_LEXICAL);
	    return param;
	  }

	  parseTryStatement(node) {
	    this.next();
	    node.block = this.parseBlock();
	    node.handler = null;

	    if (this.match(61)) {
	      const clause = this.startNode();
	      this.next();

	      if (this.match(18)) {
	        this.expect(18);
	        clause.param = this.parseCatchClauseParam();
	        this.expect(19);
	      } else {
	        clause.param = null;
	        this.scope.enter(SCOPE_OTHER);
	      }

	      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));
	      this.scope.exit();
	      node.handler = this.finishNode(clause, "CatchClause");
	    }

	    node.finalizer = this.eat(66) ? this.parseBlock() : null;

	    if (!node.handler && !node.finalizer) {
	      this.raise(node.start, ErrorMessages.NoCatchOrFinally);
	    }

	    return this.finishNode(node, "TryStatement");
	  }

	  parseVarStatement(node, kind) {
	    this.next();
	    this.parseVar(node, false, kind);
	    this.semicolon();
	    return this.finishNode(node, "VariableDeclaration");
	  }

	  parseWhileStatement(node) {
	    this.next();
	    node.test = this.parseHeaderExpression();
	    this.state.labels.push(loopLabel$1);
	    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("while"));
	    this.state.labels.pop();
	    return this.finishNode(node, "WhileStatement");
	  }

	  parseWithStatement(node) {
	    if (this.state.strict) {
	      this.raise(this.state.start, ErrorMessages.StrictWith);
	    }

	    this.next();
	    node.object = this.parseHeaderExpression();
	    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("with"));
	    return this.finishNode(node, "WithStatement");
	  }

	  parseEmptyStatement(node) {
	    this.next();
	    return this.finishNode(node, "EmptyStatement");
	  }

	  parseLabeledStatement(node, maybeName, expr, context) {
	    for (const label of this.state.labels) {
	      if (label.name === maybeName) {
	        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);
	      }
	    }

	    const kind = tokenIsLoop(this.state.type) ? "loop" : this.match(70) ? "switch" : null;

	    for (let i = this.state.labels.length - 1; i >= 0; i--) {
	      const label = this.state.labels[i];

	      if (label.statementStart === node.start) {
	        label.statementStart = this.state.start;
	        label.kind = kind;
	      } else {
	        break;
	      }
	    }

	    this.state.labels.push({
	      name: maybeName,
	      kind: kind,
	      statementStart: this.state.start
	    });
	    node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
	    this.state.labels.pop();
	    node.label = expr;
	    return this.finishNode(node, "LabeledStatement");
	  }

	  parseExpressionStatement(node, expr) {
	    node.expression = expr;
	    this.semicolon();
	    return this.finishNode(node, "ExpressionStatement");
	  }

	  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
	    const node = this.startNode();

	    if (allowDirectives) {
	      this.state.strictErrors.clear();
	    }

	    this.expect(13);

	    if (createNewLexicalScope) {
	      this.scope.enter(SCOPE_OTHER);
	    }

	    this.parseBlockBody(node, allowDirectives, false, 16, afterBlockParse);

	    if (createNewLexicalScope) {
	      this.scope.exit();
	    }

	    return this.finishNode(node, "BlockStatement");
	  }

	  isValidDirective(stmt) {
	    return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
	  }

	  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
	    const body = node.body = [];
	    const directives = node.directives = [];
	    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);
	  }

	  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
	    const oldStrict = this.state.strict;
	    let hasStrictModeDirective = false;
	    let parsedNonDirective = false;

	    while (!this.match(end)) {
	      const stmt = this.parseStatement(null, topLevel);

	      if (directives && !parsedNonDirective) {
	        if (this.isValidDirective(stmt)) {
	          const directive = this.stmtToDirective(stmt);
	          directives.push(directive);

	          if (!hasStrictModeDirective && directive.value.value === "use strict") {
	            hasStrictModeDirective = true;
	            this.setStrict(true);
	          }

	          continue;
	        }

	        parsedNonDirective = true;
	        this.state.strictErrors.clear();
	      }

	      body.push(stmt);
	    }

	    if (afterBlockParse) {
	      afterBlockParse.call(this, hasStrictModeDirective);
	    }

	    if (!oldStrict) {
	      this.setStrict(false);
	    }

	    this.next();
	  }

	  parseFor(node, init) {
	    node.init = init;
	    this.semicolon(false);
	    node.test = this.match(21) ? null : this.parseExpression();
	    this.semicolon(false);
	    node.update = this.match(19) ? null : this.parseExpression();
	    this.expect(19);
	    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for"));
	    this.scope.exit();
	    this.state.labels.pop();
	    return this.finishNode(node, "ForStatement");
	  }

	  parseForIn(node, init, awaitAt) {
	    const isForIn = this.match(57);
	    this.next();

	    if (isForIn) {
	      if (awaitAt > -1) this.unexpected(awaitAt);
	    } else {
	      node.await = awaitAt > -1;
	    }

	    if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
	      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? "for-in" : "for-of");
	    } else if (init.type === "AssignmentPattern") {
	      this.raise(init.start, ErrorMessages.InvalidLhs, "for-loop");
	    }

	    node.left = init;
	    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
	    this.expect(19);
	    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for"));
	    this.scope.exit();
	    this.state.labels.pop();
	    return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
	  }

	  parseVar(node, isFor, kind) {
	    const declarations = node.declarations = [];
	    const isTypescript = this.hasPlugin("typescript");
	    node.kind = kind;

	    for (;;) {
	      const decl = this.startNode();
	      this.parseVarId(decl, kind);

	      if (this.eat(35)) {
	        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();
	      } else {
	        if (kind === "const" && !(this.match(57) || this.isContextual("of"))) {
	          if (!isTypescript) {
	            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, "Const declarations");
	          }
	        } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(57) || this.isContextual("of")))) {
	          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, "Complex binding patterns");
	        }

	        decl.init = null;
	      }

	      declarations.push(this.finishNode(decl, "VariableDeclarator"));
	      if (!this.eat(20)) break;
	    }

	    return node;
	  }

	  parseVarId(decl, kind) {
	    decl.id = this.parseBindingAtom();
	    this.checkLVal(decl.id, "variable declaration", kind === "var" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== "var");
	  }

	  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {
	    const isStatement = statement & FUNC_STATEMENT;
	    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;
	    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);
	    this.initFunction(node, isAsync);

	    if (this.match(54) && isHangingStatement) {
	      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);
	    }

	    node.generator = this.eat(54);

	    if (isStatement) {
	      node.id = this.parseFunctionId(requireId);
	    }

	    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
	    this.state.maybeInArrowParameters = false;
	    this.scope.enter(SCOPE_FUNCTION);
	    this.prodParam.enter(functionFlags(isAsync, node.generator));

	    if (!isStatement) {
	      node.id = this.parseFunctionId();
	    }

	    this.parseFunctionParams(node, false);
	    this.withSmartMixTopicForbiddingContext(() => {
	      this.parseFunctionBodyAndFinish(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
	    });
	    this.prodParam.exit();
	    this.scope.exit();

	    if (isStatement && !isHangingStatement) {
	      this.registerFunctionStatementId(node);
	    }

	    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
	    return node;
	  }

	  parseFunctionId(requireId) {
	    return requireId || this.match(5) ? this.parseIdentifier() : null;
	  }

	  parseFunctionParams(node, allowModifiers) {
	    this.expect(18);
	    this.expressionScope.enter(newParameterDeclarationScope());
	    node.params = this.parseBindingList(19, 41, false, allowModifiers);
	    this.expressionScope.exit();
	  }

	  registerFunctionStatementId(node) {
	    if (!node.id) return;
	    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);
	  }

	  parseClass(node, isStatement, optionalId) {
	    this.next();
	    this.takeDecorators(node);
	    const oldStrict = this.state.strict;
	    this.state.strict = true;
	    this.parseClassId(node, isStatement, optionalId);
	    this.parseClassSuper(node);
	    node.body = this.parseClassBody(!!node.superClass, oldStrict);
	    return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
	  }

	  isClassProperty() {
	    return this.match(35) || this.match(21) || this.match(16);
	  }

	  isClassMethod() {
	    return this.match(18);
	  }

	  isNonstaticConstructor(method) {
	    return !method.computed && !method.static && (method.key.name === "constructor" || method.key.value === "constructor");
	  }

	  parseClassBody(hadSuperClass, oldStrict) {
	    this.classScope.enter();
	    const state = {
	      hadConstructor: false,
	      hadSuperClass
	    };
	    let decorators = [];
	    const classBody = this.startNode();
	    classBody.body = [];
	    this.expect(13);
	    this.withSmartMixTopicForbiddingContext(() => {
	      while (!this.match(16)) {
	        if (this.eat(21)) {
	          if (decorators.length > 0) {
	            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);
	          }

	          continue;
	        }

	        if (this.match(32)) {
	          decorators.push(this.parseDecorator());
	          continue;
	        }

	        const member = this.startNode();

	        if (decorators.length) {
	          member.decorators = decorators;
	          this.resetStartLocationFromNode(member, decorators[0]);
	          decorators = [];
	        }

	        this.parseClassMember(classBody, member, state);

	        if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) {
	          this.raise(member.start, ErrorMessages.DecoratorConstructor);
	        }
	      }
	    });
	    this.state.strict = oldStrict;
	    this.next();

	    if (decorators.length) {
	      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);
	    }

	    this.classScope.exit();
	    return this.finishNode(classBody, "ClassBody");
	  }

	  parseClassMemberFromModifier(classBody, member) {
	    const key = this.parseIdentifier(true);

	    if (this.isClassMethod()) {
	      const method = member;
	      method.kind = "method";
	      method.computed = false;
	      method.key = key;
	      method.static = false;
	      this.pushClassMethod(classBody, method, false, false, false, false);
	      return true;
	    } else if (this.isClassProperty()) {
	      const prop = member;
	      prop.computed = false;
	      prop.key = key;
	      prop.static = false;
	      classBody.body.push(this.parseClassProperty(prop));
	      return true;
	    }

	    this.resetPreviousNodeTrailingComments(key);
	    return false;
	  }

	  parseClassMember(classBody, member, state) {
	    const isStatic = this.isContextual("static");

	    if (isStatic) {
	      if (this.parseClassMemberFromModifier(classBody, member)) {
	        return;
	      }

	      if (this.eat(13)) {
	        this.parseClassStaticBlock(classBody, member);
	        return;
	      }
	    }

	    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
	  }

	  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
	    const publicMethod = member;
	    const privateMethod = member;
	    const publicProp = member;
	    const privateProp = member;
	    const method = publicMethod;
	    const publicMember = publicMethod;
	    member.static = isStatic;

	    if (this.eat(54)) {
	      method.kind = "method";
	      const isPrivateName = this.match(6);
	      this.parseClassElementName(method);

	      if (isPrivateName) {
	        this.pushClassPrivateMethod(classBody, privateMethod, true, false);
	        return;
	      }

	      if (this.isNonstaticConstructor(publicMethod)) {
	        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);
	      }

	      this.pushClassMethod(classBody, publicMethod, true, false, false, false);
	      return;
	    }

	    const isContextual = this.match(5) && !this.state.containsEsc;
	    const isPrivate = this.match(6);
	    const key = this.parseClassElementName(member);
	    const maybeQuestionTokenStart = this.state.start;
	    this.parsePostMemberNameModifiers(publicMember);

	    if (this.isClassMethod()) {
	      method.kind = "method";

	      if (isPrivate) {
	        this.pushClassPrivateMethod(classBody, privateMethod, false, false);
	        return;
	      }

	      const isConstructor = this.isNonstaticConstructor(publicMethod);
	      let allowsDirectSuper = false;

	      if (isConstructor) {
	        publicMethod.kind = "constructor";

	        if (state.hadConstructor && !this.hasPlugin("typescript")) {
	          this.raise(key.start, ErrorMessages.DuplicateConstructor);
	        }

	        if (isConstructor && this.hasPlugin("typescript") && member.override) {
	          this.raise(key.start, ErrorMessages.OverrideOnConstructor);
	        }

	        state.hadConstructor = true;
	        allowsDirectSuper = state.hadSuperClass;
	      }

	      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
	    } else if (this.isClassProperty()) {
	      if (isPrivate) {
	        this.pushClassPrivateProperty(classBody, privateProp);
	      } else {
	        this.pushClassProperty(classBody, publicProp);
	      }
	    } else if (isContextual && key.name === "async" && !this.isLineTerminator()) {
	      this.resetPreviousNodeTrailingComments(key);
	      const isGenerator = this.eat(54);

	      if (publicMember.optional) {
	        this.unexpected(maybeQuestionTokenStart);
	      }

	      method.kind = "method";
	      const isPrivate = this.match(6);
	      this.parseClassElementName(method);
	      this.parsePostMemberNameModifiers(publicMember);

	      if (isPrivate) {
	        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
	      } else {
	        if (this.isNonstaticConstructor(publicMethod)) {
	          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);
	        }

	        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
	      }
	    } else if (isContextual && (key.name === "get" || key.name === "set") && !(this.match(54) && this.isLineTerminator())) {
	      this.resetPreviousNodeTrailingComments(key);
	      method.kind = key.name;
	      const isPrivate = this.match(6);
	      this.parseClassElementName(publicMethod);

	      if (isPrivate) {
	        this.pushClassPrivateMethod(classBody, privateMethod, false, false);
	      } else {
	        if (this.isNonstaticConstructor(publicMethod)) {
	          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);
	        }

	        this.pushClassMethod(classBody, publicMethod, false, false, false, false);
	      }

	      this.checkGetterSetterParams(publicMethod);
	    } else if (this.isLineTerminator()) {
	      if (isPrivate) {
	        this.pushClassPrivateProperty(classBody, privateProp);
	      } else {
	        this.pushClassProperty(classBody, publicProp);
	      }
	    } else {
	      this.unexpected();
	    }
	  }

	  parseClassElementName(member) {
	    const {
	      type,
	      value,
	      start
	    } = this.state;

	    if ((type === 5 || type === 4) && member.static && value === "prototype") {
	      this.raise(start, ErrorMessages.StaticPrototype);
	    }

	    if (type === 6 && value === "constructor") {
	      this.raise(start, ErrorMessages.ConstructorClassPrivateField);
	    }

	    return this.parsePropertyName(member, true);
	  }

	  parseClassStaticBlock(classBody, member) {
	    var _member$decorators;

	    this.expectPlugin("classStaticBlock", member.start);
	    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);
	    const oldLabels = this.state.labels;
	    this.state.labels = [];
	    this.prodParam.enter(PARAM);
	    const body = member.body = [];
	    this.parseBlockOrModuleBlockBody(body, undefined, false, 16);
	    this.prodParam.exit();
	    this.scope.exit();
	    this.state.labels = oldLabels;
	    classBody.body.push(this.finishNode(member, "StaticBlock"));

	    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {
	      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);
	    }
	  }

	  pushClassProperty(classBody, prop) {
	    if (!prop.computed && (prop.key.name === "constructor" || prop.key.value === "constructor")) {
	      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);
	    }

	    classBody.body.push(this.parseClassProperty(prop));
	  }

	  pushClassPrivateProperty(classBody, prop) {
	    const node = this.parseClassPrivateProperty(prop);
	    classBody.body.push(node);
	    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);
	  }

	  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
	    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
	  }

	  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
	    const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
	    classBody.body.push(node);
	    const kind = node.kind === "get" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === "set" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;
	    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);
	  }

	  parsePostMemberNameModifiers(methodOrProp) {}

	  parseClassPrivateProperty(node) {
	    this.parseInitializer(node);
	    this.semicolon();
	    return this.finishNode(node, "ClassPrivateProperty");
	  }

	  parseClassProperty(node) {
	    this.parseInitializer(node);
	    this.semicolon();
	    return this.finishNode(node, "ClassProperty");
	  }

	  parseInitializer(node) {
	    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);
	    this.expressionScope.enter(newExpressionScope());
	    this.prodParam.enter(PARAM);
	    node.value = this.eat(35) ? this.parseMaybeAssignAllowIn() : null;
	    this.expressionScope.exit();
	    this.prodParam.exit();
	    this.scope.exit();
	  }

	  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {
	    if (this.match(5)) {
	      node.id = this.parseIdentifier();

	      if (isStatement) {
	        this.checkLVal(node.id, "class name", bindingType);
	      }
	    } else {
	      if (optionalId || !isStatement) {
	        node.id = null;
	      } else {
	        this.unexpected(null, ErrorMessages.MissingClassName);
	      }
	    }
	  }

	  parseClassSuper(node) {
	    node.superClass = this.eat(80) ? this.parseExprSubscripts() : null;
	  }

	  parseExport(node) {
	    const hasDefault = this.maybeParseExportDefaultSpecifier(node);
	    const parseAfterDefault = !hasDefault || this.eat(20);
	    const hasStar = parseAfterDefault && this.eatExportStar(node);
	    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);
	    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(20));
	    const isFromRequired = hasDefault || hasStar;

	    if (hasStar && !hasNamespace) {
	      if (hasDefault) this.unexpected();
	      this.parseExportFrom(node, true);
	      return this.finishNode(node, "ExportAllDeclaration");
	    }

	    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);

	    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {
	      throw this.unexpected(null, 13);
	    }

	    let hasDeclaration;

	    if (isFromRequired || hasSpecifiers) {
	      hasDeclaration = false;
	      this.parseExportFrom(node, isFromRequired);
	    } else {
	      hasDeclaration = this.maybeParseExportDeclaration(node);
	    }

	    if (isFromRequired || hasSpecifiers || hasDeclaration) {
	      this.checkExport(node, true, false, !!node.source);
	      return this.finishNode(node, "ExportNamedDeclaration");
	    }

	    if (this.eat(64)) {
	      node.declaration = this.parseExportDefaultExpression();
	      this.checkExport(node, true, true);
	      return this.finishNode(node, "ExportDefaultDeclaration");
	    }

	    throw this.unexpected(null, 13);
	  }

	  eatExportStar(node) {
	    return this.eat(54);
	  }

	  maybeParseExportDefaultSpecifier(node) {
	    if (this.isExportDefaultSpecifier()) {
	      this.expectPlugin("exportDefaultFrom");
	      const specifier = this.startNode();
	      specifier.exported = this.parseIdentifier(true);
	      node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
	      return true;
	    }

	    return false;
	  }

	  maybeParseExportNamespaceSpecifier(node) {
	    if (this.isContextual("as")) {
	      if (!node.specifiers) node.specifiers = [];
	      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);
	      this.next();
	      specifier.exported = this.parseModuleExportName();
	      node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
	      return true;
	    }

	    return false;
	  }

	  maybeParseExportNamedSpecifiers(node) {
	    if (this.match(13)) {
	      if (!node.specifiers) node.specifiers = [];
	      node.specifiers.push(...this.parseExportSpecifiers());
	      node.source = null;
	      node.declaration = null;
	      return true;
	    }

	    return false;
	  }

	  maybeParseExportDeclaration(node) {
	    if (this.shouldParseExportDeclaration()) {
	      node.specifiers = [];
	      node.source = null;
	      node.declaration = this.parseExportDeclaration(node);
	      return true;
	    }

	    return false;
	  }

	  isAsyncFunction() {
	    if (!this.isContextual("async")) return false;
	    const next = this.nextTokenStart();
	    return !lineBreak$1.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, "function");
	  }

	  parseExportDefaultExpression() {
	    const expr = this.startNode();
	    const isAsync = this.isAsyncFunction();

	    if (this.match(67) || isAsync) {
	      this.next();

	      if (isAsync) {
	        this.next();
	      }

	      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);
	    } else if (this.match(79)) {
	      return this.parseClass(expr, true, true);
	    } else if (this.match(32)) {
	      if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport")) {
	        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);
	      }

	      this.parseDecorators(false);
	      return this.parseClass(expr, true, true);
	    } else if (this.match(74) || this.match(73) || this.isLet()) {
	      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);
	    } else {
	      const res = this.parseMaybeAssignAllowIn();
	      this.semicolon();
	      return res;
	    }
	  }

	  parseExportDeclaration(node) {
	    return this.parseStatement(null);
	  }

	  isExportDefaultSpecifier() {
	    if (this.match(5)) {
	      const value = this.state.value;

	      if (value === "async" && !this.state.containsEsc || value === "let") {
	        return false;
	      }

	      if ((value === "type" || value === "interface") && !this.state.containsEsc) {
	        const l = this.lookahead();

	        if (l.type === 5 && l.value !== "from" || l.type === 13) {
	          this.expectOnePlugin(["flow", "typescript"]);
	          return false;
	        }
	      }
	    } else if (!this.match(64)) {
	      return false;
	    }

	    const next = this.nextTokenStart();
	    const hasFrom = this.isUnparsedContextual(next, "from");

	    if (this.input.charCodeAt(next) === 44 || this.match(5) && hasFrom) {
	      return true;
	    }

	    if (this.match(64) && hasFrom) {
	      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
	      return nextAfterFrom === 34 || nextAfterFrom === 39;
	    }

	    return false;
	  }

	  parseExportFrom(node, expect) {
	    if (this.eatContextual("from")) {
	      node.source = this.parseImportSource();
	      this.checkExport(node);
	      const assertions = this.maybeParseImportAssertions();

	      if (assertions) {
	        node.assertions = assertions;
	      }
	    } else {
	      if (expect) {
	        this.unexpected();
	      } else {
	        node.source = null;
	      }
	    }

	    this.semicolon();
	  }

	  shouldParseExportDeclaration() {
	    const {
	      type
	    } = this.state;

	    if (type === 32) {
	      this.expectOnePlugin(["decorators", "decorators-legacy"]);

	      if (this.hasPlugin("decorators")) {
	        if (this.getPluginOption("decorators", "decoratorsBeforeExport")) {
	          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);
	        } else {
	          return true;
	        }
	      }
	    }

	    return type === 73 || type === 74 || type === 67 || type === 79 || this.isLet() || this.isAsyncFunction();
	  }

	  checkExport(node, checkNames, isDefault, isFrom) {
	    if (checkNames) {
	      if (isDefault) {
	        this.checkDuplicateExports(node, "default");

	        if (this.hasPlugin("exportDefaultFrom")) {
	          var _declaration$extra;

	          const declaration = node.declaration;

	          if (declaration.type === "Identifier" && declaration.name === "from" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {
	            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);
	          }
	        }
	      } else if (node.specifiers && node.specifiers.length) {
	        for (const specifier of node.specifiers) {
	          const {
	            exported
	          } = specifier;
	          const exportedName = exported.type === "Identifier" ? exported.name : exported.value;
	          this.checkDuplicateExports(specifier, exportedName);

	          if (!isFrom && specifier.local) {
	            const {
	              local
	            } = specifier;

	            if (local.type !== "Identifier") {
	              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);
	            } else {
	              this.checkReservedWord(local.name, local.start, true, false);
	              this.scope.checkLocalExport(local);
	            }
	          }
	        }
	      } else if (node.declaration) {
	        if (node.declaration.type === "FunctionDeclaration" || node.declaration.type === "ClassDeclaration") {
	          const id = node.declaration.id;
	          if (!id) throw new Error("Assertion failure");
	          this.checkDuplicateExports(node, id.name);
	        } else if (node.declaration.type === "VariableDeclaration") {
	          for (const declaration of node.declaration.declarations) {
	            this.checkDeclaration(declaration.id);
	          }
	        }
	      }
	    }

	    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];

	    if (currentContextDecorators.length) {
	      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);
	    }
	  }

	  checkDeclaration(node) {
	    if (node.type === "Identifier") {
	      this.checkDuplicateExports(node, node.name);
	    } else if (node.type === "ObjectPattern") {
	      for (const prop of node.properties) {
	        this.checkDeclaration(prop);
	      }
	    } else if (node.type === "ArrayPattern") {
	      for (const elem of node.elements) {
	        if (elem) {
	          this.checkDeclaration(elem);
	        }
	      }
	    } else if (node.type === "ObjectProperty") {
	      this.checkDeclaration(node.value);
	    } else if (node.type === "RestElement") {
	      this.checkDeclaration(node.argument);
	    } else if (node.type === "AssignmentPattern") {
	      this.checkDeclaration(node.left);
	    }
	  }

	  checkDuplicateExports(node, name) {
	    if (this.exportedIdentifiers.has(name)) {
	      this.raise(node.start, name === "default" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);
	    }

	    this.exportedIdentifiers.add(name);
	  }

	  parseExportSpecifiers() {
	    const nodes = [];
	    let first = true;
	    this.expect(13);

	    while (!this.eat(16)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(20);
	        if (this.eat(16)) break;
	      }

	      const node = this.startNode();
	      const isString = this.match(4);
	      const local = this.parseModuleExportName();
	      node.local = local;

	      if (this.eatContextual("as")) {
	        node.exported = this.parseModuleExportName();
	      } else if (isString) {
	        node.exported = cloneStringLiteral(local);
	      } else {
	        node.exported = cloneIdentifier(local);
	      }

	      nodes.push(this.finishNode(node, "ExportSpecifier"));
	    }

	    return nodes;
	  }

	  parseModuleExportName() {
	    if (this.match(4)) {
	      const result = this.parseStringLiteral(this.state.value);
	      const surrogate = result.value.match(loneSurrogate);

	      if (surrogate) {
	        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));
	      }

	      return result;
	    }

	    return this.parseIdentifier(true);
	  }

	  parseImport(node) {
	    node.specifiers = [];

	    if (!this.match(4)) {
	      const hasDefault = this.maybeParseDefaultImportSpecifier(node);
	      const parseNext = !hasDefault || this.eat(20);
	      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
	      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);
	      this.expectContextual("from");
	    }

	    node.source = this.parseImportSource();
	    const assertions = this.maybeParseImportAssertions();

	    if (assertions) {
	      node.assertions = assertions;
	    } else {
	      const attributes = this.maybeParseModuleAttributes();

	      if (attributes) {
	        node.attributes = attributes;
	      }
	    }

	    this.semicolon();
	    return this.finishNode(node, "ImportDeclaration");
	  }

	  parseImportSource() {
	    if (!this.match(4)) this.unexpected();
	    return this.parseExprAtom();
	  }

	  shouldParseDefaultImport(node) {
	    return this.match(5);
	  }

	  parseImportSpecifierLocal(node, specifier, type, contextDescription) {
	    specifier.local = this.parseIdentifier();
	    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);
	    node.specifiers.push(this.finishNode(specifier, type));
	  }

	  parseAssertEntries() {
	    const attrs = [];
	    const attrNames = new Set();

	    do {
	      if (this.match(16)) {
	        break;
	      }

	      const node = this.startNode();
	      const keyName = this.state.value;

	      if (attrNames.has(keyName)) {
	        this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);
	      }

	      attrNames.add(keyName);

	      if (this.match(4)) {
	        node.key = this.parseStringLiteral(keyName);
	      } else {
	        node.key = this.parseIdentifier(true);
	      }

	      this.expect(22);

	      if (!this.match(4)) {
	        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);
	      }

	      node.value = this.parseStringLiteral(this.state.value);
	      this.finishNode(node, "ImportAttribute");
	      attrs.push(node);
	    } while (this.eat(20));

	    return attrs;
	  }

	  maybeParseModuleAttributes() {
	    if (this.match(75) && !this.hasPrecedingLineBreak()) {
	      this.expectPlugin("moduleAttributes");
	      this.next();
	    } else {
	      if (this.hasPlugin("moduleAttributes")) return [];
	      return null;
	    }

	    const attrs = [];
	    const attributes = new Set();

	    do {
	      const node = this.startNode();
	      node.key = this.parseIdentifier(true);

	      if (node.key.name !== "type") {
	        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);
	      }

	      if (attributes.has(node.key.name)) {
	        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);
	      }

	      attributes.add(node.key.name);
	      this.expect(22);

	      if (!this.match(4)) {
	        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);
	      }

	      node.value = this.parseStringLiteral(this.state.value);
	      this.finishNode(node, "ImportAttribute");
	      attrs.push(node);
	    } while (this.eat(20));

	    return attrs;
	  }

	  maybeParseImportAssertions() {
	    if (this.isContextual("assert") && !this.hasPrecedingLineBreak()) {
	      this.expectPlugin("importAssertions");
	      this.next();
	    } else {
	      if (this.hasPlugin("importAssertions")) return [];
	      return null;
	    }

	    this.eat(13);
	    const attrs = this.parseAssertEntries();
	    this.eat(16);
	    return attrs;
	  }

	  maybeParseDefaultImportSpecifier(node) {
	    if (this.shouldParseDefaultImport(node)) {
	      this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier", "default import specifier");
	      return true;
	    }

	    return false;
	  }

	  maybeParseStarImportSpecifier(node) {
	    if (this.match(54)) {
	      const specifier = this.startNode();
	      this.next();
	      this.expectContextual("as");
	      this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier", "import namespace specifier");
	      return true;
	    }

	    return false;
	  }

	  parseNamedImportSpecifiers(node) {
	    let first = true;
	    this.expect(13);

	    while (!this.eat(16)) {
	      if (first) {
	        first = false;
	      } else {
	        if (this.eat(22)) {
	          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);
	        }

	        this.expect(20);
	        if (this.eat(16)) break;
	      }

	      this.parseImportSpecifier(node);
	    }
	  }

	  parseImportSpecifier(node) {
	    const specifier = this.startNode();
	    const importedIsString = this.match(4);
	    specifier.imported = this.parseModuleExportName();

	    if (this.eatContextual("as")) {
	      specifier.local = this.parseIdentifier();
	    } else {
	      const {
	        imported
	      } = specifier;

	      if (importedIsString) {
	        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);
	      }

	      this.checkReservedWord(imported.name, specifier.start, true, true);
	      specifier.local = cloneIdentifier(imported);
	    }

	    this.checkLVal(specifier.local, "import specifier", BIND_LEXICAL);
	    node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
	  }

	  isThisParam(param) {
	    return param.type === "Identifier" && param.name === "this";
	  }

	}

	class Parser$4 extends StatementParser {
	  constructor(options, input) {
	    options = getOptions$1(options);
	    super(options, input);
	    this.options = options;
	    this.initializeScopes();
	    this.plugins = pluginsMap(this.options.plugins);
	    this.filename = options.sourceFilename;
	  }

	  getScopeHandler() {
	    return ScopeHandler;
	  }

	  parse() {
	    this.enterInitialScopes();
	    const file = this.startNode();
	    const program = this.startNode();
	    this.nextToken();
	    file.errors = null;
	    this.parseTopLevel(file, program);
	    file.errors = this.state.errors;
	    return file;
	  }

	}

	function pluginsMap(plugins) {
	  const pluginMap = new Map();

	  for (const plugin of plugins) {
	    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];
	    if (!pluginMap.has(name)) pluginMap.set(name, options || {});
	  }

	  return pluginMap;
	}

	function parse$f(input, options) {
	  var _options;

	  if (((_options = options) == null ? void 0 : _options.sourceType) === "unambiguous") {
	    options = Object.assign({}, options);

	    try {
	      options.sourceType = "module";
	      const parser = getParser(options, input);
	      const ast = parser.parse();

	      if (parser.sawUnambiguousESM) {
	        return ast;
	      }

	      if (parser.ambiguousScriptDifferentAst) {
	        try {
	          options.sourceType = "script";
	          return getParser(options, input).parse();
	        } catch (_unused) {}
	      } else {
	        ast.program.sourceType = "script";
	      }

	      return ast;
	    } catch (moduleError) {
	      try {
	        options.sourceType = "script";
	        return getParser(options, input).parse();
	      } catch (_unused2) {}

	      throw moduleError;
	    }
	  } else {
	    return getParser(options, input).parse();
	  }
	}
	function parseExpression$1(input, options) {
	  const parser = getParser(options, input);

	  if (parser.options.strictMode) {
	    parser.state.strict = true;
	  }

	  return parser.getExpression();
	}

	function generateExportedTokenTypes(internalTokenTypes) {
	  const tokenTypes = {};

	  for (const typeName of Object.keys(internalTokenTypes)) {
	    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);
	  }

	  return tokenTypes;
	}

	const tokTypes = generateExportedTokenTypes(tt);

	function getParser(options, input) {
	  let cls = Parser$4;

	  if (options != null && options.plugins) {
	    validatePlugins(options.plugins);
	    cls = getParserClass(options.plugins);
	  }

	  return new cls(options, input);
	}

	const parserClassCache = {};

	function getParserClass(pluginsFromOptions) {
	  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));
	  const key = pluginList.join("/");
	  let cls = parserClassCache[key];

	  if (!cls) {
	    cls = Parser$4;

	    for (const plugin of pluginList) {
	      cls = mixinPlugins[plugin](cls);
	    }

	    parserClassCache[key] = cls;
	  }

	  return cls;
	}

	lib$x.parse = parse$f;
	lib$x.parseExpression = parseExpression$1;
	lib$x.tokTypes = tokTypes;

	var lib$w = {};

	Object.defineProperty(lib$w, '__esModule', { value: true });

	/* eslint max-len: 0 */

	// This is a trick taken from Esprima. It turns out that, on
	// non-Chrome browsers, to check whether a string is in a set, a
	// predicate containing a big ugly `switch` statement is faster than
	// a regular expression, and on Chrome the two are about on par.
	// This function uses `eval` (non-lexical) to produce such a
	// predicate from a space-separated string of words.
	//
	// It starts by sorting the words by length.

	function makePredicate(words) {
	  words = words.split(" ");
	  return function (str) {
	    return words.indexOf(str) >= 0;
	  };
	}

	// Reserved word lists for various dialects of the language

	var reservedWords$1 = {
	  6: makePredicate("enum await"),
	  strict: makePredicate("implements interface let package private protected public static yield"),
	  strictBind: makePredicate("eval arguments")
	};

	// And the keywords

	var isKeyword$1 = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super");

	// ## Character categories

	// Big ugly regular expressions that match characters in the
	// whitespace, identifier, and identifier-start categories. These
	// are only applied when a character is found to actually have a
	// code point above 128.
	// Generated by `bin/generate-identifier-regex.js`.

	var nonASCIIidentifierStartChars$1 = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
	var nonASCIIidentifierChars$1 = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D4-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA900-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";

	var nonASCIIidentifierStart$1 = new RegExp("[" + nonASCIIidentifierStartChars$1 + "]");
	var nonASCIIidentifier$1 = new RegExp("[" + nonASCIIidentifierStartChars$1 + nonASCIIidentifierChars$1 + "]");

	nonASCIIidentifierStartChars$1 = nonASCIIidentifierChars$1 = null;

	// These are a run-length and offset encoded representation of the
	// >0xffff code points that are a valid part of identifiers. The
	// offset starts at 0x10000, and each pair of numbers represents an
	// offset to the next range, and then a size of the range. They were
	// generated by `bin/generate-identifier-regex.js`.
	// eslint-disable-next-line comma-spacing
	var astralIdentifierStartCodes$1 = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 785, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 54, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 25, 391, 63, 32, 0, 449, 56, 264, 8, 2, 36, 18, 0, 50, 29, 881, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 65, 0, 32, 6124, 20, 754, 9486, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 60, 67, 1213, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 10591, 541];
	// eslint-disable-next-line comma-spacing
	var astralIdentifierCodes$1 = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 10, 2, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 87, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 423, 9, 838, 7, 2, 7, 17, 9, 57, 21, 2, 13, 19882, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 2214, 6, 110, 6, 6, 9, 792487, 239];

	// This has a complexity linear to the value of the code. The
	// assumption is that looking up astral identifier characters is
	// rare.
	function isInAstralSet$1(code, set) {
	  var pos = 0x10000;
	  for (var i = 0; i < set.length; i += 2) {
	    pos += set[i];
	    if (pos > code) return false;

	    pos += set[i + 1];
	    if (pos >= code) return true;
	  }
	}

	// Test whether a given character code starts an identifier.

	function isIdentifierStart$1(code) {
	  if (code < 65) return code === 36;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart$1.test(String.fromCharCode(code));
	  return isInAstralSet$1(code, astralIdentifierStartCodes$1);
	}

	// Test whether a given character is part of an identifier.

	function isIdentifierChar$1(code) {
	  if (code < 48) return code === 36;
	  if (code < 58) return true;
	  if (code < 65) return false;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier$1.test(String.fromCharCode(code));
	  return isInAstralSet$1(code, astralIdentifierStartCodes$1) || isInAstralSet$1(code, astralIdentifierCodes$1);
	}

	// A second optional argument can be given to further configure
	var defaultOptions = {
	  // Source type ("script" or "module") for different semantics
	  sourceType: "script",
	  // Source filename.
	  sourceFilename: undefined,
	  // Line from which to start counting source. Useful for
	  // integration with other tools.
	  startLine: 1,
	  // When enabled, a return at the top level is not considered an
	  // error.
	  allowReturnOutsideFunction: false,
	  // When enabled, import/export statements are not constrained to
	  // appearing at the top of the program.
	  allowImportExportEverywhere: false,
	  // TODO
	  allowSuperOutsideMethod: false,
	  // An array of plugins to enable
	  plugins: [],
	  // TODO
	  strictMode: null
	};

	// Interpret and default an options object

	function getOptions(opts) {
	  var options = {};
	  for (var key in defaultOptions) {
	    options[key] = opts && key in opts ? opts[key] : defaultOptions[key];
	  }
	  return options;
	}

	var _typeof$1 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	  return typeof obj;
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	};











	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};











	var inherits$2 = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};











	var possibleConstructorReturn = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};

	// ## Token types

	// The assignment of fine-grained, information-carrying type objects
	// allows the tokenizer to store the information it has about a
	// token in a way that is very cheap for the parser to look up.

	// All token type variables start with an underscore, to make them
	// easy to recognize.

	// The `beforeExpr` property is used to disambiguate between regular
	// expressions and divisions. It is set on all token types that can
	// be followed by an expression (thus, a slash after them would be a
	// regular expression).
	//
	// `isLoop` marks a keyword as starting a loop, which is important
	// to know when parsing a label, in order to allow or disallow
	// continue jumps to that label.

	var beforeExpr = true;
	var startsExpr = true;
	var isLoop$1 = true;
	var isAssign = true;
	var prefix = true;
	var postfix = true;

	var TokenType = function TokenType(label) {
	  var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  classCallCheck(this, TokenType);

	  this.label = label;
	  this.keyword = conf.keyword;
	  this.beforeExpr = !!conf.beforeExpr;
	  this.startsExpr = !!conf.startsExpr;
	  this.rightAssociative = !!conf.rightAssociative;
	  this.isLoop = !!conf.isLoop;
	  this.isAssign = !!conf.isAssign;
	  this.prefix = !!conf.prefix;
	  this.postfix = !!conf.postfix;
	  this.binop = conf.binop || null;
	  this.updateContext = null;
	};

	var KeywordTokenType = function (_TokenType) {
	  inherits$2(KeywordTokenType, _TokenType);

	  function KeywordTokenType(name) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    classCallCheck(this, KeywordTokenType);

	    options.keyword = name;

	    return possibleConstructorReturn(this, _TokenType.call(this, name, options));
	  }

	  return KeywordTokenType;
	}(TokenType);

	var BinopTokenType = function (_TokenType2) {
	  inherits$2(BinopTokenType, _TokenType2);

	  function BinopTokenType(name, prec) {
	    classCallCheck(this, BinopTokenType);
	    return possibleConstructorReturn(this, _TokenType2.call(this, name, { beforeExpr: beforeExpr, binop: prec }));
	  }

	  return BinopTokenType;
	}(TokenType);

	var types$1 = {
	  num: new TokenType("num", { startsExpr: startsExpr }),
	  regexp: new TokenType("regexp", { startsExpr: startsExpr }),
	  string: new TokenType("string", { startsExpr: startsExpr }),
	  name: new TokenType("name", { startsExpr: startsExpr }),
	  eof: new TokenType("eof"),

	  // Punctuation token types.
	  bracketL: new TokenType("[", { beforeExpr: beforeExpr, startsExpr: startsExpr }),
	  bracketR: new TokenType("]"),
	  braceL: new TokenType("{", { beforeExpr: beforeExpr, startsExpr: startsExpr }),
	  braceBarL: new TokenType("{|", { beforeExpr: beforeExpr, startsExpr: startsExpr }),
	  braceR: new TokenType("}"),
	  braceBarR: new TokenType("|}"),
	  parenL: new TokenType("(", { beforeExpr: beforeExpr, startsExpr: startsExpr }),
	  parenR: new TokenType(")"),
	  comma: new TokenType(",", { beforeExpr: beforeExpr }),
	  semi: new TokenType(";", { beforeExpr: beforeExpr }),
	  colon: new TokenType(":", { beforeExpr: beforeExpr }),
	  doubleColon: new TokenType("::", { beforeExpr: beforeExpr }),
	  dot: new TokenType("."),
	  question: new TokenType("?", { beforeExpr: beforeExpr }),
	  arrow: new TokenType("=>", { beforeExpr: beforeExpr }),
	  template: new TokenType("template"),
	  ellipsis: new TokenType("...", { beforeExpr: beforeExpr }),
	  backQuote: new TokenType("`", { startsExpr: startsExpr }),
	  dollarBraceL: new TokenType("${", { beforeExpr: beforeExpr, startsExpr: startsExpr }),
	  at: new TokenType("@"),

	  // Operators. These carry several kinds of properties to help the
	  // parser use them properly (the presence of these properties is
	  // what categorizes them as operators).
	  //
	  // `binop`, when present, specifies that this operator is a binary
	  // operator, and will refer to its precedence.
	  //
	  // `prefix` and `postfix` mark the operator as a prefix or postfix
	  // unary operator.
	  //
	  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
	  // binary operators with a very low precedence, that should result
	  // in AssignmentExpression nodes.

	  eq: new TokenType("=", { beforeExpr: beforeExpr, isAssign: isAssign }),
	  assign: new TokenType("_=", { beforeExpr: beforeExpr, isAssign: isAssign }),
	  incDec: new TokenType("++/--", { prefix: prefix, postfix: postfix, startsExpr: startsExpr }),
	  prefix: new TokenType("prefix", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr }),
	  logicalOR: new BinopTokenType("||", 1),
	  logicalAND: new BinopTokenType("&&", 2),
	  bitwiseOR: new BinopTokenType("|", 3),
	  bitwiseXOR: new BinopTokenType("^", 4),
	  bitwiseAND: new BinopTokenType("&", 5),
	  equality: new BinopTokenType("==/!=", 6),
	  relational: new BinopTokenType("</>", 7),
	  bitShift: new BinopTokenType("<</>>", 8),
	  plusMin: new TokenType("+/-", { beforeExpr: beforeExpr, binop: 9, prefix: prefix, startsExpr: startsExpr }),
	  modulo: new BinopTokenType("%", 10),
	  star: new BinopTokenType("*", 10),
	  slash: new BinopTokenType("/", 10),
	  exponent: new TokenType("**", { beforeExpr: beforeExpr, binop: 11, rightAssociative: true })
	};

	var keywords$1 = {
	  "break": new KeywordTokenType("break"),
	  "case": new KeywordTokenType("case", { beforeExpr: beforeExpr }),
	  "catch": new KeywordTokenType("catch"),
	  "continue": new KeywordTokenType("continue"),
	  "debugger": new KeywordTokenType("debugger"),
	  "default": new KeywordTokenType("default", { beforeExpr: beforeExpr }),
	  "do": new KeywordTokenType("do", { isLoop: isLoop$1, beforeExpr: beforeExpr }),
	  "else": new KeywordTokenType("else", { beforeExpr: beforeExpr }),
	  "finally": new KeywordTokenType("finally"),
	  "for": new KeywordTokenType("for", { isLoop: isLoop$1 }),
	  "function": new KeywordTokenType("function", { startsExpr: startsExpr }),
	  "if": new KeywordTokenType("if"),
	  "return": new KeywordTokenType("return", { beforeExpr: beforeExpr }),
	  "switch": new KeywordTokenType("switch"),
	  "throw": new KeywordTokenType("throw", { beforeExpr: beforeExpr }),
	  "try": new KeywordTokenType("try"),
	  "var": new KeywordTokenType("var"),
	  "let": new KeywordTokenType("let"),
	  "const": new KeywordTokenType("const"),
	  "while": new KeywordTokenType("while", { isLoop: isLoop$1 }),
	  "with": new KeywordTokenType("with"),
	  "new": new KeywordTokenType("new", { beforeExpr: beforeExpr, startsExpr: startsExpr }),
	  "this": new KeywordTokenType("this", { startsExpr: startsExpr }),
	  "super": new KeywordTokenType("super", { startsExpr: startsExpr }),
	  "class": new KeywordTokenType("class"),
	  "extends": new KeywordTokenType("extends", { beforeExpr: beforeExpr }),
	  "export": new KeywordTokenType("export"),
	  "import": new KeywordTokenType("import", { startsExpr: startsExpr }),
	  "yield": new KeywordTokenType("yield", { beforeExpr: beforeExpr, startsExpr: startsExpr }),
	  "null": new KeywordTokenType("null", { startsExpr: startsExpr }),
	  "true": new KeywordTokenType("true", { startsExpr: startsExpr }),
	  "false": new KeywordTokenType("false", { startsExpr: startsExpr }),
	  "in": new KeywordTokenType("in", { beforeExpr: beforeExpr, binop: 7 }),
	  "instanceof": new KeywordTokenType("instanceof", { beforeExpr: beforeExpr, binop: 7 }),
	  "typeof": new KeywordTokenType("typeof", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr }),
	  "void": new KeywordTokenType("void", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr }),
	  "delete": new KeywordTokenType("delete", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr })
	};

	// Map keyword names to token types.
	Object.keys(keywords$1).forEach(function (name) {
	  types$1["_" + name] = keywords$1[name];
	});

	// Matches a whole line break (where CRLF is considered a single
	// line break). Used to count lines.

	var lineBreak = /\r\n?|\n|\u2028|\u2029/;
	var lineBreakG = new RegExp(lineBreak.source, "g");

	function isNewLine(code) {
	  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
	}

	var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;

	// The algorithm used to determine whether a regexp can appear at a
	// given point in the program is loosely based on sweet.js' approach.
	// See https://github.com/mozilla/sweet.js/wiki/design

	var TokContext = function TokContext(token, isExpr, preserveSpace, override) {
	  classCallCheck(this, TokContext);

	  this.token = token;
	  this.isExpr = !!isExpr;
	  this.preserveSpace = !!preserveSpace;
	  this.override = override;
	};

	var types$1$1 = {
	  braceStatement: new TokContext("{", false),
	  braceExpression: new TokContext("{", true),
	  templateQuasi: new TokContext("${", true),
	  parenStatement: new TokContext("(", false),
	  parenExpression: new TokContext("(", true),
	  template: new TokContext("`", true, true, function (p) {
	    return p.readTmplToken();
	  }),
	  functionExpression: new TokContext("function", true)
	};

	// Token-specific context update code

	types$1.parenR.updateContext = types$1.braceR.updateContext = function () {
	  if (this.state.context.length === 1) {
	    this.state.exprAllowed = true;
	    return;
	  }

	  var out = this.state.context.pop();
	  if (out === types$1$1.braceStatement && this.curContext() === types$1$1.functionExpression) {
	    this.state.context.pop();
	    this.state.exprAllowed = false;
	  } else if (out === types$1$1.templateQuasi) {
	    this.state.exprAllowed = true;
	  } else {
	    this.state.exprAllowed = !out.isExpr;
	  }
	};

	types$1.name.updateContext = function (prevType) {
	  this.state.exprAllowed = false;

	  if (prevType === types$1._let || prevType === types$1._const || prevType === types$1._var) {
	    if (lineBreak.test(this.input.slice(this.state.end))) {
	      this.state.exprAllowed = true;
	    }
	  }
	};

	types$1.braceL.updateContext = function (prevType) {
	  this.state.context.push(this.braceIsBlock(prevType) ? types$1$1.braceStatement : types$1$1.braceExpression);
	  this.state.exprAllowed = true;
	};

	types$1.dollarBraceL.updateContext = function () {
	  this.state.context.push(types$1$1.templateQuasi);
	  this.state.exprAllowed = true;
	};

	types$1.parenL.updateContext = function (prevType) {
	  var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
	  this.state.context.push(statementParens ? types$1$1.parenStatement : types$1$1.parenExpression);
	  this.state.exprAllowed = true;
	};

	types$1.incDec.updateContext = function () {
	  // tokExprAllowed stays unchanged
	};

	types$1._function.updateContext = function () {
	  if (this.curContext() !== types$1$1.braceStatement) {
	    this.state.context.push(types$1$1.functionExpression);
	  }

	  this.state.exprAllowed = false;
	};

	types$1.backQuote.updateContext = function () {
	  if (this.curContext() === types$1$1.template) {
	    this.state.context.pop();
	  } else {
	    this.state.context.push(types$1$1.template);
	  }
	  this.state.exprAllowed = false;
	};

	// These are used when `options.locations` is on, for the
	// `startLoc` and `endLoc` properties.

	var Position = function Position(line, col) {
	  classCallCheck(this, Position);

	  this.line = line;
	  this.column = col;
	};

	var SourceLocation = function SourceLocation(start, end) {
	  classCallCheck(this, SourceLocation);

	  this.start = start;
	  this.end = end;
	};

	// The `getLineInfo` function is mostly useful when the
	// `locations` option is off (for performance reasons) and you
	// want to find the line/column position for a given character
	// offset. `input` should be the code string that the offset refers
	// into.

	function getLineInfo(input, offset) {
	  for (var line = 1, cur = 0;;) {
	    lineBreakG.lastIndex = cur;
	    var match = lineBreakG.exec(input);
	    if (match && match.index < offset) {
	      ++line;
	      cur = match.index + match[0].length;
	    } else {
	      return new Position(line, offset - cur);
	    }
	  }
	}

	var State = function () {
	  function State() {
	    classCallCheck(this, State);
	  }

	  State.prototype.init = function init(options, input) {
	    this.strict = options.strictMode === false ? false : options.sourceType === "module";

	    this.input = input;

	    this.potentialArrowAt = -1;

	    this.inMethod = this.inFunction = this.inGenerator = this.inAsync = this.inPropertyName = this.inType = this.inClassProperty = this.noAnonFunctionType = false;

	    this.labels = [];

	    this.decorators = [];

	    this.tokens = [];

	    this.comments = [];

	    this.trailingComments = [];
	    this.leadingComments = [];
	    this.commentStack = [];

	    this.pos = this.lineStart = 0;
	    this.curLine = options.startLine;

	    this.type = types$1.eof;
	    this.value = null;
	    this.start = this.end = this.pos;
	    this.startLoc = this.endLoc = this.curPosition();

	    this.lastTokEndLoc = this.lastTokStartLoc = null;
	    this.lastTokStart = this.lastTokEnd = this.pos;

	    this.context = [types$1$1.braceStatement];
	    this.exprAllowed = true;

	    this.containsEsc = this.containsOctal = false;
	    this.octalPosition = null;

	    this.invalidTemplateEscapePosition = null;

	    this.exportedIdentifiers = [];

	    return this;
	  };

	  // TODO


	  // TODO


	  // Used to signify the start of a potential arrow function


	  // Flags to track whether we are in a function, a generator.


	  // Labels in scope.


	  // Leading decorators.


	  // Token store.


	  // Comment store.


	  // Comment attachment store


	  // The current position of the tokenizer in the input.


	  // Properties of the current token:
	  // Its type


	  // For tokens that include more information than their type, the value


	  // Its start and end offset


	  // And, if locations are used, the {line, column} object
	  // corresponding to those offsets


	  // Position information for the previous token


	  // The context stack is used to superficially track syntactic
	  // context to predict whether a regular expression is allowed in a
	  // given position.


	  // Used to signal to callers of `readWord1` whether the word
	  // contained any escape sequences. This is needed because words with
	  // escape sequences must not be interpreted as keywords.


	  // TODO


	  // Names of exports store. `default` is stored as a name for both
	  // `export default foo;` and `export { foo as default };`.


	  State.prototype.curPosition = function curPosition() {
	    return new Position(this.curLine, this.pos - this.lineStart);
	  };

	  State.prototype.clone = function clone(skipArrays) {
	    var state = new State();
	    for (var key in this) {
	      var val = this[key];

	      if ((!skipArrays || key === "context") && Array.isArray(val)) {
	        val = val.slice();
	      }

	      state[key] = val;
	    }
	    return state;
	  };

	  return State;
	}();

	// Object type used to represent tokens. Note that normally, tokens
	// simply exist as properties on the parser object. This is only
	// used for the onToken callback and the external tokenizer.

	var Token = function Token(state) {
	  classCallCheck(this, Token);

	  this.type = state.type;
	  this.value = state.value;
	  this.start = state.start;
	  this.end = state.end;
	  this.loc = new SourceLocation(state.startLoc, state.endLoc);
	};

	// ## Tokenizer

	function codePointToString(code) {
	  // UTF-16 Decoding
	  if (code <= 0xFFFF) {
	    return String.fromCharCode(code);
	  } else {
	    return String.fromCharCode((code - 0x10000 >> 10) + 0xD800, (code - 0x10000 & 1023) + 0xDC00);
	  }
	}

	var Tokenizer$2 = function () {
	  function Tokenizer(options, input) {
	    classCallCheck(this, Tokenizer);

	    this.state = new State();
	    this.state.init(options, input);
	  }

	  // Move to the next token

	  Tokenizer.prototype.next = function next() {
	    if (!this.isLookahead) {
	      this.state.tokens.push(new Token(this.state));
	    }

	    this.state.lastTokEnd = this.state.end;
	    this.state.lastTokStart = this.state.start;
	    this.state.lastTokEndLoc = this.state.endLoc;
	    this.state.lastTokStartLoc = this.state.startLoc;
	    this.nextToken();
	  };

	  // TODO

	  Tokenizer.prototype.eat = function eat(type) {
	    if (this.match(type)) {
	      this.next();
	      return true;
	    } else {
	      return false;
	    }
	  };

	  // TODO

	  Tokenizer.prototype.match = function match(type) {
	    return this.state.type === type;
	  };

	  // TODO

	  Tokenizer.prototype.isKeyword = function isKeyword$$1(word) {
	    return isKeyword$1(word);
	  };

	  // TODO

	  Tokenizer.prototype.lookahead = function lookahead() {
	    var old = this.state;
	    this.state = old.clone(true);

	    this.isLookahead = true;
	    this.next();
	    this.isLookahead = false;

	    var curr = this.state.clone(true);
	    this.state = old;
	    return curr;
	  };

	  // Toggle strict mode. Re-reads the next number or string to please
	  // pedantic tests (`"use strict"; 010;` should fail).

	  Tokenizer.prototype.setStrict = function setStrict(strict) {
	    this.state.strict = strict;
	    if (!this.match(types$1.num) && !this.match(types$1.string)) return;
	    this.state.pos = this.state.start;
	    while (this.state.pos < this.state.lineStart) {
	      this.state.lineStart = this.input.lastIndexOf("\n", this.state.lineStart - 2) + 1;
	      --this.state.curLine;
	    }
	    this.nextToken();
	  };

	  Tokenizer.prototype.curContext = function curContext() {
	    return this.state.context[this.state.context.length - 1];
	  };

	  // Read a single token, updating the parser object's token-related
	  // properties.

	  Tokenizer.prototype.nextToken = function nextToken() {
	    var curContext = this.curContext();
	    if (!curContext || !curContext.preserveSpace) this.skipSpace();

	    this.state.containsOctal = false;
	    this.state.octalPosition = null;
	    this.state.start = this.state.pos;
	    this.state.startLoc = this.state.curPosition();
	    if (this.state.pos >= this.input.length) return this.finishToken(types$1.eof);

	    if (curContext.override) {
	      return curContext.override(this);
	    } else {
	      return this.readToken(this.fullCharCodeAtPos());
	    }
	  };

	  Tokenizer.prototype.readToken = function readToken(code) {
	    // Identifier or keyword. '\uXXXX' sequences are allowed in
	    // identifiers, so '\' also dispatches to that.
	    if (isIdentifierStart$1(code) || code === 92 /* '\' */) {
	        return this.readWord();
	      } else {
	      return this.getTokenFromCode(code);
	    }
	  };

	  Tokenizer.prototype.fullCharCodeAtPos = function fullCharCodeAtPos() {
	    var code = this.input.charCodeAt(this.state.pos);
	    if (code <= 0xd7ff || code >= 0xe000) return code;

	    var next = this.input.charCodeAt(this.state.pos + 1);
	    return (code << 10) + next - 0x35fdc00;
	  };

	  Tokenizer.prototype.pushComment = function pushComment(block, text, start, end, startLoc, endLoc) {
	    var comment = {
	      type: block ? "CommentBlock" : "CommentLine",
	      value: text,
	      start: start,
	      end: end,
	      loc: new SourceLocation(startLoc, endLoc)
	    };

	    if (!this.isLookahead) {
	      this.state.tokens.push(comment);
	      this.state.comments.push(comment);
	      this.addComment(comment);
	    }
	  };

	  Tokenizer.prototype.skipBlockComment = function skipBlockComment() {
	    var startLoc = this.state.curPosition();
	    var start = this.state.pos;
	    var end = this.input.indexOf("*/", this.state.pos += 2);
	    if (end === -1) this.raise(this.state.pos - 2, "Unterminated comment");

	    this.state.pos = end + 2;
	    lineBreakG.lastIndex = start;
	    var match = void 0;
	    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {
	      ++this.state.curLine;
	      this.state.lineStart = match.index + match[0].length;
	    }

	    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());
	  };

	  Tokenizer.prototype.skipLineComment = function skipLineComment(startSkip) {
	    var start = this.state.pos;
	    var startLoc = this.state.curPosition();
	    var ch = this.input.charCodeAt(this.state.pos += startSkip);
	    while (this.state.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
	      ++this.state.pos;
	      ch = this.input.charCodeAt(this.state.pos);
	    }

	    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());
	  };

	  // Called at the start of the parse and after every token. Skips
	  // whitespace and comments, and.

	  Tokenizer.prototype.skipSpace = function skipSpace() {
	    loop: while (this.state.pos < this.input.length) {
	      var ch = this.input.charCodeAt(this.state.pos);
	      switch (ch) {
	        case 32:case 160:
	          // ' '
	          ++this.state.pos;
	          break;

	        case 13:
	          if (this.input.charCodeAt(this.state.pos + 1) === 10) {
	            ++this.state.pos;
	          }

	        case 10:case 8232:case 8233:
	          ++this.state.pos;
	          ++this.state.curLine;
	          this.state.lineStart = this.state.pos;
	          break;

	        case 47:
	          // '/'
	          switch (this.input.charCodeAt(this.state.pos + 1)) {
	            case 42:
	              // '*'
	              this.skipBlockComment();
	              break;

	            case 47:
	              this.skipLineComment(2);
	              break;

	            default:
	              break loop;
	          }
	          break;

	        default:
	          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
	            ++this.state.pos;
	          } else {
	            break loop;
	          }
	      }
	    }
	  };

	  // Called at the end of every token. Sets `end`, `val`, and
	  // maintains `context` and `exprAllowed`, and skips the space after
	  // the token, so that the next one's `start` will point at the
	  // right position.

	  Tokenizer.prototype.finishToken = function finishToken(type, val) {
	    this.state.end = this.state.pos;
	    this.state.endLoc = this.state.curPosition();
	    var prevType = this.state.type;
	    this.state.type = type;
	    this.state.value = val;

	    this.updateContext(prevType);
	  };

	  // ### Token reading

	  // This is the function that is called to fetch the next token. It
	  // is somewhat obscure, because it works in character codes rather
	  // than characters, and because operator parsing has been inlined
	  // into it.
	  //
	  // All in the name of speed.
	  //


	  Tokenizer.prototype.readToken_dot = function readToken_dot() {
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next >= 48 && next <= 57) {
	      return this.readNumber(true);
	    }

	    var next2 = this.input.charCodeAt(this.state.pos + 2);
	    if (next === 46 && next2 === 46) {
	      // 46 = dot '.'
	      this.state.pos += 3;
	      return this.finishToken(types$1.ellipsis);
	    } else {
	      ++this.state.pos;
	      return this.finishToken(types$1.dot);
	    }
	  };

	  Tokenizer.prototype.readToken_slash = function readToken_slash() {
	    // '/'
	    if (this.state.exprAllowed) {
	      ++this.state.pos;
	      return this.readRegexp();
	    }

	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(types$1.assign, 2);
	    } else {
	      return this.finishOp(types$1.slash, 1);
	    }
	  };

	  Tokenizer.prototype.readToken_mult_modulo = function readToken_mult_modulo(code) {
	    // '%*'
	    var type = code === 42 ? types$1.star : types$1.modulo;
	    var width = 1;
	    var next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === 42) {
	      // '*'
	      width++;
	      next = this.input.charCodeAt(this.state.pos + 2);
	      type = types$1.exponent;
	    }

	    if (next === 61) {
	      width++;
	      type = types$1.assign;
	    }

	    return this.finishOp(type, width);
	  };

	  Tokenizer.prototype.readToken_pipe_amp = function readToken_pipe_amp(code) {
	    // '|&'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === code) return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);
	    if (next === 61) return this.finishOp(types$1.assign, 2);
	    if (code === 124 && next === 125 && this.hasPlugin("flow")) return this.finishOp(types$1.braceBarR, 2);
	    return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);
	  };

	  Tokenizer.prototype.readToken_caret = function readToken_caret() {
	    // '^'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(types$1.assign, 2);
	    } else {
	      return this.finishOp(types$1.bitwiseXOR, 1);
	    }
	  };

	  Tokenizer.prototype.readToken_plus_min = function readToken_plus_min(code) {
	    // '+-'
	    var next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === code) {
	      if (next === 45 && this.input.charCodeAt(this.state.pos + 2) === 62 && lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {
	        // A `-->` line comment
	        this.skipLineComment(3);
	        this.skipSpace();
	        return this.nextToken();
	      }
	      return this.finishOp(types$1.incDec, 2);
	    }

	    if (next === 61) {
	      return this.finishOp(types$1.assign, 2);
	    } else {
	      return this.finishOp(types$1.plusMin, 1);
	    }
	  };

	  Tokenizer.prototype.readToken_lt_gt = function readToken_lt_gt(code) {
	    // '<>'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    var size = 1;

	    if (next === code) {
	      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;
	      if (this.input.charCodeAt(this.state.pos + size) === 61) return this.finishOp(types$1.assign, size + 1);
	      return this.finishOp(types$1.bitShift, size);
	    }

	    if (next === 33 && code === 60 && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {
	      if (this.inModule) this.unexpected();
	      // `<!--`, an XML-style comment that should be interpreted as a line comment
	      this.skipLineComment(4);
	      this.skipSpace();
	      return this.nextToken();
	    }

	    if (next === 61) {
	      // <= | >=
	      size = 2;
	    }

	    return this.finishOp(types$1.relational, size);
	  };

	  Tokenizer.prototype.readToken_eq_excl = function readToken_eq_excl(code) {
	    // '=!'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) return this.finishOp(types$1.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
	    if (code === 61 && next === 62) {
	      // '=>'
	      this.state.pos += 2;
	      return this.finishToken(types$1.arrow);
	    }
	    return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1);
	  };

	  Tokenizer.prototype.getTokenFromCode = function getTokenFromCode(code) {
	    switch (code) {
	      // The interpretation of a dot depends on whether it is followed
	      // by a digit or another two dots.
	      case 46:
	        // '.'
	        return this.readToken_dot();

	      // Punctuation tokens.
	      case 40:
	        ++this.state.pos;return this.finishToken(types$1.parenL);
	      case 41:
	        ++this.state.pos;return this.finishToken(types$1.parenR);
	      case 59:
	        ++this.state.pos;return this.finishToken(types$1.semi);
	      case 44:
	        ++this.state.pos;return this.finishToken(types$1.comma);
	      case 91:
	        ++this.state.pos;return this.finishToken(types$1.bracketL);
	      case 93:
	        ++this.state.pos;return this.finishToken(types$1.bracketR);

	      case 123:
	        if (this.hasPlugin("flow") && this.input.charCodeAt(this.state.pos + 1) === 124) {
	          return this.finishOp(types$1.braceBarL, 2);
	        } else {
	          ++this.state.pos;
	          return this.finishToken(types$1.braceL);
	        }

	      case 125:
	        ++this.state.pos;return this.finishToken(types$1.braceR);

	      case 58:
	        if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
	          return this.finishOp(types$1.doubleColon, 2);
	        } else {
	          ++this.state.pos;
	          return this.finishToken(types$1.colon);
	        }

	      case 63:
	        ++this.state.pos;return this.finishToken(types$1.question);
	      case 64:
	        ++this.state.pos;return this.finishToken(types$1.at);

	      case 96:
	        // '`'
	        ++this.state.pos;
	        return this.finishToken(types$1.backQuote);

	      case 48:
	        // '0'
	        var next = this.input.charCodeAt(this.state.pos + 1);
	        if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number
	        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number
	        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number
	      // Anything else beginning with a digit is an integer, octal
	      // number, or float.
	      case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
	        // 1-9
	        return this.readNumber(false);

	      // Quotes produce strings.
	      case 34:case 39:
	        // '"', "'"
	        return this.readString(code);

	      // Operators are parsed inline in tiny state machines. '=' (61) is
	      // often referred to. `finishOp` simply skips the amount of
	      // characters it is given as second argument, and returns a token
	      // of the type given by its first argument.

	      case 47:
	        // '/'
	        return this.readToken_slash();

	      case 37:case 42:
	        // '%*'
	        return this.readToken_mult_modulo(code);

	      case 124:case 38:
	        // '|&'
	        return this.readToken_pipe_amp(code);

	      case 94:
	        // '^'
	        return this.readToken_caret();

	      case 43:case 45:
	        // '+-'
	        return this.readToken_plus_min(code);

	      case 60:case 62:
	        // '<>'
	        return this.readToken_lt_gt(code);

	      case 61:case 33:
	        // '=!'
	        return this.readToken_eq_excl(code);

	      case 126:
	        // '~'
	        return this.finishOp(types$1.prefix, 1);
	    }

	    this.raise(this.state.pos, "Unexpected character '" + codePointToString(code) + "'");
	  };

	  Tokenizer.prototype.finishOp = function finishOp(type, size) {
	    var str = this.input.slice(this.state.pos, this.state.pos + size);
	    this.state.pos += size;
	    return this.finishToken(type, str);
	  };

	  Tokenizer.prototype.readRegexp = function readRegexp() {
	    var start = this.state.pos;
	    var escaped = void 0,
	        inClass = void 0;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(start, "Unterminated regular expression");
	      var ch = this.input.charAt(this.state.pos);
	      if (lineBreak.test(ch)) {
	        this.raise(start, "Unterminated regular expression");
	      }
	      if (escaped) {
	        escaped = false;
	      } else {
	        if (ch === "[") {
	          inClass = true;
	        } else if (ch === "]" && inClass) {
	          inClass = false;
	        } else if (ch === "/" && !inClass) {
	          break;
	        }
	        escaped = ch === "\\";
	      }
	      ++this.state.pos;
	    }
	    var content = this.input.slice(start, this.state.pos);
	    ++this.state.pos;
	    // Need to use `readWord1` because '\uXXXX' sequences are allowed
	    // here (don't ask).
	    var mods = this.readWord1();
	    if (mods) {
	      var validFlags = /^[gmsiyu]*$/;
	      if (!validFlags.test(mods)) this.raise(start, "Invalid regular expression flag");
	    }
	    return this.finishToken(types$1.regexp, {
	      pattern: content,
	      flags: mods
	    });
	  };

	  // Read an integer in the given radix. Return null if zero digits
	  // were read, the integer value otherwise. When `len` is given, this
	  // will return `null` unless the integer has exactly `len` digits.

	  Tokenizer.prototype.readInt = function readInt(radix, len) {
	    var start = this.state.pos;
	    var total = 0;

	    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	      var code = this.input.charCodeAt(this.state.pos);
	      var val = void 0;
	      if (code >= 97) {
	        val = code - 97 + 10; // a
	      } else if (code >= 65) {
	        val = code - 65 + 10; // A
	      } else if (code >= 48 && code <= 57) {
	        val = code - 48; // 0-9
	      } else {
	        val = Infinity;
	      }
	      if (val >= radix) break;
	      ++this.state.pos;
	      total = total * radix + val;
	    }
	    if (this.state.pos === start || len != null && this.state.pos - start !== len) return null;

	    return total;
	  };

	  Tokenizer.prototype.readRadixNumber = function readRadixNumber(radix) {
	    this.state.pos += 2; // 0x
	    var val = this.readInt(radix);
	    if (val == null) this.raise(this.state.start + 2, "Expected number in radix " + radix);
	    if (isIdentifierStart$1(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");
	    return this.finishToken(types$1.num, val);
	  };

	  // Read an integer, octal integer, or floating-point number.

	  Tokenizer.prototype.readNumber = function readNumber(startsWithDot) {
	    var start = this.state.pos;
	    var octal = this.input.charCodeAt(start) === 48; // '0'
	    var isFloat = false;

	    if (!startsWithDot && this.readInt(10) === null) this.raise(start, "Invalid number");
	    if (octal && this.state.pos == start + 1) octal = false; // number === 0

	    var next = this.input.charCodeAt(this.state.pos);
	    if (next === 46 && !octal) {
	      // '.'
	      ++this.state.pos;
	      this.readInt(10);
	      isFloat = true;
	      next = this.input.charCodeAt(this.state.pos);
	    }

	    if ((next === 69 || next === 101) && !octal) {
	      // 'eE'
	      next = this.input.charCodeAt(++this.state.pos);
	      if (next === 43 || next === 45) ++this.state.pos; // '+-'
	      if (this.readInt(10) === null) this.raise(start, "Invalid number");
	      isFloat = true;
	    }

	    if (isIdentifierStart$1(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");

	    var str = this.input.slice(start, this.state.pos);
	    var val = void 0;
	    if (isFloat) {
	      val = parseFloat(str);
	    } else if (!octal || str.length === 1) {
	      val = parseInt(str, 10);
	    } else if (this.state.strict) {
	      this.raise(start, "Invalid number");
	    } else if (/[89]/.test(str)) {
	      val = parseInt(str, 10);
	    } else {
	      val = parseInt(str, 8);
	    }
	    return this.finishToken(types$1.num, val);
	  };

	  // Read a string value, interpreting backslash-escapes.

	  Tokenizer.prototype.readCodePoint = function readCodePoint(throwOnInvalid) {
	    var ch = this.input.charCodeAt(this.state.pos);
	    var code = void 0;

	    if (ch === 123) {
	      // '{'
	      var codePos = ++this.state.pos;
	      code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos, throwOnInvalid);
	      ++this.state.pos;
	      if (code === null) {
	        --this.state.invalidTemplateEscapePosition; // to point to the '\'' instead of the 'u'
	      } else if (code > 0x10FFFF) {
	        if (throwOnInvalid) {
	          this.raise(codePos, "Code point out of bounds");
	        } else {
	          this.state.invalidTemplateEscapePosition = codePos - 2;
	          return null;
	        }
	      }
	    } else {
	      code = this.readHexChar(4, throwOnInvalid);
	    }
	    return code;
	  };

	  Tokenizer.prototype.readString = function readString(quote) {
	    var out = "",
	        chunkStart = ++this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated string constant");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === quote) break;
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(false);
	        chunkStart = this.state.pos;
	      } else {
	        if (isNewLine(ch)) this.raise(this.state.start, "Unterminated string constant");
	        ++this.state.pos;
	      }
	    }
	    out += this.input.slice(chunkStart, this.state.pos++);
	    return this.finishToken(types$1.string, out);
	  };

	  // Reads template string tokens.

	  Tokenizer.prototype.readTmplToken = function readTmplToken() {
	    var out = "",
	        chunkStart = this.state.pos,
	        containsInvalid = false;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated template");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
	        // '`', '${'
	        if (this.state.pos === this.state.start && this.match(types$1.template)) {
	          if (ch === 36) {
	            this.state.pos += 2;
	            return this.finishToken(types$1.dollarBraceL);
	          } else {
	            ++this.state.pos;
	            return this.finishToken(types$1.backQuote);
	          }
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(types$1.template, containsInvalid ? null : out);
	      }
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        var escaped = this.readEscapedChar(true);
	        if (escaped === null) {
	          containsInvalid = true;
	        } else {
	          out += escaped;
	        }
	        chunkStart = this.state.pos;
	      } else if (isNewLine(ch)) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        ++this.state.pos;
	        switch (ch) {
	          case 13:
	            if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;
	          case 10:
	            out += "\n";
	            break;
	          default:
	            out += String.fromCharCode(ch);
	            break;
	        }
	        ++this.state.curLine;
	        this.state.lineStart = this.state.pos;
	        chunkStart = this.state.pos;
	      } else {
	        ++this.state.pos;
	      }
	    }
	  };

	  // Used to read escaped characters

	  Tokenizer.prototype.readEscapedChar = function readEscapedChar(inTemplate) {
	    var throwOnInvalid = !inTemplate;
	    var ch = this.input.charCodeAt(++this.state.pos);
	    ++this.state.pos;
	    switch (ch) {
	      case 110:
	        return "\n"; // 'n' -> '\n'
	      case 114:
	        return "\r"; // 'r' -> '\r'
	      case 120:
	        {
	          // 'x'
	          var code = this.readHexChar(2, throwOnInvalid);
	          return code === null ? null : String.fromCharCode(code);
	        }
	      case 117:
	        {
	          // 'u'
	          var _code = this.readCodePoint(throwOnInvalid);
	          return _code === null ? null : codePointToString(_code);
	        }
	      case 116:
	        return "\t"; // 't' -> '\t'
	      case 98:
	        return "\b"; // 'b' -> '\b'
	      case 118:
	        return "\x0B"; // 'v' -> '\u000b'
	      case 102:
	        return "\f"; // 'f' -> '\f'
	      case 13:
	        if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos; // '\r\n'
	      case 10:
	        // ' \n'
	        this.state.lineStart = this.state.pos;
	        ++this.state.curLine;
	        return "";
	      default:
	        if (ch >= 48 && ch <= 55) {
	          var codePos = this.state.pos - 1;
	          var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];
	          var octal = parseInt(octalStr, 8);
	          if (octal > 255) {
	            octalStr = octalStr.slice(0, -1);
	            octal = parseInt(octalStr, 8);
	          }
	          if (octal > 0) {
	            if (inTemplate) {
	              this.state.invalidTemplateEscapePosition = codePos;
	              return null;
	            } else if (this.state.strict) {
	              this.raise(codePos, "Octal literal in strict mode");
	            } else if (!this.state.containsOctal) {
	              // These properties are only used to throw an error for an octal which occurs
	              // in a directive which occurs prior to a "use strict" directive.
	              this.state.containsOctal = true;
	              this.state.octalPosition = codePos;
	            }
	          }
	          this.state.pos += octalStr.length - 1;
	          return String.fromCharCode(octal);
	        }
	        return String.fromCharCode(ch);
	    }
	  };

	  // Used to read character escape sequences ('\x', '\u').

	  Tokenizer.prototype.readHexChar = function readHexChar(len, throwOnInvalid) {
	    var codePos = this.state.pos;
	    var n = this.readInt(16, len);
	    if (n === null) {
	      if (throwOnInvalid) {
	        this.raise(codePos, "Bad character escape sequence");
	      } else {
	        this.state.pos = codePos - 1;
	        this.state.invalidTemplateEscapePosition = codePos - 1;
	      }
	    }
	    return n;
	  };

	  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`
	  // to whether the word contained a '\u' escape.
	  //
	  // Incrementally adds only escaped chars, adding other chunks as-is
	  // as a micro-optimization.

	  Tokenizer.prototype.readWord1 = function readWord1() {
	    this.state.containsEsc = false;
	    var word = "",
	        first = true,
	        chunkStart = this.state.pos;
	    while (this.state.pos < this.input.length) {
	      var ch = this.fullCharCodeAtPos();
	      if (isIdentifierChar$1(ch)) {
	        this.state.pos += ch <= 0xffff ? 1 : 2;
	      } else if (ch === 92) {
	        // "\"
	        this.state.containsEsc = true;

	        word += this.input.slice(chunkStart, this.state.pos);
	        var escStart = this.state.pos;

	        if (this.input.charCodeAt(++this.state.pos) !== 117) {
	          // "u"
	          this.raise(this.state.pos, "Expecting Unicode escape sequence \\uXXXX");
	        }

	        ++this.state.pos;
	        var esc = this.readCodePoint(true);
	        if (!(first ? isIdentifierStart$1 : isIdentifierChar$1)(esc)) {
	          this.raise(escStart, "Invalid Unicode escape");
	        }

	        word += codePointToString(esc);
	        chunkStart = this.state.pos;
	      } else {
	        break;
	      }
	      first = false;
	    }
	    return word + this.input.slice(chunkStart, this.state.pos);
	  };

	  // Read an identifier or keyword token. Will check for reserved
	  // words when necessary.

	  Tokenizer.prototype.readWord = function readWord() {
	    var word = this.readWord1();
	    var type = types$1.name;
	    if (!this.state.containsEsc && this.isKeyword(word)) {
	      type = keywords$1[word];
	    }
	    return this.finishToken(type, word);
	  };

	  Tokenizer.prototype.braceIsBlock = function braceIsBlock(prevType) {
	    if (prevType === types$1.colon) {
	      var parent = this.curContext();
	      if (parent === types$1$1.braceStatement || parent === types$1$1.braceExpression) {
	        return !parent.isExpr;
	      }
	    }

	    if (prevType === types$1._return) {
	      return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	    }

	    if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR) {
	      return true;
	    }

	    if (prevType === types$1.braceL) {
	      return this.curContext() === types$1$1.braceStatement;
	    }

	    return !this.state.exprAllowed;
	  };

	  Tokenizer.prototype.updateContext = function updateContext(prevType) {
	    var type = this.state.type;
	    var update = void 0;

	    if (type.keyword && prevType === types$1.dot) {
	      this.state.exprAllowed = false;
	    } else if (update = type.updateContext) {
	      update.call(this, prevType);
	    } else {
	      this.state.exprAllowed = type.beforeExpr;
	    }
	  };

	  return Tokenizer;
	}();

	var plugins$3 = {};
	var frozenDeprecatedWildcardPluginList = ["jsx", "doExpressions", "objectRestSpread", "decorators", "classProperties", "exportExtensions", "asyncGenerators", "functionBind", "functionSent", "dynamicImport", "flow"];

	var Parser$3 = function (_Tokenizer) {
	  inherits$2(Parser, _Tokenizer);

	  function Parser(options, input) {
	    classCallCheck(this, Parser);

	    options = getOptions(options);

	    var _this = possibleConstructorReturn(this, _Tokenizer.call(this, options, input));

	    _this.options = options;
	    _this.inModule = _this.options.sourceType === "module";
	    _this.input = input;
	    _this.plugins = _this.loadPlugins(_this.options.plugins);
	    _this.filename = options.sourceFilename;

	    // If enabled, skip leading hashbang line.
	    if (_this.state.pos === 0 && _this.input[0] === "#" && _this.input[1] === "!") {
	      _this.skipLineComment(2);
	    }
	    return _this;
	  }

	  Parser.prototype.isReservedWord = function isReservedWord(word) {
	    if (word === "await") {
	      return this.inModule;
	    } else {
	      return reservedWords$1[6](word);
	    }
	  };

	  Parser.prototype.hasPlugin = function hasPlugin(name) {
	    if (this.plugins["*"] && frozenDeprecatedWildcardPluginList.indexOf(name) > -1) {
	      return true;
	    }

	    return !!this.plugins[name];
	  };

	  Parser.prototype.extend = function extend(name, f) {
	    this[name] = f(this[name]);
	  };

	  Parser.prototype.loadAllPlugins = function loadAllPlugins() {
	    var _this2 = this;

	    // ensure flow plugin loads last, also ensure estree is not loaded with *
	    var pluginNames = Object.keys(plugins$3).filter(function (name) {
	      return name !== "flow" && name !== "estree";
	    });
	    pluginNames.push("flow");

	    pluginNames.forEach(function (name) {
	      var plugin = plugins$3[name];
	      if (plugin) plugin(_this2);
	    });
	  };

	  Parser.prototype.loadPlugins = function loadPlugins(pluginList) {
	    // TODO: Deprecate "*" option in next major version of Babylon
	    if (pluginList.indexOf("*") >= 0) {
	      this.loadAllPlugins();

	      return { "*": true };
	    }

	    var pluginMap = {};

	    if (pluginList.indexOf("flow") >= 0) {
	      // ensure flow plugin loads last
	      pluginList = pluginList.filter(function (plugin) {
	        return plugin !== "flow";
	      });
	      pluginList.push("flow");
	    }

	    if (pluginList.indexOf("estree") >= 0) {
	      // ensure estree plugin loads first
	      pluginList = pluginList.filter(function (plugin) {
	        return plugin !== "estree";
	      });
	      pluginList.unshift("estree");
	    }

	    for (var _iterator = pluginList, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var name = _ref;

	      if (!pluginMap[name]) {
	        pluginMap[name] = true;

	        var plugin = plugins$3[name];
	        if (plugin) plugin(this);
	      }
	    }

	    return pluginMap;
	  };

	  Parser.prototype.parse = function parse() {
	    var file = this.startNode();
	    var program = this.startNode();
	    this.nextToken();
	    return this.parseTopLevel(file, program);
	  };

	  return Parser;
	}(Tokenizer$2);

	var pp = Parser$3.prototype;

	// ## Parser utilities

	// TODO

	pp.addExtra = function (node, key, val) {
	  if (!node) return;

	  var extra = node.extra = node.extra || {};
	  extra[key] = val;
	};

	// TODO

	pp.isRelational = function (op) {
	  return this.match(types$1.relational) && this.state.value === op;
	};

	// TODO

	pp.expectRelational = function (op) {
	  if (this.isRelational(op)) {
	    this.next();
	  } else {
	    this.unexpected(null, types$1.relational);
	  }
	};

	// Tests whether parsed token is a contextual keyword.

	pp.isContextual = function (name) {
	  return this.match(types$1.name) && this.state.value === name;
	};

	// Consumes contextual keyword if possible.

	pp.eatContextual = function (name) {
	  return this.state.value === name && this.eat(types$1.name);
	};

	// Asserts that following token is given contextual keyword.

	pp.expectContextual = function (name, message) {
	  if (!this.eatContextual(name)) this.unexpected(null, message);
	};

	// Test whether a semicolon can be inserted at the current position.

	pp.canInsertSemicolon = function () {
	  return this.match(types$1.eof) || this.match(types$1.braceR) || lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	};

	// TODO

	pp.isLineTerminator = function () {
	  return this.eat(types$1.semi) || this.canInsertSemicolon();
	};

	// Consume a semicolon, or, failing that, see if we are allowed to
	// pretend that there is a semicolon at this position.

	pp.semicolon = function () {
	  if (!this.isLineTerminator()) this.unexpected(null, types$1.semi);
	};

	// Expect a token of a given type. If found, consume it, otherwise,
	// raise an unexpected token error at given pos.

	pp.expect = function (type, pos) {
	  return this.eat(type) || this.unexpected(pos, type);
	};

	// Raise an unexpected token error. Can take the expected token type
	// instead of a message string.

	pp.unexpected = function (pos) {
	  var messageOrType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "Unexpected token";

	  if (messageOrType && (typeof messageOrType === "undefined" ? "undefined" : _typeof$1(messageOrType)) === "object" && messageOrType.label) {
	    messageOrType = "Unexpected token, expected " + messageOrType.label;
	  }
	  this.raise(pos != null ? pos : this.state.start, messageOrType);
	};

	/* eslint max-len: 0 */

	var pp$1 = Parser$3.prototype;

	// ### Statement parsing

	// Parse a program. Initializes the parser, reads any number of
	// statements, and wraps them in a Program node.  Optionally takes a
	// `program` argument.  If present, the statements will be appended
	// to its body instead of creating a new node.

	pp$1.parseTopLevel = function (file, program) {
	  program.sourceType = this.options.sourceType;

	  this.parseBlockBody(program, true, true, types$1.eof);

	  file.program = this.finishNode(program, "Program");
	  file.comments = this.state.comments;
	  file.tokens = this.state.tokens;

	  return this.finishNode(file, "File");
	};

	var loopLabel = { kind: "loop" };
	var switchLabel = { kind: "switch" };

	// TODO

	pp$1.stmtToDirective = function (stmt) {
	  var expr = stmt.expression;

	  var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);
	  var directive = this.startNodeAt(stmt.start, stmt.loc.start);

	  var raw = this.input.slice(expr.start, expr.end);
	  var val = directiveLiteral.value = raw.slice(1, -1); // remove quotes

	  this.addExtra(directiveLiteral, "raw", raw);
	  this.addExtra(directiveLiteral, "rawValue", val);

	  directive.value = this.finishNodeAt(directiveLiteral, "DirectiveLiteral", expr.end, expr.loc.end);

	  return this.finishNodeAt(directive, "Directive", stmt.end, stmt.loc.end);
	};

	// Parse a single statement.
	//
	// If expecting a statement and finding a slash operator, parse a
	// regular expression literal. This is to handle cases like
	// `if (foo) /blah/.exec(foo)`, where looking at the previous token
	// does not help.

	pp$1.parseStatement = function (declaration, topLevel) {
	  if (this.match(types$1.at)) {
	    this.parseDecorators(true);
	  }

	  var starttype = this.state.type;
	  var node = this.startNode();

	  // Most types of statements are recognized by the keyword they
	  // start with. Many are trivial to parse, some require a bit of
	  // complexity.

	  switch (starttype) {
	    case types$1._break:case types$1._continue:
	      return this.parseBreakContinueStatement(node, starttype.keyword);
	    case types$1._debugger:
	      return this.parseDebuggerStatement(node);
	    case types$1._do:
	      return this.parseDoStatement(node);
	    case types$1._for:
	      return this.parseForStatement(node);
	    case types$1._function:
	      if (!declaration) this.unexpected();
	      return this.parseFunctionStatement(node);

	    case types$1._class:
	      if (!declaration) this.unexpected();
	      return this.parseClass(node, true);

	    case types$1._if:
	      return this.parseIfStatement(node);
	    case types$1._return:
	      return this.parseReturnStatement(node);
	    case types$1._switch:
	      return this.parseSwitchStatement(node);
	    case types$1._throw:
	      return this.parseThrowStatement(node);
	    case types$1._try:
	      return this.parseTryStatement(node);

	    case types$1._let:
	    case types$1._const:
	      if (!declaration) this.unexpected(); // NOTE: falls through to _var

	    case types$1._var:
	      return this.parseVarStatement(node, starttype);

	    case types$1._while:
	      return this.parseWhileStatement(node);
	    case types$1._with:
	      return this.parseWithStatement(node);
	    case types$1.braceL:
	      return this.parseBlock();
	    case types$1.semi:
	      return this.parseEmptyStatement(node);
	    case types$1._export:
	    case types$1._import:
	      if (this.hasPlugin("dynamicImport") && this.lookahead().type === types$1.parenL) break;

	      if (!this.options.allowImportExportEverywhere) {
	        if (!topLevel) {
	          this.raise(this.state.start, "'import' and 'export' may only appear at the top level");
	        }

	        if (!this.inModule) {
	          this.raise(this.state.start, "'import' and 'export' may appear only with 'sourceType: \"module\"'");
	        }
	      }
	      return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node);

	    case types$1.name:
	      if (this.state.value === "async") {
	        // peek ahead and see if next token is a function
	        var state = this.state.clone();
	        this.next();
	        if (this.match(types$1._function) && !this.canInsertSemicolon()) {
	          this.expect(types$1._function);
	          return this.parseFunction(node, true, false, true);
	        } else {
	          this.state = state;
	        }
	      }
	  }

	  // If the statement does not start with a statement keyword or a
	  // brace, it's an ExpressionStatement or LabeledStatement. We
	  // simply start parsing an expression, and afterwards, if the
	  // next token is a colon and the expression was a simple
	  // Identifier node, we switch to interpreting it as a label.
	  var maybeName = this.state.value;
	  var expr = this.parseExpression();

	  if (starttype === types$1.name && expr.type === "Identifier" && this.eat(types$1.colon)) {
	    return this.parseLabeledStatement(node, maybeName, expr);
	  } else {
	    return this.parseExpressionStatement(node, expr);
	  }
	};

	pp$1.takeDecorators = function (node) {
	  if (this.state.decorators.length) {
	    node.decorators = this.state.decorators;
	    this.state.decorators = [];
	  }
	};

	pp$1.parseDecorators = function (allowExport) {
	  while (this.match(types$1.at)) {
	    var decorator = this.parseDecorator();
	    this.state.decorators.push(decorator);
	  }

	  if (allowExport && this.match(types$1._export)) {
	    return;
	  }

	  if (!this.match(types$1._class)) {
	    this.raise(this.state.start, "Leading decorators must be attached to a class declaration");
	  }
	};

	pp$1.parseDecorator = function () {
	  if (!this.hasPlugin("decorators")) {
	    this.unexpected();
	  }
	  var node = this.startNode();
	  this.next();
	  node.expression = this.parseMaybeAssign();
	  return this.finishNode(node, "Decorator");
	};

	pp$1.parseBreakContinueStatement = function (node, keyword) {
	  var isBreak = keyword === "break";
	  this.next();

	  if (this.isLineTerminator()) {
	    node.label = null;
	  } else if (!this.match(types$1.name)) {
	    this.unexpected();
	  } else {
	    node.label = this.parseIdentifier();
	    this.semicolon();
	  }

	  // Verify that there is an actual destination to break or
	  // continue to.
	  var i = void 0;
	  for (i = 0; i < this.state.labels.length; ++i) {
	    var lab = this.state.labels[i];
	    if (node.label == null || lab.name === node.label.name) {
	      if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
	      if (node.label && isBreak) break;
	    }
	  }
	  if (i === this.state.labels.length) this.raise(node.start, "Unsyntactic " + keyword);
	  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
	};

	pp$1.parseDebuggerStatement = function (node) {
	  this.next();
	  this.semicolon();
	  return this.finishNode(node, "DebuggerStatement");
	};

	pp$1.parseDoStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  this.expect(types$1._while);
	  node.test = this.parseParenExpression();
	  this.eat(types$1.semi);
	  return this.finishNode(node, "DoWhileStatement");
	};

	// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
	// loop is non-trivial. Basically, we have to parse the init `var`
	// statement or expression, disallowing the `in` operator (see
	// the second parameter to `parseExpression`), and then check
	// whether the next token is `in` or `of`. When there is no init
	// part (semicolon immediately after the opening parenthesis), it
	// is a regular `for` loop.

	pp$1.parseForStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);

	  var forAwait = false;
	  if (this.hasPlugin("asyncGenerators") && this.state.inAsync && this.isContextual("await")) {
	    forAwait = true;
	    this.next();
	  }
	  this.expect(types$1.parenL);

	  if (this.match(types$1.semi)) {
	    if (forAwait) {
	      this.unexpected();
	    }
	    return this.parseFor(node, null);
	  }

	  if (this.match(types$1._var) || this.match(types$1._let) || this.match(types$1._const)) {
	    var _init = this.startNode();
	    var varKind = this.state.type;
	    this.next();
	    this.parseVar(_init, true, varKind);
	    this.finishNode(_init, "VariableDeclaration");

	    if (this.match(types$1._in) || this.isContextual("of")) {
	      if (_init.declarations.length === 1 && !_init.declarations[0].init) {
	        return this.parseForIn(node, _init, forAwait);
	      }
	    }
	    if (forAwait) {
	      this.unexpected();
	    }
	    return this.parseFor(node, _init);
	  }

	  var refShorthandDefaultPos = { start: 0 };
	  var init = this.parseExpression(true, refShorthandDefaultPos);
	  if (this.match(types$1._in) || this.isContextual("of")) {
	    var description = this.isContextual("of") ? "for-of statement" : "for-in statement";
	    this.toAssignable(init, undefined, description);
	    this.checkLVal(init, undefined, undefined, description);
	    return this.parseForIn(node, init, forAwait);
	  } else if (refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }
	  if (forAwait) {
	    this.unexpected();
	  }
	  return this.parseFor(node, init);
	};

	pp$1.parseFunctionStatement = function (node) {
	  this.next();
	  return this.parseFunction(node, true);
	};

	pp$1.parseIfStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  node.consequent = this.parseStatement(false);
	  node.alternate = this.eat(types$1._else) ? this.parseStatement(false) : null;
	  return this.finishNode(node, "IfStatement");
	};

	pp$1.parseReturnStatement = function (node) {
	  if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {
	    this.raise(this.state.start, "'return' outside of function");
	  }

	  this.next();

	  // In `return` (and `break`/`continue`), the keywords with
	  // optional arguments, we eagerly look for a semicolon or the
	  // possibility to insert one.

	  if (this.isLineTerminator()) {
	    node.argument = null;
	  } else {
	    node.argument = this.parseExpression();
	    this.semicolon();
	  }

	  return this.finishNode(node, "ReturnStatement");
	};

	pp$1.parseSwitchStatement = function (node) {
	  this.next();
	  node.discriminant = this.parseParenExpression();
	  node.cases = [];
	  this.expect(types$1.braceL);
	  this.state.labels.push(switchLabel);

	  // Statements under must be grouped (by label) in SwitchCase
	  // nodes. `cur` is used to keep the node that we are currently
	  // adding statements to.

	  var cur = void 0;
	  for (var sawDefault; !this.match(types$1.braceR);) {
	    if (this.match(types$1._case) || this.match(types$1._default)) {
	      var isCase = this.match(types$1._case);
	      if (cur) this.finishNode(cur, "SwitchCase");
	      node.cases.push(cur = this.startNode());
	      cur.consequent = [];
	      this.next();
	      if (isCase) {
	        cur.test = this.parseExpression();
	      } else {
	        if (sawDefault) this.raise(this.state.lastTokStart, "Multiple default clauses");
	        sawDefault = true;
	        cur.test = null;
	      }
	      this.expect(types$1.colon);
	    } else {
	      if (cur) {
	        cur.consequent.push(this.parseStatement(true));
	      } else {
	        this.unexpected();
	      }
	    }
	  }
	  if (cur) this.finishNode(cur, "SwitchCase");
	  this.next(); // Closing brace
	  this.state.labels.pop();
	  return this.finishNode(node, "SwitchStatement");
	};

	pp$1.parseThrowStatement = function (node) {
	  this.next();
	  if (lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) this.raise(this.state.lastTokEnd, "Illegal newline after throw");
	  node.argument = this.parseExpression();
	  this.semicolon();
	  return this.finishNode(node, "ThrowStatement");
	};

	// Reused empty array added for node fields that are always empty.

	var empty$1 = [];

	pp$1.parseTryStatement = function (node) {
	  this.next();

	  node.block = this.parseBlock();
	  node.handler = null;

	  if (this.match(types$1._catch)) {
	    var clause = this.startNode();
	    this.next();

	    this.expect(types$1.parenL);
	    clause.param = this.parseBindingAtom();
	    this.checkLVal(clause.param, true, Object.create(null), "catch clause");
	    this.expect(types$1.parenR);

	    clause.body = this.parseBlock();
	    node.handler = this.finishNode(clause, "CatchClause");
	  }

	  node.guardedHandlers = empty$1;
	  node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;

	  if (!node.handler && !node.finalizer) {
	    this.raise(node.start, "Missing catch or finally clause");
	  }

	  return this.finishNode(node, "TryStatement");
	};

	pp$1.parseVarStatement = function (node, kind) {
	  this.next();
	  this.parseVar(node, false, kind);
	  this.semicolon();
	  return this.finishNode(node, "VariableDeclaration");
	};

	pp$1.parseWhileStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "WhileStatement");
	};

	pp$1.parseWithStatement = function (node) {
	  if (this.state.strict) this.raise(this.state.start, "'with' in strict mode");
	  this.next();
	  node.object = this.parseParenExpression();
	  node.body = this.parseStatement(false);
	  return this.finishNode(node, "WithStatement");
	};

	pp$1.parseEmptyStatement = function (node) {
	  this.next();
	  return this.finishNode(node, "EmptyStatement");
	};

	pp$1.parseLabeledStatement = function (node, maybeName, expr) {
	  for (var _iterator = this.state.labels, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var _label = _ref;

	    if (_label.name === maybeName) {
	      this.raise(expr.start, "Label '" + maybeName + "' is already declared");
	    }
	  }

	  var kind = this.state.type.isLoop ? "loop" : this.match(types$1._switch) ? "switch" : null;
	  for (var i = this.state.labels.length - 1; i >= 0; i--) {
	    var label = this.state.labels[i];
	    if (label.statementStart === node.start) {
	      label.statementStart = this.state.start;
	      label.kind = kind;
	    } else {
	      break;
	    }
	  }

	  this.state.labels.push({ name: maybeName, kind: kind, statementStart: this.state.start });
	  node.body = this.parseStatement(true);
	  this.state.labels.pop();
	  node.label = expr;
	  return this.finishNode(node, "LabeledStatement");
	};

	pp$1.parseExpressionStatement = function (node, expr) {
	  node.expression = expr;
	  this.semicolon();
	  return this.finishNode(node, "ExpressionStatement");
	};

	// Parse a semicolon-enclosed block of statements, handling `"use
	// strict"` declarations when `allowStrict` is true (used for
	// function bodies).

	pp$1.parseBlock = function (allowDirectives) {
	  var node = this.startNode();
	  this.expect(types$1.braceL);
	  this.parseBlockBody(node, allowDirectives, false, types$1.braceR);
	  return this.finishNode(node, "BlockStatement");
	};

	pp$1.isValidDirective = function (stmt) {
	  return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
	};

	pp$1.parseBlockBody = function (node, allowDirectives, topLevel, end) {
	  node.body = [];
	  node.directives = [];

	  var parsedNonDirective = false;
	  var oldStrict = void 0;
	  var octalPosition = void 0;

	  while (!this.eat(end)) {
	    if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {
	      octalPosition = this.state.octalPosition;
	    }

	    var stmt = this.parseStatement(true, topLevel);

	    if (allowDirectives && !parsedNonDirective && this.isValidDirective(stmt)) {
	      var directive = this.stmtToDirective(stmt);
	      node.directives.push(directive);

	      if (oldStrict === undefined && directive.value.value === "use strict") {
	        oldStrict = this.state.strict;
	        this.setStrict(true);

	        if (octalPosition) {
	          this.raise(octalPosition, "Octal literal in strict mode");
	        }
	      }

	      continue;
	    }

	    parsedNonDirective = true;
	    node.body.push(stmt);
	  }

	  if (oldStrict === false) {
	    this.setStrict(false);
	  }
	};

	// Parse a regular `for` loop. The disambiguation code in
	// `parseStatement` will already have parsed the init statement or
	// expression.

	pp$1.parseFor = function (node, init) {
	  node.init = init;
	  this.expect(types$1.semi);
	  node.test = this.match(types$1.semi) ? null : this.parseExpression();
	  this.expect(types$1.semi);
	  node.update = this.match(types$1.parenR) ? null : this.parseExpression();
	  this.expect(types$1.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "ForStatement");
	};

	// Parse a `for`/`in` and `for`/`of` loop, which are almost
	// same from parser's perspective.

	pp$1.parseForIn = function (node, init, forAwait) {
	  var type = void 0;
	  if (forAwait) {
	    this.eatContextual("of");
	    type = "ForAwaitStatement";
	  } else {
	    type = this.match(types$1._in) ? "ForInStatement" : "ForOfStatement";
	    this.next();
	  }
	  node.left = init;
	  node.right = this.parseExpression();
	  this.expect(types$1.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, type);
	};

	// Parse a list of variable declarations.

	pp$1.parseVar = function (node, isFor, kind) {
	  node.declarations = [];
	  node.kind = kind.keyword;
	  for (;;) {
	    var decl = this.startNode();
	    this.parseVarHead(decl);
	    if (this.eat(types$1.eq)) {
	      decl.init = this.parseMaybeAssign(isFor);
	    } else if (kind === types$1._const && !(this.match(types$1._in) || this.isContextual("of"))) {
	      this.unexpected();
	    } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(types$1._in) || this.isContextual("of")))) {
	      this.raise(this.state.lastTokEnd, "Complex binding patterns require an initialization value");
	    } else {
	      decl.init = null;
	    }
	    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
	    if (!this.eat(types$1.comma)) break;
	  }
	  return node;
	};

	pp$1.parseVarHead = function (decl) {
	  decl.id = this.parseBindingAtom();
	  this.checkLVal(decl.id, true, undefined, "variable declaration");
	};

	// Parse a function declaration or literal (depending on the
	// `isStatement` parameter).

	pp$1.parseFunction = function (node, isStatement, allowExpressionBody, isAsync, optionalId) {
	  var oldInMethod = this.state.inMethod;
	  this.state.inMethod = false;

	  this.initFunction(node, isAsync);

	  if (this.match(types$1.star)) {
	    if (node.async && !this.hasPlugin("asyncGenerators")) {
	      this.unexpected();
	    } else {
	      node.generator = true;
	      this.next();
	    }
	  }

	  if (isStatement && !optionalId && !this.match(types$1.name) && !this.match(types$1._yield)) {
	    this.unexpected();
	  }

	  if (this.match(types$1.name) || this.match(types$1._yield)) {
	    node.id = this.parseBindingIdentifier();
	  }

	  this.parseFunctionParams(node);
	  this.parseFunctionBody(node, allowExpressionBody);

	  this.state.inMethod = oldInMethod;

	  return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
	};

	pp$1.parseFunctionParams = function (node) {
	  this.expect(types$1.parenL);
	  node.params = this.parseBindingList(types$1.parenR);
	};

	// Parse a class declaration or literal (depending on the
	// `isStatement` parameter).

	pp$1.parseClass = function (node, isStatement, optionalId) {
	  this.next();
	  this.takeDecorators(node);
	  this.parseClassId(node, isStatement, optionalId);
	  this.parseClassSuper(node);
	  this.parseClassBody(node);
	  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
	};

	pp$1.isClassProperty = function () {
	  return this.match(types$1.eq) || this.match(types$1.semi) || this.match(types$1.braceR);
	};

	pp$1.isClassMethod = function () {
	  return this.match(types$1.parenL);
	};

	pp$1.isNonstaticConstructor = function (method) {
	  return !method.computed && !method.static && (method.key.name === "constructor" || // Identifier
	  method.key.value === "constructor" // Literal
	  );
	};

	pp$1.parseClassBody = function (node) {
	  // class bodies are implicitly strict
	  var oldStrict = this.state.strict;
	  this.state.strict = true;

	  var hadConstructorCall = false;
	  var hadConstructor = false;
	  var decorators = [];
	  var classBody = this.startNode();

	  classBody.body = [];

	  this.expect(types$1.braceL);

	  while (!this.eat(types$1.braceR)) {
	    if (this.eat(types$1.semi)) {
	      if (decorators.length > 0) {
	        this.raise(this.state.lastTokEnd, "Decorators must not be followed by a semicolon");
	      }
	      continue;
	    }

	    if (this.match(types$1.at)) {
	      decorators.push(this.parseDecorator());
	      continue;
	    }

	    var method = this.startNode();

	    // steal the decorators if there are any
	    if (decorators.length) {
	      method.decorators = decorators;
	      decorators = [];
	    }

	    method.static = false;
	    if (this.match(types$1.name) && this.state.value === "static") {
	      var key = this.parseIdentifier(true); // eats 'static'
	      if (this.isClassMethod()) {
	        // a method named 'static'
	        method.kind = "method";
	        method.computed = false;
	        method.key = key;
	        this.parseClassMethod(classBody, method, false, false);
	        continue;
	      } else if (this.isClassProperty()) {
	        // a property named 'static'
	        method.computed = false;
	        method.key = key;
	        classBody.body.push(this.parseClassProperty(method));
	        continue;
	      }
	      // otherwise something static
	      method.static = true;
	    }

	    if (this.eat(types$1.star)) {
	      // a generator
	      method.kind = "method";
	      this.parsePropertyName(method);
	      if (this.isNonstaticConstructor(method)) {
	        this.raise(method.key.start, "Constructor can't be a generator");
	      }
	      if (!method.computed && method.static && (method.key.name === "prototype" || method.key.value === "prototype")) {
	        this.raise(method.key.start, "Classes may not have static property named prototype");
	      }
	      this.parseClassMethod(classBody, method, true, false);
	    } else {
	      var isSimple = this.match(types$1.name);
	      var _key = this.parsePropertyName(method);
	      if (!method.computed && method.static && (method.key.name === "prototype" || method.key.value === "prototype")) {
	        this.raise(method.key.start, "Classes may not have static property named prototype");
	      }
	      if (this.isClassMethod()) {
	        // a normal method
	        if (this.isNonstaticConstructor(method)) {
	          if (hadConstructor) {
	            this.raise(_key.start, "Duplicate constructor in the same class");
	          } else if (method.decorators) {
	            this.raise(method.start, "You can't attach decorators to a class constructor");
	          }
	          hadConstructor = true;
	          method.kind = "constructor";
	        } else {
	          method.kind = "method";
	        }
	        this.parseClassMethod(classBody, method, false, false);
	      } else if (this.isClassProperty()) {
	        // a normal property
	        if (this.isNonstaticConstructor(method)) {
	          this.raise(method.key.start, "Classes may not have a non-static field named 'constructor'");
	        }
	        classBody.body.push(this.parseClassProperty(method));
	      } else if (isSimple && _key.name === "async" && !this.isLineTerminator()) {
	        // an async method
	        var isGenerator = this.hasPlugin("asyncGenerators") && this.eat(types$1.star);
	        method.kind = "method";
	        this.parsePropertyName(method);
	        if (this.isNonstaticConstructor(method)) {
	          this.raise(method.key.start, "Constructor can't be an async function");
	        }
	        this.parseClassMethod(classBody, method, isGenerator, true);
	      } else if (isSimple && (_key.name === "get" || _key.name === "set") && !(this.isLineTerminator() && this.match(types$1.star))) {
	        // `get\n*` is an uninitialized property named 'get' followed by a generator.
	        // a getter or setter
	        method.kind = _key.name;
	        this.parsePropertyName(method);
	        if (this.isNonstaticConstructor(method)) {
	          this.raise(method.key.start, "Constructor can't have get/set modifier");
	        }
	        this.parseClassMethod(classBody, method, false, false);
	        this.checkGetterSetterParamCount(method);
	      } else if (this.hasPlugin("classConstructorCall") && isSimple && _key.name === "call" && this.match(types$1.name) && this.state.value === "constructor") {
	        // a (deprecated) call constructor
	        if (hadConstructorCall) {
	          this.raise(method.start, "Duplicate constructor call in the same class");
	        } else if (method.decorators) {
	          this.raise(method.start, "You can't attach decorators to a class constructor");
	        }
	        hadConstructorCall = true;
	        method.kind = "constructorCall";
	        this.parsePropertyName(method); // consume "constructor" and make it the method's name
	        this.parseClassMethod(classBody, method, false, false);
	      } else if (this.isLineTerminator()) {
	        // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)
	        if (this.isNonstaticConstructor(method)) {
	          this.raise(method.key.start, "Classes may not have a non-static field named 'constructor'");
	        }
	        classBody.body.push(this.parseClassProperty(method));
	      } else {
	        this.unexpected();
	      }
	    }
	  }

	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no method");
	  }

	  node.body = this.finishNode(classBody, "ClassBody");

	  this.state.strict = oldStrict;
	};

	pp$1.parseClassProperty = function (node) {
	  this.state.inClassProperty = true;
	  if (this.match(types$1.eq)) {
	    if (!this.hasPlugin("classProperties")) this.unexpected();
	    this.next();
	    node.value = this.parseMaybeAssign();
	  } else {
	    node.value = null;
	  }
	  this.semicolon();
	  this.state.inClassProperty = false;
	  return this.finishNode(node, "ClassProperty");
	};

	pp$1.parseClassMethod = function (classBody, method, isGenerator, isAsync) {
	  this.parseMethod(method, isGenerator, isAsync);
	  classBody.body.push(this.finishNode(method, "ClassMethod"));
	};

	pp$1.parseClassId = function (node, isStatement, optionalId) {
	  if (this.match(types$1.name)) {
	    node.id = this.parseIdentifier();
	  } else {
	    if (optionalId || !isStatement) {
	      node.id = null;
	    } else {
	      this.unexpected();
	    }
	  }
	};

	pp$1.parseClassSuper = function (node) {
	  node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts() : null;
	};

	// Parses module export declaration.

	pp$1.parseExport = function (node) {
	  this.next();
	  // export * from '...'
	  if (this.match(types$1.star)) {
	    var specifier = this.startNode();
	    this.next();
	    if (this.hasPlugin("exportExtensions") && this.eatContextual("as")) {
	      specifier.exported = this.parseIdentifier();
	      node.specifiers = [this.finishNode(specifier, "ExportNamespaceSpecifier")];
	      this.parseExportSpecifiersMaybe(node);
	      this.parseExportFrom(node, true);
	    } else {
	      this.parseExportFrom(node, true);
	      return this.finishNode(node, "ExportAllDeclaration");
	    }
	  } else if (this.hasPlugin("exportExtensions") && this.isExportDefaultSpecifier()) {
	    var _specifier = this.startNode();
	    _specifier.exported = this.parseIdentifier(true);
	    node.specifiers = [this.finishNode(_specifier, "ExportDefaultSpecifier")];
	    if (this.match(types$1.comma) && this.lookahead().type === types$1.star) {
	      this.expect(types$1.comma);
	      var _specifier2 = this.startNode();
	      this.expect(types$1.star);
	      this.expectContextual("as");
	      _specifier2.exported = this.parseIdentifier();
	      node.specifiers.push(this.finishNode(_specifier2, "ExportNamespaceSpecifier"));
	    } else {
	      this.parseExportSpecifiersMaybe(node);
	    }
	    this.parseExportFrom(node, true);
	  } else if (this.eat(types$1._default)) {
	    // export default ...
	    var expr = this.startNode();
	    var needsSemi = false;
	    if (this.eat(types$1._function)) {
	      expr = this.parseFunction(expr, true, false, false, true);
	    } else if (this.match(types$1._class)) {
	      expr = this.parseClass(expr, true, true);
	    } else {
	      needsSemi = true;
	      expr = this.parseMaybeAssign();
	    }
	    node.declaration = expr;
	    if (needsSemi) this.semicolon();
	    this.checkExport(node, true, true);
	    return this.finishNode(node, "ExportDefaultDeclaration");
	  } else if (this.shouldParseExportDeclaration()) {
	    node.specifiers = [];
	    node.source = null;
	    node.declaration = this.parseExportDeclaration(node);
	  } else {
	    // export { x, y as z } [from '...']
	    node.declaration = null;
	    node.specifiers = this.parseExportSpecifiers();
	    this.parseExportFrom(node);
	  }
	  this.checkExport(node, true);
	  return this.finishNode(node, "ExportNamedDeclaration");
	};

	pp$1.parseExportDeclaration = function () {
	  return this.parseStatement(true);
	};

	pp$1.isExportDefaultSpecifier = function () {
	  if (this.match(types$1.name)) {
	    return this.state.value !== "async";
	  }

	  if (!this.match(types$1._default)) {
	    return false;
	  }

	  var lookahead = this.lookahead();
	  return lookahead.type === types$1.comma || lookahead.type === types$1.name && lookahead.value === "from";
	};

	pp$1.parseExportSpecifiersMaybe = function (node) {
	  if (this.eat(types$1.comma)) {
	    node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());
	  }
	};

	pp$1.parseExportFrom = function (node, expect) {
	  if (this.eatContextual("from")) {
	    node.source = this.match(types$1.string) ? this.parseExprAtom() : this.unexpected();
	    this.checkExport(node);
	  } else {
	    if (expect) {
	      this.unexpected();
	    } else {
	      node.source = null;
	    }
	  }

	  this.semicolon();
	};

	pp$1.shouldParseExportDeclaration = function () {
	  return this.state.type.keyword === "var" || this.state.type.keyword === "const" || this.state.type.keyword === "let" || this.state.type.keyword === "function" || this.state.type.keyword === "class" || this.isContextual("async");
	};

	pp$1.checkExport = function (node, checkNames, isDefault) {
	  if (checkNames) {
	    // Check for duplicate exports
	    if (isDefault) {
	      // Default exports
	      this.checkDuplicateExports(node, "default");
	    } else if (node.specifiers && node.specifiers.length) {
	      // Named exports
	      for (var _iterator2 = node.specifiers, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
	        var _ref2;

	        if (_isArray2) {
	          if (_i2 >= _iterator2.length) break;
	          _ref2 = _iterator2[_i2++];
	        } else {
	          _i2 = _iterator2.next();
	          if (_i2.done) break;
	          _ref2 = _i2.value;
	        }

	        var specifier = _ref2;

	        this.checkDuplicateExports(specifier, specifier.exported.name);
	      }
	    } else if (node.declaration) {
	      // Exported declarations
	      if (node.declaration.type === "FunctionDeclaration" || node.declaration.type === "ClassDeclaration") {
	        this.checkDuplicateExports(node, node.declaration.id.name);
	      } else if (node.declaration.type === "VariableDeclaration") {
	        for (var _iterator3 = node.declaration.declarations, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
	          var _ref3;

	          if (_isArray3) {
	            if (_i3 >= _iterator3.length) break;
	            _ref3 = _iterator3[_i3++];
	          } else {
	            _i3 = _iterator3.next();
	            if (_i3.done) break;
	            _ref3 = _i3.value;
	          }

	          var declaration = _ref3;

	          this.checkDeclaration(declaration.id);
	        }
	      }
	    }
	  }

	  if (this.state.decorators.length) {
	    var isClass = node.declaration && (node.declaration.type === "ClassDeclaration" || node.declaration.type === "ClassExpression");
	    if (!node.declaration || !isClass) {
	      this.raise(node.start, "You can only use decorators on an export when exporting a class");
	    }
	    this.takeDecorators(node.declaration);
	  }
	};

	pp$1.checkDeclaration = function (node) {
	  if (node.type === "ObjectPattern") {
	    for (var _iterator4 = node.properties, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
	      var _ref4;

	      if (_isArray4) {
	        if (_i4 >= _iterator4.length) break;
	        _ref4 = _iterator4[_i4++];
	      } else {
	        _i4 = _iterator4.next();
	        if (_i4.done) break;
	        _ref4 = _i4.value;
	      }

	      var prop = _ref4;

	      this.checkDeclaration(prop);
	    }
	  } else if (node.type === "ArrayPattern") {
	    for (var _iterator5 = node.elements, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
	      var _ref5;

	      if (_isArray5) {
	        if (_i5 >= _iterator5.length) break;
	        _ref5 = _iterator5[_i5++];
	      } else {
	        _i5 = _iterator5.next();
	        if (_i5.done) break;
	        _ref5 = _i5.value;
	      }

	      var elem = _ref5;

	      if (elem) {
	        this.checkDeclaration(elem);
	      }
	    }
	  } else if (node.type === "ObjectProperty") {
	    this.checkDeclaration(node.value);
	  } else if (node.type === "RestElement" || node.type === "RestProperty") {
	    this.checkDeclaration(node.argument);
	  } else if (node.type === "Identifier") {
	    this.checkDuplicateExports(node, node.name);
	  }
	};

	pp$1.checkDuplicateExports = function (node, name) {
	  if (this.state.exportedIdentifiers.indexOf(name) > -1) {
	    this.raiseDuplicateExportError(node, name);
	  }
	  this.state.exportedIdentifiers.push(name);
	};

	pp$1.raiseDuplicateExportError = function (node, name) {
	  this.raise(node.start, name === "default" ? "Only one default export allowed per module." : "`" + name + "` has already been exported. Exported identifiers must be unique.");
	};

	// Parses a comma-separated list of module exports.

	pp$1.parseExportSpecifiers = function () {
	  var nodes = [];
	  var first = true;
	  var needsFrom = void 0;

	  // export { x, y as z } [from '...']
	  this.expect(types$1.braceL);

	  while (!this.eat(types$1.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(types$1.comma);
	      if (this.eat(types$1.braceR)) break;
	    }

	    var isDefault = this.match(types$1._default);
	    if (isDefault && !needsFrom) needsFrom = true;

	    var node = this.startNode();
	    node.local = this.parseIdentifier(isDefault);
	    node.exported = this.eatContextual("as") ? this.parseIdentifier(true) : node.local.__clone();
	    nodes.push(this.finishNode(node, "ExportSpecifier"));
	  }

	  // https://github.com/ember-cli/ember-cli/pull/3739
	  if (needsFrom && !this.isContextual("from")) {
	    this.unexpected();
	  }

	  return nodes;
	};

	// Parses import declaration.

	pp$1.parseImport = function (node) {
	  this.eat(types$1._import);

	  // import '...'
	  if (this.match(types$1.string)) {
	    node.specifiers = [];
	    node.source = this.parseExprAtom();
	  } else {
	    node.specifiers = [];
	    this.parseImportSpecifiers(node);
	    this.expectContextual("from");
	    node.source = this.match(types$1.string) ? this.parseExprAtom() : this.unexpected();
	  }
	  this.semicolon();
	  return this.finishNode(node, "ImportDeclaration");
	};

	// Parses a comma-separated list of module imports.

	pp$1.parseImportSpecifiers = function (node) {
	  var first = true;
	  if (this.match(types$1.name)) {
	    // import defaultObj, { x, y as z } from '...'
	    var startPos = this.state.start;
	    var startLoc = this.state.startLoc;
	    node.specifiers.push(this.parseImportSpecifierDefault(this.parseIdentifier(), startPos, startLoc));
	    if (!this.eat(types$1.comma)) return;
	  }

	  if (this.match(types$1.star)) {
	    var specifier = this.startNode();
	    this.next();
	    this.expectContextual("as");
	    specifier.local = this.parseIdentifier();
	    this.checkLVal(specifier.local, true, undefined, "import namespace specifier");
	    node.specifiers.push(this.finishNode(specifier, "ImportNamespaceSpecifier"));
	    return;
	  }

	  this.expect(types$1.braceL);
	  while (!this.eat(types$1.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      // Detect an attempt to deep destructure
	      if (this.eat(types$1.colon)) {
	        this.unexpected(null, "ES2015 named imports do not destructure. Use another statement for destructuring after the import.");
	      }

	      this.expect(types$1.comma);
	      if (this.eat(types$1.braceR)) break;
	    }

	    this.parseImportSpecifier(node);
	  }
	};

	pp$1.parseImportSpecifier = function (node) {
	  var specifier = this.startNode();
	  specifier.imported = this.parseIdentifier(true);
	  if (this.eatContextual("as")) {
	    specifier.local = this.parseIdentifier();
	  } else {
	    this.checkReservedWord(specifier.imported.name, specifier.start, true, true);
	    specifier.local = specifier.imported.__clone();
	  }
	  this.checkLVal(specifier.local, true, undefined, "import specifier");
	  node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
	};

	pp$1.parseImportSpecifierDefault = function (id, startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.local = id;
	  this.checkLVal(node.local, true, undefined, "default import specifier");
	  return this.finishNode(node, "ImportDefaultSpecifier");
	};

	var pp$2 = Parser$3.prototype;

	// Convert existing expression atom to assignable pattern
	// if possible.

	pp$2.toAssignable = function (node, isBinding, contextDescription) {
	  if (node) {
	    switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	      case "AssignmentPattern":
	        break;

	      case "ObjectExpression":
	        node.type = "ObjectPattern";
	        for (var _iterator = node.properties, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var prop = _ref;

	          if (prop.type === "ObjectMethod") {
	            if (prop.kind === "get" || prop.kind === "set") {
	              this.raise(prop.key.start, "Object pattern can't contain getter or setter");
	            } else {
	              this.raise(prop.key.start, "Object pattern can't contain methods");
	            }
	          } else {
	            this.toAssignable(prop, isBinding, "object destructuring pattern");
	          }
	        }
	        break;

	      case "ObjectProperty":
	        this.toAssignable(node.value, isBinding, contextDescription);
	        break;

	      case "SpreadProperty":
	        node.type = "RestProperty";
	        var arg = node.argument;
	        this.toAssignable(arg, isBinding, contextDescription);
	        break;

	      case "ArrayExpression":
	        node.type = "ArrayPattern";
	        this.toAssignableList(node.elements, isBinding, contextDescription);
	        break;

	      case "AssignmentExpression":
	        if (node.operator === "=") {
	          node.type = "AssignmentPattern";
	          delete node.operator;
	        } else {
	          this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
	        }
	        break;

	      case "MemberExpression":
	        if (!isBinding) break;

	      default:
	        {
	          var message = "Invalid left-hand side" + (contextDescription ? " in " + contextDescription : /* istanbul ignore next */"expression");
	          this.raise(node.start, message);
	        }
	    }
	  }
	  return node;
	};

	// Convert list of expression atoms to binding list.

	pp$2.toAssignableList = function (exprList, isBinding, contextDescription) {
	  var end = exprList.length;
	  if (end) {
	    var last = exprList[end - 1];
	    if (last && last.type === "RestElement") {
	      --end;
	    } else if (last && last.type === "SpreadElement") {
	      last.type = "RestElement";
	      var arg = last.argument;
	      this.toAssignable(arg, isBinding, contextDescription);
	      if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern") {
	        this.unexpected(arg.start);
	      }
	      --end;
	    }
	  }
	  for (var i = 0; i < end; i++) {
	    var elt = exprList[i];
	    if (elt) this.toAssignable(elt, isBinding, contextDescription);
	  }
	  return exprList;
	};

	// Convert list of expression atoms to a list of

	pp$2.toReferencedList = function (exprList) {
	  return exprList;
	};

	// Parses spread element.

	pp$2.parseSpread = function (refShorthandDefaultPos) {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseMaybeAssign(false, refShorthandDefaultPos);
	  return this.finishNode(node, "SpreadElement");
	};

	pp$2.parseRest = function () {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseBindingIdentifier();
	  return this.finishNode(node, "RestElement");
	};

	pp$2.shouldAllowYieldIdentifier = function () {
	  return this.match(types$1._yield) && !this.state.strict && !this.state.inGenerator;
	};

	pp$2.parseBindingIdentifier = function () {
	  return this.parseIdentifier(this.shouldAllowYieldIdentifier());
	};

	// Parses lvalue (assignable) atom.

	pp$2.parseBindingAtom = function () {
	  switch (this.state.type) {
	    case types$1._yield:
	      if (this.state.strict || this.state.inGenerator) this.unexpected();
	    // fall-through
	    case types$1.name:
	      return this.parseIdentifier(true);

	    case types$1.bracketL:
	      var node = this.startNode();
	      this.next();
	      node.elements = this.parseBindingList(types$1.bracketR, true);
	      return this.finishNode(node, "ArrayPattern");

	    case types$1.braceL:
	      return this.parseObj(true);

	    default:
	      this.unexpected();
	  }
	};

	pp$2.parseBindingList = function (close, allowEmpty) {
	  var elts = [];
	  var first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(types$1.comma);
	    }
	    if (allowEmpty && this.match(types$1.comma)) {
	      elts.push(null);
	    } else if (this.eat(close)) {
	      break;
	    } else if (this.match(types$1.ellipsis)) {
	      elts.push(this.parseAssignableListItemTypes(this.parseRest()));
	      this.expect(close);
	      break;
	    } else {
	      var decorators = [];
	      while (this.match(types$1.at)) {
	        decorators.push(this.parseDecorator());
	      }
	      var left = this.parseMaybeDefault();
	      if (decorators.length) {
	        left.decorators = decorators;
	      }
	      this.parseAssignableListItemTypes(left);
	      elts.push(this.parseMaybeDefault(left.start, left.loc.start, left));
	    }
	  }
	  return elts;
	};

	pp$2.parseAssignableListItemTypes = function (param) {
	  return param;
	};

	// Parses assignment pattern around given atom if possible.

	pp$2.parseMaybeDefault = function (startPos, startLoc, left) {
	  startLoc = startLoc || this.state.startLoc;
	  startPos = startPos || this.state.start;
	  left = left || this.parseBindingAtom();
	  if (!this.eat(types$1.eq)) return left;

	  var node = this.startNodeAt(startPos, startLoc);
	  node.left = left;
	  node.right = this.parseMaybeAssign();
	  return this.finishNode(node, "AssignmentPattern");
	};

	// Verify that a node is an lval — something that can be assigned
	// to.

	pp$2.checkLVal = function (expr, isBinding, checkClashes, contextDescription) {
	  switch (expr.type) {
	    case "Identifier":
	      this.checkReservedWord(expr.name, expr.start, false, true);

	      if (checkClashes) {
	        // we need to prefix this with an underscore for the cases where we have a key of
	        // `__proto__`. there's a bug in old V8 where the following wouldn't work:
	        //
	        //   > var obj = Object.create(null);
	        //   undefined
	        //   > obj.__proto__
	        //   null
	        //   > obj.__proto__ = true;
	        //   true
	        //   > obj.__proto__
	        //   null
	        var key = "_" + expr.name;

	        if (checkClashes[key]) {
	          this.raise(expr.start, "Argument name clash in strict mode");
	        } else {
	          checkClashes[key] = true;
	        }
	      }
	      break;

	    case "MemberExpression":
	      if (isBinding) this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " member expression");
	      break;

	    case "ObjectPattern":
	      for (var _iterator2 = expr.properties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
	        var _ref2;

	        if (_isArray2) {
	          if (_i2 >= _iterator2.length) break;
	          _ref2 = _iterator2[_i2++];
	        } else {
	          _i2 = _iterator2.next();
	          if (_i2.done) break;
	          _ref2 = _i2.value;
	        }

	        var prop = _ref2;

	        if (prop.type === "ObjectProperty") prop = prop.value;
	        this.checkLVal(prop, isBinding, checkClashes, "object destructuring pattern");
	      }
	      break;

	    case "ArrayPattern":
	      for (var _iterator3 = expr.elements, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
	        var _ref3;

	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }

	        var elem = _ref3;

	        if (elem) this.checkLVal(elem, isBinding, checkClashes, "array destructuring pattern");
	      }
	      break;

	    case "AssignmentPattern":
	      this.checkLVal(expr.left, isBinding, checkClashes, "assignment pattern");
	      break;

	    case "RestProperty":
	      this.checkLVal(expr.argument, isBinding, checkClashes, "rest property");
	      break;

	    case "RestElement":
	      this.checkLVal(expr.argument, isBinding, checkClashes, "rest element");
	      break;

	    default:
	      {
	        var message = (isBinding ? /* istanbul ignore next */"Binding invalid" : "Invalid") + " left-hand side" + (contextDescription ? " in " + contextDescription : /* istanbul ignore next */"expression");
	        this.raise(expr.start, message);
	      }
	  }
	};

	/* eslint max-len: 0 */

	// A recursive descent parser operates by defining functions for all
	// syntactic elements, and recursively calling those, each function
	// advancing the input stream and returning an AST node. Precedence
	// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
	// instead of `(!x)[1]` is handled by the fact that the parser
	// function that parses unary prefix operators is called first, and
	// in turn calls the function that parses `[]` subscripts — that
	// way, it'll receive the node for `x[1]` already parsed, and wraps
	// *that* in the unary operator node.
	//
	// Acorn uses an [operator precedence parser][opp] to handle binary
	// operator precedence, because it is much more compact than using
	// the technique outlined above, which uses different, nesting
	// functions to specify precedence, for all of the ten binary
	// precedence levels that JavaScript defines.
	//
	// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser

	var pp$3 = Parser$3.prototype;

	// Check if property name clashes with already added.
	// Object/class getters and setters are not allowed to clash —
	// either with each other or with an init property — and in
	// strict mode, init properties are also not allowed to be repeated.

	pp$3.checkPropClash = function (prop, propHash) {
	  if (prop.computed || prop.kind) return;

	  var key = prop.key;
	  // It is either an Identifier or a String/NumericLiteral
	  var name = key.type === "Identifier" ? key.name : String(key.value);

	  if (name === "__proto__") {
	    if (propHash.proto) this.raise(key.start, "Redefinition of __proto__ property");
	    propHash.proto = true;
	  }
	};

	// Convenience method to parse an Expression only
	pp$3.getExpression = function () {
	  this.nextToken();
	  var expr = this.parseExpression();
	  if (!this.match(types$1.eof)) {
	    this.unexpected();
	  }
	  return expr;
	};

	// ### Expression parsing

	// These nest, from the most general expression type at the top to
	// 'atomic', nondivisible expression types at the bottom. Most of
	// the functions will simply let the function (s) below them parse,
	// and, *if* the syntactic construct they handle is present, wrap
	// the AST node that the inner parser gave them in another node.

	// Parse a full expression. The optional arguments are used to
	// forbid the `in` operator (in for loops initialization expressions)
	// and provide reference for storing '=' operator inside shorthand
	// property assignment in contexts where both object expression
	// and object pattern might appear (so it's possible to raise
	// delayed syntax error at correct position).

	pp$3.parseExpression = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;
	  var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);
	  if (this.match(types$1.comma)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.expressions = [expr];
	    while (this.eat(types$1.comma)) {
	      node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));
	    }
	    this.toReferencedList(node.expressions);
	    return this.finishNode(node, "SequenceExpression");
	  }
	  return expr;
	};

	// Parse an assignment expression. This includes applications of
	// operators like `+=`.

	pp$3.parseMaybeAssign = function (noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos) {
	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;

	  if (this.match(types$1._yield) && this.state.inGenerator) {
	    var _left = this.parseYield();
	    if (afterLeftParse) _left = afterLeftParse.call(this, _left, startPos, startLoc);
	    return _left;
	  }

	  var failOnShorthandAssign = void 0;
	  if (refShorthandDefaultPos) {
	    failOnShorthandAssign = false;
	  } else {
	    refShorthandDefaultPos = { start: 0 };
	    failOnShorthandAssign = true;
	  }

	  if (this.match(types$1.parenL) || this.match(types$1.name)) {
	    this.state.potentialArrowAt = this.state.start;
	  }

	  var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos, refNeedsArrowPos);
	  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);
	  if (this.state.type.isAssign) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.state.value;
	    node.left = this.match(types$1.eq) ? this.toAssignable(left, undefined, "assignment expression") : left;
	    refShorthandDefaultPos.start = 0; // reset because shorthand default was used correctly

	    this.checkLVal(left, undefined, undefined, "assignment expression");

	    if (left.extra && left.extra.parenthesized) {
	      var errorMsg = void 0;
	      if (left.type === "ObjectPattern") {
	        errorMsg = "`({a}) = 0` use `({a} = 0)`";
	      } else if (left.type === "ArrayPattern") {
	        errorMsg = "`([a]) = 0` use `([a] = 0)`";
	      }
	      if (errorMsg) {
	        this.raise(left.start, "You're trying to assign to a parenthesized expression, eg. instead of " + errorMsg);
	      }
	    }

	    this.next();
	    node.right = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "AssignmentExpression");
	  } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }

	  return left;
	};

	// Parse a ternary conditional (`?:`) operator.

	pp$3.parseMaybeConditional = function (noIn, refShorthandDefaultPos, refNeedsArrowPos) {
	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;
	  var expr = this.parseExprOps(noIn, refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;

	  return this.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);
	};

	pp$3.parseConditional = function (expr, noIn, startPos, startLoc) {
	  if (this.eat(types$1.question)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.test = expr;
	    node.consequent = this.parseMaybeAssign();
	    this.expect(types$1.colon);
	    node.alternate = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "ConditionalExpression");
	  }
	  return expr;
	};

	// Start the precedence parser.

	pp$3.parseExprOps = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;
	  var expr = this.parseMaybeUnary(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	    return expr;
	  } else {
	    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
	  }
	};

	// Parse binary operators with the operator precedence parsing
	// algorithm. `left` is the left-hand side of the operator.
	// `minPrec` provides context that allows the function to stop and
	// defer further parser to one of its callers when it encounters an
	// operator that has a lower precedence than the set it is parsing.

	pp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
	  var prec = this.state.type.binop;
	  if (prec != null && (!noIn || !this.match(types$1._in))) {
	    if (prec > minPrec) {
	      var node = this.startNodeAt(leftStartPos, leftStartLoc);
	      node.left = left;
	      node.operator = this.state.value;

	      if (node.operator === "**" && left.type === "UnaryExpression" && left.extra && !left.extra.parenthesizedArgument && !left.extra.parenthesized) {
	        this.raise(left.argument.start, "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.");
	      }

	      var op = this.state.type;
	      this.next();

	      var startPos = this.state.start;
	      var startLoc = this.state.startLoc;
	      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);

	      this.finishNode(node, op === types$1.logicalOR || op === types$1.logicalAND ? "LogicalExpression" : "BinaryExpression");
	      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
	    }
	  }
	  return left;
	};

	// Parse unary operators, both prefix and postfix.

	pp$3.parseMaybeUnary = function (refShorthandDefaultPos) {
	  if (this.state.type.prefix) {
	    var node = this.startNode();
	    var update = this.match(types$1.incDec);
	    node.operator = this.state.value;
	    node.prefix = true;
	    this.next();

	    var argType = this.state.type;
	    node.argument = this.parseMaybeUnary();

	    this.addExtra(node, "parenthesizedArgument", argType === types$1.parenL && (!node.argument.extra || !node.argument.extra.parenthesized));

	    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	      this.unexpected(refShorthandDefaultPos.start);
	    }

	    if (update) {
	      this.checkLVal(node.argument, undefined, undefined, "prefix operation");
	    } else if (this.state.strict && node.operator === "delete" && node.argument.type === "Identifier") {
	      this.raise(node.start, "Deleting local variable in strict mode");
	    }

	    return this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
	  }

	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;
	  var expr = this.parseExprSubscripts(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  while (this.state.type.postfix && !this.canInsertSemicolon()) {
	    var _node = this.startNodeAt(startPos, startLoc);
	    _node.operator = this.state.value;
	    _node.prefix = false;
	    _node.argument = expr;
	    this.checkLVal(expr, undefined, undefined, "postfix operation");
	    this.next();
	    expr = this.finishNode(_node, "UpdateExpression");
	  }
	  return expr;
	};

	// Parse call, dot, and `[]`-subscript expressions.

	pp$3.parseExprSubscripts = function (refShorthandDefaultPos) {
	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;
	  var potentialArrowAt = this.state.potentialArrowAt;
	  var expr = this.parseExprAtom(refShorthandDefaultPos);

	  if (expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt) {
	    return expr;
	  }

	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	    return expr;
	  }

	  return this.parseSubscripts(expr, startPos, startLoc);
	};

	pp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {
	  for (;;) {
	    if (!noCalls && this.eat(types$1.doubleColon)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.callee = this.parseNoCallExpr();
	      return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
	    } else if (this.eat(types$1.dot)) {
	      var _node2 = this.startNodeAt(startPos, startLoc);
	      _node2.object = base;
	      _node2.property = this.parseIdentifier(true);
	      _node2.computed = false;
	      base = this.finishNode(_node2, "MemberExpression");
	    } else if (this.eat(types$1.bracketL)) {
	      var _node3 = this.startNodeAt(startPos, startLoc);
	      _node3.object = base;
	      _node3.property = this.parseExpression();
	      _node3.computed = true;
	      this.expect(types$1.bracketR);
	      base = this.finishNode(_node3, "MemberExpression");
	    } else if (!noCalls && this.match(types$1.parenL)) {
	      var possibleAsync = this.state.potentialArrowAt === base.start && base.type === "Identifier" && base.name === "async" && !this.canInsertSemicolon();
	      this.next();

	      var _node4 = this.startNodeAt(startPos, startLoc);
	      _node4.callee = base;
	      _node4.arguments = this.parseCallExpressionArguments(types$1.parenR, possibleAsync);
	      if (_node4.callee.type === "Import" && _node4.arguments.length !== 1) {
	        this.raise(_node4.start, "import() requires exactly one argument");
	      }
	      base = this.finishNode(_node4, "CallExpression");

	      if (possibleAsync && this.shouldParseAsyncArrow()) {
	        return this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), _node4);
	      } else {
	        this.toReferencedList(_node4.arguments);
	      }
	    } else if (this.match(types$1.backQuote)) {
	      var _node5 = this.startNodeAt(startPos, startLoc);
	      _node5.tag = base;
	      _node5.quasi = this.parseTemplate(true);
	      base = this.finishNode(_node5, "TaggedTemplateExpression");
	    } else {
	      return base;
	    }
	  }
	};

	pp$3.parseCallExpressionArguments = function (close, possibleAsyncArrow) {
	  var elts = [];
	  var innerParenStart = void 0;
	  var first = true;

	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(types$1.comma);
	      if (this.eat(close)) break;
	    }

	    // we need to make sure that if this is an async arrow functions, that we don't allow inner parens inside the params
	    if (this.match(types$1.parenL) && !innerParenStart) {
	      innerParenStart = this.state.start;
	    }

	    elts.push(this.parseExprListItem(false, possibleAsyncArrow ? { start: 0 } : undefined, possibleAsyncArrow ? { start: 0 } : undefined));
	  }

	  // we found an async arrow function so let's not allow any inner parens
	  if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {
	    this.unexpected();
	  }

	  return elts;
	};

	pp$3.shouldParseAsyncArrow = function () {
	  return this.match(types$1.arrow);
	};

	pp$3.parseAsyncArrowFromCallExpression = function (node, call) {
	  this.expect(types$1.arrow);
	  return this.parseArrowExpression(node, call.arguments, true);
	};

	// Parse a no-call expression (like argument of `new` or `::` operators).

	pp$3.parseNoCallExpr = function () {
	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;
	  return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
	};

	// Parse an atomic expression — either a single token that is an
	// expression, an expression started by a keyword like `function` or
	// `new`, or an expression wrapped in punctuation like `()`, `[]`,
	// or `{}`.

	pp$3.parseExprAtom = function (refShorthandDefaultPos) {
	  var canBeArrow = this.state.potentialArrowAt === this.state.start;
	  var node = void 0;

	  switch (this.state.type) {
	    case types$1._super:
	      if (!this.state.inMethod && !this.state.inClassProperty && !this.options.allowSuperOutsideMethod) {
	        this.raise(this.state.start, "'super' outside of function or class");
	      }

	      node = this.startNode();
	      this.next();
	      if (!this.match(types$1.parenL) && !this.match(types$1.bracketL) && !this.match(types$1.dot)) {
	        this.unexpected();
	      }
	      if (this.match(types$1.parenL) && this.state.inMethod !== "constructor" && !this.options.allowSuperOutsideMethod) {
	        this.raise(node.start, "super() outside of class constructor");
	      }
	      return this.finishNode(node, "Super");

	    case types$1._import:
	      if (!this.hasPlugin("dynamicImport")) this.unexpected();

	      node = this.startNode();
	      this.next();
	      if (!this.match(types$1.parenL)) {
	        this.unexpected(null, types$1.parenL);
	      }
	      return this.finishNode(node, "Import");

	    case types$1._this:
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, "ThisExpression");

	    case types$1._yield:
	      if (this.state.inGenerator) this.unexpected();

	    case types$1.name:
	      node = this.startNode();
	      var allowAwait = this.state.value === "await" && this.state.inAsync;
	      var allowYield = this.shouldAllowYieldIdentifier();
	      var id = this.parseIdentifier(allowAwait || allowYield);

	      if (id.name === "await") {
	        if (this.state.inAsync || this.inModule) {
	          return this.parseAwait(node);
	        }
	      } else if (id.name === "async" && this.match(types$1._function) && !this.canInsertSemicolon()) {
	        this.next();
	        return this.parseFunction(node, false, false, true);
	      } else if (canBeArrow && id.name === "async" && this.match(types$1.name)) {
	        var params = [this.parseIdentifier()];
	        this.expect(types$1.arrow);
	        // let foo = bar => {};
	        return this.parseArrowExpression(node, params, true);
	      }

	      if (canBeArrow && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {
	        return this.parseArrowExpression(node, [id]);
	      }

	      return id;

	    case types$1._do:
	      if (this.hasPlugin("doExpressions")) {
	        var _node6 = this.startNode();
	        this.next();
	        var oldInFunction = this.state.inFunction;
	        var oldLabels = this.state.labels;
	        this.state.labels = [];
	        this.state.inFunction = false;
	        _node6.body = this.parseBlock(false, true);
	        this.state.inFunction = oldInFunction;
	        this.state.labels = oldLabels;
	        return this.finishNode(_node6, "DoExpression");
	      }

	    case types$1.regexp:
	      var value = this.state.value;
	      node = this.parseLiteral(value.value, "RegExpLiteral");
	      node.pattern = value.pattern;
	      node.flags = value.flags;
	      return node;

	    case types$1.num:
	      return this.parseLiteral(this.state.value, "NumericLiteral");

	    case types$1.string:
	      return this.parseLiteral(this.state.value, "StringLiteral");

	    case types$1._null:
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, "NullLiteral");

	    case types$1._true:case types$1._false:
	      node = this.startNode();
	      node.value = this.match(types$1._true);
	      this.next();
	      return this.finishNode(node, "BooleanLiteral");

	    case types$1.parenL:
	      return this.parseParenAndDistinguishExpression(null, null, canBeArrow);

	    case types$1.bracketL:
	      node = this.startNode();
	      this.next();
	      node.elements = this.parseExprList(types$1.bracketR, true, refShorthandDefaultPos);
	      this.toReferencedList(node.elements);
	      return this.finishNode(node, "ArrayExpression");

	    case types$1.braceL:
	      return this.parseObj(false, refShorthandDefaultPos);

	    case types$1._function:
	      return this.parseFunctionExpression();

	    case types$1.at:
	      this.parseDecorators();

	    case types$1._class:
	      node = this.startNode();
	      this.takeDecorators(node);
	      return this.parseClass(node, false);

	    case types$1._new:
	      return this.parseNew();

	    case types$1.backQuote:
	      return this.parseTemplate(false);

	    case types$1.doubleColon:
	      node = this.startNode();
	      this.next();
	      node.object = null;
	      var callee = node.callee = this.parseNoCallExpr();
	      if (callee.type === "MemberExpression") {
	        return this.finishNode(node, "BindExpression");
	      } else {
	        this.raise(callee.start, "Binding should be performed on object property.");
	      }

	    default:
	      this.unexpected();
	  }
	};

	pp$3.parseFunctionExpression = function () {
	  var node = this.startNode();
	  var meta = this.parseIdentifier(true);
	  if (this.state.inGenerator && this.eat(types$1.dot) && this.hasPlugin("functionSent")) {
	    return this.parseMetaProperty(node, meta, "sent");
	  } else {
	    return this.parseFunction(node, false);
	  }
	};

	pp$3.parseMetaProperty = function (node, meta, propertyName) {
	  node.meta = meta;
	  node.property = this.parseIdentifier(true);

	  if (node.property.name !== propertyName) {
	    this.raise(node.property.start, "The only valid meta property for new is " + meta.name + "." + propertyName);
	  }

	  return this.finishNode(node, "MetaProperty");
	};

	pp$3.parseLiteral = function (value, type, startPos, startLoc) {
	  startPos = startPos || this.state.start;
	  startLoc = startLoc || this.state.startLoc;

	  var node = this.startNodeAt(startPos, startLoc);
	  this.addExtra(node, "rawValue", value);
	  this.addExtra(node, "raw", this.input.slice(startPos, this.state.end));
	  node.value = value;
	  this.next();
	  return this.finishNode(node, type);
	};

	pp$3.parseParenExpression = function () {
	  this.expect(types$1.parenL);
	  var val = this.parseExpression();
	  this.expect(types$1.parenR);
	  return val;
	};

	pp$3.parseParenAndDistinguishExpression = function (startPos, startLoc, canBeArrow) {
	  startPos = startPos || this.state.start;
	  startLoc = startLoc || this.state.startLoc;

	  var val = void 0;
	  this.expect(types$1.parenL);

	  var innerStartPos = this.state.start;
	  var innerStartLoc = this.state.startLoc;
	  var exprList = [];
	  var refShorthandDefaultPos = { start: 0 };
	  var refNeedsArrowPos = { start: 0 };
	  var first = true;
	  var spreadStart = void 0;
	  var optionalCommaStart = void 0;

	  while (!this.match(types$1.parenR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(types$1.comma, refNeedsArrowPos.start || null);
	      if (this.match(types$1.parenR)) {
	        optionalCommaStart = this.state.start;
	        break;
	      }
	    }

	    if (this.match(types$1.ellipsis)) {
	      var spreadNodeStartPos = this.state.start;
	      var spreadNodeStartLoc = this.state.startLoc;
	      spreadStart = this.state.start;
	      exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartPos, spreadNodeStartLoc));
	      break;
	    } else {
	      exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos));
	    }
	  }

	  var innerEndPos = this.state.start;
	  var innerEndLoc = this.state.startLoc;
	  this.expect(types$1.parenR);

	  var arrowNode = this.startNodeAt(startPos, startLoc);
	  if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {
	    for (var _iterator = exprList, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var param = _ref;

	      if (param.extra && param.extra.parenthesized) this.unexpected(param.extra.parenStart);
	    }

	    return this.parseArrowExpression(arrowNode, exprList);
	  }

	  if (!exprList.length) {
	    this.unexpected(this.state.lastTokStart);
	  }
	  if (optionalCommaStart) this.unexpected(optionalCommaStart);
	  if (spreadStart) this.unexpected(spreadStart);
	  if (refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);
	  if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);

	  if (exprList.length > 1) {
	    val = this.startNodeAt(innerStartPos, innerStartLoc);
	    val.expressions = exprList;
	    this.toReferencedList(val.expressions);
	    this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
	  } else {
	    val = exprList[0];
	  }

	  this.addExtra(val, "parenthesized", true);
	  this.addExtra(val, "parenStart", startPos);

	  return val;
	};

	pp$3.shouldParseArrow = function () {
	  return !this.canInsertSemicolon();
	};

	pp$3.parseArrow = function (node) {
	  if (this.eat(types$1.arrow)) {
	    return node;
	  }
	};

	pp$3.parseParenItem = function (node) {
	  return node;
	};

	// New's precedence is slightly tricky. It must allow its argument
	// to be a `[]` or dot subscript expression, but not a call — at
	// least, not without wrapping it in parentheses. Thus, it uses the

	pp$3.parseNew = function () {
	  var node = this.startNode();
	  var meta = this.parseIdentifier(true);

	  if (this.eat(types$1.dot)) {
	    var metaProp = this.parseMetaProperty(node, meta, "target");

	    if (!this.state.inFunction) {
	      this.raise(metaProp.property.start, "new.target can only be used in functions");
	    }

	    return metaProp;
	  }

	  node.callee = this.parseNoCallExpr();

	  if (this.eat(types$1.parenL)) {
	    node.arguments = this.parseExprList(types$1.parenR);
	    this.toReferencedList(node.arguments);
	  } else {
	    node.arguments = [];
	  }

	  return this.finishNode(node, "NewExpression");
	};

	// Parse template expression.

	pp$3.parseTemplateElement = function (isTagged) {
	  var elem = this.startNode();
	  if (this.state.value === null) {
	    if (!isTagged || !this.hasPlugin("templateInvalidEscapes")) {
	      this.raise(this.state.invalidTemplateEscapePosition, "Invalid escape sequence in template");
	    } else {
	      this.state.invalidTemplateEscapePosition = null;
	    }
	  }
	  elem.value = {
	    raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
	    cooked: this.state.value
	  };
	  this.next();
	  elem.tail = this.match(types$1.backQuote);
	  return this.finishNode(elem, "TemplateElement");
	};

	pp$3.parseTemplate = function (isTagged) {
	  var node = this.startNode();
	  this.next();
	  node.expressions = [];
	  var curElt = this.parseTemplateElement(isTagged);
	  node.quasis = [curElt];
	  while (!curElt.tail) {
	    this.expect(types$1.dollarBraceL);
	    node.expressions.push(this.parseExpression());
	    this.expect(types$1.braceR);
	    node.quasis.push(curElt = this.parseTemplateElement(isTagged));
	  }
	  this.next();
	  return this.finishNode(node, "TemplateLiteral");
	};

	// Parse an object literal or binding pattern.

	pp$3.parseObj = function (isPattern, refShorthandDefaultPos) {
	  var decorators = [];
	  var propHash = Object.create(null);
	  var first = true;
	  var node = this.startNode();

	  node.properties = [];
	  this.next();

	  var firstRestLocation = null;

	  while (!this.eat(types$1.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(types$1.comma);
	      if (this.eat(types$1.braceR)) break;
	    }

	    while (this.match(types$1.at)) {
	      decorators.push(this.parseDecorator());
	    }

	    var prop = this.startNode(),
	        isGenerator = false,
	        isAsync = false,
	        startPos = void 0,
	        startLoc = void 0;
	    if (decorators.length) {
	      prop.decorators = decorators;
	      decorators = [];
	    }

	    if (this.hasPlugin("objectRestSpread") && this.match(types$1.ellipsis)) {
	      prop = this.parseSpread(isPattern ? { start: 0 } : undefined);
	      prop.type = isPattern ? "RestProperty" : "SpreadProperty";
	      if (isPattern) this.toAssignable(prop.argument, true, "object pattern");
	      node.properties.push(prop);
	      if (isPattern) {
	        var position = this.state.start;
	        if (firstRestLocation !== null) {
	          this.unexpected(firstRestLocation, "Cannot have multiple rest elements when destructuring");
	        } else if (this.eat(types$1.braceR)) {
	          break;
	        } else if (this.match(types$1.comma) && this.lookahead().type === types$1.braceR) {
	          // TODO: temporary rollback
	          // this.unexpected(position, "A trailing comma is not permitted after the rest element");
	          continue;
	        } else {
	          firstRestLocation = position;
	          continue;
	        }
	      } else {
	        continue;
	      }
	    }

	    prop.method = false;
	    prop.shorthand = false;

	    if (isPattern || refShorthandDefaultPos) {
	      startPos = this.state.start;
	      startLoc = this.state.startLoc;
	    }

	    if (!isPattern) {
	      isGenerator = this.eat(types$1.star);
	    }

	    if (!isPattern && this.isContextual("async")) {
	      if (isGenerator) this.unexpected();

	      var asyncId = this.parseIdentifier();
	      if (this.match(types$1.colon) || this.match(types$1.parenL) || this.match(types$1.braceR) || this.match(types$1.eq) || this.match(types$1.comma)) {
	        prop.key = asyncId;
	        prop.computed = false;
	      } else {
	        isAsync = true;
	        if (this.hasPlugin("asyncGenerators")) isGenerator = this.eat(types$1.star);
	        this.parsePropertyName(prop);
	      }
	    } else {
	      this.parsePropertyName(prop);
	    }

	    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos);
	    this.checkPropClash(prop, propHash);

	    if (prop.shorthand) {
	      this.addExtra(prop, "shorthand", true);
	    }

	    node.properties.push(prop);
	  }

	  if (firstRestLocation !== null) {
	    this.unexpected(firstRestLocation, "The rest element has to be the last element when destructuring");
	  }

	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no property");
	  }

	  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
	};

	pp$3.isGetterOrSetterMethod = function (prop, isPattern) {
	  return !isPattern && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && (this.match(types$1.string) || // get "string"() {}
	  this.match(types$1.num) || // get 1() {}
	  this.match(types$1.bracketL) || // get ["string"]() {}
	  this.match(types$1.name) || // get foo() {}
	  this.state.type.keyword // get debugger() {}
	  );
	};

	// get methods aren't allowed to have any parameters
	// set methods must have exactly 1 parameter
	pp$3.checkGetterSetterParamCount = function (method) {
	  var paramCount = method.kind === "get" ? 0 : 1;
	  if (method.params.length !== paramCount) {
	    var start = method.start;
	    if (method.kind === "get") {
	      this.raise(start, "getter should have no params");
	    } else {
	      this.raise(start, "setter should have exactly one param");
	    }
	  }
	};

	pp$3.parseObjectMethod = function (prop, isGenerator, isAsync, isPattern) {
	  if (isAsync || isGenerator || this.match(types$1.parenL)) {
	    if (isPattern) this.unexpected();
	    prop.kind = "method";
	    prop.method = true;
	    this.parseMethod(prop, isGenerator, isAsync);

	    return this.finishNode(prop, "ObjectMethod");
	  }

	  if (this.isGetterOrSetterMethod(prop, isPattern)) {
	    if (isGenerator || isAsync) this.unexpected();
	    prop.kind = prop.key.name;
	    this.parsePropertyName(prop);
	    this.parseMethod(prop);
	    this.checkGetterSetterParamCount(prop);

	    return this.finishNode(prop, "ObjectMethod");
	  }
	};

	pp$3.parseObjectProperty = function (prop, startPos, startLoc, isPattern, refShorthandDefaultPos) {
	  if (this.eat(types$1.colon)) {
	    prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);

	    return this.finishNode(prop, "ObjectProperty");
	  }

	  if (!prop.computed && prop.key.type === "Identifier") {
	    this.checkReservedWord(prop.key.name, prop.key.start, true, true);

	    if (isPattern) {
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else if (this.match(types$1.eq) && refShorthandDefaultPos) {
	      if (!refShorthandDefaultPos.start) {
	        refShorthandDefaultPos.start = this.state.start;
	      }
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else {
	      prop.value = prop.key.__clone();
	    }
	    prop.shorthand = true;

	    return this.finishNode(prop, "ObjectProperty");
	  }
	};

	pp$3.parseObjPropValue = function (prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos) {
	  var node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos);

	  if (!node) this.unexpected();

	  return node;
	};

	pp$3.parsePropertyName = function (prop) {
	  if (this.eat(types$1.bracketL)) {
	    prop.computed = true;
	    prop.key = this.parseMaybeAssign();
	    this.expect(types$1.bracketR);
	  } else {
	    prop.computed = false;
	    var oldInPropertyName = this.state.inPropertyName;
	    this.state.inPropertyName = true;
	    prop.key = this.match(types$1.num) || this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);
	    this.state.inPropertyName = oldInPropertyName;
	  }
	  return prop.key;
	};

	// Initialize empty function node.

	pp$3.initFunction = function (node, isAsync) {
	  node.id = null;
	  node.generator = false;
	  node.expression = false;
	  node.async = !!isAsync;
	};

	// Parse object or class method.

	pp$3.parseMethod = function (node, isGenerator, isAsync) {
	  var oldInMethod = this.state.inMethod;
	  this.state.inMethod = node.kind || true;
	  this.initFunction(node, isAsync);
	  this.expect(types$1.parenL);
	  node.params = this.parseBindingList(types$1.parenR);
	  node.generator = !!isGenerator;
	  this.parseFunctionBody(node);
	  this.state.inMethod = oldInMethod;
	  return node;
	};

	// Parse arrow function expression with given parameters.

	pp$3.parseArrowExpression = function (node, params, isAsync) {
	  this.initFunction(node, isAsync);
	  node.params = this.toAssignableList(params, true, "arrow function parameters");
	  this.parseFunctionBody(node, true);
	  return this.finishNode(node, "ArrowFunctionExpression");
	};

	pp$3.isStrictBody = function (node, isExpression) {
	  if (!isExpression && node.body.directives.length) {
	    for (var _iterator2 = node.body.directives, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var directive = _ref2;

	      if (directive.value.value === "use strict") {
	        return true;
	      }
	    }
	  }

	  return false;
	};

	// Parse function body and check parameters.
	pp$3.parseFunctionBody = function (node, allowExpression) {
	  var isExpression = allowExpression && !this.match(types$1.braceL);

	  var oldInAsync = this.state.inAsync;
	  this.state.inAsync = node.async;
	  if (isExpression) {
	    node.body = this.parseMaybeAssign();
	    node.expression = true;
	  } else {
	    // Start a new scope with regard to labels and the `inFunction`
	    // flag (restore them to their old value afterwards).
	    var oldInFunc = this.state.inFunction;
	    var oldInGen = this.state.inGenerator;
	    var oldLabels = this.state.labels;
	    this.state.inFunction = true;this.state.inGenerator = node.generator;this.state.labels = [];
	    node.body = this.parseBlock(true);
	    node.expression = false;
	    this.state.inFunction = oldInFunc;this.state.inGenerator = oldInGen;this.state.labels = oldLabels;
	  }
	  this.state.inAsync = oldInAsync;

	  // If this is a strict mode function, verify that argument names
	  // are not repeated, and it does not try to bind the words `eval`
	  // or `arguments`.
	  var isStrict = this.isStrictBody(node, isExpression);
	  // Also check when allowExpression === true for arrow functions
	  var checkLVal = this.state.strict || allowExpression || isStrict;

	  if (isStrict && node.id && node.id.type === "Identifier" && node.id.name === "yield") {
	    this.raise(node.id.start, "Binding yield in strict mode");
	  }

	  if (checkLVal) {
	    var nameHash = Object.create(null);
	    var oldStrict = this.state.strict;
	    if (isStrict) this.state.strict = true;
	    if (node.id) {
	      this.checkLVal(node.id, true, undefined, "function name");
	    }
	    for (var _iterator3 = node.params, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
	      var _ref3;

	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }

	      var param = _ref3;

	      if (isStrict && param.type !== "Identifier") {
	        this.raise(param.start, "Non-simple parameter in strict mode");
	      }
	      this.checkLVal(param, true, nameHash, "function parameter list");
	    }
	    this.state.strict = oldStrict;
	  }
	};

	// Parses a comma-separated list of expressions, and returns them as
	// an array. `close` is the token type that ends the list, and
	// `allowEmpty` can be turned on to allow subsequent commas with
	// nothing in between them to be parsed as `null` (which is needed
	// for array literals).

	pp$3.parseExprList = function (close, allowEmpty, refShorthandDefaultPos) {
	  var elts = [];
	  var first = true;

	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(types$1.comma);
	      if (this.eat(close)) break;
	    }

	    elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));
	  }
	  return elts;
	};

	pp$3.parseExprListItem = function (allowEmpty, refShorthandDefaultPos, refNeedsArrowPos) {
	  var elt = void 0;
	  if (allowEmpty && this.match(types$1.comma)) {
	    elt = null;
	  } else if (this.match(types$1.ellipsis)) {
	    elt = this.parseSpread(refShorthandDefaultPos);
	  } else {
	    elt = this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos);
	  }
	  return elt;
	};

	// Parse the next token as an identifier. If `liberal` is true (used
	// when parsing properties), it will also convert keywords into
	// identifiers.

	pp$3.parseIdentifier = function (liberal) {
	  var node = this.startNode();
	  if (!liberal) {
	    this.checkReservedWord(this.state.value, this.state.start, !!this.state.type.keyword, false);
	  }

	  if (this.match(types$1.name)) {
	    node.name = this.state.value;
	  } else if (this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }

	  if (!liberal && node.name === "await" && this.state.inAsync) {
	    this.raise(node.start, "invalid use of await inside of an async function");
	  }

	  node.loc.identifierName = node.name;

	  this.next();
	  return this.finishNode(node, "Identifier");
	};

	pp$3.checkReservedWord = function (word, startLoc, checkKeywords, isBinding) {
	  if (this.isReservedWord(word) || checkKeywords && this.isKeyword(word)) {
	    this.raise(startLoc, word + " is a reserved word");
	  }

	  if (this.state.strict && (reservedWords$1.strict(word) || isBinding && reservedWords$1.strictBind(word))) {
	    this.raise(startLoc, word + " is a reserved word in strict mode");
	  }
	};

	// Parses await expression inside async function.

	pp$3.parseAwait = function (node) {
	  // istanbul ignore next: this condition is checked at the call site so won't be hit here
	  if (!this.state.inAsync) {
	    this.unexpected();
	  }
	  if (this.match(types$1.star)) {
	    this.raise(node.start, "await* has been removed from the async functions proposal. Use Promise.all() instead.");
	  }
	  node.argument = this.parseMaybeUnary();
	  return this.finishNode(node, "AwaitExpression");
	};

	// Parses yield expression inside generator.

	pp$3.parseYield = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(types$1.semi) || this.canInsertSemicolon() || !this.match(types$1.star) && !this.state.type.startsExpr) {
	    node.delegate = false;
	    node.argument = null;
	  } else {
	    node.delegate = this.eat(types$1.star);
	    node.argument = this.parseMaybeAssign();
	  }
	  return this.finishNode(node, "YieldExpression");
	};

	// Start an AST node, attaching a start offset.

	var pp$4 = Parser$3.prototype;
	var commentKeys = ["leadingComments", "trailingComments", "innerComments"];

	var Node$8 = function () {
	  function Node(pos, loc, filename) {
	    classCallCheck(this, Node);

	    this.type = "";
	    this.start = pos;
	    this.end = 0;
	    this.loc = new SourceLocation(loc);
	    if (filename) this.loc.filename = filename;
	  }

	  Node.prototype.__clone = function __clone() {
	    var node2 = new Node();
	    for (var key in this) {
	      // Do not clone comments that are already attached to the node
	      if (commentKeys.indexOf(key) < 0) {
	        node2[key] = this[key];
	      }
	    }

	    return node2;
	  };

	  return Node;
	}();

	pp$4.startNode = function () {
	  return new Node$8(this.state.start, this.state.startLoc, this.filename);
	};

	pp$4.startNodeAt = function (pos, loc) {
	  return new Node$8(pos, loc, this.filename);
	};

	function finishNodeAt(node, type, pos, loc) {
	  node.type = type;
	  node.end = pos;
	  node.loc.end = loc;
	  this.processComment(node);
	  return node;
	}

	// Finish an AST node, adding `type` and `end` properties.

	pp$4.finishNode = function (node, type) {
	  return finishNodeAt.call(this, node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
	};

	// Finish node at given position

	pp$4.finishNodeAt = function (node, type, pos, loc) {
	  return finishNodeAt.call(this, node, type, pos, loc);
	};

	var pp$5 = Parser$3.prototype;

	// This function is used to raise exceptions on parse errors. It
	// takes an offset integer (into the current `input`) to indicate
	// the location of the error, attaches the position to the end
	// of the error message, and then raises a `SyntaxError` with that
	// message.

	pp$5.raise = function (pos, message) {
	  var loc = getLineInfo(this.input, pos);
	  message += " (" + loc.line + ":" + loc.column + ")";
	  var err = new SyntaxError(message);
	  err.pos = pos;
	  err.loc = loc;
	  throw err;
	};

	/* eslint max-len: 0 */

	/**
	 * Based on the comment attachment algorithm used in espree and estraverse.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright
	 *   notice, this list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	function last(stack) {
	  return stack[stack.length - 1];
	}

	var pp$6 = Parser$3.prototype;

	pp$6.addComment = function (comment) {
	  if (this.filename) comment.loc.filename = this.filename;
	  this.state.trailingComments.push(comment);
	  this.state.leadingComments.push(comment);
	};

	pp$6.processComment = function (node) {
	  if (node.type === "Program" && node.body.length > 0) return;

	  var stack = this.state.commentStack;

	  var firstChild = void 0,
	      lastChild = void 0,
	      trailingComments = void 0,
	      i = void 0,
	      j = void 0;

	  if (this.state.trailingComments.length > 0) {
	    // If the first comment in trailingComments comes after the
	    // current node, then we're good - all comments in the array will
	    // come after the node and so it's safe to add them as official
	    // trailingComments.
	    if (this.state.trailingComments[0].start >= node.end) {
	      trailingComments = this.state.trailingComments;
	      this.state.trailingComments = [];
	    } else {
	      // Otherwise, if the first comment doesn't come after the
	      // current node, that means we have a mix of leading and trailing
	      // comments in the array and that leadingComments contains the
	      // same items as trailingComments. Reset trailingComments to
	      // zero items and we'll handle this by evaluating leadingComments
	      // later.
	      this.state.trailingComments.length = 0;
	    }
	  } else {
	    var lastInStack = last(stack);
	    if (stack.length > 0 && lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {
	      trailingComments = lastInStack.trailingComments;
	      lastInStack.trailingComments = null;
	    }
	  }

	  // Eating the stack.
	  if (stack.length > 0 && last(stack).start >= node.start) {
	    firstChild = stack.pop();
	  }

	  while (stack.length > 0 && last(stack).start >= node.start) {
	    lastChild = stack.pop();
	  }

	  if (!lastChild && firstChild) lastChild = firstChild;

	  // Attach comments that follow a trailing comma on the last
	  // property in an object literal or a trailing comma in function arguments
	  // as trailing comments
	  if (firstChild && this.state.leadingComments.length > 0) {
	    var lastComment = last(this.state.leadingComments);

	    if (firstChild.type === "ObjectProperty") {
	      if (lastComment.start >= node.start) {
	        if (this.state.commentPreviousNode) {
	          for (j = 0; j < this.state.leadingComments.length; j++) {
	            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {
	              this.state.leadingComments.splice(j, 1);
	              j--;
	            }
	          }

	          if (this.state.leadingComments.length > 0) {
	            firstChild.trailingComments = this.state.leadingComments;
	            this.state.leadingComments = [];
	          }
	        }
	      }
	    } else if (node.type === "CallExpression" && node.arguments && node.arguments.length) {
	      var lastArg = last(node.arguments);

	      if (lastArg && lastComment.start >= lastArg.start && lastComment.end <= node.end) {
	        if (this.state.commentPreviousNode) {
	          if (this.state.leadingComments.length > 0) {
	            lastArg.trailingComments = this.state.leadingComments;
	            this.state.leadingComments = [];
	          }
	        }
	      }
	    }
	  }

	  if (lastChild) {
	    if (lastChild.leadingComments) {
	      if (lastChild !== node && last(lastChild.leadingComments).end <= node.start) {
	        node.leadingComments = lastChild.leadingComments;
	        lastChild.leadingComments = null;
	      } else {
	        // A leading comment for an anonymous class had been stolen by its first ClassMethod,
	        // so this takes back the leading comment.
	        // See also: https://github.com/eslint/espree/issues/158
	        for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {
	          if (lastChild.leadingComments[i].end <= node.start) {
	            node.leadingComments = lastChild.leadingComments.splice(0, i + 1);
	            break;
	          }
	        }
	      }
	    }
	  } else if (this.state.leadingComments.length > 0) {
	    if (last(this.state.leadingComments).end <= node.start) {
	      if (this.state.commentPreviousNode) {
	        for (j = 0; j < this.state.leadingComments.length; j++) {
	          if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {
	            this.state.leadingComments.splice(j, 1);
	            j--;
	          }
	        }
	      }
	      if (this.state.leadingComments.length > 0) {
	        node.leadingComments = this.state.leadingComments;
	        this.state.leadingComments = [];
	      }
	    } else {
	      // https://github.com/eslint/espree/issues/2
	      //
	      // In special cases, such as return (without a value) and
	      // debugger, all comments will end up as leadingComments and
	      // will otherwise be eliminated. This step runs when the
	      // commentStack is empty and there are comments left
	      // in leadingComments.
	      //
	      // This loop figures out the stopping point between the actual
	      // leading and trailing comments by finding the location of the
	      // first comment that comes after the given node.
	      for (i = 0; i < this.state.leadingComments.length; i++) {
	        if (this.state.leadingComments[i].end > node.start) {
	          break;
	        }
	      }

	      // Split the array based on the location of the first comment
	      // that comes after the node. Keep in mind that this could
	      // result in an empty array, and if so, the array must be
	      // deleted.
	      node.leadingComments = this.state.leadingComments.slice(0, i);
	      if (node.leadingComments.length === 0) {
	        node.leadingComments = null;
	      }

	      // Similarly, trailing comments are attached later. The variable
	      // must be reset to null if there are no trailing comments.
	      trailingComments = this.state.leadingComments.slice(i);
	      if (trailingComments.length === 0) {
	        trailingComments = null;
	      }
	    }
	  }

	  this.state.commentPreviousNode = node;

	  if (trailingComments) {
	    if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {
	      node.innerComments = trailingComments;
	    } else {
	      node.trailingComments = trailingComments;
	    }
	  }

	  stack.push(node);
	};

	var pp$7 = Parser$3.prototype;

	pp$7.estreeParseRegExpLiteral = function (_ref) {
	  var pattern = _ref.pattern,
	      flags = _ref.flags;

	  var regex = null;
	  try {
	    regex = new RegExp(pattern, flags);
	  } catch (e) {
	    // In environments that don't support these flags value will
	    // be null as the regex can't be represented natively.
	  }
	  var node = this.estreeParseLiteral(regex);
	  node.regex = { pattern: pattern, flags: flags };

	  return node;
	};

	pp$7.estreeParseLiteral = function (value) {
	  return this.parseLiteral(value, "Literal");
	};

	pp$7.directiveToStmt = function (directive) {
	  var directiveLiteral = directive.value;

	  var stmt = this.startNodeAt(directive.start, directive.loc.start);
	  var expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);

	  expression.value = directiveLiteral.value;
	  expression.raw = directiveLiteral.extra.raw;

	  stmt.expression = this.finishNodeAt(expression, "Literal", directiveLiteral.end, directiveLiteral.loc.end);
	  stmt.directive = directiveLiteral.extra.raw.slice(1, -1);

	  return this.finishNodeAt(stmt, "ExpressionStatement", directive.end, directive.loc.end);
	};

	function isSimpleProperty(node) {
	  return node && node.type === "Property" && node.kind === "init" && node.method === false;
	}

	var estreePlugin = function (instance) {
	  instance.extend("checkDeclaration", function (inner) {
	    return function (node) {
	      if (isSimpleProperty(node)) {
	        this.checkDeclaration(node.value);
	      } else {
	        inner.call(this, node);
	      }
	    };
	  });

	  instance.extend("checkGetterSetterParamCount", function () {
	    return function (prop) {
	      var paramCount = prop.kind === "get" ? 0 : 1;
	      if (prop.value.params.length !== paramCount) {
	        var start = prop.start;
	        if (prop.kind === "get") {
	          this.raise(start, "getter should have no params");
	        } else {
	          this.raise(start, "setter should have exactly one param");
	        }
	      }
	    };
	  });

	  instance.extend("checkLVal", function (inner) {
	    return function (expr, isBinding, checkClashes) {
	      var _this = this;

	      switch (expr.type) {
	        case "ObjectPattern":
	          expr.properties.forEach(function (prop) {
	            _this.checkLVal(prop.type === "Property" ? prop.value : prop, isBinding, checkClashes, "object destructuring pattern");
	          });
	          break;
	        default:
	          for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	            args[_key - 3] = arguments[_key];
	          }

	          inner.call.apply(inner, [this, expr, isBinding, checkClashes].concat(args));
	      }
	    };
	  });

	  instance.extend("checkPropClash", function () {
	    return function (prop, propHash) {
	      if (prop.computed || !isSimpleProperty(prop)) return;

	      var key = prop.key;
	      // It is either an Identifier or a String/NumericLiteral
	      var name = key.type === "Identifier" ? key.name : String(key.value);

	      if (name === "__proto__") {
	        if (propHash.proto) this.raise(key.start, "Redefinition of __proto__ property");
	        propHash.proto = true;
	      }
	    };
	  });

	  instance.extend("isStrictBody", function () {
	    return function (node, isExpression) {
	      if (!isExpression && node.body.body.length > 0) {
	        for (var _iterator = node.body.body, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	          var _ref2;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref2 = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref2 = _i.value;
	          }

	          var directive = _ref2;

	          if (directive.type === "ExpressionStatement" && directive.expression.type === "Literal") {
	            if (directive.expression.value === "use strict") return true;
	          } else {
	            // Break for the first non literal expression
	            break;
	          }
	        }
	      }

	      return false;
	    };
	  });

	  instance.extend("isValidDirective", function () {
	    return function (stmt) {
	      return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && (!stmt.expression.extra || !stmt.expression.extra.parenthesized);
	    };
	  });

	  instance.extend("stmtToDirective", function (inner) {
	    return function (stmt) {
	      var directive = inner.call(this, stmt);
	      var value = stmt.expression.value;

	      // Reset value to the actual value as in estree mode we want
	      // the stmt to have the real value and not the raw value
	      directive.value.value = value;

	      return directive;
	    };
	  });

	  instance.extend("parseBlockBody", function (inner) {
	    return function (node) {
	      var _this2 = this;

	      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      inner.call.apply(inner, [this, node].concat(args));

	      node.directives.reverse().forEach(function (directive) {
	        node.body.unshift(_this2.directiveToStmt(directive));
	      });
	      delete node.directives;
	    };
	  });

	  instance.extend("parseClassMethod", function () {
	    return function (classBody, method, isGenerator, isAsync) {
	      this.parseMethod(method, isGenerator, isAsync);
	      if (method.typeParameters) {
	        method.value.typeParameters = method.typeParameters;
	        delete method.typeParameters;
	      }
	      classBody.body.push(this.finishNode(method, "MethodDefinition"));
	    };
	  });

	  instance.extend("parseExprAtom", function (inner) {
	    return function () {
	      switch (this.state.type) {
	        case types$1.regexp:
	          return this.estreeParseRegExpLiteral(this.state.value);

	        case types$1.num:
	        case types$1.string:
	          return this.estreeParseLiteral(this.state.value);

	        case types$1._null:
	          return this.estreeParseLiteral(null);

	        case types$1._true:
	          return this.estreeParseLiteral(true);

	        case types$1._false:
	          return this.estreeParseLiteral(false);

	        default:
	          for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	            args[_key3] = arguments[_key3];
	          }

	          return inner.call.apply(inner, [this].concat(args));
	      }
	    };
	  });

	  instance.extend("parseLiteral", function (inner) {
	    return function () {
	      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	        args[_key4] = arguments[_key4];
	      }

	      var node = inner.call.apply(inner, [this].concat(args));
	      node.raw = node.extra.raw;
	      delete node.extra;

	      return node;
	    };
	  });

	  instance.extend("parseMethod", function (inner) {
	    return function (node) {
	      var funcNode = this.startNode();
	      funcNode.kind = node.kind; // provide kind, so inner method correctly sets state

	      for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
	        args[_key5 - 1] = arguments[_key5];
	      }

	      funcNode = inner.call.apply(inner, [this, funcNode].concat(args));
	      delete funcNode.kind;
	      node.value = this.finishNode(funcNode, "FunctionExpression");

	      return node;
	    };
	  });

	  instance.extend("parseObjectMethod", function (inner) {
	    return function () {
	      for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	        args[_key6] = arguments[_key6];
	      }

	      var node = inner.call.apply(inner, [this].concat(args));

	      if (node) {
	        if (node.kind === "method") node.kind = "init";
	        node.type = "Property";
	      }

	      return node;
	    };
	  });

	  instance.extend("parseObjectProperty", function (inner) {
	    return function () {
	      for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	        args[_key7] = arguments[_key7];
	      }

	      var node = inner.call.apply(inner, [this].concat(args));

	      if (node) {
	        node.kind = "init";
	        node.type = "Property";
	      }

	      return node;
	    };
	  });

	  instance.extend("toAssignable", function (inner) {
	    return function (node, isBinding) {
	      for (var _len8 = arguments.length, args = Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {
	        args[_key8 - 2] = arguments[_key8];
	      }

	      if (isSimpleProperty(node)) {
	        this.toAssignable.apply(this, [node.value, isBinding].concat(args));

	        return node;
	      } else if (node.type === "ObjectExpression") {
	        node.type = "ObjectPattern";
	        for (var _iterator2 = node.properties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
	          var _ref3;

	          if (_isArray2) {
	            if (_i2 >= _iterator2.length) break;
	            _ref3 = _iterator2[_i2++];
	          } else {
	            _i2 = _iterator2.next();
	            if (_i2.done) break;
	            _ref3 = _i2.value;
	          }

	          var prop = _ref3;

	          if (prop.kind === "get" || prop.kind === "set") {
	            this.raise(prop.key.start, "Object pattern can't contain getter or setter");
	          } else if (prop.method) {
	            this.raise(prop.key.start, "Object pattern can't contain methods");
	          } else {
	            this.toAssignable(prop, isBinding, "object destructuring pattern");
	          }
	        }

	        return node;
	      }

	      return inner.call.apply(inner, [this, node, isBinding].concat(args));
	    };
	  });
	};

	/* eslint max-len: 0 */

	var primitiveTypes = ["any", "mixed", "empty", "bool", "boolean", "number", "string", "void", "null"];

	var pp$8 = Parser$3.prototype;

	pp$8.flowParseTypeInitialiser = function (tok) {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  this.expect(tok || types$1.colon);

	  var type = this.flowParseType();
	  this.state.inType = oldInType;
	  return type;
	};

	pp$8.flowParsePredicate = function () {
	  var node = this.startNode();
	  var moduloLoc = this.state.startLoc;
	  var moduloPos = this.state.start;
	  this.expect(types$1.modulo);
	  var checksLoc = this.state.startLoc;
	  this.expectContextual("checks");
	  // Force '%' and 'checks' to be adjacent
	  if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {
	    this.raise(moduloPos, "Spaces between ´%´ and ´checks´ are not allowed here.");
	  }
	  if (this.eat(types$1.parenL)) {
	    node.expression = this.parseExpression();
	    this.expect(types$1.parenR);
	    return this.finishNode(node, "DeclaredPredicate");
	  } else {
	    return this.finishNode(node, "InferredPredicate");
	  }
	};

	pp$8.flowParseTypeAndPredicateInitialiser = function () {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  this.expect(types$1.colon);
	  var type = null;
	  var predicate = null;
	  if (this.match(types$1.modulo)) {
	    this.state.inType = oldInType;
	    predicate = this.flowParsePredicate();
	  } else {
	    type = this.flowParseType();
	    this.state.inType = oldInType;
	    if (this.match(types$1.modulo)) {
	      predicate = this.flowParsePredicate();
	    }
	  }
	  return [type, predicate];
	};

	pp$8.flowParseDeclareClass = function (node) {
	  this.next();
	  this.flowParseInterfaceish(node, true);
	  return this.finishNode(node, "DeclareClass");
	};

	pp$8.flowParseDeclareFunction = function (node) {
	  this.next();

	  var id = node.id = this.parseIdentifier();

	  var typeNode = this.startNode();
	  var typeContainer = this.startNode();

	  if (this.isRelational("<")) {
	    typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    typeNode.typeParameters = null;
	  }

	  this.expect(types$1.parenL);
	  var tmp = this.flowParseFunctionTypeParams();
	  typeNode.params = tmp.params;
	  typeNode.rest = tmp.rest;
	  this.expect(types$1.parenR);
	  var predicate = null;

	  var _flowParseTypeAndPred = this.flowParseTypeAndPredicateInitialiser();

	  typeNode.returnType = _flowParseTypeAndPred[0];
	  predicate = _flowParseTypeAndPred[1];

	  typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
	  typeContainer.predicate = predicate;
	  id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");

	  this.finishNode(id, id.type);

	  this.semicolon();

	  return this.finishNode(node, "DeclareFunction");
	};

	pp$8.flowParseDeclare = function (node) {
	  if (this.match(types$1._class)) {
	    return this.flowParseDeclareClass(node);
	  } else if (this.match(types$1._function)) {
	    return this.flowParseDeclareFunction(node);
	  } else if (this.match(types$1._var)) {
	    return this.flowParseDeclareVariable(node);
	  } else if (this.isContextual("module")) {
	    if (this.lookahead().type === types$1.dot) {
	      return this.flowParseDeclareModuleExports(node);
	    } else {
	      return this.flowParseDeclareModule(node);
	    }
	  } else if (this.isContextual("type")) {
	    return this.flowParseDeclareTypeAlias(node);
	  } else if (this.isContextual("opaque")) {
	    return this.flowParseDeclareOpaqueType(node);
	  } else if (this.isContextual("interface")) {
	    return this.flowParseDeclareInterface(node);
	  } else if (this.match(types$1._export)) {
	    return this.flowParseDeclareExportDeclaration(node);
	  } else {
	    this.unexpected();
	  }
	};

	pp$8.flowParseDeclareExportDeclaration = function (node) {
	  this.expect(types$1._export);
	  if (this.isContextual("opaque") // declare export opaque ...
	  ) {
	      node.declaration = this.flowParseDeclare(this.startNode());
	      node.default = false;

	      return this.finishNode(node, "DeclareExportDeclaration");
	    }

	  throw this.unexpected();
	};

	pp$8.flowParseDeclareVariable = function (node) {
	  this.next();
	  node.id = this.flowParseTypeAnnotatableIdentifier();
	  this.semicolon();
	  return this.finishNode(node, "DeclareVariable");
	};

	pp$8.flowParseDeclareModule = function (node) {
	  this.next();

	  if (this.match(types$1.string)) {
	    node.id = this.parseExprAtom();
	  } else {
	    node.id = this.parseIdentifier();
	  }

	  var bodyNode = node.body = this.startNode();
	  var body = bodyNode.body = [];
	  this.expect(types$1.braceL);
	  while (!this.match(types$1.braceR)) {
	    var _bodyNode = this.startNode();

	    if (this.match(types$1._import)) {
	      var lookahead = this.lookahead();
	      if (lookahead.value !== "type" && lookahead.value !== "typeof") {
	        this.unexpected(null, "Imports within a `declare module` body must always be `import type` or `import typeof`");
	      }

	      this.parseImport(_bodyNode);
	    } else {
	      this.expectContextual("declare", "Only declares and type imports are allowed inside declare module");

	      _bodyNode = this.flowParseDeclare(_bodyNode, true);
	    }

	    body.push(_bodyNode);
	  }
	  this.expect(types$1.braceR);

	  this.finishNode(bodyNode, "BlockStatement");
	  return this.finishNode(node, "DeclareModule");
	};

	pp$8.flowParseDeclareModuleExports = function (node) {
	  this.expectContextual("module");
	  this.expect(types$1.dot);
	  this.expectContextual("exports");
	  node.typeAnnotation = this.flowParseTypeAnnotation();
	  this.semicolon();

	  return this.finishNode(node, "DeclareModuleExports");
	};

	pp$8.flowParseDeclareTypeAlias = function (node) {
	  this.next();
	  this.flowParseTypeAlias(node);
	  return this.finishNode(node, "DeclareTypeAlias");
	};

	pp$8.flowParseDeclareOpaqueType = function (node) {
	  this.next();
	  this.flowParseOpaqueType(node, true);
	  return this.finishNode(node, "DeclareOpaqueType");
	};

	pp$8.flowParseDeclareInterface = function (node) {
	  this.next();
	  this.flowParseInterfaceish(node);
	  return this.finishNode(node, "DeclareInterface");
	};

	// Interfaces

	pp$8.flowParseInterfaceish = function (node) {
	  node.id = this.parseIdentifier();

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }

	  node.extends = [];
	  node.mixins = [];

	  if (this.eat(types$1._extends)) {
	    do {
	      node.extends.push(this.flowParseInterfaceExtends());
	    } while (this.eat(types$1.comma));
	  }

	  if (this.isContextual("mixins")) {
	    this.next();
	    do {
	      node.mixins.push(this.flowParseInterfaceExtends());
	    } while (this.eat(types$1.comma));
	  }

	  node.body = this.flowParseObjectType(true, false, false);
	};

	pp$8.flowParseInterfaceExtends = function () {
	  var node = this.startNode();

	  node.id = this.flowParseQualifiedTypeIdentifier();
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  } else {
	    node.typeParameters = null;
	  }

	  return this.finishNode(node, "InterfaceExtends");
	};

	pp$8.flowParseInterface = function (node) {
	  this.flowParseInterfaceish(node, false);
	  return this.finishNode(node, "InterfaceDeclaration");
	};

	pp$8.flowParseRestrictedIdentifier = function (liberal) {
	  if (primitiveTypes.indexOf(this.state.value) > -1) {
	    this.raise(this.state.start, "Cannot overwrite primitive type " + this.state.value);
	  }

	  return this.parseIdentifier(liberal);
	};

	// Type aliases

	pp$8.flowParseTypeAlias = function (node) {
	  node.id = this.flowParseRestrictedIdentifier();

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }

	  node.right = this.flowParseTypeInitialiser(types$1.eq);
	  this.semicolon();

	  return this.finishNode(node, "TypeAlias");
	};

	// Opaque type aliases

	pp$8.flowParseOpaqueType = function (node, declare) {
	  this.expectContextual("type");
	  node.id = this.flowParseRestrictedIdentifier();

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }

	  // Parse the supertype
	  node.supertype = null;
	  if (this.match(types$1.colon)) {
	    node.supertype = this.flowParseTypeInitialiser(types$1.colon);
	  }

	  node.impltype = null;
	  if (!declare) {
	    node.impltype = this.flowParseTypeInitialiser(types$1.eq);
	  }
	  this.semicolon();

	  return this.finishNode(node, "OpaqueType");
	};

	// Type annotations

	pp$8.flowParseTypeParameter = function () {
	  var node = this.startNode();

	  var variance = this.flowParseVariance();

	  var ident = this.flowParseTypeAnnotatableIdentifier();
	  node.name = ident.name;
	  node.variance = variance;
	  node.bound = ident.typeAnnotation;

	  if (this.match(types$1.eq)) {
	    this.eat(types$1.eq);
	    node.default = this.flowParseType();
	  }

	  return this.finishNode(node, "TypeParameter");
	};

	pp$8.flowParseTypeParameterDeclaration = function () {
	  var oldInType = this.state.inType;
	  var node = this.startNode();
	  node.params = [];

	  this.state.inType = true;

	  // istanbul ignore else: this condition is already checked at all call sites
	  if (this.isRelational("<") || this.match(types$1.jsxTagStart)) {
	    this.next();
	  } else {
	    this.unexpected();
	  }

	  do {
	    node.params.push(this.flowParseTypeParameter());
	    if (!this.isRelational(">")) {
	      this.expect(types$1.comma);
	    }
	  } while (!this.isRelational(">"));
	  this.expectRelational(">");

	  this.state.inType = oldInType;

	  return this.finishNode(node, "TypeParameterDeclaration");
	};

	pp$8.flowParseTypeParameterInstantiation = function () {
	  var node = this.startNode();
	  var oldInType = this.state.inType;
	  node.params = [];

	  this.state.inType = true;

	  this.expectRelational("<");
	  while (!this.isRelational(">")) {
	    node.params.push(this.flowParseType());
	    if (!this.isRelational(">")) {
	      this.expect(types$1.comma);
	    }
	  }
	  this.expectRelational(">");

	  this.state.inType = oldInType;

	  return this.finishNode(node, "TypeParameterInstantiation");
	};

	pp$8.flowParseObjectPropertyKey = function () {
	  return this.match(types$1.num) || this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);
	};

	pp$8.flowParseObjectTypeIndexer = function (node, isStatic, variance) {
	  node.static = isStatic;

	  this.expect(types$1.bracketL);
	  if (this.lookahead().type === types$1.colon) {
	    node.id = this.flowParseObjectPropertyKey();
	    node.key = this.flowParseTypeInitialiser();
	  } else {
	    node.id = null;
	    node.key = this.flowParseType();
	  }
	  this.expect(types$1.bracketR);
	  node.value = this.flowParseTypeInitialiser();
	  node.variance = variance;

	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeIndexer");
	};

	pp$8.flowParseObjectTypeMethodish = function (node) {
	  node.params = [];
	  node.rest = null;
	  node.typeParameters = null;

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  }

	  this.expect(types$1.parenL);
	  while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {
	    node.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(types$1.parenR)) {
	      this.expect(types$1.comma);
	    }
	  }

	  if (this.eat(types$1.ellipsis)) {
	    node.rest = this.flowParseFunctionTypeParam();
	  }
	  this.expect(types$1.parenR);
	  node.returnType = this.flowParseTypeInitialiser();

	  return this.finishNode(node, "FunctionTypeAnnotation");
	};

	pp$8.flowParseObjectTypeMethod = function (startPos, startLoc, isStatic, key) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(startPos, startLoc));
	  node.static = isStatic;
	  node.key = key;
	  node.optional = false;
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeProperty");
	};

	pp$8.flowParseObjectTypeCallProperty = function (node, isStatic) {
	  var valueNode = this.startNode();
	  node.static = isStatic;
	  node.value = this.flowParseObjectTypeMethodish(valueNode);
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeCallProperty");
	};

	pp$8.flowParseObjectType = function (allowStatic, allowExact, allowSpread) {
	  var oldInType = this.state.inType;
	  this.state.inType = true;

	  var nodeStart = this.startNode();
	  var node = void 0;
	  var propertyKey = void 0;
	  var isStatic = false;

	  nodeStart.callProperties = [];
	  nodeStart.properties = [];
	  nodeStart.indexers = [];

	  var endDelim = void 0;
	  var exact = void 0;
	  if (allowExact && this.match(types$1.braceBarL)) {
	    this.expect(types$1.braceBarL);
	    endDelim = types$1.braceBarR;
	    exact = true;
	  } else {
	    this.expect(types$1.braceL);
	    endDelim = types$1.braceR;
	    exact = false;
	  }

	  nodeStart.exact = exact;

	  while (!this.match(endDelim)) {
	    var optional = false;
	    var startPos = this.state.start;
	    var startLoc = this.state.startLoc;
	    node = this.startNode();
	    if (allowStatic && this.isContextual("static") && this.lookahead().type !== types$1.colon) {
	      this.next();
	      isStatic = true;
	    }

	    var variancePos = this.state.start;
	    var variance = this.flowParseVariance();

	    if (this.match(types$1.bracketL)) {
	      nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
	    } else if (this.match(types$1.parenL) || this.isRelational("<")) {
	      if (variance) {
	        this.unexpected(variancePos);
	      }
	      nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
	    } else {
	      if (this.match(types$1.ellipsis)) {
	        if (!allowSpread) {
	          this.unexpected(null, "Spread operator cannot appear in class or interface definitions");
	        }
	        if (variance) {
	          this.unexpected(variance.start, "Spread properties cannot have variance");
	        }
	        this.expect(types$1.ellipsis);
	        node.argument = this.flowParseType();
	        this.flowObjectTypeSemicolon();
	        nodeStart.properties.push(this.finishNode(node, "ObjectTypeSpreadProperty"));
	      } else {
	        propertyKey = this.flowParseObjectPropertyKey();
	        if (this.isRelational("<") || this.match(types$1.parenL)) {
	          // This is a method property
	          if (variance) {
	            this.unexpected(variance.start);
	          }
	          nodeStart.properties.push(this.flowParseObjectTypeMethod(startPos, startLoc, isStatic, propertyKey));
	        } else {
	          if (this.eat(types$1.question)) {
	            optional = true;
	          }
	          node.key = propertyKey;
	          node.value = this.flowParseTypeInitialiser();
	          node.optional = optional;
	          node.static = isStatic;
	          node.variance = variance;
	          this.flowObjectTypeSemicolon();
	          nodeStart.properties.push(this.finishNode(node, "ObjectTypeProperty"));
	        }
	      }
	    }

	    isStatic = false;
	  }

	  this.expect(endDelim);

	  var out = this.finishNode(nodeStart, "ObjectTypeAnnotation");

	  this.state.inType = oldInType;

	  return out;
	};

	pp$8.flowObjectTypeSemicolon = function () {
	  if (!this.eat(types$1.semi) && !this.eat(types$1.comma) && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {
	    this.unexpected();
	  }
	};

	pp$8.flowParseQualifiedTypeIdentifier = function (startPos, startLoc, id) {
	  startPos = startPos || this.state.start;
	  startLoc = startLoc || this.state.startLoc;
	  var node = id || this.parseIdentifier();

	  while (this.eat(types$1.dot)) {
	    var node2 = this.startNodeAt(startPos, startLoc);
	    node2.qualification = node;
	    node2.id = this.parseIdentifier();
	    node = this.finishNode(node2, "QualifiedTypeIdentifier");
	  }

	  return node;
	};

	pp$8.flowParseGenericType = function (startPos, startLoc, id) {
	  var node = this.startNodeAt(startPos, startLoc);

	  node.typeParameters = null;
	  node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  }

	  return this.finishNode(node, "GenericTypeAnnotation");
	};

	pp$8.flowParseTypeofType = function () {
	  var node = this.startNode();
	  this.expect(types$1._typeof);
	  node.argument = this.flowParsePrimaryType();
	  return this.finishNode(node, "TypeofTypeAnnotation");
	};

	pp$8.flowParseTupleType = function () {
	  var node = this.startNode();
	  node.types = [];
	  this.expect(types$1.bracketL);
	  // We allow trailing commas
	  while (this.state.pos < this.input.length && !this.match(types$1.bracketR)) {
	    node.types.push(this.flowParseType());
	    if (this.match(types$1.bracketR)) break;
	    this.expect(types$1.comma);
	  }
	  this.expect(types$1.bracketR);
	  return this.finishNode(node, "TupleTypeAnnotation");
	};

	pp$8.flowParseFunctionTypeParam = function () {
	  var name = null;
	  var optional = false;
	  var typeAnnotation = null;
	  var node = this.startNode();
	  var lh = this.lookahead();
	  if (lh.type === types$1.colon || lh.type === types$1.question) {
	    name = this.parseIdentifier();
	    if (this.eat(types$1.question)) {
	      optional = true;
	    }
	    typeAnnotation = this.flowParseTypeInitialiser();
	  } else {
	    typeAnnotation = this.flowParseType();
	  }
	  node.name = name;
	  node.optional = optional;
	  node.typeAnnotation = typeAnnotation;
	  return this.finishNode(node, "FunctionTypeParam");
	};

	pp$8.reinterpretTypeAsFunctionTypeParam = function (type) {
	  var node = this.startNodeAt(type.start, type.loc.start);
	  node.name = null;
	  node.optional = false;
	  node.typeAnnotation = type;
	  return this.finishNode(node, "FunctionTypeParam");
	};

	pp$8.flowParseFunctionTypeParams = function () {
	  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	  var ret = { params: params, rest: null };
	  while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {
	    ret.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(types$1.parenR)) {
	      this.expect(types$1.comma);
	    }
	  }
	  if (this.eat(types$1.ellipsis)) {
	    ret.rest = this.flowParseFunctionTypeParam();
	  }
	  return ret;
	};

	pp$8.flowIdentToTypeAnnotation = function (startPos, startLoc, node, id) {
	  switch (id.name) {
	    case "any":
	      return this.finishNode(node, "AnyTypeAnnotation");

	    case "void":
	      return this.finishNode(node, "VoidTypeAnnotation");

	    case "bool":
	    case "boolean":
	      return this.finishNode(node, "BooleanTypeAnnotation");

	    case "mixed":
	      return this.finishNode(node, "MixedTypeAnnotation");

	    case "empty":
	      return this.finishNode(node, "EmptyTypeAnnotation");

	    case "number":
	      return this.finishNode(node, "NumberTypeAnnotation");

	    case "string":
	      return this.finishNode(node, "StringTypeAnnotation");

	    default:
	      return this.flowParseGenericType(startPos, startLoc, id);
	  }
	};

	// The parsing of types roughly parallels the parsing of expressions, and
	// primary types are kind of like primary expressions...they're the
	// primitives with which other types are constructed.
	pp$8.flowParsePrimaryType = function () {
	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;
	  var node = this.startNode();
	  var tmp = void 0;
	  var type = void 0;
	  var isGroupedType = false;
	  var oldNoAnonFunctionType = this.state.noAnonFunctionType;

	  switch (this.state.type) {
	    case types$1.name:
	      return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());

	    case types$1.braceL:
	      return this.flowParseObjectType(false, false, true);

	    case types$1.braceBarL:
	      return this.flowParseObjectType(false, true, true);

	    case types$1.bracketL:
	      return this.flowParseTupleType();

	    case types$1.relational:
	      if (this.state.value === "<") {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	        this.expect(types$1.parenL);
	        tmp = this.flowParseFunctionTypeParams();
	        node.params = tmp.params;
	        node.rest = tmp.rest;
	        this.expect(types$1.parenR);

	        this.expect(types$1.arrow);

	        node.returnType = this.flowParseType();

	        return this.finishNode(node, "FunctionTypeAnnotation");
	      }
	      break;

	    case types$1.parenL:
	      this.next();

	      // Check to see if this is actually a grouped type
	      if (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {
	        if (this.match(types$1.name)) {
	          var token = this.lookahead().type;
	          isGroupedType = token !== types$1.question && token !== types$1.colon;
	        } else {
	          isGroupedType = true;
	        }
	      }

	      if (isGroupedType) {
	        this.state.noAnonFunctionType = false;
	        type = this.flowParseType();
	        this.state.noAnonFunctionType = oldNoAnonFunctionType;

	        // A `,` or a `) =>` means this is an anonymous function type
	        if (this.state.noAnonFunctionType || !(this.match(types$1.comma) || this.match(types$1.parenR) && this.lookahead().type === types$1.arrow)) {
	          this.expect(types$1.parenR);
	          return type;
	        } else {
	          // Eat a comma if there is one
	          this.eat(types$1.comma);
	        }
	      }

	      if (type) {
	        tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
	      } else {
	        tmp = this.flowParseFunctionTypeParams();
	      }

	      node.params = tmp.params;
	      node.rest = tmp.rest;

	      this.expect(types$1.parenR);

	      this.expect(types$1.arrow);

	      node.returnType = this.flowParseType();

	      node.typeParameters = null;

	      return this.finishNode(node, "FunctionTypeAnnotation");

	    case types$1.string:
	      return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");

	    case types$1._true:case types$1._false:
	      node.value = this.match(types$1._true);
	      this.next();
	      return this.finishNode(node, "BooleanLiteralTypeAnnotation");

	    case types$1.plusMin:
	      if (this.state.value === "-") {
	        this.next();
	        if (!this.match(types$1.num)) this.unexpected(null, "Unexpected token, expected number");

	        return this.parseLiteral(-this.state.value, "NumericLiteralTypeAnnotation", node.start, node.loc.start);
	      }

	      this.unexpected();
	    case types$1.num:
	      return this.parseLiteral(this.state.value, "NumericLiteralTypeAnnotation");

	    case types$1._null:
	      node.value = this.match(types$1._null);
	      this.next();
	      return this.finishNode(node, "NullLiteralTypeAnnotation");

	    case types$1._this:
	      node.value = this.match(types$1._this);
	      this.next();
	      return this.finishNode(node, "ThisTypeAnnotation");

	    case types$1.star:
	      this.next();
	      return this.finishNode(node, "ExistentialTypeParam");

	    default:
	      if (this.state.type.keyword === "typeof") {
	        return this.flowParseTypeofType();
	      }
	  }

	  this.unexpected();
	};

	pp$8.flowParsePostfixType = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var type = this.flowParsePrimaryType();
	  while (!this.canInsertSemicolon() && this.match(types$1.bracketL)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.elementType = type;
	    this.expect(types$1.bracketL);
	    this.expect(types$1.bracketR);
	    type = this.finishNode(node, "ArrayTypeAnnotation");
	  }
	  return type;
	};

	pp$8.flowParsePrefixType = function () {
	  var node = this.startNode();
	  if (this.eat(types$1.question)) {
	    node.typeAnnotation = this.flowParsePrefixType();
	    return this.finishNode(node, "NullableTypeAnnotation");
	  } else {
	    return this.flowParsePostfixType();
	  }
	};

	pp$8.flowParseAnonFunctionWithoutParens = function () {
	  var param = this.flowParsePrefixType();
	  if (!this.state.noAnonFunctionType && this.eat(types$1.arrow)) {
	    var node = this.startNodeAt(param.start, param.loc.start);
	    node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
	    node.rest = null;
	    node.returnType = this.flowParseType();
	    node.typeParameters = null;
	    return this.finishNode(node, "FunctionTypeAnnotation");
	  }
	  return param;
	};

	pp$8.flowParseIntersectionType = function () {
	  var node = this.startNode();
	  this.eat(types$1.bitwiseAND);
	  var type = this.flowParseAnonFunctionWithoutParens();
	  node.types = [type];
	  while (this.eat(types$1.bitwiseAND)) {
	    node.types.push(this.flowParseAnonFunctionWithoutParens());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
	};

	pp$8.flowParseUnionType = function () {
	  var node = this.startNode();
	  this.eat(types$1.bitwiseOR);
	  var type = this.flowParseIntersectionType();
	  node.types = [type];
	  while (this.eat(types$1.bitwiseOR)) {
	    node.types.push(this.flowParseIntersectionType());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
	};

	pp$8.flowParseType = function () {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  var type = this.flowParseUnionType();
	  this.state.inType = oldInType;
	  return type;
	};

	pp$8.flowParseTypeAnnotation = function () {
	  var node = this.startNode();
	  node.typeAnnotation = this.flowParseTypeInitialiser();
	  return this.finishNode(node, "TypeAnnotation");
	};

	pp$8.flowParseTypeAndPredicateAnnotation = function () {
	  var node = this.startNode();

	  var _flowParseTypeAndPred2 = this.flowParseTypeAndPredicateInitialiser();

	  node.typeAnnotation = _flowParseTypeAndPred2[0];
	  node.predicate = _flowParseTypeAndPred2[1];

	  return this.finishNode(node, "TypeAnnotation");
	};

	pp$8.flowParseTypeAnnotatableIdentifier = function () {
	  var ident = this.flowParseRestrictedIdentifier();
	  if (this.match(types$1.colon)) {
	    ident.typeAnnotation = this.flowParseTypeAnnotation();
	    this.finishNode(ident, ident.type);
	  }
	  return ident;
	};

	pp$8.typeCastToParameter = function (node) {
	  node.expression.typeAnnotation = node.typeAnnotation;

	  return this.finishNodeAt(node.expression, node.expression.type, node.typeAnnotation.end, node.typeAnnotation.loc.end);
	};

	pp$8.flowParseVariance = function () {
	  var variance = null;
	  if (this.match(types$1.plusMin)) {
	    if (this.state.value === "+") {
	      variance = "plus";
	    } else if (this.state.value === "-") {
	      variance = "minus";
	    }
	    this.next();
	  }
	  return variance;
	};

	var flowPlugin = function (instance) {
	  // plain function return types: function name(): string {}
	  instance.extend("parseFunctionBody", function (inner) {
	    return function (node, allowExpression) {
	      if (this.match(types$1.colon) && !allowExpression) {
	        // if allowExpression is true then we're parsing an arrow function and if
	        // there's a return type then it's been handled elsewhere
	        node.returnType = this.flowParseTypeAndPredicateAnnotation();
	      }

	      return inner.call(this, node, allowExpression);
	    };
	  });

	  // interfaces
	  instance.extend("parseStatement", function (inner) {
	    return function (declaration, topLevel) {
	      // strict mode handling of `interface` since it's a reserved word
	      if (this.state.strict && this.match(types$1.name) && this.state.value === "interface") {
	        var node = this.startNode();
	        this.next();
	        return this.flowParseInterface(node);
	      } else {
	        return inner.call(this, declaration, topLevel);
	      }
	    };
	  });

	  // declares, interfaces and type aliases
	  instance.extend("parseExpressionStatement", function (inner) {
	    return function (node, expr) {
	      if (expr.type === "Identifier") {
	        if (expr.name === "declare") {
	          if (this.match(types$1._class) || this.match(types$1.name) || this.match(types$1._function) || this.match(types$1._var) || this.match(types$1._export)) {
	            return this.flowParseDeclare(node);
	          }
	        } else if (this.match(types$1.name)) {
	          if (expr.name === "interface") {
	            return this.flowParseInterface(node);
	          } else if (expr.name === "type") {
	            return this.flowParseTypeAlias(node);
	          } else if (expr.name === "opaque") {
	            return this.flowParseOpaqueType(node, false);
	          }
	        }
	      }

	      return inner.call(this, node, expr);
	    };
	  });

	  // export type
	  instance.extend("shouldParseExportDeclaration", function (inner) {
	    return function () {
	      return this.isContextual("type") || this.isContextual("interface") || this.isContextual("opaque") || inner.call(this);
	    };
	  });

	  instance.extend("isExportDefaultSpecifier", function (inner) {
	    return function () {
	      if (this.match(types$1.name) && (this.state.value === "type" || this.state.value === "interface" || this.state.value === "opaque")) {
	        return false;
	      }

	      return inner.call(this);
	    };
	  });

	  instance.extend("parseConditional", function (inner) {
	    return function (expr, noIn, startPos, startLoc, refNeedsArrowPos) {
	      // only do the expensive clone if there is a question mark
	      // and if we come from inside parens
	      if (refNeedsArrowPos && this.match(types$1.question)) {
	        var state = this.state.clone();
	        try {
	          return inner.call(this, expr, noIn, startPos, startLoc);
	        } catch (err) {
	          if (err instanceof SyntaxError) {
	            this.state = state;
	            refNeedsArrowPos.start = err.pos || this.state.start;
	            return expr;
	          } else {
	            // istanbul ignore next: no such error is expected
	            throw err;
	          }
	        }
	      }

	      return inner.call(this, expr, noIn, startPos, startLoc);
	    };
	  });

	  instance.extend("parseParenItem", function (inner) {
	    return function (node, startPos, startLoc) {
	      node = inner.call(this, node, startPos, startLoc);
	      if (this.eat(types$1.question)) {
	        node.optional = true;
	      }

	      if (this.match(types$1.colon)) {
	        var typeCastNode = this.startNodeAt(startPos, startLoc);
	        typeCastNode.expression = node;
	        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();

	        return this.finishNode(typeCastNode, "TypeCastExpression");
	      }

	      return node;
	    };
	  });

	  instance.extend("parseExport", function (inner) {
	    return function (node) {
	      node = inner.call(this, node);
	      if (node.type === "ExportNamedDeclaration") {
	        node.exportKind = node.exportKind || "value";
	      }
	      return node;
	    };
	  });

	  instance.extend("parseExportDeclaration", function (inner) {
	    return function (node) {
	      if (this.isContextual("type")) {
	        node.exportKind = "type";

	        var declarationNode = this.startNode();
	        this.next();

	        if (this.match(types$1.braceL)) {
	          // export type { foo, bar };
	          node.specifiers = this.parseExportSpecifiers();
	          this.parseExportFrom(node);
	          return null;
	        } else {
	          // export type Foo = Bar;
	          return this.flowParseTypeAlias(declarationNode);
	        }
	      } else if (this.isContextual("opaque")) {
	        node.exportKind = "type";

	        var _declarationNode = this.startNode();
	        this.next();
	        // export opaque type Foo = Bar;
	        return this.flowParseOpaqueType(_declarationNode, false);
	      } else if (this.isContextual("interface")) {
	        node.exportKind = "type";
	        var _declarationNode2 = this.startNode();
	        this.next();
	        return this.flowParseInterface(_declarationNode2);
	      } else {
	        return inner.call(this, node);
	      }
	    };
	  });

	  instance.extend("parseClassId", function (inner) {
	    return function (node) {
	      inner.apply(this, arguments);
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	    };
	  });

	  // don't consider `void` to be a keyword as then it'll use the void token type
	  // and set startExpr
	  instance.extend("isKeyword", function (inner) {
	    return function (name) {
	      if (this.state.inType && name === "void") {
	        return false;
	      } else {
	        return inner.call(this, name);
	      }
	    };
	  });

	  // ensure that inside flow types, we bypass the jsx parser plugin
	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      if (this.state.inType && (code === 62 || code === 60)) {
	        return this.finishOp(types$1.relational, 1);
	      } else {
	        return inner.call(this, code);
	      }
	    };
	  });

	  // don't lex any token as a jsx one inside a flow type
	  instance.extend("jsx_readToken", function (inner) {
	    return function () {
	      if (!this.state.inType) return inner.call(this);
	    };
	  });

	  instance.extend("toAssignable", function (inner) {
	    return function (node, isBinding, contextDescription) {
	      if (node.type === "TypeCastExpression") {
	        return inner.call(this, this.typeCastToParameter(node), isBinding, contextDescription);
	      } else {
	        return inner.call(this, node, isBinding, contextDescription);
	      }
	    };
	  });

	  // turn type casts that we found in function parameter head into type annotated params
	  instance.extend("toAssignableList", function (inner) {
	    return function (exprList, isBinding, contextDescription) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr.type === "TypeCastExpression") {
	          exprList[i] = this.typeCastToParameter(expr);
	        }
	      }
	      return inner.call(this, exprList, isBinding, contextDescription);
	    };
	  });

	  // this is a list of nodes, from something like a call expression, we need to filter the
	  // type casts that we've found that are illegal in this context
	  instance.extend("toReferencedList", function () {
	    return function (exprList) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr._exprListItem && expr.type === "TypeCastExpression") {
	          this.raise(expr.start, "Unexpected type cast");
	        }
	      }

	      return exprList;
	    };
	  });

	  // parse an item inside a expression list eg. `(NODE, NODE)` where NODE represents
	  // the position where this function is called
	  instance.extend("parseExprListItem", function (inner) {
	    return function () {
	      var container = this.startNode();

	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var node = inner.call.apply(inner, [this].concat(args));
	      if (this.match(types$1.colon)) {
	        container._exprListItem = true;
	        container.expression = node;
	        container.typeAnnotation = this.flowParseTypeAnnotation();
	        return this.finishNode(container, "TypeCastExpression");
	      } else {
	        return node;
	      }
	    };
	  });

	  instance.extend("checkLVal", function (inner) {
	    return function (node) {
	      if (node.type !== "TypeCastExpression") {
	        return inner.apply(this, arguments);
	      }
	    };
	  });

	  // parse class property type annotations
	  instance.extend("parseClassProperty", function (inner) {
	    return function (node) {
	      delete node.variancePos;
	      if (this.match(types$1.colon)) {
	        node.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      return inner.call(this, node);
	    };
	  });

	  // determine whether or not we're currently in the position where a class method would appear
	  instance.extend("isClassMethod", function (inner) {
	    return function () {
	      return this.isRelational("<") || inner.call(this);
	    };
	  });

	  // determine whether or not we're currently in the position where a class property would appear
	  instance.extend("isClassProperty", function (inner) {
	    return function () {
	      return this.match(types$1.colon) || inner.call(this);
	    };
	  });

	  instance.extend("isNonstaticConstructor", function (inner) {
	    return function (method) {
	      return !this.match(types$1.colon) && inner.call(this, method);
	    };
	  });

	  // parse type parameters for class methods
	  instance.extend("parseClassMethod", function (inner) {
	    return function (classBody, method) {
	      if (method.variance) {
	        this.unexpected(method.variancePos);
	      }
	      delete method.variance;
	      delete method.variancePos;
	      if (this.isRelational("<")) {
	        method.typeParameters = this.flowParseTypeParameterDeclaration();
	      }

	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      inner.call.apply(inner, [this, classBody, method].concat(args));
	    };
	  });

	  // parse a the super class type parameters and implements
	  instance.extend("parseClassSuper", function (inner) {
	    return function (node, isStatement) {
	      inner.call(this, node, isStatement);
	      if (node.superClass && this.isRelational("<")) {
	        node.superTypeParameters = this.flowParseTypeParameterInstantiation();
	      }
	      if (this.isContextual("implements")) {
	        this.next();
	        var implemented = node.implements = [];
	        do {
	          var _node = this.startNode();
	          _node.id = this.parseIdentifier();
	          if (this.isRelational("<")) {
	            _node.typeParameters = this.flowParseTypeParameterInstantiation();
	          } else {
	            _node.typeParameters = null;
	          }
	          implemented.push(this.finishNode(_node, "ClassImplements"));
	        } while (this.eat(types$1.comma));
	      }
	    };
	  });

	  instance.extend("parsePropertyName", function (inner) {
	    return function (node) {
	      var variancePos = this.state.start;
	      var variance = this.flowParseVariance();
	      var key = inner.call(this, node);
	      node.variance = variance;
	      node.variancePos = variancePos;
	      return key;
	    };
	  });

	  // parse type parameters for object method shorthand
	  instance.extend("parseObjPropValue", function (inner) {
	    return function (prop) {
	      if (prop.variance) {
	        this.unexpected(prop.variancePos);
	      }
	      delete prop.variance;
	      delete prop.variancePos;

	      var typeParameters = void 0;

	      // method shorthand
	      if (this.isRelational("<")) {
	        typeParameters = this.flowParseTypeParameterDeclaration();
	        if (!this.match(types$1.parenL)) this.unexpected();
	      }

	      inner.apply(this, arguments);

	      // add typeParameters if we found them
	      if (typeParameters) {
	        (prop.value || prop).typeParameters = typeParameters;
	      }
	    };
	  });

	  instance.extend("parseAssignableListItemTypes", function () {
	    return function (param) {
	      if (this.eat(types$1.question)) {
	        param.optional = true;
	      }
	      if (this.match(types$1.colon)) {
	        param.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      this.finishNode(param, param.type);
	      return param;
	    };
	  });

	  instance.extend("parseMaybeDefault", function (inner) {
	    return function () {
	      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	      }

	      var node = inner.apply(this, args);

	      if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
	        this.raise(node.typeAnnotation.start, "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`");
	      }

	      return node;
	    };
	  });

	  // parse typeof and type imports
	  instance.extend("parseImportSpecifiers", function (inner) {
	    return function (node) {
	      node.importKind = "value";

	      var kind = null;
	      if (this.match(types$1._typeof)) {
	        kind = "typeof";
	      } else if (this.isContextual("type")) {
	        kind = "type";
	      }
	      if (kind) {
	        var lh = this.lookahead();
	        if (lh.type === types$1.name && lh.value !== "from" || lh.type === types$1.braceL || lh.type === types$1.star) {
	          this.next();
	          node.importKind = kind;
	        }
	      }

	      inner.call(this, node);
	    };
	  });

	  // parse import-type/typeof shorthand
	  instance.extend("parseImportSpecifier", function () {
	    return function (node) {
	      var specifier = this.startNode();
	      var firstIdentLoc = this.state.start;
	      var firstIdent = this.parseIdentifier(true);

	      var specifierTypeKind = null;
	      if (firstIdent.name === "type") {
	        specifierTypeKind = "type";
	      } else if (firstIdent.name === "typeof") {
	        specifierTypeKind = "typeof";
	      }

	      var isBinding = false;
	      if (this.isContextual("as")) {
	        var as_ident = this.parseIdentifier(true);
	        if (specifierTypeKind !== null && !this.match(types$1.name) && !this.state.type.keyword) {
	          // `import {type as ,` or `import {type as }`
	          specifier.imported = as_ident;
	          specifier.importKind = specifierTypeKind;
	          specifier.local = as_ident.__clone();
	        } else {
	          // `import {type as foo`
	          specifier.imported = firstIdent;
	          specifier.importKind = null;
	          specifier.local = this.parseIdentifier();
	        }
	      } else if (specifierTypeKind !== null && (this.match(types$1.name) || this.state.type.keyword)) {
	        // `import {type foo`
	        specifier.imported = this.parseIdentifier(true);
	        specifier.importKind = specifierTypeKind;
	        if (this.eatContextual("as")) {
	          specifier.local = this.parseIdentifier();
	        } else {
	          isBinding = true;
	          specifier.local = specifier.imported.__clone();
	        }
	      } else {
	        isBinding = true;
	        specifier.imported = firstIdent;
	        specifier.importKind = null;
	        specifier.local = specifier.imported.__clone();
	      }

	      if ((node.importKind === "type" || node.importKind === "typeof") && (specifier.importKind === "type" || specifier.importKind === "typeof")) {
	        this.raise(firstIdentLoc, "`The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements`");
	      }

	      if (isBinding) this.checkReservedWord(specifier.local.name, specifier.start, true, true);

	      this.checkLVal(specifier.local, true, undefined, "import specifier");
	      node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
	    };
	  });

	  // parse function type parameters - function foo<T>() {}
	  instance.extend("parseFunctionParams", function (inner) {
	    return function (node) {
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	      inner.call(this, node);
	    };
	  });

	  // parse flow type annotations on variable declarator heads - let foo: string = bar
	  instance.extend("parseVarHead", function (inner) {
	    return function (decl) {
	      inner.call(this, decl);
	      if (this.match(types$1.colon)) {
	        decl.id.typeAnnotation = this.flowParseTypeAnnotation();
	        this.finishNode(decl.id, decl.id.type);
	      }
	    };
	  });

	  // parse the return type of an async arrow function - let foo = (async (): number => {});
	  instance.extend("parseAsyncArrowFromCallExpression", function (inner) {
	    return function (node, call) {
	      if (this.match(types$1.colon)) {
	        var oldNoAnonFunctionType = this.state.noAnonFunctionType;
	        this.state.noAnonFunctionType = true;
	        node.returnType = this.flowParseTypeAnnotation();
	        this.state.noAnonFunctionType = oldNoAnonFunctionType;
	      }

	      return inner.call(this, node, call);
	    };
	  });

	  // todo description
	  instance.extend("shouldParseAsyncArrow", function (inner) {
	    return function () {
	      return this.match(types$1.colon) || inner.call(this);
	    };
	  });

	  // We need to support type parameter declarations for arrow functions. This
	  // is tricky. There are three situations we need to handle
	  //
	  // 1. This is either JSX or an arrow function. We'll try JSX first. If that
	  //    fails, we'll try an arrow function. If that fails, we'll throw the JSX
	  //    error.
	  // 2. This is an arrow function. We'll parse the type parameter declaration,
	  //    parse the rest, make sure the rest is an arrow function, and go from
	  //    there
	  // 3. This is neither. Just call the inner function
	  instance.extend("parseMaybeAssign", function (inner) {
	    return function () {
	      var jsxError = null;

	      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	        args[_key4] = arguments[_key4];
	      }

	      if (types$1.jsxTagStart && this.match(types$1.jsxTagStart)) {
	        var state = this.state.clone();
	        try {
	          return inner.apply(this, args);
	        } catch (err) {
	          if (err instanceof SyntaxError) {
	            this.state = state;

	            // Remove `tc.j_expr` and `tc.j_oTag` from context added
	            // by parsing `jsxTagStart` to stop the JSX plugin from
	            // messing with the tokens
	            this.state.context.length -= 2;

	            jsxError = err;
	          } else {
	            // istanbul ignore next: no such error is expected
	            throw err;
	          }
	        }
	      }

	      if (jsxError != null || this.isRelational("<")) {
	        var arrowExpression = void 0;
	        var typeParameters = void 0;
	        try {
	          typeParameters = this.flowParseTypeParameterDeclaration();

	          arrowExpression = inner.apply(this, args);
	          arrowExpression.typeParameters = typeParameters;
	          arrowExpression.start = typeParameters.start;
	          arrowExpression.loc.start = typeParameters.loc.start;
	        } catch (err) {
	          throw jsxError || err;
	        }

	        if (arrowExpression.type === "ArrowFunctionExpression") {
	          return arrowExpression;
	        } else if (jsxError != null) {
	          throw jsxError;
	        } else {
	          this.raise(typeParameters.start, "Expected an arrow function after this type parameter declaration");
	        }
	      }

	      return inner.apply(this, args);
	    };
	  });

	  // handle return types for arrow functions
	  instance.extend("parseArrow", function (inner) {
	    return function (node) {
	      if (this.match(types$1.colon)) {
	        var state = this.state.clone();
	        try {
	          var oldNoAnonFunctionType = this.state.noAnonFunctionType;
	          this.state.noAnonFunctionType = true;
	          var returnType = this.flowParseTypeAndPredicateAnnotation();
	          this.state.noAnonFunctionType = oldNoAnonFunctionType;

	          if (this.canInsertSemicolon()) this.unexpected();
	          if (!this.match(types$1.arrow)) this.unexpected();
	          // assign after it is clear it is an arrow
	          node.returnType = returnType;
	        } catch (err) {
	          if (err instanceof SyntaxError) {
	            this.state = state;
	          } else {
	            // istanbul ignore next: no such error is expected
	            throw err;
	          }
	        }
	      }

	      return inner.call(this, node);
	    };
	  });

	  instance.extend("shouldParseArrow", function (inner) {
	    return function () {
	      return this.match(types$1.colon) || inner.call(this);
	    };
	  });
	};

	// Adapted from String.fromcodepoint to export the function without modifying String
	/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */

	// The MIT License (MIT)
	// Copyright (c) Mathias Bynens
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
	// associated documentation files (the "Software"), to deal in the Software without restriction,
	// including without limitation the rights to use, copy, modify, merge, publish, distribute,
	// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in all copies or
	// substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
	// NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	var fromCodePoint$1 = String.fromCodePoint;

	if (!fromCodePoint$1) {
	  var stringFromCharCode = String.fromCharCode;
	  var floor = Math.floor;
	  fromCodePoint$1 = function fromCodePoint() {
	    var MAX_SIZE = 0x4000;
	    var codeUnits = [];
	    var highSurrogate = void 0;
	    var lowSurrogate = void 0;
	    var index = -1;
	    var length = arguments.length;
	    if (!length) {
	      return "";
	    }
	    var result = "";
	    while (++index < length) {
	      var codePoint = Number(arguments[index]);
	      if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
	      codePoint < 0 || // not a valid Unicode code point
	      codePoint > 0x10FFFF || // not a valid Unicode code point
	      floor(codePoint) != codePoint // not an integer
	      ) {
	          throw RangeError("Invalid code point: " + codePoint);
	        }
	      if (codePoint <= 0xFFFF) {
	        // BMP code point
	        codeUnits.push(codePoint);
	      } else {
	        // Astral code point; split in surrogate halves
	        // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	        codePoint -= 0x10000;
	        highSurrogate = (codePoint >> 10) + 0xD800;
	        lowSurrogate = codePoint % 0x400 + 0xDC00;
	        codeUnits.push(highSurrogate, lowSurrogate);
	      }
	      if (index + 1 == length || codeUnits.length > MAX_SIZE) {
	        result += stringFromCharCode.apply(null, codeUnits);
	        codeUnits.length = 0;
	      }
	    }
	    return result;
	  };
	}

	var fromCodePoint$1$1 = fromCodePoint$1;

	var XHTMLEntities = {
	  quot: "\"",
	  amp: "&",
	  apos: "'",
	  lt: "<",
	  gt: ">",
	  nbsp: "\xA0",
	  iexcl: "\xA1",
	  cent: "\xA2",
	  pound: "\xA3",
	  curren: "\xA4",
	  yen: "\xA5",
	  brvbar: "\xA6",
	  sect: "\xA7",
	  uml: "\xA8",
	  copy: "\xA9",
	  ordf: "\xAA",
	  laquo: "\xAB",
	  not: "\xAC",
	  shy: "\xAD",
	  reg: "\xAE",
	  macr: "\xAF",
	  deg: "\xB0",
	  plusmn: "\xB1",
	  sup2: "\xB2",
	  sup3: "\xB3",
	  acute: "\xB4",
	  micro: "\xB5",
	  para: "\xB6",
	  middot: "\xB7",
	  cedil: "\xB8",
	  sup1: "\xB9",
	  ordm: "\xBA",
	  raquo: "\xBB",
	  frac14: "\xBC",
	  frac12: "\xBD",
	  frac34: "\xBE",
	  iquest: "\xBF",
	  Agrave: "\xC0",
	  Aacute: "\xC1",
	  Acirc: "\xC2",
	  Atilde: "\xC3",
	  Auml: "\xC4",
	  Aring: "\xC5",
	  AElig: "\xC6",
	  Ccedil: "\xC7",
	  Egrave: "\xC8",
	  Eacute: "\xC9",
	  Ecirc: "\xCA",
	  Euml: "\xCB",
	  Igrave: "\xCC",
	  Iacute: "\xCD",
	  Icirc: "\xCE",
	  Iuml: "\xCF",
	  ETH: "\xD0",
	  Ntilde: "\xD1",
	  Ograve: "\xD2",
	  Oacute: "\xD3",
	  Ocirc: "\xD4",
	  Otilde: "\xD5",
	  Ouml: "\xD6",
	  times: "\xD7",
	  Oslash: "\xD8",
	  Ugrave: "\xD9",
	  Uacute: "\xDA",
	  Ucirc: "\xDB",
	  Uuml: "\xDC",
	  Yacute: "\xDD",
	  THORN: "\xDE",
	  szlig: "\xDF",
	  agrave: "\xE0",
	  aacute: "\xE1",
	  acirc: "\xE2",
	  atilde: "\xE3",
	  auml: "\xE4",
	  aring: "\xE5",
	  aelig: "\xE6",
	  ccedil: "\xE7",
	  egrave: "\xE8",
	  eacute: "\xE9",
	  ecirc: "\xEA",
	  euml: "\xEB",
	  igrave: "\xEC",
	  iacute: "\xED",
	  icirc: "\xEE",
	  iuml: "\xEF",
	  eth: "\xF0",
	  ntilde: "\xF1",
	  ograve: "\xF2",
	  oacute: "\xF3",
	  ocirc: "\xF4",
	  otilde: "\xF5",
	  ouml: "\xF6",
	  divide: "\xF7",
	  oslash: "\xF8",
	  ugrave: "\xF9",
	  uacute: "\xFA",
	  ucirc: "\xFB",
	  uuml: "\xFC",
	  yacute: "\xFD",
	  thorn: "\xFE",
	  yuml: "\xFF",
	  OElig: "\u0152",
	  oelig: "\u0153",
	  Scaron: "\u0160",
	  scaron: "\u0161",
	  Yuml: "\u0178",
	  fnof: "\u0192",
	  circ: "\u02C6",
	  tilde: "\u02DC",
	  Alpha: "\u0391",
	  Beta: "\u0392",
	  Gamma: "\u0393",
	  Delta: "\u0394",
	  Epsilon: "\u0395",
	  Zeta: "\u0396",
	  Eta: "\u0397",
	  Theta: "\u0398",
	  Iota: "\u0399",
	  Kappa: "\u039A",
	  Lambda: "\u039B",
	  Mu: "\u039C",
	  Nu: "\u039D",
	  Xi: "\u039E",
	  Omicron: "\u039F",
	  Pi: "\u03A0",
	  Rho: "\u03A1",
	  Sigma: "\u03A3",
	  Tau: "\u03A4",
	  Upsilon: "\u03A5",
	  Phi: "\u03A6",
	  Chi: "\u03A7",
	  Psi: "\u03A8",
	  Omega: "\u03A9",
	  alpha: "\u03B1",
	  beta: "\u03B2",
	  gamma: "\u03B3",
	  delta: "\u03B4",
	  epsilon: "\u03B5",
	  zeta: "\u03B6",
	  eta: "\u03B7",
	  theta: "\u03B8",
	  iota: "\u03B9",
	  kappa: "\u03BA",
	  lambda: "\u03BB",
	  mu: "\u03BC",
	  nu: "\u03BD",
	  xi: "\u03BE",
	  omicron: "\u03BF",
	  pi: "\u03C0",
	  rho: "\u03C1",
	  sigmaf: "\u03C2",
	  sigma: "\u03C3",
	  tau: "\u03C4",
	  upsilon: "\u03C5",
	  phi: "\u03C6",
	  chi: "\u03C7",
	  psi: "\u03C8",
	  omega: "\u03C9",
	  thetasym: "\u03D1",
	  upsih: "\u03D2",
	  piv: "\u03D6",
	  ensp: "\u2002",
	  emsp: "\u2003",
	  thinsp: "\u2009",
	  zwnj: "\u200C",
	  zwj: "\u200D",
	  lrm: "\u200E",
	  rlm: "\u200F",
	  ndash: "\u2013",
	  mdash: "\u2014",
	  lsquo: "\u2018",
	  rsquo: "\u2019",
	  sbquo: "\u201A",
	  ldquo: "\u201C",
	  rdquo: "\u201D",
	  bdquo: "\u201E",
	  dagger: "\u2020",
	  Dagger: "\u2021",
	  bull: "\u2022",
	  hellip: "\u2026",
	  permil: "\u2030",
	  prime: "\u2032",
	  Prime: "\u2033",
	  lsaquo: "\u2039",
	  rsaquo: "\u203A",
	  oline: "\u203E",
	  frasl: "\u2044",
	  euro: "\u20AC",
	  image: "\u2111",
	  weierp: "\u2118",
	  real: "\u211C",
	  trade: "\u2122",
	  alefsym: "\u2135",
	  larr: "\u2190",
	  uarr: "\u2191",
	  rarr: "\u2192",
	  darr: "\u2193",
	  harr: "\u2194",
	  crarr: "\u21B5",
	  lArr: "\u21D0",
	  uArr: "\u21D1",
	  rArr: "\u21D2",
	  dArr: "\u21D3",
	  hArr: "\u21D4",
	  forall: "\u2200",
	  part: "\u2202",
	  exist: "\u2203",
	  empty: "\u2205",
	  nabla: "\u2207",
	  isin: "\u2208",
	  notin: "\u2209",
	  ni: "\u220B",
	  prod: "\u220F",
	  sum: "\u2211",
	  minus: "\u2212",
	  lowast: "\u2217",
	  radic: "\u221A",
	  prop: "\u221D",
	  infin: "\u221E",
	  ang: "\u2220",
	  and: "\u2227",
	  or: "\u2228",
	  cap: "\u2229",
	  cup: "\u222A",
	  "int": "\u222B",
	  there4: "\u2234",
	  sim: "\u223C",
	  cong: "\u2245",
	  asymp: "\u2248",
	  ne: "\u2260",
	  equiv: "\u2261",
	  le: "\u2264",
	  ge: "\u2265",
	  sub: "\u2282",
	  sup: "\u2283",
	  nsub: "\u2284",
	  sube: "\u2286",
	  supe: "\u2287",
	  oplus: "\u2295",
	  otimes: "\u2297",
	  perp: "\u22A5",
	  sdot: "\u22C5",
	  lceil: "\u2308",
	  rceil: "\u2309",
	  lfloor: "\u230A",
	  rfloor: "\u230B",
	  lang: "\u2329",
	  rang: "\u232A",
	  loz: "\u25CA",
	  spades: "\u2660",
	  clubs: "\u2663",
	  hearts: "\u2665",
	  diams: "\u2666"
	};

	var HEX_NUMBER = /^[\da-fA-F]+$/;
	var DECIMAL_NUMBER = /^\d+$/;

	types$1$1.j_oTag = new TokContext("<tag", false);
	types$1$1.j_cTag = new TokContext("</tag", false);
	types$1$1.j_expr = new TokContext("<tag>...</tag>", true, true);

	types$1.jsxName = new TokenType("jsxName");
	types$1.jsxText = new TokenType("jsxText", { beforeExpr: true });
	types$1.jsxTagStart = new TokenType("jsxTagStart", { startsExpr: true });
	types$1.jsxTagEnd = new TokenType("jsxTagEnd");

	types$1.jsxTagStart.updateContext = function () {
	  this.state.context.push(types$1$1.j_expr); // treat as beginning of JSX expression
	  this.state.context.push(types$1$1.j_oTag); // start opening tag context
	  this.state.exprAllowed = false;
	};

	types$1.jsxTagEnd.updateContext = function (prevType) {
	  var out = this.state.context.pop();
	  if (out === types$1$1.j_oTag && prevType === types$1.slash || out === types$1$1.j_cTag) {
	    this.state.context.pop();
	    this.state.exprAllowed = this.curContext() === types$1$1.j_expr;
	  } else {
	    this.state.exprAllowed = true;
	  }
	};

	var pp$9 = Parser$3.prototype;

	// Reads inline JSX contents token.

	pp$9.jsxReadToken = function () {
	  var out = "";
	  var chunkStart = this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated JSX contents");
	    }

	    var ch = this.input.charCodeAt(this.state.pos);

	    switch (ch) {
	      case 60: // "<"
	      case 123:
	        // "{"
	        if (this.state.pos === this.state.start) {
	          if (ch === 60 && this.state.exprAllowed) {
	            ++this.state.pos;
	            return this.finishToken(types$1.jsxTagStart);
	          }
	          return this.getTokenFromCode(ch);
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(types$1.jsxText, out);

	      case 38:
	        // "&"
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.jsxReadEntity();
	        chunkStart = this.state.pos;
	        break;

	      default:
	        if (isNewLine(ch)) {
	          out += this.input.slice(chunkStart, this.state.pos);
	          out += this.jsxReadNewLine(true);
	          chunkStart = this.state.pos;
	        } else {
	          ++this.state.pos;
	        }
	    }
	  }
	};

	pp$9.jsxReadNewLine = function (normalizeCRLF) {
	  var ch = this.input.charCodeAt(this.state.pos);
	  var out = void 0;
	  ++this.state.pos;
	  if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
	    ++this.state.pos;
	    out = normalizeCRLF ? "\n" : "\r\n";
	  } else {
	    out = String.fromCharCode(ch);
	  }
	  ++this.state.curLine;
	  this.state.lineStart = this.state.pos;

	  return out;
	};

	pp$9.jsxReadString = function (quote) {
	  var out = "";
	  var chunkStart = ++this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated string constant");
	    }

	    var ch = this.input.charCodeAt(this.state.pos);
	    if (ch === quote) break;
	    if (ch === 38) {
	      // "&"
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadEntity();
	      chunkStart = this.state.pos;
	    } else if (isNewLine(ch)) {
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadNewLine(false);
	      chunkStart = this.state.pos;
	    } else {
	      ++this.state.pos;
	    }
	  }
	  out += this.input.slice(chunkStart, this.state.pos++);
	  return this.finishToken(types$1.string, out);
	};

	pp$9.jsxReadEntity = function () {
	  var str = "";
	  var count = 0;
	  var entity = void 0;
	  var ch = this.input[this.state.pos];

	  var startPos = ++this.state.pos;
	  while (this.state.pos < this.input.length && count++ < 10) {
	    ch = this.input[this.state.pos++];
	    if (ch === ";") {
	      if (str[0] === "#") {
	        if (str[1] === "x") {
	          str = str.substr(2);
	          if (HEX_NUMBER.test(str)) entity = fromCodePoint$1$1(parseInt(str, 16));
	        } else {
	          str = str.substr(1);
	          if (DECIMAL_NUMBER.test(str)) entity = fromCodePoint$1$1(parseInt(str, 10));
	        }
	      } else {
	        entity = XHTMLEntities[str];
	      }
	      break;
	    }
	    str += ch;
	  }
	  if (!entity) {
	    this.state.pos = startPos;
	    return "&";
	  }
	  return entity;
	};

	// Read a JSX identifier (valid tag or attribute name).
	//
	// Optimized version since JSX identifiers can"t contain
	// escape characters and so can be read as single slice.
	// Also assumes that first character was already checked
	// by isIdentifierStart in readToken.

	pp$9.jsxReadWord = function () {
	  var ch = void 0;
	  var start = this.state.pos;
	  do {
	    ch = this.input.charCodeAt(++this.state.pos);
	  } while (isIdentifierChar$1(ch) || ch === 45); // "-"
	  return this.finishToken(types$1.jsxName, this.input.slice(start, this.state.pos));
	};

	// Transforms JSX element name to string.

	function getQualifiedJSXName(object) {
	  if (object.type === "JSXIdentifier") {
	    return object.name;
	  }

	  if (object.type === "JSXNamespacedName") {
	    return object.namespace.name + ":" + object.name.name;
	  }

	  if (object.type === "JSXMemberExpression") {
	    return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
	  }
	}

	// Parse next token as JSX identifier

	pp$9.jsxParseIdentifier = function () {
	  var node = this.startNode();
	  if (this.match(types$1.jsxName)) {
	    node.name = this.state.value;
	  } else if (this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }
	  this.next();
	  return this.finishNode(node, "JSXIdentifier");
	};

	// Parse namespaced identifier.

	pp$9.jsxParseNamespacedName = function () {
	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;
	  var name = this.jsxParseIdentifier();
	  if (!this.eat(types$1.colon)) return name;

	  var node = this.startNodeAt(startPos, startLoc);
	  node.namespace = name;
	  node.name = this.jsxParseIdentifier();
	  return this.finishNode(node, "JSXNamespacedName");
	};

	// Parses element name in any form - namespaced, member
	// or single identifier.

	pp$9.jsxParseElementName = function () {
	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;
	  var node = this.jsxParseNamespacedName();
	  while (this.eat(types$1.dot)) {
	    var newNode = this.startNodeAt(startPos, startLoc);
	    newNode.object = node;
	    newNode.property = this.jsxParseIdentifier();
	    node = this.finishNode(newNode, "JSXMemberExpression");
	  }
	  return node;
	};

	// Parses any type of JSX attribute value.

	pp$9.jsxParseAttributeValue = function () {
	  var node = void 0;
	  switch (this.state.type) {
	    case types$1.braceL:
	      node = this.jsxParseExpressionContainer();
	      if (node.expression.type === "JSXEmptyExpression") {
	        this.raise(node.start, "JSX attributes must only be assigned a non-empty expression");
	      } else {
	        return node;
	      }

	    case types$1.jsxTagStart:
	    case types$1.string:
	      node = this.parseExprAtom();
	      node.extra = null;
	      return node;

	    default:
	      this.raise(this.state.start, "JSX value should be either an expression or a quoted JSX text");
	  }
	};

	// JSXEmptyExpression is unique type since it doesn't actually parse anything,
	// and so it should start at the end of last read token (left brace) and finish
	// at the beginning of the next one (right brace).

	pp$9.jsxParseEmptyExpression = function () {
	  var node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);
	  return this.finishNodeAt(node, "JSXEmptyExpression", this.state.start, this.state.startLoc);
	};

	// Parse JSX spread child

	pp$9.jsxParseSpreadChild = function () {
	  var node = this.startNode();
	  this.expect(types$1.braceL);
	  this.expect(types$1.ellipsis);
	  node.expression = this.parseExpression();
	  this.expect(types$1.braceR);

	  return this.finishNode(node, "JSXSpreadChild");
	};

	// Parses JSX expression enclosed into curly brackets.


	pp$9.jsxParseExpressionContainer = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(types$1.braceR)) {
	    node.expression = this.jsxParseEmptyExpression();
	  } else {
	    node.expression = this.parseExpression();
	  }
	  this.expect(types$1.braceR);
	  return this.finishNode(node, "JSXExpressionContainer");
	};

	// Parses following JSX attribute name-value pair.

	pp$9.jsxParseAttribute = function () {
	  var node = this.startNode();
	  if (this.eat(types$1.braceL)) {
	    this.expect(types$1.ellipsis);
	    node.argument = this.parseMaybeAssign();
	    this.expect(types$1.braceR);
	    return this.finishNode(node, "JSXSpreadAttribute");
	  }
	  node.name = this.jsxParseNamespacedName();
	  node.value = this.eat(types$1.eq) ? this.jsxParseAttributeValue() : null;
	  return this.finishNode(node, "JSXAttribute");
	};

	// Parses JSX opening tag starting after "<".

	pp$9.jsxParseOpeningElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.attributes = [];
	  node.name = this.jsxParseElementName();
	  while (!this.match(types$1.slash) && !this.match(types$1.jsxTagEnd)) {
	    node.attributes.push(this.jsxParseAttribute());
	  }
	  node.selfClosing = this.eat(types$1.slash);
	  this.expect(types$1.jsxTagEnd);
	  return this.finishNode(node, "JSXOpeningElement");
	};

	// Parses JSX closing tag starting after "</".

	pp$9.jsxParseClosingElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.name = this.jsxParseElementName();
	  this.expect(types$1.jsxTagEnd);
	  return this.finishNode(node, "JSXClosingElement");
	};

	// Parses entire JSX element, including it"s opening tag
	// (starting after "<"), attributes, contents and closing tag.

	pp$9.jsxParseElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  var children = [];
	  var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
	  var closingElement = null;

	  if (!openingElement.selfClosing) {
	    contents: for (;;) {
	      switch (this.state.type) {
	        case types$1.jsxTagStart:
	          startPos = this.state.start;startLoc = this.state.startLoc;
	          this.next();
	          if (this.eat(types$1.slash)) {
	            closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
	            break contents;
	          }
	          children.push(this.jsxParseElementAt(startPos, startLoc));
	          break;

	        case types$1.jsxText:
	          children.push(this.parseExprAtom());
	          break;

	        case types$1.braceL:
	          if (this.lookahead().type === types$1.ellipsis) {
	            children.push(this.jsxParseSpreadChild());
	          } else {
	            children.push(this.jsxParseExpressionContainer());
	          }

	          break;

	        // istanbul ignore next - should never happen
	        default:
	          this.unexpected();
	      }
	    }

	    if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
	      this.raise(closingElement.start, "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">");
	    }
	  }

	  node.openingElement = openingElement;
	  node.closingElement = closingElement;
	  node.children = children;
	  if (this.match(types$1.relational) && this.state.value === "<") {
	    this.raise(this.state.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
	  }
	  return this.finishNode(node, "JSXElement");
	};

	// Parses entire JSX element from current position.

	pp$9.jsxParseElement = function () {
	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;
	  this.next();
	  return this.jsxParseElementAt(startPos, startLoc);
	};

	var jsxPlugin = function (instance) {
	  instance.extend("parseExprAtom", function (inner) {
	    return function (refShortHandDefaultPos) {
	      if (this.match(types$1.jsxText)) {
	        var node = this.parseLiteral(this.state.value, "JSXText");
	        // https://github.com/babel/babel/issues/2078
	        node.extra = null;
	        return node;
	      } else if (this.match(types$1.jsxTagStart)) {
	        return this.jsxParseElement();
	      } else {
	        return inner.call(this, refShortHandDefaultPos);
	      }
	    };
	  });

	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      if (this.state.inPropertyName) return inner.call(this, code);

	      var context = this.curContext();

	      if (context === types$1$1.j_expr) {
	        return this.jsxReadToken();
	      }

	      if (context === types$1$1.j_oTag || context === types$1$1.j_cTag) {
	        if (isIdentifierStart$1(code)) {
	          return this.jsxReadWord();
	        }

	        if (code === 62) {
	          ++this.state.pos;
	          return this.finishToken(types$1.jsxTagEnd);
	        }

	        if ((code === 34 || code === 39) && context === types$1$1.j_oTag) {
	          return this.jsxReadString(code);
	        }
	      }

	      if (code === 60 && this.state.exprAllowed) {
	        ++this.state.pos;
	        return this.finishToken(types$1.jsxTagStart);
	      }

	      return inner.call(this, code);
	    };
	  });

	  instance.extend("updateContext", function (inner) {
	    return function (prevType) {
	      if (this.match(types$1.braceL)) {
	        var curContext = this.curContext();
	        if (curContext === types$1$1.j_oTag) {
	          this.state.context.push(types$1$1.braceExpression);
	        } else if (curContext === types$1$1.j_expr) {
	          this.state.context.push(types$1$1.templateQuasi);
	        } else {
	          inner.call(this, prevType);
	        }
	        this.state.exprAllowed = true;
	      } else if (this.match(types$1.slash) && prevType === types$1.jsxTagStart) {
	        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore
	        this.state.context.push(types$1$1.j_cTag); // reconsider as closing tag context
	        this.state.exprAllowed = false;
	      } else {
	        return inner.call(this, prevType);
	      }
	    };
	  });
	};

	plugins$3.estree = estreePlugin;
	plugins$3.flow = flowPlugin;
	plugins$3.jsx = jsxPlugin;

	function parse$e(input, options) {
	  return new Parser$3(options, input).parse();
	}

	function parseExpression(input, options) {
	  var parser = new Parser$3(options, input);
	  if (parser.options.strictMode) {
	    parser.state.strict = true;
	  }
	  return parser.getExpression();
	}

	lib$w.parse = parse$e;
	lib$w.parseExpression = parseExpression;
	lib$w.tokTypes = types$1;

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.parse = exports.parser = void 0;
	var tslib_1 = require$$0$6;
	var _babel_options_1 = tslib_1.__importDefault(_babel_options);
	// Prefer the new @babel/parser package, but fall back to babylon if
	// that's what's available.
	exports.parser = function () {
	    try {
	        return lib$x;
	    }
	    catch (e) {
	        return lib$w;
	    }
	}();
	// This module is suitable for passing as options.parser when calling
	// recast.parse to process JavaScript code with Babel:
	//
	//   const ast = recast.parse(source, {
	//     parser: require("recast/parsers/babel")
	//   });
	//
	function parse(source, options) {
	    var babelOptions = _babel_options_1.default(options);
	    babelOptions.plugins.push("jsx", "flow");
	    return exports.parser.parse(source, babelOptions);
	}
	exports.parse = parse;
	}(babel));

	Object.defineProperty(typescript$2, "__esModule", { value: true });
	typescript$2.parse = void 0;
	var tslib_1 = require$$0$6;
	var babel_1 = babel;
	var _babel_options_1 = tslib_1.__importDefault(_babel_options);
	// This module is suitable for passing as options.parser when calling
	// recast.parse to process TypeScript code:
	//
	//   const ast = recast.parse(source, {
	//     parser: require("recast/parsers/typescript")
	//   });
	//
	function parse$d(source, options) {
	    var babelOptions = _babel_options_1.default(options);
	    babelOptions.plugins.push("typescript");
	    return babel_1.parser.parse(source, babelOptions);
	}
	typescript$2.parse = parse$d;

	/* Riot Compiler WIP, @license MIT */
	const builders = main$1.types.builders;
	main$1.types.namedTypes;

	Object.freeze({
	  code: '',
	  ast: [],
	  meta: {},
	  map: null
	});

	/**
	 * Parsers that can be registered by users to preparse components fragments
	 * @type { Object }
	 */
	Object.freeze({
	  javascript: new Map(),
	  css: new Map(),
	  template: new Map().set('default', code => ({ code }))
	});

	/**
	 * Similar to compose but performs from left-to-right function composition.<br/>
	 * {@link https://30secondsofcode.org/function#composeright see also}
	 * @param   {...[function]} fns) - list of unary function
	 * @returns {*} result of the computation
	 */

	/**
	 * Performs right-to-left function composition.<br/>
	 * Use Array.prototype.reduce() to perform right-to-left function composition.<br/>
	 * The last (rightmost) function can accept one or more arguments; the remaining functions must be unary.<br/>
	 * {@link https://30secondsofcode.org/function#compose original source code}
	 * @param   {...[function]} fns) - list of unary function
	 * @returns {*} result of the computation
	 */
	function compose$1(...fns) {
	  return fns.reduce((f, g) => (...args) => f(g(...args)))
	}

	const JAVASCRIPT_OUTPUT_NAME = 'javascript';
	const CSS_OUTPUT_NAME = 'css';
	const TEMPLATE_OUTPUT_NAME = 'template';

	// Tag names
	const JAVASCRIPT_TAG = 'script';
	const STYLE_TAG = 'style';
	const TEXTAREA_TAG = 'textarea';

	// Boolean attributes
	const IS_RAW = 'isRaw';
	const IS_SELF_CLOSING = 'isSelfClosing';
	const IS_VOID = 'isVoid';
	const IS_BOOLEAN = 'isBoolean';
	const IS_CUSTOM = 'isCustom';
	const IS_SPREAD = 'isSpread';

	var c$1 = /*#__PURE__*/Object.freeze({
	  __proto__: null,
	  JAVASCRIPT_OUTPUT_NAME: JAVASCRIPT_OUTPUT_NAME,
	  CSS_OUTPUT_NAME: CSS_OUTPUT_NAME,
	  TEMPLATE_OUTPUT_NAME: TEMPLATE_OUTPUT_NAME,
	  JAVASCRIPT_TAG: JAVASCRIPT_TAG,
	  STYLE_TAG: STYLE_TAG,
	  TEXTAREA_TAG: TEXTAREA_TAG,
	  IS_RAW: IS_RAW,
	  IS_SELF_CLOSING: IS_SELF_CLOSING,
	  IS_VOID: IS_VOID,
	  IS_BOOLEAN: IS_BOOLEAN,
	  IS_CUSTOM: IS_CUSTOM,
	  IS_SPREAD: IS_SPREAD
	});

	/**
	 * Not all the types are handled in this module.
	 *
	 * @enum {number}
	 * @readonly
	 */
	const TAG$1 = 1; /* TAG */
	const TEXT$1 = 3; /* TEXT */
	const COMMENT = 8; /* COMMENT */
	const duplicatedNamedTag = 'Multiple inline "<%1>" tags are not supported.';

	// Do not touch text content inside this tags
	const RAW_TAGS = /^\/?(?:pre|textarea)$/;

	function formatError(data, message, pos) {
	  if (!pos) {
	    pos = data.length;
	  }
	  // count unix/mac/win eols
	  const line = (data.slice(0, pos).match(/\r\n?|\n/g) || '').length + 1;
	  let col = 0;
	  while (--pos >= 0 && !/[\r\n]/.test(data[pos])) {
	    ++col;
	  }
	  return `[${line},${col}]: ${message}`
	}

	/**
	 * Custom error handler can be implemented replacing this method.
	 * The `state` object includes the buffer (`data`)
	 * The error position (`loc`) contains line (base 1) and col (base 0).
	 * @param {string} data - string containing the error
	 * @param {string} msg - Error message
	 * @param {number} pos - Position of the error
	 * @returns {undefined} throw an exception error
	 */
	function panic$1(data, msg, pos) {
	  const message = formatError(data, msg, pos);
	  throw new Error(message)
	}

	// keyword that can preceed a regex (`in` is handled as special case)
	const beforeReWords = [
	  'case',
	  'default',
	  'do',
	  'else',
	  'in',
	  'instanceof',
	  'prefix',
	  'return',
	  'typeof',
	  'void',
	  'yield'
	];

	// Last chars of all the beforeReWords elements to speed up the process.
	beforeReWords.reduce((s, w) => s + w.slice(-1), '');

	/*
	 * Mini-parser for expressions.
	 * The main pourpose of this module is to find the end of an expression
	 * and return its text without the enclosing brackets.
	 * Does not works with comments, but supports ES6 template strings.
	 */
	/**
	 * @exports exprExtr
	 */
	const S_SQ_STR = /'[^'\n\r\\]*(?:\\(?:\r\n?|[\S\s])[^'\n\r\\]*)*'/.source;
	/**
	 * Matches double quoted JS strings taking care about nested quotes
	 * and EOLs (escaped EOLs are Ok).
	 *
	 * @const
	 * @private
	 */
`${S_SQ_STR}|${S_SQ_STR.replace(/'/g, '"')}`;

	// similar to _.uniq
	const uniq$1 = l => l.filter((x, i, a) => a.indexOf(x) === i);

	/**
	 * SVG void elements that cannot be auto-closed and shouldn't contain child nodes.
	 * @const {Array}
	 */
	const VOID_SVG_TAGS_LIST = [
	  'circle',
	  'ellipse',
	  'line',
	  'path',
	  'polygon',
	  'polyline',
	  'rect',
	  'stop',
	  'use'
	];

	/**
	 * List of html elements where the value attribute is allowed
	 * @type {Array}
	 */
	const HTML_ELEMENTS_HAVING_VALUE_ATTRIBUTE_LIST = [
	  'button',
	  'data',
	  'input',
	  'select',
	  'li',
	  'meter',
	  'option',
	  'output',
	  'progress',
	  'textarea',
	  'param'
	];

	/**
	 * List of all the available svg tags
	 * @const {Array}
	 * @see {@link https://github.com/wooorm/svg-tag-names}
	 */
	const SVG_TAGS_LIST = uniq$1([
	  'a',
	  'altGlyph',
	  'altGlyphDef',
	  'altGlyphItem',
	  'animate',
	  'animateColor',
	  'animateMotion',
	  'animateTransform',
	  'animation',
	  'audio',
	  'canvas',
	  'clipPath',
	  'color-profile',
	  'cursor',
	  'defs',
	  'desc',
	  'discard',
	  'feBlend',
	  'feColorMatrix',
	  'feComponentTransfer',
	  'feComposite',
	  'feConvolveMatrix',
	  'feDiffuseLighting',
	  'feDisplacementMap',
	  'feDistantLight',
	  'feDropShadow',
	  'feFlood',
	  'feFuncA',
	  'feFuncB',
	  'feFuncG',
	  'feFuncR',
	  'feGaussianBlur',
	  'feImage',
	  'feMerge',
	  'feMergeNode',
	  'feMorphology',
	  'feOffset',
	  'fePointLight',
	  'feSpecularLighting',
	  'feSpotLight',
	  'feTile',
	  'feTurbulence',
	  'filter',
	  'font',
	  'font-face',
	  'font-face-format',
	  'font-face-name',
	  'font-face-src',
	  'font-face-uri',
	  'foreignObject',
	  'g',
	  'glyph',
	  'glyphRef',
	  'handler',
	  'hatch',
	  'hatchpath',
	  'hkern',
	  'iframe',
	  'image',
	  'linearGradient',
	  'listener',
	  'marker',
	  'mask',
	  'mesh',
	  'meshgradient',
	  'meshpatch',
	  'meshrow',
	  'metadata',
	  'missing-glyph',
	  'mpath',
	  'pattern',
	  'prefetch',
	  'radialGradient',
	  'script',
	  'set',
	  'solidColor',
	  'solidcolor',
	  'style',
	  'svg',
	  'switch',
	  'symbol',
	  'tbreak',
	  'text',
	  'textArea',
	  'textPath',
	  'title',
	  'tref',
	  'tspan',
	  'unknown',
	  'video',
	  'view',
	  'vkern'
	].concat(VOID_SVG_TAGS_LIST)).sort();

	/**
	 * HTML void elements that cannot be auto-closed and shouldn't contain child nodes.
	 * @type {Array}
	 * @see   {@link http://www.w3.org/TR/html-markup/syntax.html#syntax-elements}
	 * @see   {@link http://www.w3.org/TR/html5/syntax.html#void-elements}
	 */
	const VOID_HTML_TAGS_LIST = [
	  'area',
	  'base',
	  'br',
	  'col',
	  'embed',
	  'hr',
	  'img',
	  'input',
	  'keygen',
	  'link',
	  'menuitem',
	  'meta',
	  'param',
	  'source',
	  'track',
	  'wbr'
	];

	/**
	 * List of all the html tags
	 * @const {Array}
	 * @see {@link https://github.com/sindresorhus/html-tags}
	 */
	const HTML_TAGS_LIST = uniq$1([
	  'a',
	  'abbr',
	  'address',
	  'article',
	  'aside',
	  'audio',
	  'b',
	  'bdi',
	  'bdo',
	  'blockquote',
	  'body',
	  'canvas',
	  'caption',
	  'cite',
	  'code',
	  'colgroup',
	  'datalist',
	  'dd',
	  'del',
	  'details',
	  'dfn',
	  'dialog',
	  'div',
	  'dl',
	  'dt',
	  'em',
	  'fieldset',
	  'figcaption',
	  'figure',
	  'footer',
	  'form',
	  'h1',
	  'h2',
	  'h3',
	  'h4',
	  'h5',
	  'h6',
	  'head',
	  'header',
	  'hgroup',
	  'html',
	  'i',
	  'iframe',
	  'ins',
	  'kbd',
	  'label',
	  'legend',
	  'main',
	  'map',
	  'mark',
	  'math',
	  'menu',
	  'nav',
	  'noscript',
	  'object',
	  'ol',
	  'optgroup',
	  'p',
	  'picture',
	  'pre',
	  'q',
	  'rb',
	  'rp',
	  'rt',
	  'rtc',
	  'ruby',
	  's',
	  'samp',
	  'script',
	  'section',
	  'select',
	  'slot',
	  'small',
	  'span',
	  'strong',
	  'style',
	  'sub',
	  'summary',
	  'sup',
	  'svg',
	  'table',
	  'tbody',
	  'td',
	  'template',
	  'tfoot',
	  'th',
	  'thead',
	  'time',
	  'title',
	  'tr',
	  'u',
	  'ul',
	  'var',
	  'video'
	]
	  .concat(VOID_HTML_TAGS_LIST)
	  .concat(HTML_ELEMENTS_HAVING_VALUE_ATTRIBUTE_LIST)
	).sort();

	/**
	 * List of all boolean HTML attributes
	 * @const {RegExp}
	 * @see {@link https://www.w3.org/TR/html5/infrastructure.html#sec-boolean-attributes}
	 */
	const BOOLEAN_ATTRIBUTES_LIST = [
	  'disabled',
	  'visible',
	  'checked',
	  'readonly',
	  'required',
	  'allowfullscreen',
	  'autofocus',
	  'autoplay',
	  'compact',
	  'controls',
	  'default',
	  'formnovalidate',
	  'hidden',
	  'ismap',
	  'itemscope',
	  'loop',
	  'multiple',
	  'muted',
	  'noresize',
	  'noshade',
	  'novalidate',
	  'nowrap',
	  'open',
	  'reversed',
	  'seamless',
	  'selected',
	  'sortable',
	  'truespeed',
	  'typemustmatch'
	];

	/**
	 * Join a list of items with the pipe symbol (usefull for regex list concatenation)
	 * @private
	 * @param   {Array} list - list of strings
	 * @returns {string} the list received joined with pipes
	 */
	function joinWithPipe(list) {
	  return list.join('|')
	}

	/**
	 * Convert list of strings to regex in order to test against it ignoring the cases
	 * @private
	 * @param   {...Array} lists - array of strings
	 * @returns {RegExp} regex that will match all the strings in the array received ignoring the cases
	 */
	function listsToRegex(...lists) {
	  return new RegExp(`^/?(?:${joinWithPipe(lists.map(joinWithPipe))})$`, 'i')
	}

	/**
	 * Regex matching all the html tags ignoring the cases
	 * @const {RegExp}
	 */
	listsToRegex(HTML_TAGS_LIST);

	/**
	 * Regex matching all the svg tags ignoring the cases
	 * @const {RegExp}
	 */
	listsToRegex(SVG_TAGS_LIST);

	/**
	 * Regex matching all the void html tags ignoring the cases
	 * @const {RegExp}
	 */
	listsToRegex(VOID_HTML_TAGS_LIST);

	/**
	 * Regex matching all the void svg tags ignoring the cases
	 * @const {RegExp}
	 */
	listsToRegex(VOID_SVG_TAGS_LIST);

	/**
	 * Regex matching all the html tags where the value tag is allowed
	 * @const {RegExp}
	 */
	listsToRegex(HTML_ELEMENTS_HAVING_VALUE_ATTRIBUTE_LIST);

	/**
	 * Regex matching all the boolean attributes
	 * @const {RegExp}
	 */
	listsToRegex(BOOLEAN_ATTRIBUTES_LIST);

	/*---------------------------------------------------------------------
	 * Tree builder for the riot tag parser.
	 *
	 * The output has a root property and separate arrays for `html`, `css`,
	 * and `js` tags.
	 *
	 * The root tag is included as first element in the `html` array.
	 * Script tags marked with "defer" are included in `html` instead `js`.
	 *
	 * - Mark SVG tags
	 * - Mark raw tags
	 * - Mark void tags
	 * - Split prefixes from expressions
	 * - Unescape escaped brackets and escape EOLs and backslashes
	 * - Compact whitespace (option `compact`) for non-raw tags
	 * - Create an array `parts` for text nodes and attributes
	 *
	 * Throws on unclosed tags or closing tags without start tag.
	 * Selfclosing and void tags has no nodes[] property.
	 */

	/**
	 * Escape the carriage return and the line feed from a string
	 * @param   {string} string - input string
	 * @returns {string} output string escaped
	 */
	function escapeReturn(string) {
	  return string
	    .replace(/\r/g, '\\r')
	    .replace(/\n/g, '\\n')
	}

	// check whether a tag has the 'src' attribute set like for example `<script src="">`
	const hasSrcAttribute = node => (node.attributes || []).some(attr => attr.name === 'src');

	/**
	 * Escape double slashes in a string
	 * @param   {string} string - input string
	 * @returns {string} output string escaped
	 */
	function escapeSlashes(string) {
	  return string.replace(/\\/g, '\\\\')
	}

	/**
	 * Replace the multiple spaces with only one
	 * @param   {string} string - input string
	 * @returns {string} string without trailing spaces
	 */
	function cleanSpaces(string) {
	  return string.replace(/\s+/g, ' ')
	}

	Object.seal({
	  get() {
	    const store = this.store;
	    // The real root tag is in store.root.nodes[0]
	    return {
	      [TEMPLATE_OUTPUT_NAME]: store.root.nodes[0],
	      [CSS_OUTPUT_NAME]: store[STYLE_TAG],
	      [JAVASCRIPT_OUTPUT_NAME]: store[JAVASCRIPT_TAG]
	    }
	  },

	  /**
	  * Process the current tag or text.
	  * @param {Object} node - Raw pseudo-node from the parser
	  * @returns {undefined} void function
	  */
	  push(node) {
	    const store = this.store;

	    switch (node.type) {
	    case COMMENT:
	      this.pushComment(store, node);
	      break
	    case TEXT$1:
	      this.pushText(store, node);
	      break
	    case TAG$1: {
	      const name = node.name;
	      const closingTagChar = '/';
	      const [firstChar] = name;

	      if (firstChar === closingTagChar && !node.isVoid) {
	        this.closeTag(store, node, name);
	      } else if (firstChar !== closingTagChar) {
	        this.openTag(store, node);
	      }
	      break
	    }
	    }
	  },
	  pushComment(store, node) {
	    const parent = store.last;

	    parent.nodes.push(node);
	  },
	  closeTag(store, node) {
	    const last = store.scryle || store.last;

	    last.end = node.end;

	    // update always the root node end position
	    if (store.root.nodes[0]) store.root.nodes[0].end = node.end;

	    if (store.scryle) {
	      store.scryle = null;
	    } else {
	      store.last = store.stack.pop();
	    }
	  },

	  openTag(store, node) {
	    const name = node.name;
	    const attrs = node.attributes;
	    const isCoreTag = (JAVASCRIPT_TAG === name && !hasSrcAttribute(node) || name === STYLE_TAG);

	    if (isCoreTag) {
	      // Only accept one of each
	      if (store[name]) {
	        panic$1(this.store.data, duplicatedNamedTag.replace('%1', name), node.start);
	      }

	      store[name] = node;
	      store.scryle = store[name];
	    } else {
	      // store.last holds the last tag pushed in the stack and this are
	      // non-void, non-empty tags, so we are sure the `lastTag` here
	      // have a `nodes` property.
	      const lastTag = store.last;
	      const newNode = node;

	      lastTag.nodes.push(newNode);

	      if (lastTag[IS_RAW] || RAW_TAGS.test(name)) {
	        node[IS_RAW] = true;
	      }

	      if (!node[IS_SELF_CLOSING] && !node[IS_VOID]) {
	        store.stack.push(lastTag);
	        newNode.nodes = [];
	        store.last = newNode;
	      }
	    }

	    if (attrs) {
	      this.attrs(attrs);
	    }
	  },
	  attrs(attributes) {
	    attributes.forEach(attr => {
	      if (attr.value) {
	        this.split(attr, attr.value, attr.valueStart, true);
	      }
	    });
	  },
	  pushText(store, node) {
	    const text = node.text;
	    const empty = !/\S/.test(text);
	    const scryle = store.scryle;
	    if (!scryle) {
	      // store.last always have a nodes property
	      const parent = store.last;

	      const pack = this.compact && !parent[IS_RAW];
	      if (pack && empty) {
	        return
	      }
	      this.split(node, text, node.start, pack);
	      parent.nodes.push(node);
	    } else if (!empty) {
	      scryle.text = node;
	    }
	  },
	  split(node, source, start, pack) {
	    const expressions = node.expressions;
	    const parts = [];

	    if (expressions) {
	      let pos = 0;

	      expressions.forEach(expr => {
	        const text = source.slice(pos, expr.start - start);
	        const code = expr.text;
	        parts.push(this.sanitise(node, text, pack), escapeReturn(escapeSlashes(code).trim()));
	        pos = expr.end - start;
	      });

	      if (pos < node.end) {
	        parts.push(this.sanitise(node, source.slice(pos), pack));
	      }
	    } else {
	      parts[0] = this.sanitise(node, source, pack);
	    }

	    node.parts = parts.filter(p => p); // remove the empty strings
	  },
	  // unescape escaped brackets and split prefixes of expressions
	  sanitise(node, text, pack) {
	    let rep = node.unescape;
	    if (rep) {
	      let idx = 0;
	      rep = `\\${rep}`;
	      while ((idx = text.indexOf(rep, idx)) !== -1) {
	        text = text.substr(0, idx) + text.substr(idx + 1);
	        idx++;
	      }
	    }

	    text = escapeSlashes(text);

	    return pack ? cleanSpaces(text) : escapeReturn(text)
	  }
	});

	/**
	 * Expose the internal constants
	 */
	const constants$2 = c$1;

	const BINDING_TYPES = 'bindingTypes';


	const EXPRESSION_TYPES$1 = 'expressionTypes';

	const TEMPLATE_FN = 'template';
	const SCOPE = '_scope';
	const GET_COMPONENT_FN = 'getComponent';

	// DOM directives
	const IF_DIRECTIVE = 'if';
	const EACH_DIRECTIVE = 'each';
	const KEY_ATTRIBUTE = 'key';
	const IS_DIRECTIVE$1 = 'is';

	// Riot Parser constants
	constants$2.IS_RAW;
	constants$2.IS_VOID;
	constants$2.IS_CUSTOM;
	constants$2.IS_BOOLEAN;
	constants$2.IS_SPREAD;

	compose$1(Boolean, findIfAttribute);
	compose$1(Boolean, findEachAttribute);
	compose$1(Boolean, findIsAttribute);
	compose$1(Boolean, findKeyAttribute);

	/**
	 * Find the attribute node
	 * @param   { string } name -  name of the attribute we want to find
	 * @param   { riotParser.nodeTypes.TAG } node - a tag node
	 * @returns { riotParser.nodeTypes.ATTR } attribute node
	 */
	function findAttribute(name, node) {
	  return node.attributes && node.attributes.find(attr => getName$3(attr) === name)
	}

	function findIfAttribute(node) {
	  return findAttribute(IF_DIRECTIVE, node)
	}

	function findEachAttribute(node) {
	  return findAttribute(EACH_DIRECTIVE, node)
	}

	function findKeyAttribute(node) {
	  return findAttribute(KEY_ATTRIBUTE, node)
	}

	function findIsAttribute(node) {
	  return findAttribute(IS_DIRECTIVE$1, node)
	}

	builders.identifier(SCOPE);
	const getName$3 = node => node && node.name ? node.name : node;
	compose$1(builders.literal, getName$3);

	Object.freeze({
	  html: [],
	  bindings: [],
	  parent: null
	});

	[
	  TEMPLATE_FN,
	  EXPRESSION_TYPES$1,
	  BINDING_TYPES,
	  GET_COMPONENT_FN
	].map(builders.identifier);

	var lib$v = {};

	var file$2 = {};

	var lib$u = {};

	var lib$t = {};

	var context$2 = {};

	var path$2 = {};

	var virtualTypes$2 = {};

	var lib$s = {};

	var isReactComponent$1 = {};

	var buildMatchMemberExpression$1 = {};

	var matchesPattern$3 = {};

	var generated$5 = {};

	var shallowEqual$1 = {};

	Object.defineProperty(shallowEqual$1, "__esModule", {
	  value: true
	});
	shallowEqual$1.default = shallowEqual;

	function shallowEqual(actual, expected) {
	  const keys = Object.keys(expected);

	  for (const key of keys) {
	    if (actual[key] !== expected[key]) {
	      return false;
	    }
	  }

	  return true;
	}

	Object.defineProperty(generated$5, "__esModule", {
	  value: true
	});
	generated$5.isArrayExpression = isArrayExpression$2;
	generated$5.isAssignmentExpression = isAssignmentExpression$3;
	generated$5.isBinaryExpression = isBinaryExpression$1;
	generated$5.isInterpreterDirective = isInterpreterDirective;
	generated$5.isDirective = isDirective$1;
	generated$5.isDirectiveLiteral = isDirectiveLiteral;
	generated$5.isBlockStatement = isBlockStatement$2;
	generated$5.isBreakStatement = isBreakStatement;
	generated$5.isCallExpression = isCallExpression$5;
	generated$5.isCatchClause = isCatchClause;
	generated$5.isConditionalExpression = isConditionalExpression$1;
	generated$5.isContinueStatement = isContinueStatement;
	generated$5.isDebuggerStatement = isDebuggerStatement;
	generated$5.isDoWhileStatement = isDoWhileStatement;
	generated$5.isEmptyStatement = isEmptyStatement$1;
	generated$5.isExpressionStatement = isExpressionStatement$3;
	generated$5.isFile = isFile$1;
	generated$5.isForInStatement = isForInStatement$1;
	generated$5.isForStatement = isForStatement$3;
	generated$5.isFunctionDeclaration = isFunctionDeclaration$1;
	generated$5.isFunctionExpression = isFunctionExpression;
	generated$5.isIdentifier = isIdentifier$b;
	generated$5.isIfStatement = isIfStatement$2;
	generated$5.isLabeledStatement = isLabeledStatement;
	generated$5.isStringLiteral = isStringLiteral$4;
	generated$5.isNumericLiteral = isNumericLiteral;
	generated$5.isNullLiteral = isNullLiteral$1;
	generated$5.isBooleanLiteral = isBooleanLiteral;
	generated$5.isRegExpLiteral = isRegExpLiteral$1;
	generated$5.isLogicalExpression = isLogicalExpression$1;
	generated$5.isMemberExpression = isMemberExpression$7;
	generated$5.isNewExpression = isNewExpression$4;
	generated$5.isProgram = isProgram$2;
	generated$5.isObjectExpression = isObjectExpression$2;
	generated$5.isObjectMethod = isObjectMethod$1;
	generated$5.isObjectProperty = isObjectProperty$1;
	generated$5.isRestElement = isRestElement$1;
	generated$5.isReturnStatement = isReturnStatement$1;
	generated$5.isSequenceExpression = isSequenceExpression$1;
	generated$5.isParenthesizedExpression = isParenthesizedExpression;
	generated$5.isSwitchCase = isSwitchCase;
	generated$5.isSwitchStatement = isSwitchStatement$1;
	generated$5.isThisExpression = isThisExpression$1;
	generated$5.isThrowStatement = isThrowStatement$1;
	generated$5.isTryStatement = isTryStatement;
	generated$5.isUnaryExpression = isUnaryExpression$1;
	generated$5.isUpdateExpression = isUpdateExpression$1;
	generated$5.isVariableDeclaration = isVariableDeclaration$3;
	generated$5.isVariableDeclarator = isVariableDeclarator$2;
	generated$5.isWhileStatement = isWhileStatement$1;
	generated$5.isWithStatement = isWithStatement;
	generated$5.isAssignmentPattern = isAssignmentPattern$2;
	generated$5.isArrayPattern = isArrayPattern;
	generated$5.isArrowFunctionExpression = isArrowFunctionExpression$1;
	generated$5.isClassBody = isClassBody$1;
	generated$5.isClassExpression = isClassExpression$1;
	generated$5.isClassDeclaration = isClassDeclaration$3;
	generated$5.isExportAllDeclaration = isExportAllDeclaration$1;
	generated$5.isExportDefaultDeclaration = isExportDefaultDeclaration$3;
	generated$5.isExportNamedDeclaration = isExportNamedDeclaration$2;
	generated$5.isExportSpecifier = isExportSpecifier;
	generated$5.isForOfStatement = isForOfStatement$1;
	generated$5.isImportDeclaration = isImportDeclaration$2;
	generated$5.isImportDefaultSpecifier = isImportDefaultSpecifier$1;
	generated$5.isImportNamespaceSpecifier = isImportNamespaceSpecifier$1;
	generated$5.isImportSpecifier = isImportSpecifier$1;
	generated$5.isMetaProperty = isMetaProperty;
	generated$5.isClassMethod = isClassMethod;
	generated$5.isObjectPattern = isObjectPattern$1;
	generated$5.isSpreadElement = isSpreadElement$1;
	generated$5.isSuper = isSuper$1;
	generated$5.isTaggedTemplateExpression = isTaggedTemplateExpression$2;
	generated$5.isTemplateElement = isTemplateElement;
	generated$5.isTemplateLiteral = isTemplateLiteral$2;
	generated$5.isYieldExpression = isYieldExpression$1;
	generated$5.isAwaitExpression = isAwaitExpression$1;
	generated$5.isImport = isImport;
	generated$5.isBigIntLiteral = isBigIntLiteral;
	generated$5.isExportNamespaceSpecifier = isExportNamespaceSpecifier$1;
	generated$5.isOptionalMemberExpression = isOptionalMemberExpression$3;
	generated$5.isOptionalCallExpression = isOptionalCallExpression$3;
	generated$5.isClassProperty = isClassProperty;
	generated$5.isClassPrivateProperty = isClassPrivateProperty;
	generated$5.isClassPrivateMethod = isClassPrivateMethod;
	generated$5.isPrivateName = isPrivateName;
	generated$5.isAnyTypeAnnotation = isAnyTypeAnnotation$1;
	generated$5.isArrayTypeAnnotation = isArrayTypeAnnotation$1;
	generated$5.isBooleanTypeAnnotation = isBooleanTypeAnnotation$1;
	generated$5.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
	generated$5.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
	generated$5.isClassImplements = isClassImplements;
	generated$5.isDeclareClass = isDeclareClass;
	generated$5.isDeclareFunction = isDeclareFunction;
	generated$5.isDeclareInterface = isDeclareInterface;
	generated$5.isDeclareModule = isDeclareModule;
	generated$5.isDeclareModuleExports = isDeclareModuleExports;
	generated$5.isDeclareTypeAlias = isDeclareTypeAlias;
	generated$5.isDeclareOpaqueType = isDeclareOpaqueType;
	generated$5.isDeclareVariable = isDeclareVariable;
	generated$5.isDeclareExportDeclaration = isDeclareExportDeclaration;
	generated$5.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;
	generated$5.isDeclaredPredicate = isDeclaredPredicate;
	generated$5.isExistsTypeAnnotation = isExistsTypeAnnotation;
	generated$5.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
	generated$5.isFunctionTypeParam = isFunctionTypeParam;
	generated$5.isGenericTypeAnnotation = isGenericTypeAnnotation$1;
	generated$5.isInferredPredicate = isInferredPredicate;
	generated$5.isInterfaceExtends = isInterfaceExtends;
	generated$5.isInterfaceDeclaration = isInterfaceDeclaration;
	generated$5.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;
	generated$5.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation$1;
	generated$5.isMixedTypeAnnotation = isMixedTypeAnnotation$1;
	generated$5.isEmptyTypeAnnotation = isEmptyTypeAnnotation$1;
	generated$5.isNullableTypeAnnotation = isNullableTypeAnnotation$1;
	generated$5.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
	generated$5.isNumberTypeAnnotation = isNumberTypeAnnotation$1;
	generated$5.isObjectTypeAnnotation = isObjectTypeAnnotation;
	generated$5.isObjectTypeInternalSlot = isObjectTypeInternalSlot;
	generated$5.isObjectTypeCallProperty = isObjectTypeCallProperty;
	generated$5.isObjectTypeIndexer = isObjectTypeIndexer;
	generated$5.isObjectTypeProperty = isObjectTypeProperty;
	generated$5.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
	generated$5.isOpaqueType = isOpaqueType;
	generated$5.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
	generated$5.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
	generated$5.isStringTypeAnnotation = isStringTypeAnnotation$1;
	generated$5.isSymbolTypeAnnotation = isSymbolTypeAnnotation;
	generated$5.isThisTypeAnnotation = isThisTypeAnnotation;
	generated$5.isTupleTypeAnnotation = isTupleTypeAnnotation;
	generated$5.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
	generated$5.isTypeAlias = isTypeAlias;
	generated$5.isTypeAnnotation = isTypeAnnotation$2;
	generated$5.isTypeCastExpression = isTypeCastExpression;
	generated$5.isTypeParameter = isTypeParameter;
	generated$5.isTypeParameterDeclaration = isTypeParameterDeclaration;
	generated$5.isTypeParameterInstantiation = isTypeParameterInstantiation;
	generated$5.isUnionTypeAnnotation = isUnionTypeAnnotation$2;
	generated$5.isVariance = isVariance;
	generated$5.isVoidTypeAnnotation = isVoidTypeAnnotation$1;
	generated$5.isEnumDeclaration = isEnumDeclaration;
	generated$5.isEnumBooleanBody = isEnumBooleanBody;
	generated$5.isEnumNumberBody = isEnumNumberBody;
	generated$5.isEnumStringBody = isEnumStringBody;
	generated$5.isEnumSymbolBody = isEnumSymbolBody;
	generated$5.isEnumBooleanMember = isEnumBooleanMember;
	generated$5.isEnumNumberMember = isEnumNumberMember;
	generated$5.isEnumStringMember = isEnumStringMember;
	generated$5.isEnumDefaultedMember = isEnumDefaultedMember;
	generated$5.isIndexedAccessType = isIndexedAccessType$1;
	generated$5.isOptionalIndexedAccessType = isOptionalIndexedAccessType;
	generated$5.isJSXAttribute = isJSXAttribute;
	generated$5.isJSXClosingElement = isJSXClosingElement;
	generated$5.isJSXElement = isJSXElement;
	generated$5.isJSXEmptyExpression = isJSXEmptyExpression;
	generated$5.isJSXExpressionContainer = isJSXExpressionContainer;
	generated$5.isJSXSpreadChild = isJSXSpreadChild;
	generated$5.isJSXIdentifier = isJSXIdentifier$2;
	generated$5.isJSXMemberExpression = isJSXMemberExpression$1;
	generated$5.isJSXNamespacedName = isJSXNamespacedName;
	generated$5.isJSXOpeningElement = isJSXOpeningElement;
	generated$5.isJSXSpreadAttribute = isJSXSpreadAttribute;
	generated$5.isJSXText = isJSXText;
	generated$5.isJSXFragment = isJSXFragment;
	generated$5.isJSXOpeningFragment = isJSXOpeningFragment;
	generated$5.isJSXClosingFragment = isJSXClosingFragment;
	generated$5.isNoop = isNoop;
	generated$5.isPlaceholder = isPlaceholder$1;
	generated$5.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;
	generated$5.isArgumentPlaceholder = isArgumentPlaceholder;
	generated$5.isBindExpression = isBindExpression;
	generated$5.isImportAttribute = isImportAttribute;
	generated$5.isDecorator = isDecorator;
	generated$5.isDoExpression = isDoExpression;
	generated$5.isExportDefaultSpecifier = isExportDefaultSpecifier$1;
	generated$5.isRecordExpression = isRecordExpression;
	generated$5.isTupleExpression = isTupleExpression;
	generated$5.isDecimalLiteral = isDecimalLiteral;
	generated$5.isStaticBlock = isStaticBlock;
	generated$5.isModuleExpression = isModuleExpression;
	generated$5.isTopicReference = isTopicReference;
	generated$5.isPipelineTopicExpression = isPipelineTopicExpression;
	generated$5.isPipelineBareFunction = isPipelineBareFunction;
	generated$5.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;
	generated$5.isTSParameterProperty = isTSParameterProperty;
	generated$5.isTSDeclareFunction = isTSDeclareFunction;
	generated$5.isTSDeclareMethod = isTSDeclareMethod;
	generated$5.isTSQualifiedName = isTSQualifiedName;
	generated$5.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;
	generated$5.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;
	generated$5.isTSPropertySignature = isTSPropertySignature;
	generated$5.isTSMethodSignature = isTSMethodSignature;
	generated$5.isTSIndexSignature = isTSIndexSignature;
	generated$5.isTSAnyKeyword = isTSAnyKeyword;
	generated$5.isTSBooleanKeyword = isTSBooleanKeyword;
	generated$5.isTSBigIntKeyword = isTSBigIntKeyword;
	generated$5.isTSIntrinsicKeyword = isTSIntrinsicKeyword;
	generated$5.isTSNeverKeyword = isTSNeverKeyword;
	generated$5.isTSNullKeyword = isTSNullKeyword;
	generated$5.isTSNumberKeyword = isTSNumberKeyword;
	generated$5.isTSObjectKeyword = isTSObjectKeyword;
	generated$5.isTSStringKeyword = isTSStringKeyword;
	generated$5.isTSSymbolKeyword = isTSSymbolKeyword;
	generated$5.isTSUndefinedKeyword = isTSUndefinedKeyword;
	generated$5.isTSUnknownKeyword = isTSUnknownKeyword;
	generated$5.isTSVoidKeyword = isTSVoidKeyword;
	generated$5.isTSThisType = isTSThisType;
	generated$5.isTSFunctionType = isTSFunctionType;
	generated$5.isTSConstructorType = isTSConstructorType;
	generated$5.isTSTypeReference = isTSTypeReference;
	generated$5.isTSTypePredicate = isTSTypePredicate;
	generated$5.isTSTypeQuery = isTSTypeQuery;
	generated$5.isTSTypeLiteral = isTSTypeLiteral;
	generated$5.isTSArrayType = isTSArrayType$1;
	generated$5.isTSTupleType = isTSTupleType;
	generated$5.isTSOptionalType = isTSOptionalType$1;
	generated$5.isTSRestType = isTSRestType$1;
	generated$5.isTSNamedTupleMember = isTSNamedTupleMember;
	generated$5.isTSUnionType = isTSUnionType$1;
	generated$5.isTSIntersectionType = isTSIntersectionType$1;
	generated$5.isTSConditionalType = isTSConditionalType;
	generated$5.isTSInferType = isTSInferType;
	generated$5.isTSParenthesizedType = isTSParenthesizedType;
	generated$5.isTSTypeOperator = isTSTypeOperator;
	generated$5.isTSIndexedAccessType = isTSIndexedAccessType;
	generated$5.isTSMappedType = isTSMappedType;
	generated$5.isTSLiteralType = isTSLiteralType;
	generated$5.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;
	generated$5.isTSInterfaceDeclaration = isTSInterfaceDeclaration;
	generated$5.isTSInterfaceBody = isTSInterfaceBody;
	generated$5.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;
	generated$5.isTSAsExpression = isTSAsExpression$1;
	generated$5.isTSTypeAssertion = isTSTypeAssertion$1;
	generated$5.isTSEnumDeclaration = isTSEnumDeclaration;
	generated$5.isTSEnumMember = isTSEnumMember;
	generated$5.isTSModuleDeclaration = isTSModuleDeclaration;
	generated$5.isTSModuleBlock = isTSModuleBlock;
	generated$5.isTSImportType = isTSImportType;
	generated$5.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;
	generated$5.isTSExternalModuleReference = isTSExternalModuleReference;
	generated$5.isTSNonNullExpression = isTSNonNullExpression$1;
	generated$5.isTSExportAssignment = isTSExportAssignment;
	generated$5.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;
	generated$5.isTSTypeAnnotation = isTSTypeAnnotation$1;
	generated$5.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;
	generated$5.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;
	generated$5.isTSTypeParameter = isTSTypeParameter;
	generated$5.isExpression = isExpression$4;
	generated$5.isBinary = isBinary$3;
	generated$5.isScopable = isScopable;
	generated$5.isBlockParent = isBlockParent;
	generated$5.isBlock = isBlock;
	generated$5.isStatement = isStatement$6;
	generated$5.isTerminatorless = isTerminatorless;
	generated$5.isCompletionStatement = isCompletionStatement;
	generated$5.isConditional = isConditional$1;
	generated$5.isLoop = isLoop;
	generated$5.isWhile = isWhile;
	generated$5.isExpressionWrapper = isExpressionWrapper;
	generated$5.isFor = isFor$2;
	generated$5.isForXStatement = isForXStatement$1;
	generated$5.isFunction = isFunction$5;
	generated$5.isFunctionParent = isFunctionParent;
	generated$5.isPureish = isPureish$1;
	generated$5.isDeclaration = isDeclaration$1;
	generated$5.isPatternLike = isPatternLike;
	generated$5.isLVal = isLVal;
	generated$5.isTSEntityName = isTSEntityName;
	generated$5.isLiteral = isLiteral$5;
	generated$5.isImmutable = isImmutable$2;
	generated$5.isUserWhitespacable = isUserWhitespacable;
	generated$5.isMethod = isMethod$1;
	generated$5.isObjectMember = isObjectMember;
	generated$5.isProperty = isProperty$1;
	generated$5.isUnaryLike = isUnaryLike$1;
	generated$5.isPattern = isPattern;
	generated$5.isClass = isClass$1;
	generated$5.isModuleDeclaration = isModuleDeclaration$1;
	generated$5.isExportDeclaration = isExportDeclaration$2;
	generated$5.isModuleSpecifier = isModuleSpecifier$1;
	generated$5.isPrivate = isPrivate;
	generated$5.isFlow = isFlow$1;
	generated$5.isFlowType = isFlowType;
	generated$5.isFlowBaseAnnotation = isFlowBaseAnnotation$1;
	generated$5.isFlowDeclaration = isFlowDeclaration;
	generated$5.isFlowPredicate = isFlowPredicate;
	generated$5.isEnumBody = isEnumBody;
	generated$5.isEnumMember = isEnumMember;
	generated$5.isJSX = isJSX;
	generated$5.isTSTypeElement = isTSTypeElement;
	generated$5.isTSType = isTSType;
	generated$5.isTSBaseType = isTSBaseType;
	generated$5.isNumberLiteral = isNumberLiteral;
	generated$5.isRegexLiteral = isRegexLiteral;
	generated$5.isRestProperty = isRestProperty;
	generated$5.isSpreadProperty = isSpreadProperty;

	var _shallowEqual$1 = shallowEqual$1;

	function isArrayExpression$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ArrayExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isAssignmentExpression$3(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "AssignmentExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isBinaryExpression$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "BinaryExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isInterpreterDirective(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "InterpreterDirective") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDirective$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "Directive") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDirectiveLiteral(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DirectiveLiteral") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isBlockStatement$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "BlockStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isBreakStatement(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "BreakStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isCallExpression$5(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "CallExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isCatchClause(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "CatchClause") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isConditionalExpression$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ConditionalExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isContinueStatement(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ContinueStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDebuggerStatement(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DebuggerStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDoWhileStatement(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DoWhileStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isEmptyStatement$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "EmptyStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isExpressionStatement$3(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ExpressionStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isFile$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "File") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isForInStatement$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ForInStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isForStatement$3(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ForStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isFunctionDeclaration$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "FunctionDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isFunctionExpression(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "FunctionExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isIdentifier$b(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "Identifier") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isIfStatement$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "IfStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isLabeledStatement(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "LabeledStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isStringLiteral$4(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "StringLiteral") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isNumericLiteral(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "NumericLiteral") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isNullLiteral$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "NullLiteral") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isBooleanLiteral(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "BooleanLiteral") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isRegExpLiteral$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "RegExpLiteral") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isLogicalExpression$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "LogicalExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isMemberExpression$7(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "MemberExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isNewExpression$4(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "NewExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isProgram$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "Program") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isObjectExpression$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ObjectExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isObjectMethod$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ObjectMethod") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isObjectProperty$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ObjectProperty") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isRestElement$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "RestElement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isReturnStatement$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ReturnStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isSequenceExpression$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "SequenceExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isParenthesizedExpression(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ParenthesizedExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isSwitchCase(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "SwitchCase") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isSwitchStatement$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "SwitchStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isThisExpression$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ThisExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isThrowStatement$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ThrowStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTryStatement(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TryStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isUnaryExpression$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "UnaryExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isUpdateExpression$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "UpdateExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isVariableDeclaration$3(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "VariableDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isVariableDeclarator$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "VariableDeclarator") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isWhileStatement$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "WhileStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isWithStatement(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "WithStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isAssignmentPattern$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "AssignmentPattern") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isArrayPattern(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ArrayPattern") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isArrowFunctionExpression$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ArrowFunctionExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isClassBody$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ClassBody") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isClassExpression$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ClassExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isClassDeclaration$3(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ClassDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isExportAllDeclaration$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ExportAllDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isExportDefaultDeclaration$3(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ExportDefaultDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isExportNamedDeclaration$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ExportNamedDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isExportSpecifier(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ExportSpecifier") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isForOfStatement$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ForOfStatement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isImportDeclaration$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ImportDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isImportDefaultSpecifier$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ImportDefaultSpecifier") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isImportNamespaceSpecifier$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ImportNamespaceSpecifier") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isImportSpecifier$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ImportSpecifier") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isMetaProperty(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "MetaProperty") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isClassMethod(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ClassMethod") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isObjectPattern$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ObjectPattern") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isSpreadElement$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "SpreadElement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isSuper$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "Super") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTaggedTemplateExpression$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TaggedTemplateExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTemplateElement(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TemplateElement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTemplateLiteral$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TemplateLiteral") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isYieldExpression$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "YieldExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isAwaitExpression$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "AwaitExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isImport(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "Import") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isBigIntLiteral(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "BigIntLiteral") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isExportNamespaceSpecifier$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ExportNamespaceSpecifier") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isOptionalMemberExpression$3(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "OptionalMemberExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isOptionalCallExpression$3(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "OptionalCallExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isClassProperty(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ClassProperty") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isClassPrivateProperty(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ClassPrivateProperty") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isClassPrivateMethod(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ClassPrivateMethod") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isPrivateName(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "PrivateName") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isAnyTypeAnnotation$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "AnyTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isArrayTypeAnnotation$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ArrayTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isBooleanTypeAnnotation$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "BooleanTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isBooleanLiteralTypeAnnotation(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "BooleanLiteralTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isNullLiteralTypeAnnotation(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "NullLiteralTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isClassImplements(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ClassImplements") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDeclareClass(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DeclareClass") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDeclareFunction(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DeclareFunction") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDeclareInterface(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DeclareInterface") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDeclareModule(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DeclareModule") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDeclareModuleExports(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DeclareModuleExports") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDeclareTypeAlias(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DeclareTypeAlias") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDeclareOpaqueType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DeclareOpaqueType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDeclareVariable(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DeclareVariable") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDeclareExportDeclaration(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DeclareExportDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDeclareExportAllDeclaration(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DeclareExportAllDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDeclaredPredicate(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DeclaredPredicate") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isExistsTypeAnnotation(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ExistsTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isFunctionTypeAnnotation(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "FunctionTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isFunctionTypeParam(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "FunctionTypeParam") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isGenericTypeAnnotation$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "GenericTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isInferredPredicate(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "InferredPredicate") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isInterfaceExtends(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "InterfaceExtends") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isInterfaceDeclaration(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "InterfaceDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isInterfaceTypeAnnotation(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "InterfaceTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isIntersectionTypeAnnotation$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "IntersectionTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isMixedTypeAnnotation$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "MixedTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isEmptyTypeAnnotation$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "EmptyTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isNullableTypeAnnotation$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "NullableTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isNumberLiteralTypeAnnotation(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "NumberLiteralTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isNumberTypeAnnotation$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "NumberTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isObjectTypeAnnotation(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ObjectTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isObjectTypeInternalSlot(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ObjectTypeInternalSlot") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isObjectTypeCallProperty(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ObjectTypeCallProperty") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isObjectTypeIndexer(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ObjectTypeIndexer") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isObjectTypeProperty(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ObjectTypeProperty") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isObjectTypeSpreadProperty(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ObjectTypeSpreadProperty") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isOpaqueType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "OpaqueType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isQualifiedTypeIdentifier(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "QualifiedTypeIdentifier") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isStringLiteralTypeAnnotation(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "StringLiteralTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isStringTypeAnnotation$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "StringTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isSymbolTypeAnnotation(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "SymbolTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isThisTypeAnnotation(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ThisTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTupleTypeAnnotation(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TupleTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTypeofTypeAnnotation(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TypeofTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTypeAlias(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TypeAlias") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTypeAnnotation$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTypeCastExpression(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TypeCastExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTypeParameter(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TypeParameter") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTypeParameterDeclaration(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TypeParameterDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTypeParameterInstantiation(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TypeParameterInstantiation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isUnionTypeAnnotation$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "UnionTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isVariance(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "Variance") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isVoidTypeAnnotation$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "VoidTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isEnumDeclaration(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "EnumDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isEnumBooleanBody(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "EnumBooleanBody") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isEnumNumberBody(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "EnumNumberBody") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isEnumStringBody(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "EnumStringBody") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isEnumSymbolBody(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "EnumSymbolBody") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isEnumBooleanMember(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "EnumBooleanMember") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isEnumNumberMember(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "EnumNumberMember") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isEnumStringMember(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "EnumStringMember") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isEnumDefaultedMember(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "EnumDefaultedMember") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isIndexedAccessType$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "IndexedAccessType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isOptionalIndexedAccessType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "OptionalIndexedAccessType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSXAttribute(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "JSXAttribute") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSXClosingElement(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "JSXClosingElement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSXElement(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "JSXElement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSXEmptyExpression(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "JSXEmptyExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSXExpressionContainer(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "JSXExpressionContainer") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSXSpreadChild(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "JSXSpreadChild") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSXIdentifier$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "JSXIdentifier") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSXMemberExpression$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "JSXMemberExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSXNamespacedName(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "JSXNamespacedName") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSXOpeningElement(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "JSXOpeningElement") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSXSpreadAttribute(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "JSXSpreadAttribute") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSXText(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "JSXText") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSXFragment(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "JSXFragment") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSXOpeningFragment(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "JSXOpeningFragment") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSXClosingFragment(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "JSXClosingFragment") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isNoop(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "Noop") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isPlaceholder$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "Placeholder") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isV8IntrinsicIdentifier(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "V8IntrinsicIdentifier") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isArgumentPlaceholder(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ArgumentPlaceholder") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isBindExpression(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "BindExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isImportAttribute(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ImportAttribute") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDecorator(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "Decorator") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDoExpression(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DoExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isExportDefaultSpecifier$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ExportDefaultSpecifier") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isRecordExpression(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "RecordExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTupleExpression(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TupleExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDecimalLiteral(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "DecimalLiteral") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isStaticBlock(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "StaticBlock") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isModuleExpression(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "ModuleExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTopicReference(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TopicReference") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isPipelineTopicExpression(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "PipelineTopicExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isPipelineBareFunction(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "PipelineBareFunction") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isPipelinePrimaryTopicReference(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "PipelinePrimaryTopicReference") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSParameterProperty(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSParameterProperty") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSDeclareFunction(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSDeclareFunction") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSDeclareMethod(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSDeclareMethod") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSQualifiedName(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSQualifiedName") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSCallSignatureDeclaration(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSCallSignatureDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSConstructSignatureDeclaration(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSConstructSignatureDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSPropertySignature(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSPropertySignature") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSMethodSignature(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSMethodSignature") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSIndexSignature(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSIndexSignature") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSAnyKeyword(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSAnyKeyword") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSBooleanKeyword(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSBooleanKeyword") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSBigIntKeyword(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSBigIntKeyword") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSIntrinsicKeyword(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSIntrinsicKeyword") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSNeverKeyword(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSNeverKeyword") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSNullKeyword(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSNullKeyword") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSNumberKeyword(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSNumberKeyword") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSObjectKeyword(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSObjectKeyword") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSStringKeyword(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSStringKeyword") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSSymbolKeyword(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSSymbolKeyword") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSUndefinedKeyword(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSUndefinedKeyword") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSUnknownKeyword(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSUnknownKeyword") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSVoidKeyword(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSVoidKeyword") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSThisType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSThisType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSFunctionType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSFunctionType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSConstructorType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSConstructorType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSTypeReference(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSTypeReference") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSTypePredicate(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSTypePredicate") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSTypeQuery(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSTypeQuery") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSTypeLiteral(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSTypeLiteral") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSArrayType$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSArrayType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSTupleType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSTupleType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSOptionalType$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSOptionalType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSRestType$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSRestType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSNamedTupleMember(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSNamedTupleMember") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSUnionType$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSUnionType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSIntersectionType$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSIntersectionType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSConditionalType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSConditionalType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSInferType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSInferType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSParenthesizedType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSParenthesizedType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSTypeOperator(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSTypeOperator") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSIndexedAccessType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSIndexedAccessType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSMappedType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSMappedType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSLiteralType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSLiteralType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSExpressionWithTypeArguments(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSExpressionWithTypeArguments") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSInterfaceDeclaration(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSInterfaceDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSInterfaceBody(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSInterfaceBody") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSTypeAliasDeclaration(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSTypeAliasDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSAsExpression$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSAsExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSTypeAssertion$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSTypeAssertion") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSEnumDeclaration(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSEnumDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSEnumMember(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSEnumMember") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSModuleDeclaration(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSModuleDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSModuleBlock(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSModuleBlock") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSImportType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSImportType") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSImportEqualsDeclaration(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSImportEqualsDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSExternalModuleReference(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSExternalModuleReference") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSNonNullExpression$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSNonNullExpression") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSExportAssignment(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSExportAssignment") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSNamespaceExportDeclaration(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSNamespaceExportDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSTypeAnnotation$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSTypeAnnotation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSTypeParameterInstantiation(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSTypeParameterInstantiation") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSTypeParameterDeclaration(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSTypeParameterDeclaration") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSTypeParameter(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "TSTypeParameter") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isExpression$4(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("ArrayExpression" === nodeType || "AssignmentExpression" === nodeType || "BinaryExpression" === nodeType || "CallExpression" === nodeType || "ConditionalExpression" === nodeType || "FunctionExpression" === nodeType || "Identifier" === nodeType || "StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "RegExpLiteral" === nodeType || "LogicalExpression" === nodeType || "MemberExpression" === nodeType || "NewExpression" === nodeType || "ObjectExpression" === nodeType || "SequenceExpression" === nodeType || "ParenthesizedExpression" === nodeType || "ThisExpression" === nodeType || "UnaryExpression" === nodeType || "UpdateExpression" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassExpression" === nodeType || "MetaProperty" === nodeType || "Super" === nodeType || "TaggedTemplateExpression" === nodeType || "TemplateLiteral" === nodeType || "YieldExpression" === nodeType || "AwaitExpression" === nodeType || "Import" === nodeType || "BigIntLiteral" === nodeType || "OptionalMemberExpression" === nodeType || "OptionalCallExpression" === nodeType || "TypeCastExpression" === nodeType || "JSXElement" === nodeType || "JSXFragment" === nodeType || "BindExpression" === nodeType || "DoExpression" === nodeType || "RecordExpression" === nodeType || "TupleExpression" === nodeType || "DecimalLiteral" === nodeType || "ModuleExpression" === nodeType || "TopicReference" === nodeType || "PipelineTopicExpression" === nodeType || "PipelineBareFunction" === nodeType || "PipelinePrimaryTopicReference" === nodeType || "TSAsExpression" === nodeType || "TSTypeAssertion" === nodeType || "TSNonNullExpression" === nodeType || nodeType === "Placeholder" && ("Expression" === node.expectedNode || "Identifier" === node.expectedNode || "StringLiteral" === node.expectedNode)) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isBinary$3(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("BinaryExpression" === nodeType || "LogicalExpression" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isScopable(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("BlockStatement" === nodeType || "CatchClause" === nodeType || "DoWhileStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "Program" === nodeType || "ObjectMethod" === nodeType || "SwitchStatement" === nodeType || "WhileStatement" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassExpression" === nodeType || "ClassDeclaration" === nodeType || "ForOfStatement" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType || "StaticBlock" === nodeType || "TSModuleBlock" === nodeType || nodeType === "Placeholder" && "BlockStatement" === node.expectedNode) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isBlockParent(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("BlockStatement" === nodeType || "CatchClause" === nodeType || "DoWhileStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "Program" === nodeType || "ObjectMethod" === nodeType || "SwitchStatement" === nodeType || "WhileStatement" === nodeType || "ArrowFunctionExpression" === nodeType || "ForOfStatement" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType || "StaticBlock" === nodeType || "TSModuleBlock" === nodeType || nodeType === "Placeholder" && "BlockStatement" === node.expectedNode) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isBlock(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("BlockStatement" === nodeType || "Program" === nodeType || "TSModuleBlock" === nodeType || nodeType === "Placeholder" && "BlockStatement" === node.expectedNode) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isStatement$6(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("BlockStatement" === nodeType || "BreakStatement" === nodeType || "ContinueStatement" === nodeType || "DebuggerStatement" === nodeType || "DoWhileStatement" === nodeType || "EmptyStatement" === nodeType || "ExpressionStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "FunctionDeclaration" === nodeType || "IfStatement" === nodeType || "LabeledStatement" === nodeType || "ReturnStatement" === nodeType || "SwitchStatement" === nodeType || "ThrowStatement" === nodeType || "TryStatement" === nodeType || "VariableDeclaration" === nodeType || "WhileStatement" === nodeType || "WithStatement" === nodeType || "ClassDeclaration" === nodeType || "ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType || "ForOfStatement" === nodeType || "ImportDeclaration" === nodeType || "DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "InterfaceDeclaration" === nodeType || "OpaqueType" === nodeType || "TypeAlias" === nodeType || "EnumDeclaration" === nodeType || "TSDeclareFunction" === nodeType || "TSInterfaceDeclaration" === nodeType || "TSTypeAliasDeclaration" === nodeType || "TSEnumDeclaration" === nodeType || "TSModuleDeclaration" === nodeType || "TSImportEqualsDeclaration" === nodeType || "TSExportAssignment" === nodeType || "TSNamespaceExportDeclaration" === nodeType || nodeType === "Placeholder" && ("Statement" === node.expectedNode || "Declaration" === node.expectedNode || "BlockStatement" === node.expectedNode)) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTerminatorless(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("BreakStatement" === nodeType || "ContinueStatement" === nodeType || "ReturnStatement" === nodeType || "ThrowStatement" === nodeType || "YieldExpression" === nodeType || "AwaitExpression" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isCompletionStatement(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("BreakStatement" === nodeType || "ContinueStatement" === nodeType || "ReturnStatement" === nodeType || "ThrowStatement" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isConditional$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("ConditionalExpression" === nodeType || "IfStatement" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isLoop(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("DoWhileStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "WhileStatement" === nodeType || "ForOfStatement" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isWhile(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("DoWhileStatement" === nodeType || "WhileStatement" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isExpressionWrapper(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("ExpressionStatement" === nodeType || "ParenthesizedExpression" === nodeType || "TypeCastExpression" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isFor$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("ForInStatement" === nodeType || "ForStatement" === nodeType || "ForOfStatement" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isForXStatement$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("ForInStatement" === nodeType || "ForOfStatement" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isFunction$5(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "ObjectMethod" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isFunctionParent(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "ObjectMethod" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isPureish$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "RegExpLiteral" === nodeType || "ArrowFunctionExpression" === nodeType || "BigIntLiteral" === nodeType || "DecimalLiteral" === nodeType || nodeType === "Placeholder" && "StringLiteral" === node.expectedNode) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isDeclaration$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("FunctionDeclaration" === nodeType || "VariableDeclaration" === nodeType || "ClassDeclaration" === nodeType || "ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType || "ImportDeclaration" === nodeType || "DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "InterfaceDeclaration" === nodeType || "OpaqueType" === nodeType || "TypeAlias" === nodeType || "EnumDeclaration" === nodeType || "TSDeclareFunction" === nodeType || "TSInterfaceDeclaration" === nodeType || "TSTypeAliasDeclaration" === nodeType || "TSEnumDeclaration" === nodeType || "TSModuleDeclaration" === nodeType || nodeType === "Placeholder" && "Declaration" === node.expectedNode) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isPatternLike(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("Identifier" === nodeType || "RestElement" === nodeType || "AssignmentPattern" === nodeType || "ArrayPattern" === nodeType || "ObjectPattern" === nodeType || nodeType === "Placeholder" && ("Pattern" === node.expectedNode || "Identifier" === node.expectedNode)) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isLVal(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("Identifier" === nodeType || "MemberExpression" === nodeType || "RestElement" === nodeType || "AssignmentPattern" === nodeType || "ArrayPattern" === nodeType || "ObjectPattern" === nodeType || "TSParameterProperty" === nodeType || nodeType === "Placeholder" && ("Pattern" === node.expectedNode || "Identifier" === node.expectedNode)) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSEntityName(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("Identifier" === nodeType || "TSQualifiedName" === nodeType || nodeType === "Placeholder" && "Identifier" === node.expectedNode) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isLiteral$5(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "RegExpLiteral" === nodeType || "TemplateLiteral" === nodeType || "BigIntLiteral" === nodeType || "DecimalLiteral" === nodeType || nodeType === "Placeholder" && "StringLiteral" === node.expectedNode) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isImmutable$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "BigIntLiteral" === nodeType || "JSXAttribute" === nodeType || "JSXClosingElement" === nodeType || "JSXElement" === nodeType || "JSXExpressionContainer" === nodeType || "JSXSpreadChild" === nodeType || "JSXOpeningElement" === nodeType || "JSXText" === nodeType || "JSXFragment" === nodeType || "JSXOpeningFragment" === nodeType || "JSXClosingFragment" === nodeType || "DecimalLiteral" === nodeType || nodeType === "Placeholder" && "StringLiteral" === node.expectedNode) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isUserWhitespacable(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("ObjectMethod" === nodeType || "ObjectProperty" === nodeType || "ObjectTypeInternalSlot" === nodeType || "ObjectTypeCallProperty" === nodeType || "ObjectTypeIndexer" === nodeType || "ObjectTypeProperty" === nodeType || "ObjectTypeSpreadProperty" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isMethod$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("ObjectMethod" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isObjectMember(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("ObjectMethod" === nodeType || "ObjectProperty" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isProperty$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("ObjectProperty" === nodeType || "ClassProperty" === nodeType || "ClassPrivateProperty" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isUnaryLike$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("UnaryExpression" === nodeType || "SpreadElement" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isPattern(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("AssignmentPattern" === nodeType || "ArrayPattern" === nodeType || "ObjectPattern" === nodeType || nodeType === "Placeholder" && "Pattern" === node.expectedNode) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isClass$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("ClassExpression" === nodeType || "ClassDeclaration" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isModuleDeclaration$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType || "ImportDeclaration" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isExportDeclaration$2(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isModuleSpecifier$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("ExportSpecifier" === nodeType || "ImportDefaultSpecifier" === nodeType || "ImportNamespaceSpecifier" === nodeType || "ImportSpecifier" === nodeType || "ExportNamespaceSpecifier" === nodeType || "ExportDefaultSpecifier" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isPrivate(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("ClassPrivateProperty" === nodeType || "ClassPrivateMethod" === nodeType || "PrivateName" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isFlow$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("AnyTypeAnnotation" === nodeType || "ArrayTypeAnnotation" === nodeType || "BooleanTypeAnnotation" === nodeType || "BooleanLiteralTypeAnnotation" === nodeType || "NullLiteralTypeAnnotation" === nodeType || "ClassImplements" === nodeType || "DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "DeclaredPredicate" === nodeType || "ExistsTypeAnnotation" === nodeType || "FunctionTypeAnnotation" === nodeType || "FunctionTypeParam" === nodeType || "GenericTypeAnnotation" === nodeType || "InferredPredicate" === nodeType || "InterfaceExtends" === nodeType || "InterfaceDeclaration" === nodeType || "InterfaceTypeAnnotation" === nodeType || "IntersectionTypeAnnotation" === nodeType || "MixedTypeAnnotation" === nodeType || "EmptyTypeAnnotation" === nodeType || "NullableTypeAnnotation" === nodeType || "NumberLiteralTypeAnnotation" === nodeType || "NumberTypeAnnotation" === nodeType || "ObjectTypeAnnotation" === nodeType || "ObjectTypeInternalSlot" === nodeType || "ObjectTypeCallProperty" === nodeType || "ObjectTypeIndexer" === nodeType || "ObjectTypeProperty" === nodeType || "ObjectTypeSpreadProperty" === nodeType || "OpaqueType" === nodeType || "QualifiedTypeIdentifier" === nodeType || "StringLiteralTypeAnnotation" === nodeType || "StringTypeAnnotation" === nodeType || "SymbolTypeAnnotation" === nodeType || "ThisTypeAnnotation" === nodeType || "TupleTypeAnnotation" === nodeType || "TypeofTypeAnnotation" === nodeType || "TypeAlias" === nodeType || "TypeAnnotation" === nodeType || "TypeCastExpression" === nodeType || "TypeParameter" === nodeType || "TypeParameterDeclaration" === nodeType || "TypeParameterInstantiation" === nodeType || "UnionTypeAnnotation" === nodeType || "Variance" === nodeType || "VoidTypeAnnotation" === nodeType || "IndexedAccessType" === nodeType || "OptionalIndexedAccessType" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isFlowType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("AnyTypeAnnotation" === nodeType || "ArrayTypeAnnotation" === nodeType || "BooleanTypeAnnotation" === nodeType || "BooleanLiteralTypeAnnotation" === nodeType || "NullLiteralTypeAnnotation" === nodeType || "ExistsTypeAnnotation" === nodeType || "FunctionTypeAnnotation" === nodeType || "GenericTypeAnnotation" === nodeType || "InterfaceTypeAnnotation" === nodeType || "IntersectionTypeAnnotation" === nodeType || "MixedTypeAnnotation" === nodeType || "EmptyTypeAnnotation" === nodeType || "NullableTypeAnnotation" === nodeType || "NumberLiteralTypeAnnotation" === nodeType || "NumberTypeAnnotation" === nodeType || "ObjectTypeAnnotation" === nodeType || "StringLiteralTypeAnnotation" === nodeType || "StringTypeAnnotation" === nodeType || "SymbolTypeAnnotation" === nodeType || "ThisTypeAnnotation" === nodeType || "TupleTypeAnnotation" === nodeType || "TypeofTypeAnnotation" === nodeType || "UnionTypeAnnotation" === nodeType || "VoidTypeAnnotation" === nodeType || "IndexedAccessType" === nodeType || "OptionalIndexedAccessType" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isFlowBaseAnnotation$1(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("AnyTypeAnnotation" === nodeType || "BooleanTypeAnnotation" === nodeType || "NullLiteralTypeAnnotation" === nodeType || "MixedTypeAnnotation" === nodeType || "EmptyTypeAnnotation" === nodeType || "NumberTypeAnnotation" === nodeType || "StringTypeAnnotation" === nodeType || "SymbolTypeAnnotation" === nodeType || "ThisTypeAnnotation" === nodeType || "VoidTypeAnnotation" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isFlowDeclaration(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "InterfaceDeclaration" === nodeType || "OpaqueType" === nodeType || "TypeAlias" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isFlowPredicate(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("DeclaredPredicate" === nodeType || "InferredPredicate" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isEnumBody(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("EnumBooleanBody" === nodeType || "EnumNumberBody" === nodeType || "EnumStringBody" === nodeType || "EnumSymbolBody" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isEnumMember(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("EnumBooleanMember" === nodeType || "EnumNumberMember" === nodeType || "EnumStringMember" === nodeType || "EnumDefaultedMember" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isJSX(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("JSXAttribute" === nodeType || "JSXClosingElement" === nodeType || "JSXElement" === nodeType || "JSXEmptyExpression" === nodeType || "JSXExpressionContainer" === nodeType || "JSXSpreadChild" === nodeType || "JSXIdentifier" === nodeType || "JSXMemberExpression" === nodeType || "JSXNamespacedName" === nodeType || "JSXOpeningElement" === nodeType || "JSXSpreadAttribute" === nodeType || "JSXText" === nodeType || "JSXFragment" === nodeType || "JSXOpeningFragment" === nodeType || "JSXClosingFragment" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSTypeElement(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("TSCallSignatureDeclaration" === nodeType || "TSConstructSignatureDeclaration" === nodeType || "TSPropertySignature" === nodeType || "TSMethodSignature" === nodeType || "TSIndexSignature" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("TSAnyKeyword" === nodeType || "TSBooleanKeyword" === nodeType || "TSBigIntKeyword" === nodeType || "TSIntrinsicKeyword" === nodeType || "TSNeverKeyword" === nodeType || "TSNullKeyword" === nodeType || "TSNumberKeyword" === nodeType || "TSObjectKeyword" === nodeType || "TSStringKeyword" === nodeType || "TSSymbolKeyword" === nodeType || "TSUndefinedKeyword" === nodeType || "TSUnknownKeyword" === nodeType || "TSVoidKeyword" === nodeType || "TSThisType" === nodeType || "TSFunctionType" === nodeType || "TSConstructorType" === nodeType || "TSTypeReference" === nodeType || "TSTypePredicate" === nodeType || "TSTypeQuery" === nodeType || "TSTypeLiteral" === nodeType || "TSArrayType" === nodeType || "TSTupleType" === nodeType || "TSOptionalType" === nodeType || "TSRestType" === nodeType || "TSUnionType" === nodeType || "TSIntersectionType" === nodeType || "TSConditionalType" === nodeType || "TSInferType" === nodeType || "TSParenthesizedType" === nodeType || "TSTypeOperator" === nodeType || "TSIndexedAccessType" === nodeType || "TSMappedType" === nodeType || "TSLiteralType" === nodeType || "TSExpressionWithTypeArguments" === nodeType || "TSImportType" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isTSBaseType(node, opts) {
	  if (!node) return false;
	  const nodeType = node.type;

	  if ("TSAnyKeyword" === nodeType || "TSBooleanKeyword" === nodeType || "TSBigIntKeyword" === nodeType || "TSIntrinsicKeyword" === nodeType || "TSNeverKeyword" === nodeType || "TSNullKeyword" === nodeType || "TSNumberKeyword" === nodeType || "TSObjectKeyword" === nodeType || "TSStringKeyword" === nodeType || "TSSymbolKeyword" === nodeType || "TSUndefinedKeyword" === nodeType || "TSUnknownKeyword" === nodeType || "TSVoidKeyword" === nodeType || "TSThisType" === nodeType || "TSLiteralType" === nodeType) {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isNumberLiteral(node, opts) {
	  console.trace("The node type NumberLiteral has been renamed to NumericLiteral");
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "NumberLiteral") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isRegexLiteral(node, opts) {
	  console.trace("The node type RegexLiteral has been renamed to RegExpLiteral");
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "RegexLiteral") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isRestProperty(node, opts) {
	  console.trace("The node type RestProperty has been renamed to RestElement");
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "RestProperty") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	function isSpreadProperty(node, opts) {
	  console.trace("The node type SpreadProperty has been renamed to SpreadElement");
	  if (!node) return false;
	  const nodeType = node.type;

	  if (nodeType === "SpreadProperty") {
	    if (typeof opts === "undefined") {
	      return true;
	    } else {
	      return (0, _shallowEqual$1.default)(node, opts);
	    }
	  }

	  return false;
	}

	Object.defineProperty(matchesPattern$3, "__esModule", {
	  value: true
	});
	matchesPattern$3.default = matchesPattern$2;

	var _generated$o = generated$5;

	function matchesPattern$2(member, match, allowPartial) {
	  if (!(0, _generated$o.isMemberExpression)(member)) return false;
	  const parts = Array.isArray(match) ? match : match.split(".");
	  const nodes = [];
	  let node;

	  for (node = member; (0, _generated$o.isMemberExpression)(node); node = node.object) {
	    nodes.push(node.property);
	  }

	  nodes.push(node);
	  if (nodes.length < parts.length) return false;
	  if (!allowPartial && nodes.length > parts.length) return false;

	  for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {
	    const node = nodes[j];
	    let value;

	    if ((0, _generated$o.isIdentifier)(node)) {
	      value = node.name;
	    } else if ((0, _generated$o.isStringLiteral)(node)) {
	      value = node.value;
	    } else if ((0, _generated$o.isThisExpression)(node)) {
	      value = "this";
	    } else {
	      return false;
	    }

	    if (parts[i] !== value) return false;
	  }

	  return true;
	}

	Object.defineProperty(buildMatchMemberExpression$1, "__esModule", {
	  value: true
	});
	buildMatchMemberExpression$1.default = buildMatchMemberExpression;

	var _matchesPattern$1 = matchesPattern$3;

	function buildMatchMemberExpression(match, allowPartial) {
	  const parts = match.split(".");
	  return member => (0, _matchesPattern$1.default)(member, parts, allowPartial);
	}

	Object.defineProperty(isReactComponent$1, "__esModule", {
	  value: true
	});
	isReactComponent$1.default = void 0;

	var _buildMatchMemberExpression = buildMatchMemberExpression$1;

	const isReactComponent = (0, _buildMatchMemberExpression.default)("React.Component");
	var _default$j = isReactComponent;
	isReactComponent$1.default = _default$j;

	var isCompatTag$2 = {};

	Object.defineProperty(isCompatTag$2, "__esModule", {
	  value: true
	});
	isCompatTag$2.default = isCompatTag$1;

	function isCompatTag$1(tagName) {
	  return !!tagName && /^[a-z]/.test(tagName);
	}

	var buildChildren$1 = {};

	var cleanJSXElementLiteralChild$1 = {};

	var generated$4 = {};

	var builder$2 = {};

	var definitions = {};

	let fastProto = null;

	// Creates an object with permanently fast properties in V8. See Toon Verwaest's
	// post https://medium.com/@tverwaes/setting-up-prototypes-in-v8-ec9c9491dfe2#5f62
	// for more details. Use %HasFastProperties(object) and the Node.js flag
	// --allow-natives-syntax to check whether an object has fast properties.
	function FastObject(o) {
		// A prototype object will have "fast properties" enabled once it is checked
		// against the inline property cache of a function, e.g. fastProto.property:
		// https://github.com/v8/v8/blob/6.0.122/test/mjsunit/fast-prototype.js#L48-L63
		if (fastProto !== null && typeof fastProto.property) {
			const result = fastProto;
			fastProto = FastObject.prototype = null;
			return result;
		}
		fastProto = FastObject.prototype = o == null ? Object.create(null) : o;
		return new FastObject;
	}

	// Initialize the inline property cache of FastObject
	FastObject();

	var toFastProperties = function toFastproperties(o) {
		return FastObject(o);
	};

	var core = {};

	var is$2 = {};

	var isType$3 = {};

	Object.defineProperty(isType$3, "__esModule", {
	  value: true
	});
	isType$3.default = isType$2;

	var _definitions$a = definitions;

	function isType$2(nodeType, targetType) {
	  if (nodeType === targetType) return true;
	  if (_definitions$a.ALIAS_KEYS[targetType]) return false;
	  const aliases = _definitions$a.FLIPPED_ALIAS_KEYS[targetType];

	  if (aliases) {
	    if (aliases[0] === nodeType) return true;

	    for (const alias of aliases) {
	      if (nodeType === alias) return true;
	    }
	  }

	  return false;
	}

	var isPlaceholderType$1 = {};

	Object.defineProperty(isPlaceholderType$1, "__esModule", {
	  value: true
	});
	isPlaceholderType$1.default = isPlaceholderType;

	var _definitions$9 = definitions;

	function isPlaceholderType(placeholderType, targetType) {
	  if (placeholderType === targetType) return true;
	  const aliases = _definitions$9.PLACEHOLDERS_ALIAS[placeholderType];

	  if (aliases) {
	    for (const alias of aliases) {
	      if (targetType === alias) return true;
	    }
	  }

	  return false;
	}

	Object.defineProperty(is$2, "__esModule", {
	  value: true
	});
	is$2.default = is$1;

	var _shallowEqual = shallowEqual$1;

	var _isType$1 = isType$3;

	var _isPlaceholderType = isPlaceholderType$1;

	var _definitions$8 = definitions;

	function is$1(type, node, opts) {
	  if (!node) return false;
	  const matches = (0, _isType$1.default)(node.type, type);

	  if (!matches) {
	    if (!opts && node.type === "Placeholder" && type in _definitions$8.FLIPPED_ALIAS_KEYS) {
	      return (0, _isPlaceholderType.default)(node.expectedNode, type);
	    }

	    return false;
	  }

	  if (typeof opts === "undefined") {
	    return true;
	  } else {
	    return (0, _shallowEqual.default)(node, opts);
	  }
	}

	var isValidIdentifier$1 = {};

	var lib$r = {};

	var identifier$h = {};

	Object.defineProperty(identifier$h, "__esModule", {
	  value: true
	});
	identifier$h.isIdentifierStart = isIdentifierStart;
	identifier$h.isIdentifierChar = isIdentifierChar;
	identifier$h.isIdentifierName = isIdentifierName;
	let nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u0870-\u0887\u0889-\u088e\u08a0-\u08c9\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c5d\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cdd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u1711\u171f-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4c\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ca\ua7d0\ua7d1\ua7d3\ua7d5-\ua7d9\ua7f2-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
	let nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u0898-\u089f\u08ca-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3c\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u180f-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf-\u1ace\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
	const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
	nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
	const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
	const astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];

	function isInAstralSet(code, set) {
	  let pos = 0x10000;

	  for (let i = 0, length = set.length; i < length; i += 2) {
	    pos += set[i];
	    if (pos > code) return false;
	    pos += set[i + 1];
	    if (pos >= code) return true;
	  }

	  return false;
	}

	function isIdentifierStart(code) {
	  if (code < 65) return code === 36;
	  if (code <= 90) return true;
	  if (code < 97) return code === 95;
	  if (code <= 122) return true;

	  if (code <= 0xffff) {
	    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	  }

	  return isInAstralSet(code, astralIdentifierStartCodes);
	}

	function isIdentifierChar(code) {
	  if (code < 48) return code === 36;
	  if (code < 58) return true;
	  if (code < 65) return false;
	  if (code <= 90) return true;
	  if (code < 97) return code === 95;
	  if (code <= 122) return true;

	  if (code <= 0xffff) {
	    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	  }

	  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
	}

	function isIdentifierName(name) {
	  let isFirst = true;

	  for (let i = 0; i < name.length; i++) {
	    let cp = name.charCodeAt(i);

	    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {
	      const trail = name.charCodeAt(++i);

	      if ((trail & 0xfc00) === 0xdc00) {
	        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);
	      }
	    }

	    if (isFirst) {
	      isFirst = false;

	      if (!isIdentifierStart(cp)) {
	        return false;
	      }
	    } else if (!isIdentifierChar(cp)) {
	      return false;
	    }
	  }

	  return !isFirst;
	}

	var keyword = {};

	Object.defineProperty(keyword, "__esModule", {
	  value: true
	});
	keyword.isReservedWord = isReservedWord;
	keyword.isStrictReservedWord = isStrictReservedWord;
	keyword.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
	keyword.isStrictBindReservedWord = isStrictBindReservedWord;
	keyword.isKeyword = isKeyword;
	const reservedWords = {
	  keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
	  strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
	  strictBind: ["eval", "arguments"]
	};
	const keywords = new Set(reservedWords.keyword);
	const reservedWordsStrictSet = new Set(reservedWords.strict);
	const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);

	function isReservedWord(word, inModule) {
	  return inModule && word === "await" || word === "enum";
	}

	function isStrictReservedWord(word, inModule) {
	  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
	}

	function isStrictBindOnlyReservedWord(word) {
	  return reservedWordsStrictBindSet.has(word);
	}

	function isStrictBindReservedWord(word, inModule) {
	  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
	}

	function isKeyword(word) {
	  return keywords.has(word);
	}

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "isIdentifierName", {
	  enumerable: true,
	  get: function () {
	    return _identifier.isIdentifierName;
	  }
	});
	Object.defineProperty(exports, "isIdentifierChar", {
	  enumerable: true,
	  get: function () {
	    return _identifier.isIdentifierChar;
	  }
	});
	Object.defineProperty(exports, "isIdentifierStart", {
	  enumerable: true,
	  get: function () {
	    return _identifier.isIdentifierStart;
	  }
	});
	Object.defineProperty(exports, "isReservedWord", {
	  enumerable: true,
	  get: function () {
	    return _keyword.isReservedWord;
	  }
	});
	Object.defineProperty(exports, "isStrictBindOnlyReservedWord", {
	  enumerable: true,
	  get: function () {
	    return _keyword.isStrictBindOnlyReservedWord;
	  }
	});
	Object.defineProperty(exports, "isStrictBindReservedWord", {
	  enumerable: true,
	  get: function () {
	    return _keyword.isStrictBindReservedWord;
	  }
	});
	Object.defineProperty(exports, "isStrictReservedWord", {
	  enumerable: true,
	  get: function () {
	    return _keyword.isStrictReservedWord;
	  }
	});
	Object.defineProperty(exports, "isKeyword", {
	  enumerable: true,
	  get: function () {
	    return _keyword.isKeyword;
	  }
	});

	var _identifier = identifier$h;

	var _keyword = keyword;
	}(lib$r));

	Object.defineProperty(isValidIdentifier$1, "__esModule", {
	  value: true
	});
	isValidIdentifier$1.default = isValidIdentifier;

	var _helperValidatorIdentifier$4 = lib$r;

	function isValidIdentifier(name, reserved = true) {
	  if (typeof name !== "string") return false;

	  if (reserved) {
	    if ((0, _helperValidatorIdentifier$4.isKeyword)(name) || (0, _helperValidatorIdentifier$4.isStrictReservedWord)(name, true)) {
	      return false;
	    }
	  }

	  return (0, _helperValidatorIdentifier$4.isIdentifierName)(name);
	}

	var constants$1 = {};

	Object.defineProperty(constants$1, "__esModule", {
	  value: true
	});
	constants$1.NOT_LOCAL_BINDING = constants$1.BLOCK_SCOPED_SYMBOL = constants$1.INHERIT_KEYS = constants$1.UNARY_OPERATORS = constants$1.STRING_UNARY_OPERATORS = constants$1.NUMBER_UNARY_OPERATORS = constants$1.BOOLEAN_UNARY_OPERATORS = constants$1.ASSIGNMENT_OPERATORS = constants$1.BINARY_OPERATORS = constants$1.NUMBER_BINARY_OPERATORS = constants$1.BOOLEAN_BINARY_OPERATORS = constants$1.COMPARISON_BINARY_OPERATORS = constants$1.EQUALITY_BINARY_OPERATORS = constants$1.BOOLEAN_NUMBER_BINARY_OPERATORS = constants$1.UPDATE_OPERATORS = constants$1.LOGICAL_OPERATORS = constants$1.COMMENT_KEYS = constants$1.FOR_INIT_KEYS = constants$1.FLATTENABLE_KEYS = constants$1.STATEMENT_OR_BLOCK_KEYS = void 0;
	const STATEMENT_OR_BLOCK_KEYS$1 = ["consequent", "body", "alternate"];
	constants$1.STATEMENT_OR_BLOCK_KEYS = STATEMENT_OR_BLOCK_KEYS$1;
	const FLATTENABLE_KEYS = ["body", "expressions"];
	constants$1.FLATTENABLE_KEYS = FLATTENABLE_KEYS;
	const FOR_INIT_KEYS = ["left", "init"];
	constants$1.FOR_INIT_KEYS = FOR_INIT_KEYS;
	const COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
	constants$1.COMMENT_KEYS = COMMENT_KEYS;
	const LOGICAL_OPERATORS$2 = ["||", "&&", "??"];
	constants$1.LOGICAL_OPERATORS = LOGICAL_OPERATORS$2;
	const UPDATE_OPERATORS = ["++", "--"];
	constants$1.UPDATE_OPERATORS = UPDATE_OPERATORS;
	const BOOLEAN_NUMBER_BINARY_OPERATORS$1 = [">", "<", ">=", "<="];
	constants$1.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS$1;
	const EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
	constants$1.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
	const COMPARISON_BINARY_OPERATORS = [...EQUALITY_BINARY_OPERATORS, "in", "instanceof"];
	constants$1.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
	const BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS$1];
	constants$1.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
	const NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
	constants$1.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
	const BINARY_OPERATORS = ["+", ...NUMBER_BINARY_OPERATORS, ...BOOLEAN_BINARY_OPERATORS];
	constants$1.BINARY_OPERATORS = BINARY_OPERATORS;
	const ASSIGNMENT_OPERATORS = ["=", "+=", ...NUMBER_BINARY_OPERATORS.map(op => op + "="), ...LOGICAL_OPERATORS$2.map(op => op + "=")];
	constants$1.ASSIGNMENT_OPERATORS = ASSIGNMENT_OPERATORS;
	const BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
	constants$1.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
	const NUMBER_UNARY_OPERATORS = ["+", "-", "~"];
	constants$1.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
	const STRING_UNARY_OPERATORS = ["typeof"];
	constants$1.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
	const UNARY_OPERATORS = ["void", "throw", ...BOOLEAN_UNARY_OPERATORS, ...NUMBER_UNARY_OPERATORS, ...STRING_UNARY_OPERATORS];
	constants$1.UNARY_OPERATORS = UNARY_OPERATORS;
	const INHERIT_KEYS = {
	  optional: ["typeAnnotation", "typeParameters", "returnType"],
	  force: ["start", "loc", "end"]
	};
	constants$1.INHERIT_KEYS = INHERIT_KEYS;
	const BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
	constants$1.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;
	const NOT_LOCAL_BINDING$2 = Symbol.for("should not be considered a local binding");
	constants$1.NOT_LOCAL_BINDING = NOT_LOCAL_BINDING$2;

	var utils$3 = {};

	var validate$7 = {};

	Object.defineProperty(validate$7, "__esModule", {
	  value: true
	});
	validate$7.default = validate$6;
	validate$7.validateField = validateField;
	validate$7.validateChild = validateChild;

	var _definitions$7 = definitions;

	function validate$6(node, key, val) {
	  if (!node) return;
	  const fields = _definitions$7.NODE_FIELDS[node.type];
	  if (!fields) return;
	  const field = fields[key];
	  validateField(node, key, val, field);
	  validateChild(node, key, val);
	}

	function validateField(node, key, val, field) {
	  if (!(field != null && field.validate)) return;
	  if (field.optional && val == null) return;
	  field.validate(node, key, val);
	}

	function validateChild(node, key, val) {
	  if (val == null) return;
	  const validate = _definitions$7.NODE_PARENT_VALIDATIONS[val.type];
	  if (!validate) return;
	  validate(node, key, val);
	}

	Object.defineProperty(utils$3, "__esModule", {
	  value: true
	});
	utils$3.validate = validate$5;
	utils$3.typeIs = typeIs;
	utils$3.validateType = validateType;
	utils$3.validateOptional = validateOptional;
	utils$3.validateOptionalType = validateOptionalType;
	utils$3.arrayOf = arrayOf;
	utils$3.arrayOfType = arrayOfType;
	utils$3.validateArrayOfType = validateArrayOfType;
	utils$3.assertEach = assertEach;
	utils$3.assertOneOf = assertOneOf;
	utils$3.assertNodeType = assertNodeType;
	utils$3.assertNodeOrValueType = assertNodeOrValueType;
	utils$3.assertValueType = assertValueType;
	utils$3.assertShape = assertShape;
	utils$3.assertOptionalChainStart = assertOptionalChainStart;
	utils$3.chain = chain$1;
	utils$3.default = defineType;
	utils$3.NODE_PARENT_VALIDATIONS = utils$3.DEPRECATED_KEYS = utils$3.BUILDER_KEYS = utils$3.NODE_FIELDS = utils$3.FLIPPED_ALIAS_KEYS = utils$3.ALIAS_KEYS = utils$3.VISITOR_KEYS = void 0;

	var _is$3 = is$2;

	var _validate$1 = validate$7;

	const VISITOR_KEYS$5 = {};
	utils$3.VISITOR_KEYS = VISITOR_KEYS$5;
	const ALIAS_KEYS = {};
	utils$3.ALIAS_KEYS = ALIAS_KEYS;
	const FLIPPED_ALIAS_KEYS$3 = {};
	utils$3.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS$3;
	const NODE_FIELDS = {};
	utils$3.NODE_FIELDS = NODE_FIELDS;
	const BUILDER_KEYS = {};
	utils$3.BUILDER_KEYS = BUILDER_KEYS;
	const DEPRECATED_KEYS$1 = {};
	utils$3.DEPRECATED_KEYS = DEPRECATED_KEYS$1;
	const NODE_PARENT_VALIDATIONS = {};
	utils$3.NODE_PARENT_VALIDATIONS = NODE_PARENT_VALIDATIONS;

	function getType(val) {
	  if (Array.isArray(val)) {
	    return "array";
	  } else if (val === null) {
	    return "null";
	  } else {
	    return typeof val;
	  }
	}

	function validate$5(validate) {
	  return {
	    validate
	  };
	}

	function typeIs(typeName) {
	  return typeof typeName === "string" ? assertNodeType(typeName) : assertNodeType(...typeName);
	}

	function validateType(typeName) {
	  return validate$5(typeIs(typeName));
	}

	function validateOptional(validate) {
	  return {
	    validate,
	    optional: true
	  };
	}

	function validateOptionalType(typeName) {
	  return {
	    validate: typeIs(typeName),
	    optional: true
	  };
	}

	function arrayOf(elementType) {
	  return chain$1(assertValueType("array"), assertEach(elementType));
	}

	function arrayOfType(typeName) {
	  return arrayOf(typeIs(typeName));
	}

	function validateArrayOfType(typeName) {
	  return validate$5(arrayOfType(typeName));
	}

	function assertEach(callback) {
	  function validator(node, key, val) {
	    if (!Array.isArray(val)) return;

	    for (let i = 0; i < val.length; i++) {
	      const subkey = `${key}[${i}]`;
	      const v = val[i];
	      callback(node, subkey, v);
	      if (process.env.BABEL_TYPES_8_BREAKING) (0, _validate$1.validateChild)(node, subkey, v);
	    }
	  }

	  validator.each = callback;
	  return validator;
	}

	function assertOneOf(...values) {
	  function validate(node, key, val) {
	    if (values.indexOf(val) < 0) {
	      throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);
	    }
	  }

	  validate.oneOf = values;
	  return validate;
	}

	function assertNodeType(...types) {
	  function validate(node, key, val) {
	    for (const type of types) {
	      if ((0, _is$3.default)(type, val)) {
	        (0, _validate$1.validateChild)(node, key, val);
	        return;
	      }
	    }

	    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);
	  }

	  validate.oneOfNodeTypes = types;
	  return validate;
	}

	function assertNodeOrValueType(...types) {
	  function validate(node, key, val) {
	    for (const type of types) {
	      if (getType(val) === type || (0, _is$3.default)(type, val)) {
	        (0, _validate$1.validateChild)(node, key, val);
	        return;
	      }
	    }

	    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);
	  }

	  validate.oneOfNodeOrValueTypes = types;
	  return validate;
	}

	function assertValueType(type) {
	  function validate(node, key, val) {
	    const valid = getType(val) === type;

	    if (!valid) {
	      throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);
	    }
	  }

	  validate.type = type;
	  return validate;
	}

	function assertShape(shape) {
	  function validate(node, key, val) {
	    const errors = [];

	    for (const property of Object.keys(shape)) {
	      try {
	        (0, _validate$1.validateField)(node, property, val[property], shape[property]);
	      } catch (error) {
	        if (error instanceof TypeError) {
	          errors.push(error.message);
	          continue;
	        }

	        throw error;
	      }
	    }

	    if (errors.length) {
	      throw new TypeError(`Property ${key} of ${node.type} expected to have the following:\n${errors.join("\n")}`);
	    }
	  }

	  validate.shapeOf = shape;
	  return validate;
	}

	function assertOptionalChainStart() {
	  function validate(node) {
	    var _current;

	    let current = node;

	    while (node) {
	      const {
	        type
	      } = current;

	      if (type === "OptionalCallExpression") {
	        if (current.optional) return;
	        current = current.callee;
	        continue;
	      }

	      if (type === "OptionalMemberExpression") {
	        if (current.optional) return;
	        current = current.object;
	        continue;
	      }

	      break;
	    }

	    throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${(_current = current) == null ? void 0 : _current.type}`);
	  }

	  return validate;
	}

	function chain$1(...fns) {
	  function validate(...args) {
	    for (const fn of fns) {
	      fn(...args);
	    }
	  }

	  validate.chainOf = fns;

	  if (fns.length >= 2 && "type" in fns[0] && fns[0].type === "array" && !("each" in fns[1])) {
	    throw new Error(`An assertValueType("array") validator can only be followed by an assertEach(...) validator.`);
	  }

	  return validate;
	}

	const validTypeOpts = ["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"];
	const validFieldKeys = ["default", "optional", "validate"];

	function defineType(type, opts = {}) {
	  const inherits = opts.inherits && store[opts.inherits] || {};
	  let fields = opts.fields;

	  if (!fields) {
	    fields = {};

	    if (inherits.fields) {
	      const keys = Object.getOwnPropertyNames(inherits.fields);

	      for (const key of keys) {
	        const field = inherits.fields[key];
	        const def = field.default;

	        if (Array.isArray(def) ? def.length > 0 : def && typeof def === "object") {
	          throw new Error("field defaults can only be primitives or empty arrays currently");
	        }

	        fields[key] = {
	          default: Array.isArray(def) ? [] : def,
	          optional: field.optional,
	          validate: field.validate
	        };
	      }
	    }
	  }

	  const visitor = opts.visitor || inherits.visitor || [];
	  const aliases = opts.aliases || inherits.aliases || [];
	  const builder = opts.builder || inherits.builder || opts.visitor || [];

	  for (const k of Object.keys(opts)) {
	    if (validTypeOpts.indexOf(k) === -1) {
	      throw new Error(`Unknown type option "${k}" on ${type}`);
	    }
	  }

	  if (opts.deprecatedAlias) {
	    DEPRECATED_KEYS$1[opts.deprecatedAlias] = type;
	  }

	  for (const key of visitor.concat(builder)) {
	    fields[key] = fields[key] || {};
	  }

	  for (const key of Object.keys(fields)) {
	    const field = fields[key];

	    if (field.default !== undefined && builder.indexOf(key) === -1) {
	      field.optional = true;
	    }

	    if (field.default === undefined) {
	      field.default = null;
	    } else if (!field.validate && field.default != null) {
	      field.validate = assertValueType(getType(field.default));
	    }

	    for (const k of Object.keys(field)) {
	      if (validFieldKeys.indexOf(k) === -1) {
	        throw new Error(`Unknown field key "${k}" on ${type}.${key}`);
	      }
	    }
	  }

	  VISITOR_KEYS$5[type] = opts.visitor = visitor;
	  BUILDER_KEYS[type] = opts.builder = builder;
	  NODE_FIELDS[type] = opts.fields = fields;
	  ALIAS_KEYS[type] = opts.aliases = aliases;
	  aliases.forEach(alias => {
	    FLIPPED_ALIAS_KEYS$3[alias] = FLIPPED_ALIAS_KEYS$3[alias] || [];
	    FLIPPED_ALIAS_KEYS$3[alias].push(type);
	  });

	  if (opts.validate) {
	    NODE_PARENT_VALIDATIONS[type] = opts.validate;
	  }

	  store[type] = opts;
	}

	const store = {};

	Object.defineProperty(core, "__esModule", {
	  value: true
	});
	core.classMethodOrDeclareMethodCommon = core.classMethodOrPropertyCommon = core.patternLikeCommon = core.functionDeclarationCommon = core.functionTypeAnnotationCommon = core.functionCommon = void 0;

	var _is$2 = is$2;

	var _isValidIdentifier$3 = isValidIdentifier$1;

	var _helperValidatorIdentifier$3 = lib$r;

	var _constants$5 = constants$1;

	var _utils$a = utils$3;

	(0, _utils$a.default)("ArrayExpression", {
	  fields: {
	    elements: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeOrValueType)("null", "Expression", "SpreadElement"))),
	      default: !process.env.BABEL_TYPES_8_BREAKING ? [] : undefined
	    }
	  },
	  visitor: ["elements"],
	  aliases: ["Expression"]
	});
	(0, _utils$a.default)("AssignmentExpression", {
	  fields: {
	    operator: {
	      validate: function () {
	        if (!process.env.BABEL_TYPES_8_BREAKING) {
	          return (0, _utils$a.assertValueType)("string");
	        }

	        const identifier = (0, _utils$a.assertOneOf)(..._constants$5.ASSIGNMENT_OPERATORS);
	        const pattern = (0, _utils$a.assertOneOf)("=");
	        return function (node, key, val) {
	          const validator = (0, _is$2.default)("Pattern", node.left) ? pattern : identifier;
	          validator(node, key, val);
	        };
	      }()
	    },
	    left: {
	      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$a.assertNodeType)("LVal") : (0, _utils$a.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern")
	    },
	    right: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    }
	  },
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Expression"]
	});
	(0, _utils$a.default)("BinaryExpression", {
	  builder: ["operator", "left", "right"],
	  fields: {
	    operator: {
	      validate: (0, _utils$a.assertOneOf)(..._constants$5.BINARY_OPERATORS)
	    },
	    left: {
	      validate: function () {
	        const expression = (0, _utils$a.assertNodeType)("Expression");
	        const inOp = (0, _utils$a.assertNodeType)("Expression", "PrivateName");

	        const validator = function (node, key, val) {
	          const validator = node.operator === "in" ? inOp : expression;
	          validator(node, key, val);
	        };

	        validator.oneOfNodeTypes = ["Expression", "PrivateName"];
	        return validator;
	      }()
	    },
	    right: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    }
	  },
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"]
	});
	(0, _utils$a.default)("InterpreterDirective", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: (0, _utils$a.assertValueType)("string")
	    }
	  }
	});
	(0, _utils$a.default)("Directive", {
	  visitor: ["value"],
	  fields: {
	    value: {
	      validate: (0, _utils$a.assertNodeType)("DirectiveLiteral")
	    }
	  }
	});
	(0, _utils$a.default)("DirectiveLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: (0, _utils$a.assertValueType)("string")
	    }
	  }
	});
	(0, _utils$a.default)("BlockStatement", {
	  builder: ["body", "directives"],
	  visitor: ["directives", "body"],
	  fields: {
	    directives: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Directive"))),
	      default: []
	    },
	    body: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block", "Statement"]
	});
	(0, _utils$a.default)("BreakStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: (0, _utils$a.assertNodeType)("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});
	(0, _utils$a.default)("CallExpression", {
	  visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
	  builder: ["callee", "arguments"],
	  aliases: ["Expression"],
	  fields: Object.assign({
	    callee: {
	      validate: (0, _utils$a.assertNodeType)("Expression", "V8IntrinsicIdentifier")
	    },
	    arguments: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder")))
	    }
	  }, !process.env.BABEL_TYPES_8_BREAKING ? {
	    optional: {
	      validate: (0, _utils$a.assertOneOf)(true, false),
	      optional: true
	    }
	  } : {}, {
	    typeArguments: {
	      validate: (0, _utils$a.assertNodeType)("TypeParameterInstantiation"),
	      optional: true
	    },
	    typeParameters: {
	      validate: (0, _utils$a.assertNodeType)("TSTypeParameterInstantiation"),
	      optional: true
	    }
	  })
	});
	(0, _utils$a.default)("CatchClause", {
	  visitor: ["param", "body"],
	  fields: {
	    param: {
	      validate: (0, _utils$a.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"),
	      optional: true
	    },
	    body: {
	      validate: (0, _utils$a.assertNodeType)("BlockStatement")
	    }
	  },
	  aliases: ["Scopable", "BlockParent"]
	});
	(0, _utils$a.default)("ConditionalExpression", {
	  visitor: ["test", "consequent", "alternate"],
	  fields: {
	    test: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    consequent: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    alternate: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    }
	  },
	  aliases: ["Expression", "Conditional"]
	});
	(0, _utils$a.default)("ContinueStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: (0, _utils$a.assertNodeType)("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});
	(0, _utils$a.default)("DebuggerStatement", {
	  aliases: ["Statement"]
	});
	(0, _utils$a.default)("DoWhileStatement", {
	  visitor: ["test", "body"],
	  fields: {
	    test: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    body: {
	      validate: (0, _utils$a.assertNodeType)("Statement")
	    }
	  },
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
	});
	(0, _utils$a.default)("EmptyStatement", {
	  aliases: ["Statement"]
	});
	(0, _utils$a.default)("ExpressionStatement", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    }
	  },
	  aliases: ["Statement", "ExpressionWrapper"]
	});
	(0, _utils$a.default)("File", {
	  builder: ["program", "comments", "tokens"],
	  visitor: ["program"],
	  fields: {
	    program: {
	      validate: (0, _utils$a.assertNodeType)("Program")
	    },
	    comments: {
	      validate: !process.env.BABEL_TYPES_8_BREAKING ? Object.assign(() => {}, {
	        each: {
	          oneOfNodeTypes: ["CommentBlock", "CommentLine"]
	        }
	      }) : (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("CommentBlock", "CommentLine")),
	      optional: true
	    },
	    tokens: {
	      validate: (0, _utils$a.assertEach)(Object.assign(() => {}, {
	        type: "any"
	      })),
	      optional: true
	    }
	  }
	});
	(0, _utils$a.default)("ForInStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$a.assertNodeType)("VariableDeclaration", "LVal") : (0, _utils$a.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern")
	    },
	    right: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    body: {
	      validate: (0, _utils$a.assertNodeType)("Statement")
	    }
	  }
	});
	(0, _utils$a.default)("ForStatement", {
	  visitor: ["init", "test", "update", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
	  fields: {
	    init: {
	      validate: (0, _utils$a.assertNodeType)("VariableDeclaration", "Expression"),
	      optional: true
	    },
	    test: {
	      validate: (0, _utils$a.assertNodeType)("Expression"),
	      optional: true
	    },
	    update: {
	      validate: (0, _utils$a.assertNodeType)("Expression"),
	      optional: true
	    },
	    body: {
	      validate: (0, _utils$a.assertNodeType)("Statement")
	    }
	  }
	});
	const functionCommon = {
	  params: {
	    validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Identifier", "Pattern", "RestElement")))
	  },
	  generator: {
	    default: false
	  },
	  async: {
	    default: false
	  }
	};
	core.functionCommon = functionCommon;
	const functionTypeAnnotationCommon = {
	  returnType: {
	    validate: (0, _utils$a.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
	    optional: true
	  },
	  typeParameters: {
	    validate: (0, _utils$a.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
	    optional: true
	  }
	};
	core.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
	const functionDeclarationCommon = Object.assign({}, functionCommon, {
	  declare: {
	    validate: (0, _utils$a.assertValueType)("boolean"),
	    optional: true
	  },
	  id: {
	    validate: (0, _utils$a.assertNodeType)("Identifier"),
	    optional: true
	  }
	});
	core.functionDeclarationCommon = functionDeclarationCommon;
	(0, _utils$a.default)("FunctionDeclaration", {
	  builder: ["id", "params", "body", "generator", "async"],
	  visitor: ["id", "params", "body", "returnType", "typeParameters"],
	  fields: Object.assign({}, functionDeclarationCommon, functionTypeAnnotationCommon, {
	    body: {
	      validate: (0, _utils$a.assertNodeType)("BlockStatement")
	    }
	  }),
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"],
	  validate: function () {
	    if (!process.env.BABEL_TYPES_8_BREAKING) return () => {};
	    const identifier = (0, _utils$a.assertNodeType)("Identifier");
	    return function (parent, key, node) {
	      if (!(0, _is$2.default)("ExportDefaultDeclaration", parent)) {
	        identifier(node, "id", node.id);
	      }
	    };
	  }()
	});
	(0, _utils$a.default)("FunctionExpression", {
	  inherits: "FunctionDeclaration",
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: Object.assign({}, functionCommon, functionTypeAnnotationCommon, {
	    id: {
	      validate: (0, _utils$a.assertNodeType)("Identifier"),
	      optional: true
	    },
	    body: {
	      validate: (0, _utils$a.assertNodeType)("BlockStatement")
	    }
	  })
	});
	const patternLikeCommon = {
	  typeAnnotation: {
	    validate: (0, _utils$a.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
	    optional: true
	  },
	  decorators: {
	    validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Decorator")))
	  }
	};
	core.patternLikeCommon = patternLikeCommon;
	(0, _utils$a.default)("Identifier", {
	  builder: ["name"],
	  visitor: ["typeAnnotation", "decorators"],
	  aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"],
	  fields: Object.assign({}, patternLikeCommon, {
	    name: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("string"), Object.assign(function (node, key, val) {
	        if (!process.env.BABEL_TYPES_8_BREAKING) return;

	        if (!(0, _isValidIdentifier$3.default)(val, false)) {
	          throw new TypeError(`"${val}" is not a valid identifier name`);
	        }
	      }, {
	        type: "string"
	      }))
	    },
	    optional: {
	      validate: (0, _utils$a.assertValueType)("boolean"),
	      optional: true
	    }
	  }),

	  validate(parent, key, node) {
	    if (!process.env.BABEL_TYPES_8_BREAKING) return;
	    const match = /\.(\w+)$/.exec(key);
	    if (!match) return;
	    const [, parentKey] = match;
	    const nonComp = {
	      computed: false
	    };

	    if (parentKey === "property") {
	      if ((0, _is$2.default)("MemberExpression", parent, nonComp)) return;
	      if ((0, _is$2.default)("OptionalMemberExpression", parent, nonComp)) return;
	    } else if (parentKey === "key") {
	      if ((0, _is$2.default)("Property", parent, nonComp)) return;
	      if ((0, _is$2.default)("Method", parent, nonComp)) return;
	    } else if (parentKey === "exported") {
	      if ((0, _is$2.default)("ExportSpecifier", parent)) return;
	    } else if (parentKey === "imported") {
	      if ((0, _is$2.default)("ImportSpecifier", parent, {
	        imported: node
	      })) return;
	    } else if (parentKey === "meta") {
	      if ((0, _is$2.default)("MetaProperty", parent, {
	        meta: node
	      })) return;
	    }

	    if (((0, _helperValidatorIdentifier$3.isKeyword)(node.name) || (0, _helperValidatorIdentifier$3.isReservedWord)(node.name, false)) && node.name !== "this") {
	      throw new TypeError(`"${node.name}" is not a valid identifier`);
	    }
	  }

	});
	(0, _utils$a.default)("IfStatement", {
	  visitor: ["test", "consequent", "alternate"],
	  aliases: ["Statement", "Conditional"],
	  fields: {
	    test: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    consequent: {
	      validate: (0, _utils$a.assertNodeType)("Statement")
	    },
	    alternate: {
	      optional: true,
	      validate: (0, _utils$a.assertNodeType)("Statement")
	    }
	  }
	});
	(0, _utils$a.default)("LabeledStatement", {
	  visitor: ["label", "body"],
	  aliases: ["Statement"],
	  fields: {
	    label: {
	      validate: (0, _utils$a.assertNodeType)("Identifier")
	    },
	    body: {
	      validate: (0, _utils$a.assertNodeType)("Statement")
	    }
	  }
	});
	(0, _utils$a.default)("StringLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: (0, _utils$a.assertValueType)("string")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	(0, _utils$a.default)("NumericLiteral", {
	  builder: ["value"],
	  deprecatedAlias: "NumberLiteral",
	  fields: {
	    value: {
	      validate: (0, _utils$a.assertValueType)("number")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	(0, _utils$a.default)("NullLiteral", {
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	(0, _utils$a.default)("BooleanLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: (0, _utils$a.assertValueType)("boolean")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	(0, _utils$a.default)("RegExpLiteral", {
	  builder: ["pattern", "flags"],
	  deprecatedAlias: "RegexLiteral",
	  aliases: ["Expression", "Pureish", "Literal"],
	  fields: {
	    pattern: {
	      validate: (0, _utils$a.assertValueType)("string")
	    },
	    flags: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("string"), Object.assign(function (node, key, val) {
	        if (!process.env.BABEL_TYPES_8_BREAKING) return;
	        const invalid = /[^gimsuy]/.exec(val);

	        if (invalid) {
	          throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);
	        }
	      }, {
	        type: "string"
	      })),
	      default: ""
	    }
	  }
	});
	(0, _utils$a.default)("LogicalExpression", {
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"],
	  fields: {
	    operator: {
	      validate: (0, _utils$a.assertOneOf)(..._constants$5.LOGICAL_OPERATORS)
	    },
	    left: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    right: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    }
	  }
	});
	(0, _utils$a.default)("MemberExpression", {
	  builder: ["object", "property", "computed", ...(!process.env.BABEL_TYPES_8_BREAKING ? ["optional"] : [])],
	  visitor: ["object", "property"],
	  aliases: ["Expression", "LVal"],
	  fields: Object.assign({
	    object: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    property: {
	      validate: function () {
	        const normal = (0, _utils$a.assertNodeType)("Identifier", "PrivateName");
	        const computed = (0, _utils$a.assertNodeType)("Expression");

	        const validator = function (node, key, val) {
	          const validator = node.computed ? computed : normal;
	          validator(node, key, val);
	        };

	        validator.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"];
	        return validator;
	      }()
	    },
	    computed: {
	      default: false
	    }
	  }, !process.env.BABEL_TYPES_8_BREAKING ? {
	    optional: {
	      validate: (0, _utils$a.assertOneOf)(true, false),
	      optional: true
	    }
	  } : {})
	});
	(0, _utils$a.default)("NewExpression", {
	  inherits: "CallExpression"
	});
	(0, _utils$a.default)("Program", {
	  visitor: ["directives", "body"],
	  builder: ["body", "directives", "sourceType", "interpreter"],
	  fields: {
	    sourceFile: {
	      validate: (0, _utils$a.assertValueType)("string")
	    },
	    sourceType: {
	      validate: (0, _utils$a.assertOneOf)("script", "module"),
	      default: "script"
	    },
	    interpreter: {
	      validate: (0, _utils$a.assertNodeType)("InterpreterDirective"),
	      default: null,
	      optional: true
	    },
	    directives: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Directive"))),
	      default: []
	    },
	    body: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block"]
	});
	(0, _utils$a.default)("ObjectExpression", {
	  visitor: ["properties"],
	  aliases: ["Expression"],
	  fields: {
	    properties: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("ObjectMethod", "ObjectProperty", "SpreadElement")))
	    }
	  }
	});
	(0, _utils$a.default)("ObjectMethod", {
	  builder: ["kind", "key", "params", "body", "computed", "generator", "async"],
	  fields: Object.assign({}, functionCommon, functionTypeAnnotationCommon, {
	    kind: Object.assign({
	      validate: (0, _utils$a.assertOneOf)("method", "get", "set")
	    }, !process.env.BABEL_TYPES_8_BREAKING ? {
	      default: "method"
	    } : {}),
	    computed: {
	      default: false
	    },
	    key: {
	      validate: function () {
	        const normal = (0, _utils$a.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral");
	        const computed = (0, _utils$a.assertNodeType)("Expression");

	        const validator = function (node, key, val) {
	          const validator = node.computed ? computed : normal;
	          validator(node, key, val);
	        };

	        validator.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral"];
	        return validator;
	      }()
	    },
	    decorators: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Decorator"))),
	      optional: true
	    },
	    body: {
	      validate: (0, _utils$a.assertNodeType)("BlockStatement")
	    }
	  }),
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
	});
	(0, _utils$a.default)("ObjectProperty", {
	  builder: ["key", "value", "computed", "shorthand", ...(!process.env.BABEL_TYPES_8_BREAKING ? ["decorators"] : [])],
	  fields: {
	    computed: {
	      default: false
	    },
	    key: {
	      validate: function () {
	        const normal = (0, _utils$a.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral");
	        const computed = (0, _utils$a.assertNodeType)("Expression");

	        const validator = function (node, key, val) {
	          const validator = node.computed ? computed : normal;
	          validator(node, key, val);
	        };

	        validator.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral"];
	        return validator;
	      }()
	    },
	    value: {
	      validate: (0, _utils$a.assertNodeType)("Expression", "PatternLike")
	    },
	    shorthand: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("boolean"), Object.assign(function (node, key, val) {
	        if (!process.env.BABEL_TYPES_8_BREAKING) return;

	        if (val && node.computed) {
	          throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
	        }
	      }, {
	        type: "boolean"
	      }), function (node, key, val) {
	        if (!process.env.BABEL_TYPES_8_BREAKING) return;

	        if (val && !(0, _is$2.default)("Identifier", node.key)) {
	          throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
	        }
	      }),
	      default: false
	    },
	    decorators: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Decorator"))),
	      optional: true
	    }
	  },
	  visitor: ["key", "value", "decorators"],
	  aliases: ["UserWhitespacable", "Property", "ObjectMember"],
	  validate: function () {
	    const pattern = (0, _utils$a.assertNodeType)("Identifier", "Pattern");
	    const expression = (0, _utils$a.assertNodeType)("Expression");
	    return function (parent, key, node) {
	      if (!process.env.BABEL_TYPES_8_BREAKING) return;
	      const validator = (0, _is$2.default)("ObjectPattern", parent) ? pattern : expression;
	      validator(node, "value", node.value);
	    };
	  }()
	});
	(0, _utils$a.default)("RestElement", {
	  visitor: ["argument", "typeAnnotation"],
	  builder: ["argument"],
	  aliases: ["LVal", "PatternLike"],
	  deprecatedAlias: "RestProperty",
	  fields: Object.assign({}, patternLikeCommon, {
	    argument: {
	      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$a.assertNodeType)("LVal") : (0, _utils$a.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression")
	    },
	    optional: {
	      validate: (0, _utils$a.assertValueType)("boolean"),
	      optional: true
	    }
	  }),

	  validate(parent, key) {
	    if (!process.env.BABEL_TYPES_8_BREAKING) return;
	    const match = /(\w+)\[(\d+)\]/.exec(key);
	    if (!match) throw new Error("Internal Babel error: malformed key.");
	    const [, listKey, index] = match;

	    if (parent[listKey].length > index + 1) {
	      throw new TypeError(`RestElement must be last element of ${listKey}`);
	    }
	  }

	});
	(0, _utils$a.default)("ReturnStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: (0, _utils$a.assertNodeType)("Expression"),
	      optional: true
	    }
	  }
	});
	(0, _utils$a.default)("SequenceExpression", {
	  visitor: ["expressions"],
	  fields: {
	    expressions: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Expression")))
	    }
	  },
	  aliases: ["Expression"]
	});
	(0, _utils$a.default)("ParenthesizedExpression", {
	  visitor: ["expression"],
	  aliases: ["Expression", "ExpressionWrapper"],
	  fields: {
	    expression: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    }
	  }
	});
	(0, _utils$a.default)("SwitchCase", {
	  visitor: ["test", "consequent"],
	  fields: {
	    test: {
	      validate: (0, _utils$a.assertNodeType)("Expression"),
	      optional: true
	    },
	    consequent: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Statement")))
	    }
	  }
	});
	(0, _utils$a.default)("SwitchStatement", {
	  visitor: ["discriminant", "cases"],
	  aliases: ["Statement", "BlockParent", "Scopable"],
	  fields: {
	    discriminant: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    cases: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("SwitchCase")))
	    }
	  }
	});
	(0, _utils$a.default)("ThisExpression", {
	  aliases: ["Expression"]
	});
	(0, _utils$a.default)("ThrowStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    }
	  }
	});
	(0, _utils$a.default)("TryStatement", {
	  visitor: ["block", "handler", "finalizer"],
	  aliases: ["Statement"],
	  fields: {
	    block: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertNodeType)("BlockStatement"), Object.assign(function (node) {
	        if (!process.env.BABEL_TYPES_8_BREAKING) return;

	        if (!node.handler && !node.finalizer) {
	          throw new TypeError("TryStatement expects either a handler or finalizer, or both");
	        }
	      }, {
	        oneOfNodeTypes: ["BlockStatement"]
	      }))
	    },
	    handler: {
	      optional: true,
	      validate: (0, _utils$a.assertNodeType)("CatchClause")
	    },
	    finalizer: {
	      optional: true,
	      validate: (0, _utils$a.assertNodeType)("BlockStatement")
	    }
	  }
	});
	(0, _utils$a.default)("UnaryExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      default: true
	    },
	    argument: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    operator: {
	      validate: (0, _utils$a.assertOneOf)(..._constants$5.UNARY_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["UnaryLike", "Expression"]
	});
	(0, _utils$a.default)("UpdateExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      default: false
	    },
	    argument: {
	      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$a.assertNodeType)("Expression") : (0, _utils$a.assertNodeType)("Identifier", "MemberExpression")
	    },
	    operator: {
	      validate: (0, _utils$a.assertOneOf)(..._constants$5.UPDATE_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["Expression"]
	});
	(0, _utils$a.default)("VariableDeclaration", {
	  builder: ["kind", "declarations"],
	  visitor: ["declarations"],
	  aliases: ["Statement", "Declaration"],
	  fields: {
	    declare: {
	      validate: (0, _utils$a.assertValueType)("boolean"),
	      optional: true
	    },
	    kind: {
	      validate: (0, _utils$a.assertOneOf)("var", "let", "const")
	    },
	    declarations: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("VariableDeclarator")))
	    }
	  },

	  validate(parent, key, node) {
	    if (!process.env.BABEL_TYPES_8_BREAKING) return;
	    if (!(0, _is$2.default)("ForXStatement", parent, {
	      left: node
	    })) return;

	    if (node.declarations.length !== 1) {
	      throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);
	    }
	  }

	});
	(0, _utils$a.default)("VariableDeclarator", {
	  visitor: ["id", "init"],
	  fields: {
	    id: {
	      validate: function () {
	        if (!process.env.BABEL_TYPES_8_BREAKING) {
	          return (0, _utils$a.assertNodeType)("LVal");
	        }

	        const normal = (0, _utils$a.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern");
	        const without = (0, _utils$a.assertNodeType)("Identifier");
	        return function (node, key, val) {
	          const validator = node.init ? normal : without;
	          validator(node, key, val);
	        };
	      }()
	    },
	    definite: {
	      optional: true,
	      validate: (0, _utils$a.assertValueType)("boolean")
	    },
	    init: {
	      optional: true,
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    }
	  }
	});
	(0, _utils$a.default)("WhileStatement", {
	  visitor: ["test", "body"],
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
	  fields: {
	    test: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    body: {
	      validate: (0, _utils$a.assertNodeType)("Statement")
	    }
	  }
	});
	(0, _utils$a.default)("WithStatement", {
	  visitor: ["object", "body"],
	  aliases: ["Statement"],
	  fields: {
	    object: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    body: {
	      validate: (0, _utils$a.assertNodeType)("Statement")
	    }
	  }
	});
	(0, _utils$a.default)("AssignmentPattern", {
	  visitor: ["left", "right", "decorators"],
	  builder: ["left", "right"],
	  aliases: ["Pattern", "PatternLike", "LVal"],
	  fields: Object.assign({}, patternLikeCommon, {
	    left: {
	      validate: (0, _utils$a.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression")
	    },
	    right: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    decorators: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Decorator"))),
	      optional: true
	    }
	  })
	});
	(0, _utils$a.default)("ArrayPattern", {
	  visitor: ["elements", "typeAnnotation"],
	  builder: ["elements"],
	  aliases: ["Pattern", "PatternLike", "LVal"],
	  fields: Object.assign({}, patternLikeCommon, {
	    elements: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeOrValueType)("null", "PatternLike")))
	    },
	    decorators: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Decorator"))),
	      optional: true
	    },
	    optional: {
	      validate: (0, _utils$a.assertValueType)("boolean"),
	      optional: true
	    }
	  })
	});
	(0, _utils$a.default)("ArrowFunctionExpression", {
	  builder: ["params", "body", "async"],
	  visitor: ["params", "body", "returnType", "typeParameters"],
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: Object.assign({}, functionCommon, functionTypeAnnotationCommon, {
	    expression: {
	      validate: (0, _utils$a.assertValueType)("boolean")
	    },
	    body: {
	      validate: (0, _utils$a.assertNodeType)("BlockStatement", "Expression")
	    }
	  })
	});
	(0, _utils$a.default)("ClassBody", {
	  visitor: ["body"],
	  fields: {
	    body: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "TSDeclareMethod", "TSIndexSignature")))
	    }
	  }
	});
	(0, _utils$a.default)("ClassExpression", {
	  builder: ["id", "superClass", "body", "decorators"],
	  visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
	  aliases: ["Scopable", "Class", "Expression"],
	  fields: {
	    id: {
	      validate: (0, _utils$a.assertNodeType)("Identifier"),
	      optional: true
	    },
	    typeParameters: {
	      validate: (0, _utils$a.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
	      optional: true
	    },
	    body: {
	      validate: (0, _utils$a.assertNodeType)("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    superTypeParameters: {
	      validate: (0, _utils$a.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
	      optional: true
	    },
	    implements: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))),
	      optional: true
	    },
	    decorators: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Decorator"))),
	      optional: true
	    },
	    mixins: {
	      validate: (0, _utils$a.assertNodeType)("InterfaceExtends"),
	      optional: true
	    }
	  }
	});
	(0, _utils$a.default)("ClassDeclaration", {
	  inherits: "ClassExpression",
	  aliases: ["Scopable", "Class", "Statement", "Declaration"],
	  fields: {
	    id: {
	      validate: (0, _utils$a.assertNodeType)("Identifier")
	    },
	    typeParameters: {
	      validate: (0, _utils$a.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
	      optional: true
	    },
	    body: {
	      validate: (0, _utils$a.assertNodeType)("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    superTypeParameters: {
	      validate: (0, _utils$a.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
	      optional: true
	    },
	    implements: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))),
	      optional: true
	    },
	    decorators: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Decorator"))),
	      optional: true
	    },
	    mixins: {
	      validate: (0, _utils$a.assertNodeType)("InterfaceExtends"),
	      optional: true
	    },
	    declare: {
	      validate: (0, _utils$a.assertValueType)("boolean"),
	      optional: true
	    },
	    abstract: {
	      validate: (0, _utils$a.assertValueType)("boolean"),
	      optional: true
	    }
	  },
	  validate: function () {
	    const identifier = (0, _utils$a.assertNodeType)("Identifier");
	    return function (parent, key, node) {
	      if (!process.env.BABEL_TYPES_8_BREAKING) return;

	      if (!(0, _is$2.default)("ExportDefaultDeclaration", parent)) {
	        identifier(node, "id", node.id);
	      }
	    };
	  }()
	});
	(0, _utils$a.default)("ExportAllDeclaration", {
	  visitor: ["source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    source: {
	      validate: (0, _utils$a.assertNodeType)("StringLiteral")
	    },
	    exportKind: (0, _utils$a.validateOptional)((0, _utils$a.assertOneOf)("type", "value")),
	    assertions: {
	      optional: true,
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("ImportAttribute")))
	    }
	  }
	});
	(0, _utils$a.default)("ExportDefaultDeclaration", {
	  visitor: ["declaration"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      validate: (0, _utils$a.assertNodeType)("FunctionDeclaration", "TSDeclareFunction", "ClassDeclaration", "Expression")
	    },
	    exportKind: (0, _utils$a.validateOptional)((0, _utils$a.assertOneOf)("value"))
	  }
	});
	(0, _utils$a.default)("ExportNamedDeclaration", {
	  visitor: ["declaration", "specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      optional: true,
	      validate: (0, _utils$a.chain)((0, _utils$a.assertNodeType)("Declaration"), Object.assign(function (node, key, val) {
	        if (!process.env.BABEL_TYPES_8_BREAKING) return;

	        if (val && node.specifiers.length) {
	          throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
	        }
	      }, {
	        oneOfNodeTypes: ["Declaration"]
	      }), function (node, key, val) {
	        if (!process.env.BABEL_TYPES_8_BREAKING) return;

	        if (val && node.source) {
	          throw new TypeError("Cannot export a declaration from a source");
	        }
	      })
	    },
	    assertions: {
	      optional: true,
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("ImportAttribute")))
	    },
	    specifiers: {
	      default: [],
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)(function () {
	        const sourced = (0, _utils$a.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier");
	        const sourceless = (0, _utils$a.assertNodeType)("ExportSpecifier");
	        if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;
	        return function (node, key, val) {
	          const validator = node.source ? sourced : sourceless;
	          validator(node, key, val);
	        };
	      }()))
	    },
	    source: {
	      validate: (0, _utils$a.assertNodeType)("StringLiteral"),
	      optional: true
	    },
	    exportKind: (0, _utils$a.validateOptional)((0, _utils$a.assertOneOf)("type", "value"))
	  }
	});
	(0, _utils$a.default)("ExportSpecifier", {
	  visitor: ["local", "exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: (0, _utils$a.assertNodeType)("Identifier")
	    },
	    exported: {
	      validate: (0, _utils$a.assertNodeType)("Identifier", "StringLiteral")
	    }
	  }
	});
	(0, _utils$a.default)("ForOfStatement", {
	  visitor: ["left", "right", "body"],
	  builder: ["left", "right", "body", "await"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: function () {
	        if (!process.env.BABEL_TYPES_8_BREAKING) {
	          return (0, _utils$a.assertNodeType)("VariableDeclaration", "LVal");
	        }

	        const declaration = (0, _utils$a.assertNodeType)("VariableDeclaration");
	        const lval = (0, _utils$a.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern");
	        return function (node, key, val) {
	          if ((0, _is$2.default)("VariableDeclaration", val)) {
	            declaration(node, key, val);
	          } else {
	            lval(node, key, val);
	          }
	        };
	      }()
	    },
	    right: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    body: {
	      validate: (0, _utils$a.assertNodeType)("Statement")
	    },
	    await: {
	      default: false
	    }
	  }
	});
	(0, _utils$a.default)("ImportDeclaration", {
	  visitor: ["specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration"],
	  fields: {
	    assertions: {
	      optional: true,
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("ImportAttribute")))
	    },
	    specifiers: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))
	    },
	    source: {
	      validate: (0, _utils$a.assertNodeType)("StringLiteral")
	    },
	    importKind: {
	      validate: (0, _utils$a.assertOneOf)("type", "typeof", "value"),
	      optional: true
	    }
	  }
	});
	(0, _utils$a.default)("ImportDefaultSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: (0, _utils$a.assertNodeType)("Identifier")
	    }
	  }
	});
	(0, _utils$a.default)("ImportNamespaceSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: (0, _utils$a.assertNodeType)("Identifier")
	    }
	  }
	});
	(0, _utils$a.default)("ImportSpecifier", {
	  visitor: ["local", "imported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: (0, _utils$a.assertNodeType)("Identifier")
	    },
	    imported: {
	      validate: (0, _utils$a.assertNodeType)("Identifier", "StringLiteral")
	    },
	    importKind: {
	      validate: (0, _utils$a.assertOneOf)("type", "typeof"),
	      optional: true
	    }
	  }
	});
	(0, _utils$a.default)("MetaProperty", {
	  visitor: ["meta", "property"],
	  aliases: ["Expression"],
	  fields: {
	    meta: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertNodeType)("Identifier"), Object.assign(function (node, key, val) {
	        if (!process.env.BABEL_TYPES_8_BREAKING) return;
	        let property;

	        switch (val.name) {
	          case "function":
	            property = "sent";
	            break;

	          case "new":
	            property = "target";
	            break;

	          case "import":
	            property = "meta";
	            break;
	        }

	        if (!(0, _is$2.default)("Identifier", node.property, {
	          name: property
	        })) {
	          throw new TypeError("Unrecognised MetaProperty");
	        }
	      }, {
	        oneOfNodeTypes: ["Identifier"]
	      }))
	    },
	    property: {
	      validate: (0, _utils$a.assertNodeType)("Identifier")
	    }
	  }
	});
	const classMethodOrPropertyCommon = {
	  abstract: {
	    validate: (0, _utils$a.assertValueType)("boolean"),
	    optional: true
	  },
	  accessibility: {
	    validate: (0, _utils$a.assertOneOf)("public", "private", "protected"),
	    optional: true
	  },
	  static: {
	    default: false
	  },
	  override: {
	    default: false
	  },
	  computed: {
	    default: false
	  },
	  optional: {
	    validate: (0, _utils$a.assertValueType)("boolean"),
	    optional: true
	  },
	  key: {
	    validate: (0, _utils$a.chain)(function () {
	      const normal = (0, _utils$a.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral");
	      const computed = (0, _utils$a.assertNodeType)("Expression");
	      return function (node, key, val) {
	        const validator = node.computed ? computed : normal;
	        validator(node, key, val);
	      };
	    }(), (0, _utils$a.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "Expression"))
	  }
	};
	core.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
	const classMethodOrDeclareMethodCommon = Object.assign({}, functionCommon, classMethodOrPropertyCommon, {
	  params: {
	    validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Identifier", "Pattern", "RestElement", "TSParameterProperty")))
	  },
	  kind: {
	    validate: (0, _utils$a.assertOneOf)("get", "set", "method", "constructor"),
	    default: "method"
	  },
	  access: {
	    validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("string"), (0, _utils$a.assertOneOf)("public", "private", "protected")),
	    optional: true
	  },
	  decorators: {
	    validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Decorator"))),
	    optional: true
	  }
	});
	core.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon;
	(0, _utils$a.default)("ClassMethod", {
	  aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
	  builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"],
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  fields: Object.assign({}, classMethodOrDeclareMethodCommon, functionTypeAnnotationCommon, {
	    body: {
	      validate: (0, _utils$a.assertNodeType)("BlockStatement")
	    }
	  })
	});
	(0, _utils$a.default)("ObjectPattern", {
	  visitor: ["properties", "typeAnnotation", "decorators"],
	  builder: ["properties"],
	  aliases: ["Pattern", "PatternLike", "LVal"],
	  fields: Object.assign({}, patternLikeCommon, {
	    properties: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("RestElement", "ObjectProperty")))
	    }
	  })
	});
	(0, _utils$a.default)("SpreadElement", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  deprecatedAlias: "SpreadProperty",
	  fields: {
	    argument: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    }
	  }
	});
	(0, _utils$a.default)("Super", {
	  aliases: ["Expression"]
	});
	(0, _utils$a.default)("TaggedTemplateExpression", {
	  visitor: ["tag", "quasi", "typeParameters"],
	  builder: ["tag", "quasi"],
	  aliases: ["Expression"],
	  fields: {
	    tag: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    quasi: {
	      validate: (0, _utils$a.assertNodeType)("TemplateLiteral")
	    },
	    typeParameters: {
	      validate: (0, _utils$a.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
	      optional: true
	    }
	  }
	});
	(0, _utils$a.default)("TemplateElement", {
	  builder: ["value", "tail"],
	  fields: {
	    value: {
	      validate: (0, _utils$a.assertShape)({
	        raw: {
	          validate: (0, _utils$a.assertValueType)("string")
	        },
	        cooked: {
	          validate: (0, _utils$a.assertValueType)("string"),
	          optional: true
	        }
	      })
	    },
	    tail: {
	      default: false
	    }
	  }
	});
	(0, _utils$a.default)("TemplateLiteral", {
	  visitor: ["quasis", "expressions"],
	  aliases: ["Expression", "Literal"],
	  fields: {
	    quasis: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("TemplateElement")))
	    },
	    expressions: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Expression", "TSType")), function (node, key, val) {
	        if (node.quasis.length !== val.length + 1) {
	          throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.\nExpected ${val.length + 1} quasis but got ${node.quasis.length}`);
	        }
	      })
	    }
	  }
	});
	(0, _utils$a.default)("YieldExpression", {
	  builder: ["argument", "delegate"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    delegate: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("boolean"), Object.assign(function (node, key, val) {
	        if (!process.env.BABEL_TYPES_8_BREAKING) return;

	        if (val && !node.argument) {
	          throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
	        }
	      }, {
	        type: "boolean"
	      })),
	      default: false
	    },
	    argument: {
	      optional: true,
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    }
	  }
	});
	(0, _utils$a.default)("AwaitExpression", {
	  builder: ["argument"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    argument: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    }
	  }
	});
	(0, _utils$a.default)("Import", {
	  aliases: ["Expression"]
	});
	(0, _utils$a.default)("BigIntLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: (0, _utils$a.assertValueType)("string")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	(0, _utils$a.default)("ExportNamespaceSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: (0, _utils$a.assertNodeType)("Identifier")
	    }
	  }
	});
	(0, _utils$a.default)("OptionalMemberExpression", {
	  builder: ["object", "property", "computed", "optional"],
	  visitor: ["object", "property"],
	  aliases: ["Expression"],
	  fields: {
	    object: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    property: {
	      validate: function () {
	        const normal = (0, _utils$a.assertNodeType)("Identifier");
	        const computed = (0, _utils$a.assertNodeType)("Expression");

	        const validator = function (node, key, val) {
	          const validator = node.computed ? computed : normal;
	          validator(node, key, val);
	        };

	        validator.oneOfNodeTypes = ["Expression", "Identifier"];
	        return validator;
	      }()
	    },
	    computed: {
	      default: false
	    },
	    optional: {
	      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$a.assertValueType)("boolean") : (0, _utils$a.chain)((0, _utils$a.assertValueType)("boolean"), (0, _utils$a.assertOptionalChainStart)())
	    }
	  }
	});
	(0, _utils$a.default)("OptionalCallExpression", {
	  visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
	  builder: ["callee", "arguments", "optional"],
	  aliases: ["Expression"],
	  fields: {
	    callee: {
	      validate: (0, _utils$a.assertNodeType)("Expression")
	    },
	    arguments: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder")))
	    },
	    optional: {
	      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$a.assertValueType)("boolean") : (0, _utils$a.chain)((0, _utils$a.assertValueType)("boolean"), (0, _utils$a.assertOptionalChainStart)())
	    },
	    typeArguments: {
	      validate: (0, _utils$a.assertNodeType)("TypeParameterInstantiation"),
	      optional: true
	    },
	    typeParameters: {
	      validate: (0, _utils$a.assertNodeType)("TSTypeParameterInstantiation"),
	      optional: true
	    }
	  }
	});
	(0, _utils$a.default)("ClassProperty", {
	  visitor: ["key", "value", "typeAnnotation", "decorators"],
	  builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
	  aliases: ["Property"],
	  fields: Object.assign({}, classMethodOrPropertyCommon, {
	    value: {
	      validate: (0, _utils$a.assertNodeType)("Expression"),
	      optional: true
	    },
	    definite: {
	      validate: (0, _utils$a.assertValueType)("boolean"),
	      optional: true
	    },
	    typeAnnotation: {
	      validate: (0, _utils$a.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
	      optional: true
	    },
	    decorators: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Decorator"))),
	      optional: true
	    },
	    readonly: {
	      validate: (0, _utils$a.assertValueType)("boolean"),
	      optional: true
	    },
	    declare: {
	      validate: (0, _utils$a.assertValueType)("boolean"),
	      optional: true
	    },
	    variance: {
	      validate: (0, _utils$a.assertNodeType)("Variance"),
	      optional: true
	    }
	  })
	});
	(0, _utils$a.default)("ClassPrivateProperty", {
	  visitor: ["key", "value", "decorators", "typeAnnotation"],
	  builder: ["key", "value", "decorators", "static"],
	  aliases: ["Property", "Private"],
	  fields: {
	    key: {
	      validate: (0, _utils$a.assertNodeType)("PrivateName")
	    },
	    value: {
	      validate: (0, _utils$a.assertNodeType)("Expression"),
	      optional: true
	    },
	    typeAnnotation: {
	      validate: (0, _utils$a.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
	      optional: true
	    },
	    decorators: {
	      validate: (0, _utils$a.chain)((0, _utils$a.assertValueType)("array"), (0, _utils$a.assertEach)((0, _utils$a.assertNodeType)("Decorator"))),
	      optional: true
	    },
	    readonly: {
	      validate: (0, _utils$a.assertValueType)("boolean"),
	      optional: true
	    },
	    definite: {
	      validate: (0, _utils$a.assertValueType)("boolean"),
	      optional: true
	    },
	    variance: {
	      validate: (0, _utils$a.assertNodeType)("Variance"),
	      optional: true
	    }
	  }
	});
	(0, _utils$a.default)("ClassPrivateMethod", {
	  builder: ["kind", "key", "params", "body", "static"],
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"],
	  fields: Object.assign({}, classMethodOrDeclareMethodCommon, functionTypeAnnotationCommon, {
	    key: {
	      validate: (0, _utils$a.assertNodeType)("PrivateName")
	    },
	    body: {
	      validate: (0, _utils$a.assertNodeType)("BlockStatement")
	    }
	  })
	});
	(0, _utils$a.default)("PrivateName", {
	  visitor: ["id"],
	  aliases: ["Private"],
	  fields: {
	    id: {
	      validate: (0, _utils$a.assertNodeType)("Identifier")
	    }
	  }
	});

	var _utils$9 = utils$3;

	const defineInterfaceishType = (name, typeParameterType = "TypeParameterDeclaration") => {
	  (0, _utils$9.default)(name, {
	    builder: ["id", "typeParameters", "extends", "body"],
	    visitor: ["id", "typeParameters", "extends", "mixins", "implements", "body"],
	    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	    fields: {
	      id: (0, _utils$9.validateType)("Identifier"),
	      typeParameters: (0, _utils$9.validateOptionalType)(typeParameterType),
	      extends: (0, _utils$9.validateOptional)((0, _utils$9.arrayOfType)("InterfaceExtends")),
	      mixins: (0, _utils$9.validateOptional)((0, _utils$9.arrayOfType)("InterfaceExtends")),
	      implements: (0, _utils$9.validateOptional)((0, _utils$9.arrayOfType)("ClassImplements")),
	      body: (0, _utils$9.validateType)("ObjectTypeAnnotation")
	    }
	  });
	};

	(0, _utils$9.default)("AnyTypeAnnotation", {
	  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
	});
	(0, _utils$9.default)("ArrayTypeAnnotation", {
	  visitor: ["elementType"],
	  aliases: ["Flow", "FlowType"],
	  fields: {
	    elementType: (0, _utils$9.validateType)("FlowType")
	  }
	});
	(0, _utils$9.default)("BooleanTypeAnnotation", {
	  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
	});
	(0, _utils$9.default)("BooleanLiteralTypeAnnotation", {
	  builder: ["value"],
	  aliases: ["Flow", "FlowType"],
	  fields: {
	    value: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean"))
	  }
	});
	(0, _utils$9.default)("NullLiteralTypeAnnotation", {
	  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
	});
	(0, _utils$9.default)("ClassImplements", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    id: (0, _utils$9.validateType)("Identifier"),
	    typeParameters: (0, _utils$9.validateOptionalType)("TypeParameterInstantiation")
	  }
	});
	defineInterfaceishType("DeclareClass");
	(0, _utils$9.default)("DeclareFunction", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    id: (0, _utils$9.validateType)("Identifier"),
	    predicate: (0, _utils$9.validateOptionalType)("DeclaredPredicate")
	  }
	});
	defineInterfaceishType("DeclareInterface");
	(0, _utils$9.default)("DeclareModule", {
	  builder: ["id", "body", "kind"],
	  visitor: ["id", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    id: (0, _utils$9.validateType)(["Identifier", "StringLiteral"]),
	    body: (0, _utils$9.validateType)("BlockStatement"),
	    kind: (0, _utils$9.validateOptional)((0, _utils$9.assertOneOf)("CommonJS", "ES"))
	  }
	});
	(0, _utils$9.default)("DeclareModuleExports", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    typeAnnotation: (0, _utils$9.validateType)("TypeAnnotation")
	  }
	});
	(0, _utils$9.default)("DeclareTypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    id: (0, _utils$9.validateType)("Identifier"),
	    typeParameters: (0, _utils$9.validateOptionalType)("TypeParameterDeclaration"),
	    right: (0, _utils$9.validateType)("FlowType")
	  }
	});
	(0, _utils$9.default)("DeclareOpaqueType", {
	  visitor: ["id", "typeParameters", "supertype"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    id: (0, _utils$9.validateType)("Identifier"),
	    typeParameters: (0, _utils$9.validateOptionalType)("TypeParameterDeclaration"),
	    supertype: (0, _utils$9.validateOptionalType)("FlowType"),
	    impltype: (0, _utils$9.validateOptionalType)("FlowType")
	  }
	});
	(0, _utils$9.default)("DeclareVariable", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    id: (0, _utils$9.validateType)("Identifier")
	  }
	});
	(0, _utils$9.default)("DeclareExportDeclaration", {
	  visitor: ["declaration", "specifiers", "source"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    declaration: (0, _utils$9.validateOptionalType)("Flow"),
	    specifiers: (0, _utils$9.validateOptional)((0, _utils$9.arrayOfType)(["ExportSpecifier", "ExportNamespaceSpecifier"])),
	    source: (0, _utils$9.validateOptionalType)("StringLiteral"),
	    default: (0, _utils$9.validateOptional)((0, _utils$9.assertValueType)("boolean"))
	  }
	});
	(0, _utils$9.default)("DeclareExportAllDeclaration", {
	  visitor: ["source"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    source: (0, _utils$9.validateType)("StringLiteral"),
	    exportKind: (0, _utils$9.validateOptional)((0, _utils$9.assertOneOf)("type", "value"))
	  }
	});
	(0, _utils$9.default)("DeclaredPredicate", {
	  visitor: ["value"],
	  aliases: ["Flow", "FlowPredicate"],
	  fields: {
	    value: (0, _utils$9.validateType)("Flow")
	  }
	});
	(0, _utils$9.default)("ExistsTypeAnnotation", {
	  aliases: ["Flow", "FlowType"]
	});
	(0, _utils$9.default)("FunctionTypeAnnotation", {
	  visitor: ["typeParameters", "params", "rest", "returnType"],
	  aliases: ["Flow", "FlowType"],
	  fields: {
	    typeParameters: (0, _utils$9.validateOptionalType)("TypeParameterDeclaration"),
	    params: (0, _utils$9.validate)((0, _utils$9.arrayOfType)("FunctionTypeParam")),
	    rest: (0, _utils$9.validateOptionalType)("FunctionTypeParam"),
	    this: (0, _utils$9.validateOptionalType)("FunctionTypeParam"),
	    returnType: (0, _utils$9.validateType)("FlowType")
	  }
	});
	(0, _utils$9.default)("FunctionTypeParam", {
	  visitor: ["name", "typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    name: (0, _utils$9.validateOptionalType)("Identifier"),
	    typeAnnotation: (0, _utils$9.validateType)("FlowType"),
	    optional: (0, _utils$9.validateOptional)((0, _utils$9.assertValueType)("boolean"))
	  }
	});
	(0, _utils$9.default)("GenericTypeAnnotation", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow", "FlowType"],
	  fields: {
	    id: (0, _utils$9.validateType)(["Identifier", "QualifiedTypeIdentifier"]),
	    typeParameters: (0, _utils$9.validateOptionalType)("TypeParameterInstantiation")
	  }
	});
	(0, _utils$9.default)("InferredPredicate", {
	  aliases: ["Flow", "FlowPredicate"]
	});
	(0, _utils$9.default)("InterfaceExtends", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    id: (0, _utils$9.validateType)(["Identifier", "QualifiedTypeIdentifier"]),
	    typeParameters: (0, _utils$9.validateOptionalType)("TypeParameterInstantiation")
	  }
	});
	defineInterfaceishType("InterfaceDeclaration");
	(0, _utils$9.default)("InterfaceTypeAnnotation", {
	  visitor: ["extends", "body"],
	  aliases: ["Flow", "FlowType"],
	  fields: {
	    extends: (0, _utils$9.validateOptional)((0, _utils$9.arrayOfType)("InterfaceExtends")),
	    body: (0, _utils$9.validateType)("ObjectTypeAnnotation")
	  }
	});
	(0, _utils$9.default)("IntersectionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow", "FlowType"],
	  fields: {
	    types: (0, _utils$9.validate)((0, _utils$9.arrayOfType)("FlowType"))
	  }
	});
	(0, _utils$9.default)("MixedTypeAnnotation", {
	  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
	});
	(0, _utils$9.default)("EmptyTypeAnnotation", {
	  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
	});
	(0, _utils$9.default)("NullableTypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow", "FlowType"],
	  fields: {
	    typeAnnotation: (0, _utils$9.validateType)("FlowType")
	  }
	});
	(0, _utils$9.default)("NumberLiteralTypeAnnotation", {
	  builder: ["value"],
	  aliases: ["Flow", "FlowType"],
	  fields: {
	    value: (0, _utils$9.validate)((0, _utils$9.assertValueType)("number"))
	  }
	});
	(0, _utils$9.default)("NumberTypeAnnotation", {
	  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
	});
	(0, _utils$9.default)("ObjectTypeAnnotation", {
	  visitor: ["properties", "indexers", "callProperties", "internalSlots"],
	  aliases: ["Flow", "FlowType"],
	  builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"],
	  fields: {
	    properties: (0, _utils$9.validate)((0, _utils$9.arrayOfType)(["ObjectTypeProperty", "ObjectTypeSpreadProperty"])),
	    indexers: (0, _utils$9.validateOptional)((0, _utils$9.arrayOfType)("ObjectTypeIndexer")),
	    callProperties: (0, _utils$9.validateOptional)((0, _utils$9.arrayOfType)("ObjectTypeCallProperty")),
	    internalSlots: (0, _utils$9.validateOptional)((0, _utils$9.arrayOfType)("ObjectTypeInternalSlot")),
	    exact: {
	      validate: (0, _utils$9.assertValueType)("boolean"),
	      default: false
	    },
	    inexact: (0, _utils$9.validateOptional)((0, _utils$9.assertValueType)("boolean"))
	  }
	});
	(0, _utils$9.default)("ObjectTypeInternalSlot", {
	  visitor: ["id", "value", "optional", "static", "method"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    id: (0, _utils$9.validateType)("Identifier"),
	    value: (0, _utils$9.validateType)("FlowType"),
	    optional: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean")),
	    static: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean")),
	    method: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean"))
	  }
	});
	(0, _utils$9.default)("ObjectTypeCallProperty", {
	  visitor: ["value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    value: (0, _utils$9.validateType)("FlowType"),
	    static: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean"))
	  }
	});
	(0, _utils$9.default)("ObjectTypeIndexer", {
	  visitor: ["id", "key", "value", "variance"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    id: (0, _utils$9.validateOptionalType)("Identifier"),
	    key: (0, _utils$9.validateType)("FlowType"),
	    value: (0, _utils$9.validateType)("FlowType"),
	    static: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean")),
	    variance: (0, _utils$9.validateOptionalType)("Variance")
	  }
	});
	(0, _utils$9.default)("ObjectTypeProperty", {
	  visitor: ["key", "value", "variance"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    key: (0, _utils$9.validateType)(["Identifier", "StringLiteral"]),
	    value: (0, _utils$9.validateType)("FlowType"),
	    kind: (0, _utils$9.validate)((0, _utils$9.assertOneOf)("init", "get", "set")),
	    static: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean")),
	    proto: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean")),
	    optional: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean")),
	    variance: (0, _utils$9.validateOptionalType)("Variance"),
	    method: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean"))
	  }
	});
	(0, _utils$9.default)("ObjectTypeSpreadProperty", {
	  visitor: ["argument"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    argument: (0, _utils$9.validateType)("FlowType")
	  }
	});
	(0, _utils$9.default)("OpaqueType", {
	  visitor: ["id", "typeParameters", "supertype", "impltype"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    id: (0, _utils$9.validateType)("Identifier"),
	    typeParameters: (0, _utils$9.validateOptionalType)("TypeParameterDeclaration"),
	    supertype: (0, _utils$9.validateOptionalType)("FlowType"),
	    impltype: (0, _utils$9.validateType)("FlowType")
	  }
	});
	(0, _utils$9.default)("QualifiedTypeIdentifier", {
	  visitor: ["id", "qualification"],
	  aliases: ["Flow"],
	  fields: {
	    id: (0, _utils$9.validateType)("Identifier"),
	    qualification: (0, _utils$9.validateType)(["Identifier", "QualifiedTypeIdentifier"])
	  }
	});
	(0, _utils$9.default)("StringLiteralTypeAnnotation", {
	  builder: ["value"],
	  aliases: ["Flow", "FlowType"],
	  fields: {
	    value: (0, _utils$9.validate)((0, _utils$9.assertValueType)("string"))
	  }
	});
	(0, _utils$9.default)("StringTypeAnnotation", {
	  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
	});
	(0, _utils$9.default)("SymbolTypeAnnotation", {
	  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
	});
	(0, _utils$9.default)("ThisTypeAnnotation", {
	  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
	});
	(0, _utils$9.default)("TupleTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow", "FlowType"],
	  fields: {
	    types: (0, _utils$9.validate)((0, _utils$9.arrayOfType)("FlowType"))
	  }
	});
	(0, _utils$9.default)("TypeofTypeAnnotation", {
	  visitor: ["argument"],
	  aliases: ["Flow", "FlowType"],
	  fields: {
	    argument: (0, _utils$9.validateType)("FlowType")
	  }
	});
	(0, _utils$9.default)("TypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    id: (0, _utils$9.validateType)("Identifier"),
	    typeParameters: (0, _utils$9.validateOptionalType)("TypeParameterDeclaration"),
	    right: (0, _utils$9.validateType)("FlowType")
	  }
	});
	(0, _utils$9.default)("TypeAnnotation", {
	  aliases: ["Flow"],
	  visitor: ["typeAnnotation"],
	  fields: {
	    typeAnnotation: (0, _utils$9.validateType)("FlowType")
	  }
	});
	(0, _utils$9.default)("TypeCastExpression", {
	  visitor: ["expression", "typeAnnotation"],
	  aliases: ["Flow", "ExpressionWrapper", "Expression"],
	  fields: {
	    expression: (0, _utils$9.validateType)("Expression"),
	    typeAnnotation: (0, _utils$9.validateType)("TypeAnnotation")
	  }
	});
	(0, _utils$9.default)("TypeParameter", {
	  aliases: ["Flow"],
	  visitor: ["bound", "default", "variance"],
	  fields: {
	    name: (0, _utils$9.validate)((0, _utils$9.assertValueType)("string")),
	    bound: (0, _utils$9.validateOptionalType)("TypeAnnotation"),
	    default: (0, _utils$9.validateOptionalType)("FlowType"),
	    variance: (0, _utils$9.validateOptionalType)("Variance")
	  }
	});
	(0, _utils$9.default)("TypeParameterDeclaration", {
	  aliases: ["Flow"],
	  visitor: ["params"],
	  fields: {
	    params: (0, _utils$9.validate)((0, _utils$9.arrayOfType)("TypeParameter"))
	  }
	});
	(0, _utils$9.default)("TypeParameterInstantiation", {
	  aliases: ["Flow"],
	  visitor: ["params"],
	  fields: {
	    params: (0, _utils$9.validate)((0, _utils$9.arrayOfType)("FlowType"))
	  }
	});
	(0, _utils$9.default)("UnionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow", "FlowType"],
	  fields: {
	    types: (0, _utils$9.validate)((0, _utils$9.arrayOfType)("FlowType"))
	  }
	});
	(0, _utils$9.default)("Variance", {
	  aliases: ["Flow"],
	  builder: ["kind"],
	  fields: {
	    kind: (0, _utils$9.validate)((0, _utils$9.assertOneOf)("minus", "plus"))
	  }
	});
	(0, _utils$9.default)("VoidTypeAnnotation", {
	  aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
	});
	(0, _utils$9.default)("EnumDeclaration", {
	  aliases: ["Statement", "Declaration"],
	  visitor: ["id", "body"],
	  fields: {
	    id: (0, _utils$9.validateType)("Identifier"),
	    body: (0, _utils$9.validateType)(["EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody"])
	  }
	});
	(0, _utils$9.default)("EnumBooleanBody", {
	  aliases: ["EnumBody"],
	  visitor: ["members"],
	  fields: {
	    explicitType: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean")),
	    members: (0, _utils$9.validateArrayOfType)("EnumBooleanMember"),
	    hasUnknownMembers: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean"))
	  }
	});
	(0, _utils$9.default)("EnumNumberBody", {
	  aliases: ["EnumBody"],
	  visitor: ["members"],
	  fields: {
	    explicitType: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean")),
	    members: (0, _utils$9.validateArrayOfType)("EnumNumberMember"),
	    hasUnknownMembers: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean"))
	  }
	});
	(0, _utils$9.default)("EnumStringBody", {
	  aliases: ["EnumBody"],
	  visitor: ["members"],
	  fields: {
	    explicitType: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean")),
	    members: (0, _utils$9.validateArrayOfType)(["EnumStringMember", "EnumDefaultedMember"]),
	    hasUnknownMembers: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean"))
	  }
	});
	(0, _utils$9.default)("EnumSymbolBody", {
	  aliases: ["EnumBody"],
	  visitor: ["members"],
	  fields: {
	    members: (0, _utils$9.validateArrayOfType)("EnumDefaultedMember"),
	    hasUnknownMembers: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean"))
	  }
	});
	(0, _utils$9.default)("EnumBooleanMember", {
	  aliases: ["EnumMember"],
	  visitor: ["id"],
	  fields: {
	    id: (0, _utils$9.validateType)("Identifier"),
	    init: (0, _utils$9.validateType)("BooleanLiteral")
	  }
	});
	(0, _utils$9.default)("EnumNumberMember", {
	  aliases: ["EnumMember"],
	  visitor: ["id", "init"],
	  fields: {
	    id: (0, _utils$9.validateType)("Identifier"),
	    init: (0, _utils$9.validateType)("NumericLiteral")
	  }
	});
	(0, _utils$9.default)("EnumStringMember", {
	  aliases: ["EnumMember"],
	  visitor: ["id", "init"],
	  fields: {
	    id: (0, _utils$9.validateType)("Identifier"),
	    init: (0, _utils$9.validateType)("StringLiteral")
	  }
	});
	(0, _utils$9.default)("EnumDefaultedMember", {
	  aliases: ["EnumMember"],
	  visitor: ["id"],
	  fields: {
	    id: (0, _utils$9.validateType)("Identifier")
	  }
	});
	(0, _utils$9.default)("IndexedAccessType", {
	  visitor: ["objectType", "indexType"],
	  aliases: ["Flow", "FlowType"],
	  fields: {
	    objectType: (0, _utils$9.validateType)("FlowType"),
	    indexType: (0, _utils$9.validateType)("FlowType")
	  }
	});
	(0, _utils$9.default)("OptionalIndexedAccessType", {
	  visitor: ["objectType", "indexType"],
	  aliases: ["Flow", "FlowType"],
	  fields: {
	    objectType: (0, _utils$9.validateType)("FlowType"),
	    indexType: (0, _utils$9.validateType)("FlowType"),
	    optional: (0, _utils$9.validate)((0, _utils$9.assertValueType)("boolean"))
	  }
	});

	var _utils$8 = utils$3;

	(0, _utils$8.default)("JSXAttribute", {
	  visitor: ["name", "value"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: (0, _utils$8.assertNodeType)("JSXIdentifier", "JSXNamespacedName")
	    },
	    value: {
	      optional: true,
	      validate: (0, _utils$8.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer")
	    }
	  }
	});
	(0, _utils$8.default)("JSXClosingElement", {
	  visitor: ["name"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: (0, _utils$8.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
	    }
	  }
	});
	(0, _utils$8.default)("JSXElement", {
	  builder: ["openingElement", "closingElement", "children", "selfClosing"],
	  visitor: ["openingElement", "children", "closingElement"],
	  aliases: ["JSX", "Immutable", "Expression"],
	  fields: {
	    openingElement: {
	      validate: (0, _utils$8.assertNodeType)("JSXOpeningElement")
	    },
	    closingElement: {
	      optional: true,
	      validate: (0, _utils$8.assertNodeType)("JSXClosingElement")
	    },
	    children: {
	      validate: (0, _utils$8.chain)((0, _utils$8.assertValueType)("array"), (0, _utils$8.assertEach)((0, _utils$8.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")))
	    },
	    selfClosing: {
	      validate: (0, _utils$8.assertValueType)("boolean"),
	      optional: true
	    }
	  }
	});
	(0, _utils$8.default)("JSXEmptyExpression", {
	  aliases: ["JSX"]
	});
	(0, _utils$8.default)("JSXExpressionContainer", {
	  visitor: ["expression"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    expression: {
	      validate: (0, _utils$8.assertNodeType)("Expression", "JSXEmptyExpression")
	    }
	  }
	});
	(0, _utils$8.default)("JSXSpreadChild", {
	  visitor: ["expression"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    expression: {
	      validate: (0, _utils$8.assertNodeType)("Expression")
	    }
	  }
	});
	(0, _utils$8.default)("JSXIdentifier", {
	  builder: ["name"],
	  aliases: ["JSX"],
	  fields: {
	    name: {
	      validate: (0, _utils$8.assertValueType)("string")
	    }
	  }
	});
	(0, _utils$8.default)("JSXMemberExpression", {
	  visitor: ["object", "property"],
	  aliases: ["JSX"],
	  fields: {
	    object: {
	      validate: (0, _utils$8.assertNodeType)("JSXMemberExpression", "JSXIdentifier")
	    },
	    property: {
	      validate: (0, _utils$8.assertNodeType)("JSXIdentifier")
	    }
	  }
	});
	(0, _utils$8.default)("JSXNamespacedName", {
	  visitor: ["namespace", "name"],
	  aliases: ["JSX"],
	  fields: {
	    namespace: {
	      validate: (0, _utils$8.assertNodeType)("JSXIdentifier")
	    },
	    name: {
	      validate: (0, _utils$8.assertNodeType)("JSXIdentifier")
	    }
	  }
	});
	(0, _utils$8.default)("JSXOpeningElement", {
	  builder: ["name", "attributes", "selfClosing"],
	  visitor: ["name", "attributes"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: (0, _utils$8.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
	    },
	    selfClosing: {
	      default: false
	    },
	    attributes: {
	      validate: (0, _utils$8.chain)((0, _utils$8.assertValueType)("array"), (0, _utils$8.assertEach)((0, _utils$8.assertNodeType)("JSXAttribute", "JSXSpreadAttribute")))
	    },
	    typeParameters: {
	      validate: (0, _utils$8.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
	      optional: true
	    }
	  }
	});
	(0, _utils$8.default)("JSXSpreadAttribute", {
	  visitor: ["argument"],
	  aliases: ["JSX"],
	  fields: {
	    argument: {
	      validate: (0, _utils$8.assertNodeType)("Expression")
	    }
	  }
	});
	(0, _utils$8.default)("JSXText", {
	  aliases: ["JSX", "Immutable"],
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: (0, _utils$8.assertValueType)("string")
	    }
	  }
	});
	(0, _utils$8.default)("JSXFragment", {
	  builder: ["openingFragment", "closingFragment", "children"],
	  visitor: ["openingFragment", "children", "closingFragment"],
	  aliases: ["JSX", "Immutable", "Expression"],
	  fields: {
	    openingFragment: {
	      validate: (0, _utils$8.assertNodeType)("JSXOpeningFragment")
	    },
	    closingFragment: {
	      validate: (0, _utils$8.assertNodeType)("JSXClosingFragment")
	    },
	    children: {
	      validate: (0, _utils$8.chain)((0, _utils$8.assertValueType)("array"), (0, _utils$8.assertEach)((0, _utils$8.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")))
	    }
	  }
	});
	(0, _utils$8.default)("JSXOpeningFragment", {
	  aliases: ["JSX", "Immutable"]
	});
	(0, _utils$8.default)("JSXClosingFragment", {
	  aliases: ["JSX", "Immutable"]
	});

	var placeholders = {};

	Object.defineProperty(placeholders, "__esModule", {
	  value: true
	});
	placeholders.PLACEHOLDERS_FLIPPED_ALIAS = placeholders.PLACEHOLDERS_ALIAS = placeholders.PLACEHOLDERS = void 0;

	var _utils$7 = utils$3;

	const PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"];
	placeholders.PLACEHOLDERS = PLACEHOLDERS;
	const PLACEHOLDERS_ALIAS = {
	  Declaration: ["Statement"],
	  Pattern: ["PatternLike", "LVal"]
	};
	placeholders.PLACEHOLDERS_ALIAS = PLACEHOLDERS_ALIAS;

	for (const type of PLACEHOLDERS) {
	  const alias = _utils$7.ALIAS_KEYS[type];
	  if (alias != null && alias.length) PLACEHOLDERS_ALIAS[type] = alias;
	}

	const PLACEHOLDERS_FLIPPED_ALIAS = {};
	placeholders.PLACEHOLDERS_FLIPPED_ALIAS = PLACEHOLDERS_FLIPPED_ALIAS;
	Object.keys(PLACEHOLDERS_ALIAS).forEach(type => {
	  PLACEHOLDERS_ALIAS[type].forEach(alias => {
	    if (!Object.hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {
	      PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];
	    }

	    PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
	  });
	});

	var _utils$6 = utils$3;

	var _placeholders = placeholders;

	{
	  (0, _utils$6.default)("Noop", {
	    visitor: []
	  });
	}
	(0, _utils$6.default)("Placeholder", {
	  visitor: [],
	  builder: ["expectedNode", "name"],
	  fields: {
	    name: {
	      validate: (0, _utils$6.assertNodeType)("Identifier")
	    },
	    expectedNode: {
	      validate: (0, _utils$6.assertOneOf)(..._placeholders.PLACEHOLDERS)
	    }
	  }
	});
	(0, _utils$6.default)("V8IntrinsicIdentifier", {
	  builder: ["name"],
	  fields: {
	    name: {
	      validate: (0, _utils$6.assertValueType)("string")
	    }
	  }
	});

	var _utils$5 = utils$3;

	(0, _utils$5.default)("ArgumentPlaceholder", {});
	(0, _utils$5.default)("BindExpression", {
	  visitor: ["object", "callee"],
	  aliases: ["Expression"],
	  fields: !process.env.BABEL_TYPES_8_BREAKING ? {
	    object: {
	      validate: Object.assign(() => {}, {
	        oneOfNodeTypes: ["Expression"]
	      })
	    },
	    callee: {
	      validate: Object.assign(() => {}, {
	        oneOfNodeTypes: ["Expression"]
	      })
	    }
	  } : {
	    object: {
	      validate: (0, _utils$5.assertNodeType)("Expression")
	    },
	    callee: {
	      validate: (0, _utils$5.assertNodeType)("Expression")
	    }
	  }
	});
	(0, _utils$5.default)("ImportAttribute", {
	  visitor: ["key", "value"],
	  fields: {
	    key: {
	      validate: (0, _utils$5.assertNodeType)("Identifier", "StringLiteral")
	    },
	    value: {
	      validate: (0, _utils$5.assertNodeType)("StringLiteral")
	    }
	  }
	});
	(0, _utils$5.default)("Decorator", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: (0, _utils$5.assertNodeType)("Expression")
	    }
	  }
	});
	(0, _utils$5.default)("DoExpression", {
	  visitor: ["body"],
	  builder: ["body", "async"],
	  aliases: ["Expression"],
	  fields: {
	    body: {
	      validate: (0, _utils$5.assertNodeType)("BlockStatement")
	    },
	    async: {
	      validate: (0, _utils$5.assertValueType)("boolean"),
	      default: false
	    }
	  }
	});
	(0, _utils$5.default)("ExportDefaultSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: (0, _utils$5.assertNodeType)("Identifier")
	    }
	  }
	});
	(0, _utils$5.default)("RecordExpression", {
	  visitor: ["properties"],
	  aliases: ["Expression"],
	  fields: {
	    properties: {
	      validate: (0, _utils$5.chain)((0, _utils$5.assertValueType)("array"), (0, _utils$5.assertEach)((0, _utils$5.assertNodeType)("ObjectProperty", "SpreadElement")))
	    }
	  }
	});
	(0, _utils$5.default)("TupleExpression", {
	  fields: {
	    elements: {
	      validate: (0, _utils$5.chain)((0, _utils$5.assertValueType)("array"), (0, _utils$5.assertEach)((0, _utils$5.assertNodeType)("Expression", "SpreadElement"))),
	      default: []
	    }
	  },
	  visitor: ["elements"],
	  aliases: ["Expression"]
	});
	(0, _utils$5.default)("DecimalLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: (0, _utils$5.assertValueType)("string")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	(0, _utils$5.default)("StaticBlock", {
	  visitor: ["body"],
	  fields: {
	    body: {
	      validate: (0, _utils$5.chain)((0, _utils$5.assertValueType)("array"), (0, _utils$5.assertEach)((0, _utils$5.assertNodeType)("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent"]
	});
	(0, _utils$5.default)("ModuleExpression", {
	  visitor: ["body"],
	  fields: {
	    body: {
	      validate: (0, _utils$5.assertNodeType)("Program")
	    }
	  },
	  aliases: ["Expression"]
	});
	(0, _utils$5.default)("TopicReference", {
	  aliases: ["Expression"]
	});
	(0, _utils$5.default)("PipelineTopicExpression", {
	  builder: ["expression"],
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: (0, _utils$5.assertNodeType)("Expression")
	    }
	  },
	  aliases: ["Expression"]
	});
	(0, _utils$5.default)("PipelineBareFunction", {
	  builder: ["callee"],
	  visitor: ["callee"],
	  fields: {
	    callee: {
	      validate: (0, _utils$5.assertNodeType)("Expression")
	    }
	  },
	  aliases: ["Expression"]
	});
	(0, _utils$5.default)("PipelinePrimaryTopicReference", {
	  aliases: ["Expression"]
	});

	var _utils$4 = utils$3;

	var _core = core;

	var _is$1 = is$2;

	const bool = (0, _utils$4.assertValueType)("boolean");
	const tSFunctionTypeAnnotationCommon = {
	  returnType: {
	    validate: (0, _utils$4.assertNodeType)("TSTypeAnnotation", "Noop"),
	    optional: true
	  },
	  typeParameters: {
	    validate: (0, _utils$4.assertNodeType)("TSTypeParameterDeclaration", "Noop"),
	    optional: true
	  }
	};
	(0, _utils$4.default)("TSParameterProperty", {
	  aliases: ["LVal"],
	  visitor: ["parameter"],
	  fields: {
	    accessibility: {
	      validate: (0, _utils$4.assertOneOf)("public", "private", "protected"),
	      optional: true
	    },
	    readonly: {
	      validate: (0, _utils$4.assertValueType)("boolean"),
	      optional: true
	    },
	    parameter: {
	      validate: (0, _utils$4.assertNodeType)("Identifier", "AssignmentPattern")
	    },
	    override: {
	      validate: (0, _utils$4.assertValueType)("boolean"),
	      optional: true
	    },
	    decorators: {
	      validate: (0, _utils$4.chain)((0, _utils$4.assertValueType)("array"), (0, _utils$4.assertEach)((0, _utils$4.assertNodeType)("Decorator"))),
	      optional: true
	    }
	  }
	});
	(0, _utils$4.default)("TSDeclareFunction", {
	  aliases: ["Statement", "Declaration"],
	  visitor: ["id", "typeParameters", "params", "returnType"],
	  fields: Object.assign({}, _core.functionDeclarationCommon, tSFunctionTypeAnnotationCommon)
	});
	(0, _utils$4.default)("TSDeclareMethod", {
	  visitor: ["decorators", "key", "typeParameters", "params", "returnType"],
	  fields: Object.assign({}, _core.classMethodOrDeclareMethodCommon, tSFunctionTypeAnnotationCommon)
	});
	(0, _utils$4.default)("TSQualifiedName", {
	  aliases: ["TSEntityName"],
	  visitor: ["left", "right"],
	  fields: {
	    left: (0, _utils$4.validateType)("TSEntityName"),
	    right: (0, _utils$4.validateType)("Identifier")
	  }
	});
	const signatureDeclarationCommon = {
	  typeParameters: (0, _utils$4.validateOptionalType)("TSTypeParameterDeclaration"),
	  parameters: (0, _utils$4.validateArrayOfType)(["Identifier", "RestElement"]),
	  typeAnnotation: (0, _utils$4.validateOptionalType)("TSTypeAnnotation")
	};
	const callConstructSignatureDeclaration = {
	  aliases: ["TSTypeElement"],
	  visitor: ["typeParameters", "parameters", "typeAnnotation"],
	  fields: signatureDeclarationCommon
	};
	(0, _utils$4.default)("TSCallSignatureDeclaration", callConstructSignatureDeclaration);
	(0, _utils$4.default)("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
	const namedTypeElementCommon = {
	  key: (0, _utils$4.validateType)("Expression"),
	  computed: (0, _utils$4.validate)(bool),
	  optional: (0, _utils$4.validateOptional)(bool)
	};
	(0, _utils$4.default)("TSPropertySignature", {
	  aliases: ["TSTypeElement"],
	  visitor: ["key", "typeAnnotation", "initializer"],
	  fields: Object.assign({}, namedTypeElementCommon, {
	    readonly: (0, _utils$4.validateOptional)(bool),
	    typeAnnotation: (0, _utils$4.validateOptionalType)("TSTypeAnnotation"),
	    initializer: (0, _utils$4.validateOptionalType)("Expression"),
	    kind: {
	      validate: (0, _utils$4.assertOneOf)("get", "set")
	    }
	  })
	});
	(0, _utils$4.default)("TSMethodSignature", {
	  aliases: ["TSTypeElement"],
	  visitor: ["key", "typeParameters", "parameters", "typeAnnotation"],
	  fields: Object.assign({}, signatureDeclarationCommon, namedTypeElementCommon, {
	    kind: {
	      validate: (0, _utils$4.assertOneOf)("method", "get", "set")
	    }
	  })
	});
	(0, _utils$4.default)("TSIndexSignature", {
	  aliases: ["TSTypeElement"],
	  visitor: ["parameters", "typeAnnotation"],
	  fields: {
	    readonly: (0, _utils$4.validateOptional)(bool),
	    static: (0, _utils$4.validateOptional)(bool),
	    parameters: (0, _utils$4.validateArrayOfType)("Identifier"),
	    typeAnnotation: (0, _utils$4.validateOptionalType)("TSTypeAnnotation")
	  }
	});
	const tsKeywordTypes = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];

	for (const type of tsKeywordTypes) {
	  (0, _utils$4.default)(type, {
	    aliases: ["TSType", "TSBaseType"],
	    visitor: [],
	    fields: {}
	  });
	}

	(0, _utils$4.default)("TSThisType", {
	  aliases: ["TSType", "TSBaseType"],
	  visitor: [],
	  fields: {}
	});
	const fnOrCtrBase = {
	  aliases: ["TSType"],
	  visitor: ["typeParameters", "parameters", "typeAnnotation"]
	};
	(0, _utils$4.default)("TSFunctionType", Object.assign({}, fnOrCtrBase, {
	  fields: signatureDeclarationCommon
	}));
	(0, _utils$4.default)("TSConstructorType", Object.assign({}, fnOrCtrBase, {
	  fields: Object.assign({}, signatureDeclarationCommon, {
	    abstract: (0, _utils$4.validateOptional)(bool)
	  })
	}));
	(0, _utils$4.default)("TSTypeReference", {
	  aliases: ["TSType"],
	  visitor: ["typeName", "typeParameters"],
	  fields: {
	    typeName: (0, _utils$4.validateType)("TSEntityName"),
	    typeParameters: (0, _utils$4.validateOptionalType)("TSTypeParameterInstantiation")
	  }
	});
	(0, _utils$4.default)("TSTypePredicate", {
	  aliases: ["TSType"],
	  visitor: ["parameterName", "typeAnnotation"],
	  builder: ["parameterName", "typeAnnotation", "asserts"],
	  fields: {
	    parameterName: (0, _utils$4.validateType)(["Identifier", "TSThisType"]),
	    typeAnnotation: (0, _utils$4.validateOptionalType)("TSTypeAnnotation"),
	    asserts: (0, _utils$4.validateOptional)(bool)
	  }
	});
	(0, _utils$4.default)("TSTypeQuery", {
	  aliases: ["TSType"],
	  visitor: ["exprName"],
	  fields: {
	    exprName: (0, _utils$4.validateType)(["TSEntityName", "TSImportType"])
	  }
	});
	(0, _utils$4.default)("TSTypeLiteral", {
	  aliases: ["TSType"],
	  visitor: ["members"],
	  fields: {
	    members: (0, _utils$4.validateArrayOfType)("TSTypeElement")
	  }
	});
	(0, _utils$4.default)("TSArrayType", {
	  aliases: ["TSType"],
	  visitor: ["elementType"],
	  fields: {
	    elementType: (0, _utils$4.validateType)("TSType")
	  }
	});
	(0, _utils$4.default)("TSTupleType", {
	  aliases: ["TSType"],
	  visitor: ["elementTypes"],
	  fields: {
	    elementTypes: (0, _utils$4.validateArrayOfType)(["TSType", "TSNamedTupleMember"])
	  }
	});
	(0, _utils$4.default)("TSOptionalType", {
	  aliases: ["TSType"],
	  visitor: ["typeAnnotation"],
	  fields: {
	    typeAnnotation: (0, _utils$4.validateType)("TSType")
	  }
	});
	(0, _utils$4.default)("TSRestType", {
	  aliases: ["TSType"],
	  visitor: ["typeAnnotation"],
	  fields: {
	    typeAnnotation: (0, _utils$4.validateType)("TSType")
	  }
	});
	(0, _utils$4.default)("TSNamedTupleMember", {
	  visitor: ["label", "elementType"],
	  builder: ["label", "elementType", "optional"],
	  fields: {
	    label: (0, _utils$4.validateType)("Identifier"),
	    optional: {
	      validate: bool,
	      default: false
	    },
	    elementType: (0, _utils$4.validateType)("TSType")
	  }
	});
	const unionOrIntersection = {
	  aliases: ["TSType"],
	  visitor: ["types"],
	  fields: {
	    types: (0, _utils$4.validateArrayOfType)("TSType")
	  }
	};
	(0, _utils$4.default)("TSUnionType", unionOrIntersection);
	(0, _utils$4.default)("TSIntersectionType", unionOrIntersection);
	(0, _utils$4.default)("TSConditionalType", {
	  aliases: ["TSType"],
	  visitor: ["checkType", "extendsType", "trueType", "falseType"],
	  fields: {
	    checkType: (0, _utils$4.validateType)("TSType"),
	    extendsType: (0, _utils$4.validateType)("TSType"),
	    trueType: (0, _utils$4.validateType)("TSType"),
	    falseType: (0, _utils$4.validateType)("TSType")
	  }
	});
	(0, _utils$4.default)("TSInferType", {
	  aliases: ["TSType"],
	  visitor: ["typeParameter"],
	  fields: {
	    typeParameter: (0, _utils$4.validateType)("TSTypeParameter")
	  }
	});
	(0, _utils$4.default)("TSParenthesizedType", {
	  aliases: ["TSType"],
	  visitor: ["typeAnnotation"],
	  fields: {
	    typeAnnotation: (0, _utils$4.validateType)("TSType")
	  }
	});
	(0, _utils$4.default)("TSTypeOperator", {
	  aliases: ["TSType"],
	  visitor: ["typeAnnotation"],
	  fields: {
	    operator: (0, _utils$4.validate)((0, _utils$4.assertValueType)("string")),
	    typeAnnotation: (0, _utils$4.validateType)("TSType")
	  }
	});
	(0, _utils$4.default)("TSIndexedAccessType", {
	  aliases: ["TSType"],
	  visitor: ["objectType", "indexType"],
	  fields: {
	    objectType: (0, _utils$4.validateType)("TSType"),
	    indexType: (0, _utils$4.validateType)("TSType")
	  }
	});
	(0, _utils$4.default)("TSMappedType", {
	  aliases: ["TSType"],
	  visitor: ["typeParameter", "typeAnnotation", "nameType"],
	  fields: {
	    readonly: (0, _utils$4.validateOptional)(bool),
	    typeParameter: (0, _utils$4.validateType)("TSTypeParameter"),
	    optional: (0, _utils$4.validateOptional)(bool),
	    typeAnnotation: (0, _utils$4.validateOptionalType)("TSType"),
	    nameType: (0, _utils$4.validateOptionalType)("TSType")
	  }
	});
	(0, _utils$4.default)("TSLiteralType", {
	  aliases: ["TSType", "TSBaseType"],
	  visitor: ["literal"],
	  fields: {
	    literal: {
	      validate: function () {
	        const unaryExpression = (0, _utils$4.assertNodeType)("NumericLiteral", "BigIntLiteral");
	        const unaryOperator = (0, _utils$4.assertOneOf)("-");
	        const literal = (0, _utils$4.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral");

	        function validator(parent, key, node) {
	          if ((0, _is$1.default)("UnaryExpression", node)) {
	            unaryOperator(node, "operator", node.operator);
	            unaryExpression(node, "argument", node.argument);
	          } else {
	            literal(parent, key, node);
	          }
	        }

	        validator.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "UnaryExpression"];
	        return validator;
	      }()
	    }
	  }
	});
	(0, _utils$4.default)("TSExpressionWithTypeArguments", {
	  aliases: ["TSType"],
	  visitor: ["expression", "typeParameters"],
	  fields: {
	    expression: (0, _utils$4.validateType)("TSEntityName"),
	    typeParameters: (0, _utils$4.validateOptionalType)("TSTypeParameterInstantiation")
	  }
	});
	(0, _utils$4.default)("TSInterfaceDeclaration", {
	  aliases: ["Statement", "Declaration"],
	  visitor: ["id", "typeParameters", "extends", "body"],
	  fields: {
	    declare: (0, _utils$4.validateOptional)(bool),
	    id: (0, _utils$4.validateType)("Identifier"),
	    typeParameters: (0, _utils$4.validateOptionalType)("TSTypeParameterDeclaration"),
	    extends: (0, _utils$4.validateOptional)((0, _utils$4.arrayOfType)("TSExpressionWithTypeArguments")),
	    body: (0, _utils$4.validateType)("TSInterfaceBody")
	  }
	});
	(0, _utils$4.default)("TSInterfaceBody", {
	  visitor: ["body"],
	  fields: {
	    body: (0, _utils$4.validateArrayOfType)("TSTypeElement")
	  }
	});
	(0, _utils$4.default)("TSTypeAliasDeclaration", {
	  aliases: ["Statement", "Declaration"],
	  visitor: ["id", "typeParameters", "typeAnnotation"],
	  fields: {
	    declare: (0, _utils$4.validateOptional)(bool),
	    id: (0, _utils$4.validateType)("Identifier"),
	    typeParameters: (0, _utils$4.validateOptionalType)("TSTypeParameterDeclaration"),
	    typeAnnotation: (0, _utils$4.validateType)("TSType")
	  }
	});
	(0, _utils$4.default)("TSAsExpression", {
	  aliases: ["Expression"],
	  visitor: ["expression", "typeAnnotation"],
	  fields: {
	    expression: (0, _utils$4.validateType)("Expression"),
	    typeAnnotation: (0, _utils$4.validateType)("TSType")
	  }
	});
	(0, _utils$4.default)("TSTypeAssertion", {
	  aliases: ["Expression"],
	  visitor: ["typeAnnotation", "expression"],
	  fields: {
	    typeAnnotation: (0, _utils$4.validateType)("TSType"),
	    expression: (0, _utils$4.validateType)("Expression")
	  }
	});
	(0, _utils$4.default)("TSEnumDeclaration", {
	  aliases: ["Statement", "Declaration"],
	  visitor: ["id", "members"],
	  fields: {
	    declare: (0, _utils$4.validateOptional)(bool),
	    const: (0, _utils$4.validateOptional)(bool),
	    id: (0, _utils$4.validateType)("Identifier"),
	    members: (0, _utils$4.validateArrayOfType)("TSEnumMember"),
	    initializer: (0, _utils$4.validateOptionalType)("Expression")
	  }
	});
	(0, _utils$4.default)("TSEnumMember", {
	  visitor: ["id", "initializer"],
	  fields: {
	    id: (0, _utils$4.validateType)(["Identifier", "StringLiteral"]),
	    initializer: (0, _utils$4.validateOptionalType)("Expression")
	  }
	});
	(0, _utils$4.default)("TSModuleDeclaration", {
	  aliases: ["Statement", "Declaration"],
	  visitor: ["id", "body"],
	  fields: {
	    declare: (0, _utils$4.validateOptional)(bool),
	    global: (0, _utils$4.validateOptional)(bool),
	    id: (0, _utils$4.validateType)(["Identifier", "StringLiteral"]),
	    body: (0, _utils$4.validateType)(["TSModuleBlock", "TSModuleDeclaration"])
	  }
	});
	(0, _utils$4.default)("TSModuleBlock", {
	  aliases: ["Scopable", "Block", "BlockParent"],
	  visitor: ["body"],
	  fields: {
	    body: (0, _utils$4.validateArrayOfType)("Statement")
	  }
	});
	(0, _utils$4.default)("TSImportType", {
	  aliases: ["TSType"],
	  visitor: ["argument", "qualifier", "typeParameters"],
	  fields: {
	    argument: (0, _utils$4.validateType)("StringLiteral"),
	    qualifier: (0, _utils$4.validateOptionalType)("TSEntityName"),
	    typeParameters: (0, _utils$4.validateOptionalType)("TSTypeParameterInstantiation")
	  }
	});
	(0, _utils$4.default)("TSImportEqualsDeclaration", {
	  aliases: ["Statement"],
	  visitor: ["id", "moduleReference"],
	  fields: {
	    isExport: (0, _utils$4.validate)(bool),
	    id: (0, _utils$4.validateType)("Identifier"),
	    moduleReference: (0, _utils$4.validateType)(["TSEntityName", "TSExternalModuleReference"]),
	    importKind: {
	      validate: (0, _utils$4.assertOneOf)("type", "value"),
	      optional: true
	    }
	  }
	});
	(0, _utils$4.default)("TSExternalModuleReference", {
	  visitor: ["expression"],
	  fields: {
	    expression: (0, _utils$4.validateType)("StringLiteral")
	  }
	});
	(0, _utils$4.default)("TSNonNullExpression", {
	  aliases: ["Expression"],
	  visitor: ["expression"],
	  fields: {
	    expression: (0, _utils$4.validateType)("Expression")
	  }
	});
	(0, _utils$4.default)("TSExportAssignment", {
	  aliases: ["Statement"],
	  visitor: ["expression"],
	  fields: {
	    expression: (0, _utils$4.validateType)("Expression")
	  }
	});
	(0, _utils$4.default)("TSNamespaceExportDeclaration", {
	  aliases: ["Statement"],
	  visitor: ["id"],
	  fields: {
	    id: (0, _utils$4.validateType)("Identifier")
	  }
	});
	(0, _utils$4.default)("TSTypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  fields: {
	    typeAnnotation: {
	      validate: (0, _utils$4.assertNodeType)("TSType")
	    }
	  }
	});
	(0, _utils$4.default)("TSTypeParameterInstantiation", {
	  visitor: ["params"],
	  fields: {
	    params: {
	      validate: (0, _utils$4.chain)((0, _utils$4.assertValueType)("array"), (0, _utils$4.assertEach)((0, _utils$4.assertNodeType)("TSType")))
	    }
	  }
	});
	(0, _utils$4.default)("TSTypeParameterDeclaration", {
	  visitor: ["params"],
	  fields: {
	    params: {
	      validate: (0, _utils$4.chain)((0, _utils$4.assertValueType)("array"), (0, _utils$4.assertEach)((0, _utils$4.assertNodeType)("TSTypeParameter")))
	    }
	  }
	});
	(0, _utils$4.default)("TSTypeParameter", {
	  builder: ["constraint", "default", "name"],
	  visitor: ["constraint", "default"],
	  fields: {
	    name: {
	      validate: (0, _utils$4.assertValueType)("string")
	    },
	    constraint: {
	      validate: (0, _utils$4.assertNodeType)("TSType"),
	      optional: true
	    },
	    default: {
	      validate: (0, _utils$4.assertNodeType)("TSType"),
	      optional: true
	    }
	  }
	});

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "VISITOR_KEYS", {
	  enumerable: true,
	  get: function () {
	    return _utils.VISITOR_KEYS;
	  }
	});
	Object.defineProperty(exports, "ALIAS_KEYS", {
	  enumerable: true,
	  get: function () {
	    return _utils.ALIAS_KEYS;
	  }
	});
	Object.defineProperty(exports, "FLIPPED_ALIAS_KEYS", {
	  enumerable: true,
	  get: function () {
	    return _utils.FLIPPED_ALIAS_KEYS;
	  }
	});
	Object.defineProperty(exports, "NODE_FIELDS", {
	  enumerable: true,
	  get: function () {
	    return _utils.NODE_FIELDS;
	  }
	});
	Object.defineProperty(exports, "BUILDER_KEYS", {
	  enumerable: true,
	  get: function () {
	    return _utils.BUILDER_KEYS;
	  }
	});
	Object.defineProperty(exports, "DEPRECATED_KEYS", {
	  enumerable: true,
	  get: function () {
	    return _utils.DEPRECATED_KEYS;
	  }
	});
	Object.defineProperty(exports, "NODE_PARENT_VALIDATIONS", {
	  enumerable: true,
	  get: function () {
	    return _utils.NODE_PARENT_VALIDATIONS;
	  }
	});
	Object.defineProperty(exports, "PLACEHOLDERS", {
	  enumerable: true,
	  get: function () {
	    return _placeholders.PLACEHOLDERS;
	  }
	});
	Object.defineProperty(exports, "PLACEHOLDERS_ALIAS", {
	  enumerable: true,
	  get: function () {
	    return _placeholders.PLACEHOLDERS_ALIAS;
	  }
	});
	Object.defineProperty(exports, "PLACEHOLDERS_FLIPPED_ALIAS", {
	  enumerable: true,
	  get: function () {
	    return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
	  }
	});
	exports.TYPES = void 0;

	var _toFastProperties = toFastProperties;













	var _utils = utils$3;

	var _placeholders = placeholders;

	_toFastProperties(_utils.VISITOR_KEYS);

	_toFastProperties(_utils.ALIAS_KEYS);

	_toFastProperties(_utils.FLIPPED_ALIAS_KEYS);

	_toFastProperties(_utils.NODE_FIELDS);

	_toFastProperties(_utils.BUILDER_KEYS);

	_toFastProperties(_utils.DEPRECATED_KEYS);

	_toFastProperties(_placeholders.PLACEHOLDERS_ALIAS);

	_toFastProperties(_placeholders.PLACEHOLDERS_FLIPPED_ALIAS);

	const TYPES = Object.keys(_utils.VISITOR_KEYS).concat(Object.keys(_utils.FLIPPED_ALIAS_KEYS)).concat(Object.keys(_utils.DEPRECATED_KEYS));
	exports.TYPES = TYPES;
	}(definitions));

	Object.defineProperty(builder$2, "__esModule", {
	  value: true
	});
	builder$2.default = builder$1;

	var _definitions$6 = definitions;

	var _validate = validate$7;

	function builder$1(type, ...args) {
	  const keys = _definitions$6.BUILDER_KEYS[type];
	  const countArgs = args.length;

	  if (countArgs > keys.length) {
	    throw new Error(`${type}: Too many arguments passed. Received ${countArgs} but can receive no more than ${keys.length}`);
	  }

	  const node = {
	    type
	  };
	  let i = 0;
	  keys.forEach(key => {
	    const field = _definitions$6.NODE_FIELDS[type][key];
	    let arg;
	    if (i < countArgs) arg = args[i];

	    if (arg === undefined) {
	      arg = Array.isArray(field.default) ? [] : field.default;
	    }

	    node[key] = arg;
	    i++;
	  });

	  for (const key of Object.keys(node)) {
	    (0, _validate.default)(node, key, node[key]);
	  }

	  return node;
	}

	Object.defineProperty(generated$4, "__esModule", {
	  value: true
	});
	generated$4.arrayExpression = arrayExpression$1;
	generated$4.assignmentExpression = assignmentExpression$b;
	generated$4.binaryExpression = binaryExpression$4;
	generated$4.interpreterDirective = interpreterDirective$1;
	generated$4.directive = directive;
	generated$4.directiveLiteral = directiveLiteral;
	generated$4.blockStatement = blockStatement$5;
	generated$4.breakStatement = breakStatement;
	generated$4.callExpression = callExpression$a;
	generated$4.catchClause = catchClause;
	generated$4.conditionalExpression = conditionalExpression$3;
	generated$4.continueStatement = continueStatement;
	generated$4.debuggerStatement = debuggerStatement;
	generated$4.doWhileStatement = doWhileStatement;
	generated$4.emptyStatement = emptyStatement$1;
	generated$4.expressionStatement = expressionStatement$9;
	generated$4.file = file$1;
	generated$4.forInStatement = forInStatement;
	generated$4.forStatement = forStatement;
	generated$4.functionDeclaration = functionDeclaration;
	generated$4.functionExpression = functionExpression$1;
	generated$4.identifier = identifier$g;
	generated$4.ifStatement = ifStatement;
	generated$4.labeledStatement = labeledStatement;
	generated$4.stringLiteral = stringLiteral$6;
	generated$4.numericLiteral = numericLiteral$8;
	generated$4.nullLiteral = nullLiteral$1;
	generated$4.booleanLiteral = booleanLiteral$2;
	generated$4.regExpLiteral = regExpLiteral;
	generated$4.logicalExpression = logicalExpression$2;
	generated$4.memberExpression = memberExpression$8;
	generated$4.newExpression = newExpression;
	generated$4.program = program$3;
	generated$4.objectExpression = objectExpression$2;
	generated$4.objectMethod = objectMethod;
	generated$4.objectProperty = objectProperty;
	generated$4.restElement = restElement$1;
	generated$4.returnStatement = returnStatement$2;
	generated$4.sequenceExpression = sequenceExpression$6;
	generated$4.parenthesizedExpression = parenthesizedExpression;
	generated$4.switchCase = switchCase;
	generated$4.switchStatement = switchStatement;
	generated$4.thisExpression = thisExpression$2;
	generated$4.throwStatement = throwStatement;
	generated$4.tryStatement = tryStatement;
	generated$4.unaryExpression = unaryExpression$7;
	generated$4.updateExpression = updateExpression;
	generated$4.variableDeclaration = variableDeclaration$8;
	generated$4.variableDeclarator = variableDeclarator$8;
	generated$4.whileStatement = whileStatement;
	generated$4.withStatement = withStatement;
	generated$4.assignmentPattern = assignmentPattern;
	generated$4.arrayPattern = arrayPattern;
	generated$4.arrowFunctionExpression = arrowFunctionExpression$4;
	generated$4.classBody = classBody;
	generated$4.classExpression = classExpression;
	generated$4.classDeclaration = classDeclaration;
	generated$4.exportAllDeclaration = exportAllDeclaration;
	generated$4.exportDefaultDeclaration = exportDefaultDeclaration;
	generated$4.exportNamedDeclaration = exportNamedDeclaration$2;
	generated$4.exportSpecifier = exportSpecifier$2;
	generated$4.forOfStatement = forOfStatement;
	generated$4.importDeclaration = importDeclaration$1;
	generated$4.importDefaultSpecifier = importDefaultSpecifier$1;
	generated$4.importNamespaceSpecifier = importNamespaceSpecifier$1;
	generated$4.importSpecifier = importSpecifier$1;
	generated$4.metaProperty = metaProperty$1;
	generated$4.classMethod = classMethod;
	generated$4.objectPattern = objectPattern;
	generated$4.spreadElement = spreadElement$1;
	generated$4.super = _super$1;
	generated$4.taggedTemplateExpression = taggedTemplateExpression;
	generated$4.templateElement = templateElement$1;
	generated$4.templateLiteral = templateLiteral;
	generated$4.yieldExpression = yieldExpression$1;
	generated$4.awaitExpression = awaitExpression$1;
	generated$4.import = _import$1;
	generated$4.bigIntLiteral = bigIntLiteral;
	generated$4.exportNamespaceSpecifier = exportNamespaceSpecifier;
	generated$4.optionalMemberExpression = optionalMemberExpression$2;
	generated$4.optionalCallExpression = optionalCallExpression$2;
	generated$4.classProperty = classProperty;
	generated$4.classPrivateProperty = classPrivateProperty;
	generated$4.classPrivateMethod = classPrivateMethod;
	generated$4.privateName = privateName;
	generated$4.anyTypeAnnotation = anyTypeAnnotation$1;
	generated$4.arrayTypeAnnotation = arrayTypeAnnotation;
	generated$4.booleanTypeAnnotation = booleanTypeAnnotation;
	generated$4.booleanLiteralTypeAnnotation = booleanLiteralTypeAnnotation;
	generated$4.nullLiteralTypeAnnotation = nullLiteralTypeAnnotation;
	generated$4.classImplements = classImplements;
	generated$4.declareClass = declareClass;
	generated$4.declareFunction = declareFunction;
	generated$4.declareInterface = declareInterface;
	generated$4.declareModule = declareModule;
	generated$4.declareModuleExports = declareModuleExports;
	generated$4.declareTypeAlias = declareTypeAlias;
	generated$4.declareOpaqueType = declareOpaqueType;
	generated$4.declareVariable = declareVariable;
	generated$4.declareExportDeclaration = declareExportDeclaration;
	generated$4.declareExportAllDeclaration = declareExportAllDeclaration;
	generated$4.declaredPredicate = declaredPredicate;
	generated$4.existsTypeAnnotation = existsTypeAnnotation;
	generated$4.functionTypeAnnotation = functionTypeAnnotation;
	generated$4.functionTypeParam = functionTypeParam;
	generated$4.genericTypeAnnotation = genericTypeAnnotation;
	generated$4.inferredPredicate = inferredPredicate;
	generated$4.interfaceExtends = interfaceExtends;
	generated$4.interfaceDeclaration = interfaceDeclaration;
	generated$4.interfaceTypeAnnotation = interfaceTypeAnnotation;
	generated$4.intersectionTypeAnnotation = intersectionTypeAnnotation;
	generated$4.mixedTypeAnnotation = mixedTypeAnnotation;
	generated$4.emptyTypeAnnotation = emptyTypeAnnotation;
	generated$4.nullableTypeAnnotation = nullableTypeAnnotation;
	generated$4.numberLiteralTypeAnnotation = numberLiteralTypeAnnotation;
	generated$4.numberTypeAnnotation = numberTypeAnnotation$1;
	generated$4.objectTypeAnnotation = objectTypeAnnotation;
	generated$4.objectTypeInternalSlot = objectTypeInternalSlot;
	generated$4.objectTypeCallProperty = objectTypeCallProperty;
	generated$4.objectTypeIndexer = objectTypeIndexer;
	generated$4.objectTypeProperty = objectTypeProperty;
	generated$4.objectTypeSpreadProperty = objectTypeSpreadProperty;
	generated$4.opaqueType = opaqueType;
	generated$4.qualifiedTypeIdentifier = qualifiedTypeIdentifier;
	generated$4.stringLiteralTypeAnnotation = stringLiteralTypeAnnotation;
	generated$4.stringTypeAnnotation = stringTypeAnnotation$1;
	generated$4.symbolTypeAnnotation = symbolTypeAnnotation;
	generated$4.thisTypeAnnotation = thisTypeAnnotation;
	generated$4.tupleTypeAnnotation = tupleTypeAnnotation;
	generated$4.typeofTypeAnnotation = typeofTypeAnnotation;
	generated$4.typeAlias = typeAlias;
	generated$4.typeAnnotation = typeAnnotation;
	generated$4.typeCastExpression = typeCastExpression;
	generated$4.typeParameter = typeParameter;
	generated$4.typeParameterDeclaration = typeParameterDeclaration;
	generated$4.typeParameterInstantiation = typeParameterInstantiation;
	generated$4.unionTypeAnnotation = unionTypeAnnotation;
	generated$4.variance = variance;
	generated$4.voidTypeAnnotation = voidTypeAnnotation$2;
	generated$4.enumDeclaration = enumDeclaration;
	generated$4.enumBooleanBody = enumBooleanBody;
	generated$4.enumNumberBody = enumNumberBody;
	generated$4.enumStringBody = enumStringBody;
	generated$4.enumSymbolBody = enumSymbolBody;
	generated$4.enumBooleanMember = enumBooleanMember;
	generated$4.enumNumberMember = enumNumberMember;
	generated$4.enumStringMember = enumStringMember;
	generated$4.enumDefaultedMember = enumDefaultedMember;
	generated$4.indexedAccessType = indexedAccessType;
	generated$4.optionalIndexedAccessType = optionalIndexedAccessType;
	generated$4.jSXAttribute = generated$4.jsxAttribute = jsxAttribute;
	generated$4.jSXClosingElement = generated$4.jsxClosingElement = jsxClosingElement;
	generated$4.jSXElement = generated$4.jsxElement = jsxElement;
	generated$4.jSXEmptyExpression = generated$4.jsxEmptyExpression = jsxEmptyExpression;
	generated$4.jSXExpressionContainer = generated$4.jsxExpressionContainer = jsxExpressionContainer$1;
	generated$4.jSXSpreadChild = generated$4.jsxSpreadChild = jsxSpreadChild;
	generated$4.jSXIdentifier = generated$4.jsxIdentifier = jsxIdentifier$2;
	generated$4.jSXMemberExpression = generated$4.jsxMemberExpression = jsxMemberExpression$1;
	generated$4.jSXNamespacedName = generated$4.jsxNamespacedName = jsxNamespacedName;
	generated$4.jSXOpeningElement = generated$4.jsxOpeningElement = jsxOpeningElement;
	generated$4.jSXSpreadAttribute = generated$4.jsxSpreadAttribute = jsxSpreadAttribute;
	generated$4.jSXText = generated$4.jsxText = jsxText;
	generated$4.jSXFragment = generated$4.jsxFragment = jsxFragment;
	generated$4.jSXOpeningFragment = generated$4.jsxOpeningFragment = jsxOpeningFragment;
	generated$4.jSXClosingFragment = generated$4.jsxClosingFragment = jsxClosingFragment;
	generated$4.noop = noop$1;
	generated$4.placeholder = placeholder;
	generated$4.v8IntrinsicIdentifier = v8IntrinsicIdentifier;
	generated$4.argumentPlaceholder = argumentPlaceholder;
	generated$4.bindExpression = bindExpression;
	generated$4.importAttribute = importAttribute;
	generated$4.decorator = decorator;
	generated$4.doExpression = doExpression;
	generated$4.exportDefaultSpecifier = exportDefaultSpecifier;
	generated$4.recordExpression = recordExpression;
	generated$4.tupleExpression = tupleExpression;
	generated$4.decimalLiteral = decimalLiteral;
	generated$4.staticBlock = staticBlock$1;
	generated$4.moduleExpression = moduleExpression;
	generated$4.topicReference = topicReference;
	generated$4.pipelineTopicExpression = pipelineTopicExpression;
	generated$4.pipelineBareFunction = pipelineBareFunction;
	generated$4.pipelinePrimaryTopicReference = pipelinePrimaryTopicReference;
	generated$4.tSParameterProperty = generated$4.tsParameterProperty = tsParameterProperty;
	generated$4.tSDeclareFunction = generated$4.tsDeclareFunction = tsDeclareFunction;
	generated$4.tSDeclareMethod = generated$4.tsDeclareMethod = tsDeclareMethod;
	generated$4.tSQualifiedName = generated$4.tsQualifiedName = tsQualifiedName;
	generated$4.tSCallSignatureDeclaration = generated$4.tsCallSignatureDeclaration = tsCallSignatureDeclaration;
	generated$4.tSConstructSignatureDeclaration = generated$4.tsConstructSignatureDeclaration = tsConstructSignatureDeclaration;
	generated$4.tSPropertySignature = generated$4.tsPropertySignature = tsPropertySignature;
	generated$4.tSMethodSignature = generated$4.tsMethodSignature = tsMethodSignature;
	generated$4.tSIndexSignature = generated$4.tsIndexSignature = tsIndexSignature;
	generated$4.tSAnyKeyword = generated$4.tsAnyKeyword = tsAnyKeyword;
	generated$4.tSBooleanKeyword = generated$4.tsBooleanKeyword = tsBooleanKeyword;
	generated$4.tSBigIntKeyword = generated$4.tsBigIntKeyword = tsBigIntKeyword;
	generated$4.tSIntrinsicKeyword = generated$4.tsIntrinsicKeyword = tsIntrinsicKeyword;
	generated$4.tSNeverKeyword = generated$4.tsNeverKeyword = tsNeverKeyword;
	generated$4.tSNullKeyword = generated$4.tsNullKeyword = tsNullKeyword;
	generated$4.tSNumberKeyword = generated$4.tsNumberKeyword = tsNumberKeyword;
	generated$4.tSObjectKeyword = generated$4.tsObjectKeyword = tsObjectKeyword;
	generated$4.tSStringKeyword = generated$4.tsStringKeyword = tsStringKeyword;
	generated$4.tSSymbolKeyword = generated$4.tsSymbolKeyword = tsSymbolKeyword;
	generated$4.tSUndefinedKeyword = generated$4.tsUndefinedKeyword = tsUndefinedKeyword;
	generated$4.tSUnknownKeyword = generated$4.tsUnknownKeyword = tsUnknownKeyword;
	generated$4.tSVoidKeyword = generated$4.tsVoidKeyword = tsVoidKeyword;
	generated$4.tSThisType = generated$4.tsThisType = tsThisType;
	generated$4.tSFunctionType = generated$4.tsFunctionType = tsFunctionType;
	generated$4.tSConstructorType = generated$4.tsConstructorType = tsConstructorType;
	generated$4.tSTypeReference = generated$4.tsTypeReference = tsTypeReference;
	generated$4.tSTypePredicate = generated$4.tsTypePredicate = tsTypePredicate;
	generated$4.tSTypeQuery = generated$4.tsTypeQuery = tsTypeQuery;
	generated$4.tSTypeLiteral = generated$4.tsTypeLiteral = tsTypeLiteral;
	generated$4.tSArrayType = generated$4.tsArrayType = tsArrayType;
	generated$4.tSTupleType = generated$4.tsTupleType = tsTupleType;
	generated$4.tSOptionalType = generated$4.tsOptionalType = tsOptionalType;
	generated$4.tSRestType = generated$4.tsRestType = tsRestType;
	generated$4.tSNamedTupleMember = generated$4.tsNamedTupleMember = tsNamedTupleMember;
	generated$4.tSUnionType = generated$4.tsUnionType = tsUnionType;
	generated$4.tSIntersectionType = generated$4.tsIntersectionType = tsIntersectionType;
	generated$4.tSConditionalType = generated$4.tsConditionalType = tsConditionalType;
	generated$4.tSInferType = generated$4.tsInferType = tsInferType;
	generated$4.tSParenthesizedType = generated$4.tsParenthesizedType = tsParenthesizedType;
	generated$4.tSTypeOperator = generated$4.tsTypeOperator = tsTypeOperator;
	generated$4.tSIndexedAccessType = generated$4.tsIndexedAccessType = tsIndexedAccessType;
	generated$4.tSMappedType = generated$4.tsMappedType = tsMappedType;
	generated$4.tSLiteralType = generated$4.tsLiteralType = tsLiteralType;
	generated$4.tSExpressionWithTypeArguments = generated$4.tsExpressionWithTypeArguments = tsExpressionWithTypeArguments;
	generated$4.tSInterfaceDeclaration = generated$4.tsInterfaceDeclaration = tsInterfaceDeclaration;
	generated$4.tSInterfaceBody = generated$4.tsInterfaceBody = tsInterfaceBody;
	generated$4.tSTypeAliasDeclaration = generated$4.tsTypeAliasDeclaration = tsTypeAliasDeclaration;
	generated$4.tSAsExpression = generated$4.tsAsExpression = tsAsExpression;
	generated$4.tSTypeAssertion = generated$4.tsTypeAssertion = tsTypeAssertion;
	generated$4.tSEnumDeclaration = generated$4.tsEnumDeclaration = tsEnumDeclaration;
	generated$4.tSEnumMember = generated$4.tsEnumMember = tsEnumMember;
	generated$4.tSModuleDeclaration = generated$4.tsModuleDeclaration = tsModuleDeclaration;
	generated$4.tSModuleBlock = generated$4.tsModuleBlock = tsModuleBlock;
	generated$4.tSImportType = generated$4.tsImportType = tsImportType;
	generated$4.tSImportEqualsDeclaration = generated$4.tsImportEqualsDeclaration = tsImportEqualsDeclaration;
	generated$4.tSExternalModuleReference = generated$4.tsExternalModuleReference = tsExternalModuleReference;
	generated$4.tSNonNullExpression = generated$4.tsNonNullExpression = tsNonNullExpression;
	generated$4.tSExportAssignment = generated$4.tsExportAssignment = tsExportAssignment;
	generated$4.tSNamespaceExportDeclaration = generated$4.tsNamespaceExportDeclaration = tsNamespaceExportDeclaration;
	generated$4.tSTypeAnnotation = generated$4.tsTypeAnnotation = tsTypeAnnotation;
	generated$4.tSTypeParameterInstantiation = generated$4.tsTypeParameterInstantiation = tsTypeParameterInstantiation;
	generated$4.tSTypeParameterDeclaration = generated$4.tsTypeParameterDeclaration = tsTypeParameterDeclaration;
	generated$4.tSTypeParameter = generated$4.tsTypeParameter = tsTypeParameter;
	generated$4.numberLiteral = NumberLiteral;
	generated$4.regexLiteral = RegexLiteral;
	generated$4.restProperty = RestProperty$1;
	generated$4.spreadProperty = SpreadProperty$1;

	var _builder$1 = builder$2;

	function arrayExpression$1(elements) {
	  return (0, _builder$1.default)("ArrayExpression", ...arguments);
	}

	function assignmentExpression$b(operator, left, right) {
	  return (0, _builder$1.default)("AssignmentExpression", ...arguments);
	}

	function binaryExpression$4(operator, left, right) {
	  return (0, _builder$1.default)("BinaryExpression", ...arguments);
	}

	function interpreterDirective$1(value) {
	  return (0, _builder$1.default)("InterpreterDirective", ...arguments);
	}

	function directive(value) {
	  return (0, _builder$1.default)("Directive", ...arguments);
	}

	function directiveLiteral(value) {
	  return (0, _builder$1.default)("DirectiveLiteral", ...arguments);
	}

	function blockStatement$5(body, directives) {
	  return (0, _builder$1.default)("BlockStatement", ...arguments);
	}

	function breakStatement(label) {
	  return (0, _builder$1.default)("BreakStatement", ...arguments);
	}

	function callExpression$a(callee, _arguments) {
	  return (0, _builder$1.default)("CallExpression", ...arguments);
	}

	function catchClause(param, body) {
	  return (0, _builder$1.default)("CatchClause", ...arguments);
	}

	function conditionalExpression$3(test, consequent, alternate) {
	  return (0, _builder$1.default)("ConditionalExpression", ...arguments);
	}

	function continueStatement(label) {
	  return (0, _builder$1.default)("ContinueStatement", ...arguments);
	}

	function debuggerStatement() {
	  return (0, _builder$1.default)("DebuggerStatement", ...arguments);
	}

	function doWhileStatement(test, body) {
	  return (0, _builder$1.default)("DoWhileStatement", ...arguments);
	}

	function emptyStatement$1() {
	  return (0, _builder$1.default)("EmptyStatement", ...arguments);
	}

	function expressionStatement$9(expression) {
	  return (0, _builder$1.default)("ExpressionStatement", ...arguments);
	}

	function file$1(program, comments, tokens) {
	  return (0, _builder$1.default)("File", ...arguments);
	}

	function forInStatement(left, right, body) {
	  return (0, _builder$1.default)("ForInStatement", ...arguments);
	}

	function forStatement(init, test, update, body) {
	  return (0, _builder$1.default)("ForStatement", ...arguments);
	}

	function functionDeclaration(id, params, body, generator, async) {
	  return (0, _builder$1.default)("FunctionDeclaration", ...arguments);
	}

	function functionExpression$1(id, params, body, generator, async) {
	  return (0, _builder$1.default)("FunctionExpression", ...arguments);
	}

	function identifier$g(name) {
	  return (0, _builder$1.default)("Identifier", ...arguments);
	}

	function ifStatement(test, consequent, alternate) {
	  return (0, _builder$1.default)("IfStatement", ...arguments);
	}

	function labeledStatement(label, body) {
	  return (0, _builder$1.default)("LabeledStatement", ...arguments);
	}

	function stringLiteral$6(value) {
	  return (0, _builder$1.default)("StringLiteral", ...arguments);
	}

	function numericLiteral$8(value) {
	  return (0, _builder$1.default)("NumericLiteral", ...arguments);
	}

	function nullLiteral$1() {
	  return (0, _builder$1.default)("NullLiteral", ...arguments);
	}

	function booleanLiteral$2(value) {
	  return (0, _builder$1.default)("BooleanLiteral", ...arguments);
	}

	function regExpLiteral(pattern, flags) {
	  return (0, _builder$1.default)("RegExpLiteral", ...arguments);
	}

	function logicalExpression$2(operator, left, right) {
	  return (0, _builder$1.default)("LogicalExpression", ...arguments);
	}

	function memberExpression$8(object, property, computed, optional) {
	  return (0, _builder$1.default)("MemberExpression", ...arguments);
	}

	function newExpression(callee, _arguments) {
	  return (0, _builder$1.default)("NewExpression", ...arguments);
	}

	function program$3(body, directives, sourceType, interpreter) {
	  return (0, _builder$1.default)("Program", ...arguments);
	}

	function objectExpression$2(properties) {
	  return (0, _builder$1.default)("ObjectExpression", ...arguments);
	}

	function objectMethod(kind, key, params, body, computed, generator, async) {
	  return (0, _builder$1.default)("ObjectMethod", ...arguments);
	}

	function objectProperty(key, value, computed, shorthand, decorators) {
	  return (0, _builder$1.default)("ObjectProperty", ...arguments);
	}

	function restElement$1(argument) {
	  return (0, _builder$1.default)("RestElement", ...arguments);
	}

	function returnStatement$2(argument) {
	  return (0, _builder$1.default)("ReturnStatement", ...arguments);
	}

	function sequenceExpression$6(expressions) {
	  return (0, _builder$1.default)("SequenceExpression", ...arguments);
	}

	function parenthesizedExpression(expression) {
	  return (0, _builder$1.default)("ParenthesizedExpression", ...arguments);
	}

	function switchCase(test, consequent) {
	  return (0, _builder$1.default)("SwitchCase", ...arguments);
	}

	function switchStatement(discriminant, cases) {
	  return (0, _builder$1.default)("SwitchStatement", ...arguments);
	}

	function thisExpression$2() {
	  return (0, _builder$1.default)("ThisExpression", ...arguments);
	}

	function throwStatement(argument) {
	  return (0, _builder$1.default)("ThrowStatement", ...arguments);
	}

	function tryStatement(block, handler, finalizer) {
	  return (0, _builder$1.default)("TryStatement", ...arguments);
	}

	function unaryExpression$7(operator, argument, prefix) {
	  return (0, _builder$1.default)("UnaryExpression", ...arguments);
	}

	function updateExpression(operator, argument, prefix) {
	  return (0, _builder$1.default)("UpdateExpression", ...arguments);
	}

	function variableDeclaration$8(kind, declarations) {
	  return (0, _builder$1.default)("VariableDeclaration", ...arguments);
	}

	function variableDeclarator$8(id, init) {
	  return (0, _builder$1.default)("VariableDeclarator", ...arguments);
	}

	function whileStatement(test, body) {
	  return (0, _builder$1.default)("WhileStatement", ...arguments);
	}

	function withStatement(object, body) {
	  return (0, _builder$1.default)("WithStatement", ...arguments);
	}

	function assignmentPattern(left, right) {
	  return (0, _builder$1.default)("AssignmentPattern", ...arguments);
	}

	function arrayPattern(elements) {
	  return (0, _builder$1.default)("ArrayPattern", ...arguments);
	}

	function arrowFunctionExpression$4(params, body, async) {
	  return (0, _builder$1.default)("ArrowFunctionExpression", ...arguments);
	}

	function classBody(body) {
	  return (0, _builder$1.default)("ClassBody", ...arguments);
	}

	function classExpression(id, superClass, body, decorators) {
	  return (0, _builder$1.default)("ClassExpression", ...arguments);
	}

	function classDeclaration(id, superClass, body, decorators) {
	  return (0, _builder$1.default)("ClassDeclaration", ...arguments);
	}

	function exportAllDeclaration(source) {
	  return (0, _builder$1.default)("ExportAllDeclaration", ...arguments);
	}

	function exportDefaultDeclaration(declaration) {
	  return (0, _builder$1.default)("ExportDefaultDeclaration", ...arguments);
	}

	function exportNamedDeclaration$2(declaration, specifiers, source) {
	  return (0, _builder$1.default)("ExportNamedDeclaration", ...arguments);
	}

	function exportSpecifier$2(local, exported) {
	  return (0, _builder$1.default)("ExportSpecifier", ...arguments);
	}

	function forOfStatement(left, right, body, _await) {
	  return (0, _builder$1.default)("ForOfStatement", ...arguments);
	}

	function importDeclaration$1(specifiers, source) {
	  return (0, _builder$1.default)("ImportDeclaration", ...arguments);
	}

	function importDefaultSpecifier$1(local) {
	  return (0, _builder$1.default)("ImportDefaultSpecifier", ...arguments);
	}

	function importNamespaceSpecifier$1(local) {
	  return (0, _builder$1.default)("ImportNamespaceSpecifier", ...arguments);
	}

	function importSpecifier$1(local, imported) {
	  return (0, _builder$1.default)("ImportSpecifier", ...arguments);
	}

	function metaProperty$1(meta, property) {
	  return (0, _builder$1.default)("MetaProperty", ...arguments);
	}

	function classMethod(kind, key, params, body, computed, _static, generator, async) {
	  return (0, _builder$1.default)("ClassMethod", ...arguments);
	}

	function objectPattern(properties) {
	  return (0, _builder$1.default)("ObjectPattern", ...arguments);
	}

	function spreadElement$1(argument) {
	  return (0, _builder$1.default)("SpreadElement", ...arguments);
	}

	function _super$1() {
	  return (0, _builder$1.default)("Super", ...arguments);
	}

	function taggedTemplateExpression(tag, quasi) {
	  return (0, _builder$1.default)("TaggedTemplateExpression", ...arguments);
	}

	function templateElement$1(value, tail) {
	  return (0, _builder$1.default)("TemplateElement", ...arguments);
	}

	function templateLiteral(quasis, expressions) {
	  return (0, _builder$1.default)("TemplateLiteral", ...arguments);
	}

	function yieldExpression$1(argument, delegate) {
	  return (0, _builder$1.default)("YieldExpression", ...arguments);
	}

	function awaitExpression$1(argument) {
	  return (0, _builder$1.default)("AwaitExpression", ...arguments);
	}

	function _import$1() {
	  return (0, _builder$1.default)("Import", ...arguments);
	}

	function bigIntLiteral(value) {
	  return (0, _builder$1.default)("BigIntLiteral", ...arguments);
	}

	function exportNamespaceSpecifier(exported) {
	  return (0, _builder$1.default)("ExportNamespaceSpecifier", ...arguments);
	}

	function optionalMemberExpression$2(object, property, computed, optional) {
	  return (0, _builder$1.default)("OptionalMemberExpression", ...arguments);
	}

	function optionalCallExpression$2(callee, _arguments, optional) {
	  return (0, _builder$1.default)("OptionalCallExpression", ...arguments);
	}

	function classProperty(key, value, typeAnnotation, decorators, computed, _static) {
	  return (0, _builder$1.default)("ClassProperty", ...arguments);
	}

	function classPrivateProperty(key, value, decorators, _static) {
	  return (0, _builder$1.default)("ClassPrivateProperty", ...arguments);
	}

	function classPrivateMethod(kind, key, params, body, _static) {
	  return (0, _builder$1.default)("ClassPrivateMethod", ...arguments);
	}

	function privateName(id) {
	  return (0, _builder$1.default)("PrivateName", ...arguments);
	}

	function anyTypeAnnotation$1() {
	  return (0, _builder$1.default)("AnyTypeAnnotation", ...arguments);
	}

	function arrayTypeAnnotation(elementType) {
	  return (0, _builder$1.default)("ArrayTypeAnnotation", ...arguments);
	}

	function booleanTypeAnnotation() {
	  return (0, _builder$1.default)("BooleanTypeAnnotation", ...arguments);
	}

	function booleanLiteralTypeAnnotation(value) {
	  return (0, _builder$1.default)("BooleanLiteralTypeAnnotation", ...arguments);
	}

	function nullLiteralTypeAnnotation() {
	  return (0, _builder$1.default)("NullLiteralTypeAnnotation", ...arguments);
	}

	function classImplements(id, typeParameters) {
	  return (0, _builder$1.default)("ClassImplements", ...arguments);
	}

	function declareClass(id, typeParameters, _extends, body) {
	  return (0, _builder$1.default)("DeclareClass", ...arguments);
	}

	function declareFunction(id) {
	  return (0, _builder$1.default)("DeclareFunction", ...arguments);
	}

	function declareInterface(id, typeParameters, _extends, body) {
	  return (0, _builder$1.default)("DeclareInterface", ...arguments);
	}

	function declareModule(id, body, kind) {
	  return (0, _builder$1.default)("DeclareModule", ...arguments);
	}

	function declareModuleExports(typeAnnotation) {
	  return (0, _builder$1.default)("DeclareModuleExports", ...arguments);
	}

	function declareTypeAlias(id, typeParameters, right) {
	  return (0, _builder$1.default)("DeclareTypeAlias", ...arguments);
	}

	function declareOpaqueType(id, typeParameters, supertype) {
	  return (0, _builder$1.default)("DeclareOpaqueType", ...arguments);
	}

	function declareVariable(id) {
	  return (0, _builder$1.default)("DeclareVariable", ...arguments);
	}

	function declareExportDeclaration(declaration, specifiers, source) {
	  return (0, _builder$1.default)("DeclareExportDeclaration", ...arguments);
	}

	function declareExportAllDeclaration(source) {
	  return (0, _builder$1.default)("DeclareExportAllDeclaration", ...arguments);
	}

	function declaredPredicate(value) {
	  return (0, _builder$1.default)("DeclaredPredicate", ...arguments);
	}

	function existsTypeAnnotation() {
	  return (0, _builder$1.default)("ExistsTypeAnnotation", ...arguments);
	}

	function functionTypeAnnotation(typeParameters, params, rest, returnType) {
	  return (0, _builder$1.default)("FunctionTypeAnnotation", ...arguments);
	}

	function functionTypeParam(name, typeAnnotation) {
	  return (0, _builder$1.default)("FunctionTypeParam", ...arguments);
	}

	function genericTypeAnnotation(id, typeParameters) {
	  return (0, _builder$1.default)("GenericTypeAnnotation", ...arguments);
	}

	function inferredPredicate() {
	  return (0, _builder$1.default)("InferredPredicate", ...arguments);
	}

	function interfaceExtends(id, typeParameters) {
	  return (0, _builder$1.default)("InterfaceExtends", ...arguments);
	}

	function interfaceDeclaration(id, typeParameters, _extends, body) {
	  return (0, _builder$1.default)("InterfaceDeclaration", ...arguments);
	}

	function interfaceTypeAnnotation(_extends, body) {
	  return (0, _builder$1.default)("InterfaceTypeAnnotation", ...arguments);
	}

	function intersectionTypeAnnotation(types) {
	  return (0, _builder$1.default)("IntersectionTypeAnnotation", ...arguments);
	}

	function mixedTypeAnnotation() {
	  return (0, _builder$1.default)("MixedTypeAnnotation", ...arguments);
	}

	function emptyTypeAnnotation() {
	  return (0, _builder$1.default)("EmptyTypeAnnotation", ...arguments);
	}

	function nullableTypeAnnotation(typeAnnotation) {
	  return (0, _builder$1.default)("NullableTypeAnnotation", ...arguments);
	}

	function numberLiteralTypeAnnotation(value) {
	  return (0, _builder$1.default)("NumberLiteralTypeAnnotation", ...arguments);
	}

	function numberTypeAnnotation$1() {
	  return (0, _builder$1.default)("NumberTypeAnnotation", ...arguments);
	}

	function objectTypeAnnotation(properties, indexers, callProperties, internalSlots, exact) {
	  return (0, _builder$1.default)("ObjectTypeAnnotation", ...arguments);
	}

	function objectTypeInternalSlot(id, value, optional, _static, method) {
	  return (0, _builder$1.default)("ObjectTypeInternalSlot", ...arguments);
	}

	function objectTypeCallProperty(value) {
	  return (0, _builder$1.default)("ObjectTypeCallProperty", ...arguments);
	}

	function objectTypeIndexer(id, key, value, variance) {
	  return (0, _builder$1.default)("ObjectTypeIndexer", ...arguments);
	}

	function objectTypeProperty(key, value, variance) {
	  return (0, _builder$1.default)("ObjectTypeProperty", ...arguments);
	}

	function objectTypeSpreadProperty(argument) {
	  return (0, _builder$1.default)("ObjectTypeSpreadProperty", ...arguments);
	}

	function opaqueType(id, typeParameters, supertype, impltype) {
	  return (0, _builder$1.default)("OpaqueType", ...arguments);
	}

	function qualifiedTypeIdentifier(id, qualification) {
	  return (0, _builder$1.default)("QualifiedTypeIdentifier", ...arguments);
	}

	function stringLiteralTypeAnnotation(value) {
	  return (0, _builder$1.default)("StringLiteralTypeAnnotation", ...arguments);
	}

	function stringTypeAnnotation$1() {
	  return (0, _builder$1.default)("StringTypeAnnotation", ...arguments);
	}

	function symbolTypeAnnotation() {
	  return (0, _builder$1.default)("SymbolTypeAnnotation", ...arguments);
	}

	function thisTypeAnnotation() {
	  return (0, _builder$1.default)("ThisTypeAnnotation", ...arguments);
	}

	function tupleTypeAnnotation(types) {
	  return (0, _builder$1.default)("TupleTypeAnnotation", ...arguments);
	}

	function typeofTypeAnnotation(argument) {
	  return (0, _builder$1.default)("TypeofTypeAnnotation", ...arguments);
	}

	function typeAlias(id, typeParameters, right) {
	  return (0, _builder$1.default)("TypeAlias", ...arguments);
	}

	function typeAnnotation(typeAnnotation) {
	  return (0, _builder$1.default)("TypeAnnotation", ...arguments);
	}

	function typeCastExpression(expression, typeAnnotation) {
	  return (0, _builder$1.default)("TypeCastExpression", ...arguments);
	}

	function typeParameter(bound, _default, variance) {
	  return (0, _builder$1.default)("TypeParameter", ...arguments);
	}

	function typeParameterDeclaration(params) {
	  return (0, _builder$1.default)("TypeParameterDeclaration", ...arguments);
	}

	function typeParameterInstantiation(params) {
	  return (0, _builder$1.default)("TypeParameterInstantiation", ...arguments);
	}

	function unionTypeAnnotation(types) {
	  return (0, _builder$1.default)("UnionTypeAnnotation", ...arguments);
	}

	function variance(kind) {
	  return (0, _builder$1.default)("Variance", ...arguments);
	}

	function voidTypeAnnotation$2() {
	  return (0, _builder$1.default)("VoidTypeAnnotation", ...arguments);
	}

	function enumDeclaration(id, body) {
	  return (0, _builder$1.default)("EnumDeclaration", ...arguments);
	}

	function enumBooleanBody(members) {
	  return (0, _builder$1.default)("EnumBooleanBody", ...arguments);
	}

	function enumNumberBody(members) {
	  return (0, _builder$1.default)("EnumNumberBody", ...arguments);
	}

	function enumStringBody(members) {
	  return (0, _builder$1.default)("EnumStringBody", ...arguments);
	}

	function enumSymbolBody(members) {
	  return (0, _builder$1.default)("EnumSymbolBody", ...arguments);
	}

	function enumBooleanMember(id) {
	  return (0, _builder$1.default)("EnumBooleanMember", ...arguments);
	}

	function enumNumberMember(id, init) {
	  return (0, _builder$1.default)("EnumNumberMember", ...arguments);
	}

	function enumStringMember(id, init) {
	  return (0, _builder$1.default)("EnumStringMember", ...arguments);
	}

	function enumDefaultedMember(id) {
	  return (0, _builder$1.default)("EnumDefaultedMember", ...arguments);
	}

	function indexedAccessType(objectType, indexType) {
	  return (0, _builder$1.default)("IndexedAccessType", ...arguments);
	}

	function optionalIndexedAccessType(objectType, indexType) {
	  return (0, _builder$1.default)("OptionalIndexedAccessType", ...arguments);
	}

	function jsxAttribute(name, value) {
	  return (0, _builder$1.default)("JSXAttribute", ...arguments);
	}

	function jsxClosingElement(name) {
	  return (0, _builder$1.default)("JSXClosingElement", ...arguments);
	}

	function jsxElement(openingElement, closingElement, children, selfClosing) {
	  return (0, _builder$1.default)("JSXElement", ...arguments);
	}

	function jsxEmptyExpression() {
	  return (0, _builder$1.default)("JSXEmptyExpression", ...arguments);
	}

	function jsxExpressionContainer$1(expression) {
	  return (0, _builder$1.default)("JSXExpressionContainer", ...arguments);
	}

	function jsxSpreadChild(expression) {
	  return (0, _builder$1.default)("JSXSpreadChild", ...arguments);
	}

	function jsxIdentifier$2(name) {
	  return (0, _builder$1.default)("JSXIdentifier", ...arguments);
	}

	function jsxMemberExpression$1(object, property) {
	  return (0, _builder$1.default)("JSXMemberExpression", ...arguments);
	}

	function jsxNamespacedName(namespace, name) {
	  return (0, _builder$1.default)("JSXNamespacedName", ...arguments);
	}

	function jsxOpeningElement(name, attributes, selfClosing) {
	  return (0, _builder$1.default)("JSXOpeningElement", ...arguments);
	}

	function jsxSpreadAttribute(argument) {
	  return (0, _builder$1.default)("JSXSpreadAttribute", ...arguments);
	}

	function jsxText(value) {
	  return (0, _builder$1.default)("JSXText", ...arguments);
	}

	function jsxFragment(openingFragment, closingFragment, children) {
	  return (0, _builder$1.default)("JSXFragment", ...arguments);
	}

	function jsxOpeningFragment() {
	  return (0, _builder$1.default)("JSXOpeningFragment", ...arguments);
	}

	function jsxClosingFragment() {
	  return (0, _builder$1.default)("JSXClosingFragment", ...arguments);
	}

	function noop$1() {
	  return (0, _builder$1.default)("Noop", ...arguments);
	}

	function placeholder(expectedNode, name) {
	  return (0, _builder$1.default)("Placeholder", ...arguments);
	}

	function v8IntrinsicIdentifier(name) {
	  return (0, _builder$1.default)("V8IntrinsicIdentifier", ...arguments);
	}

	function argumentPlaceholder() {
	  return (0, _builder$1.default)("ArgumentPlaceholder", ...arguments);
	}

	function bindExpression(object, callee) {
	  return (0, _builder$1.default)("BindExpression", ...arguments);
	}

	function importAttribute(key, value) {
	  return (0, _builder$1.default)("ImportAttribute", ...arguments);
	}

	function decorator(expression) {
	  return (0, _builder$1.default)("Decorator", ...arguments);
	}

	function doExpression(body, async) {
	  return (0, _builder$1.default)("DoExpression", ...arguments);
	}

	function exportDefaultSpecifier(exported) {
	  return (0, _builder$1.default)("ExportDefaultSpecifier", ...arguments);
	}

	function recordExpression(properties) {
	  return (0, _builder$1.default)("RecordExpression", ...arguments);
	}

	function tupleExpression(elements) {
	  return (0, _builder$1.default)("TupleExpression", ...arguments);
	}

	function decimalLiteral(value) {
	  return (0, _builder$1.default)("DecimalLiteral", ...arguments);
	}

	function staticBlock$1(body) {
	  return (0, _builder$1.default)("StaticBlock", ...arguments);
	}

	function moduleExpression(body) {
	  return (0, _builder$1.default)("ModuleExpression", ...arguments);
	}

	function topicReference() {
	  return (0, _builder$1.default)("TopicReference", ...arguments);
	}

	function pipelineTopicExpression(expression) {
	  return (0, _builder$1.default)("PipelineTopicExpression", ...arguments);
	}

	function pipelineBareFunction(callee) {
	  return (0, _builder$1.default)("PipelineBareFunction", ...arguments);
	}

	function pipelinePrimaryTopicReference() {
	  return (0, _builder$1.default)("PipelinePrimaryTopicReference", ...arguments);
	}

	function tsParameterProperty(parameter) {
	  return (0, _builder$1.default)("TSParameterProperty", ...arguments);
	}

	function tsDeclareFunction(id, typeParameters, params, returnType) {
	  return (0, _builder$1.default)("TSDeclareFunction", ...arguments);
	}

	function tsDeclareMethod(decorators, key, typeParameters, params, returnType) {
	  return (0, _builder$1.default)("TSDeclareMethod", ...arguments);
	}

	function tsQualifiedName(left, right) {
	  return (0, _builder$1.default)("TSQualifiedName", ...arguments);
	}

	function tsCallSignatureDeclaration(typeParameters, parameters, typeAnnotation) {
	  return (0, _builder$1.default)("TSCallSignatureDeclaration", ...arguments);
	}

	function tsConstructSignatureDeclaration(typeParameters, parameters, typeAnnotation) {
	  return (0, _builder$1.default)("TSConstructSignatureDeclaration", ...arguments);
	}

	function tsPropertySignature(key, typeAnnotation, initializer) {
	  return (0, _builder$1.default)("TSPropertySignature", ...arguments);
	}

	function tsMethodSignature(key, typeParameters, parameters, typeAnnotation) {
	  return (0, _builder$1.default)("TSMethodSignature", ...arguments);
	}

	function tsIndexSignature(parameters, typeAnnotation) {
	  return (0, _builder$1.default)("TSIndexSignature", ...arguments);
	}

	function tsAnyKeyword() {
	  return (0, _builder$1.default)("TSAnyKeyword", ...arguments);
	}

	function tsBooleanKeyword() {
	  return (0, _builder$1.default)("TSBooleanKeyword", ...arguments);
	}

	function tsBigIntKeyword() {
	  return (0, _builder$1.default)("TSBigIntKeyword", ...arguments);
	}

	function tsIntrinsicKeyword() {
	  return (0, _builder$1.default)("TSIntrinsicKeyword", ...arguments);
	}

	function tsNeverKeyword() {
	  return (0, _builder$1.default)("TSNeverKeyword", ...arguments);
	}

	function tsNullKeyword() {
	  return (0, _builder$1.default)("TSNullKeyword", ...arguments);
	}

	function tsNumberKeyword() {
	  return (0, _builder$1.default)("TSNumberKeyword", ...arguments);
	}

	function tsObjectKeyword() {
	  return (0, _builder$1.default)("TSObjectKeyword", ...arguments);
	}

	function tsStringKeyword() {
	  return (0, _builder$1.default)("TSStringKeyword", ...arguments);
	}

	function tsSymbolKeyword() {
	  return (0, _builder$1.default)("TSSymbolKeyword", ...arguments);
	}

	function tsUndefinedKeyword() {
	  return (0, _builder$1.default)("TSUndefinedKeyword", ...arguments);
	}

	function tsUnknownKeyword() {
	  return (0, _builder$1.default)("TSUnknownKeyword", ...arguments);
	}

	function tsVoidKeyword() {
	  return (0, _builder$1.default)("TSVoidKeyword", ...arguments);
	}

	function tsThisType() {
	  return (0, _builder$1.default)("TSThisType", ...arguments);
	}

	function tsFunctionType(typeParameters, parameters, typeAnnotation) {
	  return (0, _builder$1.default)("TSFunctionType", ...arguments);
	}

	function tsConstructorType(typeParameters, parameters, typeAnnotation) {
	  return (0, _builder$1.default)("TSConstructorType", ...arguments);
	}

	function tsTypeReference(typeName, typeParameters) {
	  return (0, _builder$1.default)("TSTypeReference", ...arguments);
	}

	function tsTypePredicate(parameterName, typeAnnotation, asserts) {
	  return (0, _builder$1.default)("TSTypePredicate", ...arguments);
	}

	function tsTypeQuery(exprName) {
	  return (0, _builder$1.default)("TSTypeQuery", ...arguments);
	}

	function tsTypeLiteral(members) {
	  return (0, _builder$1.default)("TSTypeLiteral", ...arguments);
	}

	function tsArrayType(elementType) {
	  return (0, _builder$1.default)("TSArrayType", ...arguments);
	}

	function tsTupleType(elementTypes) {
	  return (0, _builder$1.default)("TSTupleType", ...arguments);
	}

	function tsOptionalType(typeAnnotation) {
	  return (0, _builder$1.default)("TSOptionalType", ...arguments);
	}

	function tsRestType(typeAnnotation) {
	  return (0, _builder$1.default)("TSRestType", ...arguments);
	}

	function tsNamedTupleMember(label, elementType, optional) {
	  return (0, _builder$1.default)("TSNamedTupleMember", ...arguments);
	}

	function tsUnionType(types) {
	  return (0, _builder$1.default)("TSUnionType", ...arguments);
	}

	function tsIntersectionType(types) {
	  return (0, _builder$1.default)("TSIntersectionType", ...arguments);
	}

	function tsConditionalType(checkType, extendsType, trueType, falseType) {
	  return (0, _builder$1.default)("TSConditionalType", ...arguments);
	}

	function tsInferType(typeParameter) {
	  return (0, _builder$1.default)("TSInferType", ...arguments);
	}

	function tsParenthesizedType(typeAnnotation) {
	  return (0, _builder$1.default)("TSParenthesizedType", ...arguments);
	}

	function tsTypeOperator(typeAnnotation) {
	  return (0, _builder$1.default)("TSTypeOperator", ...arguments);
	}

	function tsIndexedAccessType(objectType, indexType) {
	  return (0, _builder$1.default)("TSIndexedAccessType", ...arguments);
	}

	function tsMappedType(typeParameter, typeAnnotation, nameType) {
	  return (0, _builder$1.default)("TSMappedType", ...arguments);
	}

	function tsLiteralType(literal) {
	  return (0, _builder$1.default)("TSLiteralType", ...arguments);
	}

	function tsExpressionWithTypeArguments(expression, typeParameters) {
	  return (0, _builder$1.default)("TSExpressionWithTypeArguments", ...arguments);
	}

	function tsInterfaceDeclaration(id, typeParameters, _extends, body) {
	  return (0, _builder$1.default)("TSInterfaceDeclaration", ...arguments);
	}

	function tsInterfaceBody(body) {
	  return (0, _builder$1.default)("TSInterfaceBody", ...arguments);
	}

	function tsTypeAliasDeclaration(id, typeParameters, typeAnnotation) {
	  return (0, _builder$1.default)("TSTypeAliasDeclaration", ...arguments);
	}

	function tsAsExpression(expression, typeAnnotation) {
	  return (0, _builder$1.default)("TSAsExpression", ...arguments);
	}

	function tsTypeAssertion(typeAnnotation, expression) {
	  return (0, _builder$1.default)("TSTypeAssertion", ...arguments);
	}

	function tsEnumDeclaration(id, members) {
	  return (0, _builder$1.default)("TSEnumDeclaration", ...arguments);
	}

	function tsEnumMember(id, initializer) {
	  return (0, _builder$1.default)("TSEnumMember", ...arguments);
	}

	function tsModuleDeclaration(id, body) {
	  return (0, _builder$1.default)("TSModuleDeclaration", ...arguments);
	}

	function tsModuleBlock(body) {
	  return (0, _builder$1.default)("TSModuleBlock", ...arguments);
	}

	function tsImportType(argument, qualifier, typeParameters) {
	  return (0, _builder$1.default)("TSImportType", ...arguments);
	}

	function tsImportEqualsDeclaration(id, moduleReference) {
	  return (0, _builder$1.default)("TSImportEqualsDeclaration", ...arguments);
	}

	function tsExternalModuleReference(expression) {
	  return (0, _builder$1.default)("TSExternalModuleReference", ...arguments);
	}

	function tsNonNullExpression(expression) {
	  return (0, _builder$1.default)("TSNonNullExpression", ...arguments);
	}

	function tsExportAssignment(expression) {
	  return (0, _builder$1.default)("TSExportAssignment", ...arguments);
	}

	function tsNamespaceExportDeclaration(id) {
	  return (0, _builder$1.default)("TSNamespaceExportDeclaration", ...arguments);
	}

	function tsTypeAnnotation(typeAnnotation) {
	  return (0, _builder$1.default)("TSTypeAnnotation", ...arguments);
	}

	function tsTypeParameterInstantiation(params) {
	  return (0, _builder$1.default)("TSTypeParameterInstantiation", ...arguments);
	}

	function tsTypeParameterDeclaration(params) {
	  return (0, _builder$1.default)("TSTypeParameterDeclaration", ...arguments);
	}

	function tsTypeParameter(constraint, _default, name) {
	  return (0, _builder$1.default)("TSTypeParameter", ...arguments);
	}

	function NumberLiteral(...args) {
	  console.trace("The node type NumberLiteral has been renamed to NumericLiteral");
	  return (0, _builder$1.default)("NumberLiteral", ...args);
	}

	function RegexLiteral(...args) {
	  console.trace("The node type RegexLiteral has been renamed to RegExpLiteral");
	  return (0, _builder$1.default)("RegexLiteral", ...args);
	}

	function RestProperty$1(...args) {
	  console.trace("The node type RestProperty has been renamed to RestElement");
	  return (0, _builder$1.default)("RestProperty", ...args);
	}

	function SpreadProperty$1(...args) {
	  console.trace("The node type SpreadProperty has been renamed to SpreadElement");
	  return (0, _builder$1.default)("SpreadProperty", ...args);
	}

	Object.defineProperty(cleanJSXElementLiteralChild$1, "__esModule", {
	  value: true
	});
	cleanJSXElementLiteralChild$1.default = cleanJSXElementLiteralChild;

	var _generated$n = generated$4;

	function cleanJSXElementLiteralChild(child, args) {
	  const lines = child.value.split(/\r\n|\n|\r/);
	  let lastNonEmptyLine = 0;

	  for (let i = 0; i < lines.length; i++) {
	    if (lines[i].match(/[^ \t]/)) {
	      lastNonEmptyLine = i;
	    }
	  }

	  let str = "";

	  for (let i = 0; i < lines.length; i++) {
	    const line = lines[i];
	    const isFirstLine = i === 0;
	    const isLastLine = i === lines.length - 1;
	    const isLastNonEmptyLine = i === lastNonEmptyLine;
	    let trimmedLine = line.replace(/\t/g, " ");

	    if (!isFirstLine) {
	      trimmedLine = trimmedLine.replace(/^[ ]+/, "");
	    }

	    if (!isLastLine) {
	      trimmedLine = trimmedLine.replace(/[ ]+$/, "");
	    }

	    if (trimmedLine) {
	      if (!isLastNonEmptyLine) {
	        trimmedLine += " ";
	      }

	      str += trimmedLine;
	    }
	  }

	  if (str) args.push((0, _generated$n.stringLiteral)(str));
	}

	Object.defineProperty(buildChildren$1, "__esModule", {
	  value: true
	});
	buildChildren$1.default = buildChildren;

	var _generated$m = generated$5;

	var _cleanJSXElementLiteralChild = cleanJSXElementLiteralChild$1;

	function buildChildren(node) {
	  const elements = [];

	  for (let i = 0; i < node.children.length; i++) {
	    let child = node.children[i];

	    if ((0, _generated$m.isJSXText)(child)) {
	      (0, _cleanJSXElementLiteralChild.default)(child, elements);
	      continue;
	    }

	    if ((0, _generated$m.isJSXExpressionContainer)(child)) child = child.expression;
	    if ((0, _generated$m.isJSXEmptyExpression)(child)) continue;
	    elements.push(child);
	  }

	  return elements;
	}

	var assertNode$1 = {};

	var isNode$2 = {};

	Object.defineProperty(isNode$2, "__esModule", {
	  value: true
	});
	isNode$2.default = isNode$1;

	var _definitions$5 = definitions;

	function isNode$1(node) {
	  return !!(node && _definitions$5.VISITOR_KEYS[node.type]);
	}

	Object.defineProperty(assertNode$1, "__esModule", {
	  value: true
	});
	assertNode$1.default = assertNode;

	var _isNode = isNode$2;

	function assertNode(node) {
	  if (!(0, _isNode.default)(node)) {
	    var _node$type;

	    const type = (_node$type = node == null ? void 0 : node.type) != null ? _node$type : JSON.stringify(node);
	    throw new TypeError(`Not a valid node of type "${type}"`);
	  }
	}

	var generated$3 = {};

	Object.defineProperty(generated$3, "__esModule", {
	  value: true
	});
	generated$3.assertArrayExpression = assertArrayExpression;
	generated$3.assertAssignmentExpression = assertAssignmentExpression;
	generated$3.assertBinaryExpression = assertBinaryExpression;
	generated$3.assertInterpreterDirective = assertInterpreterDirective;
	generated$3.assertDirective = assertDirective;
	generated$3.assertDirectiveLiteral = assertDirectiveLiteral;
	generated$3.assertBlockStatement = assertBlockStatement;
	generated$3.assertBreakStatement = assertBreakStatement;
	generated$3.assertCallExpression = assertCallExpression;
	generated$3.assertCatchClause = assertCatchClause;
	generated$3.assertConditionalExpression = assertConditionalExpression;
	generated$3.assertContinueStatement = assertContinueStatement;
	generated$3.assertDebuggerStatement = assertDebuggerStatement;
	generated$3.assertDoWhileStatement = assertDoWhileStatement;
	generated$3.assertEmptyStatement = assertEmptyStatement;
	generated$3.assertExpressionStatement = assertExpressionStatement$1;
	generated$3.assertFile = assertFile;
	generated$3.assertForInStatement = assertForInStatement;
	generated$3.assertForStatement = assertForStatement;
	generated$3.assertFunctionDeclaration = assertFunctionDeclaration;
	generated$3.assertFunctionExpression = assertFunctionExpression;
	generated$3.assertIdentifier = assertIdentifier;
	generated$3.assertIfStatement = assertIfStatement;
	generated$3.assertLabeledStatement = assertLabeledStatement;
	generated$3.assertStringLiteral = assertStringLiteral;
	generated$3.assertNumericLiteral = assertNumericLiteral;
	generated$3.assertNullLiteral = assertNullLiteral;
	generated$3.assertBooleanLiteral = assertBooleanLiteral;
	generated$3.assertRegExpLiteral = assertRegExpLiteral;
	generated$3.assertLogicalExpression = assertLogicalExpression;
	generated$3.assertMemberExpression = assertMemberExpression;
	generated$3.assertNewExpression = assertNewExpression;
	generated$3.assertProgram = assertProgram;
	generated$3.assertObjectExpression = assertObjectExpression;
	generated$3.assertObjectMethod = assertObjectMethod;
	generated$3.assertObjectProperty = assertObjectProperty;
	generated$3.assertRestElement = assertRestElement;
	generated$3.assertReturnStatement = assertReturnStatement;
	generated$3.assertSequenceExpression = assertSequenceExpression;
	generated$3.assertParenthesizedExpression = assertParenthesizedExpression;
	generated$3.assertSwitchCase = assertSwitchCase;
	generated$3.assertSwitchStatement = assertSwitchStatement;
	generated$3.assertThisExpression = assertThisExpression;
	generated$3.assertThrowStatement = assertThrowStatement;
	generated$3.assertTryStatement = assertTryStatement;
	generated$3.assertUnaryExpression = assertUnaryExpression;
	generated$3.assertUpdateExpression = assertUpdateExpression;
	generated$3.assertVariableDeclaration = assertVariableDeclaration;
	generated$3.assertVariableDeclarator = assertVariableDeclarator;
	generated$3.assertWhileStatement = assertWhileStatement;
	generated$3.assertWithStatement = assertWithStatement;
	generated$3.assertAssignmentPattern = assertAssignmentPattern;
	generated$3.assertArrayPattern = assertArrayPattern;
	generated$3.assertArrowFunctionExpression = assertArrowFunctionExpression;
	generated$3.assertClassBody = assertClassBody;
	generated$3.assertClassExpression = assertClassExpression;
	generated$3.assertClassDeclaration = assertClassDeclaration;
	generated$3.assertExportAllDeclaration = assertExportAllDeclaration;
	generated$3.assertExportDefaultDeclaration = assertExportDefaultDeclaration;
	generated$3.assertExportNamedDeclaration = assertExportNamedDeclaration;
	generated$3.assertExportSpecifier = assertExportSpecifier$1;
	generated$3.assertForOfStatement = assertForOfStatement;
	generated$3.assertImportDeclaration = assertImportDeclaration;
	generated$3.assertImportDefaultSpecifier = assertImportDefaultSpecifier;
	generated$3.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;
	generated$3.assertImportSpecifier = assertImportSpecifier;
	generated$3.assertMetaProperty = assertMetaProperty;
	generated$3.assertClassMethod = assertClassMethod;
	generated$3.assertObjectPattern = assertObjectPattern;
	generated$3.assertSpreadElement = assertSpreadElement;
	generated$3.assertSuper = assertSuper;
	generated$3.assertTaggedTemplateExpression = assertTaggedTemplateExpression;
	generated$3.assertTemplateElement = assertTemplateElement;
	generated$3.assertTemplateLiteral = assertTemplateLiteral;
	generated$3.assertYieldExpression = assertYieldExpression;
	generated$3.assertAwaitExpression = assertAwaitExpression;
	generated$3.assertImport = assertImport;
	generated$3.assertBigIntLiteral = assertBigIntLiteral;
	generated$3.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;
	generated$3.assertOptionalMemberExpression = assertOptionalMemberExpression;
	generated$3.assertOptionalCallExpression = assertOptionalCallExpression;
	generated$3.assertClassProperty = assertClassProperty;
	generated$3.assertClassPrivateProperty = assertClassPrivateProperty;
	generated$3.assertClassPrivateMethod = assertClassPrivateMethod;
	generated$3.assertPrivateName = assertPrivateName;
	generated$3.assertAnyTypeAnnotation = assertAnyTypeAnnotation;
	generated$3.assertArrayTypeAnnotation = assertArrayTypeAnnotation;
	generated$3.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;
	generated$3.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;
	generated$3.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;
	generated$3.assertClassImplements = assertClassImplements;
	generated$3.assertDeclareClass = assertDeclareClass;
	generated$3.assertDeclareFunction = assertDeclareFunction;
	generated$3.assertDeclareInterface = assertDeclareInterface;
	generated$3.assertDeclareModule = assertDeclareModule;
	generated$3.assertDeclareModuleExports = assertDeclareModuleExports;
	generated$3.assertDeclareTypeAlias = assertDeclareTypeAlias;
	generated$3.assertDeclareOpaqueType = assertDeclareOpaqueType;
	generated$3.assertDeclareVariable = assertDeclareVariable;
	generated$3.assertDeclareExportDeclaration = assertDeclareExportDeclaration;
	generated$3.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;
	generated$3.assertDeclaredPredicate = assertDeclaredPredicate;
	generated$3.assertExistsTypeAnnotation = assertExistsTypeAnnotation;
	generated$3.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;
	generated$3.assertFunctionTypeParam = assertFunctionTypeParam;
	generated$3.assertGenericTypeAnnotation = assertGenericTypeAnnotation;
	generated$3.assertInferredPredicate = assertInferredPredicate;
	generated$3.assertInterfaceExtends = assertInterfaceExtends;
	generated$3.assertInterfaceDeclaration = assertInterfaceDeclaration;
	generated$3.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;
	generated$3.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;
	generated$3.assertMixedTypeAnnotation = assertMixedTypeAnnotation;
	generated$3.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;
	generated$3.assertNullableTypeAnnotation = assertNullableTypeAnnotation;
	generated$3.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;
	generated$3.assertNumberTypeAnnotation = assertNumberTypeAnnotation;
	generated$3.assertObjectTypeAnnotation = assertObjectTypeAnnotation;
	generated$3.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;
	generated$3.assertObjectTypeCallProperty = assertObjectTypeCallProperty;
	generated$3.assertObjectTypeIndexer = assertObjectTypeIndexer;
	generated$3.assertObjectTypeProperty = assertObjectTypeProperty;
	generated$3.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;
	generated$3.assertOpaqueType = assertOpaqueType;
	generated$3.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;
	generated$3.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;
	generated$3.assertStringTypeAnnotation = assertStringTypeAnnotation;
	generated$3.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;
	generated$3.assertThisTypeAnnotation = assertThisTypeAnnotation;
	generated$3.assertTupleTypeAnnotation = assertTupleTypeAnnotation;
	generated$3.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;
	generated$3.assertTypeAlias = assertTypeAlias;
	generated$3.assertTypeAnnotation = assertTypeAnnotation;
	generated$3.assertTypeCastExpression = assertTypeCastExpression;
	generated$3.assertTypeParameter = assertTypeParameter;
	generated$3.assertTypeParameterDeclaration = assertTypeParameterDeclaration;
	generated$3.assertTypeParameterInstantiation = assertTypeParameterInstantiation;
	generated$3.assertUnionTypeAnnotation = assertUnionTypeAnnotation;
	generated$3.assertVariance = assertVariance;
	generated$3.assertVoidTypeAnnotation = assertVoidTypeAnnotation;
	generated$3.assertEnumDeclaration = assertEnumDeclaration;
	generated$3.assertEnumBooleanBody = assertEnumBooleanBody;
	generated$3.assertEnumNumberBody = assertEnumNumberBody;
	generated$3.assertEnumStringBody = assertEnumStringBody;
	generated$3.assertEnumSymbolBody = assertEnumSymbolBody;
	generated$3.assertEnumBooleanMember = assertEnumBooleanMember;
	generated$3.assertEnumNumberMember = assertEnumNumberMember;
	generated$3.assertEnumStringMember = assertEnumStringMember;
	generated$3.assertEnumDefaultedMember = assertEnumDefaultedMember;
	generated$3.assertIndexedAccessType = assertIndexedAccessType;
	generated$3.assertOptionalIndexedAccessType = assertOptionalIndexedAccessType;
	generated$3.assertJSXAttribute = assertJSXAttribute;
	generated$3.assertJSXClosingElement = assertJSXClosingElement;
	generated$3.assertJSXElement = assertJSXElement;
	generated$3.assertJSXEmptyExpression = assertJSXEmptyExpression;
	generated$3.assertJSXExpressionContainer = assertJSXExpressionContainer;
	generated$3.assertJSXSpreadChild = assertJSXSpreadChild;
	generated$3.assertJSXIdentifier = assertJSXIdentifier;
	generated$3.assertJSXMemberExpression = assertJSXMemberExpression;
	generated$3.assertJSXNamespacedName = assertJSXNamespacedName;
	generated$3.assertJSXOpeningElement = assertJSXOpeningElement;
	generated$3.assertJSXSpreadAttribute = assertJSXSpreadAttribute;
	generated$3.assertJSXText = assertJSXText;
	generated$3.assertJSXFragment = assertJSXFragment;
	generated$3.assertJSXOpeningFragment = assertJSXOpeningFragment;
	generated$3.assertJSXClosingFragment = assertJSXClosingFragment;
	generated$3.assertNoop = assertNoop;
	generated$3.assertPlaceholder = assertPlaceholder;
	generated$3.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;
	generated$3.assertArgumentPlaceholder = assertArgumentPlaceholder;
	generated$3.assertBindExpression = assertBindExpression;
	generated$3.assertImportAttribute = assertImportAttribute;
	generated$3.assertDecorator = assertDecorator;
	generated$3.assertDoExpression = assertDoExpression;
	generated$3.assertExportDefaultSpecifier = assertExportDefaultSpecifier;
	generated$3.assertRecordExpression = assertRecordExpression;
	generated$3.assertTupleExpression = assertTupleExpression;
	generated$3.assertDecimalLiteral = assertDecimalLiteral;
	generated$3.assertStaticBlock = assertStaticBlock;
	generated$3.assertModuleExpression = assertModuleExpression;
	generated$3.assertTopicReference = assertTopicReference;
	generated$3.assertPipelineTopicExpression = assertPipelineTopicExpression;
	generated$3.assertPipelineBareFunction = assertPipelineBareFunction;
	generated$3.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;
	generated$3.assertTSParameterProperty = assertTSParameterProperty;
	generated$3.assertTSDeclareFunction = assertTSDeclareFunction;
	generated$3.assertTSDeclareMethod = assertTSDeclareMethod;
	generated$3.assertTSQualifiedName = assertTSQualifiedName;
	generated$3.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;
	generated$3.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;
	generated$3.assertTSPropertySignature = assertTSPropertySignature;
	generated$3.assertTSMethodSignature = assertTSMethodSignature;
	generated$3.assertTSIndexSignature = assertTSIndexSignature;
	generated$3.assertTSAnyKeyword = assertTSAnyKeyword;
	generated$3.assertTSBooleanKeyword = assertTSBooleanKeyword;
	generated$3.assertTSBigIntKeyword = assertTSBigIntKeyword;
	generated$3.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;
	generated$3.assertTSNeverKeyword = assertTSNeverKeyword;
	generated$3.assertTSNullKeyword = assertTSNullKeyword;
	generated$3.assertTSNumberKeyword = assertTSNumberKeyword;
	generated$3.assertTSObjectKeyword = assertTSObjectKeyword;
	generated$3.assertTSStringKeyword = assertTSStringKeyword;
	generated$3.assertTSSymbolKeyword = assertTSSymbolKeyword;
	generated$3.assertTSUndefinedKeyword = assertTSUndefinedKeyword;
	generated$3.assertTSUnknownKeyword = assertTSUnknownKeyword;
	generated$3.assertTSVoidKeyword = assertTSVoidKeyword;
	generated$3.assertTSThisType = assertTSThisType;
	generated$3.assertTSFunctionType = assertTSFunctionType;
	generated$3.assertTSConstructorType = assertTSConstructorType;
	generated$3.assertTSTypeReference = assertTSTypeReference;
	generated$3.assertTSTypePredicate = assertTSTypePredicate;
	generated$3.assertTSTypeQuery = assertTSTypeQuery;
	generated$3.assertTSTypeLiteral = assertTSTypeLiteral;
	generated$3.assertTSArrayType = assertTSArrayType;
	generated$3.assertTSTupleType = assertTSTupleType;
	generated$3.assertTSOptionalType = assertTSOptionalType;
	generated$3.assertTSRestType = assertTSRestType;
	generated$3.assertTSNamedTupleMember = assertTSNamedTupleMember;
	generated$3.assertTSUnionType = assertTSUnionType;
	generated$3.assertTSIntersectionType = assertTSIntersectionType;
	generated$3.assertTSConditionalType = assertTSConditionalType;
	generated$3.assertTSInferType = assertTSInferType;
	generated$3.assertTSParenthesizedType = assertTSParenthesizedType;
	generated$3.assertTSTypeOperator = assertTSTypeOperator;
	generated$3.assertTSIndexedAccessType = assertTSIndexedAccessType;
	generated$3.assertTSMappedType = assertTSMappedType;
	generated$3.assertTSLiteralType = assertTSLiteralType;
	generated$3.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;
	generated$3.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;
	generated$3.assertTSInterfaceBody = assertTSInterfaceBody;
	generated$3.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;
	generated$3.assertTSAsExpression = assertTSAsExpression;
	generated$3.assertTSTypeAssertion = assertTSTypeAssertion;
	generated$3.assertTSEnumDeclaration = assertTSEnumDeclaration;
	generated$3.assertTSEnumMember = assertTSEnumMember;
	generated$3.assertTSModuleDeclaration = assertTSModuleDeclaration;
	generated$3.assertTSModuleBlock = assertTSModuleBlock;
	generated$3.assertTSImportType = assertTSImportType;
	generated$3.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;
	generated$3.assertTSExternalModuleReference = assertTSExternalModuleReference;
	generated$3.assertTSNonNullExpression = assertTSNonNullExpression;
	generated$3.assertTSExportAssignment = assertTSExportAssignment;
	generated$3.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;
	generated$3.assertTSTypeAnnotation = assertTSTypeAnnotation;
	generated$3.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;
	generated$3.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;
	generated$3.assertTSTypeParameter = assertTSTypeParameter;
	generated$3.assertExpression = assertExpression$1;
	generated$3.assertBinary = assertBinary;
	generated$3.assertScopable = assertScopable;
	generated$3.assertBlockParent = assertBlockParent;
	generated$3.assertBlock = assertBlock;
	generated$3.assertStatement = assertStatement;
	generated$3.assertTerminatorless = assertTerminatorless;
	generated$3.assertCompletionStatement = assertCompletionStatement;
	generated$3.assertConditional = assertConditional;
	generated$3.assertLoop = assertLoop;
	generated$3.assertWhile = assertWhile;
	generated$3.assertExpressionWrapper = assertExpressionWrapper;
	generated$3.assertFor = assertFor;
	generated$3.assertForXStatement = assertForXStatement;
	generated$3.assertFunction = assertFunction$1;
	generated$3.assertFunctionParent = assertFunctionParent;
	generated$3.assertPureish = assertPureish;
	generated$3.assertDeclaration = assertDeclaration;
	generated$3.assertPatternLike = assertPatternLike;
	generated$3.assertLVal = assertLVal;
	generated$3.assertTSEntityName = assertTSEntityName;
	generated$3.assertLiteral = assertLiteral;
	generated$3.assertImmutable = assertImmutable;
	generated$3.assertUserWhitespacable = assertUserWhitespacable;
	generated$3.assertMethod = assertMethod;
	generated$3.assertObjectMember = assertObjectMember;
	generated$3.assertProperty = assertProperty;
	generated$3.assertUnaryLike = assertUnaryLike;
	generated$3.assertPattern = assertPattern;
	generated$3.assertClass = assertClass;
	generated$3.assertModuleDeclaration = assertModuleDeclaration;
	generated$3.assertExportDeclaration = assertExportDeclaration;
	generated$3.assertModuleSpecifier = assertModuleSpecifier;
	generated$3.assertPrivate = assertPrivate;
	generated$3.assertFlow = assertFlow;
	generated$3.assertFlowType = assertFlowType;
	generated$3.assertFlowBaseAnnotation = assertFlowBaseAnnotation;
	generated$3.assertFlowDeclaration = assertFlowDeclaration;
	generated$3.assertFlowPredicate = assertFlowPredicate;
	generated$3.assertEnumBody = assertEnumBody;
	generated$3.assertEnumMember = assertEnumMember;
	generated$3.assertJSX = assertJSX;
	generated$3.assertTSTypeElement = assertTSTypeElement;
	generated$3.assertTSType = assertTSType;
	generated$3.assertTSBaseType = assertTSBaseType;
	generated$3.assertNumberLiteral = assertNumberLiteral;
	generated$3.assertRegexLiteral = assertRegexLiteral;
	generated$3.assertRestProperty = assertRestProperty;
	generated$3.assertSpreadProperty = assertSpreadProperty;

	var _is = is$2;

	function assert(type, node, opts) {
	  if (!(0, _is.default)(type, node, opts)) {
	    throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, ` + `but instead got "${node.type}".`);
	  }
	}

	function assertArrayExpression(node, opts) {
	  assert("ArrayExpression", node, opts);
	}

	function assertAssignmentExpression(node, opts) {
	  assert("AssignmentExpression", node, opts);
	}

	function assertBinaryExpression(node, opts) {
	  assert("BinaryExpression", node, opts);
	}

	function assertInterpreterDirective(node, opts) {
	  assert("InterpreterDirective", node, opts);
	}

	function assertDirective(node, opts) {
	  assert("Directive", node, opts);
	}

	function assertDirectiveLiteral(node, opts) {
	  assert("DirectiveLiteral", node, opts);
	}

	function assertBlockStatement(node, opts) {
	  assert("BlockStatement", node, opts);
	}

	function assertBreakStatement(node, opts) {
	  assert("BreakStatement", node, opts);
	}

	function assertCallExpression(node, opts) {
	  assert("CallExpression", node, opts);
	}

	function assertCatchClause(node, opts) {
	  assert("CatchClause", node, opts);
	}

	function assertConditionalExpression(node, opts) {
	  assert("ConditionalExpression", node, opts);
	}

	function assertContinueStatement(node, opts) {
	  assert("ContinueStatement", node, opts);
	}

	function assertDebuggerStatement(node, opts) {
	  assert("DebuggerStatement", node, opts);
	}

	function assertDoWhileStatement(node, opts) {
	  assert("DoWhileStatement", node, opts);
	}

	function assertEmptyStatement(node, opts) {
	  assert("EmptyStatement", node, opts);
	}

	function assertExpressionStatement$1(node, opts) {
	  assert("ExpressionStatement", node, opts);
	}

	function assertFile(node, opts) {
	  assert("File", node, opts);
	}

	function assertForInStatement(node, opts) {
	  assert("ForInStatement", node, opts);
	}

	function assertForStatement(node, opts) {
	  assert("ForStatement", node, opts);
	}

	function assertFunctionDeclaration(node, opts) {
	  assert("FunctionDeclaration", node, opts);
	}

	function assertFunctionExpression(node, opts) {
	  assert("FunctionExpression", node, opts);
	}

	function assertIdentifier(node, opts) {
	  assert("Identifier", node, opts);
	}

	function assertIfStatement(node, opts) {
	  assert("IfStatement", node, opts);
	}

	function assertLabeledStatement(node, opts) {
	  assert("LabeledStatement", node, opts);
	}

	function assertStringLiteral(node, opts) {
	  assert("StringLiteral", node, opts);
	}

	function assertNumericLiteral(node, opts) {
	  assert("NumericLiteral", node, opts);
	}

	function assertNullLiteral(node, opts) {
	  assert("NullLiteral", node, opts);
	}

	function assertBooleanLiteral(node, opts) {
	  assert("BooleanLiteral", node, opts);
	}

	function assertRegExpLiteral(node, opts) {
	  assert("RegExpLiteral", node, opts);
	}

	function assertLogicalExpression(node, opts) {
	  assert("LogicalExpression", node, opts);
	}

	function assertMemberExpression(node, opts) {
	  assert("MemberExpression", node, opts);
	}

	function assertNewExpression(node, opts) {
	  assert("NewExpression", node, opts);
	}

	function assertProgram(node, opts) {
	  assert("Program", node, opts);
	}

	function assertObjectExpression(node, opts) {
	  assert("ObjectExpression", node, opts);
	}

	function assertObjectMethod(node, opts) {
	  assert("ObjectMethod", node, opts);
	}

	function assertObjectProperty(node, opts) {
	  assert("ObjectProperty", node, opts);
	}

	function assertRestElement(node, opts) {
	  assert("RestElement", node, opts);
	}

	function assertReturnStatement(node, opts) {
	  assert("ReturnStatement", node, opts);
	}

	function assertSequenceExpression(node, opts) {
	  assert("SequenceExpression", node, opts);
	}

	function assertParenthesizedExpression(node, opts) {
	  assert("ParenthesizedExpression", node, opts);
	}

	function assertSwitchCase(node, opts) {
	  assert("SwitchCase", node, opts);
	}

	function assertSwitchStatement(node, opts) {
	  assert("SwitchStatement", node, opts);
	}

	function assertThisExpression(node, opts) {
	  assert("ThisExpression", node, opts);
	}

	function assertThrowStatement(node, opts) {
	  assert("ThrowStatement", node, opts);
	}

	function assertTryStatement(node, opts) {
	  assert("TryStatement", node, opts);
	}

	function assertUnaryExpression(node, opts) {
	  assert("UnaryExpression", node, opts);
	}

	function assertUpdateExpression(node, opts) {
	  assert("UpdateExpression", node, opts);
	}

	function assertVariableDeclaration(node, opts) {
	  assert("VariableDeclaration", node, opts);
	}

	function assertVariableDeclarator(node, opts) {
	  assert("VariableDeclarator", node, opts);
	}

	function assertWhileStatement(node, opts) {
	  assert("WhileStatement", node, opts);
	}

	function assertWithStatement(node, opts) {
	  assert("WithStatement", node, opts);
	}

	function assertAssignmentPattern(node, opts) {
	  assert("AssignmentPattern", node, opts);
	}

	function assertArrayPattern(node, opts) {
	  assert("ArrayPattern", node, opts);
	}

	function assertArrowFunctionExpression(node, opts) {
	  assert("ArrowFunctionExpression", node, opts);
	}

	function assertClassBody(node, opts) {
	  assert("ClassBody", node, opts);
	}

	function assertClassExpression(node, opts) {
	  assert("ClassExpression", node, opts);
	}

	function assertClassDeclaration(node, opts) {
	  assert("ClassDeclaration", node, opts);
	}

	function assertExportAllDeclaration(node, opts) {
	  assert("ExportAllDeclaration", node, opts);
	}

	function assertExportDefaultDeclaration(node, opts) {
	  assert("ExportDefaultDeclaration", node, opts);
	}

	function assertExportNamedDeclaration(node, opts) {
	  assert("ExportNamedDeclaration", node, opts);
	}

	function assertExportSpecifier$1(node, opts) {
	  assert("ExportSpecifier", node, opts);
	}

	function assertForOfStatement(node, opts) {
	  assert("ForOfStatement", node, opts);
	}

	function assertImportDeclaration(node, opts) {
	  assert("ImportDeclaration", node, opts);
	}

	function assertImportDefaultSpecifier(node, opts) {
	  assert("ImportDefaultSpecifier", node, opts);
	}

	function assertImportNamespaceSpecifier(node, opts) {
	  assert("ImportNamespaceSpecifier", node, opts);
	}

	function assertImportSpecifier(node, opts) {
	  assert("ImportSpecifier", node, opts);
	}

	function assertMetaProperty(node, opts) {
	  assert("MetaProperty", node, opts);
	}

	function assertClassMethod(node, opts) {
	  assert("ClassMethod", node, opts);
	}

	function assertObjectPattern(node, opts) {
	  assert("ObjectPattern", node, opts);
	}

	function assertSpreadElement(node, opts) {
	  assert("SpreadElement", node, opts);
	}

	function assertSuper(node, opts) {
	  assert("Super", node, opts);
	}

	function assertTaggedTemplateExpression(node, opts) {
	  assert("TaggedTemplateExpression", node, opts);
	}

	function assertTemplateElement(node, opts) {
	  assert("TemplateElement", node, opts);
	}

	function assertTemplateLiteral(node, opts) {
	  assert("TemplateLiteral", node, opts);
	}

	function assertYieldExpression(node, opts) {
	  assert("YieldExpression", node, opts);
	}

	function assertAwaitExpression(node, opts) {
	  assert("AwaitExpression", node, opts);
	}

	function assertImport(node, opts) {
	  assert("Import", node, opts);
	}

	function assertBigIntLiteral(node, opts) {
	  assert("BigIntLiteral", node, opts);
	}

	function assertExportNamespaceSpecifier(node, opts) {
	  assert("ExportNamespaceSpecifier", node, opts);
	}

	function assertOptionalMemberExpression(node, opts) {
	  assert("OptionalMemberExpression", node, opts);
	}

	function assertOptionalCallExpression(node, opts) {
	  assert("OptionalCallExpression", node, opts);
	}

	function assertClassProperty(node, opts) {
	  assert("ClassProperty", node, opts);
	}

	function assertClassPrivateProperty(node, opts) {
	  assert("ClassPrivateProperty", node, opts);
	}

	function assertClassPrivateMethod(node, opts) {
	  assert("ClassPrivateMethod", node, opts);
	}

	function assertPrivateName(node, opts) {
	  assert("PrivateName", node, opts);
	}

	function assertAnyTypeAnnotation(node, opts) {
	  assert("AnyTypeAnnotation", node, opts);
	}

	function assertArrayTypeAnnotation(node, opts) {
	  assert("ArrayTypeAnnotation", node, opts);
	}

	function assertBooleanTypeAnnotation(node, opts) {
	  assert("BooleanTypeAnnotation", node, opts);
	}

	function assertBooleanLiteralTypeAnnotation(node, opts) {
	  assert("BooleanLiteralTypeAnnotation", node, opts);
	}

	function assertNullLiteralTypeAnnotation(node, opts) {
	  assert("NullLiteralTypeAnnotation", node, opts);
	}

	function assertClassImplements(node, opts) {
	  assert("ClassImplements", node, opts);
	}

	function assertDeclareClass(node, opts) {
	  assert("DeclareClass", node, opts);
	}

	function assertDeclareFunction(node, opts) {
	  assert("DeclareFunction", node, opts);
	}

	function assertDeclareInterface(node, opts) {
	  assert("DeclareInterface", node, opts);
	}

	function assertDeclareModule(node, opts) {
	  assert("DeclareModule", node, opts);
	}

	function assertDeclareModuleExports(node, opts) {
	  assert("DeclareModuleExports", node, opts);
	}

	function assertDeclareTypeAlias(node, opts) {
	  assert("DeclareTypeAlias", node, opts);
	}

	function assertDeclareOpaqueType(node, opts) {
	  assert("DeclareOpaqueType", node, opts);
	}

	function assertDeclareVariable(node, opts) {
	  assert("DeclareVariable", node, opts);
	}

	function assertDeclareExportDeclaration(node, opts) {
	  assert("DeclareExportDeclaration", node, opts);
	}

	function assertDeclareExportAllDeclaration(node, opts) {
	  assert("DeclareExportAllDeclaration", node, opts);
	}

	function assertDeclaredPredicate(node, opts) {
	  assert("DeclaredPredicate", node, opts);
	}

	function assertExistsTypeAnnotation(node, opts) {
	  assert("ExistsTypeAnnotation", node, opts);
	}

	function assertFunctionTypeAnnotation(node, opts) {
	  assert("FunctionTypeAnnotation", node, opts);
	}

	function assertFunctionTypeParam(node, opts) {
	  assert("FunctionTypeParam", node, opts);
	}

	function assertGenericTypeAnnotation(node, opts) {
	  assert("GenericTypeAnnotation", node, opts);
	}

	function assertInferredPredicate(node, opts) {
	  assert("InferredPredicate", node, opts);
	}

	function assertInterfaceExtends(node, opts) {
	  assert("InterfaceExtends", node, opts);
	}

	function assertInterfaceDeclaration(node, opts) {
	  assert("InterfaceDeclaration", node, opts);
	}

	function assertInterfaceTypeAnnotation(node, opts) {
	  assert("InterfaceTypeAnnotation", node, opts);
	}

	function assertIntersectionTypeAnnotation(node, opts) {
	  assert("IntersectionTypeAnnotation", node, opts);
	}

	function assertMixedTypeAnnotation(node, opts) {
	  assert("MixedTypeAnnotation", node, opts);
	}

	function assertEmptyTypeAnnotation(node, opts) {
	  assert("EmptyTypeAnnotation", node, opts);
	}

	function assertNullableTypeAnnotation(node, opts) {
	  assert("NullableTypeAnnotation", node, opts);
	}

	function assertNumberLiteralTypeAnnotation(node, opts) {
	  assert("NumberLiteralTypeAnnotation", node, opts);
	}

	function assertNumberTypeAnnotation(node, opts) {
	  assert("NumberTypeAnnotation", node, opts);
	}

	function assertObjectTypeAnnotation(node, opts) {
	  assert("ObjectTypeAnnotation", node, opts);
	}

	function assertObjectTypeInternalSlot(node, opts) {
	  assert("ObjectTypeInternalSlot", node, opts);
	}

	function assertObjectTypeCallProperty(node, opts) {
	  assert("ObjectTypeCallProperty", node, opts);
	}

	function assertObjectTypeIndexer(node, opts) {
	  assert("ObjectTypeIndexer", node, opts);
	}

	function assertObjectTypeProperty(node, opts) {
	  assert("ObjectTypeProperty", node, opts);
	}

	function assertObjectTypeSpreadProperty(node, opts) {
	  assert("ObjectTypeSpreadProperty", node, opts);
	}

	function assertOpaqueType(node, opts) {
	  assert("OpaqueType", node, opts);
	}

	function assertQualifiedTypeIdentifier(node, opts) {
	  assert("QualifiedTypeIdentifier", node, opts);
	}

	function assertStringLiteralTypeAnnotation(node, opts) {
	  assert("StringLiteralTypeAnnotation", node, opts);
	}

	function assertStringTypeAnnotation(node, opts) {
	  assert("StringTypeAnnotation", node, opts);
	}

	function assertSymbolTypeAnnotation(node, opts) {
	  assert("SymbolTypeAnnotation", node, opts);
	}

	function assertThisTypeAnnotation(node, opts) {
	  assert("ThisTypeAnnotation", node, opts);
	}

	function assertTupleTypeAnnotation(node, opts) {
	  assert("TupleTypeAnnotation", node, opts);
	}

	function assertTypeofTypeAnnotation(node, opts) {
	  assert("TypeofTypeAnnotation", node, opts);
	}

	function assertTypeAlias(node, opts) {
	  assert("TypeAlias", node, opts);
	}

	function assertTypeAnnotation(node, opts) {
	  assert("TypeAnnotation", node, opts);
	}

	function assertTypeCastExpression(node, opts) {
	  assert("TypeCastExpression", node, opts);
	}

	function assertTypeParameter(node, opts) {
	  assert("TypeParameter", node, opts);
	}

	function assertTypeParameterDeclaration(node, opts) {
	  assert("TypeParameterDeclaration", node, opts);
	}

	function assertTypeParameterInstantiation(node, opts) {
	  assert("TypeParameterInstantiation", node, opts);
	}

	function assertUnionTypeAnnotation(node, opts) {
	  assert("UnionTypeAnnotation", node, opts);
	}

	function assertVariance(node, opts) {
	  assert("Variance", node, opts);
	}

	function assertVoidTypeAnnotation(node, opts) {
	  assert("VoidTypeAnnotation", node, opts);
	}

	function assertEnumDeclaration(node, opts) {
	  assert("EnumDeclaration", node, opts);
	}

	function assertEnumBooleanBody(node, opts) {
	  assert("EnumBooleanBody", node, opts);
	}

	function assertEnumNumberBody(node, opts) {
	  assert("EnumNumberBody", node, opts);
	}

	function assertEnumStringBody(node, opts) {
	  assert("EnumStringBody", node, opts);
	}

	function assertEnumSymbolBody(node, opts) {
	  assert("EnumSymbolBody", node, opts);
	}

	function assertEnumBooleanMember(node, opts) {
	  assert("EnumBooleanMember", node, opts);
	}

	function assertEnumNumberMember(node, opts) {
	  assert("EnumNumberMember", node, opts);
	}

	function assertEnumStringMember(node, opts) {
	  assert("EnumStringMember", node, opts);
	}

	function assertEnumDefaultedMember(node, opts) {
	  assert("EnumDefaultedMember", node, opts);
	}

	function assertIndexedAccessType(node, opts) {
	  assert("IndexedAccessType", node, opts);
	}

	function assertOptionalIndexedAccessType(node, opts) {
	  assert("OptionalIndexedAccessType", node, opts);
	}

	function assertJSXAttribute(node, opts) {
	  assert("JSXAttribute", node, opts);
	}

	function assertJSXClosingElement(node, opts) {
	  assert("JSXClosingElement", node, opts);
	}

	function assertJSXElement(node, opts) {
	  assert("JSXElement", node, opts);
	}

	function assertJSXEmptyExpression(node, opts) {
	  assert("JSXEmptyExpression", node, opts);
	}

	function assertJSXExpressionContainer(node, opts) {
	  assert("JSXExpressionContainer", node, opts);
	}

	function assertJSXSpreadChild(node, opts) {
	  assert("JSXSpreadChild", node, opts);
	}

	function assertJSXIdentifier(node, opts) {
	  assert("JSXIdentifier", node, opts);
	}

	function assertJSXMemberExpression(node, opts) {
	  assert("JSXMemberExpression", node, opts);
	}

	function assertJSXNamespacedName(node, opts) {
	  assert("JSXNamespacedName", node, opts);
	}

	function assertJSXOpeningElement(node, opts) {
	  assert("JSXOpeningElement", node, opts);
	}

	function assertJSXSpreadAttribute(node, opts) {
	  assert("JSXSpreadAttribute", node, opts);
	}

	function assertJSXText(node, opts) {
	  assert("JSXText", node, opts);
	}

	function assertJSXFragment(node, opts) {
	  assert("JSXFragment", node, opts);
	}

	function assertJSXOpeningFragment(node, opts) {
	  assert("JSXOpeningFragment", node, opts);
	}

	function assertJSXClosingFragment(node, opts) {
	  assert("JSXClosingFragment", node, opts);
	}

	function assertNoop(node, opts) {
	  assert("Noop", node, opts);
	}

	function assertPlaceholder(node, opts) {
	  assert("Placeholder", node, opts);
	}

	function assertV8IntrinsicIdentifier(node, opts) {
	  assert("V8IntrinsicIdentifier", node, opts);
	}

	function assertArgumentPlaceholder(node, opts) {
	  assert("ArgumentPlaceholder", node, opts);
	}

	function assertBindExpression(node, opts) {
	  assert("BindExpression", node, opts);
	}

	function assertImportAttribute(node, opts) {
	  assert("ImportAttribute", node, opts);
	}

	function assertDecorator(node, opts) {
	  assert("Decorator", node, opts);
	}

	function assertDoExpression(node, opts) {
	  assert("DoExpression", node, opts);
	}

	function assertExportDefaultSpecifier(node, opts) {
	  assert("ExportDefaultSpecifier", node, opts);
	}

	function assertRecordExpression(node, opts) {
	  assert("RecordExpression", node, opts);
	}

	function assertTupleExpression(node, opts) {
	  assert("TupleExpression", node, opts);
	}

	function assertDecimalLiteral(node, opts) {
	  assert("DecimalLiteral", node, opts);
	}

	function assertStaticBlock(node, opts) {
	  assert("StaticBlock", node, opts);
	}

	function assertModuleExpression(node, opts) {
	  assert("ModuleExpression", node, opts);
	}

	function assertTopicReference(node, opts) {
	  assert("TopicReference", node, opts);
	}

	function assertPipelineTopicExpression(node, opts) {
	  assert("PipelineTopicExpression", node, opts);
	}

	function assertPipelineBareFunction(node, opts) {
	  assert("PipelineBareFunction", node, opts);
	}

	function assertPipelinePrimaryTopicReference(node, opts) {
	  assert("PipelinePrimaryTopicReference", node, opts);
	}

	function assertTSParameterProperty(node, opts) {
	  assert("TSParameterProperty", node, opts);
	}

	function assertTSDeclareFunction(node, opts) {
	  assert("TSDeclareFunction", node, opts);
	}

	function assertTSDeclareMethod(node, opts) {
	  assert("TSDeclareMethod", node, opts);
	}

	function assertTSQualifiedName(node, opts) {
	  assert("TSQualifiedName", node, opts);
	}

	function assertTSCallSignatureDeclaration(node, opts) {
	  assert("TSCallSignatureDeclaration", node, opts);
	}

	function assertTSConstructSignatureDeclaration(node, opts) {
	  assert("TSConstructSignatureDeclaration", node, opts);
	}

	function assertTSPropertySignature(node, opts) {
	  assert("TSPropertySignature", node, opts);
	}

	function assertTSMethodSignature(node, opts) {
	  assert("TSMethodSignature", node, opts);
	}

	function assertTSIndexSignature(node, opts) {
	  assert("TSIndexSignature", node, opts);
	}

	function assertTSAnyKeyword(node, opts) {
	  assert("TSAnyKeyword", node, opts);
	}

	function assertTSBooleanKeyword(node, opts) {
	  assert("TSBooleanKeyword", node, opts);
	}

	function assertTSBigIntKeyword(node, opts) {
	  assert("TSBigIntKeyword", node, opts);
	}

	function assertTSIntrinsicKeyword(node, opts) {
	  assert("TSIntrinsicKeyword", node, opts);
	}

	function assertTSNeverKeyword(node, opts) {
	  assert("TSNeverKeyword", node, opts);
	}

	function assertTSNullKeyword(node, opts) {
	  assert("TSNullKeyword", node, opts);
	}

	function assertTSNumberKeyword(node, opts) {
	  assert("TSNumberKeyword", node, opts);
	}

	function assertTSObjectKeyword(node, opts) {
	  assert("TSObjectKeyword", node, opts);
	}

	function assertTSStringKeyword(node, opts) {
	  assert("TSStringKeyword", node, opts);
	}

	function assertTSSymbolKeyword(node, opts) {
	  assert("TSSymbolKeyword", node, opts);
	}

	function assertTSUndefinedKeyword(node, opts) {
	  assert("TSUndefinedKeyword", node, opts);
	}

	function assertTSUnknownKeyword(node, opts) {
	  assert("TSUnknownKeyword", node, opts);
	}

	function assertTSVoidKeyword(node, opts) {
	  assert("TSVoidKeyword", node, opts);
	}

	function assertTSThisType(node, opts) {
	  assert("TSThisType", node, opts);
	}

	function assertTSFunctionType(node, opts) {
	  assert("TSFunctionType", node, opts);
	}

	function assertTSConstructorType(node, opts) {
	  assert("TSConstructorType", node, opts);
	}

	function assertTSTypeReference(node, opts) {
	  assert("TSTypeReference", node, opts);
	}

	function assertTSTypePredicate(node, opts) {
	  assert("TSTypePredicate", node, opts);
	}

	function assertTSTypeQuery(node, opts) {
	  assert("TSTypeQuery", node, opts);
	}

	function assertTSTypeLiteral(node, opts) {
	  assert("TSTypeLiteral", node, opts);
	}

	function assertTSArrayType(node, opts) {
	  assert("TSArrayType", node, opts);
	}

	function assertTSTupleType(node, opts) {
	  assert("TSTupleType", node, opts);
	}

	function assertTSOptionalType(node, opts) {
	  assert("TSOptionalType", node, opts);
	}

	function assertTSRestType(node, opts) {
	  assert("TSRestType", node, opts);
	}

	function assertTSNamedTupleMember(node, opts) {
	  assert("TSNamedTupleMember", node, opts);
	}

	function assertTSUnionType(node, opts) {
	  assert("TSUnionType", node, opts);
	}

	function assertTSIntersectionType(node, opts) {
	  assert("TSIntersectionType", node, opts);
	}

	function assertTSConditionalType(node, opts) {
	  assert("TSConditionalType", node, opts);
	}

	function assertTSInferType(node, opts) {
	  assert("TSInferType", node, opts);
	}

	function assertTSParenthesizedType(node, opts) {
	  assert("TSParenthesizedType", node, opts);
	}

	function assertTSTypeOperator(node, opts) {
	  assert("TSTypeOperator", node, opts);
	}

	function assertTSIndexedAccessType(node, opts) {
	  assert("TSIndexedAccessType", node, opts);
	}

	function assertTSMappedType(node, opts) {
	  assert("TSMappedType", node, opts);
	}

	function assertTSLiteralType(node, opts) {
	  assert("TSLiteralType", node, opts);
	}

	function assertTSExpressionWithTypeArguments(node, opts) {
	  assert("TSExpressionWithTypeArguments", node, opts);
	}

	function assertTSInterfaceDeclaration(node, opts) {
	  assert("TSInterfaceDeclaration", node, opts);
	}

	function assertTSInterfaceBody(node, opts) {
	  assert("TSInterfaceBody", node, opts);
	}

	function assertTSTypeAliasDeclaration(node, opts) {
	  assert("TSTypeAliasDeclaration", node, opts);
	}

	function assertTSAsExpression(node, opts) {
	  assert("TSAsExpression", node, opts);
	}

	function assertTSTypeAssertion(node, opts) {
	  assert("TSTypeAssertion", node, opts);
	}

	function assertTSEnumDeclaration(node, opts) {
	  assert("TSEnumDeclaration", node, opts);
	}

	function assertTSEnumMember(node, opts) {
	  assert("TSEnumMember", node, opts);
	}

	function assertTSModuleDeclaration(node, opts) {
	  assert("TSModuleDeclaration", node, opts);
	}

	function assertTSModuleBlock(node, opts) {
	  assert("TSModuleBlock", node, opts);
	}

	function assertTSImportType(node, opts) {
	  assert("TSImportType", node, opts);
	}

	function assertTSImportEqualsDeclaration(node, opts) {
	  assert("TSImportEqualsDeclaration", node, opts);
	}

	function assertTSExternalModuleReference(node, opts) {
	  assert("TSExternalModuleReference", node, opts);
	}

	function assertTSNonNullExpression(node, opts) {
	  assert("TSNonNullExpression", node, opts);
	}

	function assertTSExportAssignment(node, opts) {
	  assert("TSExportAssignment", node, opts);
	}

	function assertTSNamespaceExportDeclaration(node, opts) {
	  assert("TSNamespaceExportDeclaration", node, opts);
	}

	function assertTSTypeAnnotation(node, opts) {
	  assert("TSTypeAnnotation", node, opts);
	}

	function assertTSTypeParameterInstantiation(node, opts) {
	  assert("TSTypeParameterInstantiation", node, opts);
	}

	function assertTSTypeParameterDeclaration(node, opts) {
	  assert("TSTypeParameterDeclaration", node, opts);
	}

	function assertTSTypeParameter(node, opts) {
	  assert("TSTypeParameter", node, opts);
	}

	function assertExpression$1(node, opts) {
	  assert("Expression", node, opts);
	}

	function assertBinary(node, opts) {
	  assert("Binary", node, opts);
	}

	function assertScopable(node, opts) {
	  assert("Scopable", node, opts);
	}

	function assertBlockParent(node, opts) {
	  assert("BlockParent", node, opts);
	}

	function assertBlock(node, opts) {
	  assert("Block", node, opts);
	}

	function assertStatement(node, opts) {
	  assert("Statement", node, opts);
	}

	function assertTerminatorless(node, opts) {
	  assert("Terminatorless", node, opts);
	}

	function assertCompletionStatement(node, opts) {
	  assert("CompletionStatement", node, opts);
	}

	function assertConditional(node, opts) {
	  assert("Conditional", node, opts);
	}

	function assertLoop(node, opts) {
	  assert("Loop", node, opts);
	}

	function assertWhile(node, opts) {
	  assert("While", node, opts);
	}

	function assertExpressionWrapper(node, opts) {
	  assert("ExpressionWrapper", node, opts);
	}

	function assertFor(node, opts) {
	  assert("For", node, opts);
	}

	function assertForXStatement(node, opts) {
	  assert("ForXStatement", node, opts);
	}

	function assertFunction$1(node, opts) {
	  assert("Function", node, opts);
	}

	function assertFunctionParent(node, opts) {
	  assert("FunctionParent", node, opts);
	}

	function assertPureish(node, opts) {
	  assert("Pureish", node, opts);
	}

	function assertDeclaration(node, opts) {
	  assert("Declaration", node, opts);
	}

	function assertPatternLike(node, opts) {
	  assert("PatternLike", node, opts);
	}

	function assertLVal(node, opts) {
	  assert("LVal", node, opts);
	}

	function assertTSEntityName(node, opts) {
	  assert("TSEntityName", node, opts);
	}

	function assertLiteral(node, opts) {
	  assert("Literal", node, opts);
	}

	function assertImmutable(node, opts) {
	  assert("Immutable", node, opts);
	}

	function assertUserWhitespacable(node, opts) {
	  assert("UserWhitespacable", node, opts);
	}

	function assertMethod(node, opts) {
	  assert("Method", node, opts);
	}

	function assertObjectMember(node, opts) {
	  assert("ObjectMember", node, opts);
	}

	function assertProperty(node, opts) {
	  assert("Property", node, opts);
	}

	function assertUnaryLike(node, opts) {
	  assert("UnaryLike", node, opts);
	}

	function assertPattern(node, opts) {
	  assert("Pattern", node, opts);
	}

	function assertClass(node, opts) {
	  assert("Class", node, opts);
	}

	function assertModuleDeclaration(node, opts) {
	  assert("ModuleDeclaration", node, opts);
	}

	function assertExportDeclaration(node, opts) {
	  assert("ExportDeclaration", node, opts);
	}

	function assertModuleSpecifier(node, opts) {
	  assert("ModuleSpecifier", node, opts);
	}

	function assertPrivate(node, opts) {
	  assert("Private", node, opts);
	}

	function assertFlow(node, opts) {
	  assert("Flow", node, opts);
	}

	function assertFlowType(node, opts) {
	  assert("FlowType", node, opts);
	}

	function assertFlowBaseAnnotation(node, opts) {
	  assert("FlowBaseAnnotation", node, opts);
	}

	function assertFlowDeclaration(node, opts) {
	  assert("FlowDeclaration", node, opts);
	}

	function assertFlowPredicate(node, opts) {
	  assert("FlowPredicate", node, opts);
	}

	function assertEnumBody(node, opts) {
	  assert("EnumBody", node, opts);
	}

	function assertEnumMember(node, opts) {
	  assert("EnumMember", node, opts);
	}

	function assertJSX(node, opts) {
	  assert("JSX", node, opts);
	}

	function assertTSTypeElement(node, opts) {
	  assert("TSTypeElement", node, opts);
	}

	function assertTSType(node, opts) {
	  assert("TSType", node, opts);
	}

	function assertTSBaseType(node, opts) {
	  assert("TSBaseType", node, opts);
	}

	function assertNumberLiteral(node, opts) {
	  console.trace("The node type NumberLiteral has been renamed to NumericLiteral");
	  assert("NumberLiteral", node, opts);
	}

	function assertRegexLiteral(node, opts) {
	  console.trace("The node type RegexLiteral has been renamed to RegExpLiteral");
	  assert("RegexLiteral", node, opts);
	}

	function assertRestProperty(node, opts) {
	  console.trace("The node type RestProperty has been renamed to RestElement");
	  assert("RestProperty", node, opts);
	}

	function assertSpreadProperty(node, opts) {
	  console.trace("The node type SpreadProperty has been renamed to SpreadElement");
	  assert("SpreadProperty", node, opts);
	}

	var createTypeAnnotationBasedOnTypeof$2 = {};

	Object.defineProperty(createTypeAnnotationBasedOnTypeof$2, "__esModule", {
	  value: true
	});
	createTypeAnnotationBasedOnTypeof$2.default = createTypeAnnotationBasedOnTypeof$1;

	var _generated$l = generated$4;

	function createTypeAnnotationBasedOnTypeof$1(type) {
	  if (type === "string") {
	    return (0, _generated$l.stringTypeAnnotation)();
	  } else if (type === "number") {
	    return (0, _generated$l.numberTypeAnnotation)();
	  } else if (type === "undefined") {
	    return (0, _generated$l.voidTypeAnnotation)();
	  } else if (type === "boolean") {
	    return (0, _generated$l.booleanTypeAnnotation)();
	  } else if (type === "function") {
	    return (0, _generated$l.genericTypeAnnotation)((0, _generated$l.identifier)("Function"));
	  } else if (type === "object") {
	    return (0, _generated$l.genericTypeAnnotation)((0, _generated$l.identifier)("Object"));
	  } else if (type === "symbol") {
	    return (0, _generated$l.genericTypeAnnotation)((0, _generated$l.identifier)("Symbol"));
	  } else if (type === "bigint") {
	    return (0, _generated$l.anyTypeAnnotation)();
	  } else {
	    throw new Error("Invalid typeof value: " + type);
	  }
	}

	var createFlowUnionType$2 = {};

	var removeTypeDuplicates$3 = {};

	Object.defineProperty(removeTypeDuplicates$3, "__esModule", {
	  value: true
	});
	removeTypeDuplicates$3.default = removeTypeDuplicates$2;

	var _generated$k = generated$5;

	function getQualifiedName(node) {
	  return (0, _generated$k.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName(node.qualification)}`;
	}

	function removeTypeDuplicates$2(nodes) {
	  const generics = {};
	  const bases = {};
	  const typeGroups = new Set();
	  const types = [];

	  for (let i = 0; i < nodes.length; i++) {
	    const node = nodes[i];
	    if (!node) continue;

	    if (types.indexOf(node) >= 0) {
	      continue;
	    }

	    if ((0, _generated$k.isAnyTypeAnnotation)(node)) {
	      return [node];
	    }

	    if ((0, _generated$k.isFlowBaseAnnotation)(node)) {
	      bases[node.type] = node;
	      continue;
	    }

	    if ((0, _generated$k.isUnionTypeAnnotation)(node)) {
	      if (!typeGroups.has(node.types)) {
	        nodes = nodes.concat(node.types);
	        typeGroups.add(node.types);
	      }

	      continue;
	    }

	    if ((0, _generated$k.isGenericTypeAnnotation)(node)) {
	      const name = getQualifiedName(node.id);

	      if (generics[name]) {
	        let existing = generics[name];

	        if (existing.typeParameters) {
	          if (node.typeParameters) {
	            existing.typeParameters.params = removeTypeDuplicates$2(existing.typeParameters.params.concat(node.typeParameters.params));
	          }
	        } else {
	          existing = node.typeParameters;
	        }
	      } else {
	        generics[name] = node;
	      }

	      continue;
	    }

	    types.push(node);
	  }

	  for (const type of Object.keys(bases)) {
	    types.push(bases[type]);
	  }

	  for (const name of Object.keys(generics)) {
	    types.push(generics[name]);
	  }

	  return types;
	}

	Object.defineProperty(createFlowUnionType$2, "__esModule", {
	  value: true
	});
	createFlowUnionType$2.default = createFlowUnionType$1;

	var _generated$j = generated$4;

	var _removeTypeDuplicates$1 = removeTypeDuplicates$3;

	function createFlowUnionType$1(types) {
	  const flattened = (0, _removeTypeDuplicates$1.default)(types);

	  if (flattened.length === 1) {
	    return flattened[0];
	  } else {
	    return (0, _generated$j.unionTypeAnnotation)(flattened);
	  }
	}

	var createTSUnionType$2 = {};

	var removeTypeDuplicates$1 = {};

	Object.defineProperty(removeTypeDuplicates$1, "__esModule", {
	  value: true
	});
	removeTypeDuplicates$1.default = removeTypeDuplicates;

	var _generated$i = generated$5;

	function removeTypeDuplicates(nodes) {
	  const generics = {};
	  const bases = {};
	  const typeGroups = new Set();
	  const types = [];

	  for (let i = 0; i < nodes.length; i++) {
	    const node = nodes[i];
	    if (!node) continue;

	    if (types.indexOf(node) >= 0) {
	      continue;
	    }

	    if ((0, _generated$i.isTSAnyKeyword)(node)) {
	      return [node];
	    }

	    if ((0, _generated$i.isTSBaseType)(node)) {
	      bases[node.type] = node;
	      continue;
	    }

	    if ((0, _generated$i.isTSUnionType)(node)) {
	      if (!typeGroups.has(node.types)) {
	        nodes.push(...node.types);
	        typeGroups.add(node.types);
	      }

	      continue;
	    }

	    types.push(node);
	  }

	  for (const type of Object.keys(bases)) {
	    types.push(bases[type]);
	  }

	  for (const name of Object.keys(generics)) {
	    types.push(generics[name]);
	  }

	  return types;
	}

	Object.defineProperty(createTSUnionType$2, "__esModule", {
	  value: true
	});
	createTSUnionType$2.default = createTSUnionType$1;

	var _generated$h = generated$4;

	var _removeTypeDuplicates = removeTypeDuplicates$1;

	function createTSUnionType$1(typeAnnotations) {
	  const types = typeAnnotations.map(type => type.typeAnnotation);
	  const flattened = (0, _removeTypeDuplicates.default)(types);

	  if (flattened.length === 1) {
	    return flattened[0];
	  } else {
	    return (0, _generated$h.tsUnionType)(flattened);
	  }
	}

	var uppercase = {};

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "ArrayExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.arrayExpression;
	  }
	});
	Object.defineProperty(exports, "AssignmentExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.assignmentExpression;
	  }
	});
	Object.defineProperty(exports, "BinaryExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.binaryExpression;
	  }
	});
	Object.defineProperty(exports, "InterpreterDirective", {
	  enumerable: true,
	  get: function () {
	    return _index.interpreterDirective;
	  }
	});
	Object.defineProperty(exports, "Directive", {
	  enumerable: true,
	  get: function () {
	    return _index.directive;
	  }
	});
	Object.defineProperty(exports, "DirectiveLiteral", {
	  enumerable: true,
	  get: function () {
	    return _index.directiveLiteral;
	  }
	});
	Object.defineProperty(exports, "BlockStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.blockStatement;
	  }
	});
	Object.defineProperty(exports, "BreakStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.breakStatement;
	  }
	});
	Object.defineProperty(exports, "CallExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.callExpression;
	  }
	});
	Object.defineProperty(exports, "CatchClause", {
	  enumerable: true,
	  get: function () {
	    return _index.catchClause;
	  }
	});
	Object.defineProperty(exports, "ConditionalExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.conditionalExpression;
	  }
	});
	Object.defineProperty(exports, "ContinueStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.continueStatement;
	  }
	});
	Object.defineProperty(exports, "DebuggerStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.debuggerStatement;
	  }
	});
	Object.defineProperty(exports, "DoWhileStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.doWhileStatement;
	  }
	});
	Object.defineProperty(exports, "EmptyStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.emptyStatement;
	  }
	});
	Object.defineProperty(exports, "ExpressionStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.expressionStatement;
	  }
	});
	Object.defineProperty(exports, "File", {
	  enumerable: true,
	  get: function () {
	    return _index.file;
	  }
	});
	Object.defineProperty(exports, "ForInStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.forInStatement;
	  }
	});
	Object.defineProperty(exports, "ForStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.forStatement;
	  }
	});
	Object.defineProperty(exports, "FunctionDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.functionDeclaration;
	  }
	});
	Object.defineProperty(exports, "FunctionExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.functionExpression;
	  }
	});
	Object.defineProperty(exports, "Identifier", {
	  enumerable: true,
	  get: function () {
	    return _index.identifier;
	  }
	});
	Object.defineProperty(exports, "IfStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.ifStatement;
	  }
	});
	Object.defineProperty(exports, "LabeledStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.labeledStatement;
	  }
	});
	Object.defineProperty(exports, "StringLiteral", {
	  enumerable: true,
	  get: function () {
	    return _index.stringLiteral;
	  }
	});
	Object.defineProperty(exports, "NumericLiteral", {
	  enumerable: true,
	  get: function () {
	    return _index.numericLiteral;
	  }
	});
	Object.defineProperty(exports, "NullLiteral", {
	  enumerable: true,
	  get: function () {
	    return _index.nullLiteral;
	  }
	});
	Object.defineProperty(exports, "BooleanLiteral", {
	  enumerable: true,
	  get: function () {
	    return _index.booleanLiteral;
	  }
	});
	Object.defineProperty(exports, "RegExpLiteral", {
	  enumerable: true,
	  get: function () {
	    return _index.regExpLiteral;
	  }
	});
	Object.defineProperty(exports, "LogicalExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.logicalExpression;
	  }
	});
	Object.defineProperty(exports, "MemberExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.memberExpression;
	  }
	});
	Object.defineProperty(exports, "NewExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.newExpression;
	  }
	});
	Object.defineProperty(exports, "Program", {
	  enumerable: true,
	  get: function () {
	    return _index.program;
	  }
	});
	Object.defineProperty(exports, "ObjectExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.objectExpression;
	  }
	});
	Object.defineProperty(exports, "ObjectMethod", {
	  enumerable: true,
	  get: function () {
	    return _index.objectMethod;
	  }
	});
	Object.defineProperty(exports, "ObjectProperty", {
	  enumerable: true,
	  get: function () {
	    return _index.objectProperty;
	  }
	});
	Object.defineProperty(exports, "RestElement", {
	  enumerable: true,
	  get: function () {
	    return _index.restElement;
	  }
	});
	Object.defineProperty(exports, "ReturnStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.returnStatement;
	  }
	});
	Object.defineProperty(exports, "SequenceExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.sequenceExpression;
	  }
	});
	Object.defineProperty(exports, "ParenthesizedExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.parenthesizedExpression;
	  }
	});
	Object.defineProperty(exports, "SwitchCase", {
	  enumerable: true,
	  get: function () {
	    return _index.switchCase;
	  }
	});
	Object.defineProperty(exports, "SwitchStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.switchStatement;
	  }
	});
	Object.defineProperty(exports, "ThisExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.thisExpression;
	  }
	});
	Object.defineProperty(exports, "ThrowStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.throwStatement;
	  }
	});
	Object.defineProperty(exports, "TryStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.tryStatement;
	  }
	});
	Object.defineProperty(exports, "UnaryExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.unaryExpression;
	  }
	});
	Object.defineProperty(exports, "UpdateExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.updateExpression;
	  }
	});
	Object.defineProperty(exports, "VariableDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.variableDeclaration;
	  }
	});
	Object.defineProperty(exports, "VariableDeclarator", {
	  enumerable: true,
	  get: function () {
	    return _index.variableDeclarator;
	  }
	});
	Object.defineProperty(exports, "WhileStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.whileStatement;
	  }
	});
	Object.defineProperty(exports, "WithStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.withStatement;
	  }
	});
	Object.defineProperty(exports, "AssignmentPattern", {
	  enumerable: true,
	  get: function () {
	    return _index.assignmentPattern;
	  }
	});
	Object.defineProperty(exports, "ArrayPattern", {
	  enumerable: true,
	  get: function () {
	    return _index.arrayPattern;
	  }
	});
	Object.defineProperty(exports, "ArrowFunctionExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.arrowFunctionExpression;
	  }
	});
	Object.defineProperty(exports, "ClassBody", {
	  enumerable: true,
	  get: function () {
	    return _index.classBody;
	  }
	});
	Object.defineProperty(exports, "ClassExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.classExpression;
	  }
	});
	Object.defineProperty(exports, "ClassDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.classDeclaration;
	  }
	});
	Object.defineProperty(exports, "ExportAllDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.exportAllDeclaration;
	  }
	});
	Object.defineProperty(exports, "ExportDefaultDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.exportDefaultDeclaration;
	  }
	});
	Object.defineProperty(exports, "ExportNamedDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.exportNamedDeclaration;
	  }
	});
	Object.defineProperty(exports, "ExportSpecifier", {
	  enumerable: true,
	  get: function () {
	    return _index.exportSpecifier;
	  }
	});
	Object.defineProperty(exports, "ForOfStatement", {
	  enumerable: true,
	  get: function () {
	    return _index.forOfStatement;
	  }
	});
	Object.defineProperty(exports, "ImportDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.importDeclaration;
	  }
	});
	Object.defineProperty(exports, "ImportDefaultSpecifier", {
	  enumerable: true,
	  get: function () {
	    return _index.importDefaultSpecifier;
	  }
	});
	Object.defineProperty(exports, "ImportNamespaceSpecifier", {
	  enumerable: true,
	  get: function () {
	    return _index.importNamespaceSpecifier;
	  }
	});
	Object.defineProperty(exports, "ImportSpecifier", {
	  enumerable: true,
	  get: function () {
	    return _index.importSpecifier;
	  }
	});
	Object.defineProperty(exports, "MetaProperty", {
	  enumerable: true,
	  get: function () {
	    return _index.metaProperty;
	  }
	});
	Object.defineProperty(exports, "ClassMethod", {
	  enumerable: true,
	  get: function () {
	    return _index.classMethod;
	  }
	});
	Object.defineProperty(exports, "ObjectPattern", {
	  enumerable: true,
	  get: function () {
	    return _index.objectPattern;
	  }
	});
	Object.defineProperty(exports, "SpreadElement", {
	  enumerable: true,
	  get: function () {
	    return _index.spreadElement;
	  }
	});
	Object.defineProperty(exports, "Super", {
	  enumerable: true,
	  get: function () {
	    return _index.super;
	  }
	});
	Object.defineProperty(exports, "TaggedTemplateExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.taggedTemplateExpression;
	  }
	});
	Object.defineProperty(exports, "TemplateElement", {
	  enumerable: true,
	  get: function () {
	    return _index.templateElement;
	  }
	});
	Object.defineProperty(exports, "TemplateLiteral", {
	  enumerable: true,
	  get: function () {
	    return _index.templateLiteral;
	  }
	});
	Object.defineProperty(exports, "YieldExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.yieldExpression;
	  }
	});
	Object.defineProperty(exports, "AwaitExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.awaitExpression;
	  }
	});
	Object.defineProperty(exports, "Import", {
	  enumerable: true,
	  get: function () {
	    return _index.import;
	  }
	});
	Object.defineProperty(exports, "BigIntLiteral", {
	  enumerable: true,
	  get: function () {
	    return _index.bigIntLiteral;
	  }
	});
	Object.defineProperty(exports, "ExportNamespaceSpecifier", {
	  enumerable: true,
	  get: function () {
	    return _index.exportNamespaceSpecifier;
	  }
	});
	Object.defineProperty(exports, "OptionalMemberExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.optionalMemberExpression;
	  }
	});
	Object.defineProperty(exports, "OptionalCallExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.optionalCallExpression;
	  }
	});
	Object.defineProperty(exports, "ClassProperty", {
	  enumerable: true,
	  get: function () {
	    return _index.classProperty;
	  }
	});
	Object.defineProperty(exports, "ClassPrivateProperty", {
	  enumerable: true,
	  get: function () {
	    return _index.classPrivateProperty;
	  }
	});
	Object.defineProperty(exports, "ClassPrivateMethod", {
	  enumerable: true,
	  get: function () {
	    return _index.classPrivateMethod;
	  }
	});
	Object.defineProperty(exports, "PrivateName", {
	  enumerable: true,
	  get: function () {
	    return _index.privateName;
	  }
	});
	Object.defineProperty(exports, "AnyTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.anyTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "ArrayTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.arrayTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "BooleanTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.booleanTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "BooleanLiteralTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.booleanLiteralTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "NullLiteralTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.nullLiteralTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "ClassImplements", {
	  enumerable: true,
	  get: function () {
	    return _index.classImplements;
	  }
	});
	Object.defineProperty(exports, "DeclareClass", {
	  enumerable: true,
	  get: function () {
	    return _index.declareClass;
	  }
	});
	Object.defineProperty(exports, "DeclareFunction", {
	  enumerable: true,
	  get: function () {
	    return _index.declareFunction;
	  }
	});
	Object.defineProperty(exports, "DeclareInterface", {
	  enumerable: true,
	  get: function () {
	    return _index.declareInterface;
	  }
	});
	Object.defineProperty(exports, "DeclareModule", {
	  enumerable: true,
	  get: function () {
	    return _index.declareModule;
	  }
	});
	Object.defineProperty(exports, "DeclareModuleExports", {
	  enumerable: true,
	  get: function () {
	    return _index.declareModuleExports;
	  }
	});
	Object.defineProperty(exports, "DeclareTypeAlias", {
	  enumerable: true,
	  get: function () {
	    return _index.declareTypeAlias;
	  }
	});
	Object.defineProperty(exports, "DeclareOpaqueType", {
	  enumerable: true,
	  get: function () {
	    return _index.declareOpaqueType;
	  }
	});
	Object.defineProperty(exports, "DeclareVariable", {
	  enumerable: true,
	  get: function () {
	    return _index.declareVariable;
	  }
	});
	Object.defineProperty(exports, "DeclareExportDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.declareExportDeclaration;
	  }
	});
	Object.defineProperty(exports, "DeclareExportAllDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.declareExportAllDeclaration;
	  }
	});
	Object.defineProperty(exports, "DeclaredPredicate", {
	  enumerable: true,
	  get: function () {
	    return _index.declaredPredicate;
	  }
	});
	Object.defineProperty(exports, "ExistsTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.existsTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "FunctionTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.functionTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "FunctionTypeParam", {
	  enumerable: true,
	  get: function () {
	    return _index.functionTypeParam;
	  }
	});
	Object.defineProperty(exports, "GenericTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.genericTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "InferredPredicate", {
	  enumerable: true,
	  get: function () {
	    return _index.inferredPredicate;
	  }
	});
	Object.defineProperty(exports, "InterfaceExtends", {
	  enumerable: true,
	  get: function () {
	    return _index.interfaceExtends;
	  }
	});
	Object.defineProperty(exports, "InterfaceDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.interfaceDeclaration;
	  }
	});
	Object.defineProperty(exports, "InterfaceTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.interfaceTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "IntersectionTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.intersectionTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "MixedTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.mixedTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "EmptyTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.emptyTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "NullableTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.nullableTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "NumberLiteralTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.numberLiteralTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "NumberTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.numberTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "ObjectTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.objectTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "ObjectTypeInternalSlot", {
	  enumerable: true,
	  get: function () {
	    return _index.objectTypeInternalSlot;
	  }
	});
	Object.defineProperty(exports, "ObjectTypeCallProperty", {
	  enumerable: true,
	  get: function () {
	    return _index.objectTypeCallProperty;
	  }
	});
	Object.defineProperty(exports, "ObjectTypeIndexer", {
	  enumerable: true,
	  get: function () {
	    return _index.objectTypeIndexer;
	  }
	});
	Object.defineProperty(exports, "ObjectTypeProperty", {
	  enumerable: true,
	  get: function () {
	    return _index.objectTypeProperty;
	  }
	});
	Object.defineProperty(exports, "ObjectTypeSpreadProperty", {
	  enumerable: true,
	  get: function () {
	    return _index.objectTypeSpreadProperty;
	  }
	});
	Object.defineProperty(exports, "OpaqueType", {
	  enumerable: true,
	  get: function () {
	    return _index.opaqueType;
	  }
	});
	Object.defineProperty(exports, "QualifiedTypeIdentifier", {
	  enumerable: true,
	  get: function () {
	    return _index.qualifiedTypeIdentifier;
	  }
	});
	Object.defineProperty(exports, "StringLiteralTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.stringLiteralTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "StringTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.stringTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "SymbolTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.symbolTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "ThisTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.thisTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "TupleTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.tupleTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "TypeofTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.typeofTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "TypeAlias", {
	  enumerable: true,
	  get: function () {
	    return _index.typeAlias;
	  }
	});
	Object.defineProperty(exports, "TypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.typeAnnotation;
	  }
	});
	Object.defineProperty(exports, "TypeCastExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.typeCastExpression;
	  }
	});
	Object.defineProperty(exports, "TypeParameter", {
	  enumerable: true,
	  get: function () {
	    return _index.typeParameter;
	  }
	});
	Object.defineProperty(exports, "TypeParameterDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.typeParameterDeclaration;
	  }
	});
	Object.defineProperty(exports, "TypeParameterInstantiation", {
	  enumerable: true,
	  get: function () {
	    return _index.typeParameterInstantiation;
	  }
	});
	Object.defineProperty(exports, "UnionTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.unionTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "Variance", {
	  enumerable: true,
	  get: function () {
	    return _index.variance;
	  }
	});
	Object.defineProperty(exports, "VoidTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.voidTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "EnumDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.enumDeclaration;
	  }
	});
	Object.defineProperty(exports, "EnumBooleanBody", {
	  enumerable: true,
	  get: function () {
	    return _index.enumBooleanBody;
	  }
	});
	Object.defineProperty(exports, "EnumNumberBody", {
	  enumerable: true,
	  get: function () {
	    return _index.enumNumberBody;
	  }
	});
	Object.defineProperty(exports, "EnumStringBody", {
	  enumerable: true,
	  get: function () {
	    return _index.enumStringBody;
	  }
	});
	Object.defineProperty(exports, "EnumSymbolBody", {
	  enumerable: true,
	  get: function () {
	    return _index.enumSymbolBody;
	  }
	});
	Object.defineProperty(exports, "EnumBooleanMember", {
	  enumerable: true,
	  get: function () {
	    return _index.enumBooleanMember;
	  }
	});
	Object.defineProperty(exports, "EnumNumberMember", {
	  enumerable: true,
	  get: function () {
	    return _index.enumNumberMember;
	  }
	});
	Object.defineProperty(exports, "EnumStringMember", {
	  enumerable: true,
	  get: function () {
	    return _index.enumStringMember;
	  }
	});
	Object.defineProperty(exports, "EnumDefaultedMember", {
	  enumerable: true,
	  get: function () {
	    return _index.enumDefaultedMember;
	  }
	});
	Object.defineProperty(exports, "IndexedAccessType", {
	  enumerable: true,
	  get: function () {
	    return _index.indexedAccessType;
	  }
	});
	Object.defineProperty(exports, "OptionalIndexedAccessType", {
	  enumerable: true,
	  get: function () {
	    return _index.optionalIndexedAccessType;
	  }
	});
	Object.defineProperty(exports, "JSXAttribute", {
	  enumerable: true,
	  get: function () {
	    return _index.jsxAttribute;
	  }
	});
	Object.defineProperty(exports, "JSXClosingElement", {
	  enumerable: true,
	  get: function () {
	    return _index.jsxClosingElement;
	  }
	});
	Object.defineProperty(exports, "JSXElement", {
	  enumerable: true,
	  get: function () {
	    return _index.jsxElement;
	  }
	});
	Object.defineProperty(exports, "JSXEmptyExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.jsxEmptyExpression;
	  }
	});
	Object.defineProperty(exports, "JSXExpressionContainer", {
	  enumerable: true,
	  get: function () {
	    return _index.jsxExpressionContainer;
	  }
	});
	Object.defineProperty(exports, "JSXSpreadChild", {
	  enumerable: true,
	  get: function () {
	    return _index.jsxSpreadChild;
	  }
	});
	Object.defineProperty(exports, "JSXIdentifier", {
	  enumerable: true,
	  get: function () {
	    return _index.jsxIdentifier;
	  }
	});
	Object.defineProperty(exports, "JSXMemberExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.jsxMemberExpression;
	  }
	});
	Object.defineProperty(exports, "JSXNamespacedName", {
	  enumerable: true,
	  get: function () {
	    return _index.jsxNamespacedName;
	  }
	});
	Object.defineProperty(exports, "JSXOpeningElement", {
	  enumerable: true,
	  get: function () {
	    return _index.jsxOpeningElement;
	  }
	});
	Object.defineProperty(exports, "JSXSpreadAttribute", {
	  enumerable: true,
	  get: function () {
	    return _index.jsxSpreadAttribute;
	  }
	});
	Object.defineProperty(exports, "JSXText", {
	  enumerable: true,
	  get: function () {
	    return _index.jsxText;
	  }
	});
	Object.defineProperty(exports, "JSXFragment", {
	  enumerable: true,
	  get: function () {
	    return _index.jsxFragment;
	  }
	});
	Object.defineProperty(exports, "JSXOpeningFragment", {
	  enumerable: true,
	  get: function () {
	    return _index.jsxOpeningFragment;
	  }
	});
	Object.defineProperty(exports, "JSXClosingFragment", {
	  enumerable: true,
	  get: function () {
	    return _index.jsxClosingFragment;
	  }
	});
	Object.defineProperty(exports, "Noop", {
	  enumerable: true,
	  get: function () {
	    return _index.noop;
	  }
	});
	Object.defineProperty(exports, "Placeholder", {
	  enumerable: true,
	  get: function () {
	    return _index.placeholder;
	  }
	});
	Object.defineProperty(exports, "V8IntrinsicIdentifier", {
	  enumerable: true,
	  get: function () {
	    return _index.v8IntrinsicIdentifier;
	  }
	});
	Object.defineProperty(exports, "ArgumentPlaceholder", {
	  enumerable: true,
	  get: function () {
	    return _index.argumentPlaceholder;
	  }
	});
	Object.defineProperty(exports, "BindExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.bindExpression;
	  }
	});
	Object.defineProperty(exports, "ImportAttribute", {
	  enumerable: true,
	  get: function () {
	    return _index.importAttribute;
	  }
	});
	Object.defineProperty(exports, "Decorator", {
	  enumerable: true,
	  get: function () {
	    return _index.decorator;
	  }
	});
	Object.defineProperty(exports, "DoExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.doExpression;
	  }
	});
	Object.defineProperty(exports, "ExportDefaultSpecifier", {
	  enumerable: true,
	  get: function () {
	    return _index.exportDefaultSpecifier;
	  }
	});
	Object.defineProperty(exports, "RecordExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.recordExpression;
	  }
	});
	Object.defineProperty(exports, "TupleExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.tupleExpression;
	  }
	});
	Object.defineProperty(exports, "DecimalLiteral", {
	  enumerable: true,
	  get: function () {
	    return _index.decimalLiteral;
	  }
	});
	Object.defineProperty(exports, "StaticBlock", {
	  enumerable: true,
	  get: function () {
	    return _index.staticBlock;
	  }
	});
	Object.defineProperty(exports, "ModuleExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.moduleExpression;
	  }
	});
	Object.defineProperty(exports, "TopicReference", {
	  enumerable: true,
	  get: function () {
	    return _index.topicReference;
	  }
	});
	Object.defineProperty(exports, "PipelineTopicExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.pipelineTopicExpression;
	  }
	});
	Object.defineProperty(exports, "PipelineBareFunction", {
	  enumerable: true,
	  get: function () {
	    return _index.pipelineBareFunction;
	  }
	});
	Object.defineProperty(exports, "PipelinePrimaryTopicReference", {
	  enumerable: true,
	  get: function () {
	    return _index.pipelinePrimaryTopicReference;
	  }
	});
	Object.defineProperty(exports, "TSParameterProperty", {
	  enumerable: true,
	  get: function () {
	    return _index.tsParameterProperty;
	  }
	});
	Object.defineProperty(exports, "TSDeclareFunction", {
	  enumerable: true,
	  get: function () {
	    return _index.tsDeclareFunction;
	  }
	});
	Object.defineProperty(exports, "TSDeclareMethod", {
	  enumerable: true,
	  get: function () {
	    return _index.tsDeclareMethod;
	  }
	});
	Object.defineProperty(exports, "TSQualifiedName", {
	  enumerable: true,
	  get: function () {
	    return _index.tsQualifiedName;
	  }
	});
	Object.defineProperty(exports, "TSCallSignatureDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.tsCallSignatureDeclaration;
	  }
	});
	Object.defineProperty(exports, "TSConstructSignatureDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.tsConstructSignatureDeclaration;
	  }
	});
	Object.defineProperty(exports, "TSPropertySignature", {
	  enumerable: true,
	  get: function () {
	    return _index.tsPropertySignature;
	  }
	});
	Object.defineProperty(exports, "TSMethodSignature", {
	  enumerable: true,
	  get: function () {
	    return _index.tsMethodSignature;
	  }
	});
	Object.defineProperty(exports, "TSIndexSignature", {
	  enumerable: true,
	  get: function () {
	    return _index.tsIndexSignature;
	  }
	});
	Object.defineProperty(exports, "TSAnyKeyword", {
	  enumerable: true,
	  get: function () {
	    return _index.tsAnyKeyword;
	  }
	});
	Object.defineProperty(exports, "TSBooleanKeyword", {
	  enumerable: true,
	  get: function () {
	    return _index.tsBooleanKeyword;
	  }
	});
	Object.defineProperty(exports, "TSBigIntKeyword", {
	  enumerable: true,
	  get: function () {
	    return _index.tsBigIntKeyword;
	  }
	});
	Object.defineProperty(exports, "TSIntrinsicKeyword", {
	  enumerable: true,
	  get: function () {
	    return _index.tsIntrinsicKeyword;
	  }
	});
	Object.defineProperty(exports, "TSNeverKeyword", {
	  enumerable: true,
	  get: function () {
	    return _index.tsNeverKeyword;
	  }
	});
	Object.defineProperty(exports, "TSNullKeyword", {
	  enumerable: true,
	  get: function () {
	    return _index.tsNullKeyword;
	  }
	});
	Object.defineProperty(exports, "TSNumberKeyword", {
	  enumerable: true,
	  get: function () {
	    return _index.tsNumberKeyword;
	  }
	});
	Object.defineProperty(exports, "TSObjectKeyword", {
	  enumerable: true,
	  get: function () {
	    return _index.tsObjectKeyword;
	  }
	});
	Object.defineProperty(exports, "TSStringKeyword", {
	  enumerable: true,
	  get: function () {
	    return _index.tsStringKeyword;
	  }
	});
	Object.defineProperty(exports, "TSSymbolKeyword", {
	  enumerable: true,
	  get: function () {
	    return _index.tsSymbolKeyword;
	  }
	});
	Object.defineProperty(exports, "TSUndefinedKeyword", {
	  enumerable: true,
	  get: function () {
	    return _index.tsUndefinedKeyword;
	  }
	});
	Object.defineProperty(exports, "TSUnknownKeyword", {
	  enumerable: true,
	  get: function () {
	    return _index.tsUnknownKeyword;
	  }
	});
	Object.defineProperty(exports, "TSVoidKeyword", {
	  enumerable: true,
	  get: function () {
	    return _index.tsVoidKeyword;
	  }
	});
	Object.defineProperty(exports, "TSThisType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsThisType;
	  }
	});
	Object.defineProperty(exports, "TSFunctionType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsFunctionType;
	  }
	});
	Object.defineProperty(exports, "TSConstructorType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsConstructorType;
	  }
	});
	Object.defineProperty(exports, "TSTypeReference", {
	  enumerable: true,
	  get: function () {
	    return _index.tsTypeReference;
	  }
	});
	Object.defineProperty(exports, "TSTypePredicate", {
	  enumerable: true,
	  get: function () {
	    return _index.tsTypePredicate;
	  }
	});
	Object.defineProperty(exports, "TSTypeQuery", {
	  enumerable: true,
	  get: function () {
	    return _index.tsTypeQuery;
	  }
	});
	Object.defineProperty(exports, "TSTypeLiteral", {
	  enumerable: true,
	  get: function () {
	    return _index.tsTypeLiteral;
	  }
	});
	Object.defineProperty(exports, "TSArrayType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsArrayType;
	  }
	});
	Object.defineProperty(exports, "TSTupleType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsTupleType;
	  }
	});
	Object.defineProperty(exports, "TSOptionalType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsOptionalType;
	  }
	});
	Object.defineProperty(exports, "TSRestType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsRestType;
	  }
	});
	Object.defineProperty(exports, "TSNamedTupleMember", {
	  enumerable: true,
	  get: function () {
	    return _index.tsNamedTupleMember;
	  }
	});
	Object.defineProperty(exports, "TSUnionType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsUnionType;
	  }
	});
	Object.defineProperty(exports, "TSIntersectionType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsIntersectionType;
	  }
	});
	Object.defineProperty(exports, "TSConditionalType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsConditionalType;
	  }
	});
	Object.defineProperty(exports, "TSInferType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsInferType;
	  }
	});
	Object.defineProperty(exports, "TSParenthesizedType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsParenthesizedType;
	  }
	});
	Object.defineProperty(exports, "TSTypeOperator", {
	  enumerable: true,
	  get: function () {
	    return _index.tsTypeOperator;
	  }
	});
	Object.defineProperty(exports, "TSIndexedAccessType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsIndexedAccessType;
	  }
	});
	Object.defineProperty(exports, "TSMappedType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsMappedType;
	  }
	});
	Object.defineProperty(exports, "TSLiteralType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsLiteralType;
	  }
	});
	Object.defineProperty(exports, "TSExpressionWithTypeArguments", {
	  enumerable: true,
	  get: function () {
	    return _index.tsExpressionWithTypeArguments;
	  }
	});
	Object.defineProperty(exports, "TSInterfaceDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.tsInterfaceDeclaration;
	  }
	});
	Object.defineProperty(exports, "TSInterfaceBody", {
	  enumerable: true,
	  get: function () {
	    return _index.tsInterfaceBody;
	  }
	});
	Object.defineProperty(exports, "TSTypeAliasDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.tsTypeAliasDeclaration;
	  }
	});
	Object.defineProperty(exports, "TSAsExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.tsAsExpression;
	  }
	});
	Object.defineProperty(exports, "TSTypeAssertion", {
	  enumerable: true,
	  get: function () {
	    return _index.tsTypeAssertion;
	  }
	});
	Object.defineProperty(exports, "TSEnumDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.tsEnumDeclaration;
	  }
	});
	Object.defineProperty(exports, "TSEnumMember", {
	  enumerable: true,
	  get: function () {
	    return _index.tsEnumMember;
	  }
	});
	Object.defineProperty(exports, "TSModuleDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.tsModuleDeclaration;
	  }
	});
	Object.defineProperty(exports, "TSModuleBlock", {
	  enumerable: true,
	  get: function () {
	    return _index.tsModuleBlock;
	  }
	});
	Object.defineProperty(exports, "TSImportType", {
	  enumerable: true,
	  get: function () {
	    return _index.tsImportType;
	  }
	});
	Object.defineProperty(exports, "TSImportEqualsDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.tsImportEqualsDeclaration;
	  }
	});
	Object.defineProperty(exports, "TSExternalModuleReference", {
	  enumerable: true,
	  get: function () {
	    return _index.tsExternalModuleReference;
	  }
	});
	Object.defineProperty(exports, "TSNonNullExpression", {
	  enumerable: true,
	  get: function () {
	    return _index.tsNonNullExpression;
	  }
	});
	Object.defineProperty(exports, "TSExportAssignment", {
	  enumerable: true,
	  get: function () {
	    return _index.tsExportAssignment;
	  }
	});
	Object.defineProperty(exports, "TSNamespaceExportDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.tsNamespaceExportDeclaration;
	  }
	});
	Object.defineProperty(exports, "TSTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _index.tsTypeAnnotation;
	  }
	});
	Object.defineProperty(exports, "TSTypeParameterInstantiation", {
	  enumerable: true,
	  get: function () {
	    return _index.tsTypeParameterInstantiation;
	  }
	});
	Object.defineProperty(exports, "TSTypeParameterDeclaration", {
	  enumerable: true,
	  get: function () {
	    return _index.tsTypeParameterDeclaration;
	  }
	});
	Object.defineProperty(exports, "TSTypeParameter", {
	  enumerable: true,
	  get: function () {
	    return _index.tsTypeParameter;
	  }
	});
	Object.defineProperty(exports, "NumberLiteral", {
	  enumerable: true,
	  get: function () {
	    return _index.numberLiteral;
	  }
	});
	Object.defineProperty(exports, "RegexLiteral", {
	  enumerable: true,
	  get: function () {
	    return _index.regexLiteral;
	  }
	});
	Object.defineProperty(exports, "RestProperty", {
	  enumerable: true,
	  get: function () {
	    return _index.restProperty;
	  }
	});
	Object.defineProperty(exports, "SpreadProperty", {
	  enumerable: true,
	  get: function () {
	    return _index.spreadProperty;
	  }
	});

	var _index = generated$4;
	}(uppercase));

	var cloneNode$h = {};

	Object.defineProperty(cloneNode$h, "__esModule", {
	  value: true
	});
	cloneNode$h.default = cloneNode$g;

	var _definitions$4 = definitions;

	var _generated$g = generated$5;

	const has$4 = Function.call.bind(Object.prototype.hasOwnProperty);

	function cloneIfNode(obj, deep, withoutLoc) {
	  if (obj && typeof obj.type === "string") {
	    return cloneNode$g(obj, deep, withoutLoc);
	  }

	  return obj;
	}

	function cloneIfNodeOrArray(obj, deep, withoutLoc) {
	  if (Array.isArray(obj)) {
	    return obj.map(node => cloneIfNode(node, deep, withoutLoc));
	  }

	  return cloneIfNode(obj, deep, withoutLoc);
	}

	function cloneNode$g(node, deep = true, withoutLoc = false) {
	  if (!node) return node;
	  const {
	    type
	  } = node;
	  const newNode = {
	    type: node.type
	  };

	  if ((0, _generated$g.isIdentifier)(node)) {
	    newNode.name = node.name;

	    if (has$4(node, "optional") && typeof node.optional === "boolean") {
	      newNode.optional = node.optional;
	    }

	    if (has$4(node, "typeAnnotation")) {
	      newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc) : node.typeAnnotation;
	    }
	  } else if (!has$4(_definitions$4.NODE_FIELDS, type)) {
	    throw new Error(`Unknown node type: "${type}"`);
	  } else {
	    for (const field of Object.keys(_definitions$4.NODE_FIELDS[type])) {
	      if (has$4(node, field)) {
	        if (deep) {
	          newNode[field] = (0, _generated$g.isFile)(node) && field === "comments" ? maybeCloneComments(node.comments, deep, withoutLoc) : cloneIfNodeOrArray(node[field], true, withoutLoc);
	        } else {
	          newNode[field] = node[field];
	        }
	      }
	    }
	  }

	  if (has$4(node, "loc")) {
	    if (withoutLoc) {
	      newNode.loc = null;
	    } else {
	      newNode.loc = node.loc;
	    }
	  }

	  if (has$4(node, "leadingComments")) {
	    newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc);
	  }

	  if (has$4(node, "innerComments")) {
	    newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc);
	  }

	  if (has$4(node, "trailingComments")) {
	    newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc);
	  }

	  if (has$4(node, "extra")) {
	    newNode.extra = Object.assign({}, node.extra);
	  }

	  return newNode;
	}

	function maybeCloneComments(comments, deep, withoutLoc) {
	  if (!comments || !deep) {
	    return comments;
	  }

	  return comments.map(({
	    type,
	    value,
	    loc
	  }) => {
	    if (withoutLoc) {
	      return {
	        type,
	        value,
	        loc: null
	      };
	    }

	    return {
	      type,
	      value,
	      loc
	    };
	  });
	}

	var clone$2 = {};

	Object.defineProperty(clone$2, "__esModule", {
	  value: true
	});
	clone$2.default = clone$1;

	var _cloneNode$5 = cloneNode$h;

	function clone$1(node) {
	  return (0, _cloneNode$5.default)(node, false);
	}

	var cloneDeep$2 = {};

	Object.defineProperty(cloneDeep$2, "__esModule", {
	  value: true
	});
	cloneDeep$2.default = cloneDeep$1;

	var _cloneNode$4 = cloneNode$h;

	function cloneDeep$1(node) {
	  return (0, _cloneNode$4.default)(node);
	}

	var cloneDeepWithoutLoc$1 = {};

	Object.defineProperty(cloneDeepWithoutLoc$1, "__esModule", {
	  value: true
	});
	cloneDeepWithoutLoc$1.default = cloneDeepWithoutLoc;

	var _cloneNode$3 = cloneNode$h;

	function cloneDeepWithoutLoc(node) {
	  return (0, _cloneNode$3.default)(node, true, true);
	}

	var cloneWithoutLoc$1 = {};

	Object.defineProperty(cloneWithoutLoc$1, "__esModule", {
	  value: true
	});
	cloneWithoutLoc$1.default = cloneWithoutLoc;

	var _cloneNode$2 = cloneNode$h;

	function cloneWithoutLoc(node) {
	  return (0, _cloneNode$2.default)(node, false, true);
	}

	var addComment$2 = {};

	var addComments$2 = {};

	Object.defineProperty(addComments$2, "__esModule", {
	  value: true
	});
	addComments$2.default = addComments$1;

	function addComments$1(node, type, comments) {
	  if (!comments || !node) return node;
	  const key = `${type}Comments`;

	  if (node[key]) {
	    if (type === "leading") {
	      node[key] = comments.concat(node[key]);
	    } else {
	      node[key].push(...comments);
	    }
	  } else {
	    node[key] = comments;
	  }

	  return node;
	}

	Object.defineProperty(addComment$2, "__esModule", {
	  value: true
	});
	addComment$2.default = addComment$1;

	var _addComments$1 = addComments$2;

	function addComment$1(node, type, content, line) {
	  return (0, _addComments$1.default)(node, type, [{
	    type: line ? "CommentLine" : "CommentBlock",
	    value: content
	  }]);
	}

	var inheritInnerComments$1 = {};

	var inherit$1 = {};

	Object.defineProperty(inherit$1, "__esModule", {
	  value: true
	});
	inherit$1.default = inherit;

	function inherit(key, child, parent) {
	  if (child && parent) {
	    child[key] = Array.from(new Set([].concat(child[key], parent[key]).filter(Boolean)));
	  }
	}

	Object.defineProperty(inheritInnerComments$1, "__esModule", {
	  value: true
	});
	inheritInnerComments$1.default = inheritInnerComments;

	var _inherit$2 = inherit$1;

	function inheritInnerComments(child, parent) {
	  (0, _inherit$2.default)("innerComments", child, parent);
	}

	var inheritLeadingComments$2 = {};

	Object.defineProperty(inheritLeadingComments$2, "__esModule", {
	  value: true
	});
	inheritLeadingComments$2.default = inheritLeadingComments$1;

	var _inherit$1 = inherit$1;

	function inheritLeadingComments$1(child, parent) {
	  (0, _inherit$1.default)("leadingComments", child, parent);
	}

	var inheritsComments$2 = {};

	var inheritTrailingComments$2 = {};

	Object.defineProperty(inheritTrailingComments$2, "__esModule", {
	  value: true
	});
	inheritTrailingComments$2.default = inheritTrailingComments$1;

	var _inherit = inherit$1;

	function inheritTrailingComments$1(child, parent) {
	  (0, _inherit.default)("trailingComments", child, parent);
	}

	Object.defineProperty(inheritsComments$2, "__esModule", {
	  value: true
	});
	inheritsComments$2.default = inheritsComments$1;

	var _inheritTrailingComments = inheritTrailingComments$2;

	var _inheritLeadingComments = inheritLeadingComments$2;

	var _inheritInnerComments = inheritInnerComments$1;

	function inheritsComments$1(child, parent) {
	  (0, _inheritTrailingComments.default)(child, parent);
	  (0, _inheritLeadingComments.default)(child, parent);
	  (0, _inheritInnerComments.default)(child, parent);
	  return child;
	}

	var removeComments$2 = {};

	Object.defineProperty(removeComments$2, "__esModule", {
	  value: true
	});
	removeComments$2.default = removeComments$1;

	var _constants$4 = constants$1;

	function removeComments$1(node) {
	  _constants$4.COMMENT_KEYS.forEach(key => {
	    node[key] = null;
	  });

	  return node;
	}

	var generated$2 = {};

	Object.defineProperty(generated$2, "__esModule", {
	  value: true
	});
	generated$2.TSBASETYPE_TYPES = generated$2.TSTYPE_TYPES = generated$2.TSTYPEELEMENT_TYPES = generated$2.JSX_TYPES = generated$2.ENUMMEMBER_TYPES = generated$2.ENUMBODY_TYPES = generated$2.FLOWPREDICATE_TYPES = generated$2.FLOWDECLARATION_TYPES = generated$2.FLOWBASEANNOTATION_TYPES = generated$2.FLOWTYPE_TYPES = generated$2.FLOW_TYPES = generated$2.PRIVATE_TYPES = generated$2.MODULESPECIFIER_TYPES = generated$2.EXPORTDECLARATION_TYPES = generated$2.MODULEDECLARATION_TYPES = generated$2.CLASS_TYPES = generated$2.PATTERN_TYPES = generated$2.UNARYLIKE_TYPES = generated$2.PROPERTY_TYPES = generated$2.OBJECTMEMBER_TYPES = generated$2.METHOD_TYPES = generated$2.USERWHITESPACABLE_TYPES = generated$2.IMMUTABLE_TYPES = generated$2.LITERAL_TYPES = generated$2.TSENTITYNAME_TYPES = generated$2.LVAL_TYPES = generated$2.PATTERNLIKE_TYPES = generated$2.DECLARATION_TYPES = generated$2.PUREISH_TYPES = generated$2.FUNCTIONPARENT_TYPES = generated$2.FUNCTION_TYPES = generated$2.FORXSTATEMENT_TYPES = generated$2.FOR_TYPES = generated$2.EXPRESSIONWRAPPER_TYPES = generated$2.WHILE_TYPES = generated$2.LOOP_TYPES = generated$2.CONDITIONAL_TYPES = generated$2.COMPLETIONSTATEMENT_TYPES = generated$2.TERMINATORLESS_TYPES = generated$2.STATEMENT_TYPES = generated$2.BLOCK_TYPES = generated$2.BLOCKPARENT_TYPES = generated$2.SCOPABLE_TYPES = generated$2.BINARY_TYPES = generated$2.EXPRESSION_TYPES = void 0;

	var _definitions$3 = definitions;

	const EXPRESSION_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Expression"];
	generated$2.EXPRESSION_TYPES = EXPRESSION_TYPES;
	const BINARY_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Binary"];
	generated$2.BINARY_TYPES = BINARY_TYPES;
	const SCOPABLE_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Scopable"];
	generated$2.SCOPABLE_TYPES = SCOPABLE_TYPES;
	const BLOCKPARENT_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["BlockParent"];
	generated$2.BLOCKPARENT_TYPES = BLOCKPARENT_TYPES;
	const BLOCK_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Block"];
	generated$2.BLOCK_TYPES = BLOCK_TYPES;
	const STATEMENT_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Statement"];
	generated$2.STATEMENT_TYPES = STATEMENT_TYPES;
	const TERMINATORLESS_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Terminatorless"];
	generated$2.TERMINATORLESS_TYPES = TERMINATORLESS_TYPES;
	const COMPLETIONSTATEMENT_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["CompletionStatement"];
	generated$2.COMPLETIONSTATEMENT_TYPES = COMPLETIONSTATEMENT_TYPES;
	const CONDITIONAL_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Conditional"];
	generated$2.CONDITIONAL_TYPES = CONDITIONAL_TYPES;
	const LOOP_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Loop"];
	generated$2.LOOP_TYPES = LOOP_TYPES;
	const WHILE_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["While"];
	generated$2.WHILE_TYPES = WHILE_TYPES;
	const EXPRESSIONWRAPPER_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["ExpressionWrapper"];
	generated$2.EXPRESSIONWRAPPER_TYPES = EXPRESSIONWRAPPER_TYPES;
	const FOR_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["For"];
	generated$2.FOR_TYPES = FOR_TYPES;
	const FORXSTATEMENT_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["ForXStatement"];
	generated$2.FORXSTATEMENT_TYPES = FORXSTATEMENT_TYPES;
	const FUNCTION_TYPES$1 = _definitions$3.FLIPPED_ALIAS_KEYS["Function"];
	generated$2.FUNCTION_TYPES = FUNCTION_TYPES$1;
	const FUNCTIONPARENT_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["FunctionParent"];
	generated$2.FUNCTIONPARENT_TYPES = FUNCTIONPARENT_TYPES;
	const PUREISH_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Pureish"];
	generated$2.PUREISH_TYPES = PUREISH_TYPES;
	const DECLARATION_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Declaration"];
	generated$2.DECLARATION_TYPES = DECLARATION_TYPES;
	const PATTERNLIKE_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["PatternLike"];
	generated$2.PATTERNLIKE_TYPES = PATTERNLIKE_TYPES;
	const LVAL_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["LVal"];
	generated$2.LVAL_TYPES = LVAL_TYPES;
	const TSENTITYNAME_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["TSEntityName"];
	generated$2.TSENTITYNAME_TYPES = TSENTITYNAME_TYPES;
	const LITERAL_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Literal"];
	generated$2.LITERAL_TYPES = LITERAL_TYPES;
	const IMMUTABLE_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Immutable"];
	generated$2.IMMUTABLE_TYPES = IMMUTABLE_TYPES;
	const USERWHITESPACABLE_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["UserWhitespacable"];
	generated$2.USERWHITESPACABLE_TYPES = USERWHITESPACABLE_TYPES;
	const METHOD_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Method"];
	generated$2.METHOD_TYPES = METHOD_TYPES;
	const OBJECTMEMBER_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["ObjectMember"];
	generated$2.OBJECTMEMBER_TYPES = OBJECTMEMBER_TYPES;
	const PROPERTY_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Property"];
	generated$2.PROPERTY_TYPES = PROPERTY_TYPES;
	const UNARYLIKE_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["UnaryLike"];
	generated$2.UNARYLIKE_TYPES = UNARYLIKE_TYPES;
	const PATTERN_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Pattern"];
	generated$2.PATTERN_TYPES = PATTERN_TYPES;
	const CLASS_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Class"];
	generated$2.CLASS_TYPES = CLASS_TYPES;
	const MODULEDECLARATION_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["ModuleDeclaration"];
	generated$2.MODULEDECLARATION_TYPES = MODULEDECLARATION_TYPES;
	const EXPORTDECLARATION_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["ExportDeclaration"];
	generated$2.EXPORTDECLARATION_TYPES = EXPORTDECLARATION_TYPES;
	const MODULESPECIFIER_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["ModuleSpecifier"];
	generated$2.MODULESPECIFIER_TYPES = MODULESPECIFIER_TYPES;
	const PRIVATE_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Private"];
	generated$2.PRIVATE_TYPES = PRIVATE_TYPES;
	const FLOW_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["Flow"];
	generated$2.FLOW_TYPES = FLOW_TYPES;
	const FLOWTYPE_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["FlowType"];
	generated$2.FLOWTYPE_TYPES = FLOWTYPE_TYPES;
	const FLOWBASEANNOTATION_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["FlowBaseAnnotation"];
	generated$2.FLOWBASEANNOTATION_TYPES = FLOWBASEANNOTATION_TYPES;
	const FLOWDECLARATION_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["FlowDeclaration"];
	generated$2.FLOWDECLARATION_TYPES = FLOWDECLARATION_TYPES;
	const FLOWPREDICATE_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["FlowPredicate"];
	generated$2.FLOWPREDICATE_TYPES = FLOWPREDICATE_TYPES;
	const ENUMBODY_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["EnumBody"];
	generated$2.ENUMBODY_TYPES = ENUMBODY_TYPES;
	const ENUMMEMBER_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["EnumMember"];
	generated$2.ENUMMEMBER_TYPES = ENUMMEMBER_TYPES;
	const JSX_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["JSX"];
	generated$2.JSX_TYPES = JSX_TYPES;
	const TSTYPEELEMENT_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["TSTypeElement"];
	generated$2.TSTYPEELEMENT_TYPES = TSTYPEELEMENT_TYPES;
	const TSTYPE_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["TSType"];
	generated$2.TSTYPE_TYPES = TSTYPE_TYPES;
	const TSBASETYPE_TYPES = _definitions$3.FLIPPED_ALIAS_KEYS["TSBaseType"];
	generated$2.TSBASETYPE_TYPES = TSBASETYPE_TYPES;

	var ensureBlock$2 = {};

	var toBlock$1 = {};

	Object.defineProperty(toBlock$1, "__esModule", {
	  value: true
	});
	toBlock$1.default = toBlock;

	var _generated$f = generated$5;

	var _generated2$3 = generated$4;

	function toBlock(node, parent) {
	  if ((0, _generated$f.isBlockStatement)(node)) {
	    return node;
	  }

	  let blockNodes = [];

	  if ((0, _generated$f.isEmptyStatement)(node)) {
	    blockNodes = [];
	  } else {
	    if (!(0, _generated$f.isStatement)(node)) {
	      if ((0, _generated$f.isFunction)(parent)) {
	        node = (0, _generated2$3.returnStatement)(node);
	      } else {
	        node = (0, _generated2$3.expressionStatement)(node);
	      }
	    }

	    blockNodes = [node];
	  }

	  return (0, _generated2$3.blockStatement)(blockNodes);
	}

	Object.defineProperty(ensureBlock$2, "__esModule", {
	  value: true
	});
	ensureBlock$2.default = ensureBlock$1;

	var _toBlock = toBlock$1;

	function ensureBlock$1(node, key = "body") {
	  return node[key] = (0, _toBlock.default)(node[key], node);
	}

	var toBindingIdentifierName$2 = {};

	var toIdentifier$2 = {};

	Object.defineProperty(toIdentifier$2, "__esModule", {
	  value: true
	});
	toIdentifier$2.default = toIdentifier$1;

	var _isValidIdentifier$2 = isValidIdentifier$1;

	var _helperValidatorIdentifier$2 = lib$r;

	function toIdentifier$1(input) {
	  input = input + "";
	  let name = "";

	  for (const c of input) {
	    name += (0, _helperValidatorIdentifier$2.isIdentifierChar)(c.codePointAt(0)) ? c : "-";
	  }

	  name = name.replace(/^[-0-9]+/, "");
	  name = name.replace(/[-\s]+(.)?/g, function (match, c) {
	    return c ? c.toUpperCase() : "";
	  });

	  if (!(0, _isValidIdentifier$2.default)(name)) {
	    name = `_${name}`;
	  }

	  return name || "_";
	}

	Object.defineProperty(toBindingIdentifierName$2, "__esModule", {
	  value: true
	});
	toBindingIdentifierName$2.default = toBindingIdentifierName$1;

	var _toIdentifier = toIdentifier$2;

	function toBindingIdentifierName$1(name) {
	  name = (0, _toIdentifier.default)(name);
	  if (name === "eval" || name === "arguments") name = "_" + name;
	  return name;
	}

	var toComputedKey$2 = {};

	Object.defineProperty(toComputedKey$2, "__esModule", {
	  value: true
	});
	toComputedKey$2.default = toComputedKey$1;

	var _generated$e = generated$5;

	var _generated2$2 = generated$4;

	function toComputedKey$1(node, key = node.key || node.property) {
	  if (!node.computed && (0, _generated$e.isIdentifier)(key)) key = (0, _generated2$2.stringLiteral)(key.name);
	  return key;
	}

	var toExpression$2 = {};

	Object.defineProperty(toExpression$2, "__esModule", {
	  value: true
	});
	toExpression$2.default = void 0;

	var _generated$d = generated$5;

	var _default$i = toExpression$1;
	toExpression$2.default = _default$i;

	function toExpression$1(node) {
	  if ((0, _generated$d.isExpressionStatement)(node)) {
	    node = node.expression;
	  }

	  if ((0, _generated$d.isExpression)(node)) {
	    return node;
	  }

	  if ((0, _generated$d.isClass)(node)) {
	    node.type = "ClassExpression";
	  } else if ((0, _generated$d.isFunction)(node)) {
	    node.type = "FunctionExpression";
	  }

	  if (!(0, _generated$d.isExpression)(node)) {
	    throw new Error(`cannot turn ${node.type} to an expression`);
	  }

	  return node;
	}

	var toKeyAlias$1 = {};

	var removePropertiesDeep$2 = {};

	var traverseFast$2 = {};

	Object.defineProperty(traverseFast$2, "__esModule", {
	  value: true
	});
	traverseFast$2.default = traverseFast$1;

	var _definitions$2 = definitions;

	function traverseFast$1(node, enter, opts) {
	  if (!node) return;
	  const keys = _definitions$2.VISITOR_KEYS[node.type];
	  if (!keys) return;
	  opts = opts || {};
	  enter(node, opts);

	  for (const key of keys) {
	    const subNode = node[key];

	    if (Array.isArray(subNode)) {
	      for (const node of subNode) {
	        traverseFast$1(node, enter, opts);
	      }
	    } else {
	      traverseFast$1(subNode, enter, opts);
	    }
	  }
	}

	var removeProperties$1 = {};

	Object.defineProperty(removeProperties$1, "__esModule", {
	  value: true
	});
	removeProperties$1.default = removeProperties;

	var _constants$3 = constants$1;

	const CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"];

	const CLEAR_KEYS_PLUS_COMMENTS = _constants$3.COMMENT_KEYS.concat(["comments"]).concat(CLEAR_KEYS);

	function removeProperties(node, opts = {}) {
	  const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;

	  for (const key of map) {
	    if (node[key] != null) node[key] = undefined;
	  }

	  for (const key of Object.keys(node)) {
	    if (key[0] === "_" && node[key] != null) node[key] = undefined;
	  }

	  const symbols = Object.getOwnPropertySymbols(node);

	  for (const sym of symbols) {
	    node[sym] = null;
	  }
	}

	Object.defineProperty(removePropertiesDeep$2, "__esModule", {
	  value: true
	});
	removePropertiesDeep$2.default = removePropertiesDeep$1;

	var _traverseFast = traverseFast$2;

	var _removeProperties = removeProperties$1;

	function removePropertiesDeep$1(tree, opts) {
	  (0, _traverseFast.default)(tree, _removeProperties.default, opts);
	  return tree;
	}

	Object.defineProperty(toKeyAlias$1, "__esModule", {
	  value: true
	});
	toKeyAlias$1.default = toKeyAlias;

	var _generated$c = generated$5;

	var _cloneNode$1 = cloneNode$h;

	var _removePropertiesDeep = removePropertiesDeep$2;

	function toKeyAlias(node, key = node.key) {
	  let alias;

	  if (node.kind === "method") {
	    return toKeyAlias.increment() + "";
	  } else if ((0, _generated$c.isIdentifier)(key)) {
	    alias = key.name;
	  } else if ((0, _generated$c.isStringLiteral)(key)) {
	    alias = JSON.stringify(key.value);
	  } else {
	    alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode$1.default)(key)));
	  }

	  if (node.computed) {
	    alias = `[${alias}]`;
	  }

	  if (node.static) {
	    alias = `static:${alias}`;
	  }

	  return alias;
	}

	toKeyAlias.uid = 0;

	toKeyAlias.increment = function () {
	  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {
	    return toKeyAlias.uid = 0;
	  } else {
	    return toKeyAlias.uid++;
	  }
	};

	var toSequenceExpression$2 = {};

	var gatherSequenceExpressions$1 = {};

	var getBindingIdentifiers$3 = {};

	Object.defineProperty(getBindingIdentifiers$3, "__esModule", {
	  value: true
	});
	getBindingIdentifiers$3.default = getBindingIdentifiers$2;

	var _generated$b = generated$5;

	function getBindingIdentifiers$2(node, duplicates, outerOnly) {
	  let search = [].concat(node);
	  const ids = Object.create(null);

	  while (search.length) {
	    const id = search.shift();
	    if (!id) continue;
	    const keys = getBindingIdentifiers$2.keys[id.type];

	    if ((0, _generated$b.isIdentifier)(id)) {
	      if (duplicates) {
	        const _ids = ids[id.name] = ids[id.name] || [];

	        _ids.push(id);
	      } else {
	        ids[id.name] = id;
	      }

	      continue;
	    }

	    if ((0, _generated$b.isExportDeclaration)(id) && !(0, _generated$b.isExportAllDeclaration)(id)) {
	      if ((0, _generated$b.isDeclaration)(id.declaration)) {
	        search.push(id.declaration);
	      }

	      continue;
	    }

	    if (outerOnly) {
	      if ((0, _generated$b.isFunctionDeclaration)(id)) {
	        search.push(id.id);
	        continue;
	      }

	      if ((0, _generated$b.isFunctionExpression)(id)) {
	        continue;
	      }
	    }

	    if (keys) {
	      for (let i = 0; i < keys.length; i++) {
	        const key = keys[i];

	        if (id[key]) {
	          search = search.concat(id[key]);
	        }
	      }
	    }
	  }

	  return ids;
	}

	getBindingIdentifiers$2.keys = {
	  DeclareClass: ["id"],
	  DeclareFunction: ["id"],
	  DeclareModule: ["id"],
	  DeclareVariable: ["id"],
	  DeclareInterface: ["id"],
	  DeclareTypeAlias: ["id"],
	  DeclareOpaqueType: ["id"],
	  InterfaceDeclaration: ["id"],
	  TypeAlias: ["id"],
	  OpaqueType: ["id"],
	  CatchClause: ["param"],
	  LabeledStatement: ["label"],
	  UnaryExpression: ["argument"],
	  AssignmentExpression: ["left"],
	  ImportSpecifier: ["local"],
	  ImportNamespaceSpecifier: ["local"],
	  ImportDefaultSpecifier: ["local"],
	  ImportDeclaration: ["specifiers"],
	  ExportSpecifier: ["exported"],
	  ExportNamespaceSpecifier: ["exported"],
	  ExportDefaultSpecifier: ["exported"],
	  FunctionDeclaration: ["id", "params"],
	  FunctionExpression: ["id", "params"],
	  ArrowFunctionExpression: ["params"],
	  ObjectMethod: ["params"],
	  ClassMethod: ["params"],
	  ClassPrivateMethod: ["params"],
	  ForInStatement: ["left"],
	  ForOfStatement: ["left"],
	  ClassDeclaration: ["id"],
	  ClassExpression: ["id"],
	  RestElement: ["argument"],
	  UpdateExpression: ["argument"],
	  ObjectProperty: ["value"],
	  AssignmentPattern: ["left"],
	  ArrayPattern: ["elements"],
	  ObjectPattern: ["properties"],
	  VariableDeclaration: ["declarations"],
	  VariableDeclarator: ["id"]
	};

	Object.defineProperty(gatherSequenceExpressions$1, "__esModule", {
	  value: true
	});
	gatherSequenceExpressions$1.default = gatherSequenceExpressions;

	var _getBindingIdentifiers$3 = getBindingIdentifiers$3;

	var _generated$a = generated$5;

	var _generated2$1 = generated$4;

	var _cloneNode = cloneNode$h;

	function gatherSequenceExpressions(nodes, scope, declars) {
	  const exprs = [];
	  let ensureLastUndefined = true;

	  for (const node of nodes) {
	    if (!(0, _generated$a.isEmptyStatement)(node)) {
	      ensureLastUndefined = false;
	    }

	    if ((0, _generated$a.isExpression)(node)) {
	      exprs.push(node);
	    } else if ((0, _generated$a.isExpressionStatement)(node)) {
	      exprs.push(node.expression);
	    } else if ((0, _generated$a.isVariableDeclaration)(node)) {
	      if (node.kind !== "var") return;

	      for (const declar of node.declarations) {
	        const bindings = (0, _getBindingIdentifiers$3.default)(declar);

	        for (const key of Object.keys(bindings)) {
	          declars.push({
	            kind: node.kind,
	            id: (0, _cloneNode.default)(bindings[key])
	          });
	        }

	        if (declar.init) {
	          exprs.push((0, _generated2$1.assignmentExpression)("=", declar.id, declar.init));
	        }
	      }

	      ensureLastUndefined = true;
	    } else if ((0, _generated$a.isIfStatement)(node)) {
	      const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], scope, declars) : scope.buildUndefinedNode();
	      const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], scope, declars) : scope.buildUndefinedNode();
	      if (!consequent || !alternate) return;
	      exprs.push((0, _generated2$1.conditionalExpression)(node.test, consequent, alternate));
	    } else if ((0, _generated$a.isBlockStatement)(node)) {
	      const body = gatherSequenceExpressions(node.body, scope, declars);
	      if (!body) return;
	      exprs.push(body);
	    } else if ((0, _generated$a.isEmptyStatement)(node)) {
	      if (nodes.indexOf(node) === 0) {
	        ensureLastUndefined = true;
	      }
	    } else {
	      return;
	    }
	  }

	  if (ensureLastUndefined) {
	    exprs.push(scope.buildUndefinedNode());
	  }

	  if (exprs.length === 1) {
	    return exprs[0];
	  } else {
	    return (0, _generated2$1.sequenceExpression)(exprs);
	  }
	}

	Object.defineProperty(toSequenceExpression$2, "__esModule", {
	  value: true
	});
	toSequenceExpression$2.default = toSequenceExpression$1;

	var _gatherSequenceExpressions = gatherSequenceExpressions$1;

	function toSequenceExpression$1(nodes, scope) {
	  if (!(nodes != null && nodes.length)) return;
	  const declars = [];
	  const result = (0, _gatherSequenceExpressions.default)(nodes, scope, declars);
	  if (!result) return;

	  for (const declar of declars) {
	    scope.push(declar);
	  }

	  return result;
	}

	var toStatement$1 = {};

	Object.defineProperty(toStatement$1, "__esModule", {
	  value: true
	});
	toStatement$1.default = void 0;

	var _generated$9 = generated$5;

	var _generated2 = generated$4;

	var _default$h = toStatement;
	toStatement$1.default = _default$h;

	function toStatement(node, ignore) {
	  if ((0, _generated$9.isStatement)(node)) {
	    return node;
	  }

	  let mustHaveId = false;
	  let newType;

	  if ((0, _generated$9.isClass)(node)) {
	    mustHaveId = true;
	    newType = "ClassDeclaration";
	  } else if ((0, _generated$9.isFunction)(node)) {
	    mustHaveId = true;
	    newType = "FunctionDeclaration";
	  } else if ((0, _generated$9.isAssignmentExpression)(node)) {
	    return (0, _generated2.expressionStatement)(node);
	  }

	  if (mustHaveId && !node.id) {
	    newType = false;
	  }

	  if (!newType) {
	    if (ignore) {
	      return false;
	    } else {
	      throw new Error(`cannot turn ${node.type} to a statement`);
	    }
	  }

	  node.type = newType;
	  return node;
	}

	var valueToNode$1 = {};

	Object.defineProperty(valueToNode$1, "__esModule", {
	  value: true
	});
	valueToNode$1.default = void 0;

	var _isValidIdentifier$1 = isValidIdentifier$1;

	var _generated$8 = generated$4;

	var _default$g = valueToNode;
	valueToNode$1.default = _default$g;
	const objectToString = Function.call.bind(Object.prototype.toString);

	function isRegExp(value) {
	  return objectToString(value) === "[object RegExp]";
	}

	function isPlainObject(value) {
	  if (typeof value !== "object" || value === null || Object.prototype.toString.call(value) !== "[object Object]") {
	    return false;
	  }

	  const proto = Object.getPrototypeOf(value);
	  return proto === null || Object.getPrototypeOf(proto) === null;
	}

	function valueToNode(value) {
	  if (value === undefined) {
	    return (0, _generated$8.identifier)("undefined");
	  }

	  if (value === true || value === false) {
	    return (0, _generated$8.booleanLiteral)(value);
	  }

	  if (value === null) {
	    return (0, _generated$8.nullLiteral)();
	  }

	  if (typeof value === "string") {
	    return (0, _generated$8.stringLiteral)(value);
	  }

	  if (typeof value === "number") {
	    let result;

	    if (Number.isFinite(value)) {
	      result = (0, _generated$8.numericLiteral)(Math.abs(value));
	    } else {
	      let numerator;

	      if (Number.isNaN(value)) {
	        numerator = (0, _generated$8.numericLiteral)(0);
	      } else {
	        numerator = (0, _generated$8.numericLiteral)(1);
	      }

	      result = (0, _generated$8.binaryExpression)("/", numerator, (0, _generated$8.numericLiteral)(0));
	    }

	    if (value < 0 || Object.is(value, -0)) {
	      result = (0, _generated$8.unaryExpression)("-", result);
	    }

	    return result;
	  }

	  if (isRegExp(value)) {
	    const pattern = value.source;
	    const flags = value.toString().match(/\/([a-z]+|)$/)[1];
	    return (0, _generated$8.regExpLiteral)(pattern, flags);
	  }

	  if (Array.isArray(value)) {
	    return (0, _generated$8.arrayExpression)(value.map(valueToNode));
	  }

	  if (isPlainObject(value)) {
	    const props = [];

	    for (const key of Object.keys(value)) {
	      let nodeKey;

	      if ((0, _isValidIdentifier$1.default)(key)) {
	        nodeKey = (0, _generated$8.identifier)(key);
	      } else {
	        nodeKey = (0, _generated$8.stringLiteral)(key);
	      }

	      props.push((0, _generated$8.objectProperty)(nodeKey, valueToNode(value[key])));
	    }

	    return (0, _generated$8.objectExpression)(props);
	  }

	  throw new Error("don't know how to turn this value into a node");
	}

	var appendToMemberExpression$1 = {};

	Object.defineProperty(appendToMemberExpression$1, "__esModule", {
	  value: true
	});
	appendToMemberExpression$1.default = appendToMemberExpression;

	var _generated$7 = generated$4;

	function appendToMemberExpression(member, append, computed = false) {
	  member.object = (0, _generated$7.memberExpression)(member.object, member.property, member.computed);
	  member.property = append;
	  member.computed = !!computed;
	  return member;
	}

	var inherits$1 = {};

	Object.defineProperty(inherits$1, "__esModule", {
	  value: true
	});
	inherits$1.default = inherits;

	var _constants$2 = constants$1;

	var _inheritsComments = inheritsComments$2;

	function inherits(child, parent) {
	  if (!child || !parent) return child;

	  for (const key of _constants$2.INHERIT_KEYS.optional) {
	    if (child[key] == null) {
	      child[key] = parent[key];
	    }
	  }

	  for (const key of Object.keys(parent)) {
	    if (key[0] === "_" && key !== "__clone") child[key] = parent[key];
	  }

	  for (const key of _constants$2.INHERIT_KEYS.force) {
	    child[key] = parent[key];
	  }

	  (0, _inheritsComments.default)(child, parent);
	  return child;
	}

	var prependToMemberExpression$1 = {};

	Object.defineProperty(prependToMemberExpression$1, "__esModule", {
	  value: true
	});
	prependToMemberExpression$1.default = prependToMemberExpression;

	var _generated$6 = generated$4;

	function prependToMemberExpression(member, prepend) {
	  member.object = (0, _generated$6.memberExpression)(prepend, member.object);
	  return member;
	}

	var getOuterBindingIdentifiers$3 = {};

	Object.defineProperty(getOuterBindingIdentifiers$3, "__esModule", {
	  value: true
	});
	getOuterBindingIdentifiers$3.default = void 0;

	var _getBindingIdentifiers$2 = getBindingIdentifiers$3;

	var _default$f = getOuterBindingIdentifiers$2;
	getOuterBindingIdentifiers$3.default = _default$f;

	function getOuterBindingIdentifiers$2(node, duplicates) {
	  return (0, _getBindingIdentifiers$2.default)(node, duplicates, true);
	}

	var traverse$2 = {};

	Object.defineProperty(traverse$2, "__esModule", {
	  value: true
	});
	traverse$2.default = traverse$1;

	var _definitions$1 = definitions;

	function traverse$1(node, handlers, state) {
	  if (typeof handlers === "function") {
	    handlers = {
	      enter: handlers
	    };
	  }

	  const {
	    enter,
	    exit
	  } = handlers;
	  traverseSimpleImpl(node, enter, exit, state, []);
	}

	function traverseSimpleImpl(node, enter, exit, state, ancestors) {
	  const keys = _definitions$1.VISITOR_KEYS[node.type];
	  if (!keys) return;
	  if (enter) enter(node, ancestors, state);

	  for (const key of keys) {
	    const subNode = node[key];

	    if (Array.isArray(subNode)) {
	      for (let i = 0; i < subNode.length; i++) {
	        const child = subNode[i];
	        if (!child) continue;
	        ancestors.push({
	          node,
	          key,
	          index: i
	        });
	        traverseSimpleImpl(child, enter, exit, state, ancestors);
	        ancestors.pop();
	      }
	    } else if (subNode) {
	      ancestors.push({
	        node,
	        key
	      });
	      traverseSimpleImpl(subNode, enter, exit, state, ancestors);
	      ancestors.pop();
	    }
	  }

	  if (exit) exit(node, ancestors, state);
	}

	var isBinding$2 = {};

	Object.defineProperty(isBinding$2, "__esModule", {
	  value: true
	});
	isBinding$2.default = isBinding$1;

	var _getBindingIdentifiers$1 = getBindingIdentifiers$3;

	function isBinding$1(node, parent, grandparent) {
	  if (grandparent && node.type === "Identifier" && parent.type === "ObjectProperty" && grandparent.type === "ObjectExpression") {
	    return false;
	  }

	  const keys = _getBindingIdentifiers$1.default.keys[parent.type];

	  if (keys) {
	    for (let i = 0; i < keys.length; i++) {
	      const key = keys[i];
	      const val = parent[key];

	      if (Array.isArray(val)) {
	        if (val.indexOf(node) >= 0) return true;
	      } else {
	        if (val === node) return true;
	      }
	    }
	  }

	  return false;
	}

	var isBlockScoped$2 = {};

	var isLet$1 = {};

	Object.defineProperty(isLet$1, "__esModule", {
	  value: true
	});
	isLet$1.default = isLet;

	var _generated$5 = generated$5;

	var _constants$1 = constants$1;

	function isLet(node) {
	  return (0, _generated$5.isVariableDeclaration)(node) && (node.kind !== "var" || node[_constants$1.BLOCK_SCOPED_SYMBOL]);
	}

	Object.defineProperty(isBlockScoped$2, "__esModule", {
	  value: true
	});
	isBlockScoped$2.default = isBlockScoped$1;

	var _generated$4 = generated$5;

	var _isLet = isLet$1;

	function isBlockScoped$1(node) {
	  return (0, _generated$4.isFunctionDeclaration)(node) || (0, _generated$4.isClassDeclaration)(node) || (0, _isLet.default)(node);
	}

	var isImmutable$1 = {};

	Object.defineProperty(isImmutable$1, "__esModule", {
	  value: true
	});
	isImmutable$1.default = isImmutable;

	var _isType = isType$3;

	var _generated$3 = generated$5;

	function isImmutable(node) {
	  if ((0, _isType.default)(node.type, "Immutable")) return true;

	  if ((0, _generated$3.isIdentifier)(node)) {
	    if (node.name === "undefined") {
	      return true;
	    } else {
	      return false;
	    }
	  }

	  return false;
	}

	var isNodesEquivalent$1 = {};

	Object.defineProperty(isNodesEquivalent$1, "__esModule", {
	  value: true
	});
	isNodesEquivalent$1.default = isNodesEquivalent;

	var _definitions = definitions;

	function isNodesEquivalent(a, b) {
	  if (typeof a !== "object" || typeof b !== "object" || a == null || b == null) {
	    return a === b;
	  }

	  if (a.type !== b.type) {
	    return false;
	  }

	  const fields = Object.keys(_definitions.NODE_FIELDS[a.type] || a.type);
	  const visitorKeys = _definitions.VISITOR_KEYS[a.type];

	  for (const field of fields) {
	    if (typeof a[field] !== typeof b[field]) {
	      return false;
	    }

	    if (a[field] == null && b[field] == null) {
	      continue;
	    } else if (a[field] == null || b[field] == null) {
	      return false;
	    }

	    if (Array.isArray(a[field])) {
	      if (!Array.isArray(b[field])) {
	        return false;
	      }

	      if (a[field].length !== b[field].length) {
	        return false;
	      }

	      for (let i = 0; i < a[field].length; i++) {
	        if (!isNodesEquivalent(a[field][i], b[field][i])) {
	          return false;
	        }
	      }

	      continue;
	    }

	    if (typeof a[field] === "object" && !(visitorKeys != null && visitorKeys.includes(field))) {
	      for (const key of Object.keys(a[field])) {
	        if (a[field][key] !== b[field][key]) {
	          return false;
	        }
	      }

	      continue;
	    }

	    if (!isNodesEquivalent(a[field], b[field])) {
	      return false;
	    }
	  }

	  return true;
	}

	var isReferenced$2 = {};

	Object.defineProperty(isReferenced$2, "__esModule", {
	  value: true
	});
	isReferenced$2.default = isReferenced$1;

	function isReferenced$1(node, parent, grandparent) {
	  switch (parent.type) {
	    case "MemberExpression":
	    case "OptionalMemberExpression":
	      if (parent.property === node) {
	        return !!parent.computed;
	      }

	      return parent.object === node;

	    case "JSXMemberExpression":
	      return parent.object === node;

	    case "VariableDeclarator":
	      return parent.init === node;

	    case "ArrowFunctionExpression":
	      return parent.body === node;

	    case "PrivateName":
	      return false;

	    case "ClassMethod":
	    case "ClassPrivateMethod":
	    case "ObjectMethod":
	      if (parent.key === node) {
	        return !!parent.computed;
	      }

	      return false;

	    case "ObjectProperty":
	      if (parent.key === node) {
	        return !!parent.computed;
	      }

	      return !grandparent || grandparent.type !== "ObjectPattern";

	    case "ClassProperty":
	      if (parent.key === node) {
	        return !!parent.computed;
	      }

	      return true;

	    case "ClassPrivateProperty":
	      return parent.key !== node;

	    case "ClassDeclaration":
	    case "ClassExpression":
	      return parent.superClass === node;

	    case "AssignmentExpression":
	      return parent.right === node;

	    case "AssignmentPattern":
	      return parent.right === node;

	    case "LabeledStatement":
	      return false;

	    case "CatchClause":
	      return false;

	    case "RestElement":
	      return false;

	    case "BreakStatement":
	    case "ContinueStatement":
	      return false;

	    case "FunctionDeclaration":
	    case "FunctionExpression":
	      return false;

	    case "ExportNamespaceSpecifier":
	    case "ExportDefaultSpecifier":
	      return false;

	    case "ExportSpecifier":
	      if (grandparent != null && grandparent.source) {
	        return false;
	      }

	      return parent.local === node;

	    case "ImportDefaultSpecifier":
	    case "ImportNamespaceSpecifier":
	    case "ImportSpecifier":
	      return false;

	    case "ImportAttribute":
	      return false;

	    case "JSXAttribute":
	      return false;

	    case "ObjectPattern":
	    case "ArrayPattern":
	      return false;

	    case "MetaProperty":
	      return false;

	    case "ObjectTypeProperty":
	      return parent.key !== node;

	    case "TSEnumMember":
	      return parent.id !== node;

	    case "TSPropertySignature":
	      if (parent.key === node) {
	        return !!parent.computed;
	      }

	      return true;
	  }

	  return true;
	}

	var isScope$2 = {};

	Object.defineProperty(isScope$2, "__esModule", {
	  value: true
	});
	isScope$2.default = isScope$1;

	var _generated$2 = generated$5;

	function isScope$1(node, parent) {
	  if ((0, _generated$2.isBlockStatement)(node) && ((0, _generated$2.isFunction)(parent) || (0, _generated$2.isCatchClause)(parent))) {
	    return false;
	  }

	  if ((0, _generated$2.isPattern)(node) && ((0, _generated$2.isFunction)(parent) || (0, _generated$2.isCatchClause)(parent))) {
	    return true;
	  }

	  return (0, _generated$2.isScopable)(node);
	}

	var isSpecifierDefault$1 = {};

	Object.defineProperty(isSpecifierDefault$1, "__esModule", {
	  value: true
	});
	isSpecifierDefault$1.default = isSpecifierDefault;

	var _generated$1 = generated$5;

	function isSpecifierDefault(specifier) {
	  return (0, _generated$1.isImportDefaultSpecifier)(specifier) || (0, _generated$1.isIdentifier)(specifier.imported || specifier.exported, {
	    name: "default"
	  });
	}

	var isValidES3Identifier$1 = {};

	Object.defineProperty(isValidES3Identifier$1, "__esModule", {
	  value: true
	});
	isValidES3Identifier$1.default = isValidES3Identifier;

	var _isValidIdentifier = isValidIdentifier$1;

	const RESERVED_WORDS_ES3_ONLY = new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implements", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transient", "volatile"]);

	function isValidES3Identifier(name) {
	  return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
	}

	var isVar$2 = {};

	Object.defineProperty(isVar$2, "__esModule", {
	  value: true
	});
	isVar$2.default = isVar$1;

	var _generated = generated$5;

	var _constants = constants$1;

	function isVar$1(node) {
	  return (0, _generated.isVariableDeclaration)(node, {
	    kind: "var"
	  }) && !node[_constants.BLOCK_SCOPED_SYMBOL];
	}

	var generated$1 = /*#__PURE__*/Object.freeze({
		__proto__: null
	});

	var require$$65 = /*@__PURE__*/getAugmentedNamespace(generated$1);

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {
	  react: true,
	  assertNode: true,
	  createTypeAnnotationBasedOnTypeof: true,
	  createUnionTypeAnnotation: true,
	  createFlowUnionType: true,
	  createTSUnionType: true,
	  cloneNode: true,
	  clone: true,
	  cloneDeep: true,
	  cloneDeepWithoutLoc: true,
	  cloneWithoutLoc: true,
	  addComment: true,
	  addComments: true,
	  inheritInnerComments: true,
	  inheritLeadingComments: true,
	  inheritsComments: true,
	  inheritTrailingComments: true,
	  removeComments: true,
	  ensureBlock: true,
	  toBindingIdentifierName: true,
	  toBlock: true,
	  toComputedKey: true,
	  toExpression: true,
	  toIdentifier: true,
	  toKeyAlias: true,
	  toSequenceExpression: true,
	  toStatement: true,
	  valueToNode: true,
	  appendToMemberExpression: true,
	  inherits: true,
	  prependToMemberExpression: true,
	  removeProperties: true,
	  removePropertiesDeep: true,
	  removeTypeDuplicates: true,
	  getBindingIdentifiers: true,
	  getOuterBindingIdentifiers: true,
	  traverse: true,
	  traverseFast: true,
	  shallowEqual: true,
	  is: true,
	  isBinding: true,
	  isBlockScoped: true,
	  isImmutable: true,
	  isLet: true,
	  isNode: true,
	  isNodesEquivalent: true,
	  isPlaceholderType: true,
	  isReferenced: true,
	  isScope: true,
	  isSpecifierDefault: true,
	  isType: true,
	  isValidES3Identifier: true,
	  isValidIdentifier: true,
	  isVar: true,
	  matchesPattern: true,
	  validate: true,
	  buildMatchMemberExpression: true
	};
	Object.defineProperty(exports, "assertNode", {
	  enumerable: true,
	  get: function () {
	    return _assertNode.default;
	  }
	});
	Object.defineProperty(exports, "createTypeAnnotationBasedOnTypeof", {
	  enumerable: true,
	  get: function () {
	    return _createTypeAnnotationBasedOnTypeof.default;
	  }
	});
	Object.defineProperty(exports, "createUnionTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _createFlowUnionType.default;
	  }
	});
	Object.defineProperty(exports, "createFlowUnionType", {
	  enumerable: true,
	  get: function () {
	    return _createFlowUnionType.default;
	  }
	});
	Object.defineProperty(exports, "createTSUnionType", {
	  enumerable: true,
	  get: function () {
	    return _createTSUnionType.default;
	  }
	});
	Object.defineProperty(exports, "cloneNode", {
	  enumerable: true,
	  get: function () {
	    return _cloneNode.default;
	  }
	});
	Object.defineProperty(exports, "clone", {
	  enumerable: true,
	  get: function () {
	    return _clone.default;
	  }
	});
	Object.defineProperty(exports, "cloneDeep", {
	  enumerable: true,
	  get: function () {
	    return _cloneDeep.default;
	  }
	});
	Object.defineProperty(exports, "cloneDeepWithoutLoc", {
	  enumerable: true,
	  get: function () {
	    return _cloneDeepWithoutLoc.default;
	  }
	});
	Object.defineProperty(exports, "cloneWithoutLoc", {
	  enumerable: true,
	  get: function () {
	    return _cloneWithoutLoc.default;
	  }
	});
	Object.defineProperty(exports, "addComment", {
	  enumerable: true,
	  get: function () {
	    return _addComment.default;
	  }
	});
	Object.defineProperty(exports, "addComments", {
	  enumerable: true,
	  get: function () {
	    return _addComments.default;
	  }
	});
	Object.defineProperty(exports, "inheritInnerComments", {
	  enumerable: true,
	  get: function () {
	    return _inheritInnerComments.default;
	  }
	});
	Object.defineProperty(exports, "inheritLeadingComments", {
	  enumerable: true,
	  get: function () {
	    return _inheritLeadingComments.default;
	  }
	});
	Object.defineProperty(exports, "inheritsComments", {
	  enumerable: true,
	  get: function () {
	    return _inheritsComments.default;
	  }
	});
	Object.defineProperty(exports, "inheritTrailingComments", {
	  enumerable: true,
	  get: function () {
	    return _inheritTrailingComments.default;
	  }
	});
	Object.defineProperty(exports, "removeComments", {
	  enumerable: true,
	  get: function () {
	    return _removeComments.default;
	  }
	});
	Object.defineProperty(exports, "ensureBlock", {
	  enumerable: true,
	  get: function () {
	    return _ensureBlock.default;
	  }
	});
	Object.defineProperty(exports, "toBindingIdentifierName", {
	  enumerable: true,
	  get: function () {
	    return _toBindingIdentifierName.default;
	  }
	});
	Object.defineProperty(exports, "toBlock", {
	  enumerable: true,
	  get: function () {
	    return _toBlock.default;
	  }
	});
	Object.defineProperty(exports, "toComputedKey", {
	  enumerable: true,
	  get: function () {
	    return _toComputedKey.default;
	  }
	});
	Object.defineProperty(exports, "toExpression", {
	  enumerable: true,
	  get: function () {
	    return _toExpression.default;
	  }
	});
	Object.defineProperty(exports, "toIdentifier", {
	  enumerable: true,
	  get: function () {
	    return _toIdentifier.default;
	  }
	});
	Object.defineProperty(exports, "toKeyAlias", {
	  enumerable: true,
	  get: function () {
	    return _toKeyAlias.default;
	  }
	});
	Object.defineProperty(exports, "toSequenceExpression", {
	  enumerable: true,
	  get: function () {
	    return _toSequenceExpression.default;
	  }
	});
	Object.defineProperty(exports, "toStatement", {
	  enumerable: true,
	  get: function () {
	    return _toStatement.default;
	  }
	});
	Object.defineProperty(exports, "valueToNode", {
	  enumerable: true,
	  get: function () {
	    return _valueToNode.default;
	  }
	});
	Object.defineProperty(exports, "appendToMemberExpression", {
	  enumerable: true,
	  get: function () {
	    return _appendToMemberExpression.default;
	  }
	});
	Object.defineProperty(exports, "inherits", {
	  enumerable: true,
	  get: function () {
	    return _inherits.default;
	  }
	});
	Object.defineProperty(exports, "prependToMemberExpression", {
	  enumerable: true,
	  get: function () {
	    return _prependToMemberExpression.default;
	  }
	});
	Object.defineProperty(exports, "removeProperties", {
	  enumerable: true,
	  get: function () {
	    return _removeProperties.default;
	  }
	});
	Object.defineProperty(exports, "removePropertiesDeep", {
	  enumerable: true,
	  get: function () {
	    return _removePropertiesDeep.default;
	  }
	});
	Object.defineProperty(exports, "removeTypeDuplicates", {
	  enumerable: true,
	  get: function () {
	    return _removeTypeDuplicates.default;
	  }
	});
	Object.defineProperty(exports, "getBindingIdentifiers", {
	  enumerable: true,
	  get: function () {
	    return _getBindingIdentifiers.default;
	  }
	});
	Object.defineProperty(exports, "getOuterBindingIdentifiers", {
	  enumerable: true,
	  get: function () {
	    return _getOuterBindingIdentifiers.default;
	  }
	});
	Object.defineProperty(exports, "traverse", {
	  enumerable: true,
	  get: function () {
	    return _traverse.default;
	  }
	});
	Object.defineProperty(exports, "traverseFast", {
	  enumerable: true,
	  get: function () {
	    return _traverseFast.default;
	  }
	});
	Object.defineProperty(exports, "shallowEqual", {
	  enumerable: true,
	  get: function () {
	    return _shallowEqual.default;
	  }
	});
	Object.defineProperty(exports, "is", {
	  enumerable: true,
	  get: function () {
	    return _is.default;
	  }
	});
	Object.defineProperty(exports, "isBinding", {
	  enumerable: true,
	  get: function () {
	    return _isBinding.default;
	  }
	});
	Object.defineProperty(exports, "isBlockScoped", {
	  enumerable: true,
	  get: function () {
	    return _isBlockScoped.default;
	  }
	});
	Object.defineProperty(exports, "isImmutable", {
	  enumerable: true,
	  get: function () {
	    return _isImmutable.default;
	  }
	});
	Object.defineProperty(exports, "isLet", {
	  enumerable: true,
	  get: function () {
	    return _isLet.default;
	  }
	});
	Object.defineProperty(exports, "isNode", {
	  enumerable: true,
	  get: function () {
	    return _isNode.default;
	  }
	});
	Object.defineProperty(exports, "isNodesEquivalent", {
	  enumerable: true,
	  get: function () {
	    return _isNodesEquivalent.default;
	  }
	});
	Object.defineProperty(exports, "isPlaceholderType", {
	  enumerable: true,
	  get: function () {
	    return _isPlaceholderType.default;
	  }
	});
	Object.defineProperty(exports, "isReferenced", {
	  enumerable: true,
	  get: function () {
	    return _isReferenced.default;
	  }
	});
	Object.defineProperty(exports, "isScope", {
	  enumerable: true,
	  get: function () {
	    return _isScope.default;
	  }
	});
	Object.defineProperty(exports, "isSpecifierDefault", {
	  enumerable: true,
	  get: function () {
	    return _isSpecifierDefault.default;
	  }
	});
	Object.defineProperty(exports, "isType", {
	  enumerable: true,
	  get: function () {
	    return _isType.default;
	  }
	});
	Object.defineProperty(exports, "isValidES3Identifier", {
	  enumerable: true,
	  get: function () {
	    return _isValidES3Identifier.default;
	  }
	});
	Object.defineProperty(exports, "isValidIdentifier", {
	  enumerable: true,
	  get: function () {
	    return _isValidIdentifier.default;
	  }
	});
	Object.defineProperty(exports, "isVar", {
	  enumerable: true,
	  get: function () {
	    return _isVar.default;
	  }
	});
	Object.defineProperty(exports, "matchesPattern", {
	  enumerable: true,
	  get: function () {
	    return _matchesPattern.default;
	  }
	});
	Object.defineProperty(exports, "validate", {
	  enumerable: true,
	  get: function () {
	    return _validate.default;
	  }
	});
	Object.defineProperty(exports, "buildMatchMemberExpression", {
	  enumerable: true,
	  get: function () {
	    return _buildMatchMemberExpression.default;
	  }
	});
	exports.react = void 0;

	var _isReactComponent = isReactComponent$1;

	var _isCompatTag = isCompatTag$2;

	var _buildChildren = buildChildren$1;

	var _assertNode = assertNode$1;

	var _generated = generated$3;

	Object.keys(_generated).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _generated[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _generated[key];
	    }
	  });
	});

	var _createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof$2;

	var _createFlowUnionType = createFlowUnionType$2;

	var _createTSUnionType = createTSUnionType$2;

	var _generated2 = generated$4;

	Object.keys(_generated2).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _generated2[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _generated2[key];
	    }
	  });
	});

	var _uppercase = uppercase;

	Object.keys(_uppercase).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _uppercase[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _uppercase[key];
	    }
	  });
	});

	var _cloneNode = cloneNode$h;

	var _clone = clone$2;

	var _cloneDeep = cloneDeep$2;

	var _cloneDeepWithoutLoc = cloneDeepWithoutLoc$1;

	var _cloneWithoutLoc = cloneWithoutLoc$1;

	var _addComment = addComment$2;

	var _addComments = addComments$2;

	var _inheritInnerComments = inheritInnerComments$1;

	var _inheritLeadingComments = inheritLeadingComments$2;

	var _inheritsComments = inheritsComments$2;

	var _inheritTrailingComments = inheritTrailingComments$2;

	var _removeComments = removeComments$2;

	var _generated3 = generated$2;

	Object.keys(_generated3).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _generated3[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _generated3[key];
	    }
	  });
	});

	var _constants = constants$1;

	Object.keys(_constants).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _constants[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _constants[key];
	    }
	  });
	});

	var _ensureBlock = ensureBlock$2;

	var _toBindingIdentifierName = toBindingIdentifierName$2;

	var _toBlock = toBlock$1;

	var _toComputedKey = toComputedKey$2;

	var _toExpression = toExpression$2;

	var _toIdentifier = toIdentifier$2;

	var _toKeyAlias = toKeyAlias$1;

	var _toSequenceExpression = toSequenceExpression$2;

	var _toStatement = toStatement$1;

	var _valueToNode = valueToNode$1;

	var _definitions = definitions;

	Object.keys(_definitions).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _definitions[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _definitions[key];
	    }
	  });
	});

	var _appendToMemberExpression = appendToMemberExpression$1;

	var _inherits = inherits$1;

	var _prependToMemberExpression = prependToMemberExpression$1;

	var _removeProperties = removeProperties$1;

	var _removePropertiesDeep = removePropertiesDeep$2;

	var _removeTypeDuplicates = removeTypeDuplicates$3;

	var _getBindingIdentifiers = getBindingIdentifiers$3;

	var _getOuterBindingIdentifiers = getOuterBindingIdentifiers$3;

	var _traverse = traverse$2;

	Object.keys(_traverse).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _traverse[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _traverse[key];
	    }
	  });
	});

	var _traverseFast = traverseFast$2;

	var _shallowEqual = shallowEqual$1;

	var _is = is$2;

	var _isBinding = isBinding$2;

	var _isBlockScoped = isBlockScoped$2;

	var _isImmutable = isImmutable$1;

	var _isLet = isLet$1;

	var _isNode = isNode$2;

	var _isNodesEquivalent = isNodesEquivalent$1;

	var _isPlaceholderType = isPlaceholderType$1;

	var _isReferenced = isReferenced$2;

	var _isScope = isScope$2;

	var _isSpecifierDefault = isSpecifierDefault$1;

	var _isType = isType$3;

	var _isValidES3Identifier = isValidES3Identifier$1;

	var _isValidIdentifier = isValidIdentifier$1;

	var _isVar = isVar$2;

	var _matchesPattern = matchesPattern$3;

	var _validate = validate$7;

	var _buildMatchMemberExpression = buildMatchMemberExpression$1;

	var _generated4 = generated$5;

	Object.keys(_generated4).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _generated4[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _generated4[key];
	    }
	  });
	});

	var _generated5 = require$$65;

	Object.keys(_generated5).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _generated5[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _generated5[key];
	    }
	  });
	});
	const react = {
	  isReactComponent: _isReactComponent.default,
	  isCompatTag: _isCompatTag.default,
	  buildChildren: _buildChildren.default
	};
	exports.react = react;
	}(lib$s));

	Object.defineProperty(virtualTypes$2, "__esModule", {
	  value: true
	});
	virtualTypes$2.ForAwaitStatement = virtualTypes$2.NumericLiteralTypeAnnotation = virtualTypes$2.ExistentialTypeParam = virtualTypes$2.SpreadProperty = virtualTypes$2.RestProperty = virtualTypes$2.Flow = virtualTypes$2.Pure = virtualTypes$2.Generated = virtualTypes$2.User = virtualTypes$2.Var = virtualTypes$2.BlockScoped = virtualTypes$2.Referenced = virtualTypes$2.Scope = virtualTypes$2.Expression = virtualTypes$2.Statement = virtualTypes$2.BindingIdentifier = virtualTypes$2.ReferencedMemberExpression = virtualTypes$2.ReferencedIdentifier = void 0;

	var _t$I = lib$s;

	const {
	  isBinding,
	  isBlockScoped,
	  isExportDeclaration: isExportDeclaration$1,
	  isExpression: isExpression$3,
	  isFlow,
	  isForStatement: isForStatement$2,
	  isForXStatement,
	  isIdentifier: isIdentifier$a,
	  isImportDeclaration: isImportDeclaration$1,
	  isImportSpecifier,
	  isJSXIdentifier: isJSXIdentifier$1,
	  isJSXMemberExpression,
	  isMemberExpression: isMemberExpression$6,
	  isReferenced,
	  isScope,
	  isStatement: isStatement$5,
	  isVar,
	  isVariableDeclaration: isVariableDeclaration$2,
	  react: react$1
	} = _t$I;
	const {
	  isCompatTag
	} = react$1;
	const ReferencedIdentifier = {
	  types: ["Identifier", "JSXIdentifier"],

	  checkPath(path, opts) {
	    const {
	      node,
	      parent
	    } = path;

	    if (!isIdentifier$a(node, opts) && !isJSXMemberExpression(parent, opts)) {
	      if (isJSXIdentifier$1(node, opts)) {
	        if (isCompatTag(node.name)) return false;
	      } else {
	        return false;
	      }
	    }

	    return isReferenced(node, parent, path.parentPath.parent);
	  }

	};
	virtualTypes$2.ReferencedIdentifier = ReferencedIdentifier;
	const ReferencedMemberExpression = {
	  types: ["MemberExpression"],

	  checkPath({
	    node,
	    parent
	  }) {
	    return isMemberExpression$6(node) && isReferenced(node, parent);
	  }

	};
	virtualTypes$2.ReferencedMemberExpression = ReferencedMemberExpression;
	const BindingIdentifier = {
	  types: ["Identifier"],

	  checkPath(path) {
	    const {
	      node,
	      parent
	    } = path;
	    const grandparent = path.parentPath.parent;
	    return isIdentifier$a(node) && isBinding(node, parent, grandparent);
	  }

	};
	virtualTypes$2.BindingIdentifier = BindingIdentifier;
	const Statement = {
	  types: ["Statement"],

	  checkPath({
	    node,
	    parent
	  }) {
	    if (isStatement$5(node)) {
	      if (isVariableDeclaration$2(node)) {
	        if (isForXStatement(parent, {
	          left: node
	        })) return false;
	        if (isForStatement$2(parent, {
	          init: node
	        })) return false;
	      }

	      return true;
	    } else {
	      return false;
	    }
	  }

	};
	virtualTypes$2.Statement = Statement;
	const Expression$1 = {
	  types: ["Expression"],

	  checkPath(path) {
	    if (path.isIdentifier()) {
	      return path.isReferencedIdentifier();
	    } else {
	      return isExpression$3(path.node);
	    }
	  }

	};
	virtualTypes$2.Expression = Expression$1;
	const Scope$1 = {
	  types: ["Scopable", "Pattern"],

	  checkPath(path) {
	    return isScope(path.node, path.parent);
	  }

	};
	virtualTypes$2.Scope = Scope$1;
	const Referenced = {
	  checkPath(path) {
	    return isReferenced(path.node, path.parent);
	  }

	};
	virtualTypes$2.Referenced = Referenced;
	const BlockScoped = {
	  checkPath(path) {
	    return isBlockScoped(path.node);
	  }

	};
	virtualTypes$2.BlockScoped = BlockScoped;
	const Var = {
	  types: ["VariableDeclaration"],

	  checkPath(path) {
	    return isVar(path.node);
	  }

	};
	virtualTypes$2.Var = Var;
	const User = {
	  checkPath(path) {
	    return path.node && !!path.node.loc;
	  }

	};
	virtualTypes$2.User = User;
	const Generated = {
	  checkPath(path) {
	    return !path.isUser();
	  }

	};
	virtualTypes$2.Generated = Generated;
	const Pure = {
	  checkPath(path, opts) {
	    return path.scope.isPure(path.node, opts);
	  }

	};
	virtualTypes$2.Pure = Pure;
	const Flow = {
	  types: ["Flow", "ImportDeclaration", "ExportDeclaration", "ImportSpecifier"],

	  checkPath({
	    node
	  }) {
	    if (isFlow(node)) {
	      return true;
	    } else if (isImportDeclaration$1(node)) {
	      return node.importKind === "type" || node.importKind === "typeof";
	    } else if (isExportDeclaration$1(node)) {
	      return node.exportKind === "type";
	    } else if (isImportSpecifier(node)) {
	      return node.importKind === "type" || node.importKind === "typeof";
	    } else {
	      return false;
	    }
	  }

	};
	virtualTypes$2.Flow = Flow;
	const RestProperty = {
	  types: ["RestElement"],

	  checkPath(path) {
	    return path.parentPath && path.parentPath.isObjectPattern();
	  }

	};
	virtualTypes$2.RestProperty = RestProperty;
	const SpreadProperty = {
	  types: ["RestElement"],

	  checkPath(path) {
	    return path.parentPath && path.parentPath.isObjectExpression();
	  }

	};
	virtualTypes$2.SpreadProperty = SpreadProperty;
	const ExistentialTypeParam = {
	  types: ["ExistsTypeAnnotation"]
	};
	virtualTypes$2.ExistentialTypeParam = ExistentialTypeParam;
	const NumericLiteralTypeAnnotation = {
	  types: ["NumberLiteralTypeAnnotation"]
	};
	virtualTypes$2.NumericLiteralTypeAnnotation = NumericLiteralTypeAnnotation;
	const ForAwaitStatement = {
	  types: ["ForOfStatement"],

	  checkPath({
	    node
	  }) {
	    return node.await === true;
	  }

	};
	virtualTypes$2.ForAwaitStatement = ForAwaitStatement;

	var src = {exports: {}};

	var browser$1 = {exports: {}};

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var w = d * 7;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	var ms = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse$c(val);
	  } else if (type === 'number' && isFinite(val)) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse$c(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'weeks':
	    case 'week':
	    case 'w':
	      return n * w;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (msAbs >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (msAbs >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (msAbs >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return plural(ms, msAbs, d, 'day');
	  }
	  if (msAbs >= h) {
	    return plural(ms, msAbs, h, 'hour');
	  }
	  if (msAbs >= m) {
	    return plural(ms, msAbs, m, 'minute');
	  }
	  if (msAbs >= s) {
	    return plural(ms, msAbs, s, 'second');
	  }
	  return ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, msAbs, n, name) {
	  var isPlural = msAbs >= n * 1.5;
	  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
	}

	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 */

	function setup$1(env) {
		createDebug.debug = createDebug;
		createDebug.default = createDebug;
		createDebug.coerce = coerce;
		createDebug.disable = disable;
		createDebug.enable = enable;
		createDebug.enabled = enabled;
		createDebug.humanize = ms;
		createDebug.destroy = destroy;

		Object.keys(env).forEach(key => {
			createDebug[key] = env[key];
		});

		/**
		* The currently active debug mode names, and names to skip.
		*/

		createDebug.names = [];
		createDebug.skips = [];

		/**
		* Map of special "%n" handling functions, for the debug "format" argument.
		*
		* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
		*/
		createDebug.formatters = {};

		/**
		* Selects a color for a debug namespace
		* @param {String} namespace The namespace string for the for the debug instance to be colored
		* @return {Number|String} An ANSI color code for the given namespace
		* @api private
		*/
		function selectColor(namespace) {
			let hash = 0;

			for (let i = 0; i < namespace.length; i++) {
				hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
				hash |= 0; // Convert to 32bit integer
			}

			return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
		}
		createDebug.selectColor = selectColor;

		/**
		* Create a debugger with the given `namespace`.
		*
		* @param {String} namespace
		* @return {Function}
		* @api public
		*/
		function createDebug(namespace) {
			let prevTime;
			let enableOverride = null;
			let namespacesCache;
			let enabledCache;

			function debug(...args) {
				// Disabled?
				if (!debug.enabled) {
					return;
				}

				const self = debug;

				// Set `diff` timestamp
				const curr = Number(new Date());
				const ms = curr - (prevTime || curr);
				self.diff = ms;
				self.prev = prevTime;
				self.curr = curr;
				prevTime = curr;

				args[0] = createDebug.coerce(args[0]);

				if (typeof args[0] !== 'string') {
					// Anything else let's inspect with %O
					args.unshift('%O');
				}

				// Apply any `formatters` transformations
				let index = 0;
				args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
					// If we encounter an escaped % then don't increase the array index
					if (match === '%%') {
						return '%';
					}
					index++;
					const formatter = createDebug.formatters[format];
					if (typeof formatter === 'function') {
						const val = args[index];
						match = formatter.call(self, val);

						// Now we need to remove `args[index]` since it's inlined in the `format`
						args.splice(index, 1);
						index--;
					}
					return match;
				});

				// Apply env-specific formatting (colors, etc.)
				createDebug.formatArgs.call(self, args);

				const logFn = self.log || createDebug.log;
				logFn.apply(self, args);
			}

			debug.namespace = namespace;
			debug.useColors = createDebug.useColors();
			debug.color = createDebug.selectColor(namespace);
			debug.extend = extend;
			debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

			Object.defineProperty(debug, 'enabled', {
				enumerable: true,
				configurable: false,
				get: () => {
					if (enableOverride !== null) {
						return enableOverride;
					}
					if (namespacesCache !== createDebug.namespaces) {
						namespacesCache = createDebug.namespaces;
						enabledCache = createDebug.enabled(namespace);
					}

					return enabledCache;
				},
				set: v => {
					enableOverride = v;
				}
			});

			// Env-specific initialization logic for debug instances
			if (typeof createDebug.init === 'function') {
				createDebug.init(debug);
			}

			return debug;
		}

		function extend(namespace, delimiter) {
			const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
			newDebug.log = this.log;
			return newDebug;
		}

		/**
		* Enables a debug mode by namespaces. This can include modes
		* separated by a colon and wildcards.
		*
		* @param {String} namespaces
		* @api public
		*/
		function enable(namespaces) {
			createDebug.save(namespaces);
			createDebug.namespaces = namespaces;

			createDebug.names = [];
			createDebug.skips = [];

			let i;
			const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
			const len = split.length;

			for (i = 0; i < len; i++) {
				if (!split[i]) {
					// ignore empty strings
					continue;
				}

				namespaces = split[i].replace(/\*/g, '.*?');

				if (namespaces[0] === '-') {
					createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
				} else {
					createDebug.names.push(new RegExp('^' + namespaces + '$'));
				}
			}
		}

		/**
		* Disable debug output.
		*
		* @return {String} namespaces
		* @api public
		*/
		function disable() {
			const namespaces = [
				...createDebug.names.map(toNamespace),
				...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
			].join(',');
			createDebug.enable('');
			return namespaces;
		}

		/**
		* Returns true if the given mode name is enabled, false otherwise.
		*
		* @param {String} name
		* @return {Boolean}
		* @api public
		*/
		function enabled(name) {
			if (name[name.length - 1] === '*') {
				return true;
			}

			let i;
			let len;

			for (i = 0, len = createDebug.skips.length; i < len; i++) {
				if (createDebug.skips[i].test(name)) {
					return false;
				}
			}

			for (i = 0, len = createDebug.names.length; i < len; i++) {
				if (createDebug.names[i].test(name)) {
					return true;
				}
			}

			return false;
		}

		/**
		* Convert regexp to namespace
		*
		* @param {RegExp} regxep
		* @return {String} namespace
		* @api private
		*/
		function toNamespace(regexp) {
			return regexp.toString()
				.substring(2, regexp.toString().length - 2)
				.replace(/\.\*\?$/, '*');
		}

		/**
		* Coerce `val`.
		*
		* @param {Mixed} val
		* @return {Mixed}
		* @api private
		*/
		function coerce(val) {
			if (val instanceof Error) {
				return val.stack || val.message;
			}
			return val;
		}

		/**
		* XXX DO NOT USE. This is a temporary stub function.
		* XXX It WILL be removed in the next major release.
		*/
		function destroy() {
			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
		}

		createDebug.enable(createDebug.load());

		return createDebug;
	}

	var common = setup$1;

	/* eslint-env browser */

	(function (module, exports) {
	/**
	 * This is the web browser implementation of `debug()`.
	 */

	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = localstorage();
	exports.destroy = (() => {
		let warned = false;

		return () => {
			if (!warned) {
				warned = true;
				console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
			}
		};
	})();

	/**
	 * Colors.
	 */

	exports.colors = [
		'#0000CC',
		'#0000FF',
		'#0033CC',
		'#0033FF',
		'#0066CC',
		'#0066FF',
		'#0099CC',
		'#0099FF',
		'#00CC00',
		'#00CC33',
		'#00CC66',
		'#00CC99',
		'#00CCCC',
		'#00CCFF',
		'#3300CC',
		'#3300FF',
		'#3333CC',
		'#3333FF',
		'#3366CC',
		'#3366FF',
		'#3399CC',
		'#3399FF',
		'#33CC00',
		'#33CC33',
		'#33CC66',
		'#33CC99',
		'#33CCCC',
		'#33CCFF',
		'#6600CC',
		'#6600FF',
		'#6633CC',
		'#6633FF',
		'#66CC00',
		'#66CC33',
		'#9900CC',
		'#9900FF',
		'#9933CC',
		'#9933FF',
		'#99CC00',
		'#99CC33',
		'#CC0000',
		'#CC0033',
		'#CC0066',
		'#CC0099',
		'#CC00CC',
		'#CC00FF',
		'#CC3300',
		'#CC3333',
		'#CC3366',
		'#CC3399',
		'#CC33CC',
		'#CC33FF',
		'#CC6600',
		'#CC6633',
		'#CC9900',
		'#CC9933',
		'#CCCC00',
		'#CCCC33',
		'#FF0000',
		'#FF0033',
		'#FF0066',
		'#FF0099',
		'#FF00CC',
		'#FF00FF',
		'#FF3300',
		'#FF3333',
		'#FF3366',
		'#FF3399',
		'#FF33CC',
		'#FF33FF',
		'#FF6600',
		'#FF6633',
		'#FF9900',
		'#FF9933',
		'#FFCC00',
		'#FFCC33'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	// eslint-disable-next-line complexity
	function useColors() {
		// NB: In an Electron preload script, document will be defined but not fully
		// initialized. Since we know we're in Chrome, we'll just detect this case
		// explicitly
		if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
			return true;
		}

		// Internet Explorer and Edge do not support colors.
		if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
			return false;
		}

		// Is webkit? http://stackoverflow.com/a/16459606/376773
		// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
		return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
			// Is firebug? http://stackoverflow.com/a/398120/376773
			(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
			// Is firefox >= v31?
			// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
			// Double check webkit in userAgent just in case we are in a worker
			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
	}

	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
		args[0] = (this.useColors ? '%c' : '') +
			this.namespace +
			(this.useColors ? ' %c' : ' ') +
			args[0] +
			(this.useColors ? '%c ' : ' ') +
			'+' + module.exports.humanize(this.diff);

		if (!this.useColors) {
			return;
		}

		const c = 'color: ' + this.color;
		args.splice(1, 0, c, 'color: inherit');

		// The final "%c" is somewhat tricky, because there could be other
		// arguments passed either before or after the %c, so we need to
		// figure out the correct index to insert the CSS into
		let index = 0;
		let lastC = 0;
		args[0].replace(/%[a-zA-Z%]/g, match => {
			if (match === '%%') {
				return;
			}
			index++;
			if (match === '%c') {
				// We only are interested in the *last* %c
				// (the user may have provided their own)
				lastC = index;
			}
		});

		args.splice(lastC, 0, c);
	}

	/**
	 * Invokes `console.debug()` when available.
	 * No-op when `console.debug` is not a "function".
	 * If `console.debug` is not available, falls back
	 * to `console.log`.
	 *
	 * @api public
	 */
	exports.log = console.debug || console.log || (() => {});

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	function save(namespaces) {
		try {
			if (namespaces) {
				exports.storage.setItem('debug', namespaces);
			} else {
				exports.storage.removeItem('debug');
			}
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	function load() {
		let r;
		try {
			r = exports.storage.getItem('debug');
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}

		// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
		if (!r && typeof process !== 'undefined' && 'env' in process) {
			r = process.env.DEBUG;
		}

		return r;
	}

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
		try {
			// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
			// The Browser also has localStorage in the global context.
			return localStorage;
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}
	}

	module.exports = common(exports);

	const {formatters} = module.exports;

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	formatters.j = function (v) {
		try {
			return JSON.stringify(v);
		} catch (error) {
			return '[UnexpectedJSONParseError]: ' + error.message;
		}
	};
	}(browser$1, browser$1.exports));

	var node$6 = {exports: {}};

	var hasFlag$3 = (flag, argv = process.argv) => {
		const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
		const position = argv.indexOf(prefix + flag);
		const terminatorPosition = argv.indexOf('--');
		return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
	};

	const os$1 = require$$0__default$1['default'];
	const tty = require$$1__default$1['default'];
	const hasFlag$2 = hasFlag$3;

	const {env: env$2} = process;

	let forceColor$1;
	if (hasFlag$2('no-color') ||
		hasFlag$2('no-colors') ||
		hasFlag$2('color=false') ||
		hasFlag$2('color=never')) {
		forceColor$1 = 0;
	} else if (hasFlag$2('color') ||
		hasFlag$2('colors') ||
		hasFlag$2('color=true') ||
		hasFlag$2('color=always')) {
		forceColor$1 = 1;
	}

	if ('FORCE_COLOR' in env$2) {
		if (env$2.FORCE_COLOR === 'true') {
			forceColor$1 = 1;
		} else if (env$2.FORCE_COLOR === 'false') {
			forceColor$1 = 0;
		} else {
			forceColor$1 = env$2.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env$2.FORCE_COLOR, 10), 3);
		}
	}

	function translateLevel$1(level) {
		if (level === 0) {
			return false;
		}

		return {
			level,
			hasBasic: true,
			has256: level >= 2,
			has16m: level >= 3
		};
	}

	function supportsColor$1(haveStream, streamIsTTY) {
		if (forceColor$1 === 0) {
			return 0;
		}

		if (hasFlag$2('color=16m') ||
			hasFlag$2('color=full') ||
			hasFlag$2('color=truecolor')) {
			return 3;
		}

		if (hasFlag$2('color=256')) {
			return 2;
		}

		if (haveStream && !streamIsTTY && forceColor$1 === undefined) {
			return 0;
		}

		const min = forceColor$1 || 0;

		if (env$2.TERM === 'dumb') {
			return min;
		}

		if (process.platform === 'win32') {
			// Windows 10 build 10586 is the first Windows release that supports 256 colors.
			// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
			const osRelease = os$1.release().split('.');
			if (
				Number(osRelease[0]) >= 10 &&
				Number(osRelease[2]) >= 10586
			) {
				return Number(osRelease[2]) >= 14931 ? 3 : 2;
			}

			return 1;
		}

		if ('CI' in env$2) {
			if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env$2) || env$2.CI_NAME === 'codeship') {
				return 1;
			}

			return min;
		}

		if ('TEAMCITY_VERSION' in env$2) {
			return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env$2.TEAMCITY_VERSION) ? 1 : 0;
		}

		if (env$2.COLORTERM === 'truecolor') {
			return 3;
		}

		if ('TERM_PROGRAM' in env$2) {
			const version = parseInt((env$2.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

			switch (env$2.TERM_PROGRAM) {
				case 'iTerm.app':
					return version >= 3 ? 3 : 2;
				case 'Apple_Terminal':
					return 2;
				// No default
			}
		}

		if (/-256(color)?$/i.test(env$2.TERM)) {
			return 2;
		}

		if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env$2.TERM)) {
			return 1;
		}

		if ('COLORTERM' in env$2) {
			return 1;
		}

		return min;
	}

	function getSupportLevel$1(stream) {
		const level = supportsColor$1(stream, stream && stream.isTTY);
		return translateLevel$1(level);
	}

	var supportsColor_1$1 = {
		supportsColor: getSupportLevel$1,
		stdout: translateLevel$1(supportsColor$1(true, tty.isatty(1))),
		stderr: translateLevel$1(supportsColor$1(true, tty.isatty(2)))
	};

	/**
	 * Module dependencies.
	 */

	(function (module, exports) {
	const tty = require$$1__default$1['default'];
	const util = require$$1__default$2['default'];

	/**
	 * This is the Node.js implementation of `debug()`.
	 */

	exports.init = init;
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.destroy = util.deprecate(
		() => {},
		'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
	);

	/**
	 * Colors.
	 */

	exports.colors = [6, 2, 3, 4, 5, 1];

	try {
		// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
		// eslint-disable-next-line import/no-extraneous-dependencies
		const supportsColor = supportsColor_1$1;

		if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
			exports.colors = [
				20,
				21,
				26,
				27,
				32,
				33,
				38,
				39,
				40,
				41,
				42,
				43,
				44,
				45,
				56,
				57,
				62,
				63,
				68,
				69,
				74,
				75,
				76,
				77,
				78,
				79,
				80,
				81,
				92,
				93,
				98,
				99,
				112,
				113,
				128,
				129,
				134,
				135,
				148,
				149,
				160,
				161,
				162,
				163,
				164,
				165,
				166,
				167,
				168,
				169,
				170,
				171,
				172,
				173,
				178,
				179,
				184,
				185,
				196,
				197,
				198,
				199,
				200,
				201,
				202,
				203,
				204,
				205,
				206,
				207,
				208,
				209,
				214,
				215,
				220,
				221
			];
		}
	} catch (error) {
		// Swallow - we only care if `supports-color` is available; it doesn't have to be.
	}

	/**
	 * Build up the default `inspectOpts` object from the environment variables.
	 *
	 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
	 */

	exports.inspectOpts = Object.keys(process.env).filter(key => {
		return /^debug_/i.test(key);
	}).reduce((obj, key) => {
		// Camel-case
		const prop = key
			.substring(6)
			.toLowerCase()
			.replace(/_([a-z])/g, (_, k) => {
				return k.toUpperCase();
			});

		// Coerce string value into JS value
		let val = process.env[key];
		if (/^(yes|on|true|enabled)$/i.test(val)) {
			val = true;
		} else if (/^(no|off|false|disabled)$/i.test(val)) {
			val = false;
		} else if (val === 'null') {
			val = null;
		} else {
			val = Number(val);
		}

		obj[prop] = val;
		return obj;
	}, {});

	/**
	 * Is stdout a TTY? Colored output is enabled when `true`.
	 */

	function useColors() {
		return 'colors' in exports.inspectOpts ?
			Boolean(exports.inspectOpts.colors) :
			tty.isatty(process.stderr.fd);
	}

	/**
	 * Adds ANSI color escape codes if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
		const {namespace: name, useColors} = this;

		if (useColors) {
			const c = this.color;
			const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
			const prefix = `  ${colorCode};1m${name} \u001B[0m`;

			args[0] = prefix + args[0].split('\n').join('\n' + prefix);
			args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
		} else {
			args[0] = getDate() + name + ' ' + args[0];
		}
	}

	function getDate() {
		if (exports.inspectOpts.hideDate) {
			return '';
		}
		return new Date().toISOString() + ' ';
	}

	/**
	 * Invokes `util.format()` with the specified arguments and writes to stderr.
	 */

	function log(...args) {
		return process.stderr.write(util.format(...args) + '\n');
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	function save(namespaces) {
		if (namespaces) {
			process.env.DEBUG = namespaces;
		} else {
			// If you set a process.env field to null or undefined, it gets cast to the
			// string 'null' or 'undefined'. Just delete instead.
			delete process.env.DEBUG;
		}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
		return process.env.DEBUG;
	}

	/**
	 * Init logic for `debug` instances.
	 *
	 * Create a new `inspectOpts` object in case `useColors` is set
	 * differently for a particular `debug` instance.
	 */

	function init(debug) {
		debug.inspectOpts = {};

		const keys = Object.keys(exports.inspectOpts);
		for (let i = 0; i < keys.length; i++) {
			debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
		}
	}

	module.exports = common(exports);

	const {formatters} = module.exports;

	/**
	 * Map %o to `util.inspect()`, all on a single line.
	 */

	formatters.o = function (v) {
		this.inspectOpts.colors = this.useColors;
		return util.inspect(v, this.inspectOpts)
			.split('\n')
			.map(str => str.trim())
			.join(' ');
	};

	/**
	 * Map %O to `util.inspect()`, allowing multiple lines if needed.
	 */

	formatters.O = function (v) {
		this.inspectOpts.colors = this.useColors;
		return util.inspect(v, this.inspectOpts);
	};
	}(node$6, node$6.exports));

	/**
	 * Detect Electron renderer / nwjs process, which is node, but we should
	 * treat as a browser.
	 */

	if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
		src.exports = browser$1.exports;
	} else {
		src.exports = node$6.exports;
	}

	var scope$1 = {};

	var renamer = {};

	var binding = {};

	Object.defineProperty(binding, "__esModule", {
	  value: true
	});
	binding.default = void 0;

	class Binding {
	  constructor({
	    identifier,
	    scope,
	    path,
	    kind
	  }) {
	    this.identifier = void 0;
	    this.scope = void 0;
	    this.path = void 0;
	    this.kind = void 0;
	    this.constantViolations = [];
	    this.constant = true;
	    this.referencePaths = [];
	    this.referenced = false;
	    this.references = 0;
	    this.identifier = identifier;
	    this.scope = scope;
	    this.path = path;
	    this.kind = kind;
	    this.clearValue();
	  }

	  deoptValue() {
	    this.clearValue();
	    this.hasDeoptedValue = true;
	  }

	  setValue(value) {
	    if (this.hasDeoptedValue) return;
	    this.hasValue = true;
	    this.value = value;
	  }

	  clearValue() {
	    this.hasDeoptedValue = false;
	    this.hasValue = false;
	    this.value = null;
	  }

	  reassign(path) {
	    this.constant = false;

	    if (this.constantViolations.indexOf(path) !== -1) {
	      return;
	    }

	    this.constantViolations.push(path);
	  }

	  reference(path) {
	    if (this.referencePaths.indexOf(path) !== -1) {
	      return;
	    }

	    this.referenced = true;
	    this.references++;
	    this.referencePaths.push(path);
	  }

	  dereference() {
	    this.references--;
	    this.referenced = !!this.references;
	  }

	}

	binding.default = Binding;

	var lib$q = {};

	Object.defineProperty(lib$q, "__esModule", {
	  value: true
	});
	lib$q.default = splitExportDeclaration;

	var _t$H = lib$s;

	const {
	  cloneNode: cloneNode$f,
	  exportNamedDeclaration: exportNamedDeclaration$1,
	  exportSpecifier: exportSpecifier$1,
	  identifier: identifier$f,
	  variableDeclaration: variableDeclaration$7,
	  variableDeclarator: variableDeclarator$7
	} = _t$H;

	function splitExportDeclaration(exportDeclaration) {
	  if (!exportDeclaration.isExportDeclaration()) {
	    throw new Error("Only export declarations can be split.");
	  }

	  const isDefault = exportDeclaration.isExportDefaultDeclaration();
	  const declaration = exportDeclaration.get("declaration");
	  const isClassDeclaration = declaration.isClassDeclaration();

	  if (isDefault) {
	    const standaloneDeclaration = declaration.isFunctionDeclaration() || isClassDeclaration;
	    const scope = declaration.isScope() ? declaration.scope.parent : declaration.scope;
	    let id = declaration.node.id;
	    let needBindingRegistration = false;

	    if (!id) {
	      needBindingRegistration = true;
	      id = scope.generateUidIdentifier("default");

	      if (standaloneDeclaration || declaration.isFunctionExpression() || declaration.isClassExpression()) {
	        declaration.node.id = cloneNode$f(id);
	      }
	    }

	    const updatedDeclaration = standaloneDeclaration ? declaration : variableDeclaration$7("var", [variableDeclarator$7(cloneNode$f(id), declaration.node)]);
	    const updatedExportDeclaration = exportNamedDeclaration$1(null, [exportSpecifier$1(cloneNode$f(id), identifier$f("default"))]);
	    exportDeclaration.insertAfter(updatedExportDeclaration);
	    exportDeclaration.replaceWith(updatedDeclaration);

	    if (needBindingRegistration) {
	      scope.registerDeclaration(exportDeclaration);
	    }

	    return exportDeclaration;
	  }

	  if (exportDeclaration.get("specifiers").length > 0) {
	    throw new Error("It doesn't make sense to split exported specifiers.");
	  }

	  const bindingIdentifiers = declaration.getOuterBindingIdentifiers();
	  const specifiers = Object.keys(bindingIdentifiers).map(name => {
	    return exportSpecifier$1(identifier$f(name), identifier$f(name));
	  });
	  const aliasDeclar = exportNamedDeclaration$1(null, specifiers);
	  exportDeclaration.insertAfter(aliasDeclar);
	  exportDeclaration.replaceWith(declaration.node);
	  return exportDeclaration;
	}

	Object.defineProperty(renamer, "__esModule", {
	  value: true
	});
	renamer.default = void 0;

	var _helperSplitExportDeclaration$1 = lib$q;

	var _t$G = lib$s;

	const {
	  VISITOR_KEYS: VISITOR_KEYS$4,
	  assignmentExpression: assignmentExpression$a,
	  identifier: identifier$e,
	  toExpression,
	  variableDeclaration: variableDeclaration$6,
	  variableDeclarator: variableDeclarator$6
	} = _t$G;
	const renameVisitor = {
	  ReferencedIdentifier({
	    node
	  }, state) {
	    if (node.name === state.oldName) {
	      node.name = state.newName;
	    }
	  },

	  Scope(path, state) {
	    if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {
	      skipAllButComputedMethodKey(path);
	    }
	  },

	  "AssignmentExpression|Declaration|VariableDeclarator"(path, state) {
	    if (path.isVariableDeclaration()) return;
	    const ids = path.getOuterBindingIdentifiers();

	    for (const name in ids) {
	      if (name === state.oldName) ids[name].name = state.newName;
	    }
	  }

	};

	class Renamer {
	  constructor(binding, oldName, newName) {
	    this.newName = newName;
	    this.oldName = oldName;
	    this.binding = binding;
	  }

	  maybeConvertFromExportDeclaration(parentDeclar) {
	    const maybeExportDeclar = parentDeclar.parentPath;

	    if (!maybeExportDeclar.isExportDeclaration()) {
	      return;
	    }

	    if (maybeExportDeclar.isExportDefaultDeclaration() && !maybeExportDeclar.get("declaration").node.id) {
	      return;
	    }

	    (0, _helperSplitExportDeclaration$1.default)(maybeExportDeclar);
	  }

	  maybeConvertFromClassFunctionDeclaration(path) {
	    return;
	  }

	  maybeConvertFromClassFunctionExpression(path) {
	    return;
	  }

	  rename(block) {
	    const {
	      binding,
	      oldName,
	      newName
	    } = this;
	    const {
	      scope,
	      path
	    } = binding;
	    const parentDeclar = path.find(path => path.isDeclaration() || path.isFunctionExpression() || path.isClassExpression());

	    if (parentDeclar) {
	      const bindingIds = parentDeclar.getOuterBindingIdentifiers();

	      if (bindingIds[oldName] === binding.identifier) {
	        this.maybeConvertFromExportDeclaration(parentDeclar);
	      }
	    }

	    const blockToTraverse = block || scope.block;

	    if ((blockToTraverse == null ? void 0 : blockToTraverse.type) === "SwitchStatement") {
	      blockToTraverse.cases.forEach(c => {
	        scope.traverse(c, renameVisitor, this);
	      });
	    } else {
	      scope.traverse(blockToTraverse, renameVisitor, this);
	    }

	    if (!block) {
	      scope.removeOwnBinding(oldName);
	      scope.bindings[newName] = binding;
	      this.binding.identifier.name = newName;
	    }

	    if (parentDeclar) {
	      this.maybeConvertFromClassFunctionDeclaration(parentDeclar);
	      this.maybeConvertFromClassFunctionExpression(parentDeclar);
	    }
	  }

	}

	renamer.default = Renamer;

	function skipAllButComputedMethodKey(path) {
	  if (!path.isMethod() || !path.node.computed) {
	    path.skip();
	    return;
	  }

	  const keys = VISITOR_KEYS$4[path.type];

	  for (const key of keys) {
	    if (key !== "key") path.skipKey(key);
	  }
	}

	var builtin = {
		"Array": false,
		"ArrayBuffer": false,
		Atomics: false,
		BigInt: false,
		BigInt64Array: false,
		BigUint64Array: false,
		"Boolean": false,
		constructor: false,
		"DataView": false,
		"Date": false,
		"decodeURI": false,
		"decodeURIComponent": false,
		"encodeURI": false,
		"encodeURIComponent": false,
		"Error": false,
		"escape": false,
		"eval": false,
		"EvalError": false,
		"Float32Array": false,
		"Float64Array": false,
		"Function": false,
		globalThis: false,
		hasOwnProperty: false,
		"Infinity": false,
		"Int16Array": false,
		"Int32Array": false,
		"Int8Array": false,
		"isFinite": false,
		"isNaN": false,
		isPrototypeOf: false,
		"JSON": false,
		"Map": false,
		"Math": false,
		"NaN": false,
		"Number": false,
		"Object": false,
		"parseFloat": false,
		"parseInt": false,
		"Promise": false,
		propertyIsEnumerable: false,
		"Proxy": false,
		"RangeError": false,
		"ReferenceError": false,
		"Reflect": false,
		"RegExp": false,
		"Set": false,
		SharedArrayBuffer: false,
		"String": false,
		"Symbol": false,
		"SyntaxError": false,
		toLocaleString: false,
		toString: false,
		"TypeError": false,
		"Uint16Array": false,
		"Uint32Array": false,
		"Uint8Array": false,
		"Uint8ClampedArray": false,
		"undefined": false,
		"unescape": false,
		"URIError": false,
		valueOf: false,
		"WeakMap": false,
		"WeakSet": false
	};
	var es5 = {
		"Array": false,
		"Boolean": false,
		constructor: false,
		"Date": false,
		"decodeURI": false,
		"decodeURIComponent": false,
		"encodeURI": false,
		"encodeURIComponent": false,
		"Error": false,
		"escape": false,
		"eval": false,
		"EvalError": false,
		"Function": false,
		hasOwnProperty: false,
		"Infinity": false,
		"isFinite": false,
		"isNaN": false,
		isPrototypeOf: false,
		"JSON": false,
		"Math": false,
		"NaN": false,
		"Number": false,
		"Object": false,
		"parseFloat": false,
		"parseInt": false,
		propertyIsEnumerable: false,
		"RangeError": false,
		"ReferenceError": false,
		"RegExp": false,
		"String": false,
		"SyntaxError": false,
		toLocaleString: false,
		toString: false,
		"TypeError": false,
		"undefined": false,
		"unescape": false,
		"URIError": false,
		valueOf: false
	};
	var es2015 = {
		"Array": false,
		"ArrayBuffer": false,
		"Boolean": false,
		constructor: false,
		"DataView": false,
		"Date": false,
		"decodeURI": false,
		"decodeURIComponent": false,
		"encodeURI": false,
		"encodeURIComponent": false,
		"Error": false,
		"escape": false,
		"eval": false,
		"EvalError": false,
		"Float32Array": false,
		"Float64Array": false,
		"Function": false,
		hasOwnProperty: false,
		"Infinity": false,
		"Int16Array": false,
		"Int32Array": false,
		"Int8Array": false,
		"isFinite": false,
		"isNaN": false,
		isPrototypeOf: false,
		"JSON": false,
		"Map": false,
		"Math": false,
		"NaN": false,
		"Number": false,
		"Object": false,
		"parseFloat": false,
		"parseInt": false,
		"Promise": false,
		propertyIsEnumerable: false,
		"Proxy": false,
		"RangeError": false,
		"ReferenceError": false,
		"Reflect": false,
		"RegExp": false,
		"Set": false,
		"String": false,
		"Symbol": false,
		"SyntaxError": false,
		toLocaleString: false,
		toString: false,
		"TypeError": false,
		"Uint16Array": false,
		"Uint32Array": false,
		"Uint8Array": false,
		"Uint8ClampedArray": false,
		"undefined": false,
		"unescape": false,
		"URIError": false,
		valueOf: false,
		"WeakMap": false,
		"WeakSet": false
	};
	var es2017 = {
		"Array": false,
		"ArrayBuffer": false,
		Atomics: false,
		"Boolean": false,
		constructor: false,
		"DataView": false,
		"Date": false,
		"decodeURI": false,
		"decodeURIComponent": false,
		"encodeURI": false,
		"encodeURIComponent": false,
		"Error": false,
		"escape": false,
		"eval": false,
		"EvalError": false,
		"Float32Array": false,
		"Float64Array": false,
		"Function": false,
		hasOwnProperty: false,
		"Infinity": false,
		"Int16Array": false,
		"Int32Array": false,
		"Int8Array": false,
		"isFinite": false,
		"isNaN": false,
		isPrototypeOf: false,
		"JSON": false,
		"Map": false,
		"Math": false,
		"NaN": false,
		"Number": false,
		"Object": false,
		"parseFloat": false,
		"parseInt": false,
		"Promise": false,
		propertyIsEnumerable: false,
		"Proxy": false,
		"RangeError": false,
		"ReferenceError": false,
		"Reflect": false,
		"RegExp": false,
		"Set": false,
		SharedArrayBuffer: false,
		"String": false,
		"Symbol": false,
		"SyntaxError": false,
		toLocaleString: false,
		toString: false,
		"TypeError": false,
		"Uint16Array": false,
		"Uint32Array": false,
		"Uint8Array": false,
		"Uint8ClampedArray": false,
		"undefined": false,
		"unescape": false,
		"URIError": false,
		valueOf: false,
		"WeakMap": false,
		"WeakSet": false
	};
	var browser = {
		AbortController: false,
		AbortSignal: false,
		addEventListener: false,
		alert: false,
		AnalyserNode: false,
		Animation: false,
		AnimationEffectReadOnly: false,
		AnimationEffectTiming: false,
		AnimationEffectTimingReadOnly: false,
		AnimationEvent: false,
		AnimationPlaybackEvent: false,
		AnimationTimeline: false,
		applicationCache: false,
		ApplicationCache: false,
		ApplicationCacheErrorEvent: false,
		atob: false,
		Attr: false,
		Audio: false,
		AudioBuffer: false,
		AudioBufferSourceNode: false,
		AudioContext: false,
		AudioDestinationNode: false,
		AudioListener: false,
		AudioNode: false,
		AudioParam: false,
		AudioProcessingEvent: false,
		AudioScheduledSourceNode: false,
		"AudioWorkletGlobalScope ": false,
		AudioWorkletNode: false,
		AudioWorkletProcessor: false,
		BarProp: false,
		BaseAudioContext: false,
		BatteryManager: false,
		BeforeUnloadEvent: false,
		BiquadFilterNode: false,
		Blob: false,
		BlobEvent: false,
		blur: false,
		BroadcastChannel: false,
		btoa: false,
		BudgetService: false,
		ByteLengthQueuingStrategy: false,
		Cache: false,
		caches: false,
		CacheStorage: false,
		cancelAnimationFrame: false,
		cancelIdleCallback: false,
		CanvasCaptureMediaStreamTrack: false,
		CanvasGradient: false,
		CanvasPattern: false,
		CanvasRenderingContext2D: false,
		ChannelMergerNode: false,
		ChannelSplitterNode: false,
		CharacterData: false,
		clearInterval: false,
		clearTimeout: false,
		clientInformation: false,
		ClipboardEvent: false,
		close: false,
		closed: false,
		CloseEvent: false,
		Comment: false,
		CompositionEvent: false,
		confirm: false,
		console: false,
		ConstantSourceNode: false,
		ConvolverNode: false,
		CountQueuingStrategy: false,
		createImageBitmap: false,
		Credential: false,
		CredentialsContainer: false,
		crypto: false,
		Crypto: false,
		CryptoKey: false,
		CSS: false,
		CSSConditionRule: false,
		CSSFontFaceRule: false,
		CSSGroupingRule: false,
		CSSImportRule: false,
		CSSKeyframeRule: false,
		CSSKeyframesRule: false,
		CSSMediaRule: false,
		CSSNamespaceRule: false,
		CSSPageRule: false,
		CSSRule: false,
		CSSRuleList: false,
		CSSStyleDeclaration: false,
		CSSStyleRule: false,
		CSSStyleSheet: false,
		CSSSupportsRule: false,
		CustomElementRegistry: false,
		customElements: false,
		CustomEvent: false,
		DataTransfer: false,
		DataTransferItem: false,
		DataTransferItemList: false,
		defaultstatus: false,
		defaultStatus: false,
		DelayNode: false,
		DeviceMotionEvent: false,
		DeviceOrientationEvent: false,
		devicePixelRatio: false,
		dispatchEvent: false,
		document: false,
		Document: false,
		DocumentFragment: false,
		DocumentType: false,
		DOMError: false,
		DOMException: false,
		DOMImplementation: false,
		DOMMatrix: false,
		DOMMatrixReadOnly: false,
		DOMParser: false,
		DOMPoint: false,
		DOMPointReadOnly: false,
		DOMQuad: false,
		DOMRect: false,
		DOMRectReadOnly: false,
		DOMStringList: false,
		DOMStringMap: false,
		DOMTokenList: false,
		DragEvent: false,
		DynamicsCompressorNode: false,
		Element: false,
		ErrorEvent: false,
		event: false,
		Event: false,
		EventSource: false,
		EventTarget: false,
		external: false,
		fetch: false,
		File: false,
		FileList: false,
		FileReader: false,
		find: false,
		focus: false,
		FocusEvent: false,
		FontFace: false,
		FontFaceSetLoadEvent: false,
		FormData: false,
		frameElement: false,
		frames: false,
		GainNode: false,
		Gamepad: false,
		GamepadButton: false,
		GamepadEvent: false,
		getComputedStyle: false,
		getSelection: false,
		HashChangeEvent: false,
		Headers: false,
		history: false,
		History: false,
		HTMLAllCollection: false,
		HTMLAnchorElement: false,
		HTMLAreaElement: false,
		HTMLAudioElement: false,
		HTMLBaseElement: false,
		HTMLBodyElement: false,
		HTMLBRElement: false,
		HTMLButtonElement: false,
		HTMLCanvasElement: false,
		HTMLCollection: false,
		HTMLContentElement: false,
		HTMLDataElement: false,
		HTMLDataListElement: false,
		HTMLDetailsElement: false,
		HTMLDialogElement: false,
		HTMLDirectoryElement: false,
		HTMLDivElement: false,
		HTMLDListElement: false,
		HTMLDocument: false,
		HTMLElement: false,
		HTMLEmbedElement: false,
		HTMLFieldSetElement: false,
		HTMLFontElement: false,
		HTMLFormControlsCollection: false,
		HTMLFormElement: false,
		HTMLFrameElement: false,
		HTMLFrameSetElement: false,
		HTMLHeadElement: false,
		HTMLHeadingElement: false,
		HTMLHRElement: false,
		HTMLHtmlElement: false,
		HTMLIFrameElement: false,
		HTMLImageElement: false,
		HTMLInputElement: false,
		HTMLLabelElement: false,
		HTMLLegendElement: false,
		HTMLLIElement: false,
		HTMLLinkElement: false,
		HTMLMapElement: false,
		HTMLMarqueeElement: false,
		HTMLMediaElement: false,
		HTMLMenuElement: false,
		HTMLMetaElement: false,
		HTMLMeterElement: false,
		HTMLModElement: false,
		HTMLObjectElement: false,
		HTMLOListElement: false,
		HTMLOptGroupElement: false,
		HTMLOptionElement: false,
		HTMLOptionsCollection: false,
		HTMLOutputElement: false,
		HTMLParagraphElement: false,
		HTMLParamElement: false,
		HTMLPictureElement: false,
		HTMLPreElement: false,
		HTMLProgressElement: false,
		HTMLQuoteElement: false,
		HTMLScriptElement: false,
		HTMLSelectElement: false,
		HTMLShadowElement: false,
		HTMLSlotElement: false,
		HTMLSourceElement: false,
		HTMLSpanElement: false,
		HTMLStyleElement: false,
		HTMLTableCaptionElement: false,
		HTMLTableCellElement: false,
		HTMLTableColElement: false,
		HTMLTableElement: false,
		HTMLTableRowElement: false,
		HTMLTableSectionElement: false,
		HTMLTemplateElement: false,
		HTMLTextAreaElement: false,
		HTMLTimeElement: false,
		HTMLTitleElement: false,
		HTMLTrackElement: false,
		HTMLUListElement: false,
		HTMLUnknownElement: false,
		HTMLVideoElement: false,
		IDBCursor: false,
		IDBCursorWithValue: false,
		IDBDatabase: false,
		IDBFactory: false,
		IDBIndex: false,
		IDBKeyRange: false,
		IDBObjectStore: false,
		IDBOpenDBRequest: false,
		IDBRequest: false,
		IDBTransaction: false,
		IDBVersionChangeEvent: false,
		IdleDeadline: false,
		IIRFilterNode: false,
		Image: false,
		ImageBitmap: false,
		ImageBitmapRenderingContext: false,
		ImageCapture: false,
		ImageData: false,
		indexedDB: false,
		innerHeight: false,
		innerWidth: false,
		InputEvent: false,
		IntersectionObserver: false,
		IntersectionObserverEntry: false,
		"Intl": false,
		isSecureContext: false,
		KeyboardEvent: false,
		KeyframeEffect: false,
		KeyframeEffectReadOnly: false,
		length: false,
		localStorage: false,
		location: true,
		Location: false,
		locationbar: false,
		matchMedia: false,
		MediaDeviceInfo: false,
		MediaDevices: false,
		MediaElementAudioSourceNode: false,
		MediaEncryptedEvent: false,
		MediaError: false,
		MediaKeyMessageEvent: false,
		MediaKeySession: false,
		MediaKeyStatusMap: false,
		MediaKeySystemAccess: false,
		MediaList: false,
		MediaQueryList: false,
		MediaQueryListEvent: false,
		MediaRecorder: false,
		MediaSettingsRange: false,
		MediaSource: false,
		MediaStream: false,
		MediaStreamAudioDestinationNode: false,
		MediaStreamAudioSourceNode: false,
		MediaStreamEvent: false,
		MediaStreamTrack: false,
		MediaStreamTrackEvent: false,
		menubar: false,
		MessageChannel: false,
		MessageEvent: false,
		MessagePort: false,
		MIDIAccess: false,
		MIDIConnectionEvent: false,
		MIDIInput: false,
		MIDIInputMap: false,
		MIDIMessageEvent: false,
		MIDIOutput: false,
		MIDIOutputMap: false,
		MIDIPort: false,
		MimeType: false,
		MimeTypeArray: false,
		MouseEvent: false,
		moveBy: false,
		moveTo: false,
		MutationEvent: false,
		MutationObserver: false,
		MutationRecord: false,
		name: false,
		NamedNodeMap: false,
		NavigationPreloadManager: false,
		navigator: false,
		Navigator: false,
		NetworkInformation: false,
		Node: false,
		NodeFilter: false,
		NodeIterator: false,
		NodeList: false,
		Notification: false,
		OfflineAudioCompletionEvent: false,
		OfflineAudioContext: false,
		offscreenBuffering: false,
		OffscreenCanvas: true,
		onabort: true,
		onafterprint: true,
		onanimationend: true,
		onanimationiteration: true,
		onanimationstart: true,
		onappinstalled: true,
		onauxclick: true,
		onbeforeinstallprompt: true,
		onbeforeprint: true,
		onbeforeunload: true,
		onblur: true,
		oncancel: true,
		oncanplay: true,
		oncanplaythrough: true,
		onchange: true,
		onclick: true,
		onclose: true,
		oncontextmenu: true,
		oncuechange: true,
		ondblclick: true,
		ondevicemotion: true,
		ondeviceorientation: true,
		ondeviceorientationabsolute: true,
		ondrag: true,
		ondragend: true,
		ondragenter: true,
		ondragleave: true,
		ondragover: true,
		ondragstart: true,
		ondrop: true,
		ondurationchange: true,
		onemptied: true,
		onended: true,
		onerror: true,
		onfocus: true,
		ongotpointercapture: true,
		onhashchange: true,
		oninput: true,
		oninvalid: true,
		onkeydown: true,
		onkeypress: true,
		onkeyup: true,
		onlanguagechange: true,
		onload: true,
		onloadeddata: true,
		onloadedmetadata: true,
		onloadstart: true,
		onlostpointercapture: true,
		onmessage: true,
		onmessageerror: true,
		onmousedown: true,
		onmouseenter: true,
		onmouseleave: true,
		onmousemove: true,
		onmouseout: true,
		onmouseover: true,
		onmouseup: true,
		onmousewheel: true,
		onoffline: true,
		ononline: true,
		onpagehide: true,
		onpageshow: true,
		onpause: true,
		onplay: true,
		onplaying: true,
		onpointercancel: true,
		onpointerdown: true,
		onpointerenter: true,
		onpointerleave: true,
		onpointermove: true,
		onpointerout: true,
		onpointerover: true,
		onpointerup: true,
		onpopstate: true,
		onprogress: true,
		onratechange: true,
		onrejectionhandled: true,
		onreset: true,
		onresize: true,
		onscroll: true,
		onsearch: true,
		onseeked: true,
		onseeking: true,
		onselect: true,
		onstalled: true,
		onstorage: true,
		onsubmit: true,
		onsuspend: true,
		ontimeupdate: true,
		ontoggle: true,
		ontransitionend: true,
		onunhandledrejection: true,
		onunload: true,
		onvolumechange: true,
		onwaiting: true,
		onwheel: true,
		open: false,
		openDatabase: false,
		opener: false,
		Option: false,
		origin: false,
		OscillatorNode: false,
		outerHeight: false,
		outerWidth: false,
		PageTransitionEvent: false,
		pageXOffset: false,
		pageYOffset: false,
		PannerNode: false,
		parent: false,
		Path2D: false,
		PaymentAddress: false,
		PaymentRequest: false,
		PaymentRequestUpdateEvent: false,
		PaymentResponse: false,
		performance: false,
		Performance: false,
		PerformanceEntry: false,
		PerformanceLongTaskTiming: false,
		PerformanceMark: false,
		PerformanceMeasure: false,
		PerformanceNavigation: false,
		PerformanceNavigationTiming: false,
		PerformanceObserver: false,
		PerformanceObserverEntryList: false,
		PerformancePaintTiming: false,
		PerformanceResourceTiming: false,
		PerformanceTiming: false,
		PeriodicWave: false,
		Permissions: false,
		PermissionStatus: false,
		personalbar: false,
		PhotoCapabilities: false,
		Plugin: false,
		PluginArray: false,
		PointerEvent: false,
		PopStateEvent: false,
		postMessage: false,
		Presentation: false,
		PresentationAvailability: false,
		PresentationConnection: false,
		PresentationConnectionAvailableEvent: false,
		PresentationConnectionCloseEvent: false,
		PresentationConnectionList: false,
		PresentationReceiver: false,
		PresentationRequest: false,
		print: false,
		ProcessingInstruction: false,
		ProgressEvent: false,
		PromiseRejectionEvent: false,
		prompt: false,
		PushManager: false,
		PushSubscription: false,
		PushSubscriptionOptions: false,
		queueMicrotask: false,
		RadioNodeList: false,
		Range: false,
		ReadableStream: false,
		registerProcessor: false,
		RemotePlayback: false,
		removeEventListener: false,
		Request: false,
		requestAnimationFrame: false,
		requestIdleCallback: false,
		resizeBy: false,
		ResizeObserver: false,
		ResizeObserverEntry: false,
		resizeTo: false,
		Response: false,
		RTCCertificate: false,
		RTCDataChannel: false,
		RTCDataChannelEvent: false,
		RTCDtlsTransport: false,
		RTCIceCandidate: false,
		RTCIceGatherer: false,
		RTCIceTransport: false,
		RTCPeerConnection: false,
		RTCPeerConnectionIceEvent: false,
		RTCRtpContributingSource: false,
		RTCRtpReceiver: false,
		RTCRtpSender: false,
		RTCSctpTransport: false,
		RTCSessionDescription: false,
		RTCStatsReport: false,
		RTCTrackEvent: false,
		screen: false,
		Screen: false,
		screenLeft: false,
		ScreenOrientation: false,
		screenTop: false,
		screenX: false,
		screenY: false,
		ScriptProcessorNode: false,
		scroll: false,
		scrollbars: false,
		scrollBy: false,
		scrollTo: false,
		scrollX: false,
		scrollY: false,
		SecurityPolicyViolationEvent: false,
		Selection: false,
		self: false,
		ServiceWorker: false,
		ServiceWorkerContainer: false,
		ServiceWorkerRegistration: false,
		sessionStorage: false,
		setInterval: false,
		setTimeout: false,
		ShadowRoot: false,
		SharedWorker: false,
		SourceBuffer: false,
		SourceBufferList: false,
		speechSynthesis: false,
		SpeechSynthesisEvent: false,
		SpeechSynthesisUtterance: false,
		StaticRange: false,
		status: false,
		statusbar: false,
		StereoPannerNode: false,
		stop: false,
		Storage: false,
		StorageEvent: false,
		StorageManager: false,
		styleMedia: false,
		StyleSheet: false,
		StyleSheetList: false,
		SubtleCrypto: false,
		SVGAElement: false,
		SVGAngle: false,
		SVGAnimatedAngle: false,
		SVGAnimatedBoolean: false,
		SVGAnimatedEnumeration: false,
		SVGAnimatedInteger: false,
		SVGAnimatedLength: false,
		SVGAnimatedLengthList: false,
		SVGAnimatedNumber: false,
		SVGAnimatedNumberList: false,
		SVGAnimatedPreserveAspectRatio: false,
		SVGAnimatedRect: false,
		SVGAnimatedString: false,
		SVGAnimatedTransformList: false,
		SVGAnimateElement: false,
		SVGAnimateMotionElement: false,
		SVGAnimateTransformElement: false,
		SVGAnimationElement: false,
		SVGCircleElement: false,
		SVGClipPathElement: false,
		SVGComponentTransferFunctionElement: false,
		SVGDefsElement: false,
		SVGDescElement: false,
		SVGDiscardElement: false,
		SVGElement: false,
		SVGEllipseElement: false,
		SVGFEBlendElement: false,
		SVGFEColorMatrixElement: false,
		SVGFEComponentTransferElement: false,
		SVGFECompositeElement: false,
		SVGFEConvolveMatrixElement: false,
		SVGFEDiffuseLightingElement: false,
		SVGFEDisplacementMapElement: false,
		SVGFEDistantLightElement: false,
		SVGFEDropShadowElement: false,
		SVGFEFloodElement: false,
		SVGFEFuncAElement: false,
		SVGFEFuncBElement: false,
		SVGFEFuncGElement: false,
		SVGFEFuncRElement: false,
		SVGFEGaussianBlurElement: false,
		SVGFEImageElement: false,
		SVGFEMergeElement: false,
		SVGFEMergeNodeElement: false,
		SVGFEMorphologyElement: false,
		SVGFEOffsetElement: false,
		SVGFEPointLightElement: false,
		SVGFESpecularLightingElement: false,
		SVGFESpotLightElement: false,
		SVGFETileElement: false,
		SVGFETurbulenceElement: false,
		SVGFilterElement: false,
		SVGForeignObjectElement: false,
		SVGGElement: false,
		SVGGeometryElement: false,
		SVGGradientElement: false,
		SVGGraphicsElement: false,
		SVGImageElement: false,
		SVGLength: false,
		SVGLengthList: false,
		SVGLinearGradientElement: false,
		SVGLineElement: false,
		SVGMarkerElement: false,
		SVGMaskElement: false,
		SVGMatrix: false,
		SVGMetadataElement: false,
		SVGMPathElement: false,
		SVGNumber: false,
		SVGNumberList: false,
		SVGPathElement: false,
		SVGPatternElement: false,
		SVGPoint: false,
		SVGPointList: false,
		SVGPolygonElement: false,
		SVGPolylineElement: false,
		SVGPreserveAspectRatio: false,
		SVGRadialGradientElement: false,
		SVGRect: false,
		SVGRectElement: false,
		SVGScriptElement: false,
		SVGSetElement: false,
		SVGStopElement: false,
		SVGStringList: false,
		SVGStyleElement: false,
		SVGSVGElement: false,
		SVGSwitchElement: false,
		SVGSymbolElement: false,
		SVGTextContentElement: false,
		SVGTextElement: false,
		SVGTextPathElement: false,
		SVGTextPositioningElement: false,
		SVGTitleElement: false,
		SVGTransform: false,
		SVGTransformList: false,
		SVGTSpanElement: false,
		SVGUnitTypes: false,
		SVGUseElement: false,
		SVGViewElement: false,
		TaskAttributionTiming: false,
		Text: false,
		TextDecoder: false,
		TextEncoder: false,
		TextEvent: false,
		TextMetrics: false,
		TextTrack: false,
		TextTrackCue: false,
		TextTrackCueList: false,
		TextTrackList: false,
		TimeRanges: false,
		toolbar: false,
		top: false,
		Touch: false,
		TouchEvent: false,
		TouchList: false,
		TrackEvent: false,
		TransitionEvent: false,
		TreeWalker: false,
		UIEvent: false,
		URL: false,
		URLSearchParams: false,
		ValidityState: false,
		visualViewport: false,
		VisualViewport: false,
		VTTCue: false,
		WaveShaperNode: false,
		WebAssembly: false,
		WebGL2RenderingContext: false,
		WebGLActiveInfo: false,
		WebGLBuffer: false,
		WebGLContextEvent: false,
		WebGLFramebuffer: false,
		WebGLProgram: false,
		WebGLQuery: false,
		WebGLRenderbuffer: false,
		WebGLRenderingContext: false,
		WebGLSampler: false,
		WebGLShader: false,
		WebGLShaderPrecisionFormat: false,
		WebGLSync: false,
		WebGLTexture: false,
		WebGLTransformFeedback: false,
		WebGLUniformLocation: false,
		WebGLVertexArrayObject: false,
		WebSocket: false,
		WheelEvent: false,
		window: false,
		Window: false,
		Worker: false,
		WritableStream: false,
		XMLDocument: false,
		XMLHttpRequest: false,
		XMLHttpRequestEventTarget: false,
		XMLHttpRequestUpload: false,
		XMLSerializer: false,
		XPathEvaluator: false,
		XPathExpression: false,
		XPathResult: false,
		XSLTProcessor: false
	};
	var worker = {
		addEventListener: false,
		applicationCache: false,
		atob: false,
		Blob: false,
		BroadcastChannel: false,
		btoa: false,
		Cache: false,
		caches: false,
		clearInterval: false,
		clearTimeout: false,
		close: true,
		console: false,
		fetch: false,
		FileReaderSync: false,
		FormData: false,
		Headers: false,
		IDBCursor: false,
		IDBCursorWithValue: false,
		IDBDatabase: false,
		IDBFactory: false,
		IDBIndex: false,
		IDBKeyRange: false,
		IDBObjectStore: false,
		IDBOpenDBRequest: false,
		IDBRequest: false,
		IDBTransaction: false,
		IDBVersionChangeEvent: false,
		ImageData: false,
		importScripts: true,
		indexedDB: false,
		location: false,
		MessageChannel: false,
		MessagePort: false,
		name: false,
		navigator: false,
		Notification: false,
		onclose: true,
		onconnect: true,
		onerror: true,
		onlanguagechange: true,
		onmessage: true,
		onoffline: true,
		ononline: true,
		onrejectionhandled: true,
		onunhandledrejection: true,
		performance: false,
		Performance: false,
		PerformanceEntry: false,
		PerformanceMark: false,
		PerformanceMeasure: false,
		PerformanceNavigation: false,
		PerformanceResourceTiming: false,
		PerformanceTiming: false,
		postMessage: true,
		"Promise": false,
		queueMicrotask: false,
		removeEventListener: false,
		Request: false,
		Response: false,
		self: true,
		ServiceWorkerRegistration: false,
		setInterval: false,
		setTimeout: false,
		TextDecoder: false,
		TextEncoder: false,
		URL: false,
		URLSearchParams: false,
		WebSocket: false,
		Worker: false,
		WorkerGlobalScope: false,
		XMLHttpRequest: false
	};
	var node$5 = {
		__dirname: false,
		__filename: false,
		Buffer: false,
		clearImmediate: false,
		clearInterval: false,
		clearTimeout: false,
		console: false,
		exports: true,
		global: false,
		"Intl": false,
		module: false,
		process: false,
		queueMicrotask: false,
		require: false,
		setImmediate: false,
		setInterval: false,
		setTimeout: false,
		TextDecoder: false,
		TextEncoder: false,
		URL: false,
		URLSearchParams: false
	};
	var commonjs = {
		exports: true,
		global: false,
		module: false,
		require: false
	};
	var amd = {
		define: false,
		require: false
	};
	var mocha = {
		after: false,
		afterEach: false,
		before: false,
		beforeEach: false,
		context: false,
		describe: false,
		it: false,
		mocha: false,
		run: false,
		setup: false,
		specify: false,
		suite: false,
		suiteSetup: false,
		suiteTeardown: false,
		teardown: false,
		test: false,
		xcontext: false,
		xdescribe: false,
		xit: false,
		xspecify: false
	};
	var jasmine = {
		afterAll: false,
		afterEach: false,
		beforeAll: false,
		beforeEach: false,
		describe: false,
		expect: false,
		fail: false,
		fdescribe: false,
		fit: false,
		it: false,
		jasmine: false,
		pending: false,
		runs: false,
		spyOn: false,
		spyOnProperty: false,
		waits: false,
		waitsFor: false,
		xdescribe: false,
		xit: false
	};
	var jest = {
		afterAll: false,
		afterEach: false,
		beforeAll: false,
		beforeEach: false,
		describe: false,
		expect: false,
		fdescribe: false,
		fit: false,
		it: false,
		jest: false,
		pit: false,
		require: false,
		test: false,
		xdescribe: false,
		xit: false,
		xtest: false
	};
	var qunit = {
		asyncTest: false,
		deepEqual: false,
		equal: false,
		expect: false,
		module: false,
		notDeepEqual: false,
		notEqual: false,
		notOk: false,
		notPropEqual: false,
		notStrictEqual: false,
		ok: false,
		propEqual: false,
		QUnit: false,
		raises: false,
		start: false,
		stop: false,
		strictEqual: false,
		test: false,
		throws: false
	};
	var phantomjs = {
		console: true,
		exports: true,
		phantom: true,
		require: true,
		WebPage: true
	};
	var couch = {
		emit: false,
		exports: false,
		getRow: false,
		log: false,
		module: false,
		provides: false,
		require: false,
		respond: false,
		send: false,
		start: false,
		sum: false
	};
	var rhino = {
		defineClass: false,
		deserialize: false,
		gc: false,
		help: false,
		importClass: false,
		importPackage: false,
		java: false,
		load: false,
		loadClass: false,
		Packages: false,
		print: false,
		quit: false,
		readFile: false,
		readUrl: false,
		runCommand: false,
		seal: false,
		serialize: false,
		spawn: false,
		sync: false,
		toint32: false,
		version: false
	};
	var nashorn = {
		__DIR__: false,
		__FILE__: false,
		__LINE__: false,
		com: false,
		edu: false,
		exit: false,
		java: false,
		Java: false,
		javafx: false,
		JavaImporter: false,
		javax: false,
		JSAdapter: false,
		load: false,
		loadWithNewGlobal: false,
		org: false,
		Packages: false,
		print: false,
		quit: false
	};
	var wsh = {
		ActiveXObject: true,
		Enumerator: true,
		GetObject: true,
		ScriptEngine: true,
		ScriptEngineBuildVersion: true,
		ScriptEngineMajorVersion: true,
		ScriptEngineMinorVersion: true,
		VBArray: true,
		WScript: true,
		WSH: true,
		XDomainRequest: true
	};
	var jquery = {
		$: false,
		jQuery: false
	};
	var yui = {
		YAHOO: false,
		YAHOO_config: false,
		YUI: false,
		YUI_config: false
	};
	var shelljs = {
		cat: false,
		cd: false,
		chmod: false,
		config: false,
		cp: false,
		dirs: false,
		echo: false,
		env: false,
		error: false,
		exec: false,
		exit: false,
		find: false,
		grep: false,
		ln: false,
		ls: false,
		mkdir: false,
		mv: false,
		popd: false,
		pushd: false,
		pwd: false,
		rm: false,
		sed: false,
		set: false,
		target: false,
		tempdir: false,
		test: false,
		touch: false,
		which: false
	};
	var prototypejs = {
		$: false,
		$$: false,
		$A: false,
		$break: false,
		$continue: false,
		$F: false,
		$H: false,
		$R: false,
		$w: false,
		Abstract: false,
		Ajax: false,
		Autocompleter: false,
		Builder: false,
		Class: false,
		Control: false,
		Draggable: false,
		Draggables: false,
		Droppables: false,
		Effect: false,
		Element: false,
		Enumerable: false,
		Event: false,
		Field: false,
		Form: false,
		Hash: false,
		Insertion: false,
		ObjectRange: false,
		PeriodicalExecuter: false,
		Position: false,
		Prototype: false,
		Scriptaculous: false,
		Selector: false,
		Sortable: false,
		SortableObserver: false,
		Sound: false,
		Template: false,
		Toggle: false,
		Try: false
	};
	var meteor = {
		_: false,
		$: false,
		Accounts: false,
		AccountsClient: false,
		AccountsCommon: false,
		AccountsServer: false,
		App: false,
		Assets: false,
		Blaze: false,
		check: false,
		Cordova: false,
		DDP: false,
		DDPRateLimiter: false,
		DDPServer: false,
		Deps: false,
		EJSON: false,
		Email: false,
		HTTP: false,
		Log: false,
		Match: false,
		Meteor: false,
		Mongo: false,
		MongoInternals: false,
		Npm: false,
		Package: false,
		Plugin: false,
		process: false,
		Random: false,
		ReactiveDict: false,
		ReactiveVar: false,
		Router: false,
		ServiceConfiguration: false,
		Session: false,
		share: false,
		Spacebars: false,
		Template: false,
		Tinytest: false,
		Tracker: false,
		UI: false,
		Utils: false,
		WebApp: false,
		WebAppInternals: false
	};
	var mongo = {
		_isWindows: false,
		_rand: false,
		BulkWriteResult: false,
		cat: false,
		cd: false,
		connect: false,
		db: false,
		getHostName: false,
		getMemInfo: false,
		hostname: false,
		ISODate: false,
		listFiles: false,
		load: false,
		ls: false,
		md5sumFile: false,
		mkdir: false,
		Mongo: false,
		NumberInt: false,
		NumberLong: false,
		ObjectId: false,
		PlanCache: false,
		print: false,
		printjson: false,
		pwd: false,
		quit: false,
		removeFile: false,
		rs: false,
		sh: false,
		UUID: false,
		version: false,
		WriteResult: false
	};
	var applescript = {
		$: false,
		Application: false,
		Automation: false,
		console: false,
		delay: false,
		Library: false,
		ObjC: false,
		ObjectSpecifier: false,
		Path: false,
		Progress: false,
		Ref: false
	};
	var serviceworker = {
		addEventListener: false,
		applicationCache: false,
		atob: false,
		Blob: false,
		BroadcastChannel: false,
		btoa: false,
		Cache: false,
		caches: false,
		CacheStorage: false,
		clearInterval: false,
		clearTimeout: false,
		Client: false,
		clients: false,
		Clients: false,
		close: true,
		console: false,
		ExtendableEvent: false,
		ExtendableMessageEvent: false,
		fetch: false,
		FetchEvent: false,
		FileReaderSync: false,
		FormData: false,
		Headers: false,
		IDBCursor: false,
		IDBCursorWithValue: false,
		IDBDatabase: false,
		IDBFactory: false,
		IDBIndex: false,
		IDBKeyRange: false,
		IDBObjectStore: false,
		IDBOpenDBRequest: false,
		IDBRequest: false,
		IDBTransaction: false,
		IDBVersionChangeEvent: false,
		ImageData: false,
		importScripts: false,
		indexedDB: false,
		location: false,
		MessageChannel: false,
		MessagePort: false,
		name: false,
		navigator: false,
		Notification: false,
		onclose: true,
		onconnect: true,
		onerror: true,
		onfetch: true,
		oninstall: true,
		onlanguagechange: true,
		onmessage: true,
		onmessageerror: true,
		onnotificationclick: true,
		onnotificationclose: true,
		onoffline: true,
		ononline: true,
		onpush: true,
		onpushsubscriptionchange: true,
		onrejectionhandled: true,
		onsync: true,
		onunhandledrejection: true,
		performance: false,
		Performance: false,
		PerformanceEntry: false,
		PerformanceMark: false,
		PerformanceMeasure: false,
		PerformanceNavigation: false,
		PerformanceResourceTiming: false,
		PerformanceTiming: false,
		postMessage: true,
		"Promise": false,
		queueMicrotask: false,
		registration: false,
		removeEventListener: false,
		Request: false,
		Response: false,
		self: false,
		ServiceWorker: false,
		ServiceWorkerContainer: false,
		ServiceWorkerGlobalScope: false,
		ServiceWorkerMessageEvent: false,
		ServiceWorkerRegistration: false,
		setInterval: false,
		setTimeout: false,
		skipWaiting: false,
		TextDecoder: false,
		TextEncoder: false,
		URL: false,
		URLSearchParams: false,
		WebSocket: false,
		WindowClient: false,
		Worker: false,
		WorkerGlobalScope: false,
		XMLHttpRequest: false
	};
	var atomtest = {
		advanceClock: false,
		fakeClearInterval: false,
		fakeClearTimeout: false,
		fakeSetInterval: false,
		fakeSetTimeout: false,
		resetTimeouts: false,
		waitsForPromise: false
	};
	var embertest = {
		andThen: false,
		click: false,
		currentPath: false,
		currentRouteName: false,
		currentURL: false,
		fillIn: false,
		find: false,
		findAll: false,
		findWithAssert: false,
		keyEvent: false,
		pauseTest: false,
		resumeTest: false,
		triggerEvent: false,
		visit: false,
		wait: false
	};
	var protractor = {
		$: false,
		$$: false,
		browser: false,
		by: false,
		By: false,
		DartObject: false,
		element: false,
		protractor: false
	};
	var webextensions = {
		browser: false,
		chrome: false,
		opr: false
	};
	var greasemonkey = {
		cloneInto: false,
		createObjectIn: false,
		exportFunction: false,
		GM: false,
		GM_addStyle: false,
		GM_deleteValue: false,
		GM_getResourceText: false,
		GM_getResourceURL: false,
		GM_getValue: false,
		GM_info: false,
		GM_listValues: false,
		GM_log: false,
		GM_openInTab: false,
		GM_registerMenuCommand: false,
		GM_setClipboard: false,
		GM_setValue: false,
		GM_xmlhttpRequest: false,
		unsafeWindow: false
	};
	var devtools = {
		$: false,
		$_: false,
		$$: false,
		$0: false,
		$1: false,
		$2: false,
		$3: false,
		$4: false,
		$x: false,
		chrome: false,
		clear: false,
		copy: false,
		debug: false,
		dir: false,
		dirxml: false,
		getEventListeners: false,
		inspect: false,
		keys: false,
		monitor: false,
		monitorEvents: false,
		profile: false,
		profileEnd: false,
		queryObjects: false,
		table: false,
		undebug: false,
		unmonitor: false,
		unmonitorEvents: false,
		values: false
	};
	var require$$0$5 = {
		builtin: builtin,
		es5: es5,
		es2015: es2015,
		es2017: es2017,
		browser: browser,
		worker: worker,
		node: node$5,
		commonjs: commonjs,
		amd: amd,
		mocha: mocha,
		jasmine: jasmine,
		jest: jest,
		qunit: qunit,
		phantomjs: phantomjs,
		couch: couch,
		rhino: rhino,
		nashorn: nashorn,
		wsh: wsh,
		jquery: jquery,
		yui: yui,
		shelljs: shelljs,
		prototypejs: prototypejs,
		meteor: meteor,
		mongo: mongo,
		applescript: applescript,
		serviceworker: serviceworker,
		atomtest: atomtest,
		embertest: embertest,
		protractor: protractor,
		"shared-node-browser": {
		clearInterval: false,
		clearTimeout: false,
		console: false,
		setInterval: false,
		setTimeout: false,
		URL: false,
		URLSearchParams: false
	},
		webextensions: webextensions,
		greasemonkey: greasemonkey,
		devtools: devtools
	};

	var globals$1 = require$$0$5;

	var cache$1 = {};

	Object.defineProperty(cache$1, "__esModule", {
	  value: true
	});
	cache$1.clear = clear$1;
	cache$1.clearPath = clearPath;
	cache$1.clearScope = clearScope;
	cache$1.scope = cache$1.path = void 0;
	let path$1 = new WeakMap();
	cache$1.path = path$1;
	let scope = new WeakMap();
	cache$1.scope = scope;

	function clear$1() {
	  clearPath();
	  clearScope();
	}

	function clearPath() {
	  cache$1.path = path$1 = new WeakMap();
	}

	function clearScope() {
	  cache$1.scope = scope = new WeakMap();
	}

	Object.defineProperty(scope$1, "__esModule", {
	  value: true
	});
	scope$1.default = void 0;

	var _renamer = renamer;

	var _index$6 = lib$t;

	var _binding = binding;

	var _globals = globals$1;

	var _t$F = lib$s;

	var _cache$4 = cache$1;

	const {
	  NOT_LOCAL_BINDING: NOT_LOCAL_BINDING$1,
	  callExpression: callExpression$9,
	  cloneNode: cloneNode$e,
	  getBindingIdentifiers: getBindingIdentifiers$1,
	  identifier: identifier$d,
	  isArrayExpression: isArrayExpression$1,
	  isBinary: isBinary$2,
	  isClass,
	  isClassBody,
	  isClassDeclaration: isClassDeclaration$2,
	  isExportAllDeclaration,
	  isExportDefaultDeclaration: isExportDefaultDeclaration$2,
	  isExportNamedDeclaration: isExportNamedDeclaration$1,
	  isFunctionDeclaration,
	  isIdentifier: isIdentifier$9,
	  isImportDeclaration,
	  isLiteral: isLiteral$4,
	  isMethod,
	  isModuleDeclaration,
	  isModuleSpecifier,
	  isObjectExpression: isObjectExpression$1,
	  isProperty,
	  isPureish,
	  isSuper,
	  isTaggedTemplateExpression: isTaggedTemplateExpression$1,
	  isTemplateLiteral: isTemplateLiteral$1,
	  isThisExpression,
	  isUnaryExpression,
	  isVariableDeclaration: isVariableDeclaration$1,
	  matchesPattern: matchesPattern$1,
	  memberExpression: memberExpression$7,
	  numericLiteral: numericLiteral$7,
	  toIdentifier,
	  unaryExpression: unaryExpression$6,
	  variableDeclaration: variableDeclaration$5,
	  variableDeclarator: variableDeclarator$5
	} = _t$F;

	function gatherNodeParts(node, parts) {
	  switch (node == null ? void 0 : node.type) {
	    default:
	      if (isModuleDeclaration(node)) {
	        if ((isExportAllDeclaration(node) || isExportNamedDeclaration$1(node) || isImportDeclaration(node)) && node.source) {
	          gatherNodeParts(node.source, parts);
	        } else if ((isExportNamedDeclaration$1(node) || isImportDeclaration(node)) && node.specifiers && node.specifiers.length) {
	          for (const e of node.specifiers) gatherNodeParts(e, parts);
	        } else if ((isExportDefaultDeclaration$2(node) || isExportNamedDeclaration$1(node)) && node.declaration) {
	          gatherNodeParts(node.declaration, parts);
	        }
	      } else if (isModuleSpecifier(node)) {
	        gatherNodeParts(node.local, parts);
	      } else if (isLiteral$4(node)) {
	        parts.push(node.value);
	      }

	      break;

	    case "MemberExpression":
	    case "OptionalMemberExpression":
	    case "JSXMemberExpression":
	      gatherNodeParts(node.object, parts);
	      gatherNodeParts(node.property, parts);
	      break;

	    case "Identifier":
	    case "JSXIdentifier":
	      parts.push(node.name);
	      break;

	    case "CallExpression":
	    case "OptionalCallExpression":
	    case "NewExpression":
	      gatherNodeParts(node.callee, parts);
	      break;

	    case "ObjectExpression":
	    case "ObjectPattern":
	      for (const e of node.properties) {
	        gatherNodeParts(e, parts);
	      }

	      break;

	    case "SpreadElement":
	    case "RestElement":
	      gatherNodeParts(node.argument, parts);
	      break;

	    case "ObjectProperty":
	    case "ObjectMethod":
	    case "ClassProperty":
	    case "ClassMethod":
	    case "ClassPrivateProperty":
	    case "ClassPrivateMethod":
	      gatherNodeParts(node.key, parts);
	      break;

	    case "ThisExpression":
	      parts.push("this");
	      break;

	    case "Super":
	      parts.push("super");
	      break;

	    case "Import":
	      parts.push("import");
	      break;

	    case "DoExpression":
	      parts.push("do");
	      break;

	    case "YieldExpression":
	      parts.push("yield");
	      gatherNodeParts(node.argument, parts);
	      break;

	    case "AwaitExpression":
	      parts.push("await");
	      gatherNodeParts(node.argument, parts);
	      break;

	    case "AssignmentExpression":
	      gatherNodeParts(node.left, parts);
	      break;

	    case "VariableDeclarator":
	      gatherNodeParts(node.id, parts);
	      break;

	    case "FunctionExpression":
	    case "FunctionDeclaration":
	    case "ClassExpression":
	    case "ClassDeclaration":
	      gatherNodeParts(node.id, parts);
	      break;

	    case "PrivateName":
	      gatherNodeParts(node.id, parts);
	      break;

	    case "ParenthesizedExpression":
	      gatherNodeParts(node.expression, parts);
	      break;

	    case "UnaryExpression":
	    case "UpdateExpression":
	      gatherNodeParts(node.argument, parts);
	      break;

	    case "MetaProperty":
	      gatherNodeParts(node.meta, parts);
	      gatherNodeParts(node.property, parts);
	      break;

	    case "JSXElement":
	      gatherNodeParts(node.openingElement, parts);
	      break;

	    case "JSXOpeningElement":
	      parts.push(node.name);
	      break;

	    case "JSXFragment":
	      gatherNodeParts(node.openingFragment, parts);
	      break;

	    case "JSXOpeningFragment":
	      parts.push("Fragment");
	      break;

	    case "JSXNamespacedName":
	      gatherNodeParts(node.namespace, parts);
	      gatherNodeParts(node.name, parts);
	      break;
	  }
	}

	const collectorVisitor = {
	  ForStatement(path) {
	    const declar = path.get("init");

	    if (declar.isVar()) {
	      const {
	        scope
	      } = path;
	      const parentScope = scope.getFunctionParent() || scope.getProgramParent();
	      parentScope.registerBinding("var", declar);
	    }
	  },

	  Declaration(path) {
	    if (path.isBlockScoped()) return;
	    if (path.isImportDeclaration()) return;
	    if (path.isExportDeclaration()) return;
	    const parent = path.scope.getFunctionParent() || path.scope.getProgramParent();
	    parent.registerDeclaration(path);
	  },

	  ImportDeclaration(path) {
	    const parent = path.scope.getBlockParent();
	    parent.registerDeclaration(path);
	  },

	  ReferencedIdentifier(path, state) {
	    state.references.push(path);
	  },

	  ForXStatement(path, state) {
	    const left = path.get("left");

	    if (left.isPattern() || left.isIdentifier()) {
	      state.constantViolations.push(path);
	    } else if (left.isVar()) {
	      const {
	        scope
	      } = path;
	      const parentScope = scope.getFunctionParent() || scope.getProgramParent();
	      parentScope.registerBinding("var", left);
	    }
	  },

	  ExportDeclaration: {
	    exit(path) {
	      const {
	        node,
	        scope
	      } = path;
	      if (isExportAllDeclaration(node)) return;
	      const declar = node.declaration;

	      if (isClassDeclaration$2(declar) || isFunctionDeclaration(declar)) {
	        const id = declar.id;
	        if (!id) return;
	        const binding = scope.getBinding(id.name);
	        binding == null ? void 0 : binding.reference(path);
	      } else if (isVariableDeclaration$1(declar)) {
	        for (const decl of declar.declarations) {
	          for (const name of Object.keys(getBindingIdentifiers$1(decl))) {
	            const binding = scope.getBinding(name);
	            binding == null ? void 0 : binding.reference(path);
	          }
	        }
	      }
	    }

	  },

	  LabeledStatement(path) {
	    path.scope.getBlockParent().registerDeclaration(path);
	  },

	  AssignmentExpression(path, state) {
	    state.assignments.push(path);
	  },

	  UpdateExpression(path, state) {
	    state.constantViolations.push(path);
	  },

	  UnaryExpression(path, state) {
	    if (path.node.operator === "delete") {
	      state.constantViolations.push(path);
	    }
	  },

	  BlockScoped(path) {
	    let scope = path.scope;
	    if (scope.path === path) scope = scope.parent;
	    const parent = scope.getBlockParent();
	    parent.registerDeclaration(path);

	    if (path.isClassDeclaration() && path.node.id) {
	      const id = path.node.id;
	      const name = id.name;
	      path.scope.bindings[name] = path.scope.parent.getBinding(name);
	    }
	  },

	  CatchClause(path) {
	    path.scope.registerBinding("let", path);
	  },

	  Function(path) {
	    if (path.isFunctionExpression() && path.has("id") && !path.get("id").node[NOT_LOCAL_BINDING$1]) {
	      path.scope.registerBinding("local", path.get("id"), path);
	    }

	    const params = path.get("params");

	    for (const param of params) {
	      path.scope.registerBinding("param", param);
	    }
	  },

	  ClassExpression(path) {
	    if (path.has("id") && !path.get("id").node[NOT_LOCAL_BINDING$1]) {
	      path.scope.registerBinding("local", path);
	    }
	  }

	};
	let uid = 0;

	class Scope {
	  constructor(path) {
	    this.uid = void 0;
	    this.path = void 0;
	    this.block = void 0;
	    this.labels = void 0;
	    this.inited = void 0;
	    this.bindings = void 0;
	    this.references = void 0;
	    this.globals = void 0;
	    this.uids = void 0;
	    this.data = void 0;
	    this.crawling = void 0;
	    const {
	      node
	    } = path;

	    const cached = _cache$4.scope.get(node);

	    if ((cached == null ? void 0 : cached.path) === path) {
	      return cached;
	    }

	    _cache$4.scope.set(node, this);

	    this.uid = uid++;
	    this.block = node;
	    this.path = path;
	    this.labels = new Map();
	    this.inited = false;
	  }

	  get parent() {
	    var _parent;

	    let parent,
	        path = this.path;

	    do {
	      const isKey = path.key === "key";
	      path = path.parentPath;
	      if (isKey && path.isMethod()) path = path.parentPath;
	      if (path && path.isScope()) parent = path;
	    } while (path && !parent);

	    return (_parent = parent) == null ? void 0 : _parent.scope;
	  }

	  get parentBlock() {
	    return this.path.parent;
	  }

	  get hub() {
	    return this.path.hub;
	  }

	  traverse(node, opts, state) {
	    (0, _index$6.default)(node, opts, this, state, this.path);
	  }

	  generateDeclaredUidIdentifier(name) {
	    const id = this.generateUidIdentifier(name);
	    this.push({
	      id
	    });
	    return cloneNode$e(id);
	  }

	  generateUidIdentifier(name) {
	    return identifier$d(this.generateUid(name));
	  }

	  generateUid(name = "temp") {
	    name = toIdentifier(name).replace(/^_+/, "").replace(/[0-9]+$/g, "");
	    let uid;
	    let i = 1;

	    do {
	      uid = this._generateUid(name, i);
	      i++;
	    } while (this.hasLabel(uid) || this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));

	    const program = this.getProgramParent();
	    program.references[uid] = true;
	    program.uids[uid] = true;
	    return uid;
	  }

	  _generateUid(name, i) {
	    let id = name;
	    if (i > 1) id += i;
	    return `_${id}`;
	  }

	  generateUidBasedOnNode(node, defaultName) {
	    const parts = [];
	    gatherNodeParts(node, parts);
	    let id = parts.join("$");
	    id = id.replace(/^_/, "") || defaultName || "ref";
	    return this.generateUid(id.slice(0, 20));
	  }

	  generateUidIdentifierBasedOnNode(node, defaultName) {
	    return identifier$d(this.generateUidBasedOnNode(node, defaultName));
	  }

	  isStatic(node) {
	    if (isThisExpression(node) || isSuper(node)) {
	      return true;
	    }

	    if (isIdentifier$9(node)) {
	      const binding = this.getBinding(node.name);

	      if (binding) {
	        return binding.constant;
	      } else {
	        return this.hasBinding(node.name);
	      }
	    }

	    return false;
	  }

	  maybeGenerateMemoised(node, dontPush) {
	    if (this.isStatic(node)) {
	      return null;
	    } else {
	      const id = this.generateUidIdentifierBasedOnNode(node);

	      if (!dontPush) {
	        this.push({
	          id
	        });
	        return cloneNode$e(id);
	      }

	      return id;
	    }
	  }

	  checkBlockScopedCollisions(local, kind, name, id) {
	    if (kind === "param") return;
	    if (local.kind === "local") return;
	    const duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module" || local.kind === "param" && (kind === "let" || kind === "const");

	    if (duplicate) {
	      throw this.hub.buildError(id, `Duplicate declaration "${name}"`, TypeError);
	    }
	  }

	  rename(oldName, newName, block) {
	    const binding = this.getBinding(oldName);

	    if (binding) {
	      newName = newName || this.generateUidIdentifier(oldName).name;
	      return new _renamer.default(binding, oldName, newName).rename(block);
	    }
	  }

	  _renameFromMap(map, oldName, newName, value) {
	    if (map[oldName]) {
	      map[newName] = value;
	      map[oldName] = null;
	    }
	  }

	  dump() {
	    const sep = "-".repeat(60);
	    console.log(sep);
	    let scope = this;

	    do {
	      console.log("#", scope.block.type);

	      for (const name of Object.keys(scope.bindings)) {
	        const binding = scope.bindings[name];
	        console.log(" -", name, {
	          constant: binding.constant,
	          references: binding.references,
	          violations: binding.constantViolations.length,
	          kind: binding.kind
	        });
	      }
	    } while (scope = scope.parent);

	    console.log(sep);
	  }

	  toArray(node, i, arrayLikeIsIterable) {
	    if (isIdentifier$9(node)) {
	      const binding = this.getBinding(node.name);

	      if (binding != null && binding.constant && binding.path.isGenericType("Array")) {
	        return node;
	      }
	    }

	    if (isArrayExpression$1(node)) {
	      return node;
	    }

	    if (isIdentifier$9(node, {
	      name: "arguments"
	    })) {
	      return callExpression$9(memberExpression$7(memberExpression$7(memberExpression$7(identifier$d("Array"), identifier$d("prototype")), identifier$d("slice")), identifier$d("call")), [node]);
	    }

	    let helperName;
	    const args = [node];

	    if (i === true) {
	      helperName = "toConsumableArray";
	    } else if (i) {
	      args.push(numericLiteral$7(i));
	      helperName = "slicedToArray";
	    } else {
	      helperName = "toArray";
	    }

	    if (arrayLikeIsIterable) {
	      args.unshift(this.hub.addHelper(helperName));
	      helperName = "maybeArrayLike";
	    }

	    return callExpression$9(this.hub.addHelper(helperName), args);
	  }

	  hasLabel(name) {
	    return !!this.getLabel(name);
	  }

	  getLabel(name) {
	    return this.labels.get(name);
	  }

	  registerLabel(path) {
	    this.labels.set(path.node.label.name, path);
	  }

	  registerDeclaration(path) {
	    if (path.isLabeledStatement()) {
	      this.registerLabel(path);
	    } else if (path.isFunctionDeclaration()) {
	      this.registerBinding("hoisted", path.get("id"), path);
	    } else if (path.isVariableDeclaration()) {
	      const declarations = path.get("declarations");

	      for (const declar of declarations) {
	        this.registerBinding(path.node.kind, declar);
	      }
	    } else if (path.isClassDeclaration()) {
	      this.registerBinding("let", path);
	    } else if (path.isImportDeclaration()) {
	      const specifiers = path.get("specifiers");

	      for (const specifier of specifiers) {
	        this.registerBinding("module", specifier);
	      }
	    } else if (path.isExportDeclaration()) {
	      const declar = path.get("declaration");

	      if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) {
	        this.registerDeclaration(declar);
	      }
	    } else {
	      this.registerBinding("unknown", path);
	    }
	  }

	  buildUndefinedNode() {
	    return unaryExpression$6("void", numericLiteral$7(0), true);
	  }

	  registerConstantViolation(path) {
	    const ids = path.getBindingIdentifiers();

	    for (const name of Object.keys(ids)) {
	      const binding = this.getBinding(name);
	      if (binding) binding.reassign(path);
	    }
	  }

	  registerBinding(kind, path, bindingPath = path) {
	    if (!kind) throw new ReferenceError("no `kind`");

	    if (path.isVariableDeclaration()) {
	      const declarators = path.get("declarations");

	      for (const declar of declarators) {
	        this.registerBinding(kind, declar);
	      }

	      return;
	    }

	    const parent = this.getProgramParent();
	    const ids = path.getOuterBindingIdentifiers(true);

	    for (const name of Object.keys(ids)) {
	      parent.references[name] = true;

	      for (const id of ids[name]) {
	        const local = this.getOwnBinding(name);

	        if (local) {
	          if (local.identifier === id) continue;
	          this.checkBlockScopedCollisions(local, kind, name, id);
	        }

	        if (local) {
	          this.registerConstantViolation(bindingPath);
	        } else {
	          this.bindings[name] = new _binding.default({
	            identifier: id,
	            scope: this,
	            path: bindingPath,
	            kind: kind
	          });
	        }
	      }
	    }
	  }

	  addGlobal(node) {
	    this.globals[node.name] = node;
	  }

	  hasUid(name) {
	    let scope = this;

	    do {
	      if (scope.uids[name]) return true;
	    } while (scope = scope.parent);

	    return false;
	  }

	  hasGlobal(name) {
	    let scope = this;

	    do {
	      if (scope.globals[name]) return true;
	    } while (scope = scope.parent);

	    return false;
	  }

	  hasReference(name) {
	    return !!this.getProgramParent().references[name];
	  }

	  isPure(node, constantsOnly) {
	    if (isIdentifier$9(node)) {
	      const binding = this.getBinding(node.name);
	      if (!binding) return false;
	      if (constantsOnly) return binding.constant;
	      return true;
	    } else if (isClass(node)) {
	      if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {
	        return false;
	      }

	      return this.isPure(node.body, constantsOnly);
	    } else if (isClassBody(node)) {
	      for (const method of node.body) {
	        if (!this.isPure(method, constantsOnly)) return false;
	      }

	      return true;
	    } else if (isBinary$2(node)) {
	      return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
	    } else if (isArrayExpression$1(node)) {
	      for (const elem of node.elements) {
	        if (!this.isPure(elem, constantsOnly)) return false;
	      }

	      return true;
	    } else if (isObjectExpression$1(node)) {
	      for (const prop of node.properties) {
	        if (!this.isPure(prop, constantsOnly)) return false;
	      }

	      return true;
	    } else if (isMethod(node)) {
	      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
	      if (node.kind === "get" || node.kind === "set") return false;
	      return true;
	    } else if (isProperty(node)) {
	      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
	      return this.isPure(node.value, constantsOnly);
	    } else if (isUnaryExpression(node)) {
	      return this.isPure(node.argument, constantsOnly);
	    } else if (isTaggedTemplateExpression$1(node)) {
	      return matchesPattern$1(node.tag, "String.raw") && !this.hasBinding("String", true) && this.isPure(node.quasi, constantsOnly);
	    } else if (isTemplateLiteral$1(node)) {
	      for (const expression of node.expressions) {
	        if (!this.isPure(expression, constantsOnly)) return false;
	      }

	      return true;
	    } else {
	      return isPureish(node);
	    }
	  }

	  setData(key, val) {
	    return this.data[key] = val;
	  }

	  getData(key) {
	    let scope = this;

	    do {
	      const data = scope.data[key];
	      if (data != null) return data;
	    } while (scope = scope.parent);
	  }

	  removeData(key) {
	    let scope = this;

	    do {
	      const data = scope.data[key];
	      if (data != null) scope.data[key] = null;
	    } while (scope = scope.parent);
	  }

	  init() {
	    if (!this.inited) {
	      this.inited = true;
	      this.crawl();
	    }
	  }

	  crawl() {
	    const path = this.path;
	    this.references = Object.create(null);
	    this.bindings = Object.create(null);
	    this.globals = Object.create(null);
	    this.uids = Object.create(null);
	    this.data = Object.create(null);
	    const programParent = this.getProgramParent();
	    if (programParent.crawling) return;
	    const state = {
	      references: [],
	      constantViolations: [],
	      assignments: []
	    };
	    this.crawling = true;

	    if (path.type !== "Program" && collectorVisitor._exploded) {
	      for (const visit of collectorVisitor.enter) {
	        visit(path, state);
	      }

	      const typeVisitors = collectorVisitor[path.type];

	      if (typeVisitors) {
	        for (const visit of typeVisitors.enter) {
	          visit(path, state);
	        }
	      }
	    }

	    path.traverse(collectorVisitor, state);
	    this.crawling = false;

	    for (const path of state.assignments) {
	      const ids = path.getBindingIdentifiers();

	      for (const name of Object.keys(ids)) {
	        if (path.scope.getBinding(name)) continue;
	        programParent.addGlobal(ids[name]);
	      }

	      path.scope.registerConstantViolation(path);
	    }

	    for (const ref of state.references) {
	      const binding = ref.scope.getBinding(ref.node.name);

	      if (binding) {
	        binding.reference(ref);
	      } else {
	        programParent.addGlobal(ref.node);
	      }
	    }

	    for (const path of state.constantViolations) {
	      path.scope.registerConstantViolation(path);
	    }
	  }

	  push(opts) {
	    let path = this.path;

	    if (!path.isBlockStatement() && !path.isProgram()) {
	      path = this.getBlockParent().path;
	    }

	    if (path.isSwitchStatement()) {
	      path = (this.getFunctionParent() || this.getProgramParent()).path;
	    }

	    if (path.isLoop() || path.isCatchClause() || path.isFunction()) {
	      path.ensureBlock();
	      path = path.get("body");
	    }

	    const unique = opts.unique;
	    const kind = opts.kind || "var";
	    const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;
	    const dataKey = `declaration:${kind}:${blockHoist}`;
	    let declarPath = !unique && path.getData(dataKey);

	    if (!declarPath) {
	      const declar = variableDeclaration$5(kind, []);
	      declar._blockHoist = blockHoist;
	      [declarPath] = path.unshiftContainer("body", [declar]);
	      if (!unique) path.setData(dataKey, declarPath);
	    }

	    const declarator = variableDeclarator$5(opts.id, opts.init);
	    declarPath.node.declarations.push(declarator);
	    this.registerBinding(kind, declarPath.get("declarations").pop());
	  }

	  getProgramParent() {
	    let scope = this;

	    do {
	      if (scope.path.isProgram()) {
	        return scope;
	      }
	    } while (scope = scope.parent);

	    throw new Error("Couldn't find a Program");
	  }

	  getFunctionParent() {
	    let scope = this;

	    do {
	      if (scope.path.isFunctionParent()) {
	        return scope;
	      }
	    } while (scope = scope.parent);

	    return null;
	  }

	  getBlockParent() {
	    let scope = this;

	    do {
	      if (scope.path.isBlockParent()) {
	        return scope;
	      }
	    } while (scope = scope.parent);

	    throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
	  }

	  getAllBindings() {
	    const ids = Object.create(null);
	    let scope = this;

	    do {
	      for (const key of Object.keys(scope.bindings)) {
	        if (key in ids === false) {
	          ids[key] = scope.bindings[key];
	        }
	      }

	      scope = scope.parent;
	    } while (scope);

	    return ids;
	  }

	  getAllBindingsOfKind(...kinds) {
	    const ids = Object.create(null);

	    for (const kind of kinds) {
	      let scope = this;

	      do {
	        for (const name of Object.keys(scope.bindings)) {
	          const binding = scope.bindings[name];
	          if (binding.kind === kind) ids[name] = binding;
	        }

	        scope = scope.parent;
	      } while (scope);
	    }

	    return ids;
	  }

	  bindingIdentifierEquals(name, node) {
	    return this.getBindingIdentifier(name) === node;
	  }

	  getBinding(name) {
	    let scope = this;
	    let previousPath;

	    do {
	      const binding = scope.getOwnBinding(name);

	      if (binding) {
	        var _previousPath;

	        if ((_previousPath = previousPath) != null && _previousPath.isPattern() && binding.kind !== "param") ; else {
	          return binding;
	        }
	      }

	      previousPath = scope.path;
	    } while (scope = scope.parent);
	  }

	  getOwnBinding(name) {
	    return this.bindings[name];
	  }

	  getBindingIdentifier(name) {
	    var _this$getBinding;

	    return (_this$getBinding = this.getBinding(name)) == null ? void 0 : _this$getBinding.identifier;
	  }

	  getOwnBindingIdentifier(name) {
	    const binding = this.bindings[name];
	    return binding == null ? void 0 : binding.identifier;
	  }

	  hasOwnBinding(name) {
	    return !!this.getOwnBinding(name);
	  }

	  hasBinding(name, noGlobals) {
	    if (!name) return false;
	    if (this.hasOwnBinding(name)) return true;
	    if (this.parentHasBinding(name, noGlobals)) return true;
	    if (this.hasUid(name)) return true;
	    if (!noGlobals && Scope.globals.includes(name)) return true;
	    if (!noGlobals && Scope.contextVariables.includes(name)) return true;
	    return false;
	  }

	  parentHasBinding(name, noGlobals) {
	    var _this$parent;

	    return (_this$parent = this.parent) == null ? void 0 : _this$parent.hasBinding(name, noGlobals);
	  }

	  moveBindingTo(name, scope) {
	    const info = this.getBinding(name);

	    if (info) {
	      info.scope.removeOwnBinding(name);
	      info.scope = scope;
	      scope.bindings[name] = info;
	    }
	  }

	  removeOwnBinding(name) {
	    delete this.bindings[name];
	  }

	  removeBinding(name) {
	    var _this$getBinding2;

	    (_this$getBinding2 = this.getBinding(name)) == null ? void 0 : _this$getBinding2.scope.removeOwnBinding(name);
	    let scope = this;

	    do {
	      if (scope.uids[name]) {
	        scope.uids[name] = false;
	      }
	    } while (scope = scope.parent);
	  }

	}

	scope$1.default = Scope;
	Scope.globals = Object.keys(_globals.builtin);
	Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];

	var lib$p = {};

	var sourceMap$2 = {};

	var sourceMap$1 = {};

	var sourceMapGenerator$1 = {};

	var base64Vlq$1 = {};

	var base64$3 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var intToCharMap$1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

	/**
	 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	 */
	base64$3.encode = function (number) {
	  if (0 <= number && number < intToCharMap$1.length) {
	    return intToCharMap$1[number];
	  }
	  throw new TypeError("Must be between 0 and 63: " + number);
	};

	/**
	 * Decode a single base 64 character code digit to an integer. Returns -1 on
	 * failure.
	 */
	base64$3.decode = function (charCode) {
	  var bigA = 65;     // 'A'
	  var bigZ = 90;     // 'Z'

	  var littleA = 97;  // 'a'
	  var littleZ = 122; // 'z'

	  var zero = 48;     // '0'
	  var nine = 57;     // '9'

	  var plus = 43;     // '+'
	  var slash = 47;    // '/'

	  var littleOffset = 26;
	  var numberOffset = 52;

	  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
	  if (bigA <= charCode && charCode <= bigZ) {
	    return (charCode - bigA);
	  }

	  // 26 - 51: abcdefghijklmnopqrstuvwxyz
	  if (littleA <= charCode && charCode <= littleZ) {
	    return (charCode - littleA + littleOffset);
	  }

	  // 52 - 61: 0123456789
	  if (zero <= charCode && charCode <= nine) {
	    return (charCode - zero + numberOffset);
	  }

	  // 62: +
	  if (charCode == plus) {
	    return 62;
	  }

	  // 63: /
	  if (charCode == slash) {
	    return 63;
	  }

	  // Invalid base64 digit.
	  return -1;
	};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	var base64$2 = base64$3;

	// A single base 64 digit can contain 6 bits of data. For the base 64 variable
	// length quantities we use in the source map spec, the first bit is the sign,
	// the next four bits are the actual value, and the 6th bit is the
	// continuation bit. The continuation bit tells us whether there are more
	// digits in this value following this digit.
	//
	//   Continuation
	//   |    Sign
	//   |    |
	//   V    V
	//   101011

	var VLQ_BASE_SHIFT$1 = 5;

	// binary: 100000
	var VLQ_BASE$1 = 1 << VLQ_BASE_SHIFT$1;

	// binary: 011111
	var VLQ_BASE_MASK$1 = VLQ_BASE$1 - 1;

	// binary: 100000
	var VLQ_CONTINUATION_BIT$1 = VLQ_BASE$1;

	/**
	 * Converts from a two-complement value to a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	 */
	function toVLQSigned$1(aValue) {
	  return aValue < 0
	    ? ((-aValue) << 1) + 1
	    : (aValue << 1) + 0;
	}

	/**
	 * Converts to a two-complement value from a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	 */
	function fromVLQSigned$1(aValue) {
	  var isNegative = (aValue & 1) === 1;
	  var shifted = aValue >> 1;
	  return isNegative
	    ? -shifted
	    : shifted;
	}

	/**
	 * Returns the base 64 VLQ encoded value.
	 */
	base64Vlq$1.encode = function base64VLQ_encode(aValue) {
	  var encoded = "";
	  var digit;

	  var vlq = toVLQSigned$1(aValue);

	  do {
	    digit = vlq & VLQ_BASE_MASK$1;
	    vlq >>>= VLQ_BASE_SHIFT$1;
	    if (vlq > 0) {
	      // There are still more digits in this value, so we must make sure the
	      // continuation bit is marked.
	      digit |= VLQ_CONTINUATION_BIT$1;
	    }
	    encoded += base64$2.encode(digit);
	  } while (vlq > 0);

	  return encoded;
	};

	/**
	 * Decodes the next base 64 VLQ value from the given string and returns the
	 * value and the rest of the string via the out parameter.
	 */
	base64Vlq$1.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	  var strLen = aStr.length;
	  var result = 0;
	  var shift = 0;
	  var continuation, digit;

	  do {
	    if (aIndex >= strLen) {
	      throw new Error("Expected more digits in base 64 VLQ value.");
	    }

	    digit = base64$2.decode(aStr.charCodeAt(aIndex++));
	    if (digit === -1) {
	      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	    }

	    continuation = !!(digit & VLQ_CONTINUATION_BIT$1);
	    digit &= VLQ_BASE_MASK$1;
	    result = result + (digit << shift);
	    shift += VLQ_BASE_SHIFT$1;
	  } while (continuation);

	  aOutParam.value = fromVLQSigned$1(result);
	  aOutParam.rest = aIndex;
	};

	var util$d = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	(function (exports) {
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	/**
	 * This is a helper function for getting values from parameter/options
	 * objects.
	 *
	 * @param args The object we are extracting values from
	 * @param name The name of the property we are getting.
	 * @param defaultValue An optional value to return if the property is missing
	 * from the object. If this is not specified and the property is missing, an
	 * error will be thrown.
	 */
	function getArg(aArgs, aName, aDefaultValue) {
	  if (aName in aArgs) {
	    return aArgs[aName];
	  } else if (arguments.length === 3) {
	    return aDefaultValue;
	  } else {
	    throw new Error('"' + aName + '" is a required argument.');
	  }
	}
	exports.getArg = getArg;

	var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	var dataUrlRegexp = /^data:.+\,.+$/;

	function urlParse(aUrl) {
	  var match = aUrl.match(urlRegexp);
	  if (!match) {
	    return null;
	  }
	  return {
	    scheme: match[1],
	    auth: match[2],
	    host: match[3],
	    port: match[4],
	    path: match[5]
	  };
	}
	exports.urlParse = urlParse;

	function urlGenerate(aParsedUrl) {
	  var url = '';
	  if (aParsedUrl.scheme) {
	    url += aParsedUrl.scheme + ':';
	  }
	  url += '//';
	  if (aParsedUrl.auth) {
	    url += aParsedUrl.auth + '@';
	  }
	  if (aParsedUrl.host) {
	    url += aParsedUrl.host;
	  }
	  if (aParsedUrl.port) {
	    url += ":" + aParsedUrl.port;
	  }
	  if (aParsedUrl.path) {
	    url += aParsedUrl.path;
	  }
	  return url;
	}
	exports.urlGenerate = urlGenerate;

	/**
	 * Normalizes a path, or the path portion of a URL:
	 *
	 * - Replaces consecutive slashes with one slash.
	 * - Removes unnecessary '.' parts.
	 * - Removes unnecessary '<dir>/..' parts.
	 *
	 * Based on code in the Node.js 'path' core module.
	 *
	 * @param aPath The path or url to normalize.
	 */
	function normalize(aPath) {
	  var path = aPath;
	  var url = urlParse(aPath);
	  if (url) {
	    if (!url.path) {
	      return aPath;
	    }
	    path = url.path;
	  }
	  var isAbsolute = exports.isAbsolute(path);

	  var parts = path.split(/\/+/);
	  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	    part = parts[i];
	    if (part === '.') {
	      parts.splice(i, 1);
	    } else if (part === '..') {
	      up++;
	    } else if (up > 0) {
	      if (part === '') {
	        // The first part is blank if the path is absolute. Trying to go
	        // above the root is a no-op. Therefore we can remove all '..' parts
	        // directly after the root.
	        parts.splice(i + 1, up);
	        up = 0;
	      } else {
	        parts.splice(i, 2);
	        up--;
	      }
	    }
	  }
	  path = parts.join('/');

	  if (path === '') {
	    path = isAbsolute ? '/' : '.';
	  }

	  if (url) {
	    url.path = path;
	    return urlGenerate(url);
	  }
	  return path;
	}
	exports.normalize = normalize;

	/**
	 * Joins two paths/URLs.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be joined with the root.
	 *
	 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	 *   first.
	 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	 *   is updated with the result and aRoot is returned. Otherwise the result
	 *   is returned.
	 *   - If aPath is absolute, the result is aPath.
	 *   - Otherwise the two paths are joined with a slash.
	 * - Joining for example 'http://' and 'www.example.com' is also supported.
	 */
	function join(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }
	  if (aPath === "") {
	    aPath = ".";
	  }
	  var aPathUrl = urlParse(aPath);
	  var aRootUrl = urlParse(aRoot);
	  if (aRootUrl) {
	    aRoot = aRootUrl.path || '/';
	  }

	  // `join(foo, '//www.example.org')`
	  if (aPathUrl && !aPathUrl.scheme) {
	    if (aRootUrl) {
	      aPathUrl.scheme = aRootUrl.scheme;
	    }
	    return urlGenerate(aPathUrl);
	  }

	  if (aPathUrl || aPath.match(dataUrlRegexp)) {
	    return aPath;
	  }

	  // `join('http://', 'www.example.com')`
	  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	    aRootUrl.host = aPath;
	    return urlGenerate(aRootUrl);
	  }

	  var joined = aPath.charAt(0) === '/'
	    ? aPath
	    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

	  if (aRootUrl) {
	    aRootUrl.path = joined;
	    return urlGenerate(aRootUrl);
	  }
	  return joined;
	}
	exports.join = join;

	exports.isAbsolute = function (aPath) {
	  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
	};

	/**
	 * Make a path relative to a URL or another path.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be made relative to aRoot.
	 */
	function relative(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }

	  aRoot = aRoot.replace(/\/$/, '');

	  // It is possible for the path to be above the root. In this case, simply
	  // checking whether the root is a prefix of the path won't work. Instead, we
	  // need to remove components from the root one by one, until either we find
	  // a prefix that fits, or we run out of components to remove.
	  var level = 0;
	  while (aPath.indexOf(aRoot + '/') !== 0) {
	    var index = aRoot.lastIndexOf("/");
	    if (index < 0) {
	      return aPath;
	    }

	    // If the only part of the root that is left is the scheme (i.e. http://,
	    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	    // have exhausted all components, so the path is not relative to the root.
	    aRoot = aRoot.slice(0, index);
	    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	      return aPath;
	    }

	    ++level;
	  }

	  // Make sure we add a "../" for each component we removed from the root.
	  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	}
	exports.relative = relative;

	var supportsNullProto = (function () {
	  var obj = Object.create(null);
	  return !('__proto__' in obj);
	}());

	function identity (s) {
	  return s;
	}

	/**
	 * Because behavior goes wacky when you set `__proto__` on objects, we
	 * have to prefix all the strings in our set with an arbitrary character.
	 *
	 * See https://github.com/mozilla/source-map/pull/31 and
	 * https://github.com/mozilla/source-map/issues/30
	 *
	 * @param String aStr
	 */
	function toSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return '$' + aStr;
	  }

	  return aStr;
	}
	exports.toSetString = supportsNullProto ? identity : toSetString;

	function fromSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return aStr.slice(1);
	  }

	  return aStr;
	}
	exports.fromSetString = supportsNullProto ? identity : fromSetString;

	function isProtoString(s) {
	  if (!s) {
	    return false;
	  }

	  var length = s.length;

	  if (length < 9 /* "__proto__".length */) {
	    return false;
	  }

	  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
	      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
	      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
	      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 9) !== 95  /* '_' */) {
	    return false;
	  }

	  for (var i = length - 10; i >= 0; i--) {
	    if (s.charCodeAt(i) !== 36 /* '$' */) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Comparator between two mappings where the original positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same original source/line/column, but different generated
	 * line and column the same. Useful when searching for a mapping with a
	 * stubbed out mapping.
	 */
	function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	  var cmp = mappingA.source - mappingB.source;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0 || onlyCompareOriginal) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return mappingA.name - mappingB.name;
	}
	exports.compareByOriginalPositions = compareByOriginalPositions;

	/**
	 * Comparator between two mappings with deflated source and name indices where
	 * the generated positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same generated line and column, but different
	 * source/name/original line and column the same. Useful when searching for a
	 * mapping with a stubbed out mapping.
	 */
	function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0 || onlyCompareGenerated) {
	    return cmp;
	  }

	  cmp = mappingA.source - mappingB.source;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return mappingA.name - mappingB.name;
	}
	exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

	function strcmp(aStr1, aStr2) {
	  if (aStr1 === aStr2) {
	    return 0;
	  }

	  if (aStr1 > aStr2) {
	    return 1;
	  }

	  return -1;
	}

	/**
	 * Comparator between two mappings with inflated source and name strings where
	 * the generated positions are compared.
	 */
	function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
	}(util$d));

	var arraySet$1 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util$c = util$d;
	var has$3 = Object.prototype.hasOwnProperty;
	var hasNativeMap$1 = typeof Map !== "undefined";

	/**
	 * A data structure which is a combination of an array and a set. Adding a new
	 * member is O(1), testing for membership is O(1), and finding the index of an
	 * element is O(1). Removing elements from the set is not supported. Only
	 * strings are supported for membership.
	 */
	function ArraySet$5() {
	  this._array = [];
	  this._set = hasNativeMap$1 ? new Map() : Object.create(null);
	}

	/**
	 * Static method for creating ArraySet instances from an existing array.
	 */
	ArraySet$5.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	  var set = new ArraySet$5();
	  for (var i = 0, len = aArray.length; i < len; i++) {
	    set.add(aArray[i], aAllowDuplicates);
	  }
	  return set;
	};

	/**
	 * Return how many unique items are in this ArraySet. If duplicates have been
	 * added, than those do not count towards the size.
	 *
	 * @returns Number
	 */
	ArraySet$5.prototype.size = function ArraySet_size() {
	  return hasNativeMap$1 ? this._set.size : Object.getOwnPropertyNames(this._set).length;
	};

	/**
	 * Add the given string to this set.
	 *
	 * @param String aStr
	 */
	ArraySet$5.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	  var sStr = hasNativeMap$1 ? aStr : util$c.toSetString(aStr);
	  var isDuplicate = hasNativeMap$1 ? this.has(aStr) : has$3.call(this._set, sStr);
	  var idx = this._array.length;
	  if (!isDuplicate || aAllowDuplicates) {
	    this._array.push(aStr);
	  }
	  if (!isDuplicate) {
	    if (hasNativeMap$1) {
	      this._set.set(aStr, idx);
	    } else {
	      this._set[sStr] = idx;
	    }
	  }
	};

	/**
	 * Is the given string a member of this set?
	 *
	 * @param String aStr
	 */
	ArraySet$5.prototype.has = function ArraySet_has(aStr) {
	  if (hasNativeMap$1) {
	    return this._set.has(aStr);
	  } else {
	    var sStr = util$c.toSetString(aStr);
	    return has$3.call(this._set, sStr);
	  }
	};

	/**
	 * What is the index of the given string in the array?
	 *
	 * @param String aStr
	 */
	ArraySet$5.prototype.indexOf = function ArraySet_indexOf(aStr) {
	  if (hasNativeMap$1) {
	    var idx = this._set.get(aStr);
	    if (idx >= 0) {
	        return idx;
	    }
	  } else {
	    var sStr = util$c.toSetString(aStr);
	    if (has$3.call(this._set, sStr)) {
	      return this._set[sStr];
	    }
	  }

	  throw new Error('"' + aStr + '" is not in the set.');
	};

	/**
	 * What is the element at the given index?
	 *
	 * @param Number aIdx
	 */
	ArraySet$5.prototype.at = function ArraySet_at(aIdx) {
	  if (aIdx >= 0 && aIdx < this._array.length) {
	    return this._array[aIdx];
	  }
	  throw new Error('No element indexed by ' + aIdx);
	};

	/**
	 * Returns the array representation of this set (which has the proper indices
	 * indicated by indexOf). Note that this is a copy of the internal array used
	 * for storing the members so that no one can mess with internal state.
	 */
	ArraySet$5.prototype.toArray = function ArraySet_toArray() {
	  return this._array.slice();
	};

	arraySet$1.ArraySet = ArraySet$5;

	var mappingList$1 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util$b = util$d;

	/**
	 * Determine whether mappingB is after mappingA with respect to generated
	 * position.
	 */
	function generatedPositionAfter$1(mappingA, mappingB) {
	  // Optimized for most common case
	  var lineA = mappingA.generatedLine;
	  var lineB = mappingB.generatedLine;
	  var columnA = mappingA.generatedColumn;
	  var columnB = mappingB.generatedColumn;
	  return lineB > lineA || lineB == lineA && columnB >= columnA ||
	         util$b.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	}

	/**
	 * A data structure to provide a sorted view of accumulated mappings in a
	 * performance conscious manner. It trades a neglibable overhead in general
	 * case for a large speedup in case of mappings being added in order.
	 */
	function MappingList$3() {
	  this._array = [];
	  this._sorted = true;
	  // Serves as infimum
	  this._last = {generatedLine: -1, generatedColumn: 0};
	}

	/**
	 * Iterate through internal items. This method takes the same arguments that
	 * `Array.prototype.forEach` takes.
	 *
	 * NOTE: The order of the mappings is NOT guaranteed.
	 */
	MappingList$3.prototype.unsortedForEach =
	  function MappingList_forEach(aCallback, aThisArg) {
	    this._array.forEach(aCallback, aThisArg);
	  };

	/**
	 * Add the given source mapping.
	 *
	 * @param Object aMapping
	 */
	MappingList$3.prototype.add = function MappingList_add(aMapping) {
	  if (generatedPositionAfter$1(this._last, aMapping)) {
	    this._last = aMapping;
	    this._array.push(aMapping);
	  } else {
	    this._sorted = false;
	    this._array.push(aMapping);
	  }
	};

	/**
	 * Returns the flat, sorted array of mappings. The mappings are sorted by
	 * generated position.
	 *
	 * WARNING: This method returns internal data without copying, for
	 * performance. The return value must NOT be mutated, and should be treated as
	 * an immutable borrow. If you want to take ownership, you must make your own
	 * copy.
	 */
	MappingList$3.prototype.toArray = function MappingList_toArray() {
	  if (!this._sorted) {
	    this._array.sort(util$b.compareByGeneratedPositionsInflated);
	    this._sorted = true;
	  }
	  return this._array;
	};

	mappingList$1.MappingList = MappingList$3;

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var base64VLQ$3 = base64Vlq$1;
	var util$a = util$d;
	var ArraySet$4 = arraySet$1.ArraySet;
	var MappingList$2 = mappingList$1.MappingList;

	/**
	 * An instance of the SourceMapGenerator represents a source map which is
	 * being built incrementally. You may pass an object with the following
	 * properties:
	 *
	 *   - file: The filename of the generated source.
	 *   - sourceRoot: A root for all relative URLs in this source map.
	 */
	function SourceMapGenerator$3(aArgs) {
	  if (!aArgs) {
	    aArgs = {};
	  }
	  this._file = util$a.getArg(aArgs, 'file', null);
	  this._sourceRoot = util$a.getArg(aArgs, 'sourceRoot', null);
	  this._skipValidation = util$a.getArg(aArgs, 'skipValidation', false);
	  this._sources = new ArraySet$4();
	  this._names = new ArraySet$4();
	  this._mappings = new MappingList$2();
	  this._sourcesContents = null;
	}

	SourceMapGenerator$3.prototype._version = 3;

	/**
	 * Creates a new SourceMapGenerator based on a SourceMapConsumer
	 *
	 * @param aSourceMapConsumer The SourceMap.
	 */
	SourceMapGenerator$3.fromSourceMap =
	  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	    var sourceRoot = aSourceMapConsumer.sourceRoot;
	    var generator = new SourceMapGenerator$3({
	      file: aSourceMapConsumer.file,
	      sourceRoot: sourceRoot
	    });
	    aSourceMapConsumer.eachMapping(function (mapping) {
	      var newMapping = {
	        generated: {
	          line: mapping.generatedLine,
	          column: mapping.generatedColumn
	        }
	      };

	      if (mapping.source != null) {
	        newMapping.source = mapping.source;
	        if (sourceRoot != null) {
	          newMapping.source = util$a.relative(sourceRoot, newMapping.source);
	        }

	        newMapping.original = {
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        };

	        if (mapping.name != null) {
	          newMapping.name = mapping.name;
	        }
	      }

	      generator.addMapping(newMapping);
	    });
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        generator.setSourceContent(sourceFile, content);
	      }
	    });
	    return generator;
	  };

	/**
	 * Add a single mapping from original source line and column to the generated
	 * source's line and column for this source map being created. The mapping
	 * object should have the following properties:
	 *
	 *   - generated: An object with the generated line and column positions.
	 *   - original: An object with the original line and column positions.
	 *   - source: The original source file (relative to the sourceRoot).
	 *   - name: An optional original token name for this mapping.
	 */
	SourceMapGenerator$3.prototype.addMapping =
	  function SourceMapGenerator_addMapping(aArgs) {
	    var generated = util$a.getArg(aArgs, 'generated');
	    var original = util$a.getArg(aArgs, 'original', null);
	    var source = util$a.getArg(aArgs, 'source', null);
	    var name = util$a.getArg(aArgs, 'name', null);

	    if (!this._skipValidation) {
	      this._validateMapping(generated, original, source, name);
	    }

	    if (source != null) {
	      source = String(source);
	      if (!this._sources.has(source)) {
	        this._sources.add(source);
	      }
	    }

	    if (name != null) {
	      name = String(name);
	      if (!this._names.has(name)) {
	        this._names.add(name);
	      }
	    }

	    this._mappings.add({
	      generatedLine: generated.line,
	      generatedColumn: generated.column,
	      originalLine: original != null && original.line,
	      originalColumn: original != null && original.column,
	      source: source,
	      name: name
	    });
	  };

	/**
	 * Set the source content for a source file.
	 */
	SourceMapGenerator$3.prototype.setSourceContent =
	  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	    var source = aSourceFile;
	    if (this._sourceRoot != null) {
	      source = util$a.relative(this._sourceRoot, source);
	    }

	    if (aSourceContent != null) {
	      // Add the source content to the _sourcesContents map.
	      // Create a new _sourcesContents map if the property is null.
	      if (!this._sourcesContents) {
	        this._sourcesContents = Object.create(null);
	      }
	      this._sourcesContents[util$a.toSetString(source)] = aSourceContent;
	    } else if (this._sourcesContents) {
	      // Remove the source file from the _sourcesContents map.
	      // If the _sourcesContents map is empty, set the property to null.
	      delete this._sourcesContents[util$a.toSetString(source)];
	      if (Object.keys(this._sourcesContents).length === 0) {
	        this._sourcesContents = null;
	      }
	    }
	  };

	/**
	 * Applies the mappings of a sub-source-map for a specific source file to the
	 * source map being generated. Each mapping to the supplied source file is
	 * rewritten using the supplied source map. Note: The resolution for the
	 * resulting mappings is the minimium of this map and the supplied map.
	 *
	 * @param aSourceMapConsumer The source map to be applied.
	 * @param aSourceFile Optional. The filename of the source file.
	 *        If omitted, SourceMapConsumer's file property will be used.
	 * @param aSourceMapPath Optional. The dirname of the path to the source map
	 *        to be applied. If relative, it is relative to the SourceMapConsumer.
	 *        This parameter is needed when the two source maps aren't in the same
	 *        directory, and the source map to be applied contains relative source
	 *        paths. If so, those relative source paths need to be rewritten
	 *        relative to the SourceMapGenerator.
	 */
	SourceMapGenerator$3.prototype.applySourceMap =
	  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	    var sourceFile = aSourceFile;
	    // If aSourceFile is omitted, we will use the file property of the SourceMap
	    if (aSourceFile == null) {
	      if (aSourceMapConsumer.file == null) {
	        throw new Error(
	          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	          'or the source map\'s "file" property. Both were omitted.'
	        );
	      }
	      sourceFile = aSourceMapConsumer.file;
	    }
	    var sourceRoot = this._sourceRoot;
	    // Make "sourceFile" relative if an absolute Url is passed.
	    if (sourceRoot != null) {
	      sourceFile = util$a.relative(sourceRoot, sourceFile);
	    }
	    // Applying the SourceMap can add and remove items from the sources and
	    // the names array.
	    var newSources = new ArraySet$4();
	    var newNames = new ArraySet$4();

	    // Find mappings for the "sourceFile"
	    this._mappings.unsortedForEach(function (mapping) {
	      if (mapping.source === sourceFile && mapping.originalLine != null) {
	        // Check if it can be mapped by the source map, then update the mapping.
	        var original = aSourceMapConsumer.originalPositionFor({
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        });
	        if (original.source != null) {
	          // Copy mapping
	          mapping.source = original.source;
	          if (aSourceMapPath != null) {
	            mapping.source = util$a.join(aSourceMapPath, mapping.source);
	          }
	          if (sourceRoot != null) {
	            mapping.source = util$a.relative(sourceRoot, mapping.source);
	          }
	          mapping.originalLine = original.line;
	          mapping.originalColumn = original.column;
	          if (original.name != null) {
	            mapping.name = original.name;
	          }
	        }
	      }

	      var source = mapping.source;
	      if (source != null && !newSources.has(source)) {
	        newSources.add(source);
	      }

	      var name = mapping.name;
	      if (name != null && !newNames.has(name)) {
	        newNames.add(name);
	      }

	    }, this);
	    this._sources = newSources;
	    this._names = newNames;

	    // Copy sourcesContents of applied map.
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aSourceMapPath != null) {
	          sourceFile = util$a.join(aSourceMapPath, sourceFile);
	        }
	        if (sourceRoot != null) {
	          sourceFile = util$a.relative(sourceRoot, sourceFile);
	        }
	        this.setSourceContent(sourceFile, content);
	      }
	    }, this);
	  };

	/**
	 * A mapping can have one of the three levels of data:
	 *
	 *   1. Just the generated position.
	 *   2. The Generated position, original position, and original source.
	 *   3. Generated and original position, original source, as well as a name
	 *      token.
	 *
	 * To maintain consistency, we validate that any new mapping being added falls
	 * in to one of these categories.
	 */
	SourceMapGenerator$3.prototype._validateMapping =
	  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                              aName) {
	    // When aOriginal is truthy but has empty values for .line and .column,
	    // it is most likely a programmer error. In this case we throw a very
	    // specific error message to try to guide them the right way.
	    // For example: https://github.com/Polymer/polymer-bundler/pull/519
	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
	        throw new Error(
	            'original.line and original.column are not numbers -- you probably meant to omit ' +
	            'the original mapping entirely and only map the generated position. If so, pass ' +
	            'null for the original mapping instead of an object with empty or null values.'
	        );
	    }

	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	        && aGenerated.line > 0 && aGenerated.column >= 0
	        && !aOriginal && !aSource && !aName) {
	      // Case 1.
	      return;
	    }
	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	             && aGenerated.line > 0 && aGenerated.column >= 0
	             && aOriginal.line > 0 && aOriginal.column >= 0
	             && aSource) {
	      // Cases 2 and 3.
	      return;
	    }
	    else {
	      throw new Error('Invalid mapping: ' + JSON.stringify({
	        generated: aGenerated,
	        source: aSource,
	        original: aOriginal,
	        name: aName
	      }));
	    }
	  };

	/**
	 * Serialize the accumulated mappings in to the stream of base 64 VLQs
	 * specified by the source map format.
	 */
	SourceMapGenerator$3.prototype._serializeMappings =
	  function SourceMapGenerator_serializeMappings() {
	    var previousGeneratedColumn = 0;
	    var previousGeneratedLine = 1;
	    var previousOriginalColumn = 0;
	    var previousOriginalLine = 0;
	    var previousName = 0;
	    var previousSource = 0;
	    var result = '';
	    var next;
	    var mapping;
	    var nameIdx;
	    var sourceIdx;

	    var mappings = this._mappings.toArray();
	    for (var i = 0, len = mappings.length; i < len; i++) {
	      mapping = mappings[i];
	      next = '';

	      if (mapping.generatedLine !== previousGeneratedLine) {
	        previousGeneratedColumn = 0;
	        while (mapping.generatedLine !== previousGeneratedLine) {
	          next += ';';
	          previousGeneratedLine++;
	        }
	      }
	      else {
	        if (i > 0) {
	          if (!util$a.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	            continue;
	          }
	          next += ',';
	        }
	      }

	      next += base64VLQ$3.encode(mapping.generatedColumn
	                                 - previousGeneratedColumn);
	      previousGeneratedColumn = mapping.generatedColumn;

	      if (mapping.source != null) {
	        sourceIdx = this._sources.indexOf(mapping.source);
	        next += base64VLQ$3.encode(sourceIdx - previousSource);
	        previousSource = sourceIdx;

	        // lines are stored 0-based in SourceMap spec version 3
	        next += base64VLQ$3.encode(mapping.originalLine - 1
	                                   - previousOriginalLine);
	        previousOriginalLine = mapping.originalLine - 1;

	        next += base64VLQ$3.encode(mapping.originalColumn
	                                   - previousOriginalColumn);
	        previousOriginalColumn = mapping.originalColumn;

	        if (mapping.name != null) {
	          nameIdx = this._names.indexOf(mapping.name);
	          next += base64VLQ$3.encode(nameIdx - previousName);
	          previousName = nameIdx;
	        }
	      }

	      result += next;
	    }

	    return result;
	  };

	SourceMapGenerator$3.prototype._generateSourcesContent =
	  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	    return aSources.map(function (source) {
	      if (!this._sourcesContents) {
	        return null;
	      }
	      if (aSourceRoot != null) {
	        source = util$a.relative(aSourceRoot, source);
	      }
	      var key = util$a.toSetString(source);
	      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
	        ? this._sourcesContents[key]
	        : null;
	    }, this);
	  };

	/**
	 * Externalize the source map.
	 */
	SourceMapGenerator$3.prototype.toJSON =
	  function SourceMapGenerator_toJSON() {
	    var map = {
	      version: this._version,
	      sources: this._sources.toArray(),
	      names: this._names.toArray(),
	      mappings: this._serializeMappings()
	    };
	    if (this._file != null) {
	      map.file = this._file;
	    }
	    if (this._sourceRoot != null) {
	      map.sourceRoot = this._sourceRoot;
	    }
	    if (this._sourcesContents) {
	      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	    }

	    return map;
	  };

	/**
	 * Render the source map being generated to a string.
	 */
	SourceMapGenerator$3.prototype.toString =
	  function SourceMapGenerator_toString() {
	    return JSON.stringify(this.toJSON());
	  };

	sourceMapGenerator$1.SourceMapGenerator = SourceMapGenerator$3;

	var sourceMapConsumer$1 = {};

	var binarySearch$3 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	(function (exports) {
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	exports.GREATEST_LOWER_BOUND = 1;
	exports.LEAST_UPPER_BOUND = 2;

	/**
	 * Recursive implementation of binary search.
	 *
	 * @param aLow Indices here and lower do not contain the needle.
	 * @param aHigh Indices here and higher do not contain the needle.
	 * @param aNeedle The element being searched for.
	 * @param aHaystack The non-empty array being searched.
	 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 */
	function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	  // This function terminates when one of the following is true:
	  //
	  //   1. We find the exact element we are looking for.
	  //
	  //   2. We did not find the exact element, but we can return the index of
	  //      the next-closest element.
	  //
	  //   3. We did not find the exact element, and there is no next-closest
	  //      element than the one we are searching for, so we return -1.
	  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	  var cmp = aCompare(aNeedle, aHaystack[mid], true);
	  if (cmp === 0) {
	    // Found the element we are looking for.
	    return mid;
	  }
	  else if (cmp > 0) {
	    // Our needle is greater than aHaystack[mid].
	    if (aHigh - mid > 1) {
	      // The element is in the upper half.
	      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	    }

	    // The exact needle element was not found in this haystack. Determine if
	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return aHigh < aHaystack.length ? aHigh : -1;
	    } else {
	      return mid;
	    }
	  }
	  else {
	    // Our needle is less than aHaystack[mid].
	    if (mid - aLow > 1) {
	      // The element is in the lower half.
	      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	    }

	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return mid;
	    } else {
	      return aLow < 0 ? -1 : aLow;
	    }
	  }
	}

	/**
	 * This is an implementation of binary search which will always try and return
	 * the index of the closest element if there is no exact hit. This is because
	 * mappings between original and generated line/col pairs are single points,
	 * and there is an implicit region between each of them, so a miss just means
	 * that you aren't on the very start of a region.
	 *
	 * @param aNeedle The element you are looking for.
	 * @param aHaystack The array that is being searched.
	 * @param aCompare A function which takes the needle and an element in the
	 *     array and returns -1, 0, or 1 depending on whether the needle is less
	 *     than, equal to, or greater than the element, respectively.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	 */
	exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	  if (aHaystack.length === 0) {
	    return -1;
	  }

	  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	  if (index < 0) {
	    return -1;
	  }

	  // We have found either the exact element, or the next-closest element than
	  // the one we are searching for. However, there may be more than one such
	  // element. Make sure we always return the smallest of these.
	  while (index - 1 >= 0) {
	    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	      break;
	    }
	    --index;
	  }

	  return index;
	};
	}(binarySearch$3));

	var quickSort$3 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	// It turns out that some (most?) JavaScript engines don't self-host
	// `Array.prototype.sort`. This makes sense because C++ will likely remain
	// faster than JS when doing raw CPU-intensive sorting. However, when using a
	// custom comparator function, calling back and forth between the VM's C++ and
	// JIT'd JS is rather slow *and* loses JIT type information, resulting in
	// worse generated code for the comparator function than would be optimal. In
	// fact, when sorting with a comparator, these costs outweigh the benefits of
	// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
	// a ~3500ms mean speed-up in `bench/bench.html`.

	/**
	 * Swap the elements indexed by `x` and `y` in the array `ary`.
	 *
	 * @param {Array} ary
	 *        The array.
	 * @param {Number} x
	 *        The index of the first item.
	 * @param {Number} y
	 *        The index of the second item.
	 */
	function swap$1(ary, x, y) {
	  var temp = ary[x];
	  ary[x] = ary[y];
	  ary[y] = temp;
	}

	/**
	 * Returns a random integer within the range `low .. high` inclusive.
	 *
	 * @param {Number} low
	 *        The lower bound on the range.
	 * @param {Number} high
	 *        The upper bound on the range.
	 */
	function randomIntInRange$1(low, high) {
	  return Math.round(low + (Math.random() * (high - low)));
	}

	/**
	 * The Quick Sort algorithm.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 * @param {Number} p
	 *        Start index of the array
	 * @param {Number} r
	 *        End index of the array
	 */
	function doQuickSort$1(ary, comparator, p, r) {
	  // If our lower bound is less than our upper bound, we (1) partition the
	  // array into two pieces and (2) recurse on each half. If it is not, this is
	  // the empty array and our base case.

	  if (p < r) {
	    // (1) Partitioning.
	    //
	    // The partitioning chooses a pivot between `p` and `r` and moves all
	    // elements that are less than or equal to the pivot to the before it, and
	    // all the elements that are greater than it after it. The effect is that
	    // once partition is done, the pivot is in the exact place it will be when
	    // the array is put in sorted order, and it will not need to be moved
	    // again. This runs in O(n) time.

	    // Always choose a random pivot so that an input array which is reverse
	    // sorted does not cause O(n^2) running time.
	    var pivotIndex = randomIntInRange$1(p, r);
	    var i = p - 1;

	    swap$1(ary, pivotIndex, r);
	    var pivot = ary[r];

	    // Immediately after `j` is incremented in this loop, the following hold
	    // true:
	    //
	    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
	    //
	    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
	    for (var j = p; j < r; j++) {
	      if (comparator(ary[j], pivot) <= 0) {
	        i += 1;
	        swap$1(ary, i, j);
	      }
	    }

	    swap$1(ary, i + 1, j);
	    var q = i + 1;

	    // (2) Recurse on each half.

	    doQuickSort$1(ary, comparator, p, q - 1);
	    doQuickSort$1(ary, comparator, q + 1, r);
	  }
	}

	/**
	 * Sort the given array in-place with the given comparator function.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 */
	quickSort$3.quickSort = function (ary, comparator) {
	  doQuickSort$1(ary, comparator, 0, ary.length - 1);
	};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util$9 = util$d;
	var binarySearch$2 = binarySearch$3;
	var ArraySet$3 = arraySet$1.ArraySet;
	var base64VLQ$2 = base64Vlq$1;
	var quickSort$2 = quickSort$3.quickSort;

	function SourceMapConsumer$1(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }

	  return sourceMap.sections != null
	    ? new IndexedSourceMapConsumer$1(sourceMap)
	    : new BasicSourceMapConsumer$1(sourceMap);
	}

	SourceMapConsumer$1.fromSourceMap = function(aSourceMap) {
	  return BasicSourceMapConsumer$1.fromSourceMap(aSourceMap);
	};

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	SourceMapConsumer$1.prototype._version = 3;

	// `__generatedMappings` and `__originalMappings` are arrays that hold the
	// parsed mapping coordinates from the source map's "mappings" attribute. They
	// are lazily instantiated, accessed via the `_generatedMappings` and
	// `_originalMappings` getters respectively, and we only parse the mappings
	// and create these arrays once queried for a source location. We jump through
	// these hoops because there can be many thousands of mappings, and parsing
	// them is expensive, so we only want to do it if we must.
	//
	// Each object in the arrays is of the form:
	//
	//     {
	//       generatedLine: The line number in the generated code,
	//       generatedColumn: The column number in the generated code,
	//       source: The path to the original source file that generated this
	//               chunk of code,
	//       originalLine: The line number in the original source that
	//                     corresponds to this chunk of generated code,
	//       originalColumn: The column number in the original source that
	//                       corresponds to this chunk of generated code,
	//       name: The name of the original symbol which generated this chunk of
	//             code.
	//     }
	//
	// All properties except for `generatedLine` and `generatedColumn` can be
	// `null`.
	//
	// `_generatedMappings` is ordered by the generated positions.
	//
	// `_originalMappings` is ordered by the original positions.

	SourceMapConsumer$1.prototype.__generatedMappings = null;
	Object.defineProperty(SourceMapConsumer$1.prototype, '_generatedMappings', {
	  get: function () {
	    if (!this.__generatedMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }

	    return this.__generatedMappings;
	  }
	});

	SourceMapConsumer$1.prototype.__originalMappings = null;
	Object.defineProperty(SourceMapConsumer$1.prototype, '_originalMappings', {
	  get: function () {
	    if (!this.__originalMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }

	    return this.__originalMappings;
	  }
	});

	SourceMapConsumer$1.prototype._charIsMappingSeparator =
	  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	    var c = aStr.charAt(index);
	    return c === ";" || c === ",";
	  };

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	SourceMapConsumer$1.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    throw new Error("Subclasses must implement _parseMappings");
	  };

	SourceMapConsumer$1.GENERATED_ORDER = 1;
	SourceMapConsumer$1.ORIGINAL_ORDER = 2;

	SourceMapConsumer$1.GREATEST_LOWER_BOUND = 1;
	SourceMapConsumer$1.LEAST_UPPER_BOUND = 2;

	/**
	 * Iterate over each mapping between an original source/line/column and a
	 * generated line/column in this source map.
	 *
	 * @param Function aCallback
	 *        The function that is called with each mapping.
	 * @param Object aContext
	 *        Optional. If specified, this object will be the value of `this` every
	 *        time that `aCallback` is called.
	 * @param aOrder
	 *        Either `SourceMapConsumer.GENERATED_ORDER` or
	 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	 *        iterate over the mappings sorted by the generated file's line/column
	 *        order or the original's source/line/column order, respectively. Defaults to
	 *        `SourceMapConsumer.GENERATED_ORDER`.
	 */
	SourceMapConsumer$1.prototype.eachMapping =
	  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	    var context = aContext || null;
	    var order = aOrder || SourceMapConsumer$1.GENERATED_ORDER;

	    var mappings;
	    switch (order) {
	    case SourceMapConsumer$1.GENERATED_ORDER:
	      mappings = this._generatedMappings;
	      break;
	    case SourceMapConsumer$1.ORIGINAL_ORDER:
	      mappings = this._originalMappings;
	      break;
	    default:
	      throw new Error("Unknown order of iteration.");
	    }

	    var sourceRoot = this.sourceRoot;
	    mappings.map(function (mapping) {
	      var source = mapping.source === null ? null : this._sources.at(mapping.source);
	      if (source != null && sourceRoot != null) {
	        source = util$9.join(sourceRoot, source);
	      }
	      return {
	        source: source,
	        generatedLine: mapping.generatedLine,
	        generatedColumn: mapping.generatedColumn,
	        originalLine: mapping.originalLine,
	        originalColumn: mapping.originalColumn,
	        name: mapping.name === null ? null : this._names.at(mapping.name)
	      };
	    }, this).forEach(aCallback, context);
	  };

	/**
	 * Returns all generated line and column information for the original source,
	 * line, and column provided. If no column is provided, returns all mappings
	 * corresponding to a either the line we are searching for or the next
	 * closest line that has any mappings. Otherwise, returns all mappings
	 * corresponding to the given line and either the column we are searching for
	 * or the next closest column that has any offsets.
	 *
	 * The only argument is an object with the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: Optional. the column number in the original source.
	 *
	 * and an array of objects is returned, each with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	SourceMapConsumer$1.prototype.allGeneratedPositionsFor =
	  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	    var line = util$9.getArg(aArgs, 'line');

	    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	    // returns the index of the closest mapping less than the needle. By
	    // setting needle.originalColumn to 0, we thus find the last mapping for
	    // the given line, provided such a mapping exists.
	    var needle = {
	      source: util$9.getArg(aArgs, 'source'),
	      originalLine: line,
	      originalColumn: util$9.getArg(aArgs, 'column', 0)
	    };

	    if (this.sourceRoot != null) {
	      needle.source = util$9.relative(this.sourceRoot, needle.source);
	    }
	    if (!this._sources.has(needle.source)) {
	      return [];
	    }
	    needle.source = this._sources.indexOf(needle.source);

	    var mappings = [];

	    var index = this._findMapping(needle,
	                                  this._originalMappings,
	                                  "originalLine",
	                                  "originalColumn",
	                                  util$9.compareByOriginalPositions,
	                                  binarySearch$2.LEAST_UPPER_BOUND);
	    if (index >= 0) {
	      var mapping = this._originalMappings[index];

	      if (aArgs.column === undefined) {
	        var originalLine = mapping.originalLine;

	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we found. Since
	        // mappings are sorted, this is guaranteed to find all mappings for
	        // the line we found.
	        while (mapping && mapping.originalLine === originalLine) {
	          mappings.push({
	            line: util$9.getArg(mapping, 'generatedLine', null),
	            column: util$9.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util$9.getArg(mapping, 'lastGeneratedColumn', null)
	          });

	          mapping = this._originalMappings[++index];
	        }
	      } else {
	        var originalColumn = mapping.originalColumn;

	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we were searching for.
	        // Since mappings are sorted, this is guaranteed to find all mappings for
	        // the line we are searching for.
	        while (mapping &&
	               mapping.originalLine === line &&
	               mapping.originalColumn == originalColumn) {
	          mappings.push({
	            line: util$9.getArg(mapping, 'generatedLine', null),
	            column: util$9.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util$9.getArg(mapping, 'lastGeneratedColumn', null)
	          });

	          mapping = this._originalMappings[++index];
	        }
	      }
	    }

	    return mappings;
	  };

	sourceMapConsumer$1.SourceMapConsumer = SourceMapConsumer$1;

	/**
	 * A BasicSourceMapConsumer instance represents a parsed source map which we can
	 * query for information about the original file positions by giving it a file
	 * position in the generated source.
	 *
	 * The only parameter is the raw source map (either as a JSON string, or
	 * already parsed to an object). According to the spec, source maps have the
	 * following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - sources: An array of URLs to the original source files.
	 *   - names: An array of identifiers which can be referrenced by individual mappings.
	 *   - sourceRoot: Optional. The URL root from which all sources are relative.
	 *   - sourcesContent: Optional. An array of contents of the original source files.
	 *   - mappings: A string of base64 VLQs which contain the actual mappings.
	 *   - file: Optional. The generated file this source map is associated with.
	 *
	 * Here is an example source map, taken from the source map spec[0]:
	 *
	 *     {
	 *       version : 3,
	 *       file: "out.js",
	 *       sourceRoot : "",
	 *       sources: ["foo.js", "bar.js"],
	 *       names: ["src", "maps", "are", "fun"],
	 *       mappings: "AA,AB;;ABCDE;"
	 *     }
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	 */
	function BasicSourceMapConsumer$1(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }

	  var version = util$9.getArg(sourceMap, 'version');
	  var sources = util$9.getArg(sourceMap, 'sources');
	  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	  // requires the array) to play nice here.
	  var names = util$9.getArg(sourceMap, 'names', []);
	  var sourceRoot = util$9.getArg(sourceMap, 'sourceRoot', null);
	  var sourcesContent = util$9.getArg(sourceMap, 'sourcesContent', null);
	  var mappings = util$9.getArg(sourceMap, 'mappings');
	  var file = util$9.getArg(sourceMap, 'file', null);

	  // Once again, Sass deviates from the spec and supplies the version as a
	  // string rather than a number, so we use loose equality checking here.
	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }

	  sources = sources
	    .map(String)
	    // Some source maps produce relative source paths like "./foo.js" instead of
	    // "foo.js".  Normalize these first so that future comparisons will succeed.
	    // See bugzil.la/1090768.
	    .map(util$9.normalize)
	    // Always ensure that absolute sources are internally stored relative to
	    // the source root, if the source root is absolute. Not doing this would
	    // be particularly problematic when the source root is a prefix of the
	    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
	    .map(function (source) {
	      return sourceRoot && util$9.isAbsolute(sourceRoot) && util$9.isAbsolute(source)
	        ? util$9.relative(sourceRoot, source)
	        : source;
	    });

	  // Pass `true` below to allow duplicate names and sources. While source maps
	  // are intended to be compressed and deduplicated, the TypeScript compiler
	  // sometimes generates source maps with duplicates in them. See Github issue
	  // #72 and bugzil.la/889492.
	  this._names = ArraySet$3.fromArray(names.map(String), true);
	  this._sources = ArraySet$3.fromArray(sources, true);

	  this.sourceRoot = sourceRoot;
	  this.sourcesContent = sourcesContent;
	  this._mappings = mappings;
	  this.file = file;
	}

	BasicSourceMapConsumer$1.prototype = Object.create(SourceMapConsumer$1.prototype);
	BasicSourceMapConsumer$1.prototype.consumer = SourceMapConsumer$1;

	/**
	 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	 *
	 * @param SourceMapGenerator aSourceMap
	 *        The source map that will be consumed.
	 * @returns BasicSourceMapConsumer
	 */
	BasicSourceMapConsumer$1.fromSourceMap =
	  function SourceMapConsumer_fromSourceMap(aSourceMap) {
	    var smc = Object.create(BasicSourceMapConsumer$1.prototype);

	    var names = smc._names = ArraySet$3.fromArray(aSourceMap._names.toArray(), true);
	    var sources = smc._sources = ArraySet$3.fromArray(aSourceMap._sources.toArray(), true);
	    smc.sourceRoot = aSourceMap._sourceRoot;
	    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                            smc.sourceRoot);
	    smc.file = aSourceMap._file;

	    // Because we are modifying the entries (by converting string sources and
	    // names to indices into the sources and names ArraySets), we have to make
	    // a copy of the entry or else bad things happen. Shared mutable state
	    // strikes again! See github issue #191.

	    var generatedMappings = aSourceMap._mappings.toArray().slice();
	    var destGeneratedMappings = smc.__generatedMappings = [];
	    var destOriginalMappings = smc.__originalMappings = [];

	    for (var i = 0, length = generatedMappings.length; i < length; i++) {
	      var srcMapping = generatedMappings[i];
	      var destMapping = new Mapping$1;
	      destMapping.generatedLine = srcMapping.generatedLine;
	      destMapping.generatedColumn = srcMapping.generatedColumn;

	      if (srcMapping.source) {
	        destMapping.source = sources.indexOf(srcMapping.source);
	        destMapping.originalLine = srcMapping.originalLine;
	        destMapping.originalColumn = srcMapping.originalColumn;

	        if (srcMapping.name) {
	          destMapping.name = names.indexOf(srcMapping.name);
	        }

	        destOriginalMappings.push(destMapping);
	      }

	      destGeneratedMappings.push(destMapping);
	    }

	    quickSort$2(smc.__originalMappings, util$9.compareByOriginalPositions);

	    return smc;
	  };

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	BasicSourceMapConsumer$1.prototype._version = 3;

	/**
	 * The list of original sources.
	 */
	Object.defineProperty(BasicSourceMapConsumer$1.prototype, 'sources', {
	  get: function () {
	    return this._sources.toArray().map(function (s) {
	      return this.sourceRoot != null ? util$9.join(this.sourceRoot, s) : s;
	    }, this);
	  }
	});

	/**
	 * Provide the JIT with a nice shape / hidden class.
	 */
	function Mapping$1() {
	  this.generatedLine = 0;
	  this.generatedColumn = 0;
	  this.source = null;
	  this.originalLine = null;
	  this.originalColumn = null;
	  this.name = null;
	}

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	BasicSourceMapConsumer$1.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    var generatedLine = 1;
	    var previousGeneratedColumn = 0;
	    var previousOriginalLine = 0;
	    var previousOriginalColumn = 0;
	    var previousSource = 0;
	    var previousName = 0;
	    var length = aStr.length;
	    var index = 0;
	    var cachedSegments = {};
	    var temp = {};
	    var originalMappings = [];
	    var generatedMappings = [];
	    var mapping, str, segment, end, value;

	    while (index < length) {
	      if (aStr.charAt(index) === ';') {
	        generatedLine++;
	        index++;
	        previousGeneratedColumn = 0;
	      }
	      else if (aStr.charAt(index) === ',') {
	        index++;
	      }
	      else {
	        mapping = new Mapping$1();
	        mapping.generatedLine = generatedLine;

	        // Because each offset is encoded relative to the previous one,
	        // many segments often have the same encoding. We can exploit this
	        // fact by caching the parsed variable length fields of each segment,
	        // allowing us to avoid a second parse if we encounter the same
	        // segment again.
	        for (end = index; end < length; end++) {
	          if (this._charIsMappingSeparator(aStr, end)) {
	            break;
	          }
	        }
	        str = aStr.slice(index, end);

	        segment = cachedSegments[str];
	        if (segment) {
	          index += str.length;
	        } else {
	          segment = [];
	          while (index < end) {
	            base64VLQ$2.decode(aStr, index, temp);
	            value = temp.value;
	            index = temp.rest;
	            segment.push(value);
	          }

	          if (segment.length === 2) {
	            throw new Error('Found a source, but no line and column');
	          }

	          if (segment.length === 3) {
	            throw new Error('Found a source and line, but no column');
	          }

	          cachedSegments[str] = segment;
	        }

	        // Generated column.
	        mapping.generatedColumn = previousGeneratedColumn + segment[0];
	        previousGeneratedColumn = mapping.generatedColumn;

	        if (segment.length > 1) {
	          // Original source.
	          mapping.source = previousSource + segment[1];
	          previousSource += segment[1];

	          // Original line.
	          mapping.originalLine = previousOriginalLine + segment[2];
	          previousOriginalLine = mapping.originalLine;
	          // Lines are stored 0-based
	          mapping.originalLine += 1;

	          // Original column.
	          mapping.originalColumn = previousOriginalColumn + segment[3];
	          previousOriginalColumn = mapping.originalColumn;

	          if (segment.length > 4) {
	            // Original name.
	            mapping.name = previousName + segment[4];
	            previousName += segment[4];
	          }
	        }

	        generatedMappings.push(mapping);
	        if (typeof mapping.originalLine === 'number') {
	          originalMappings.push(mapping);
	        }
	      }
	    }

	    quickSort$2(generatedMappings, util$9.compareByGeneratedPositionsDeflated);
	    this.__generatedMappings = generatedMappings;

	    quickSort$2(originalMappings, util$9.compareByOriginalPositions);
	    this.__originalMappings = originalMappings;
	  };

	/**
	 * Find the mapping that best matches the hypothetical "needle" mapping that
	 * we are searching for in the given "haystack" of mappings.
	 */
	BasicSourceMapConsumer$1.prototype._findMapping =
	  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                         aColumnName, aComparator, aBias) {
	    // To return the position we are searching for, we must first find the
	    // mapping for the given position and then return the opposite position it
	    // points to. Because the mappings are sorted, we can use binary search to
	    // find the best mapping.

	    if (aNeedle[aLineName] <= 0) {
	      throw new TypeError('Line must be greater than or equal to 1, got '
	                          + aNeedle[aLineName]);
	    }
	    if (aNeedle[aColumnName] < 0) {
	      throw new TypeError('Column must be greater than or equal to 0, got '
	                          + aNeedle[aColumnName]);
	    }

	    return binarySearch$2.search(aNeedle, aMappings, aComparator, aBias);
	  };

	/**
	 * Compute the last column for each generated mapping. The last column is
	 * inclusive.
	 */
	BasicSourceMapConsumer$1.prototype.computeColumnSpans =
	  function SourceMapConsumer_computeColumnSpans() {
	    for (var index = 0; index < this._generatedMappings.length; ++index) {
	      var mapping = this._generatedMappings[index];

	      // Mappings do not contain a field for the last generated columnt. We
	      // can come up with an optimistic estimate, however, by assuming that
	      // mappings are contiguous (i.e. given two consecutive mappings, the
	      // first mapping ends where the second one starts).
	      if (index + 1 < this._generatedMappings.length) {
	        var nextMapping = this._generatedMappings[index + 1];

	        if (mapping.generatedLine === nextMapping.generatedLine) {
	          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	          continue;
	        }
	      }

	      // The last mapping for each line spans the entire line.
	      mapping.lastGeneratedColumn = Infinity;
	    }
	  };

	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.
	 *   - column: The column number in the generated source.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.
	 *   - column: The column number in the original source, or null.
	 *   - name: The original identifier, or null.
	 */
	BasicSourceMapConsumer$1.prototype.originalPositionFor =
	  function SourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util$9.getArg(aArgs, 'line'),
	      generatedColumn: util$9.getArg(aArgs, 'column')
	    };

	    var index = this._findMapping(
	      needle,
	      this._generatedMappings,
	      "generatedLine",
	      "generatedColumn",
	      util$9.compareByGeneratedPositionsDeflated,
	      util$9.getArg(aArgs, 'bias', SourceMapConsumer$1.GREATEST_LOWER_BOUND)
	    );

	    if (index >= 0) {
	      var mapping = this._generatedMappings[index];

	      if (mapping.generatedLine === needle.generatedLine) {
	        var source = util$9.getArg(mapping, 'source', null);
	        if (source !== null) {
	          source = this._sources.at(source);
	          if (this.sourceRoot != null) {
	            source = util$9.join(this.sourceRoot, source);
	          }
	        }
	        var name = util$9.getArg(mapping, 'name', null);
	        if (name !== null) {
	          name = this._names.at(name);
	        }
	        return {
	          source: source,
	          line: util$9.getArg(mapping, 'originalLine', null),
	          column: util$9.getArg(mapping, 'originalColumn', null),
	          name: name
	        };
	      }
	    }

	    return {
	      source: null,
	      line: null,
	      column: null,
	      name: null
	    };
	  };

	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	BasicSourceMapConsumer$1.prototype.hasContentsOfAllSources =
	  function BasicSourceMapConsumer_hasContentsOfAllSources() {
	    if (!this.sourcesContent) {
	      return false;
	    }
	    return this.sourcesContent.length >= this._sources.size() &&
	      !this.sourcesContent.some(function (sc) { return sc == null; });
	  };

	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	BasicSourceMapConsumer$1.prototype.sourceContentFor =
	  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    if (!this.sourcesContent) {
	      return null;
	    }

	    if (this.sourceRoot != null) {
	      aSource = util$9.relative(this.sourceRoot, aSource);
	    }

	    if (this._sources.has(aSource)) {
	      return this.sourcesContent[this._sources.indexOf(aSource)];
	    }

	    var url;
	    if (this.sourceRoot != null
	        && (url = util$9.urlParse(this.sourceRoot))) {
	      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	      // many users. We can help them out when they expect file:// URIs to
	      // behave like it would if they were running a local HTTP server. See
	      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	      var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
	      if (url.scheme == "file"
	          && this._sources.has(fileUriAbsPath)) {
	        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	      }

	      if ((!url.path || url.path == "/")
	          && this._sources.has("/" + aSource)) {
	        return this.sourcesContent[this._sources.indexOf("/" + aSource)];
	      }
	    }

	    // This function is used recursively from
	    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	    // don't want to throw if we can't find the source - we just want to
	    // return null, so we provide a flag to exit gracefully.
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };

	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: The column number in the original source.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	BasicSourceMapConsumer$1.prototype.generatedPositionFor =
	  function SourceMapConsumer_generatedPositionFor(aArgs) {
	    var source = util$9.getArg(aArgs, 'source');
	    if (this.sourceRoot != null) {
	      source = util$9.relative(this.sourceRoot, source);
	    }
	    if (!this._sources.has(source)) {
	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    }
	    source = this._sources.indexOf(source);

	    var needle = {
	      source: source,
	      originalLine: util$9.getArg(aArgs, 'line'),
	      originalColumn: util$9.getArg(aArgs, 'column')
	    };

	    var index = this._findMapping(
	      needle,
	      this._originalMappings,
	      "originalLine",
	      "originalColumn",
	      util$9.compareByOriginalPositions,
	      util$9.getArg(aArgs, 'bias', SourceMapConsumer$1.GREATEST_LOWER_BOUND)
	    );

	    if (index >= 0) {
	      var mapping = this._originalMappings[index];

	      if (mapping.source === needle.source) {
	        return {
	          line: util$9.getArg(mapping, 'generatedLine', null),
	          column: util$9.getArg(mapping, 'generatedColumn', null),
	          lastColumn: util$9.getArg(mapping, 'lastGeneratedColumn', null)
	        };
	      }
	    }

	    return {
	      line: null,
	      column: null,
	      lastColumn: null
	    };
	  };

	sourceMapConsumer$1.BasicSourceMapConsumer = BasicSourceMapConsumer$1;

	/**
	 * An IndexedSourceMapConsumer instance represents a parsed source map which
	 * we can query for information. It differs from BasicSourceMapConsumer in
	 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	 * input.
	 *
	 * The only parameter is a raw source map (either as a JSON string, or already
	 * parsed to an object). According to the spec for indexed source maps, they
	 * have the following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - file: Optional. The generated file this source map is associated with.
	 *   - sections: A list of section definitions.
	 *
	 * Each value under the "sections" field has two fields:
	 *   - offset: The offset into the original specified at which this section
	 *       begins to apply, defined as an object with a "line" and "column"
	 *       field.
	 *   - map: A source map definition. This source map could also be indexed,
	 *       but doesn't have to be.
	 *
	 * Instead of the "map" field, it's also possible to have a "url" field
	 * specifying a URL to retrieve a source map from, but that's currently
	 * unsupported.
	 *
	 * Here's an example source map, taken from the source map spec[0], but
	 * modified to omit a section which uses the "url" field.
	 *
	 *  {
	 *    version : 3,
	 *    file: "app.js",
	 *    sections: [{
	 *      offset: {line:100, column:10},
	 *      map: {
	 *        version : 3,
	 *        file: "section.js",
	 *        sources: ["foo.js", "bar.js"],
	 *        names: ["src", "maps", "are", "fun"],
	 *        mappings: "AAAA,E;;ABCDE;"
	 *      }
	 *    }],
	 *  }
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	 */
	function IndexedSourceMapConsumer$1(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }

	  var version = util$9.getArg(sourceMap, 'version');
	  var sections = util$9.getArg(sourceMap, 'sections');

	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }

	  this._sources = new ArraySet$3();
	  this._names = new ArraySet$3();

	  var lastOffset = {
	    line: -1,
	    column: 0
	  };
	  this._sections = sections.map(function (s) {
	    if (s.url) {
	      // The url field will require support for asynchronicity.
	      // See https://github.com/mozilla/source-map/issues/16
	      throw new Error('Support for url field in sections not implemented.');
	    }
	    var offset = util$9.getArg(s, 'offset');
	    var offsetLine = util$9.getArg(offset, 'line');
	    var offsetColumn = util$9.getArg(offset, 'column');

	    if (offsetLine < lastOffset.line ||
	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	      throw new Error('Section offsets must be ordered and non-overlapping.');
	    }
	    lastOffset = offset;

	    return {
	      generatedOffset: {
	        // The offset fields are 0-based, but we use 1-based indices when
	        // encoding/decoding from VLQ.
	        generatedLine: offsetLine + 1,
	        generatedColumn: offsetColumn + 1
	      },
	      consumer: new SourceMapConsumer$1(util$9.getArg(s, 'map'))
	    }
	  });
	}

	IndexedSourceMapConsumer$1.prototype = Object.create(SourceMapConsumer$1.prototype);
	IndexedSourceMapConsumer$1.prototype.constructor = SourceMapConsumer$1;

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	IndexedSourceMapConsumer$1.prototype._version = 3;

	/**
	 * The list of original sources.
	 */
	Object.defineProperty(IndexedSourceMapConsumer$1.prototype, 'sources', {
	  get: function () {
	    var sources = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	        sources.push(this._sections[i].consumer.sources[j]);
	      }
	    }
	    return sources;
	  }
	});

	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.
	 *   - column: The column number in the generated source.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.
	 *   - column: The column number in the original source, or null.
	 *   - name: The original identifier, or null.
	 */
	IndexedSourceMapConsumer$1.prototype.originalPositionFor =
	  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util$9.getArg(aArgs, 'line'),
	      generatedColumn: util$9.getArg(aArgs, 'column')
	    };

	    // Find the section containing the generated position we're trying to map
	    // to an original position.
	    var sectionIndex = binarySearch$2.search(needle, this._sections,
	      function(needle, section) {
	        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	        if (cmp) {
	          return cmp;
	        }

	        return (needle.generatedColumn -
	                section.generatedOffset.generatedColumn);
	      });
	    var section = this._sections[sectionIndex];

	    if (!section) {
	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    }

	    return section.consumer.originalPositionFor({
	      line: needle.generatedLine -
	        (section.generatedOffset.generatedLine - 1),
	      column: needle.generatedColumn -
	        (section.generatedOffset.generatedLine === needle.generatedLine
	         ? section.generatedOffset.generatedColumn - 1
	         : 0),
	      bias: aArgs.bias
	    });
	  };

	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	IndexedSourceMapConsumer$1.prototype.hasContentsOfAllSources =
	  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	    return this._sections.every(function (s) {
	      return s.consumer.hasContentsOfAllSources();
	    });
	  };

	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	IndexedSourceMapConsumer$1.prototype.sourceContentFor =
	  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];

	      var content = section.consumer.sourceContentFor(aSource, true);
	      if (content) {
	        return content;
	      }
	    }
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };

	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: The column number in the original source.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	IndexedSourceMapConsumer$1.prototype.generatedPositionFor =
	  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];

	      // Only consider this section if the requested source is in the list of
	      // sources of the consumer.
	      if (section.consumer.sources.indexOf(util$9.getArg(aArgs, 'source')) === -1) {
	        continue;
	      }
	      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	      if (generatedPosition) {
	        var ret = {
	          line: generatedPosition.line +
	            (section.generatedOffset.generatedLine - 1),
	          column: generatedPosition.column +
	            (section.generatedOffset.generatedLine === generatedPosition.line
	             ? section.generatedOffset.generatedColumn - 1
	             : 0)
	        };
	        return ret;
	      }
	    }

	    return {
	      line: null,
	      column: null
	    };
	  };

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	IndexedSourceMapConsumer$1.prototype._parseMappings =
	  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    this.__generatedMappings = [];
	    this.__originalMappings = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	      var sectionMappings = section.consumer._generatedMappings;
	      for (var j = 0; j < sectionMappings.length; j++) {
	        var mapping = sectionMappings[j];

	        var source = section.consumer._sources.at(mapping.source);
	        if (section.consumer.sourceRoot !== null) {
	          source = util$9.join(section.consumer.sourceRoot, source);
	        }
	        this._sources.add(source);
	        source = this._sources.indexOf(source);

	        var name = section.consumer._names.at(mapping.name);
	        this._names.add(name);
	        name = this._names.indexOf(name);

	        // The mappings coming from the consumer for the section have
	        // generated positions relative to the start of the section, so we
	        // need to offset them to be relative to the start of the concatenated
	        // generated file.
	        var adjustedMapping = {
	          source: source,
	          generatedLine: mapping.generatedLine +
	            (section.generatedOffset.generatedLine - 1),
	          generatedColumn: mapping.generatedColumn +
	            (section.generatedOffset.generatedLine === mapping.generatedLine
	            ? section.generatedOffset.generatedColumn - 1
	            : 0),
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: name
	        };

	        this.__generatedMappings.push(adjustedMapping);
	        if (typeof adjustedMapping.originalLine === 'number') {
	          this.__originalMappings.push(adjustedMapping);
	        }
	      }
	    }

	    quickSort$2(this.__generatedMappings, util$9.compareByGeneratedPositionsDeflated);
	    quickSort$2(this.__originalMappings, util$9.compareByOriginalPositions);
	  };

	sourceMapConsumer$1.IndexedSourceMapConsumer = IndexedSourceMapConsumer$1;

	var sourceNode$1 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var SourceMapGenerator$2 = sourceMapGenerator$1.SourceMapGenerator;
	var util$8 = util$d;

	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	// operating systems these days (capturing the result).
	var REGEX_NEWLINE$1 = /(\r?\n)/;

	// Newline character code for charCodeAt() comparisons
	var NEWLINE_CODE$1 = 10;

	// Private symbol for identifying `SourceNode`s when multiple versions of
	// the source-map library are loaded. This MUST NOT CHANGE across
	// versions!
	var isSourceNode$1 = "$$$isSourceNode$$$";

	/**
	 * SourceNodes provide a way to abstract over interpolating/concatenating
	 * snippets of generated JavaScript source code while maintaining the line and
	 * column information associated with the original source code.
	 *
	 * @param aLine The original line number.
	 * @param aColumn The original column number.
	 * @param aSource The original source's filename.
	 * @param aChunks Optional. An array of strings which are snippets of
	 *        generated JS, or other SourceNodes.
	 * @param aName The original identifier.
	 */
	function SourceNode$1(aLine, aColumn, aSource, aChunks, aName) {
	  this.children = [];
	  this.sourceContents = {};
	  this.line = aLine == null ? null : aLine;
	  this.column = aColumn == null ? null : aColumn;
	  this.source = aSource == null ? null : aSource;
	  this.name = aName == null ? null : aName;
	  this[isSourceNode$1] = true;
	  if (aChunks != null) this.add(aChunks);
	}

	/**
	 * Creates a SourceNode from generated code and a SourceMapConsumer.
	 *
	 * @param aGeneratedCode The generated code
	 * @param aSourceMapConsumer The SourceMap for the generated code
	 * @param aRelativePath Optional. The path that relative sources in the
	 *        SourceMapConsumer should be relative to.
	 */
	SourceNode$1.fromStringWithSourceMap =
	  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	    // The SourceNode we want to fill with the generated code
	    // and the SourceMap
	    var node = new SourceNode$1();

	    // All even indices of this array are one line of the generated code,
	    // while all odd indices are the newlines between two adjacent lines
	    // (since `REGEX_NEWLINE` captures its match).
	    // Processed fragments are accessed by calling `shiftNextLine`.
	    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE$1);
	    var remainingLinesIndex = 0;
	    var shiftNextLine = function() {
	      var lineContents = getNextLine();
	      // The last line of a file might not have a newline.
	      var newLine = getNextLine() || "";
	      return lineContents + newLine;

	      function getNextLine() {
	        return remainingLinesIndex < remainingLines.length ?
	            remainingLines[remainingLinesIndex++] : undefined;
	      }
	    };

	    // We need to remember the position of "remainingLines"
	    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

	    // The generate SourceNodes we need a code range.
	    // To extract it current and last mapping is used.
	    // Here we store the last mapping.
	    var lastMapping = null;

	    aSourceMapConsumer.eachMapping(function (mapping) {
	      if (lastMapping !== null) {
	        // We add the code from "lastMapping" to "mapping":
	        // First check if there is a new line in between.
	        if (lastGeneratedLine < mapping.generatedLine) {
	          // Associate first line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	          lastGeneratedLine++;
	          lastGeneratedColumn = 0;
	          // The remaining code is added without mapping
	        } else {
	          // There is no new line in between.
	          // Associate the code between "lastGeneratedColumn" and
	          // "mapping.generatedColumn" with "lastMapping"
	          var nextLine = remainingLines[remainingLinesIndex];
	          var code = nextLine.substr(0, mapping.generatedColumn -
	                                        lastGeneratedColumn);
	          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
	                                              lastGeneratedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	          addMappingWithCode(lastMapping, code);
	          // No more remaining code, continue
	          lastMapping = mapping;
	          return;
	        }
	      }
	      // We add the generated code until the first mapping
	      // to the SourceNode without any mapping.
	      // Each line is added as separate string.
	      while (lastGeneratedLine < mapping.generatedLine) {
	        node.add(shiftNextLine());
	        lastGeneratedLine++;
	      }
	      if (lastGeneratedColumn < mapping.generatedColumn) {
	        var nextLine = remainingLines[remainingLinesIndex];
	        node.add(nextLine.substr(0, mapping.generatedColumn));
	        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
	        lastGeneratedColumn = mapping.generatedColumn;
	      }
	      lastMapping = mapping;
	    }, this);
	    // We have processed all mappings.
	    if (remainingLinesIndex < remainingLines.length) {
	      if (lastMapping) {
	        // Associate the remaining code in the current line with "lastMapping"
	        addMappingWithCode(lastMapping, shiftNextLine());
	      }
	      // and add the remaining lines without any mapping
	      node.add(remainingLines.splice(remainingLinesIndex).join(""));
	    }

	    // Copy sourcesContent into SourceNode
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aRelativePath != null) {
	          sourceFile = util$8.join(aRelativePath, sourceFile);
	        }
	        node.setSourceContent(sourceFile, content);
	      }
	    });

	    return node;

	    function addMappingWithCode(mapping, code) {
	      if (mapping === null || mapping.source === undefined) {
	        node.add(code);
	      } else {
	        var source = aRelativePath
	          ? util$8.join(aRelativePath, mapping.source)
	          : mapping.source;
	        node.add(new SourceNode$1(mapping.originalLine,
	                                mapping.originalColumn,
	                                source,
	                                code,
	                                mapping.name));
	      }
	    }
	  };

	/**
	 * Add a chunk of generated JS to this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode$1.prototype.add = function SourceNode_add(aChunk) {
	  if (Array.isArray(aChunk)) {
	    aChunk.forEach(function (chunk) {
	      this.add(chunk);
	    }, this);
	  }
	  else if (aChunk[isSourceNode$1] || typeof aChunk === "string") {
	    if (aChunk) {
	      this.children.push(aChunk);
	    }
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};

	/**
	 * Add a chunk of generated JS to the beginning of this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode$1.prototype.prepend = function SourceNode_prepend(aChunk) {
	  if (Array.isArray(aChunk)) {
	    for (var i = aChunk.length-1; i >= 0; i--) {
	      this.prepend(aChunk[i]);
	    }
	  }
	  else if (aChunk[isSourceNode$1] || typeof aChunk === "string") {
	    this.children.unshift(aChunk);
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};

	/**
	 * Walk over the tree of JS snippets in this node and its children. The
	 * walking function is called once for each snippet of JS and is passed that
	 * snippet and the its original associated source's line/column location.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode$1.prototype.walk = function SourceNode_walk(aFn) {
	  var chunk;
	  for (var i = 0, len = this.children.length; i < len; i++) {
	    chunk = this.children[i];
	    if (chunk[isSourceNode$1]) {
	      chunk.walk(aFn);
	    }
	    else {
	      if (chunk !== '') {
	        aFn(chunk, { source: this.source,
	                     line: this.line,
	                     column: this.column,
	                     name: this.name });
	      }
	    }
	  }
	};

	/**
	 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	 * each of `this.children`.
	 *
	 * @param aSep The separator.
	 */
	SourceNode$1.prototype.join = function SourceNode_join(aSep) {
	  var newChildren;
	  var i;
	  var len = this.children.length;
	  if (len > 0) {
	    newChildren = [];
	    for (i = 0; i < len-1; i++) {
	      newChildren.push(this.children[i]);
	      newChildren.push(aSep);
	    }
	    newChildren.push(this.children[i]);
	    this.children = newChildren;
	  }
	  return this;
	};

	/**
	 * Call String.prototype.replace on the very right-most source snippet. Useful
	 * for trimming whitespace from the end of a source node, etc.
	 *
	 * @param aPattern The pattern to replace.
	 * @param aReplacement The thing to replace the pattern with.
	 */
	SourceNode$1.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	  var lastChild = this.children[this.children.length - 1];
	  if (lastChild[isSourceNode$1]) {
	    lastChild.replaceRight(aPattern, aReplacement);
	  }
	  else if (typeof lastChild === 'string') {
	    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	  }
	  else {
	    this.children.push(''.replace(aPattern, aReplacement));
	  }
	  return this;
	};

	/**
	 * Set the source content for a source file. This will be added to the SourceMapGenerator
	 * in the sourcesContent field.
	 *
	 * @param aSourceFile The filename of the source file
	 * @param aSourceContent The content of the source file
	 */
	SourceNode$1.prototype.setSourceContent =
	  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	    this.sourceContents[util$8.toSetString(aSourceFile)] = aSourceContent;
	  };

	/**
	 * Walk over the tree of SourceNodes. The walking function is called for each
	 * source file content and is passed the filename and source content.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode$1.prototype.walkSourceContents =
	  function SourceNode_walkSourceContents(aFn) {
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      if (this.children[i][isSourceNode$1]) {
	        this.children[i].walkSourceContents(aFn);
	      }
	    }

	    var sources = Object.keys(this.sourceContents);
	    for (var i = 0, len = sources.length; i < len; i++) {
	      aFn(util$8.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	    }
	  };

	/**
	 * Return the string representation of this source node. Walks over the tree
	 * and concatenates all the various snippets together to one string.
	 */
	SourceNode$1.prototype.toString = function SourceNode_toString() {
	  var str = "";
	  this.walk(function (chunk) {
	    str += chunk;
	  });
	  return str;
	};

	/**
	 * Returns the string representation of this source node along with a source
	 * map.
	 */
	SourceNode$1.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	  var generated = {
	    code: "",
	    line: 1,
	    column: 0
	  };
	  var map = new SourceMapGenerator$2(aArgs);
	  var sourceMappingActive = false;
	  var lastOriginalSource = null;
	  var lastOriginalLine = null;
	  var lastOriginalColumn = null;
	  var lastOriginalName = null;
	  this.walk(function (chunk, original) {
	    generated.code += chunk;
	    if (original.source !== null
	        && original.line !== null
	        && original.column !== null) {
	      if(lastOriginalSource !== original.source
	         || lastOriginalLine !== original.line
	         || lastOriginalColumn !== original.column
	         || lastOriginalName !== original.name) {
	        map.addMapping({
	          source: original.source,
	          original: {
	            line: original.line,
	            column: original.column
	          },
	          generated: {
	            line: generated.line,
	            column: generated.column
	          },
	          name: original.name
	        });
	      }
	      lastOriginalSource = original.source;
	      lastOriginalLine = original.line;
	      lastOriginalColumn = original.column;
	      lastOriginalName = original.name;
	      sourceMappingActive = true;
	    } else if (sourceMappingActive) {
	      map.addMapping({
	        generated: {
	          line: generated.line,
	          column: generated.column
	        }
	      });
	      lastOriginalSource = null;
	      sourceMappingActive = false;
	    }
	    for (var idx = 0, length = chunk.length; idx < length; idx++) {
	      if (chunk.charCodeAt(idx) === NEWLINE_CODE$1) {
	        generated.line++;
	        generated.column = 0;
	        // Mappings end at eol
	        if (idx + 1 === length) {
	          lastOriginalSource = null;
	          sourceMappingActive = false;
	        } else if (sourceMappingActive) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	      } else {
	        generated.column++;
	      }
	    }
	  });
	  this.walkSourceContents(function (sourceFile, sourceContent) {
	    map.setSourceContent(sourceFile, sourceContent);
	  });

	  return { code: generated.code, map: map };
	};

	sourceNode$1.SourceNode = SourceNode$1;

	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	sourceMap$1.SourceMapGenerator = sourceMapGenerator$1.SourceMapGenerator;
	sourceMap$1.SourceMapConsumer = sourceMapConsumer$1.SourceMapConsumer;
	sourceMap$1.SourceNode = sourceNode$1.SourceNode;

	Object.defineProperty(sourceMap$2, "__esModule", {
	  value: true
	});
	sourceMap$2.default = void 0;

	var _sourceMap$2 = sourceMap$1;

	class SourceMap {
	  constructor(opts, code) {
	    this._cachedMap = void 0;
	    this._code = void 0;
	    this._opts = void 0;
	    this._rawMappings = void 0;
	    this._lastGenLine = void 0;
	    this._lastSourceLine = void 0;
	    this._lastSourceColumn = void 0;
	    this._cachedMap = null;
	    this._code = code;
	    this._opts = opts;
	    this._rawMappings = [];
	  }

	  get() {
	    if (!this._cachedMap) {
	      const map = this._cachedMap = new _sourceMap$2.SourceMapGenerator({
	        sourceRoot: this._opts.sourceRoot
	      });
	      const code = this._code;

	      if (typeof code === "string") {
	        map.setSourceContent(this._opts.sourceFileName.replace(/\\/g, "/"), code);
	      } else if (typeof code === "object") {
	        Object.keys(code).forEach(sourceFileName => {
	          map.setSourceContent(sourceFileName.replace(/\\/g, "/"), code[sourceFileName]);
	        });
	      }

	      this._rawMappings.forEach(mapping => map.addMapping(mapping), map);
	    }

	    return this._cachedMap.toJSON();
	  }

	  getRawMappings() {
	    return this._rawMappings.slice();
	  }

	  mark(generatedLine, generatedColumn, line, column, identifierName, filename, force) {
	    if (this._lastGenLine !== generatedLine && line === null) return;

	    if (!force && this._lastGenLine === generatedLine && this._lastSourceLine === line && this._lastSourceColumn === column) {
	      return;
	    }

	    this._cachedMap = null;
	    this._lastGenLine = generatedLine;
	    this._lastSourceLine = line;
	    this._lastSourceColumn = column;

	    this._rawMappings.push({
	      name: identifierName || undefined,
	      generated: {
	        line: generatedLine,
	        column: generatedColumn
	      },
	      source: line == null ? undefined : (filename || this._opts.sourceFileName).replace(/\\/g, "/"),
	      original: line == null ? undefined : {
	        line: line,
	        column: column
	      }
	    });
	  }

	}

	sourceMap$2.default = SourceMap;

	var printer$1 = {};

	var buffer$1 = {};

	Object.defineProperty(buffer$1, "__esModule", {
	  value: true
	});
	buffer$1.default = void 0;
	const SPACES_RE = /^[ \t]+$/;

	class Buffer$1 {
	  constructor(map) {
	    this._map = null;
	    this._buf = "";
	    this._last = 0;
	    this._queue = [];
	    this._position = {
	      line: 1,
	      column: 0
	    };
	    this._sourcePosition = {
	      identifierName: null,
	      line: null,
	      column: null,
	      filename: null
	    };
	    this._disallowedPop = null;
	    this._map = map;
	  }

	  get() {
	    this._flush();

	    const map = this._map;
	    const result = {
	      code: this._buf.trimRight(),
	      map: null,
	      rawMappings: map == null ? void 0 : map.getRawMappings()
	    };

	    if (map) {
	      Object.defineProperty(result, "map", {
	        configurable: true,
	        enumerable: true,

	        get() {
	          return this.map = map.get();
	        },

	        set(value) {
	          Object.defineProperty(this, "map", {
	            value,
	            writable: true
	          });
	        }

	      });
	    }

	    return result;
	  }

	  append(str) {
	    this._flush();

	    const {
	      line,
	      column,
	      filename,
	      identifierName,
	      force
	    } = this._sourcePosition;

	    this._append(str, line, column, identifierName, filename, force);
	  }

	  queue(str) {
	    if (str === "\n") {
	      while (this._queue.length > 0 && SPACES_RE.test(this._queue[0][0])) {
	        this._queue.shift();
	      }
	    }

	    const {
	      line,
	      column,
	      filename,
	      identifierName,
	      force
	    } = this._sourcePosition;

	    this._queue.unshift([str, line, column, identifierName, filename, force]);
	  }

	  _flush() {
	    let item;

	    while (item = this._queue.pop()) {
	      this._append(...item);
	    }
	  }

	  _append(str, line, column, identifierName, filename, force) {
	    this._buf += str;
	    this._last = str.charCodeAt(str.length - 1);
	    let i = str.indexOf("\n");
	    let last = 0;

	    if (i !== 0) {
	      this._mark(line, column, identifierName, filename, force);
	    }

	    while (i !== -1) {
	      this._position.line++;
	      this._position.column = 0;
	      last = i + 1;

	      if (last < str.length) {
	        this._mark(++line, 0, identifierName, filename, force);
	      }

	      i = str.indexOf("\n", last);
	    }

	    this._position.column += str.length - last;
	  }

	  _mark(line, column, identifierName, filename, force) {
	    var _this$_map;

	    (_this$_map = this._map) == null ? void 0 : _this$_map.mark(this._position.line, this._position.column, line, column, identifierName, filename, force);
	  }

	  removeTrailingNewline() {
	    if (this._queue.length > 0 && this._queue[0][0] === "\n") {
	      this._queue.shift();
	    }
	  }

	  removeLastSemicolon() {
	    if (this._queue.length > 0 && this._queue[0][0] === ";") {
	      this._queue.shift();
	    }
	  }

	  getLastChar() {
	    let last;

	    if (this._queue.length > 0) {
	      const str = this._queue[0][0];
	      last = str.charCodeAt(0);
	    } else {
	      last = this._last;
	    }

	    return last;
	  }

	  endsWithCharAndNewline() {
	    const queue = this._queue;

	    if (queue.length > 0) {
	      const last = queue[0][0];
	      const lastCp = last.charCodeAt(0);
	      if (lastCp !== 10) return;

	      if (queue.length > 1) {
	        const secondLast = queue[1][0];
	        return secondLast.charCodeAt(0);
	      } else {
	        return this._last;
	      }
	    }
	  }

	  hasContent() {
	    return this._queue.length > 0 || !!this._last;
	  }

	  exactSource(loc, cb) {
	    this.source("start", loc, true);
	    cb();
	    this.source("end", loc);

	    this._disallowPop("start", loc);
	  }

	  source(prop, loc, force) {
	    if (prop && !loc) return;

	    this._normalizePosition(prop, loc, this._sourcePosition, force);
	  }

	  withSource(prop, loc, cb) {
	    if (!this._map) return cb();
	    const originalLine = this._sourcePosition.line;
	    const originalColumn = this._sourcePosition.column;
	    const originalFilename = this._sourcePosition.filename;
	    const originalIdentifierName = this._sourcePosition.identifierName;
	    this.source(prop, loc);
	    cb();

	    if ((!this._sourcePosition.force || this._sourcePosition.line !== originalLine || this._sourcePosition.column !== originalColumn || this._sourcePosition.filename !== originalFilename) && (!this._disallowedPop || this._disallowedPop.line !== originalLine || this._disallowedPop.column !== originalColumn || this._disallowedPop.filename !== originalFilename)) {
	      this._sourcePosition.line = originalLine;
	      this._sourcePosition.column = originalColumn;
	      this._sourcePosition.filename = originalFilename;
	      this._sourcePosition.identifierName = originalIdentifierName;
	      this._sourcePosition.force = false;
	      this._disallowedPop = null;
	    }
	  }

	  _disallowPop(prop, loc) {
	    if (prop && !loc) return;
	    this._disallowedPop = this._normalizePosition(prop, loc);
	  }

	  _normalizePosition(prop, loc, targetObj, force) {
	    const pos = loc ? loc[prop] : null;

	    if (targetObj === undefined) {
	      targetObj = {
	        identifierName: null,
	        line: null,
	        column: null,
	        filename: null,
	        force: false
	      };
	    }

	    const origLine = targetObj.line;
	    const origColumn = targetObj.column;
	    const origFilename = targetObj.filename;
	    targetObj.identifierName = prop === "start" && (loc == null ? void 0 : loc.identifierName) || null;
	    targetObj.line = pos == null ? void 0 : pos.line;
	    targetObj.column = pos == null ? void 0 : pos.column;
	    targetObj.filename = loc == null ? void 0 : loc.filename;

	    if (force || targetObj.line !== origLine || targetObj.column !== origColumn || targetObj.filename !== origFilename) {
	      targetObj.force = force;
	    }

	    return targetObj;
	  }

	  getCurrentColumn() {
	    const extra = this._queue.reduce((acc, item) => item[0] + acc, "");

	    const lastIndex = extra.lastIndexOf("\n");
	    return lastIndex === -1 ? this._position.column + extra.length : extra.length - 1 - lastIndex;
	  }

	  getCurrentLine() {
	    const extra = this._queue.reduce((acc, item) => item[0] + acc, "");

	    let count = 0;

	    for (let i = 0; i < extra.length; i++) {
	      if (extra[i] === "\n") count++;
	    }

	    return this._position.line + count;
	  }

	}

	buffer$1.default = Buffer$1;

	var node$4 = {};

	var whitespace$3 = {};

	Object.defineProperty(whitespace$3, "__esModule", {
	  value: true
	});
	whitespace$3.list = whitespace$3.nodes = void 0;

	var _t$E = lib$s;

	const {
	  FLIPPED_ALIAS_KEYS: FLIPPED_ALIAS_KEYS$2,
	  isArrayExpression,
	  isAssignmentExpression: isAssignmentExpression$2,
	  isBinary: isBinary$1,
	  isBlockStatement: isBlockStatement$1,
	  isCallExpression: isCallExpression$4,
	  isFunction: isFunction$4,
	  isIdentifier: isIdentifier$8,
	  isLiteral: isLiteral$3,
	  isMemberExpression: isMemberExpression$5,
	  isObjectExpression,
	  isOptionalCallExpression: isOptionalCallExpression$2,
	  isOptionalMemberExpression: isOptionalMemberExpression$2,
	  isStringLiteral: isStringLiteral$3
	} = _t$E;

	function crawl(node, state = {}) {
	  if (isMemberExpression$5(node) || isOptionalMemberExpression$2(node)) {
	    crawl(node.object, state);
	    if (node.computed) crawl(node.property, state);
	  } else if (isBinary$1(node) || isAssignmentExpression$2(node)) {
	    crawl(node.left, state);
	    crawl(node.right, state);
	  } else if (isCallExpression$4(node) || isOptionalCallExpression$2(node)) {
	    state.hasCall = true;
	    crawl(node.callee, state);
	  } else if (isFunction$4(node)) {
	    state.hasFunction = true;
	  } else if (isIdentifier$8(node)) {
	    state.hasHelper = state.hasHelper || isHelper(node.callee);
	  }

	  return state;
	}

	function isHelper(node) {
	  if (isMemberExpression$5(node)) {
	    return isHelper(node.object) || isHelper(node.property);
	  } else if (isIdentifier$8(node)) {
	    return node.name === "require" || node.name[0] === "_";
	  } else if (isCallExpression$4(node)) {
	    return isHelper(node.callee);
	  } else if (isBinary$1(node) || isAssignmentExpression$2(node)) {
	    return isIdentifier$8(node.left) && isHelper(node.left) || isHelper(node.right);
	  } else {
	    return false;
	  }
	}

	function isType$1(node) {
	  return isLiteral$3(node) || isObjectExpression(node) || isArrayExpression(node) || isIdentifier$8(node) || isMemberExpression$5(node);
	}

	const nodes = {
	  AssignmentExpression(node) {
	    const state = crawl(node.right);

	    if (state.hasCall && state.hasHelper || state.hasFunction) {
	      return {
	        before: state.hasFunction,
	        after: true
	      };
	    }
	  },

	  SwitchCase(node, parent) {
	    return {
	      before: !!node.consequent.length || parent.cases[0] === node,
	      after: !node.consequent.length && parent.cases[parent.cases.length - 1] === node
	    };
	  },

	  LogicalExpression(node) {
	    if (isFunction$4(node.left) || isFunction$4(node.right)) {
	      return {
	        after: true
	      };
	    }
	  },

	  Literal(node) {
	    if (isStringLiteral$3(node) && node.value === "use strict") {
	      return {
	        after: true
	      };
	    }
	  },

	  CallExpression(node) {
	    if (isFunction$4(node.callee) || isHelper(node)) {
	      return {
	        before: true,
	        after: true
	      };
	    }
	  },

	  OptionalCallExpression(node) {
	    if (isFunction$4(node.callee)) {
	      return {
	        before: true,
	        after: true
	      };
	    }
	  },

	  VariableDeclaration(node) {
	    for (let i = 0; i < node.declarations.length; i++) {
	      const declar = node.declarations[i];
	      let enabled = isHelper(declar.id) && !isType$1(declar.init);

	      if (!enabled) {
	        const state = crawl(declar.init);
	        enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
	      }

	      if (enabled) {
	        return {
	          before: true,
	          after: true
	        };
	      }
	    }
	  },

	  IfStatement(node) {
	    if (isBlockStatement$1(node.consequent)) {
	      return {
	        before: true,
	        after: true
	      };
	    }
	  }

	};
	whitespace$3.nodes = nodes;

	nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function (node, parent) {
	  if (parent.properties[0] === node) {
	    return {
	      before: true
	    };
	  }
	};

	nodes.ObjectTypeCallProperty = function (node, parent) {
	  var _parent$properties;

	  if (parent.callProperties[0] === node && !((_parent$properties = parent.properties) != null && _parent$properties.length)) {
	    return {
	      before: true
	    };
	  }
	};

	nodes.ObjectTypeIndexer = function (node, parent) {
	  var _parent$properties2, _parent$callPropertie;

	  if (parent.indexers[0] === node && !((_parent$properties2 = parent.properties) != null && _parent$properties2.length) && !((_parent$callPropertie = parent.callProperties) != null && _parent$callPropertie.length)) {
	    return {
	      before: true
	    };
	  }
	};

	nodes.ObjectTypeInternalSlot = function (node, parent) {
	  var _parent$properties3, _parent$callPropertie2, _parent$indexers;

	  if (parent.internalSlots[0] === node && !((_parent$properties3 = parent.properties) != null && _parent$properties3.length) && !((_parent$callPropertie2 = parent.callProperties) != null && _parent$callPropertie2.length) && !((_parent$indexers = parent.indexers) != null && _parent$indexers.length)) {
	    return {
	      before: true
	    };
	  }
	};

	const list$1 = {
	  VariableDeclaration(node) {
	    return node.declarations.map(decl => decl.init);
	  },

	  ArrayExpression(node) {
	    return node.elements;
	  },

	  ObjectExpression(node) {
	    return node.properties;
	  }

	};
	whitespace$3.list = list$1;
	[["Function", true], ["Class", true], ["Loop", true], ["LabeledStatement", true], ["SwitchStatement", true], ["TryStatement", true]].forEach(function ([type, amounts]) {
	  if (typeof amounts === "boolean") {
	    amounts = {
	      after: amounts,
	      before: amounts
	    };
	  }

	  [type].concat(FLIPPED_ALIAS_KEYS$2[type] || []).forEach(function (type) {
	    nodes[type] = function () {
	      return amounts;
	    };
	  });
	});

	var parentheses = {};

	Object.defineProperty(parentheses, "__esModule", {
	  value: true
	});
	parentheses.NullableTypeAnnotation = NullableTypeAnnotation;
	parentheses.FunctionTypeAnnotation = FunctionTypeAnnotation;
	parentheses.UpdateExpression = UpdateExpression$1;
	parentheses.ObjectExpression = ObjectExpression$1;
	parentheses.DoExpression = DoExpression$1;
	parentheses.Binary = Binary;
	parentheses.IntersectionTypeAnnotation = parentheses.UnionTypeAnnotation = UnionTypeAnnotation;
	parentheses.OptionalIndexedAccessType = OptionalIndexedAccessType;
	parentheses.TSAsExpression = TSAsExpression$1;
	parentheses.TSTypeAssertion = TSTypeAssertion$1;
	parentheses.TSIntersectionType = parentheses.TSUnionType = TSUnionType$1;
	parentheses.TSInferType = TSInferType$1;
	parentheses.BinaryExpression = BinaryExpression;
	parentheses.SequenceExpression = SequenceExpression$1;
	parentheses.AwaitExpression = parentheses.YieldExpression = YieldExpression$1;
	parentheses.ClassExpression = ClassExpression;
	parentheses.UnaryLike = UnaryLike;
	parentheses.FunctionExpression = FunctionExpression$1;
	parentheses.ArrowFunctionExpression = ArrowFunctionExpression$1;
	parentheses.ConditionalExpression = ConditionalExpression$1;
	parentheses.OptionalCallExpression = parentheses.OptionalMemberExpression = OptionalMemberExpression$1;
	parentheses.AssignmentExpression = AssignmentExpression$1;
	parentheses.LogicalExpression = LogicalExpression;
	parentheses.Identifier = Identifier$1;

	var _t$D = lib$s;

	const {
	  isArrayTypeAnnotation,
	  isArrowFunctionExpression,
	  isAssignmentExpression: isAssignmentExpression$1,
	  isAwaitExpression,
	  isBinary,
	  isBinaryExpression,
	  isCallExpression: isCallExpression$3,
	  isClassDeclaration: isClassDeclaration$1,
	  isClassExpression,
	  isConditional,
	  isConditionalExpression,
	  isExportDeclaration,
	  isExportDefaultDeclaration: isExportDefaultDeclaration$1,
	  isExpressionStatement: isExpressionStatement$2,
	  isFor: isFor$1,
	  isForInStatement,
	  isForOfStatement,
	  isForStatement: isForStatement$1,
	  isIfStatement: isIfStatement$1,
	  isIndexedAccessType,
	  isIntersectionTypeAnnotation,
	  isLogicalExpression,
	  isMemberExpression: isMemberExpression$4,
	  isNewExpression: isNewExpression$3,
	  isNullableTypeAnnotation,
	  isObjectPattern,
	  isOptionalCallExpression: isOptionalCallExpression$1,
	  isOptionalMemberExpression: isOptionalMemberExpression$1,
	  isReturnStatement,
	  isSequenceExpression,
	  isSwitchStatement,
	  isTSArrayType,
	  isTSAsExpression,
	  isTSIntersectionType,
	  isTSNonNullExpression,
	  isTSOptionalType,
	  isTSRestType,
	  isTSTypeAssertion,
	  isTSUnionType,
	  isTaggedTemplateExpression,
	  isThrowStatement,
	  isTypeAnnotation: isTypeAnnotation$1,
	  isUnaryLike,
	  isUnionTypeAnnotation: isUnionTypeAnnotation$1,
	  isVariableDeclarator: isVariableDeclarator$1,
	  isWhileStatement,
	  isYieldExpression
	} = _t$D;
	const PRECEDENCE = {
	  "||": 0,
	  "??": 0,
	  "&&": 1,
	  "|": 2,
	  "^": 3,
	  "&": 4,
	  "==": 5,
	  "===": 5,
	  "!=": 5,
	  "!==": 5,
	  "<": 6,
	  ">": 6,
	  "<=": 6,
	  ">=": 6,
	  in: 6,
	  instanceof: 6,
	  ">>": 7,
	  "<<": 7,
	  ">>>": 7,
	  "+": 8,
	  "-": 8,
	  "*": 9,
	  "/": 9,
	  "%": 9,
	  "**": 10
	};

	const isClassExtendsClause = (node, parent) => (isClassDeclaration$1(parent) || isClassExpression(parent)) && parent.superClass === node;

	const hasPostfixPart = (node, parent) => (isMemberExpression$4(parent) || isOptionalMemberExpression$1(parent)) && parent.object === node || (isCallExpression$3(parent) || isOptionalCallExpression$1(parent) || isNewExpression$3(parent)) && parent.callee === node || isTaggedTemplateExpression(parent) && parent.tag === node || isTSNonNullExpression(parent);

	function NullableTypeAnnotation(node, parent) {
	  return isArrayTypeAnnotation(parent);
	}

	function FunctionTypeAnnotation(node, parent, printStack) {
	  return isUnionTypeAnnotation$1(parent) || isIntersectionTypeAnnotation(parent) || isArrayTypeAnnotation(parent) || isTypeAnnotation$1(parent) && isArrowFunctionExpression(printStack[printStack.length - 3]);
	}

	function UpdateExpression$1(node, parent) {
	  return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);
	}

	function ObjectExpression$1(node, parent, printStack) {
	  return isFirstInContext(printStack, {
	    expressionStatement: true,
	    arrowBody: true
	  });
	}

	function DoExpression$1(node, parent, printStack) {
	  return !node.async && isFirstInContext(printStack, {
	    expressionStatement: true
	  });
	}

	function Binary(node, parent) {
	  if (node.operator === "**" && isBinaryExpression(parent, {
	    operator: "**"
	  })) {
	    return parent.left === node;
	  }

	  if (isClassExtendsClause(node, parent)) {
	    return true;
	  }

	  if (hasPostfixPart(node, parent) || isUnaryLike(parent) || isAwaitExpression(parent)) {
	    return true;
	  }

	  if (isBinary(parent)) {
	    const parentOp = parent.operator;
	    const parentPos = PRECEDENCE[parentOp];
	    const nodeOp = node.operator;
	    const nodePos = PRECEDENCE[nodeOp];

	    if (parentPos === nodePos && parent.right === node && !isLogicalExpression(parent) || parentPos > nodePos) {
	      return true;
	    }
	  }
	}

	function UnionTypeAnnotation(node, parent) {
	  return isArrayTypeAnnotation(parent) || isNullableTypeAnnotation(parent) || isIntersectionTypeAnnotation(parent) || isUnionTypeAnnotation$1(parent);
	}

	function OptionalIndexedAccessType(node, parent) {
	  return isIndexedAccessType(parent, {
	    objectType: node
	  });
	}

	function TSAsExpression$1() {
	  return true;
	}

	function TSTypeAssertion$1() {
	  return true;
	}

	function TSUnionType$1(node, parent) {
	  return isTSArrayType(parent) || isTSOptionalType(parent) || isTSIntersectionType(parent) || isTSUnionType(parent) || isTSRestType(parent);
	}

	function TSInferType$1(node, parent) {
	  return isTSArrayType(parent) || isTSOptionalType(parent);
	}

	function BinaryExpression(node, parent) {
	  return node.operator === "in" && (isVariableDeclarator$1(parent) || isFor$1(parent));
	}

	function SequenceExpression$1(node, parent) {
	  if (isForStatement$1(parent) || isThrowStatement(parent) || isReturnStatement(parent) || isIfStatement$1(parent) && parent.test === node || isWhileStatement(parent) && parent.test === node || isForInStatement(parent) && parent.right === node || isSwitchStatement(parent) && parent.discriminant === node || isExpressionStatement$2(parent) && parent.expression === node) {
	    return false;
	  }

	  return true;
	}

	function YieldExpression$1(node, parent) {
	  return isBinary(parent) || isUnaryLike(parent) || hasPostfixPart(node, parent) || isAwaitExpression(parent) && isYieldExpression(node) || isConditionalExpression(parent) && node === parent.test || isClassExtendsClause(node, parent);
	}

	function ClassExpression(node, parent, printStack) {
	  return isFirstInContext(printStack, {
	    expressionStatement: true,
	    exportDefault: true
	  });
	}

	function UnaryLike(node, parent) {
	  return hasPostfixPart(node, parent) || isBinaryExpression(parent, {
	    operator: "**",
	    left: node
	  }) || isClassExtendsClause(node, parent);
	}

	function FunctionExpression$1(node, parent, printStack) {
	  return isFirstInContext(printStack, {
	    expressionStatement: true,
	    exportDefault: true
	  });
	}

	function ArrowFunctionExpression$1(node, parent) {
	  return isExportDeclaration(parent) || ConditionalExpression$1(node, parent);
	}

	function ConditionalExpression$1(node, parent) {
	  if (isUnaryLike(parent) || isBinary(parent) || isConditionalExpression(parent, {
	    test: node
	  }) || isAwaitExpression(parent) || isTSTypeAssertion(parent) || isTSAsExpression(parent)) {
	    return true;
	  }

	  return UnaryLike(node, parent);
	}

	function OptionalMemberExpression$1(node, parent) {
	  return isCallExpression$3(parent, {
	    callee: node
	  }) || isMemberExpression$4(parent, {
	    object: node
	  });
	}

	function AssignmentExpression$1(node, parent) {
	  if (isObjectPattern(node.left)) {
	    return true;
	  } else {
	    return ConditionalExpression$1(node, parent);
	  }
	}

	function LogicalExpression(node, parent) {
	  switch (node.operator) {
	    case "||":
	      if (!isLogicalExpression(parent)) return false;
	      return parent.operator === "??" || parent.operator === "&&";

	    case "&&":
	      return isLogicalExpression(parent, {
	        operator: "??"
	      });

	    case "??":
	      return isLogicalExpression(parent) && parent.operator !== "??";
	  }
	}

	function Identifier$1(node, parent, printStack) {
	  if (node.name === "let") {
	    const isFollowedByBracket = isMemberExpression$4(parent, {
	      object: node,
	      computed: true
	    }) || isOptionalMemberExpression$1(parent, {
	      object: node,
	      computed: true,
	      optional: false
	    });
	    return isFirstInContext(printStack, {
	      expressionStatement: isFollowedByBracket,
	      forHead: isFollowedByBracket,
	      forInHead: isFollowedByBracket,
	      forOfHead: true
	    });
	  }

	  return node.name === "async" && isForOfStatement(parent) && node === parent.left;
	}

	function isFirstInContext(printStack, {
	  expressionStatement = false,
	  arrowBody = false,
	  exportDefault = false,
	  forHead = false,
	  forInHead = false,
	  forOfHead = false
	}) {
	  let i = printStack.length - 1;
	  let node = printStack[i];
	  i--;
	  let parent = printStack[i];

	  while (i >= 0) {
	    if (expressionStatement && isExpressionStatement$2(parent, {
	      expression: node
	    }) || exportDefault && isExportDefaultDeclaration$1(parent, {
	      declaration: node
	    }) || arrowBody && isArrowFunctionExpression(parent, {
	      body: node
	    }) || forHead && isForStatement$1(parent, {
	      init: node
	    }) || forInHead && isForInStatement(parent, {
	      left: node
	    }) || forOfHead && isForOfStatement(parent, {
	      left: node
	    })) {
	      return true;
	    }

	    if (hasPostfixPart(node, parent) && !isNewExpression$3(parent) || isSequenceExpression(parent) && parent.expressions[0] === node || isConditional(parent, {
	      test: node
	    }) || isBinary(parent, {
	      left: node
	    }) || isAssignmentExpression$1(parent, {
	      left: node
	    })) {
	      node = parent;
	      i--;
	      parent = printStack[i];
	    } else {
	      return false;
	    }
	  }

	  return false;
	}

	Object.defineProperty(node$4, "__esModule", {
	  value: true
	});
	node$4.needsWhitespace = needsWhitespace;
	node$4.needsWhitespaceBefore = needsWhitespaceBefore$1;
	node$4.needsWhitespaceAfter = needsWhitespaceAfter$1;
	node$4.needsParens = needsParens$1;

	var whitespace$2 = whitespace$3;

	var parens = parentheses;

	var _t$C = lib$s;

	const {
	  FLIPPED_ALIAS_KEYS: FLIPPED_ALIAS_KEYS$1,
	  isCallExpression: isCallExpression$2,
	  isExpressionStatement: isExpressionStatement$1,
	  isMemberExpression: isMemberExpression$3,
	  isNewExpression: isNewExpression$2
	} = _t$C;

	function expandAliases(obj) {
	  const newObj = {};

	  function add(type, func) {
	    const fn = newObj[type];
	    newObj[type] = fn ? function (node, parent, stack) {
	      const result = fn(node, parent, stack);
	      return result == null ? func(node, parent, stack) : result;
	    } : func;
	  }

	  for (const type of Object.keys(obj)) {
	    const aliases = FLIPPED_ALIAS_KEYS$1[type];

	    if (aliases) {
	      for (const alias of aliases) {
	        add(alias, obj[type]);
	      }
	    } else {
	      add(type, obj[type]);
	    }
	  }

	  return newObj;
	}

	const expandedParens = expandAliases(parens);
	const expandedWhitespaceNodes = expandAliases(whitespace$2.nodes);
	const expandedWhitespaceList = expandAliases(whitespace$2.list);

	function find$3(obj, node, parent, printStack) {
	  const fn = obj[node.type];
	  return fn ? fn(node, parent, printStack) : null;
	}

	function isOrHasCallExpression(node) {
	  if (isCallExpression$2(node)) {
	    return true;
	  }

	  return isMemberExpression$3(node) && isOrHasCallExpression(node.object);
	}

	function needsWhitespace(node, parent, type) {
	  if (!node) return 0;

	  if (isExpressionStatement$1(node)) {
	    node = node.expression;
	  }

	  let linesInfo = find$3(expandedWhitespaceNodes, node, parent);

	  if (!linesInfo) {
	    const items = find$3(expandedWhitespaceList, node, parent);

	    if (items) {
	      for (let i = 0; i < items.length; i++) {
	        linesInfo = needsWhitespace(items[i], node, type);
	        if (linesInfo) break;
	      }
	    }
	  }

	  if (typeof linesInfo === "object" && linesInfo !== null) {
	    return linesInfo[type] || 0;
	  }

	  return 0;
	}

	function needsWhitespaceBefore$1(node, parent) {
	  return needsWhitespace(node, parent, "before");
	}

	function needsWhitespaceAfter$1(node, parent) {
	  return needsWhitespace(node, parent, "after");
	}

	function needsParens$1(node, parent, printStack) {
	  if (!parent) return false;

	  if (isNewExpression$2(parent) && parent.callee === node) {
	    if (isOrHasCallExpression(node)) return true;
	  }

	  return find$3(expandedParens, node, parent, printStack);
	}

	var generators = {};

	var templateLiterals = {};

	Object.defineProperty(templateLiterals, "__esModule", {
	  value: true
	});
	templateLiterals.TaggedTemplateExpression = TaggedTemplateExpression;
	templateLiterals.TemplateElement = TemplateElement;
	templateLiterals.TemplateLiteral = TemplateLiteral;

	function TaggedTemplateExpression(node) {
	  this.print(node.tag, node);
	  this.print(node.typeParameters, node);
	  this.print(node.quasi, node);
	}

	function TemplateElement(node, parent) {
	  const isFirst = parent.quasis[0] === node;
	  const isLast = parent.quasis[parent.quasis.length - 1] === node;
	  const value = (isFirst ? "`" : "}") + node.value.raw + (isLast ? "`" : "${");
	  this.token(value);
	}

	function TemplateLiteral(node) {
	  const quasis = node.quasis;

	  for (let i = 0; i < quasis.length; i++) {
	    this.print(quasis[i], node);

	    if (i + 1 < quasis.length) {
	      this.print(node.expressions[i], node);
	    }
	  }
	}

	var expressions$1 = {};

	Object.defineProperty(expressions$1, "__esModule", {
	  value: true
	});
	expressions$1.UnaryExpression = UnaryExpression;
	expressions$1.DoExpression = DoExpression;
	expressions$1.ParenthesizedExpression = ParenthesizedExpression;
	expressions$1.UpdateExpression = UpdateExpression;
	expressions$1.ConditionalExpression = ConditionalExpression;
	expressions$1.NewExpression = NewExpression;
	expressions$1.SequenceExpression = SequenceExpression;
	expressions$1.ThisExpression = ThisExpression;
	expressions$1.Super = Super;
	expressions$1.Decorator = Decorator;
	expressions$1.OptionalMemberExpression = OptionalMemberExpression;
	expressions$1.OptionalCallExpression = OptionalCallExpression;
	expressions$1.CallExpression = CallExpression;
	expressions$1.Import = Import;
	expressions$1.EmptyStatement = EmptyStatement;
	expressions$1.ExpressionStatement = ExpressionStatement;
	expressions$1.AssignmentPattern = AssignmentPattern;
	expressions$1.LogicalExpression = expressions$1.BinaryExpression = expressions$1.AssignmentExpression = AssignmentExpression;
	expressions$1.BindExpression = BindExpression;
	expressions$1.MemberExpression = MemberExpression;
	expressions$1.MetaProperty = MetaProperty;
	expressions$1.PrivateName = PrivateName;
	expressions$1.V8IntrinsicIdentifier = V8IntrinsicIdentifier;
	expressions$1.ModuleExpression = ModuleExpression;
	expressions$1.AwaitExpression = expressions$1.YieldExpression = void 0;

	var _t$B = lib$s;

	var n$1 = node$4;

	const {
	  isCallExpression: isCallExpression$1,
	  isLiteral: isLiteral$2,
	  isMemberExpression: isMemberExpression$2,
	  isNewExpression: isNewExpression$1
	} = _t$B;

	function UnaryExpression(node) {
	  if (node.operator === "void" || node.operator === "delete" || node.operator === "typeof" || node.operator === "throw") {
	    this.word(node.operator);
	    this.space();
	  } else {
	    this.token(node.operator);
	  }

	  this.print(node.argument, node);
	}

	function DoExpression(node) {
	  if (node.async) {
	    this.word("async");
	    this.space();
	  }

	  this.word("do");
	  this.space();
	  this.print(node.body, node);
	}

	function ParenthesizedExpression(node) {
	  this.token("(");
	  this.print(node.expression, node);
	  this.token(")");
	}

	function UpdateExpression(node) {
	  if (node.prefix) {
	    this.token(node.operator);
	    this.print(node.argument, node);
	  } else {
	    this.startTerminatorless(true);
	    this.print(node.argument, node);
	    this.endTerminatorless();
	    this.token(node.operator);
	  }
	}

	function ConditionalExpression(node) {
	  this.print(node.test, node);
	  this.space();
	  this.token("?");
	  this.space();
	  this.print(node.consequent, node);
	  this.space();
	  this.token(":");
	  this.space();
	  this.print(node.alternate, node);
	}

	function NewExpression(node, parent) {
	  this.word("new");
	  this.space();
	  this.print(node.callee, node);

	  if (this.format.minified && node.arguments.length === 0 && !node.optional && !isCallExpression$1(parent, {
	    callee: node
	  }) && !isMemberExpression$2(parent) && !isNewExpression$1(parent)) {
	    return;
	  }

	  this.print(node.typeArguments, node);
	  this.print(node.typeParameters, node);

	  if (node.optional) {
	    this.token("?.");
	  }

	  this.token("(");
	  this.printList(node.arguments, node);
	  this.token(")");
	}

	function SequenceExpression(node) {
	  this.printList(node.expressions, node);
	}

	function ThisExpression() {
	  this.word("this");
	}

	function Super() {
	  this.word("super");
	}

	function Decorator(node) {
	  this.token("@");
	  this.print(node.expression, node);
	  this.newline();
	}

	function OptionalMemberExpression(node) {
	  this.print(node.object, node);

	  if (!node.computed && isMemberExpression$2(node.property)) {
	    throw new TypeError("Got a MemberExpression for MemberExpression property");
	  }

	  let computed = node.computed;

	  if (isLiteral$2(node.property) && typeof node.property.value === "number") {
	    computed = true;
	  }

	  if (node.optional) {
	    this.token("?.");
	  }

	  if (computed) {
	    this.token("[");
	    this.print(node.property, node);
	    this.token("]");
	  } else {
	    if (!node.optional) {
	      this.token(".");
	    }

	    this.print(node.property, node);
	  }
	}

	function OptionalCallExpression(node) {
	  this.print(node.callee, node);
	  this.print(node.typeArguments, node);
	  this.print(node.typeParameters, node);

	  if (node.optional) {
	    this.token("?.");
	  }

	  this.token("(");
	  this.printList(node.arguments, node);
	  this.token(")");
	}

	function CallExpression(node) {
	  this.print(node.callee, node);
	  this.print(node.typeArguments, node);
	  this.print(node.typeParameters, node);
	  this.token("(");
	  this.printList(node.arguments, node);
	  this.token(")");
	}

	function Import() {
	  this.word("import");
	}

	function buildYieldAwait(keyword) {
	  return function (node) {
	    this.word(keyword);

	    if (node.delegate) {
	      this.token("*");
	    }

	    if (node.argument) {
	      this.space();
	      const terminatorState = this.startTerminatorless();
	      this.print(node.argument, node);
	      this.endTerminatorless(terminatorState);
	    }
	  };
	}

	const YieldExpression = buildYieldAwait("yield");
	expressions$1.YieldExpression = YieldExpression;
	const AwaitExpression = buildYieldAwait("await");
	expressions$1.AwaitExpression = AwaitExpression;

	function EmptyStatement() {
	  this.semicolon(true);
	}

	function ExpressionStatement(node) {
	  this.print(node.expression, node);
	  this.semicolon();
	}

	function AssignmentPattern(node) {
	  this.print(node.left, node);
	  if (node.left.optional) this.token("?");
	  this.print(node.left.typeAnnotation, node);
	  this.space();
	  this.token("=");
	  this.space();
	  this.print(node.right, node);
	}

	function AssignmentExpression(node, parent) {
	  const parens = this.inForStatementInitCounter && node.operator === "in" && !n$1.needsParens(node, parent);

	  if (parens) {
	    this.token("(");
	  }

	  this.print(node.left, node);
	  this.space();

	  if (node.operator === "in" || node.operator === "instanceof") {
	    this.word(node.operator);
	  } else {
	    this.token(node.operator);
	  }

	  this.space();
	  this.print(node.right, node);

	  if (parens) {
	    this.token(")");
	  }
	}

	function BindExpression(node) {
	  this.print(node.object, node);
	  this.token("::");
	  this.print(node.callee, node);
	}

	function MemberExpression(node) {
	  this.print(node.object, node);

	  if (!node.computed && isMemberExpression$2(node.property)) {
	    throw new TypeError("Got a MemberExpression for MemberExpression property");
	  }

	  let computed = node.computed;

	  if (isLiteral$2(node.property) && typeof node.property.value === "number") {
	    computed = true;
	  }

	  if (computed) {
	    this.token("[");
	    this.print(node.property, node);
	    this.token("]");
	  } else {
	    this.token(".");
	    this.print(node.property, node);
	  }
	}

	function MetaProperty(node) {
	  this.print(node.meta, node);
	  this.token(".");
	  this.print(node.property, node);
	}

	function PrivateName(node) {
	  this.token("#");
	  this.print(node.id, node);
	}

	function V8IntrinsicIdentifier(node) {
	  this.token("%");
	  this.word(node.name);
	}

	function ModuleExpression(node) {
	  this.word("module");
	  this.space();
	  this.token("{");

	  if (node.body.body.length === 0) {
	    this.token("}");
	  } else {
	    this.newline();
	    this.printSequence(node.body.body, node, {
	      indent: true
	    });
	    this.rightBrace();
	  }
	}

	var statements$2 = {};

	Object.defineProperty(statements$2, "__esModule", {
	  value: true
	});
	statements$2.WithStatement = WithStatement;
	statements$2.IfStatement = IfStatement;
	statements$2.ForStatement = ForStatement;
	statements$2.WhileStatement = WhileStatement;
	statements$2.DoWhileStatement = DoWhileStatement;
	statements$2.LabeledStatement = LabeledStatement;
	statements$2.TryStatement = TryStatement;
	statements$2.CatchClause = CatchClause;
	statements$2.SwitchStatement = SwitchStatement;
	statements$2.SwitchCase = SwitchCase;
	statements$2.DebuggerStatement = DebuggerStatement;
	statements$2.VariableDeclaration = VariableDeclaration;
	statements$2.VariableDeclarator = VariableDeclarator;
	statements$2.ThrowStatement = statements$2.BreakStatement = statements$2.ReturnStatement = statements$2.ContinueStatement = statements$2.ForOfStatement = statements$2.ForInStatement = void 0;

	var _t$A = lib$s;

	const {
	  isFor,
	  isForStatement,
	  isIfStatement,
	  isStatement: isStatement$4
	} = _t$A;

	function WithStatement(node) {
	  this.word("with");
	  this.space();
	  this.token("(");
	  this.print(node.object, node);
	  this.token(")");
	  this.printBlock(node);
	}

	function IfStatement(node) {
	  this.word("if");
	  this.space();
	  this.token("(");
	  this.print(node.test, node);
	  this.token(")");
	  this.space();
	  const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));

	  if (needsBlock) {
	    this.token("{");
	    this.newline();
	    this.indent();
	  }

	  this.printAndIndentOnComments(node.consequent, node);

	  if (needsBlock) {
	    this.dedent();
	    this.newline();
	    this.token("}");
	  }

	  if (node.alternate) {
	    if (this.endsWith(125)) this.space();
	    this.word("else");
	    this.space();
	    this.printAndIndentOnComments(node.alternate, node);
	  }
	}

	function getLastStatement(statement) {
	  if (!isStatement$4(statement.body)) return statement;
	  return getLastStatement(statement.body);
	}

	function ForStatement(node) {
	  this.word("for");
	  this.space();
	  this.token("(");
	  this.inForStatementInitCounter++;
	  this.print(node.init, node);
	  this.inForStatementInitCounter--;
	  this.token(";");

	  if (node.test) {
	    this.space();
	    this.print(node.test, node);
	  }

	  this.token(";");

	  if (node.update) {
	    this.space();
	    this.print(node.update, node);
	  }

	  this.token(")");
	  this.printBlock(node);
	}

	function WhileStatement(node) {
	  this.word("while");
	  this.space();
	  this.token("(");
	  this.print(node.test, node);
	  this.token(")");
	  this.printBlock(node);
	}

	const buildForXStatement = function (op) {
	  return function (node) {
	    this.word("for");
	    this.space();

	    if (op === "of" && node.await) {
	      this.word("await");
	      this.space();
	    }

	    this.token("(");
	    this.print(node.left, node);
	    this.space();
	    this.word(op);
	    this.space();
	    this.print(node.right, node);
	    this.token(")");
	    this.printBlock(node);
	  };
	};

	const ForInStatement = buildForXStatement("in");
	statements$2.ForInStatement = ForInStatement;
	const ForOfStatement = buildForXStatement("of");
	statements$2.ForOfStatement = ForOfStatement;

	function DoWhileStatement(node) {
	  this.word("do");
	  this.space();
	  this.print(node.body, node);
	  this.space();
	  this.word("while");
	  this.space();
	  this.token("(");
	  this.print(node.test, node);
	  this.token(")");
	  this.semicolon();
	}

	function buildLabelStatement(prefix, key = "label") {
	  return function (node) {
	    this.word(prefix);
	    const label = node[key];

	    if (label) {
	      this.space();
	      const isLabel = key == "label";
	      const terminatorState = this.startTerminatorless(isLabel);
	      this.print(label, node);
	      this.endTerminatorless(terminatorState);
	    }

	    this.semicolon();
	  };
	}

	const ContinueStatement = buildLabelStatement("continue");
	statements$2.ContinueStatement = ContinueStatement;
	const ReturnStatement = buildLabelStatement("return", "argument");
	statements$2.ReturnStatement = ReturnStatement;
	const BreakStatement = buildLabelStatement("break");
	statements$2.BreakStatement = BreakStatement;
	const ThrowStatement = buildLabelStatement("throw", "argument");
	statements$2.ThrowStatement = ThrowStatement;

	function LabeledStatement(node) {
	  this.print(node.label, node);
	  this.token(":");
	  this.space();
	  this.print(node.body, node);
	}

	function TryStatement(node) {
	  this.word("try");
	  this.space();
	  this.print(node.block, node);
	  this.space();

	  if (node.handlers) {
	    this.print(node.handlers[0], node);
	  } else {
	    this.print(node.handler, node);
	  }

	  if (node.finalizer) {
	    this.space();
	    this.word("finally");
	    this.space();
	    this.print(node.finalizer, node);
	  }
	}

	function CatchClause(node) {
	  this.word("catch");
	  this.space();

	  if (node.param) {
	    this.token("(");
	    this.print(node.param, node);
	    this.print(node.param.typeAnnotation, node);
	    this.token(")");
	    this.space();
	  }

	  this.print(node.body, node);
	}

	function SwitchStatement(node) {
	  this.word("switch");
	  this.space();
	  this.token("(");
	  this.print(node.discriminant, node);
	  this.token(")");
	  this.space();
	  this.token("{");
	  this.printSequence(node.cases, node, {
	    indent: true,

	    addNewlines(leading, cas) {
	      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;
	    }

	  });
	  this.token("}");
	}

	function SwitchCase(node) {
	  if (node.test) {
	    this.word("case");
	    this.space();
	    this.print(node.test, node);
	    this.token(":");
	  } else {
	    this.word("default");
	    this.token(":");
	  }

	  if (node.consequent.length) {
	    this.newline();
	    this.printSequence(node.consequent, node, {
	      indent: true
	    });
	  }
	}

	function DebuggerStatement() {
	  this.word("debugger");
	  this.semicolon();
	}

	function variableDeclarationIndent() {
	  this.token(",");
	  this.newline();

	  if (this.endsWith(10)) {
	    for (let i = 0; i < 4; i++) this.space(true);
	  }
	}

	function constDeclarationIndent() {
	  this.token(",");
	  this.newline();

	  if (this.endsWith(10)) {
	    for (let i = 0; i < 6; i++) this.space(true);
	  }
	}

	function VariableDeclaration(node, parent) {
	  if (node.declare) {
	    this.word("declare");
	    this.space();
	  }

	  this.word(node.kind);
	  this.space();
	  let hasInits = false;

	  if (!isFor(parent)) {
	    for (const declar of node.declarations) {
	      if (declar.init) {
	        hasInits = true;
	      }
	    }
	  }

	  let separator;

	  if (hasInits) {
	    separator = node.kind === "const" ? constDeclarationIndent : variableDeclarationIndent;
	  }

	  this.printList(node.declarations, node, {
	    separator
	  });

	  if (isFor(parent)) {
	    if (isForStatement(parent)) {
	      if (parent.init === node) return;
	    } else {
	      if (parent.left === node) return;
	    }
	  }

	  this.semicolon();
	}

	function VariableDeclarator(node) {
	  this.print(node.id, node);
	  if (node.definite) this.token("!");
	  this.print(node.id.typeAnnotation, node);

	  if (node.init) {
	    this.space();
	    this.token("=");
	    this.space();
	    this.print(node.init, node);
	  }
	}

	var classes = {};

	Object.defineProperty(classes, "__esModule", {
	  value: true
	});
	classes.ClassExpression = classes.ClassDeclaration = ClassDeclaration;
	classes.ClassBody = ClassBody;
	classes.ClassProperty = ClassProperty;
	classes.ClassPrivateProperty = ClassPrivateProperty;
	classes.ClassMethod = ClassMethod;
	classes.ClassPrivateMethod = ClassPrivateMethod;
	classes._classMethodHead = _classMethodHead;
	classes.StaticBlock = StaticBlock;

	var _t$z = lib$s;

	const {
	  isExportDefaultDeclaration,
	  isExportNamedDeclaration
	} = _t$z;

	function ClassDeclaration(node, parent) {
	  if (!this.format.decoratorsBeforeExport || !isExportDefaultDeclaration(parent) && !isExportNamedDeclaration(parent)) {
	    this.printJoin(node.decorators, node);
	  }

	  if (node.declare) {
	    this.word("declare");
	    this.space();
	  }

	  if (node.abstract) {
	    this.word("abstract");
	    this.space();
	  }

	  this.word("class");

	  if (node.id) {
	    this.space();
	    this.print(node.id, node);
	  }

	  this.print(node.typeParameters, node);

	  if (node.superClass) {
	    this.space();
	    this.word("extends");
	    this.space();
	    this.print(node.superClass, node);
	    this.print(node.superTypeParameters, node);
	  }

	  if (node.implements) {
	    this.space();
	    this.word("implements");
	    this.space();
	    this.printList(node.implements, node);
	  }

	  this.space();
	  this.print(node.body, node);
	}

	function ClassBody(node) {
	  this.token("{");
	  this.printInnerComments(node);

	  if (node.body.length === 0) {
	    this.token("}");
	  } else {
	    this.newline();
	    this.indent();
	    this.printSequence(node.body, node);
	    this.dedent();
	    if (!this.endsWith(10)) this.newline();
	    this.rightBrace();
	  }
	}

	function ClassProperty(node) {
	  this.printJoin(node.decorators, node);
	  this.source("end", node.key.loc);
	  this.tsPrintClassMemberModifiers(node, true);

	  if (node.computed) {
	    this.token("[");
	    this.print(node.key, node);
	    this.token("]");
	  } else {
	    this._variance(node);

	    this.print(node.key, node);
	  }

	  if (node.optional) {
	    this.token("?");
	  }

	  if (node.definite) {
	    this.token("!");
	  }

	  this.print(node.typeAnnotation, node);

	  if (node.value) {
	    this.space();
	    this.token("=");
	    this.space();
	    this.print(node.value, node);
	  }

	  this.semicolon();
	}

	function ClassPrivateProperty(node) {
	  this.printJoin(node.decorators, node);

	  if (node.static) {
	    this.word("static");
	    this.space();
	  }

	  this.print(node.key, node);
	  this.print(node.typeAnnotation, node);

	  if (node.value) {
	    this.space();
	    this.token("=");
	    this.space();
	    this.print(node.value, node);
	  }

	  this.semicolon();
	}

	function ClassMethod(node) {
	  this._classMethodHead(node);

	  this.space();
	  this.print(node.body, node);
	}

	function ClassPrivateMethod(node) {
	  this._classMethodHead(node);

	  this.space();
	  this.print(node.body, node);
	}

	function _classMethodHead(node) {
	  this.printJoin(node.decorators, node);
	  this.source("end", node.key.loc);
	  this.tsPrintClassMemberModifiers(node, false);

	  this._methodHead(node);
	}

	function StaticBlock(node) {
	  this.word("static");
	  this.space();
	  this.token("{");

	  if (node.body.length === 0) {
	    this.token("}");
	  } else {
	    this.newline();
	    this.printSequence(node.body, node, {
	      indent: true
	    });
	    this.rightBrace();
	  }
	}

	var methods = {};

	Object.defineProperty(methods, "__esModule", {
	  value: true
	});
	methods._params = _params;
	methods._parameters = _parameters;
	methods._param = _param;
	methods._methodHead = _methodHead;
	methods._predicate = _predicate;
	methods._functionHead = _functionHead;
	methods.FunctionDeclaration = methods.FunctionExpression = FunctionExpression;
	methods.ArrowFunctionExpression = ArrowFunctionExpression;

	var _t$y = lib$s;

	const {
	  isIdentifier: isIdentifier$7
	} = _t$y;

	function _params(node) {
	  this.print(node.typeParameters, node);
	  this.token("(");

	  this._parameters(node.params, node);

	  this.token(")");
	  this.print(node.returnType, node);
	}

	function _parameters(parameters, parent) {
	  for (let i = 0; i < parameters.length; i++) {
	    this._param(parameters[i], parent);

	    if (i < parameters.length - 1) {
	      this.token(",");
	      this.space();
	    }
	  }
	}

	function _param(parameter, parent) {
	  this.printJoin(parameter.decorators, parameter);
	  this.print(parameter, parent);
	  if (parameter.optional) this.token("?");
	  this.print(parameter.typeAnnotation, parameter);
	}

	function _methodHead(node) {
	  const kind = node.kind;
	  const key = node.key;

	  if (kind === "get" || kind === "set") {
	    this.word(kind);
	    this.space();
	  }

	  if (node.async) {
	    this._catchUp("start", key.loc);

	    this.word("async");
	    this.space();
	  }

	  if (kind === "method" || kind === "init") {
	    if (node.generator) {
	      this.token("*");
	    }
	  }

	  if (node.computed) {
	    this.token("[");
	    this.print(key, node);
	    this.token("]");
	  } else {
	    this.print(key, node);
	  }

	  if (node.optional) {
	    this.token("?");
	  }

	  this._params(node);
	}

	function _predicate(node) {
	  if (node.predicate) {
	    if (!node.returnType) {
	      this.token(":");
	    }

	    this.space();
	    this.print(node.predicate, node);
	  }
	}

	function _functionHead(node) {
	  if (node.async) {
	    this.word("async");
	    this.space();
	  }

	  this.word("function");
	  if (node.generator) this.token("*");
	  this.space();

	  if (node.id) {
	    this.print(node.id, node);
	  }

	  this._params(node);

	  this._predicate(node);
	}

	function FunctionExpression(node) {
	  this._functionHead(node);

	  this.space();
	  this.print(node.body, node);
	}

	function ArrowFunctionExpression(node) {
	  if (node.async) {
	    this.word("async");
	    this.space();
	  }

	  const firstParam = node.params[0];

	  if (!this.format.retainLines && !this.format.auxiliaryCommentBefore && !this.format.auxiliaryCommentAfter && node.params.length === 1 && isIdentifier$7(firstParam) && !hasTypesOrComments(node, firstParam)) {
	    this.print(firstParam, node);
	  } else {
	    this._params(node);
	  }

	  this._predicate(node);

	  this.space();
	  this.token("=>");
	  this.space();
	  this.print(node.body, node);
	}

	function hasTypesOrComments(node, param) {
	  var _param$leadingComment, _param$trailingCommen;

	  return !!(node.typeParameters || node.returnType || node.predicate || param.typeAnnotation || param.optional || (_param$leadingComment = param.leadingComments) != null && _param$leadingComment.length || (_param$trailingCommen = param.trailingComments) != null && _param$trailingCommen.length);
	}

	var modules = {};

	Object.defineProperty(modules, "__esModule", {
	  value: true
	});
	modules.ImportSpecifier = ImportSpecifier;
	modules.ImportDefaultSpecifier = ImportDefaultSpecifier;
	modules.ExportDefaultSpecifier = ExportDefaultSpecifier;
	modules.ExportSpecifier = ExportSpecifier;
	modules.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
	modules.ExportAllDeclaration = ExportAllDeclaration;
	modules.ExportNamedDeclaration = ExportNamedDeclaration;
	modules.ExportDefaultDeclaration = ExportDefaultDeclaration;
	modules.ImportDeclaration = ImportDeclaration;
	modules.ImportAttribute = ImportAttribute;
	modules.ImportNamespaceSpecifier = ImportNamespaceSpecifier;

	var _t$x = lib$s;

	const {
	  isClassDeclaration,
	  isExportDefaultSpecifier,
	  isExportNamespaceSpecifier,
	  isImportDefaultSpecifier,
	  isImportNamespaceSpecifier,
	  isStatement: isStatement$3
	} = _t$x;

	function ImportSpecifier(node) {
	  if (node.importKind === "type" || node.importKind === "typeof") {
	    this.word(node.importKind);
	    this.space();
	  }

	  this.print(node.imported, node);

	  if (node.local && node.local.name !== node.imported.name) {
	    this.space();
	    this.word("as");
	    this.space();
	    this.print(node.local, node);
	  }
	}

	function ImportDefaultSpecifier(node) {
	  this.print(node.local, node);
	}

	function ExportDefaultSpecifier(node) {
	  this.print(node.exported, node);
	}

	function ExportSpecifier(node) {
	  this.print(node.local, node);

	  if (node.exported && node.local.name !== node.exported.name) {
	    this.space();
	    this.word("as");
	    this.space();
	    this.print(node.exported, node);
	  }
	}

	function ExportNamespaceSpecifier(node) {
	  this.token("*");
	  this.space();
	  this.word("as");
	  this.space();
	  this.print(node.exported, node);
	}

	function ExportAllDeclaration(node) {
	  this.word("export");
	  this.space();

	  if (node.exportKind === "type") {
	    this.word("type");
	    this.space();
	  }

	  this.token("*");
	  this.space();
	  this.word("from");
	  this.space();
	  this.print(node.source, node);
	  this.printAssertions(node);
	  this.semicolon();
	}

	function ExportNamedDeclaration(node) {
	  if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) {
	    this.printJoin(node.declaration.decorators, node);
	  }

	  this.word("export");
	  this.space();
	  ExportDeclaration.apply(this, arguments);
	}

	function ExportDefaultDeclaration(node) {
	  if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) {
	    this.printJoin(node.declaration.decorators, node);
	  }

	  this.word("export");
	  this.space();
	  this.word("default");
	  this.space();
	  ExportDeclaration.apply(this, arguments);
	}

	function ExportDeclaration(node) {
	  if (node.declaration) {
	    const declar = node.declaration;
	    this.print(declar, node);
	    if (!isStatement$3(declar)) this.semicolon();
	  } else {
	    if (node.exportKind === "type") {
	      this.word("type");
	      this.space();
	    }

	    const specifiers = node.specifiers.slice(0);
	    let hasSpecial = false;

	    for (;;) {
	      const first = specifiers[0];

	      if (isExportDefaultSpecifier(first) || isExportNamespaceSpecifier(first)) {
	        hasSpecial = true;
	        this.print(specifiers.shift(), node);

	        if (specifiers.length) {
	          this.token(",");
	          this.space();
	        }
	      } else {
	        break;
	      }
	    }

	    if (specifiers.length || !specifiers.length && !hasSpecial) {
	      this.token("{");

	      if (specifiers.length) {
	        this.space();
	        this.printList(specifiers, node);
	        this.space();
	      }

	      this.token("}");
	    }

	    if (node.source) {
	      this.space();
	      this.word("from");
	      this.space();
	      this.print(node.source, node);
	      this.printAssertions(node);
	    }

	    this.semicolon();
	  }
	}

	function ImportDeclaration(node) {
	  this.word("import");
	  this.space();

	  if (node.importKind === "type" || node.importKind === "typeof") {
	    this.word(node.importKind);
	    this.space();
	  }

	  const specifiers = node.specifiers.slice(0);

	  if (specifiers != null && specifiers.length) {
	    for (;;) {
	      const first = specifiers[0];

	      if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {
	        this.print(specifiers.shift(), node);

	        if (specifiers.length) {
	          this.token(",");
	          this.space();
	        }
	      } else {
	        break;
	      }
	    }

	    if (specifiers.length) {
	      this.token("{");
	      this.space();
	      this.printList(specifiers, node);
	      this.space();
	      this.token("}");
	    }

	    this.space();
	    this.word("from");
	    this.space();
	  }

	  this.print(node.source, node);
	  this.printAssertions(node);
	  {
	    var _node$attributes;

	    if ((_node$attributes = node.attributes) != null && _node$attributes.length) {
	      this.space();
	      this.word("with");
	      this.space();
	      this.printList(node.attributes, node);
	    }
	  }
	  this.semicolon();
	}

	function ImportAttribute(node) {
	  this.print(node.key);
	  this.token(":");
	  this.space();
	  this.print(node.value);
	}

	function ImportNamespaceSpecifier(node) {
	  this.token("*");
	  this.space();
	  this.word("as");
	  this.space();
	  this.print(node.local, node);
	}

	var types = {};

	const object$1 = {};
	const hasOwnProperty = object$1.hasOwnProperty;
	const forOwn = (object, callback) => {
		for (const key in object) {
			if (hasOwnProperty.call(object, key)) {
				callback(key, object[key]);
			}
		}
	};

	const extend = (destination, source) => {
		if (!source) {
			return destination;
		}
		forOwn(source, (key, value) => {
			destination[key] = value;
		});
		return destination;
	};

	const forEach = (array, callback) => {
		const length = array.length;
		let index = -1;
		while (++index < length) {
			callback(array[index]);
		}
	};

	const toString$1 = object$1.toString;
	const isArray$1 = Array.isArray;
	const isBuffer = Buffer.isBuffer;
	const isObject$1 = (value) => {
		// This is a very simple check, but it’s good enough for what we need.
		return toString$1.call(value) == '[object Object]';
	};
	const isString = (value) => {
		return typeof value == 'string' ||
			toString$1.call(value) == '[object String]';
	};
	const isNumber = (value) => {
		return typeof value == 'number' ||
			toString$1.call(value) == '[object Number]';
	};
	const isFunction$3 = (value) => {
		return typeof value == 'function';
	};
	const isMap = (value) => {
		return toString$1.call(value) == '[object Map]';
	};
	const isSet = (value) => {
		return toString$1.call(value) == '[object Set]';
	};

	/*--------------------------------------------------------------------------*/

	// https://mathiasbynens.be/notes/javascript-escapes#single
	const singleEscapes = {
		'"': '\\"',
		'\'': '\\\'',
		'\\': '\\\\',
		'\b': '\\b',
		'\f': '\\f',
		'\n': '\\n',
		'\r': '\\r',
		'\t': '\\t'
		// `\v` is omitted intentionally, because in IE < 9, '\v' == 'v'.
		// '\v': '\\x0B'
	};
	const regexSingleEscape = /["'\\\b\f\n\r\t]/;

	const regexDigit = /[0-9]/;
	const regexWhitelist = /[ !#-&\(-\[\]-_a-~]/;

	const jsesc = (argument, options) => {
		const increaseIndentation = () => {
			oldIndent = indent;
			++options.indentLevel;
			indent = options.indent.repeat(options.indentLevel);
		};
		// Handle options
		const defaults = {
			'escapeEverything': false,
			'minimal': false,
			'isScriptContext': false,
			'quotes': 'single',
			'wrap': false,
			'es6': false,
			'json': false,
			'compact': true,
			'lowercaseHex': false,
			'numbers': 'decimal',
			'indent': '\t',
			'indentLevel': 0,
			'__inline1__': false,
			'__inline2__': false
		};
		const json = options && options.json;
		if (json) {
			defaults.quotes = 'double';
			defaults.wrap = true;
		}
		options = extend(defaults, options);
		if (
			options.quotes != 'single' &&
			options.quotes != 'double' &&
			options.quotes != 'backtick'
		) {
			options.quotes = 'single';
		}
		const quote = options.quotes == 'double' ?
			'"' :
			(options.quotes == 'backtick' ?
				'`' :
				'\''
			);
		const compact = options.compact;
		const lowercaseHex = options.lowercaseHex;
		let indent = options.indent.repeat(options.indentLevel);
		let oldIndent = '';
		const inline1 = options.__inline1__;
		const inline2 = options.__inline2__;
		const newLine = compact ? '' : '\n';
		let result;
		let isEmpty = true;
		const useBinNumbers = options.numbers == 'binary';
		const useOctNumbers = options.numbers == 'octal';
		const useDecNumbers = options.numbers == 'decimal';
		const useHexNumbers = options.numbers == 'hexadecimal';

		if (json && argument && isFunction$3(argument.toJSON)) {
			argument = argument.toJSON();
		}

		if (!isString(argument)) {
			if (isMap(argument)) {
				if (argument.size == 0) {
					return 'new Map()';
				}
				if (!compact) {
					options.__inline1__ = true;
					options.__inline2__ = false;
				}
				return 'new Map(' + jsesc(Array.from(argument), options) + ')';
			}
			if (isSet(argument)) {
				if (argument.size == 0) {
					return 'new Set()';
				}
				return 'new Set(' + jsesc(Array.from(argument), options) + ')';
			}
			if (isBuffer(argument)) {
				if (argument.length == 0) {
					return 'Buffer.from([])';
				}
				return 'Buffer.from(' + jsesc(Array.from(argument), options) + ')';
			}
			if (isArray$1(argument)) {
				result = [];
				options.wrap = true;
				if (inline1) {
					options.__inline1__ = false;
					options.__inline2__ = true;
				}
				if (!inline2) {
					increaseIndentation();
				}
				forEach(argument, (value) => {
					isEmpty = false;
					if (inline2) {
						options.__inline2__ = false;
					}
					result.push(
						(compact || inline2 ? '' : indent) +
						jsesc(value, options)
					);
				});
				if (isEmpty) {
					return '[]';
				}
				if (inline2) {
					return '[' + result.join(', ') + ']';
				}
				return '[' + newLine + result.join(',' + newLine) + newLine +
					(compact ? '' : oldIndent) + ']';
			} else if (isNumber(argument)) {
				if (json) {
					// Some number values (e.g. `Infinity`) cannot be represented in JSON.
					return JSON.stringify(argument);
				}
				if (useDecNumbers) {
					return String(argument);
				}
				if (useHexNumbers) {
					let hexadecimal = argument.toString(16);
					if (!lowercaseHex) {
						hexadecimal = hexadecimal.toUpperCase();
					}
					return '0x' + hexadecimal;
				}
				if (useBinNumbers) {
					return '0b' + argument.toString(2);
				}
				if (useOctNumbers) {
					return '0o' + argument.toString(8);
				}
			} else if (!isObject$1(argument)) {
				if (json) {
					// For some values (e.g. `undefined`, `function` objects),
					// `JSON.stringify(value)` returns `undefined` (which isn’t valid
					// JSON) instead of `'null'`.
					return JSON.stringify(argument) || 'null';
				}
				return String(argument);
			} else { // it’s an object
				result = [];
				options.wrap = true;
				increaseIndentation();
				forOwn(argument, (key, value) => {
					isEmpty = false;
					result.push(
						(compact ? '' : indent) +
						jsesc(key, options) + ':' +
						(compact ? '' : ' ') +
						jsesc(value, options)
					);
				});
				if (isEmpty) {
					return '{}';
				}
				return '{' + newLine + result.join(',' + newLine) + newLine +
					(compact ? '' : oldIndent) + '}';
			}
		}

		const string = argument;
		// Loop over each code unit in the string and escape it
		let index = -1;
		const length = string.length;
		result = '';
		while (++index < length) {
			const character = string.charAt(index);
			if (options.es6) {
				const first = string.charCodeAt(index);
				if ( // check if it’s the start of a surrogate pair
					first >= 0xD800 && first <= 0xDBFF && // high surrogate
					length > index + 1 // there is a next code unit
				) {
					const second = string.charCodeAt(index + 1);
					if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
						// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
						const codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
						let hexadecimal = codePoint.toString(16);
						if (!lowercaseHex) {
							hexadecimal = hexadecimal.toUpperCase();
						}
						result += '\\u{' + hexadecimal + '}';
						++index;
						continue;
					}
				}
			}
			if (!options.escapeEverything) {
				if (regexWhitelist.test(character)) {
					// It’s a printable ASCII character that is not `"`, `'` or `\`,
					// so don’t escape it.
					result += character;
					continue;
				}
				if (character == '"') {
					result += quote == character ? '\\"' : character;
					continue;
				}
				if (character == '`') {
					result += quote == character ? '\\`' : character;
					continue;
				}
				if (character == '\'') {
					result += quote == character ? '\\\'' : character;
					continue;
				}
			}
			if (
				character == '\0' &&
				!json &&
				!regexDigit.test(string.charAt(index + 1))
			) {
				result += '\\0';
				continue;
			}
			if (regexSingleEscape.test(character)) {
				// no need for a `hasOwnProperty` check here
				result += singleEscapes[character];
				continue;
			}
			const charCode = character.charCodeAt(0);
			if (options.minimal && charCode != 0x2028 && charCode != 0x2029) {
				result += character;
				continue;
			}
			let hexadecimal = charCode.toString(16);
			if (!lowercaseHex) {
				hexadecimal = hexadecimal.toUpperCase();
			}
			const longhand = hexadecimal.length > 2 || json;
			const escaped = '\\' + (longhand ? 'u' : 'x') +
				('0000' + hexadecimal).slice(longhand ? -4 : -2);
			result += escaped;
			continue;
		}
		if (options.wrap) {
			result = quote + result + quote;
		}
		if (quote == '`') {
			result = result.replace(/\$\{/g, '\\\$\{');
		}
		if (options.isScriptContext) {
			// https://mathiasbynens.be/notes/etago
			return result
				.replace(/<\/(script|style)/gi, '<\\/$1')
				.replace(/<!--/g, json ? '\\u003C!--' : '\\x3C!--');
		}
		return result;
	};

	jsesc.version = '2.5.2';

	var jsesc_1 = jsesc;

	Object.defineProperty(types, "__esModule", {
	  value: true
	});
	types.Identifier = Identifier;
	types.ArgumentPlaceholder = ArgumentPlaceholder;
	types.SpreadElement = types.RestElement = RestElement;
	types.ObjectPattern = types.ObjectExpression = ObjectExpression;
	types.ObjectMethod = ObjectMethod;
	types.ObjectProperty = ObjectProperty;
	types.ArrayPattern = types.ArrayExpression = ArrayExpression;
	types.RecordExpression = RecordExpression;
	types.TupleExpression = TupleExpression;
	types.RegExpLiteral = RegExpLiteral;
	types.BooleanLiteral = BooleanLiteral;
	types.NullLiteral = NullLiteral;
	types.NumericLiteral = NumericLiteral;
	types.StringLiteral = StringLiteral;
	types.BigIntLiteral = BigIntLiteral;
	types.DecimalLiteral = DecimalLiteral;
	types.TopicReference = TopicReference;
	types.PipelineTopicExpression = PipelineTopicExpression;
	types.PipelineBareFunction = PipelineBareFunction;
	types.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;

	var _t$w = lib$s;

	var _jsesc = jsesc_1;

	const {
	  isAssignmentPattern: isAssignmentPattern$1,
	  isIdentifier: isIdentifier$6
	} = _t$w;

	function Identifier(node) {
	  this.exactSource(node.loc, () => {
	    this.word(node.name);
	  });
	}

	function ArgumentPlaceholder() {
	  this.token("?");
	}

	function RestElement(node) {
	  this.token("...");
	  this.print(node.argument, node);
	}

	function ObjectExpression(node) {
	  const props = node.properties;
	  this.token("{");
	  this.printInnerComments(node);

	  if (props.length) {
	    this.space();
	    this.printList(props, node, {
	      indent: true,
	      statement: true
	    });
	    this.space();
	  }

	  this.token("}");
	}

	function ObjectMethod(node) {
	  this.printJoin(node.decorators, node);

	  this._methodHead(node);

	  this.space();
	  this.print(node.body, node);
	}

	function ObjectProperty(node) {
	  this.printJoin(node.decorators, node);

	  if (node.computed) {
	    this.token("[");
	    this.print(node.key, node);
	    this.token("]");
	  } else {
	    if (isAssignmentPattern$1(node.value) && isIdentifier$6(node.key) && node.key.name === node.value.left.name) {
	      this.print(node.value, node);
	      return;
	    }

	    this.print(node.key, node);

	    if (node.shorthand && isIdentifier$6(node.key) && isIdentifier$6(node.value) && node.key.name === node.value.name) {
	      return;
	    }
	  }

	  this.token(":");
	  this.space();
	  this.print(node.value, node);
	}

	function ArrayExpression(node) {
	  const elems = node.elements;
	  const len = elems.length;
	  this.token("[");
	  this.printInnerComments(node);

	  for (let i = 0; i < elems.length; i++) {
	    const elem = elems[i];

	    if (elem) {
	      if (i > 0) this.space();
	      this.print(elem, node);
	      if (i < len - 1) this.token(",");
	    } else {
	      this.token(",");
	    }
	  }

	  this.token("]");
	}

	function RecordExpression(node) {
	  const props = node.properties;
	  let startToken;
	  let endToken;

	  if (this.format.recordAndTupleSyntaxType === "bar") {
	    startToken = "{|";
	    endToken = "|}";
	  } else if (this.format.recordAndTupleSyntaxType === "hash") {
	    startToken = "#{";
	    endToken = "}";
	  } else {
	    throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);
	  }

	  this.token(startToken);
	  this.printInnerComments(node);

	  if (props.length) {
	    this.space();
	    this.printList(props, node, {
	      indent: true,
	      statement: true
	    });
	    this.space();
	  }

	  this.token(endToken);
	}

	function TupleExpression(node) {
	  const elems = node.elements;
	  const len = elems.length;
	  let startToken;
	  let endToken;

	  if (this.format.recordAndTupleSyntaxType === "bar") {
	    startToken = "[|";
	    endToken = "|]";
	  } else if (this.format.recordAndTupleSyntaxType === "hash") {
	    startToken = "#[";
	    endToken = "]";
	  } else {
	    throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
	  }

	  this.token(startToken);
	  this.printInnerComments(node);

	  for (let i = 0; i < elems.length; i++) {
	    const elem = elems[i];

	    if (elem) {
	      if (i > 0) this.space();
	      this.print(elem, node);
	      if (i < len - 1) this.token(",");
	    }
	  }

	  this.token(endToken);
	}

	function RegExpLiteral(node) {
	  this.word(`/${node.pattern}/${node.flags}`);
	}

	function BooleanLiteral(node) {
	  this.word(node.value ? "true" : "false");
	}

	function NullLiteral() {
	  this.word("null");
	}

	function NumericLiteral(node) {
	  const raw = this.getPossibleRaw(node);
	  const opts = this.format.jsescOption;
	  const value = node.value + "";

	  if (opts.numbers) {
	    this.number(_jsesc(node.value, opts));
	  } else if (raw == null) {
	    this.number(value);
	  } else if (this.format.minified) {
	    this.number(raw.length < value.length ? raw : value);
	  } else {
	    this.number(raw);
	  }
	}

	function StringLiteral(node) {
	  const raw = this.getPossibleRaw(node);

	  if (!this.format.minified && raw != null) {
	    this.token(raw);
	    return;
	  }

	  const val = _jsesc(node.value, Object.assign(this.format.jsescOption, this.format.jsonCompatibleStrings && {
	    json: true
	  }));

	  return this.token(val);
	}

	function BigIntLiteral(node) {
	  const raw = this.getPossibleRaw(node);

	  if (!this.format.minified && raw != null) {
	    this.word(raw);
	    return;
	  }

	  this.word(node.value + "n");
	}

	function DecimalLiteral(node) {
	  const raw = this.getPossibleRaw(node);

	  if (!this.format.minified && raw != null) {
	    this.word(raw);
	    return;
	  }

	  this.word(node.value + "m");
	}

	function TopicReference() {
	  const {
	    topicToken
	  } = this.format;

	  switch (topicToken) {
	    case "#":
	      this.token("#");
	      break;

	    default:
	      {
	        const givenTopicTokenJSON = JSON.stringify(topicToken);
	        const message = `The "topicToken" generator option must be "#" (${givenTopicTokenJSON} received instead).`;
	        throw new Error(message);
	      }
	  }
	}

	function PipelineTopicExpression(node) {
	  this.print(node.expression, node);
	}

	function PipelineBareFunction(node) {
	  this.print(node.callee, node);
	}

	function PipelinePrimaryTopicReference() {
	  this.token("#");
	}

	var flow = {};

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.AnyTypeAnnotation = AnyTypeAnnotation;
	exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
	exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
	exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
	exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
	exports.DeclareClass = DeclareClass;
	exports.DeclareFunction = DeclareFunction;
	exports.InferredPredicate = InferredPredicate;
	exports.DeclaredPredicate = DeclaredPredicate;
	exports.DeclareInterface = DeclareInterface;
	exports.DeclareModule = DeclareModule;
	exports.DeclareModuleExports = DeclareModuleExports;
	exports.DeclareTypeAlias = DeclareTypeAlias;
	exports.DeclareOpaqueType = DeclareOpaqueType;
	exports.DeclareVariable = DeclareVariable;
	exports.DeclareExportDeclaration = DeclareExportDeclaration;
	exports.DeclareExportAllDeclaration = DeclareExportAllDeclaration;
	exports.EnumDeclaration = EnumDeclaration;
	exports.EnumBooleanBody = EnumBooleanBody;
	exports.EnumNumberBody = EnumNumberBody;
	exports.EnumStringBody = EnumStringBody;
	exports.EnumSymbolBody = EnumSymbolBody;
	exports.EnumDefaultedMember = EnumDefaultedMember;
	exports.EnumBooleanMember = EnumBooleanMember;
	exports.EnumNumberMember = EnumNumberMember;
	exports.EnumStringMember = EnumStringMember;
	exports.ExistsTypeAnnotation = ExistsTypeAnnotation;
	exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
	exports.FunctionTypeParam = FunctionTypeParam;
	exports.GenericTypeAnnotation = exports.ClassImplements = exports.InterfaceExtends = InterfaceExtends;
	exports._interfaceish = _interfaceish;
	exports._variance = _variance;
	exports.InterfaceDeclaration = InterfaceDeclaration;
	exports.InterfaceTypeAnnotation = InterfaceTypeAnnotation;
	exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
	exports.MixedTypeAnnotation = MixedTypeAnnotation;
	exports.EmptyTypeAnnotation = EmptyTypeAnnotation;
	exports.NullableTypeAnnotation = NullableTypeAnnotation;
	exports.NumberTypeAnnotation = NumberTypeAnnotation;
	exports.StringTypeAnnotation = StringTypeAnnotation;
	exports.ThisTypeAnnotation = ThisTypeAnnotation;
	exports.TupleTypeAnnotation = TupleTypeAnnotation;
	exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
	exports.TypeAlias = TypeAlias;
	exports.TypeAnnotation = TypeAnnotation;
	exports.TypeParameterDeclaration = exports.TypeParameterInstantiation = TypeParameterInstantiation;
	exports.TypeParameter = TypeParameter;
	exports.OpaqueType = OpaqueType;
	exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
	exports.ObjectTypeInternalSlot = ObjectTypeInternalSlot;
	exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
	exports.ObjectTypeIndexer = ObjectTypeIndexer;
	exports.ObjectTypeProperty = ObjectTypeProperty;
	exports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;
	exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
	exports.SymbolTypeAnnotation = SymbolTypeAnnotation;
	exports.UnionTypeAnnotation = UnionTypeAnnotation;
	exports.TypeCastExpression = TypeCastExpression;
	exports.Variance = Variance;
	exports.VoidTypeAnnotation = VoidTypeAnnotation;
	exports.IndexedAccessType = IndexedAccessType;
	exports.OptionalIndexedAccessType = OptionalIndexedAccessType;
	Object.defineProperty(exports, "NumberLiteralTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _types2.NumericLiteral;
	  }
	});
	Object.defineProperty(exports, "StringLiteralTypeAnnotation", {
	  enumerable: true,
	  get: function () {
	    return _types2.StringLiteral;
	  }
	});

	var _t = lib$s;

	var _modules = modules;

	var _types2 = types;

	const {
	  isDeclareExportDeclaration,
	  isStatement
	} = _t;

	function AnyTypeAnnotation() {
	  this.word("any");
	}

	function ArrayTypeAnnotation(node) {
	  this.print(node.elementType, node);
	  this.token("[");
	  this.token("]");
	}

	function BooleanTypeAnnotation() {
	  this.word("boolean");
	}

	function BooleanLiteralTypeAnnotation(node) {
	  this.word(node.value ? "true" : "false");
	}

	function NullLiteralTypeAnnotation() {
	  this.word("null");
	}

	function DeclareClass(node, parent) {
	  if (!isDeclareExportDeclaration(parent)) {
	    this.word("declare");
	    this.space();
	  }

	  this.word("class");
	  this.space();

	  this._interfaceish(node);
	}

	function DeclareFunction(node, parent) {
	  if (!isDeclareExportDeclaration(parent)) {
	    this.word("declare");
	    this.space();
	  }

	  this.word("function");
	  this.space();
	  this.print(node.id, node);
	  this.print(node.id.typeAnnotation.typeAnnotation, node);

	  if (node.predicate) {
	    this.space();
	    this.print(node.predicate, node);
	  }

	  this.semicolon();
	}

	function InferredPredicate() {
	  this.token("%");
	  this.word("checks");
	}

	function DeclaredPredicate(node) {
	  this.token("%");
	  this.word("checks");
	  this.token("(");
	  this.print(node.value, node);
	  this.token(")");
	}

	function DeclareInterface(node) {
	  this.word("declare");
	  this.space();
	  this.InterfaceDeclaration(node);
	}

	function DeclareModule(node) {
	  this.word("declare");
	  this.space();
	  this.word("module");
	  this.space();
	  this.print(node.id, node);
	  this.space();
	  this.print(node.body, node);
	}

	function DeclareModuleExports(node) {
	  this.word("declare");
	  this.space();
	  this.word("module");
	  this.token(".");
	  this.word("exports");
	  this.print(node.typeAnnotation, node);
	}

	function DeclareTypeAlias(node) {
	  this.word("declare");
	  this.space();
	  this.TypeAlias(node);
	}

	function DeclareOpaqueType(node, parent) {
	  if (!isDeclareExportDeclaration(parent)) {
	    this.word("declare");
	    this.space();
	  }

	  this.OpaqueType(node);
	}

	function DeclareVariable(node, parent) {
	  if (!isDeclareExportDeclaration(parent)) {
	    this.word("declare");
	    this.space();
	  }

	  this.word("var");
	  this.space();
	  this.print(node.id, node);
	  this.print(node.id.typeAnnotation, node);
	  this.semicolon();
	}

	function DeclareExportDeclaration(node) {
	  this.word("declare");
	  this.space();
	  this.word("export");
	  this.space();

	  if (node.default) {
	    this.word("default");
	    this.space();
	  }

	  FlowExportDeclaration.apply(this, arguments);
	}

	function DeclareExportAllDeclaration() {
	  this.word("declare");
	  this.space();

	  _modules.ExportAllDeclaration.apply(this, arguments);
	}

	function EnumDeclaration(node) {
	  const {
	    id,
	    body
	  } = node;
	  this.word("enum");
	  this.space();
	  this.print(id, node);
	  this.print(body, node);
	}

	function enumExplicitType(context, name, hasExplicitType) {
	  if (hasExplicitType) {
	    context.space();
	    context.word("of");
	    context.space();
	    context.word(name);
	  }

	  context.space();
	}

	function enumBody(context, node) {
	  const {
	    members
	  } = node;
	  context.token("{");
	  context.indent();
	  context.newline();

	  for (const member of members) {
	    context.print(member, node);
	    context.newline();
	  }

	  if (node.hasUnknownMembers) {
	    context.token("...");
	    context.newline();
	  }

	  context.dedent();
	  context.token("}");
	}

	function EnumBooleanBody(node) {
	  const {
	    explicitType
	  } = node;
	  enumExplicitType(this, "boolean", explicitType);
	  enumBody(this, node);
	}

	function EnumNumberBody(node) {
	  const {
	    explicitType
	  } = node;
	  enumExplicitType(this, "number", explicitType);
	  enumBody(this, node);
	}

	function EnumStringBody(node) {
	  const {
	    explicitType
	  } = node;
	  enumExplicitType(this, "string", explicitType);
	  enumBody(this, node);
	}

	function EnumSymbolBody(node) {
	  enumExplicitType(this, "symbol", true);
	  enumBody(this, node);
	}

	function EnumDefaultedMember(node) {
	  const {
	    id
	  } = node;
	  this.print(id, node);
	  this.token(",");
	}

	function enumInitializedMember(context, node) {
	  const {
	    id,
	    init
	  } = node;
	  context.print(id, node);
	  context.space();
	  context.token("=");
	  context.space();
	  context.print(init, node);
	  context.token(",");
	}

	function EnumBooleanMember(node) {
	  enumInitializedMember(this, node);
	}

	function EnumNumberMember(node) {
	  enumInitializedMember(this, node);
	}

	function EnumStringMember(node) {
	  enumInitializedMember(this, node);
	}

	function FlowExportDeclaration(node) {
	  if (node.declaration) {
	    const declar = node.declaration;
	    this.print(declar, node);
	    if (!isStatement(declar)) this.semicolon();
	  } else {
	    this.token("{");

	    if (node.specifiers.length) {
	      this.space();
	      this.printList(node.specifiers, node);
	      this.space();
	    }

	    this.token("}");

	    if (node.source) {
	      this.space();
	      this.word("from");
	      this.space();
	      this.print(node.source, node);
	    }

	    this.semicolon();
	  }
	}

	function ExistsTypeAnnotation() {
	  this.token("*");
	}

	function FunctionTypeAnnotation(node, parent) {
	  this.print(node.typeParameters, node);
	  this.token("(");

	  if (node.this) {
	    this.word("this");
	    this.token(":");
	    this.space();
	    this.print(node.this.typeAnnotation, node);

	    if (node.params.length || node.rest) {
	      this.token(",");
	      this.space();
	    }
	  }

	  this.printList(node.params, node);

	  if (node.rest) {
	    if (node.params.length) {
	      this.token(",");
	      this.space();
	    }

	    this.token("...");
	    this.print(node.rest, node);
	  }

	  this.token(")");

	  if (parent.type === "ObjectTypeCallProperty" || parent.type === "DeclareFunction" || parent.type === "ObjectTypeProperty" && parent.method) {
	    this.token(":");
	  } else {
	    this.space();
	    this.token("=>");
	  }

	  this.space();
	  this.print(node.returnType, node);
	}

	function FunctionTypeParam(node) {
	  this.print(node.name, node);
	  if (node.optional) this.token("?");

	  if (node.name) {
	    this.token(":");
	    this.space();
	  }

	  this.print(node.typeAnnotation, node);
	}

	function InterfaceExtends(node) {
	  this.print(node.id, node);
	  this.print(node.typeParameters, node);
	}

	function _interfaceish(node) {
	  var _node$extends;

	  this.print(node.id, node);
	  this.print(node.typeParameters, node);

	  if ((_node$extends = node.extends) != null && _node$extends.length) {
	    this.space();
	    this.word("extends");
	    this.space();
	    this.printList(node.extends, node);
	  }

	  if (node.mixins && node.mixins.length) {
	    this.space();
	    this.word("mixins");
	    this.space();
	    this.printList(node.mixins, node);
	  }

	  if (node.implements && node.implements.length) {
	    this.space();
	    this.word("implements");
	    this.space();
	    this.printList(node.implements, node);
	  }

	  this.space();
	  this.print(node.body, node);
	}

	function _variance(node) {
	  if (node.variance) {
	    if (node.variance.kind === "plus") {
	      this.token("+");
	    } else if (node.variance.kind === "minus") {
	      this.token("-");
	    }
	  }
	}

	function InterfaceDeclaration(node) {
	  this.word("interface");
	  this.space();

	  this._interfaceish(node);
	}

	function andSeparator() {
	  this.space();
	  this.token("&");
	  this.space();
	}

	function InterfaceTypeAnnotation(node) {
	  this.word("interface");

	  if (node.extends && node.extends.length) {
	    this.space();
	    this.word("extends");
	    this.space();
	    this.printList(node.extends, node);
	  }

	  this.space();
	  this.print(node.body, node);
	}

	function IntersectionTypeAnnotation(node) {
	  this.printJoin(node.types, node, {
	    separator: andSeparator
	  });
	}

	function MixedTypeAnnotation() {
	  this.word("mixed");
	}

	function EmptyTypeAnnotation() {
	  this.word("empty");
	}

	function NullableTypeAnnotation(node) {
	  this.token("?");
	  this.print(node.typeAnnotation, node);
	}

	function NumberTypeAnnotation() {
	  this.word("number");
	}

	function StringTypeAnnotation() {
	  this.word("string");
	}

	function ThisTypeAnnotation() {
	  this.word("this");
	}

	function TupleTypeAnnotation(node) {
	  this.token("[");
	  this.printList(node.types, node);
	  this.token("]");
	}

	function TypeofTypeAnnotation(node) {
	  this.word("typeof");
	  this.space();
	  this.print(node.argument, node);
	}

	function TypeAlias(node) {
	  this.word("type");
	  this.space();
	  this.print(node.id, node);
	  this.print(node.typeParameters, node);
	  this.space();
	  this.token("=");
	  this.space();
	  this.print(node.right, node);
	  this.semicolon();
	}

	function TypeAnnotation(node) {
	  this.token(":");
	  this.space();
	  if (node.optional) this.token("?");
	  this.print(node.typeAnnotation, node);
	}

	function TypeParameterInstantiation(node) {
	  this.token("<");
	  this.printList(node.params, node, {});
	  this.token(">");
	}

	function TypeParameter(node) {
	  this._variance(node);

	  this.word(node.name);

	  if (node.bound) {
	    this.print(node.bound, node);
	  }

	  if (node.default) {
	    this.space();
	    this.token("=");
	    this.space();
	    this.print(node.default, node);
	  }
	}

	function OpaqueType(node) {
	  this.word("opaque");
	  this.space();
	  this.word("type");
	  this.space();
	  this.print(node.id, node);
	  this.print(node.typeParameters, node);

	  if (node.supertype) {
	    this.token(":");
	    this.space();
	    this.print(node.supertype, node);
	  }

	  if (node.impltype) {
	    this.space();
	    this.token("=");
	    this.space();
	    this.print(node.impltype, node);
	  }

	  this.semicolon();
	}

	function ObjectTypeAnnotation(node) {
	  if (node.exact) {
	    this.token("{|");
	  } else {
	    this.token("{");
	  }

	  const props = [...node.properties, ...(node.callProperties || []), ...(node.indexers || []), ...(node.internalSlots || [])];

	  if (props.length) {
	    this.space();
	    this.printJoin(props, node, {
	      addNewlines(leading) {
	        if (leading && !props[0]) return 1;
	      },

	      indent: true,
	      statement: true,
	      iterator: () => {
	        if (props.length !== 1 || node.inexact) {
	          this.token(",");
	          this.space();
	        }
	      }
	    });
	    this.space();
	  }

	  if (node.inexact) {
	    this.indent();
	    this.token("...");

	    if (props.length) {
	      this.newline();
	    }

	    this.dedent();
	  }

	  if (node.exact) {
	    this.token("|}");
	  } else {
	    this.token("}");
	  }
	}

	function ObjectTypeInternalSlot(node) {
	  if (node.static) {
	    this.word("static");
	    this.space();
	  }

	  this.token("[");
	  this.token("[");
	  this.print(node.id, node);
	  this.token("]");
	  this.token("]");
	  if (node.optional) this.token("?");

	  if (!node.method) {
	    this.token(":");
	    this.space();
	  }

	  this.print(node.value, node);
	}

	function ObjectTypeCallProperty(node) {
	  if (node.static) {
	    this.word("static");
	    this.space();
	  }

	  this.print(node.value, node);
	}

	function ObjectTypeIndexer(node) {
	  if (node.static) {
	    this.word("static");
	    this.space();
	  }

	  this._variance(node);

	  this.token("[");

	  if (node.id) {
	    this.print(node.id, node);
	    this.token(":");
	    this.space();
	  }

	  this.print(node.key, node);
	  this.token("]");
	  this.token(":");
	  this.space();
	  this.print(node.value, node);
	}

	function ObjectTypeProperty(node) {
	  if (node.proto) {
	    this.word("proto");
	    this.space();
	  }

	  if (node.static) {
	    this.word("static");
	    this.space();
	  }

	  if (node.kind === "get" || node.kind === "set") {
	    this.word(node.kind);
	    this.space();
	  }

	  this._variance(node);

	  this.print(node.key, node);
	  if (node.optional) this.token("?");

	  if (!node.method) {
	    this.token(":");
	    this.space();
	  }

	  this.print(node.value, node);
	}

	function ObjectTypeSpreadProperty(node) {
	  this.token("...");
	  this.print(node.argument, node);
	}

	function QualifiedTypeIdentifier(node) {
	  this.print(node.qualification, node);
	  this.token(".");
	  this.print(node.id, node);
	}

	function SymbolTypeAnnotation() {
	  this.word("symbol");
	}

	function orSeparator() {
	  this.space();
	  this.token("|");
	  this.space();
	}

	function UnionTypeAnnotation(node) {
	  this.printJoin(node.types, node, {
	    separator: orSeparator
	  });
	}

	function TypeCastExpression(node) {
	  this.token("(");
	  this.print(node.expression, node);
	  this.print(node.typeAnnotation, node);
	  this.token(")");
	}

	function Variance(node) {
	  if (node.kind === "plus") {
	    this.token("+");
	  } else {
	    this.token("-");
	  }
	}

	function VoidTypeAnnotation() {
	  this.word("void");
	}

	function IndexedAccessType(node) {
	  this.print(node.objectType, node);
	  this.token("[");
	  this.print(node.indexType, node);
	  this.token("]");
	}

	function OptionalIndexedAccessType(node) {
	  this.print(node.objectType, node);

	  if (node.optional) {
	    this.token("?.");
	  }

	  this.token("[");
	  this.print(node.indexType, node);
	  this.token("]");
	}
	}(flow));

	var base = {};

	Object.defineProperty(base, "__esModule", {
	  value: true
	});
	base.File = File$1;
	base.Program = Program;
	base.BlockStatement = BlockStatement;
	base.Directive = Directive;
	base.DirectiveLiteral = DirectiveLiteral;
	base.InterpreterDirective = InterpreterDirective;
	base.Placeholder = Placeholder;

	function File$1(node) {
	  if (node.program) {
	    this.print(node.program.interpreter, node);
	  }

	  this.print(node.program, node);
	}

	function Program(node) {
	  this.printInnerComments(node, false);
	  this.printSequence(node.directives, node);
	  if (node.directives && node.directives.length) this.newline();
	  this.printSequence(node.body, node);
	}

	function BlockStatement(node) {
	  var _node$directives;

	  this.token("{");
	  this.printInnerComments(node);
	  const hasDirectives = (_node$directives = node.directives) == null ? void 0 : _node$directives.length;

	  if (node.body.length || hasDirectives) {
	    this.newline();
	    this.printSequence(node.directives, node, {
	      indent: true
	    });
	    if (hasDirectives) this.newline();
	    this.printSequence(node.body, node, {
	      indent: true
	    });
	    this.removeTrailingNewline();
	    this.source("end", node.loc);
	    if (!this.endsWith(10)) this.newline();
	    this.rightBrace();
	  } else {
	    this.source("end", node.loc);
	    this.token("}");
	  }
	}

	function Directive(node) {
	  this.print(node.value, node);
	  this.semicolon();
	}

	const unescapedSingleQuoteRE = /(?:^|[^\\])(?:\\\\)*'/;
	const unescapedDoubleQuoteRE = /(?:^|[^\\])(?:\\\\)*"/;

	function DirectiveLiteral(node) {
	  const raw = this.getPossibleRaw(node);

	  if (raw != null) {
	    this.token(raw);
	    return;
	  }

	  const {
	    value
	  } = node;

	  if (!unescapedDoubleQuoteRE.test(value)) {
	    this.token(`"${value}"`);
	  } else if (!unescapedSingleQuoteRE.test(value)) {
	    this.token(`'${value}'`);
	  } else {
	    throw new Error("Malformed AST: it is not possible to print a directive containing" + " both unescaped single and double quotes.");
	  }
	}

	function InterpreterDirective(node) {
	  this.token(`#!${node.value}\n`);
	}

	function Placeholder(node) {
	  this.token("%%");
	  this.print(node.name);
	  this.token("%%");

	  if (node.expectedNode === "Statement") {
	    this.semicolon();
	  }
	}

	var jsx$1 = {};

	Object.defineProperty(jsx$1, "__esModule", {
	  value: true
	});
	jsx$1.JSXAttribute = JSXAttribute;
	jsx$1.JSXIdentifier = JSXIdentifier;
	jsx$1.JSXNamespacedName = JSXNamespacedName;
	jsx$1.JSXMemberExpression = JSXMemberExpression;
	jsx$1.JSXSpreadAttribute = JSXSpreadAttribute;
	jsx$1.JSXExpressionContainer = JSXExpressionContainer;
	jsx$1.JSXSpreadChild = JSXSpreadChild;
	jsx$1.JSXText = JSXText;
	jsx$1.JSXElement = JSXElement;
	jsx$1.JSXOpeningElement = JSXOpeningElement;
	jsx$1.JSXClosingElement = JSXClosingElement;
	jsx$1.JSXEmptyExpression = JSXEmptyExpression;
	jsx$1.JSXFragment = JSXFragment;
	jsx$1.JSXOpeningFragment = JSXOpeningFragment;
	jsx$1.JSXClosingFragment = JSXClosingFragment;

	function JSXAttribute(node) {
	  this.print(node.name, node);

	  if (node.value) {
	    this.token("=");
	    this.print(node.value, node);
	  }
	}

	function JSXIdentifier(node) {
	  this.word(node.name);
	}

	function JSXNamespacedName(node) {
	  this.print(node.namespace, node);
	  this.token(":");
	  this.print(node.name, node);
	}

	function JSXMemberExpression(node) {
	  this.print(node.object, node);
	  this.token(".");
	  this.print(node.property, node);
	}

	function JSXSpreadAttribute(node) {
	  this.token("{");
	  this.token("...");
	  this.print(node.argument, node);
	  this.token("}");
	}

	function JSXExpressionContainer(node) {
	  this.token("{");
	  this.print(node.expression, node);
	  this.token("}");
	}

	function JSXSpreadChild(node) {
	  this.token("{");
	  this.token("...");
	  this.print(node.expression, node);
	  this.token("}");
	}

	function JSXText(node) {
	  const raw = this.getPossibleRaw(node);

	  if (raw != null) {
	    this.token(raw);
	  } else {
	    this.token(node.value);
	  }
	}

	function JSXElement(node) {
	  const open = node.openingElement;
	  this.print(open, node);
	  if (open.selfClosing) return;
	  this.indent();

	  for (const child of node.children) {
	    this.print(child, node);
	  }

	  this.dedent();
	  this.print(node.closingElement, node);
	}

	function spaceSeparator() {
	  this.space();
	}

	function JSXOpeningElement(node) {
	  this.token("<");
	  this.print(node.name, node);
	  this.print(node.typeParameters, node);

	  if (node.attributes.length > 0) {
	    this.space();
	    this.printJoin(node.attributes, node, {
	      separator: spaceSeparator
	    });
	  }

	  if (node.selfClosing) {
	    this.space();
	    this.token("/>");
	  } else {
	    this.token(">");
	  }
	}

	function JSXClosingElement(node) {
	  this.token("</");
	  this.print(node.name, node);
	  this.token(">");
	}

	function JSXEmptyExpression(node) {
	  this.printInnerComments(node);
	}

	function JSXFragment(node) {
	  this.print(node.openingFragment, node);
	  this.indent();

	  for (const child of node.children) {
	    this.print(child, node);
	  }

	  this.dedent();
	  this.print(node.closingFragment, node);
	}

	function JSXOpeningFragment() {
	  this.token("<");
	  this.token(">");
	}

	function JSXClosingFragment() {
	  this.token("</");
	  this.token(">");
	}

	var typescript = {};

	Object.defineProperty(typescript, "__esModule", {
	  value: true
	});
	typescript.TSTypeAnnotation = TSTypeAnnotation;
	typescript.TSTypeParameterDeclaration = typescript.TSTypeParameterInstantiation = TSTypeParameterInstantiation;
	typescript.TSTypeParameter = TSTypeParameter;
	typescript.TSParameterProperty = TSParameterProperty;
	typescript.TSDeclareFunction = TSDeclareFunction;
	typescript.TSDeclareMethod = TSDeclareMethod;
	typescript.TSQualifiedName = TSQualifiedName;
	typescript.TSCallSignatureDeclaration = TSCallSignatureDeclaration;
	typescript.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;
	typescript.TSPropertySignature = TSPropertySignature;
	typescript.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;
	typescript.TSMethodSignature = TSMethodSignature;
	typescript.TSIndexSignature = TSIndexSignature;
	typescript.TSAnyKeyword = TSAnyKeyword;
	typescript.TSBigIntKeyword = TSBigIntKeyword;
	typescript.TSUnknownKeyword = TSUnknownKeyword;
	typescript.TSNumberKeyword = TSNumberKeyword;
	typescript.TSObjectKeyword = TSObjectKeyword;
	typescript.TSBooleanKeyword = TSBooleanKeyword;
	typescript.TSStringKeyword = TSStringKeyword;
	typescript.TSSymbolKeyword = TSSymbolKeyword;
	typescript.TSVoidKeyword = TSVoidKeyword;
	typescript.TSUndefinedKeyword = TSUndefinedKeyword;
	typescript.TSNullKeyword = TSNullKeyword;
	typescript.TSNeverKeyword = TSNeverKeyword;
	typescript.TSIntrinsicKeyword = TSIntrinsicKeyword;
	typescript.TSThisType = TSThisType;
	typescript.TSFunctionType = TSFunctionType;
	typescript.TSConstructorType = TSConstructorType;
	typescript.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;
	typescript.TSTypeReference = TSTypeReference;
	typescript.TSTypePredicate = TSTypePredicate;
	typescript.TSTypeQuery = TSTypeQuery;
	typescript.TSTypeLiteral = TSTypeLiteral;
	typescript.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;
	typescript.tsPrintBraced = tsPrintBraced;
	typescript.TSArrayType = TSArrayType;
	typescript.TSTupleType = TSTupleType;
	typescript.TSOptionalType = TSOptionalType;
	typescript.TSRestType = TSRestType;
	typescript.TSNamedTupleMember = TSNamedTupleMember;
	typescript.TSUnionType = TSUnionType;
	typescript.TSIntersectionType = TSIntersectionType;
	typescript.tsPrintUnionOrIntersectionType = tsPrintUnionOrIntersectionType;
	typescript.TSConditionalType = TSConditionalType;
	typescript.TSInferType = TSInferType;
	typescript.TSParenthesizedType = TSParenthesizedType;
	typescript.TSTypeOperator = TSTypeOperator;
	typescript.TSIndexedAccessType = TSIndexedAccessType;
	typescript.TSMappedType = TSMappedType;
	typescript.TSLiteralType = TSLiteralType;
	typescript.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;
	typescript.TSInterfaceDeclaration = TSInterfaceDeclaration;
	typescript.TSInterfaceBody = TSInterfaceBody;
	typescript.TSTypeAliasDeclaration = TSTypeAliasDeclaration;
	typescript.TSAsExpression = TSAsExpression;
	typescript.TSTypeAssertion = TSTypeAssertion;
	typescript.TSEnumDeclaration = TSEnumDeclaration;
	typescript.TSEnumMember = TSEnumMember;
	typescript.TSModuleDeclaration = TSModuleDeclaration;
	typescript.TSModuleBlock = TSModuleBlock;
	typescript.TSImportType = TSImportType;
	typescript.TSImportEqualsDeclaration = TSImportEqualsDeclaration;
	typescript.TSExternalModuleReference = TSExternalModuleReference;
	typescript.TSNonNullExpression = TSNonNullExpression;
	typescript.TSExportAssignment = TSExportAssignment;
	typescript.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;
	typescript.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;
	typescript.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;

	function TSTypeAnnotation(node) {
	  this.token(":");
	  this.space();
	  if (node.optional) this.token("?");
	  this.print(node.typeAnnotation, node);
	}

	function TSTypeParameterInstantiation(node) {
	  this.token("<");
	  this.printList(node.params, node, {});
	  this.token(">");
	}

	function TSTypeParameter(node) {
	  this.word(node.name);

	  if (node.constraint) {
	    this.space();
	    this.word("extends");
	    this.space();
	    this.print(node.constraint, node);
	  }

	  if (node.default) {
	    this.space();
	    this.token("=");
	    this.space();
	    this.print(node.default, node);
	  }
	}

	function TSParameterProperty(node) {
	  if (node.accessibility) {
	    this.word(node.accessibility);
	    this.space();
	  }

	  if (node.readonly) {
	    this.word("readonly");
	    this.space();
	  }

	  this._param(node.parameter);
	}

	function TSDeclareFunction(node) {
	  if (node.declare) {
	    this.word("declare");
	    this.space();
	  }

	  this._functionHead(node);

	  this.token(";");
	}

	function TSDeclareMethod(node) {
	  this._classMethodHead(node);

	  this.token(";");
	}

	function TSQualifiedName(node) {
	  this.print(node.left, node);
	  this.token(".");
	  this.print(node.right, node);
	}

	function TSCallSignatureDeclaration(node) {
	  this.tsPrintSignatureDeclarationBase(node);
	  this.token(";");
	}

	function TSConstructSignatureDeclaration(node) {
	  this.word("new");
	  this.space();
	  this.tsPrintSignatureDeclarationBase(node);
	  this.token(";");
	}

	function TSPropertySignature(node) {
	  const {
	    readonly,
	    initializer
	  } = node;

	  if (readonly) {
	    this.word("readonly");
	    this.space();
	  }

	  this.tsPrintPropertyOrMethodName(node);
	  this.print(node.typeAnnotation, node);

	  if (initializer) {
	    this.space();
	    this.token("=");
	    this.space();
	    this.print(initializer, node);
	  }

	  this.token(";");
	}

	function tsPrintPropertyOrMethodName(node) {
	  if (node.computed) {
	    this.token("[");
	  }

	  this.print(node.key, node);

	  if (node.computed) {
	    this.token("]");
	  }

	  if (node.optional) {
	    this.token("?");
	  }
	}

	function TSMethodSignature(node) {
	  const {
	    kind
	  } = node;

	  if (kind === "set" || kind === "get") {
	    this.word(kind);
	    this.space();
	  }

	  this.tsPrintPropertyOrMethodName(node);
	  this.tsPrintSignatureDeclarationBase(node);
	  this.token(";");
	}

	function TSIndexSignature(node) {
	  const {
	    readonly,
	    static: isStatic
	  } = node;

	  if (isStatic) {
	    this.word("static");
	    this.space();
	  }

	  if (readonly) {
	    this.word("readonly");
	    this.space();
	  }

	  this.token("[");

	  this._parameters(node.parameters, node);

	  this.token("]");
	  this.print(node.typeAnnotation, node);
	  this.token(";");
	}

	function TSAnyKeyword() {
	  this.word("any");
	}

	function TSBigIntKeyword() {
	  this.word("bigint");
	}

	function TSUnknownKeyword() {
	  this.word("unknown");
	}

	function TSNumberKeyword() {
	  this.word("number");
	}

	function TSObjectKeyword() {
	  this.word("object");
	}

	function TSBooleanKeyword() {
	  this.word("boolean");
	}

	function TSStringKeyword() {
	  this.word("string");
	}

	function TSSymbolKeyword() {
	  this.word("symbol");
	}

	function TSVoidKeyword() {
	  this.word("void");
	}

	function TSUndefinedKeyword() {
	  this.word("undefined");
	}

	function TSNullKeyword() {
	  this.word("null");
	}

	function TSNeverKeyword() {
	  this.word("never");
	}

	function TSIntrinsicKeyword() {
	  this.word("intrinsic");
	}

	function TSThisType() {
	  this.word("this");
	}

	function TSFunctionType(node) {
	  this.tsPrintFunctionOrConstructorType(node);
	}

	function TSConstructorType(node) {
	  if (node.abstract) {
	    this.word("abstract");
	    this.space();
	  }

	  this.word("new");
	  this.space();
	  this.tsPrintFunctionOrConstructorType(node);
	}

	function tsPrintFunctionOrConstructorType(node) {
	  const {
	    typeParameters,
	    parameters
	  } = node;
	  this.print(typeParameters, node);
	  this.token("(");

	  this._parameters(parameters, node);

	  this.token(")");
	  this.space();
	  this.token("=>");
	  this.space();
	  this.print(node.typeAnnotation.typeAnnotation, node);
	}

	function TSTypeReference(node) {
	  this.print(node.typeName, node);
	  this.print(node.typeParameters, node);
	}

	function TSTypePredicate(node) {
	  if (node.asserts) {
	    this.word("asserts");
	    this.space();
	  }

	  this.print(node.parameterName);

	  if (node.typeAnnotation) {
	    this.space();
	    this.word("is");
	    this.space();
	    this.print(node.typeAnnotation.typeAnnotation);
	  }
	}

	function TSTypeQuery(node) {
	  this.word("typeof");
	  this.space();
	  this.print(node.exprName);
	}

	function TSTypeLiteral(node) {
	  this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);
	}

	function tsPrintTypeLiteralOrInterfaceBody(members, node) {
	  this.tsPrintBraced(members, node);
	}

	function tsPrintBraced(members, node) {
	  this.token("{");

	  if (members.length) {
	    this.indent();
	    this.newline();

	    for (const member of members) {
	      this.print(member, node);
	      this.newline();
	    }

	    this.dedent();
	    this.rightBrace();
	  } else {
	    this.token("}");
	  }
	}

	function TSArrayType(node) {
	  this.print(node.elementType, node);
	  this.token("[]");
	}

	function TSTupleType(node) {
	  this.token("[");
	  this.printList(node.elementTypes, node);
	  this.token("]");
	}

	function TSOptionalType(node) {
	  this.print(node.typeAnnotation, node);
	  this.token("?");
	}

	function TSRestType(node) {
	  this.token("...");
	  this.print(node.typeAnnotation, node);
	}

	function TSNamedTupleMember(node) {
	  this.print(node.label, node);
	  if (node.optional) this.token("?");
	  this.token(":");
	  this.space();
	  this.print(node.elementType, node);
	}

	function TSUnionType(node) {
	  this.tsPrintUnionOrIntersectionType(node, "|");
	}

	function TSIntersectionType(node) {
	  this.tsPrintUnionOrIntersectionType(node, "&");
	}

	function tsPrintUnionOrIntersectionType(node, sep) {
	  this.printJoin(node.types, node, {
	    separator() {
	      this.space();
	      this.token(sep);
	      this.space();
	    }

	  });
	}

	function TSConditionalType(node) {
	  this.print(node.checkType);
	  this.space();
	  this.word("extends");
	  this.space();
	  this.print(node.extendsType);
	  this.space();
	  this.token("?");
	  this.space();
	  this.print(node.trueType);
	  this.space();
	  this.token(":");
	  this.space();
	  this.print(node.falseType);
	}

	function TSInferType(node) {
	  this.token("infer");
	  this.space();
	  this.print(node.typeParameter);
	}

	function TSParenthesizedType(node) {
	  this.token("(");
	  this.print(node.typeAnnotation, node);
	  this.token(")");
	}

	function TSTypeOperator(node) {
	  this.word(node.operator);
	  this.space();
	  this.print(node.typeAnnotation, node);
	}

	function TSIndexedAccessType(node) {
	  this.print(node.objectType, node);
	  this.token("[");
	  this.print(node.indexType, node);
	  this.token("]");
	}

	function TSMappedType(node) {
	  const {
	    nameType,
	    optional,
	    readonly,
	    typeParameter
	  } = node;
	  this.token("{");
	  this.space();

	  if (readonly) {
	    tokenIfPlusMinus(this, readonly);
	    this.word("readonly");
	    this.space();
	  }

	  this.token("[");
	  this.word(typeParameter.name);
	  this.space();
	  this.word("in");
	  this.space();
	  this.print(typeParameter.constraint, typeParameter);

	  if (nameType) {
	    this.space();
	    this.word("as");
	    this.space();
	    this.print(nameType, node);
	  }

	  this.token("]");

	  if (optional) {
	    tokenIfPlusMinus(this, optional);
	    this.token("?");
	  }

	  this.token(":");
	  this.space();
	  this.print(node.typeAnnotation, node);
	  this.space();
	  this.token("}");
	}

	function tokenIfPlusMinus(self, tok) {
	  if (tok !== true) {
	    self.token(tok);
	  }
	}

	function TSLiteralType(node) {
	  this.print(node.literal, node);
	}

	function TSExpressionWithTypeArguments(node) {
	  this.print(node.expression, node);
	  this.print(node.typeParameters, node);
	}

	function TSInterfaceDeclaration(node) {
	  const {
	    declare,
	    id,
	    typeParameters,
	    extends: extendz,
	    body
	  } = node;

	  if (declare) {
	    this.word("declare");
	    this.space();
	  }

	  this.word("interface");
	  this.space();
	  this.print(id, node);
	  this.print(typeParameters, node);

	  if (extendz != null && extendz.length) {
	    this.space();
	    this.word("extends");
	    this.space();
	    this.printList(extendz, node);
	  }

	  this.space();
	  this.print(body, node);
	}

	function TSInterfaceBody(node) {
	  this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);
	}

	function TSTypeAliasDeclaration(node) {
	  const {
	    declare,
	    id,
	    typeParameters,
	    typeAnnotation
	  } = node;

	  if (declare) {
	    this.word("declare");
	    this.space();
	  }

	  this.word("type");
	  this.space();
	  this.print(id, node);
	  this.print(typeParameters, node);
	  this.space();
	  this.token("=");
	  this.space();
	  this.print(typeAnnotation, node);
	  this.token(";");
	}

	function TSAsExpression(node) {
	  const {
	    expression,
	    typeAnnotation
	  } = node;
	  this.print(expression, node);
	  this.space();
	  this.word("as");
	  this.space();
	  this.print(typeAnnotation, node);
	}

	function TSTypeAssertion(node) {
	  const {
	    typeAnnotation,
	    expression
	  } = node;
	  this.token("<");
	  this.print(typeAnnotation, node);
	  this.token(">");
	  this.space();
	  this.print(expression, node);
	}

	function TSEnumDeclaration(node) {
	  const {
	    declare,
	    const: isConst,
	    id,
	    members
	  } = node;

	  if (declare) {
	    this.word("declare");
	    this.space();
	  }

	  if (isConst) {
	    this.word("const");
	    this.space();
	  }

	  this.word("enum");
	  this.space();
	  this.print(id, node);
	  this.space();
	  this.tsPrintBraced(members, node);
	}

	function TSEnumMember(node) {
	  const {
	    id,
	    initializer
	  } = node;
	  this.print(id, node);

	  if (initializer) {
	    this.space();
	    this.token("=");
	    this.space();
	    this.print(initializer, node);
	  }

	  this.token(",");
	}

	function TSModuleDeclaration(node) {
	  const {
	    declare,
	    id
	  } = node;

	  if (declare) {
	    this.word("declare");
	    this.space();
	  }

	  if (!node.global) {
	    this.word(id.type === "Identifier" ? "namespace" : "module");
	    this.space();
	  }

	  this.print(id, node);

	  if (!node.body) {
	    this.token(";");
	    return;
	  }

	  let body = node.body;

	  while (body.type === "TSModuleDeclaration") {
	    this.token(".");
	    this.print(body.id, body);
	    body = body.body;
	  }

	  this.space();
	  this.print(body, node);
	}

	function TSModuleBlock(node) {
	  this.tsPrintBraced(node.body, node);
	}

	function TSImportType(node) {
	  const {
	    argument,
	    qualifier,
	    typeParameters
	  } = node;
	  this.word("import");
	  this.token("(");
	  this.print(argument, node);
	  this.token(")");

	  if (qualifier) {
	    this.token(".");
	    this.print(qualifier, node);
	  }

	  if (typeParameters) {
	    this.print(typeParameters, node);
	  }
	}

	function TSImportEqualsDeclaration(node) {
	  const {
	    isExport,
	    id,
	    moduleReference
	  } = node;

	  if (isExport) {
	    this.word("export");
	    this.space();
	  }

	  this.word("import");
	  this.space();
	  this.print(id, node);
	  this.space();
	  this.token("=");
	  this.space();
	  this.print(moduleReference, node);
	  this.token(";");
	}

	function TSExternalModuleReference(node) {
	  this.token("require(");
	  this.print(node.expression, node);
	  this.token(")");
	}

	function TSNonNullExpression(node) {
	  this.print(node.expression, node);
	  this.token("!");
	}

	function TSExportAssignment(node) {
	  this.word("export");
	  this.space();
	  this.token("=");
	  this.space();
	  this.print(node.expression, node);
	  this.token(";");
	}

	function TSNamespaceExportDeclaration(node) {
	  this.word("export");
	  this.space();
	  this.word("as");
	  this.space();
	  this.word("namespace");
	  this.space();
	  this.print(node.id, node);
	}

	function tsPrintSignatureDeclarationBase(node) {
	  const {
	    typeParameters,
	    parameters
	  } = node;
	  this.print(typeParameters, node);
	  this.token("(");

	  this._parameters(parameters, node);

	  this.token(")");
	  this.print(node.typeAnnotation, node);
	}

	function tsPrintClassMemberModifiers(node, isField) {
	  if (isField && node.declare) {
	    this.word("declare");
	    this.space();
	  }

	  if (node.accessibility) {
	    this.word(node.accessibility);
	    this.space();
	  }

	  if (node.static) {
	    this.word("static");
	    this.space();
	  }

	  if (node.override) {
	    this.word("override");
	    this.space();
	  }

	  if (node.abstract) {
	    this.word("abstract");
	    this.space();
	  }

	  if (isField && node.readonly) {
	    this.word("readonly");
	    this.space();
	  }
	}

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _templateLiterals = templateLiterals;

	Object.keys(_templateLiterals).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _templateLiterals[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _templateLiterals[key];
	    }
	  });
	});

	var _expressions = expressions$1;

	Object.keys(_expressions).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _expressions[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _expressions[key];
	    }
	  });
	});

	var _statements = statements$2;

	Object.keys(_statements).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _statements[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _statements[key];
	    }
	  });
	});

	var _classes = classes;

	Object.keys(_classes).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _classes[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _classes[key];
	    }
	  });
	});

	var _methods = methods;

	Object.keys(_methods).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _methods[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _methods[key];
	    }
	  });
	});

	var _modules = modules;

	Object.keys(_modules).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _modules[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _modules[key];
	    }
	  });
	});

	var _types = types;

	Object.keys(_types).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _types[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _types[key];
	    }
	  });
	});

	var _flow = flow;

	Object.keys(_flow).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _flow[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _flow[key];
	    }
	  });
	});

	var _base = base;

	Object.keys(_base).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _base[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _base[key];
	    }
	  });
	});

	var _jsx = jsx$1;

	Object.keys(_jsx).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _jsx[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _jsx[key];
	    }
	  });
	});

	var _typescript = typescript;

	Object.keys(_typescript).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _typescript[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _typescript[key];
	    }
	  });
	});
	}(generators));

	Object.defineProperty(printer$1, "__esModule", {
	  value: true
	});
	printer$1.default = void 0;

	var _buffer = buffer$1;

	var n = node$4;

	var _t$v = lib$s;

	var generatorFunctions = generators;

	const {
	  isProgram: isProgram$1,
	  isFile,
	  isEmptyStatement
	} = _t$v;
	const SCIENTIFIC_NOTATION = /e/i;
	const ZERO_DECIMAL_INTEGER = /\.0+$/;
	const NON_DECIMAL_LITERAL = /^0[box]/;
	const PURE_ANNOTATION_RE = /^\s*[@#]__PURE__\s*$/;
	const {
	  needsParens,
	  needsWhitespaceAfter,
	  needsWhitespaceBefore
	} = n;

	class Printer {
	  constructor(format, map) {
	    this.inForStatementInitCounter = 0;
	    this._printStack = [];
	    this._indent = 0;
	    this._insideAux = false;
	    this._parenPushNewlineState = null;
	    this._noLineTerminator = false;
	    this._printAuxAfterOnNextUserNode = false;
	    this._printedComments = new WeakSet();
	    this._endsWithInteger = false;
	    this._endsWithWord = false;
	    this.format = format;
	    this._buf = new _buffer.default(map);
	  }

	  generate(ast) {
	    this.print(ast);

	    this._maybeAddAuxComment();

	    return this._buf.get();
	  }

	  indent() {
	    if (this.format.compact || this.format.concise) return;
	    this._indent++;
	  }

	  dedent() {
	    if (this.format.compact || this.format.concise) return;
	    this._indent--;
	  }

	  semicolon(force = false) {
	    this._maybeAddAuxComment();

	    this._append(";", !force);
	  }

	  rightBrace() {
	    if (this.format.minified) {
	      this._buf.removeLastSemicolon();
	    }

	    this.token("}");
	  }

	  space(force = false) {
	    if (this.format.compact) return;

	    if (force) {
	      this._space();
	    } else if (this._buf.hasContent()) {
	      const lastCp = this.getLastChar();

	      if (lastCp !== 32 && lastCp !== 10) {
	        this._space();
	      }
	    }
	  }

	  word(str) {
	    if (this._endsWithWord || this.endsWith(47) && str.charCodeAt(0) === 47) {
	      this._space();
	    }

	    this._maybeAddAuxComment();

	    this._append(str);

	    this._endsWithWord = true;
	  }

	  number(str) {
	    this.word(str);
	    this._endsWithInteger = Number.isInteger(+str) && !NON_DECIMAL_LITERAL.test(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str.charCodeAt(str.length - 1) !== 46;
	  }

	  token(str) {
	    const lastChar = this.getLastChar();
	    const strFirst = str.charCodeAt(0);

	    if (str === "--" && lastChar === 33 || strFirst === 43 && lastChar === 43 || strFirst === 45 && lastChar === 45 || strFirst === 46 && this._endsWithInteger) {
	      this._space();
	    }

	    this._maybeAddAuxComment();

	    this._append(str);
	  }

	  newline(i = 1) {
	    if (this.format.retainLines || this.format.compact) return;

	    if (this.format.concise) {
	      this.space();
	      return;
	    }

	    const charBeforeNewline = this.endsWithCharAndNewline();
	    if (charBeforeNewline === 10) return;

	    if (charBeforeNewline === 123 || charBeforeNewline === 58) {
	      i--;
	    }

	    if (i <= 0) return;

	    for (let j = 0; j < i; j++) {
	      this._newline();
	    }
	  }

	  endsWith(char) {
	    return this.getLastChar() === char;
	  }

	  getLastChar() {
	    return this._buf.getLastChar();
	  }

	  endsWithCharAndNewline() {
	    return this._buf.endsWithCharAndNewline();
	  }

	  removeTrailingNewline() {
	    this._buf.removeTrailingNewline();
	  }

	  exactSource(loc, cb) {
	    this._catchUp("start", loc);

	    this._buf.exactSource(loc, cb);
	  }

	  source(prop, loc) {
	    this._catchUp(prop, loc);

	    this._buf.source(prop, loc);
	  }

	  withSource(prop, loc, cb) {
	    this._catchUp(prop, loc);

	    this._buf.withSource(prop, loc, cb);
	  }

	  _space() {
	    this._append(" ", true);
	  }

	  _newline() {
	    this._append("\n", true);
	  }

	  _append(str, queue = false) {
	    this._maybeAddParen(str);

	    this._maybeIndent(str);

	    if (queue) this._buf.queue(str);else this._buf.append(str);
	    this._endsWithWord = false;
	    this._endsWithInteger = false;
	  }

	  _maybeIndent(str) {
	    if (this._indent && this.endsWith(10) && str.charCodeAt(0) !== 10) {
	      this._buf.queue(this._getIndent());
	    }
	  }

	  _maybeAddParen(str) {
	    const parenPushNewlineState = this._parenPushNewlineState;
	    if (!parenPushNewlineState) return;
	    let i;

	    for (i = 0; i < str.length && str[i] === " "; i++) continue;

	    if (i === str.length) {
	      return;
	    }

	    const cha = str[i];

	    if (cha !== "\n") {
	      if (cha !== "/" || i + 1 === str.length) {
	        this._parenPushNewlineState = null;
	        return;
	      }

	      const chaPost = str[i + 1];

	      if (chaPost === "*") {
	        if (PURE_ANNOTATION_RE.test(str.slice(i + 2, str.length - 2))) {
	          return;
	        }
	      } else if (chaPost !== "/") {
	        this._parenPushNewlineState = null;
	        return;
	      }
	    }

	    this.token("(");
	    this.indent();
	    parenPushNewlineState.printed = true;
	  }

	  _catchUp(prop, loc) {
	    if (!this.format.retainLines) return;
	    const pos = loc ? loc[prop] : null;

	    if ((pos == null ? void 0 : pos.line) != null) {
	      const count = pos.line - this._buf.getCurrentLine();

	      for (let i = 0; i < count; i++) {
	        this._newline();
	      }
	    }
	  }

	  _getIndent() {
	    return this.format.indent.style.repeat(this._indent);
	  }

	  startTerminatorless(isLabel = false) {
	    if (isLabel) {
	      this._noLineTerminator = true;
	      return null;
	    } else {
	      return this._parenPushNewlineState = {
	        printed: false
	      };
	    }
	  }

	  endTerminatorless(state) {
	    this._noLineTerminator = false;

	    if (state != null && state.printed) {
	      this.dedent();
	      this.newline();
	      this.token(")");
	    }
	  }

	  print(node, parent) {
	    if (!node) return;
	    const oldConcise = this.format.concise;

	    if (node._compact) {
	      this.format.concise = true;
	    }

	    const printMethod = this[node.type];

	    if (!printMethod) {
	      throw new ReferenceError(`unknown node of type ${JSON.stringify(node.type)} with constructor ${JSON.stringify(node == null ? void 0 : node.constructor.name)}`);
	    }

	    this._printStack.push(node);

	    const oldInAux = this._insideAux;
	    this._insideAux = !node.loc;

	    this._maybeAddAuxComment(this._insideAux && !oldInAux);

	    let shouldPrintParens = needsParens(node, parent, this._printStack);

	    if (this.format.retainFunctionParens && node.type === "FunctionExpression" && node.extra && node.extra.parenthesized) {
	      shouldPrintParens = true;
	    }

	    if (shouldPrintParens) this.token("(");

	    this._printLeadingComments(node);

	    const loc = isProgram$1(node) || isFile(node) ? null : node.loc;
	    this.withSource("start", loc, () => {
	      printMethod.call(this, node, parent);
	    });

	    this._printTrailingComments(node);

	    if (shouldPrintParens) this.token(")");

	    this._printStack.pop();

	    this.format.concise = oldConcise;
	    this._insideAux = oldInAux;
	  }

	  _maybeAddAuxComment(enteredPositionlessNode) {
	    if (enteredPositionlessNode) this._printAuxBeforeComment();
	    if (!this._insideAux) this._printAuxAfterComment();
	  }

	  _printAuxBeforeComment() {
	    if (this._printAuxAfterOnNextUserNode) return;
	    this._printAuxAfterOnNextUserNode = true;
	    const comment = this.format.auxiliaryCommentBefore;

	    if (comment) {
	      this._printComment({
	        type: "CommentBlock",
	        value: comment
	      });
	    }
	  }

	  _printAuxAfterComment() {
	    if (!this._printAuxAfterOnNextUserNode) return;
	    this._printAuxAfterOnNextUserNode = false;
	    const comment = this.format.auxiliaryCommentAfter;

	    if (comment) {
	      this._printComment({
	        type: "CommentBlock",
	        value: comment
	      });
	    }
	  }

	  getPossibleRaw(node) {
	    const extra = node.extra;

	    if (extra && extra.raw != null && extra.rawValue != null && node.value === extra.rawValue) {
	      return extra.raw;
	    }
	  }

	  printJoin(nodes, parent, opts = {}) {
	    if (!(nodes != null && nodes.length)) return;
	    if (opts.indent) this.indent();
	    const newlineOpts = {
	      addNewlines: opts.addNewlines
	    };

	    for (let i = 0; i < nodes.length; i++) {
	      const node = nodes[i];
	      if (!node) continue;
	      if (opts.statement) this._printNewline(true, node, parent, newlineOpts);
	      this.print(node, parent);

	      if (opts.iterator) {
	        opts.iterator(node, i);
	      }

	      if (opts.separator && i < nodes.length - 1) {
	        opts.separator.call(this);
	      }

	      if (opts.statement) this._printNewline(false, node, parent, newlineOpts);
	    }

	    if (opts.indent) this.dedent();
	  }

	  printAndIndentOnComments(node, parent) {
	    const indent = node.leadingComments && node.leadingComments.length > 0;
	    if (indent) this.indent();
	    this.print(node, parent);
	    if (indent) this.dedent();
	  }

	  printBlock(parent) {
	    const node = parent.body;

	    if (!isEmptyStatement(node)) {
	      this.space();
	    }

	    this.print(node, parent);
	  }

	  _printTrailingComments(node) {
	    this._printComments(this._getComments(false, node));
	  }

	  _printLeadingComments(node) {
	    this._printComments(this._getComments(true, node), true);
	  }

	  printInnerComments(node, indent = true) {
	    var _node$innerComments;

	    if (!((_node$innerComments = node.innerComments) != null && _node$innerComments.length)) return;
	    if (indent) this.indent();

	    this._printComments(node.innerComments);

	    if (indent) this.dedent();
	  }

	  printSequence(nodes, parent, opts = {}) {
	    opts.statement = true;
	    return this.printJoin(nodes, parent, opts);
	  }

	  printList(items, parent, opts = {}) {
	    if (opts.separator == null) {
	      opts.separator = commaSeparator;
	    }

	    return this.printJoin(items, parent, opts);
	  }

	  _printNewline(leading, node, parent, opts) {
	    if (this.format.retainLines || this.format.compact) return;

	    if (this.format.concise) {
	      this.space();
	      return;
	    }

	    let lines = 0;

	    if (this._buf.hasContent()) {
	      if (!leading) lines++;
	      if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;
	      const needs = leading ? needsWhitespaceBefore : needsWhitespaceAfter;
	      if (needs(node, parent)) lines++;
	    }

	    this.newline(Math.min(2, lines));
	  }

	  _getComments(leading, node) {
	    return node && (leading ? node.leadingComments : node.trailingComments) || [];
	  }

	  _printComment(comment, skipNewLines) {
	    if (!this.format.shouldPrintComment(comment.value)) return;
	    if (comment.ignore) return;
	    if (this._printedComments.has(comment)) return;

	    this._printedComments.add(comment);

	    const isBlockComment = comment.type === "CommentBlock";
	    const printNewLines = isBlockComment && !skipNewLines && !this._noLineTerminator;
	    if (printNewLines && this._buf.hasContent()) this.newline(1);
	    const lastCharCode = this.getLastChar();

	    if (lastCharCode !== 91 && lastCharCode !== 123) {
	      this.space();
	    }

	    let val = !isBlockComment && !this._noLineTerminator ? `//${comment.value}\n` : `/*${comment.value}*/`;

	    if (isBlockComment && this.format.indent.adjustMultilineComment) {
	      var _comment$loc;

	      const offset = (_comment$loc = comment.loc) == null ? void 0 : _comment$loc.start.column;

	      if (offset) {
	        const newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
	        val = val.replace(newlineRegex, "\n");
	      }

	      const indentSize = Math.max(this._getIndent().length, this.format.retainLines ? 0 : this._buf.getCurrentColumn());
	      val = val.replace(/\n(?!$)/g, `\n${" ".repeat(indentSize)}`);
	    }

	    if (this.endsWith(47)) this._space();
	    this.withSource("start", comment.loc, () => {
	      this._append(val);
	    });
	    if (printNewLines) this.newline(1);
	  }

	  _printComments(comments, inlinePureAnnotation) {
	    if (!(comments != null && comments.length)) return;

	    if (inlinePureAnnotation && comments.length === 1 && PURE_ANNOTATION_RE.test(comments[0].value)) {
	      this._printComment(comments[0], this._buf.hasContent() && !this.endsWith(10));
	    } else {
	      for (const comment of comments) {
	        this._printComment(comment);
	      }
	    }
	  }

	  printAssertions(node) {
	    var _node$assertions;

	    if ((_node$assertions = node.assertions) != null && _node$assertions.length) {
	      this.space();
	      this.word("assert");
	      this.space();
	      this.token("{");
	      this.space();
	      this.printList(node.assertions, node);
	      this.space();
	      this.token("}");
	    }
	  }

	}

	Object.assign(Printer.prototype, generatorFunctions);
	{
	  Printer.prototype.Noop = function Noop() {};
	}
	var _default$e = Printer;
	printer$1.default = _default$e;

	function commaSeparator() {
	  this.token(",");
	  this.space();
	}

	Object.defineProperty(lib$p, "__esModule", {
	  value: true
	});
	lib$p.default = generate$1;
	lib$p.CodeGenerator = void 0;

	var _sourceMap$1 = sourceMap$2;

	var _printer$1 = printer$1;

	class Generator extends _printer$1.default {
	  constructor(ast, opts = {}, code) {
	    const format = normalizeOptions$2(code, opts);
	    const map = opts.sourceMaps ? new _sourceMap$1.default(opts, code) : null;
	    super(format, map);
	    this.ast = void 0;
	    this.ast = ast;
	  }

	  generate() {
	    return super.generate(this.ast);
	  }

	}

	function normalizeOptions$2(code, opts) {
	  const format = {
	    auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
	    auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
	    shouldPrintComment: opts.shouldPrintComment,
	    retainLines: opts.retainLines,
	    retainFunctionParens: opts.retainFunctionParens,
	    comments: opts.comments == null || opts.comments,
	    compact: opts.compact,
	    minified: opts.minified,
	    concise: opts.concise,
	    indent: {
	      adjustMultilineComment: true,
	      style: "  ",
	      base: 0
	    },
	    decoratorsBeforeExport: !!opts.decoratorsBeforeExport,
	    jsescOption: Object.assign({
	      quotes: "double",
	      wrap: true,
	      minimal: false
	    }, opts.jsescOption),
	    recordAndTupleSyntaxType: opts.recordAndTupleSyntaxType,
	    topicToken: opts.topicToken
	  };
	  {
	    format.jsonCompatibleStrings = opts.jsonCompatibleStrings;
	  }

	  if (format.minified) {
	    format.compact = true;

	    format.shouldPrintComment = format.shouldPrintComment || (() => format.comments);
	  } else {
	    format.shouldPrintComment = format.shouldPrintComment || (value => format.comments || value.indexOf("@license") >= 0 || value.indexOf("@preserve") >= 0);
	  }

	  if (format.compact === "auto") {
	    format.compact = code.length > 500000;

	    if (format.compact) {
	      console.error("[BABEL] Note: The code generator has deoptimised the styling of " + `${opts.filename} as it exceeds the max of ${"500KB"}.`);
	    }
	  }

	  if (format.compact) {
	    format.indent.adjustMultilineComment = false;
	  }

	  return format;
	}

	class CodeGenerator {
	  constructor(ast, opts, code) {
	    this._generator = void 0;
	    this._generator = new Generator(ast, opts, code);
	  }

	  generate() {
	    return this._generator.generate();
	  }

	}

	lib$p.CodeGenerator = CodeGenerator;

	function generate$1(ast, opts, code) {
	  const gen = new Generator(ast, opts, code);
	  return gen.generate();
	}

	var ancestry = {};

	Object.defineProperty(ancestry, "__esModule", {
	  value: true
	});
	ancestry.findParent = findParent;
	ancestry.find = find$2;
	ancestry.getFunctionParent = getFunctionParent;
	ancestry.getStatementParent = getStatementParent;
	ancestry.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
	ancestry.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
	ancestry.getAncestry = getAncestry;
	ancestry.isAncestor = isAncestor;
	ancestry.isDescendant = isDescendant;
	ancestry.inType = inType;

	var _t$u = lib$s;

	const {
	  VISITOR_KEYS: VISITOR_KEYS$3
	} = _t$u;

	function findParent(callback) {
	  let path = this;

	  while (path = path.parentPath) {
	    if (callback(path)) return path;
	  }

	  return null;
	}

	function find$2(callback) {
	  let path = this;

	  do {
	    if (callback(path)) return path;
	  } while (path = path.parentPath);

	  return null;
	}

	function getFunctionParent() {
	  return this.findParent(p => p.isFunction());
	}

	function getStatementParent() {
	  let path = this;

	  do {
	    if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
	      break;
	    } else {
	      path = path.parentPath;
	    }
	  } while (path);

	  if (path && (path.isProgram() || path.isFile())) {
	    throw new Error("File/Program node, we can't possibly find a statement parent to this");
	  }

	  return path;
	}

	function getEarliestCommonAncestorFrom(paths) {
	  return this.getDeepestCommonAncestorFrom(paths, function (deepest, i, ancestries) {
	    let earliest;
	    const keys = VISITOR_KEYS$3[deepest.type];

	    for (const ancestry of ancestries) {
	      const path = ancestry[i + 1];

	      if (!earliest) {
	        earliest = path;
	        continue;
	      }

	      if (path.listKey && earliest.listKey === path.listKey) {
	        if (path.key < earliest.key) {
	          earliest = path;
	          continue;
	        }
	      }

	      const earliestKeyIndex = keys.indexOf(earliest.parentKey);
	      const currentKeyIndex = keys.indexOf(path.parentKey);

	      if (earliestKeyIndex > currentKeyIndex) {
	        earliest = path;
	      }
	    }

	    return earliest;
	  });
	}

	function getDeepestCommonAncestorFrom(paths, filter) {
	  if (!paths.length) {
	    return this;
	  }

	  if (paths.length === 1) {
	    return paths[0];
	  }

	  let minDepth = Infinity;
	  let lastCommonIndex, lastCommon;
	  const ancestries = paths.map(path => {
	    const ancestry = [];

	    do {
	      ancestry.unshift(path);
	    } while ((path = path.parentPath) && path !== this);

	    if (ancestry.length < minDepth) {
	      minDepth = ancestry.length;
	    }

	    return ancestry;
	  });
	  const first = ancestries[0];

	  depthLoop: for (let i = 0; i < minDepth; i++) {
	    const shouldMatch = first[i];

	    for (const ancestry of ancestries) {
	      if (ancestry[i] !== shouldMatch) {
	        break depthLoop;
	      }
	    }

	    lastCommonIndex = i;
	    lastCommon = shouldMatch;
	  }

	  if (lastCommon) {
	    if (filter) {
	      return filter(lastCommon, lastCommonIndex, ancestries);
	    } else {
	      return lastCommon;
	    }
	  } else {
	    throw new Error("Couldn't find intersection");
	  }
	}

	function getAncestry() {
	  let path = this;
	  const paths = [];

	  do {
	    paths.push(path);
	  } while (path = path.parentPath);

	  return paths;
	}

	function isAncestor(maybeDescendant) {
	  return maybeDescendant.isDescendant(this);
	}

	function isDescendant(maybeAncestor) {
	  return !!this.findParent(parent => parent === maybeAncestor);
	}

	function inType(...candidateTypes) {
	  let path = this;

	  while (path) {
	    for (const type of candidateTypes) {
	      if (path.node.type === type) return true;
	    }

	    path = path.parentPath;
	  }

	  return false;
	}

	var inference = {};

	var inferers$1 = {};

	var infererReference = {};

	Object.defineProperty(infererReference, "__esModule", {
	  value: true
	});
	infererReference.default = _default$d;

	var _t$t = lib$s;

	const {
	  BOOLEAN_NUMBER_BINARY_OPERATORS,
	  createFlowUnionType,
	  createTSUnionType,
	  createTypeAnnotationBasedOnTypeof,
	  createUnionTypeAnnotation,
	  isTSTypeAnnotation,
	  numberTypeAnnotation,
	  voidTypeAnnotation: voidTypeAnnotation$1
	} = _t$t;

	function _default$d(node) {
	  if (!this.isReferenced()) return;
	  const binding = this.scope.getBinding(node.name);

	  if (binding) {
	    if (binding.identifier.typeAnnotation) {
	      return binding.identifier.typeAnnotation;
	    } else {
	      return getTypeAnnotationBindingConstantViolations(binding, this, node.name);
	    }
	  }

	  if (node.name === "undefined") {
	    return voidTypeAnnotation$1();
	  } else if (node.name === "NaN" || node.name === "Infinity") {
	    return numberTypeAnnotation();
	  } else if (node.name === "arguments") ;
	}

	function getTypeAnnotationBindingConstantViolations(binding, path, name) {
	  const types = [];
	  const functionConstantViolations = [];
	  let constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);
	  const testType = getConditionalAnnotation(binding, path, name);

	  if (testType) {
	    const testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);
	    constantViolations = constantViolations.filter(path => testConstantViolations.indexOf(path) < 0);
	    types.push(testType.typeAnnotation);
	  }

	  if (constantViolations.length) {
	    constantViolations.push(...functionConstantViolations);

	    for (const violation of constantViolations) {
	      types.push(violation.getTypeAnnotation());
	    }
	  }

	  if (!types.length) {
	    return;
	  }

	  if (isTSTypeAnnotation(types[0]) && createTSUnionType) {
	    return createTSUnionType(types);
	  }

	  if (createFlowUnionType) {
	    return createFlowUnionType(types);
	  }

	  return createUnionTypeAnnotation(types);
	}

	function getConstantViolationsBefore(binding, path, functions) {
	  const violations = binding.constantViolations.slice();
	  violations.unshift(binding.path);
	  return violations.filter(violation => {
	    violation = violation.resolve();

	    const status = violation._guessExecutionStatusRelativeTo(path);

	    if (functions && status === "unknown") functions.push(violation);
	    return status === "before";
	  });
	}

	function inferAnnotationFromBinaryExpression(name, path) {
	  const operator = path.node.operator;
	  const right = path.get("right").resolve();
	  const left = path.get("left").resolve();
	  let target;

	  if (left.isIdentifier({
	    name
	  })) {
	    target = right;
	  } else if (right.isIdentifier({
	    name
	  })) {
	    target = left;
	  }

	  if (target) {
	    if (operator === "===") {
	      return target.getTypeAnnotation();
	    }

	    if (BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
	      return numberTypeAnnotation();
	    }

	    return;
	  }

	  if (operator !== "===" && operator !== "==") return;
	  let typeofPath;
	  let typePath;

	  if (left.isUnaryExpression({
	    operator: "typeof"
	  })) {
	    typeofPath = left;
	    typePath = right;
	  } else if (right.isUnaryExpression({
	    operator: "typeof"
	  })) {
	    typeofPath = right;
	    typePath = left;
	  }

	  if (!typeofPath) return;
	  if (!typeofPath.get("argument").isIdentifier({
	    name
	  })) return;
	  typePath = typePath.resolve();
	  if (!typePath.isLiteral()) return;
	  const typeValue = typePath.node.value;
	  if (typeof typeValue !== "string") return;
	  return createTypeAnnotationBasedOnTypeof(typeValue);
	}

	function getParentConditionalPath(binding, path, name) {
	  let parentPath;

	  while (parentPath = path.parentPath) {
	    if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
	      if (path.key === "test") {
	        return;
	      }

	      return parentPath;
	    }

	    if (parentPath.isFunction()) {
	      if (parentPath.parentPath.scope.getBinding(name) !== binding) return;
	    }

	    path = parentPath;
	  }
	}

	function getConditionalAnnotation(binding, path, name) {
	  const ifStatement = getParentConditionalPath(binding, path, name);
	  if (!ifStatement) return;
	  const test = ifStatement.get("test");
	  const paths = [test];
	  const types = [];

	  for (let i = 0; i < paths.length; i++) {
	    const path = paths[i];

	    if (path.isLogicalExpression()) {
	      if (path.node.operator === "&&") {
	        paths.push(path.get("left"));
	        paths.push(path.get("right"));
	      }
	    } else if (path.isBinaryExpression()) {
	      const type = inferAnnotationFromBinaryExpression(name, path);
	      if (type) types.push(type);
	    }
	  }

	  if (types.length) {
	    if (isTSTypeAnnotation(types[0]) && createTSUnionType) {
	      return {
	        typeAnnotation: createTSUnionType(types),
	        ifStatement
	      };
	    }

	    if (createFlowUnionType) {
	      return {
	        typeAnnotation: createFlowUnionType(types),
	        ifStatement
	      };
	    }

	    return {
	      typeAnnotation: createUnionTypeAnnotation(types),
	      ifStatement
	    };
	  }

	  return getConditionalAnnotation(ifStatement, name);
	}

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.VariableDeclarator = VariableDeclarator;
	exports.TypeCastExpression = TypeCastExpression;
	exports.NewExpression = NewExpression;
	exports.TemplateLiteral = TemplateLiteral;
	exports.UnaryExpression = UnaryExpression;
	exports.BinaryExpression = BinaryExpression;
	exports.LogicalExpression = LogicalExpression;
	exports.ConditionalExpression = ConditionalExpression;
	exports.SequenceExpression = SequenceExpression;
	exports.ParenthesizedExpression = ParenthesizedExpression;
	exports.AssignmentExpression = AssignmentExpression;
	exports.UpdateExpression = UpdateExpression;
	exports.StringLiteral = StringLiteral;
	exports.NumericLiteral = NumericLiteral;
	exports.BooleanLiteral = BooleanLiteral;
	exports.NullLiteral = NullLiteral;
	exports.RegExpLiteral = RegExpLiteral;
	exports.ObjectExpression = ObjectExpression;
	exports.ArrayExpression = ArrayExpression;
	exports.RestElement = RestElement;
	exports.ClassDeclaration = exports.ClassExpression = exports.FunctionDeclaration = exports.ArrowFunctionExpression = exports.FunctionExpression = Func;
	exports.CallExpression = CallExpression;
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	Object.defineProperty(exports, "Identifier", {
	  enumerable: true,
	  get: function () {
	    return _infererReference.default;
	  }
	});

	var _t = lib$s;

	var _infererReference = infererReference;

	const {
	  BOOLEAN_BINARY_OPERATORS,
	  BOOLEAN_UNARY_OPERATORS,
	  NUMBER_BINARY_OPERATORS,
	  NUMBER_UNARY_OPERATORS,
	  STRING_UNARY_OPERATORS,
	  anyTypeAnnotation,
	  arrayTypeAnnotation,
	  booleanTypeAnnotation,
	  buildMatchMemberExpression,
	  createFlowUnionType,
	  createTSUnionType,
	  createUnionTypeAnnotation,
	  genericTypeAnnotation,
	  identifier,
	  isTSTypeAnnotation,
	  nullLiteralTypeAnnotation,
	  numberTypeAnnotation,
	  stringTypeAnnotation,
	  tupleTypeAnnotation,
	  unionTypeAnnotation,
	  voidTypeAnnotation
	} = _t;

	function VariableDeclarator() {
	  var _type;

	  const id = this.get("id");
	  if (!id.isIdentifier()) return;
	  const init = this.get("init");
	  let type = init.getTypeAnnotation();

	  if (((_type = type) == null ? void 0 : _type.type) === "AnyTypeAnnotation") {
	    if (init.isCallExpression() && init.get("callee").isIdentifier({
	      name: "Array"
	    }) && !init.scope.hasBinding("Array", true)) {
	      type = ArrayExpression();
	    }
	  }

	  return type;
	}

	function TypeCastExpression(node) {
	  return node.typeAnnotation;
	}

	TypeCastExpression.validParent = true;

	function NewExpression(node) {
	  if (this.get("callee").isIdentifier()) {
	    return genericTypeAnnotation(node.callee);
	  }
	}

	function TemplateLiteral() {
	  return stringTypeAnnotation();
	}

	function UnaryExpression(node) {
	  const operator = node.operator;

	  if (operator === "void") {
	    return voidTypeAnnotation();
	  } else if (NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {
	    return numberTypeAnnotation();
	  } else if (STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {
	    return stringTypeAnnotation();
	  } else if (BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {
	    return booleanTypeAnnotation();
	  }
	}

	function BinaryExpression(node) {
	  const operator = node.operator;

	  if (NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
	    return numberTypeAnnotation();
	  } else if (BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {
	    return booleanTypeAnnotation();
	  } else if (operator === "+") {
	    const right = this.get("right");
	    const left = this.get("left");

	    if (left.isBaseType("number") && right.isBaseType("number")) {
	      return numberTypeAnnotation();
	    } else if (left.isBaseType("string") || right.isBaseType("string")) {
	      return stringTypeAnnotation();
	    }

	    return unionTypeAnnotation([stringTypeAnnotation(), numberTypeAnnotation()]);
	  }
	}

	function LogicalExpression() {
	  const argumentTypes = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];

	  if (isTSTypeAnnotation(argumentTypes[0]) && createTSUnionType) {
	    return createTSUnionType(argumentTypes);
	  }

	  if (createFlowUnionType) {
	    return createFlowUnionType(argumentTypes);
	  }

	  return createUnionTypeAnnotation(argumentTypes);
	}

	function ConditionalExpression() {
	  const argumentTypes = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];

	  if (isTSTypeAnnotation(argumentTypes[0]) && createTSUnionType) {
	    return createTSUnionType(argumentTypes);
	  }

	  if (createFlowUnionType) {
	    return createFlowUnionType(argumentTypes);
	  }

	  return createUnionTypeAnnotation(argumentTypes);
	}

	function SequenceExpression() {
	  return this.get("expressions").pop().getTypeAnnotation();
	}

	function ParenthesizedExpression() {
	  return this.get("expression").getTypeAnnotation();
	}

	function AssignmentExpression() {
	  return this.get("right").getTypeAnnotation();
	}

	function UpdateExpression(node) {
	  const operator = node.operator;

	  if (operator === "++" || operator === "--") {
	    return numberTypeAnnotation();
	  }
	}

	function StringLiteral() {
	  return stringTypeAnnotation();
	}

	function NumericLiteral() {
	  return numberTypeAnnotation();
	}

	function BooleanLiteral() {
	  return booleanTypeAnnotation();
	}

	function NullLiteral() {
	  return nullLiteralTypeAnnotation();
	}

	function RegExpLiteral() {
	  return genericTypeAnnotation(identifier("RegExp"));
	}

	function ObjectExpression() {
	  return genericTypeAnnotation(identifier("Object"));
	}

	function ArrayExpression() {
	  return genericTypeAnnotation(identifier("Array"));
	}

	function RestElement() {
	  return ArrayExpression();
	}

	RestElement.validParent = true;

	function Func() {
	  return genericTypeAnnotation(identifier("Function"));
	}

	const isArrayFrom = buildMatchMemberExpression("Array.from");
	const isObjectKeys = buildMatchMemberExpression("Object.keys");
	const isObjectValues = buildMatchMemberExpression("Object.values");
	const isObjectEntries = buildMatchMemberExpression("Object.entries");

	function CallExpression() {
	  const {
	    callee
	  } = this.node;

	  if (isObjectKeys(callee)) {
	    return arrayTypeAnnotation(stringTypeAnnotation());
	  } else if (isArrayFrom(callee) || isObjectValues(callee)) {
	    return arrayTypeAnnotation(anyTypeAnnotation());
	  } else if (isObjectEntries(callee)) {
	    return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]));
	  }

	  return resolveCall(this.get("callee"));
	}

	function TaggedTemplateExpression() {
	  return resolveCall(this.get("tag"));
	}

	function resolveCall(callee) {
	  callee = callee.resolve();

	  if (callee.isFunction()) {
	    if (callee.is("async")) {
	      if (callee.is("generator")) {
	        return genericTypeAnnotation(identifier("AsyncIterator"));
	      } else {
	        return genericTypeAnnotation(identifier("Promise"));
	      }
	    } else {
	      if (callee.node.returnType) {
	        return callee.node.returnType;
	      }
	    }
	  }
	}
	}(inferers$1));

	Object.defineProperty(inference, "__esModule", {
	  value: true
	});
	inference.getTypeAnnotation = getTypeAnnotation;
	inference._getTypeAnnotation = _getTypeAnnotation;
	inference.isBaseType = isBaseType;
	inference.couldBeBaseType = couldBeBaseType;
	inference.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
	inference.isGenericType = isGenericType;

	var inferers = inferers$1;

	var _t$s = lib$s;

	const {
	  anyTypeAnnotation,
	  isAnyTypeAnnotation,
	  isBooleanTypeAnnotation,
	  isEmptyTypeAnnotation,
	  isFlowBaseAnnotation,
	  isGenericTypeAnnotation,
	  isIdentifier: isIdentifier$5,
	  isMixedTypeAnnotation,
	  isNumberTypeAnnotation,
	  isStringTypeAnnotation,
	  isTypeAnnotation,
	  isUnionTypeAnnotation,
	  isVoidTypeAnnotation,
	  stringTypeAnnotation,
	  voidTypeAnnotation
	} = _t$s;

	function getTypeAnnotation() {
	  if (this.typeAnnotation) return this.typeAnnotation;
	  let type = this._getTypeAnnotation() || anyTypeAnnotation();
	  if (isTypeAnnotation(type)) type = type.typeAnnotation;
	  return this.typeAnnotation = type;
	}

	const typeAnnotationInferringNodes = new WeakSet();

	function _getTypeAnnotation() {
	  const node = this.node;

	  if (!node) {
	    if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
	      const declar = this.parentPath.parentPath;
	      const declarParent = declar.parentPath;

	      if (declar.key === "left" && declarParent.isForInStatement()) {
	        return stringTypeAnnotation();
	      }

	      if (declar.key === "left" && declarParent.isForOfStatement()) {
	        return anyTypeAnnotation();
	      }

	      return voidTypeAnnotation();
	    } else {
	      return;
	    }
	  }

	  if (node.typeAnnotation) {
	    return node.typeAnnotation;
	  }

	  if (typeAnnotationInferringNodes.has(node)) {
	    return;
	  }

	  typeAnnotationInferringNodes.add(node);

	  try {
	    var _inferer;

	    let inferer = inferers[node.type];

	    if (inferer) {
	      return inferer.call(this, node);
	    }

	    inferer = inferers[this.parentPath.type];

	    if ((_inferer = inferer) != null && _inferer.validParent) {
	      return this.parentPath.getTypeAnnotation();
	    }
	  } finally {
	    typeAnnotationInferringNodes.delete(node);
	  }
	}

	function isBaseType(baseName, soft) {
	  return _isBaseType(baseName, this.getTypeAnnotation(), soft);
	}

	function _isBaseType(baseName, type, soft) {
	  if (baseName === "string") {
	    return isStringTypeAnnotation(type);
	  } else if (baseName === "number") {
	    return isNumberTypeAnnotation(type);
	  } else if (baseName === "boolean") {
	    return isBooleanTypeAnnotation(type);
	  } else if (baseName === "any") {
	    return isAnyTypeAnnotation(type);
	  } else if (baseName === "mixed") {
	    return isMixedTypeAnnotation(type);
	  } else if (baseName === "empty") {
	    return isEmptyTypeAnnotation(type);
	  } else if (baseName === "void") {
	    return isVoidTypeAnnotation(type);
	  } else {
	    if (soft) {
	      return false;
	    } else {
	      throw new Error(`Unknown base type ${baseName}`);
	    }
	  }
	}

	function couldBeBaseType(name) {
	  const type = this.getTypeAnnotation();
	  if (isAnyTypeAnnotation(type)) return true;

	  if (isUnionTypeAnnotation(type)) {
	    for (const type2 of type.types) {
	      if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {
	        return true;
	      }
	    }

	    return false;
	  } else {
	    return _isBaseType(name, type, true);
	  }
	}

	function baseTypeStrictlyMatches(rightArg) {
	  const left = this.getTypeAnnotation();
	  const right = rightArg.getTypeAnnotation();

	  if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {
	    return right.type === left.type;
	  }

	  return false;
	}

	function isGenericType(genericName) {
	  const type = this.getTypeAnnotation();
	  return isGenericTypeAnnotation(type) && isIdentifier$5(type.id, {
	    name: genericName
	  });
	}

	var replacement = {};

	var lib$o = {};

	var lib$n = {};

	var jsTokens = {};

	// Copyright 2014, 2015, 2016, 2017, 2018 Simon Lydell
	// License: MIT. (See LICENSE.)

	Object.defineProperty(jsTokens, "__esModule", {
	  value: true
	});

	// This regex comes from regex.coffee, and is inserted here by generate-index.js
	// (run `npm run build`).
	jsTokens.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;

	jsTokens.matchToToken = function(match) {
	  var token = {type: "invalid", value: match[0], closed: undefined};
	       if (match[ 1]) token.type = "string" , token.closed = !!(match[3] || match[4]);
	  else if (match[ 5]) token.type = "comment";
	  else if (match[ 6]) token.type = "comment", token.closed = !!match[7];
	  else if (match[ 8]) token.type = "regex";
	  else if (match[ 9]) token.type = "number";
	  else if (match[10]) token.type = "name";
	  else if (match[11]) token.type = "punctuator";
	  else if (match[12]) token.type = "whitespace";
	  return token
	};

	var chalk = {exports: {}};

	var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

	var escapeStringRegexp = function (str) {
		if (typeof str !== 'string') {
			throw new TypeError('Expected a string');
		}

		return str.replace(matchOperatorsRe, '\\$&');
	};

	var ansiStyles = {exports: {}};

	var conversions$2 = {exports: {}};

	var colorName = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};

	/* MIT license */

	var cssKeywords = colorName;

	// NOTE: conversions should only return primitive values (i.e. arrays, or
	//       values that give correct `typeof` results).
	//       do not use box values types (i.e. Number(), String(), etc.)

	var reverseKeywords = {};
	for (var key$2 in cssKeywords) {
		if (cssKeywords.hasOwnProperty(key$2)) {
			reverseKeywords[cssKeywords[key$2]] = key$2;
		}
	}

	var convert$1 = conversions$2.exports = {
		rgb: {channels: 3, labels: 'rgb'},
		hsl: {channels: 3, labels: 'hsl'},
		hsv: {channels: 3, labels: 'hsv'},
		hwb: {channels: 3, labels: 'hwb'},
		cmyk: {channels: 4, labels: 'cmyk'},
		xyz: {channels: 3, labels: 'xyz'},
		lab: {channels: 3, labels: 'lab'},
		lch: {channels: 3, labels: 'lch'},
		hex: {channels: 1, labels: ['hex']},
		keyword: {channels: 1, labels: ['keyword']},
		ansi16: {channels: 1, labels: ['ansi16']},
		ansi256: {channels: 1, labels: ['ansi256']},
		hcg: {channels: 3, labels: ['h', 'c', 'g']},
		apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
		gray: {channels: 1, labels: ['gray']}
	};

	// hide .channels and .labels properties
	for (var model in convert$1) {
		if (convert$1.hasOwnProperty(model)) {
			if (!('channels' in convert$1[model])) {
				throw new Error('missing channels property: ' + model);
			}

			if (!('labels' in convert$1[model])) {
				throw new Error('missing channel labels property: ' + model);
			}

			if (convert$1[model].labels.length !== convert$1[model].channels) {
				throw new Error('channel and label counts mismatch: ' + model);
			}

			var channels = convert$1[model].channels;
			var labels = convert$1[model].labels;
			delete convert$1[model].channels;
			delete convert$1[model].labels;
			Object.defineProperty(convert$1[model], 'channels', {value: channels});
			Object.defineProperty(convert$1[model], 'labels', {value: labels});
		}
	}

	convert$1.rgb.hsl = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var min = Math.min(r, g, b);
		var max = Math.max(r, g, b);
		var delta = max - min;
		var h;
		var s;
		var l;

		if (max === min) {
			h = 0;
		} else if (r === max) {
			h = (g - b) / delta;
		} else if (g === max) {
			h = 2 + (b - r) / delta;
		} else if (b === max) {
			h = 4 + (r - g) / delta;
		}

		h = Math.min(h * 60, 360);

		if (h < 0) {
			h += 360;
		}

		l = (min + max) / 2;

		if (max === min) {
			s = 0;
		} else if (l <= 0.5) {
			s = delta / (max + min);
		} else {
			s = delta / (2 - max - min);
		}

		return [h, s * 100, l * 100];
	};

	convert$1.rgb.hsv = function (rgb) {
		var rdif;
		var gdif;
		var bdif;
		var h;
		var s;

		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var v = Math.max(r, g, b);
		var diff = v - Math.min(r, g, b);
		var diffc = function (c) {
			return (v - c) / 6 / diff + 1 / 2;
		};

		if (diff === 0) {
			h = s = 0;
		} else {
			s = diff / v;
			rdif = diffc(r);
			gdif = diffc(g);
			bdif = diffc(b);

			if (r === v) {
				h = bdif - gdif;
			} else if (g === v) {
				h = (1 / 3) + rdif - bdif;
			} else if (b === v) {
				h = (2 / 3) + gdif - rdif;
			}
			if (h < 0) {
				h += 1;
			} else if (h > 1) {
				h -= 1;
			}
		}

		return [
			h * 360,
			s * 100,
			v * 100
		];
	};

	convert$1.rgb.hwb = function (rgb) {
		var r = rgb[0];
		var g = rgb[1];
		var b = rgb[2];
		var h = convert$1.rgb.hsl(rgb)[0];
		var w = 1 / 255 * Math.min(r, Math.min(g, b));

		b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

		return [h, w * 100, b * 100];
	};

	convert$1.rgb.cmyk = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var c;
		var m;
		var y;
		var k;

		k = Math.min(1 - r, 1 - g, 1 - b);
		c = (1 - r - k) / (1 - k) || 0;
		m = (1 - g - k) / (1 - k) || 0;
		y = (1 - b - k) / (1 - k) || 0;

		return [c * 100, m * 100, y * 100, k * 100];
	};

	/**
	 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	 * */
	function comparativeDistance(x, y) {
		return (
			Math.pow(x[0] - y[0], 2) +
			Math.pow(x[1] - y[1], 2) +
			Math.pow(x[2] - y[2], 2)
		);
	}

	convert$1.rgb.keyword = function (rgb) {
		var reversed = reverseKeywords[rgb];
		if (reversed) {
			return reversed;
		}

		var currentClosestDistance = Infinity;
		var currentClosestKeyword;

		for (var keyword in cssKeywords) {
			if (cssKeywords.hasOwnProperty(keyword)) {
				var value = cssKeywords[keyword];

				// Compute comparative distance
				var distance = comparativeDistance(rgb, value);

				// Check if its less, if so set as closest
				if (distance < currentClosestDistance) {
					currentClosestDistance = distance;
					currentClosestKeyword = keyword;
				}
			}
		}

		return currentClosestKeyword;
	};

	convert$1.keyword.rgb = function (keyword) {
		return cssKeywords[keyword];
	};

	convert$1.rgb.xyz = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;

		// assume sRGB
		r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
		g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
		b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

		var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
		var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
		var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

		return [x * 100, y * 100, z * 100];
	};

	convert$1.rgb.lab = function (rgb) {
		var xyz = convert$1.rgb.xyz(rgb);
		var x = xyz[0];
		var y = xyz[1];
		var z = xyz[2];
		var l;
		var a;
		var b;

		x /= 95.047;
		y /= 100;
		z /= 108.883;

		x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
		y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
		z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

		l = (116 * y) - 16;
		a = 500 * (x - y);
		b = 200 * (y - z);

		return [l, a, b];
	};

	convert$1.hsl.rgb = function (hsl) {
		var h = hsl[0] / 360;
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var t1;
		var t2;
		var t3;
		var rgb;
		var val;

		if (s === 0) {
			val = l * 255;
			return [val, val, val];
		}

		if (l < 0.5) {
			t2 = l * (1 + s);
		} else {
			t2 = l + s - l * s;
		}

		t1 = 2 * l - t2;

		rgb = [0, 0, 0];
		for (var i = 0; i < 3; i++) {
			t3 = h + 1 / 3 * -(i - 1);
			if (t3 < 0) {
				t3++;
			}
			if (t3 > 1) {
				t3--;
			}

			if (6 * t3 < 1) {
				val = t1 + (t2 - t1) * 6 * t3;
			} else if (2 * t3 < 1) {
				val = t2;
			} else if (3 * t3 < 2) {
				val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
			} else {
				val = t1;
			}

			rgb[i] = val * 255;
		}

		return rgb;
	};

	convert$1.hsl.hsv = function (hsl) {
		var h = hsl[0];
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var smin = s;
		var lmin = Math.max(l, 0.01);
		var sv;
		var v;

		l *= 2;
		s *= (l <= 1) ? l : 2 - l;
		smin *= lmin <= 1 ? lmin : 2 - lmin;
		v = (l + s) / 2;
		sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

		return [h, sv * 100, v * 100];
	};

	convert$1.hsv.rgb = function (hsv) {
		var h = hsv[0] / 60;
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;
		var hi = Math.floor(h) % 6;

		var f = h - Math.floor(h);
		var p = 255 * v * (1 - s);
		var q = 255 * v * (1 - (s * f));
		var t = 255 * v * (1 - (s * (1 - f)));
		v *= 255;

		switch (hi) {
			case 0:
				return [v, t, p];
			case 1:
				return [q, v, p];
			case 2:
				return [p, v, t];
			case 3:
				return [p, q, v];
			case 4:
				return [t, p, v];
			case 5:
				return [v, p, q];
		}
	};

	convert$1.hsv.hsl = function (hsv) {
		var h = hsv[0];
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;
		var vmin = Math.max(v, 0.01);
		var lmin;
		var sl;
		var l;

		l = (2 - s) * v;
		lmin = (2 - s) * vmin;
		sl = s * vmin;
		sl /= (lmin <= 1) ? lmin : 2 - lmin;
		sl = sl || 0;
		l /= 2;

		return [h, sl * 100, l * 100];
	};

	// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
	convert$1.hwb.rgb = function (hwb) {
		var h = hwb[0] / 360;
		var wh = hwb[1] / 100;
		var bl = hwb[2] / 100;
		var ratio = wh + bl;
		var i;
		var v;
		var f;
		var n;

		// wh + bl cant be > 1
		if (ratio > 1) {
			wh /= ratio;
			bl /= ratio;
		}

		i = Math.floor(6 * h);
		v = 1 - bl;
		f = 6 * h - i;

		if ((i & 0x01) !== 0) {
			f = 1 - f;
		}

		n = wh + f * (v - wh); // linear interpolation

		var r;
		var g;
		var b;
		switch (i) {
			default:
			case 6:
			case 0: r = v; g = n; b = wh; break;
			case 1: r = n; g = v; b = wh; break;
			case 2: r = wh; g = v; b = n; break;
			case 3: r = wh; g = n; b = v; break;
			case 4: r = n; g = wh; b = v; break;
			case 5: r = v; g = wh; b = n; break;
		}

		return [r * 255, g * 255, b * 255];
	};

	convert$1.cmyk.rgb = function (cmyk) {
		var c = cmyk[0] / 100;
		var m = cmyk[1] / 100;
		var y = cmyk[2] / 100;
		var k = cmyk[3] / 100;
		var r;
		var g;
		var b;

		r = 1 - Math.min(1, c * (1 - k) + k);
		g = 1 - Math.min(1, m * (1 - k) + k);
		b = 1 - Math.min(1, y * (1 - k) + k);

		return [r * 255, g * 255, b * 255];
	};

	convert$1.xyz.rgb = function (xyz) {
		var x = xyz[0] / 100;
		var y = xyz[1] / 100;
		var z = xyz[2] / 100;
		var r;
		var g;
		var b;

		r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
		g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
		b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

		// assume sRGB
		r = r > 0.0031308
			? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
			: r * 12.92;

		g = g > 0.0031308
			? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
			: g * 12.92;

		b = b > 0.0031308
			? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
			: b * 12.92;

		r = Math.min(Math.max(0, r), 1);
		g = Math.min(Math.max(0, g), 1);
		b = Math.min(Math.max(0, b), 1);

		return [r * 255, g * 255, b * 255];
	};

	convert$1.xyz.lab = function (xyz) {
		var x = xyz[0];
		var y = xyz[1];
		var z = xyz[2];
		var l;
		var a;
		var b;

		x /= 95.047;
		y /= 100;
		z /= 108.883;

		x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
		y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
		z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

		l = (116 * y) - 16;
		a = 500 * (x - y);
		b = 200 * (y - z);

		return [l, a, b];
	};

	convert$1.lab.xyz = function (lab) {
		var l = lab[0];
		var a = lab[1];
		var b = lab[2];
		var x;
		var y;
		var z;

		y = (l + 16) / 116;
		x = a / 500 + y;
		z = y - b / 200;

		var y2 = Math.pow(y, 3);
		var x2 = Math.pow(x, 3);
		var z2 = Math.pow(z, 3);
		y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
		x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
		z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

		x *= 95.047;
		y *= 100;
		z *= 108.883;

		return [x, y, z];
	};

	convert$1.lab.lch = function (lab) {
		var l = lab[0];
		var a = lab[1];
		var b = lab[2];
		var hr;
		var h;
		var c;

		hr = Math.atan2(b, a);
		h = hr * 360 / 2 / Math.PI;

		if (h < 0) {
			h += 360;
		}

		c = Math.sqrt(a * a + b * b);

		return [l, c, h];
	};

	convert$1.lch.lab = function (lch) {
		var l = lch[0];
		var c = lch[1];
		var h = lch[2];
		var a;
		var b;
		var hr;

		hr = h / 360 * 2 * Math.PI;
		a = c * Math.cos(hr);
		b = c * Math.sin(hr);

		return [l, a, b];
	};

	convert$1.rgb.ansi16 = function (args) {
		var r = args[0];
		var g = args[1];
		var b = args[2];
		var value = 1 in arguments ? arguments[1] : convert$1.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

		value = Math.round(value / 50);

		if (value === 0) {
			return 30;
		}

		var ansi = 30
			+ ((Math.round(b / 255) << 2)
			| (Math.round(g / 255) << 1)
			| Math.round(r / 255));

		if (value === 2) {
			ansi += 60;
		}

		return ansi;
	};

	convert$1.hsv.ansi16 = function (args) {
		// optimization here; we already know the value and don't need to get
		// it converted for us.
		return convert$1.rgb.ansi16(convert$1.hsv.rgb(args), args[2]);
	};

	convert$1.rgb.ansi256 = function (args) {
		var r = args[0];
		var g = args[1];
		var b = args[2];

		// we use the extended greyscale palette here, with the exception of
		// black and white. normal palette only has 4 greyscale shades.
		if (r === g && g === b) {
			if (r < 8) {
				return 16;
			}

			if (r > 248) {
				return 231;
			}

			return Math.round(((r - 8) / 247) * 24) + 232;
		}

		var ansi = 16
			+ (36 * Math.round(r / 255 * 5))
			+ (6 * Math.round(g / 255 * 5))
			+ Math.round(b / 255 * 5);

		return ansi;
	};

	convert$1.ansi16.rgb = function (args) {
		var color = args % 10;

		// handle greyscale
		if (color === 0 || color === 7) {
			if (args > 50) {
				color += 3.5;
			}

			color = color / 10.5 * 255;

			return [color, color, color];
		}

		var mult = (~~(args > 50) + 1) * 0.5;
		var r = ((color & 1) * mult) * 255;
		var g = (((color >> 1) & 1) * mult) * 255;
		var b = (((color >> 2) & 1) * mult) * 255;

		return [r, g, b];
	};

	convert$1.ansi256.rgb = function (args) {
		// handle greyscale
		if (args >= 232) {
			var c = (args - 232) * 10 + 8;
			return [c, c, c];
		}

		args -= 16;

		var rem;
		var r = Math.floor(args / 36) / 5 * 255;
		var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
		var b = (rem % 6) / 5 * 255;

		return [r, g, b];
	};

	convert$1.rgb.hex = function (args) {
		var integer = ((Math.round(args[0]) & 0xFF) << 16)
			+ ((Math.round(args[1]) & 0xFF) << 8)
			+ (Math.round(args[2]) & 0xFF);

		var string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert$1.hex.rgb = function (args) {
		var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
		if (!match) {
			return [0, 0, 0];
		}

		var colorString = match[0];

		if (match[0].length === 3) {
			colorString = colorString.split('').map(function (char) {
				return char + char;
			}).join('');
		}

		var integer = parseInt(colorString, 16);
		var r = (integer >> 16) & 0xFF;
		var g = (integer >> 8) & 0xFF;
		var b = integer & 0xFF;

		return [r, g, b];
	};

	convert$1.rgb.hcg = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var max = Math.max(Math.max(r, g), b);
		var min = Math.min(Math.min(r, g), b);
		var chroma = (max - min);
		var grayscale;
		var hue;

		if (chroma < 1) {
			grayscale = min / (1 - chroma);
		} else {
			grayscale = 0;
		}

		if (chroma <= 0) {
			hue = 0;
		} else
		if (max === r) {
			hue = ((g - b) / chroma) % 6;
		} else
		if (max === g) {
			hue = 2 + (b - r) / chroma;
		} else {
			hue = 4 + (r - g) / chroma + 4;
		}

		hue /= 6;
		hue %= 1;

		return [hue * 360, chroma * 100, grayscale * 100];
	};

	convert$1.hsl.hcg = function (hsl) {
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var c = 1;
		var f = 0;

		if (l < 0.5) {
			c = 2.0 * s * l;
		} else {
			c = 2.0 * s * (1.0 - l);
		}

		if (c < 1.0) {
			f = (l - 0.5 * c) / (1.0 - c);
		}

		return [hsl[0], c * 100, f * 100];
	};

	convert$1.hsv.hcg = function (hsv) {
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;

		var c = s * v;
		var f = 0;

		if (c < 1.0) {
			f = (v - c) / (1 - c);
		}

		return [hsv[0], c * 100, f * 100];
	};

	convert$1.hcg.rgb = function (hcg) {
		var h = hcg[0] / 360;
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;

		if (c === 0.0) {
			return [g * 255, g * 255, g * 255];
		}

		var pure = [0, 0, 0];
		var hi = (h % 1) * 6;
		var v = hi % 1;
		var w = 1 - v;
		var mg = 0;

		switch (Math.floor(hi)) {
			case 0:
				pure[0] = 1; pure[1] = v; pure[2] = 0; break;
			case 1:
				pure[0] = w; pure[1] = 1; pure[2] = 0; break;
			case 2:
				pure[0] = 0; pure[1] = 1; pure[2] = v; break;
			case 3:
				pure[0] = 0; pure[1] = w; pure[2] = 1; break;
			case 4:
				pure[0] = v; pure[1] = 0; pure[2] = 1; break;
			default:
				pure[0] = 1; pure[1] = 0; pure[2] = w;
		}

		mg = (1.0 - c) * g;

		return [
			(c * pure[0] + mg) * 255,
			(c * pure[1] + mg) * 255,
			(c * pure[2] + mg) * 255
		];
	};

	convert$1.hcg.hsv = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;

		var v = c + g * (1.0 - c);
		var f = 0;

		if (v > 0.0) {
			f = c / v;
		}

		return [hcg[0], f * 100, v * 100];
	};

	convert$1.hcg.hsl = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;

		var l = g * (1.0 - c) + 0.5 * c;
		var s = 0;

		if (l > 0.0 && l < 0.5) {
			s = c / (2 * l);
		} else
		if (l >= 0.5 && l < 1.0) {
			s = c / (2 * (1 - l));
		}

		return [hcg[0], s * 100, l * 100];
	};

	convert$1.hcg.hwb = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
		var v = c + g * (1.0 - c);
		return [hcg[0], (v - c) * 100, (1 - v) * 100];
	};

	convert$1.hwb.hcg = function (hwb) {
		var w = hwb[1] / 100;
		var b = hwb[2] / 100;
		var v = 1 - b;
		var c = v - w;
		var g = 0;

		if (c < 1) {
			g = (v - c) / (1 - c);
		}

		return [hwb[0], c * 100, g * 100];
	};

	convert$1.apple.rgb = function (apple) {
		return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
	};

	convert$1.rgb.apple = function (rgb) {
		return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
	};

	convert$1.gray.rgb = function (args) {
		return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
	};

	convert$1.gray.hsl = convert$1.gray.hsv = function (args) {
		return [0, 0, args[0]];
	};

	convert$1.gray.hwb = function (gray) {
		return [0, 100, gray[0]];
	};

	convert$1.gray.cmyk = function (gray) {
		return [0, 0, 0, gray[0]];
	};

	convert$1.gray.lab = function (gray) {
		return [gray[0], 0, 0];
	};

	convert$1.gray.hex = function (gray) {
		var val = Math.round(gray[0] / 100 * 255) & 0xFF;
		var integer = (val << 16) + (val << 8) + val;

		var string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert$1.rgb.gray = function (rgb) {
		var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
		return [val / 255 * 100];
	};

	var conversions$1 = conversions$2.exports;

	/*
		this function routes a model to all other models.

		all functions that are routed have a property `.conversion` attached
		to the returned synthetic function. This property is an array
		of strings, each with the steps in between the 'from' and 'to'
		color models (inclusive).

		conversions that are not possible simply are not included.
	*/

	function buildGraph() {
		var graph = {};
		// https://jsperf.com/object-keys-vs-for-in-with-closure/3
		var models = Object.keys(conversions$1);

		for (var len = models.length, i = 0; i < len; i++) {
			graph[models[i]] = {
				// http://jsperf.com/1-vs-infinity
				// micro-opt, but this is simple.
				distance: -1,
				parent: null
			};
		}

		return graph;
	}

	// https://en.wikipedia.org/wiki/Breadth-first_search
	function deriveBFS(fromModel) {
		var graph = buildGraph();
		var queue = [fromModel]; // unshift -> queue -> pop

		graph[fromModel].distance = 0;

		while (queue.length) {
			var current = queue.pop();
			var adjacents = Object.keys(conversions$1[current]);

			for (var len = adjacents.length, i = 0; i < len; i++) {
				var adjacent = adjacents[i];
				var node = graph[adjacent];

				if (node.distance === -1) {
					node.distance = graph[current].distance + 1;
					node.parent = current;
					queue.unshift(adjacent);
				}
			}
		}

		return graph;
	}

	function link(from, to) {
		return function (args) {
			return to(from(args));
		};
	}

	function wrapConversion(toModel, graph) {
		var path = [graph[toModel].parent, toModel];
		var fn = conversions$1[graph[toModel].parent][toModel];

		var cur = graph[toModel].parent;
		while (graph[cur].parent) {
			path.unshift(graph[cur].parent);
			fn = link(conversions$1[graph[cur].parent][cur], fn);
			cur = graph[cur].parent;
		}

		fn.conversion = path;
		return fn;
	}

	var route$1 = function (fromModel) {
		var graph = deriveBFS(fromModel);
		var conversion = {};

		var models = Object.keys(graph);
		for (var len = models.length, i = 0; i < len; i++) {
			var toModel = models[i];
			var node = graph[toModel];

			if (node.parent === null) {
				// no possible conversion, or this node is the source model.
				continue;
			}

			conversion[toModel] = wrapConversion(toModel, graph);
		}

		return conversion;
	};

	var conversions = conversions$2.exports;
	var route = route$1;

	var convert = {};

	var models$1 = Object.keys(conversions);

	function wrapRaw(fn) {
		var wrappedFn = function (args) {
			if (args === undefined || args === null) {
				return args;
			}

			if (arguments.length > 1) {
				args = Array.prototype.slice.call(arguments);
			}

			return fn(args);
		};

		// preserve .conversion property if there is one
		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	function wrapRounded(fn) {
		var wrappedFn = function (args) {
			if (args === undefined || args === null) {
				return args;
			}

			if (arguments.length > 1) {
				args = Array.prototype.slice.call(arguments);
			}

			var result = fn(args);

			// we're assuming the result is an array here.
			// see notice in conversions.js; don't use box types
			// in conversion functions.
			if (typeof result === 'object') {
				for (var len = result.length, i = 0; i < len; i++) {
					result[i] = Math.round(result[i]);
				}
			}

			return result;
		};

		// preserve .conversion property if there is one
		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	models$1.forEach(function (fromModel) {
		convert[fromModel] = {};

		Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
		Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

		var routes = route(fromModel);
		var routeModels = Object.keys(routes);

		routeModels.forEach(function (toModel) {
			var fn = routes[toModel];

			convert[fromModel][toModel] = wrapRounded(fn);
			convert[fromModel][toModel].raw = wrapRaw(fn);
		});
	});

	var colorConvert = convert;

	(function (module) {
	const colorConvert$1 = colorConvert;

	const wrapAnsi16 = (fn, offset) => function () {
		const code = fn.apply(colorConvert$1, arguments);
		return `\u001B[${code + offset}m`;
	};

	const wrapAnsi256 = (fn, offset) => function () {
		const code = fn.apply(colorConvert$1, arguments);
		return `\u001B[${38 + offset};5;${code}m`;
	};

	const wrapAnsi16m = (fn, offset) => function () {
		const rgb = fn.apply(colorConvert$1, arguments);
		return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
	};

	function assembleStyles() {
		const codes = new Map();
		const styles = {
			modifier: {
				reset: [0, 0],
				// 21 isn't widely supported and 22 does the same thing
				bold: [1, 22],
				dim: [2, 22],
				italic: [3, 23],
				underline: [4, 24],
				inverse: [7, 27],
				hidden: [8, 28],
				strikethrough: [9, 29]
			},
			color: {
				black: [30, 39],
				red: [31, 39],
				green: [32, 39],
				yellow: [33, 39],
				blue: [34, 39],
				magenta: [35, 39],
				cyan: [36, 39],
				white: [37, 39],
				gray: [90, 39],

				// Bright color
				redBright: [91, 39],
				greenBright: [92, 39],
				yellowBright: [93, 39],
				blueBright: [94, 39],
				magentaBright: [95, 39],
				cyanBright: [96, 39],
				whiteBright: [97, 39]
			},
			bgColor: {
				bgBlack: [40, 49],
				bgRed: [41, 49],
				bgGreen: [42, 49],
				bgYellow: [43, 49],
				bgBlue: [44, 49],
				bgMagenta: [45, 49],
				bgCyan: [46, 49],
				bgWhite: [47, 49],

				// Bright color
				bgBlackBright: [100, 49],
				bgRedBright: [101, 49],
				bgGreenBright: [102, 49],
				bgYellowBright: [103, 49],
				bgBlueBright: [104, 49],
				bgMagentaBright: [105, 49],
				bgCyanBright: [106, 49],
				bgWhiteBright: [107, 49]
			}
		};

		// Fix humans
		styles.color.grey = styles.color.gray;

		for (const groupName of Object.keys(styles)) {
			const group = styles[groupName];

			for (const styleName of Object.keys(group)) {
				const style = group[styleName];

				styles[styleName] = {
					open: `\u001B[${style[0]}m`,
					close: `\u001B[${style[1]}m`
				};

				group[styleName] = styles[styleName];

				codes.set(style[0], style[1]);
			}

			Object.defineProperty(styles, groupName, {
				value: group,
				enumerable: false
			});

			Object.defineProperty(styles, 'codes', {
				value: codes,
				enumerable: false
			});
		}

		const ansi2ansi = n => n;
		const rgb2rgb = (r, g, b) => [r, g, b];

		styles.color.close = '\u001B[39m';
		styles.bgColor.close = '\u001B[49m';

		styles.color.ansi = {
			ansi: wrapAnsi16(ansi2ansi, 0)
		};
		styles.color.ansi256 = {
			ansi256: wrapAnsi256(ansi2ansi, 0)
		};
		styles.color.ansi16m = {
			rgb: wrapAnsi16m(rgb2rgb, 0)
		};

		styles.bgColor.ansi = {
			ansi: wrapAnsi16(ansi2ansi, 10)
		};
		styles.bgColor.ansi256 = {
			ansi256: wrapAnsi256(ansi2ansi, 10)
		};
		styles.bgColor.ansi16m = {
			rgb: wrapAnsi16m(rgb2rgb, 10)
		};

		for (let key of Object.keys(colorConvert$1)) {
			if (typeof colorConvert$1[key] !== 'object') {
				continue;
			}

			const suite = colorConvert$1[key];

			if (key === 'ansi16') {
				key = 'ansi';
			}

			if ('ansi16' in suite) {
				styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
				styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
			}

			if ('ansi256' in suite) {
				styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
				styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
			}

			if ('rgb' in suite) {
				styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
				styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
			}
		}

		return styles;
	}

	// Make the export immutable
	Object.defineProperty(module, 'exports', {
		enumerable: true,
		get: assembleStyles
	});
	}(ansiStyles));

	var hasFlag$1 = (flag, argv) => {
		argv = argv || process.argv;
		const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
		const pos = argv.indexOf(prefix + flag);
		const terminatorPos = argv.indexOf('--');
		return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
	};

	const os = require$$0__default$1['default'];
	const hasFlag = hasFlag$1;

	const env$1 = process.env;

	let forceColor;
	if (hasFlag('no-color') ||
		hasFlag('no-colors') ||
		hasFlag('color=false')) {
		forceColor = false;
	} else if (hasFlag('color') ||
		hasFlag('colors') ||
		hasFlag('color=true') ||
		hasFlag('color=always')) {
		forceColor = true;
	}
	if ('FORCE_COLOR' in env$1) {
		forceColor = env$1.FORCE_COLOR.length === 0 || parseInt(env$1.FORCE_COLOR, 10) !== 0;
	}

	function translateLevel(level) {
		if (level === 0) {
			return false;
		}

		return {
			level,
			hasBasic: true,
			has256: level >= 2,
			has16m: level >= 3
		};
	}

	function supportsColor(stream) {
		if (forceColor === false) {
			return 0;
		}

		if (hasFlag('color=16m') ||
			hasFlag('color=full') ||
			hasFlag('color=truecolor')) {
			return 3;
		}

		if (hasFlag('color=256')) {
			return 2;
		}

		if (stream && !stream.isTTY && forceColor !== true) {
			return 0;
		}

		const min = forceColor ? 1 : 0;

		if (process.platform === 'win32') {
			// Node.js 7.5.0 is the first version of Node.js to include a patch to
			// libuv that enables 256 color output on Windows. Anything earlier and it
			// won't work. However, here we target Node.js 8 at minimum as it is an LTS
			// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
			// release that supports 256 colors. Windows 10 build 14931 is the first release
			// that supports 16m/TrueColor.
			const osRelease = os.release().split('.');
			if (
				Number(process.versions.node.split('.')[0]) >= 8 &&
				Number(osRelease[0]) >= 10 &&
				Number(osRelease[2]) >= 10586
			) {
				return Number(osRelease[2]) >= 14931 ? 3 : 2;
			}

			return 1;
		}

		if ('CI' in env$1) {
			if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env$1) || env$1.CI_NAME === 'codeship') {
				return 1;
			}

			return min;
		}

		if ('TEAMCITY_VERSION' in env$1) {
			return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env$1.TEAMCITY_VERSION) ? 1 : 0;
		}

		if (env$1.COLORTERM === 'truecolor') {
			return 3;
		}

		if ('TERM_PROGRAM' in env$1) {
			const version = parseInt((env$1.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

			switch (env$1.TERM_PROGRAM) {
				case 'iTerm.app':
					return version >= 3 ? 3 : 2;
				case 'Apple_Terminal':
					return 2;
				// No default
			}
		}

		if (/-256(color)?$/i.test(env$1.TERM)) {
			return 2;
		}

		if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env$1.TERM)) {
			return 1;
		}

		if ('COLORTERM' in env$1) {
			return 1;
		}

		if (env$1.TERM === 'dumb') {
			return min;
		}

		return min;
	}

	function getSupportLevel(stream) {
		const level = supportsColor(stream);
		return translateLevel(level);
	}

	var supportsColor_1 = {
		supportsColor: getSupportLevel,
		stdout: getSupportLevel(process.stdout),
		stderr: getSupportLevel(process.stderr)
	};

	const TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
	const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
	const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
	const ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;

	const ESCAPES = new Map([
		['n', '\n'],
		['r', '\r'],
		['t', '\t'],
		['b', '\b'],
		['f', '\f'],
		['v', '\v'],
		['0', '\0'],
		['\\', '\\'],
		['e', '\u001B'],
		['a', '\u0007']
	]);

	function unescape(c) {
		if ((c[0] === 'u' && c.length === 5) || (c[0] === 'x' && c.length === 3)) {
			return String.fromCharCode(parseInt(c.slice(1), 16));
		}

		return ESCAPES.get(c) || c;
	}

	function parseArguments(name, args) {
		const results = [];
		const chunks = args.trim().split(/\s*,\s*/g);
		let matches;

		for (const chunk of chunks) {
			if (!isNaN(chunk)) {
				results.push(Number(chunk));
			} else if ((matches = chunk.match(STRING_REGEX))) {
				results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));
			} else {
				throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
			}
		}

		return results;
	}

	function parseStyle(style) {
		STYLE_REGEX.lastIndex = 0;

		const results = [];
		let matches;

		while ((matches = STYLE_REGEX.exec(style)) !== null) {
			const name = matches[1];

			if (matches[2]) {
				const args = parseArguments(name, matches[2]);
				results.push([name].concat(args));
			} else {
				results.push([name]);
			}
		}

		return results;
	}

	function buildStyle(chalk, styles) {
		const enabled = {};

		for (const layer of styles) {
			for (const style of layer.styles) {
				enabled[style[0]] = layer.inverse ? null : style.slice(1);
			}
		}

		let current = chalk;
		for (const styleName of Object.keys(enabled)) {
			if (Array.isArray(enabled[styleName])) {
				if (!(styleName in current)) {
					throw new Error(`Unknown Chalk style: ${styleName}`);
				}

				if (enabled[styleName].length > 0) {
					current = current[styleName].apply(current, enabled[styleName]);
				} else {
					current = current[styleName];
				}
			}
		}

		return current;
	}

	var templates = (chalk, tmp) => {
		const styles = [];
		const chunks = [];
		let chunk = [];

		// eslint-disable-next-line max-params
		tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
			if (escapeChar) {
				chunk.push(unescape(escapeChar));
			} else if (style) {
				const str = chunk.join('');
				chunk = [];
				chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));
				styles.push({inverse, styles: parseStyle(style)});
			} else if (close) {
				if (styles.length === 0) {
					throw new Error('Found extraneous } in Chalk template literal');
				}

				chunks.push(buildStyle(chalk, styles)(chunk.join('')));
				chunk = [];
				styles.pop();
			} else {
				chunk.push(chr);
			}
		});

		chunks.push(chunk.join(''));

		if (styles.length > 0) {
			const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
			throw new Error(errMsg);
		}

		return chunks.join('');
	};

	(function (module) {
	const escapeStringRegexp$1 = escapeStringRegexp;
	const ansiStyles$1 = ansiStyles.exports;
	const stdoutColor = supportsColor_1.stdout;

	const template = templates;

	const isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm');

	// `supportsColor.level` → `ansiStyles.color[name]` mapping
	const levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];

	// `color-convert` models to exclude from the Chalk API due to conflicts and such
	const skipModels = new Set(['gray']);

	const styles = Object.create(null);

	function applyOptions(obj, options) {
		options = options || {};

		// Detect level if not set manually
		const scLevel = stdoutColor ? stdoutColor.level : 0;
		obj.level = options.level === undefined ? scLevel : options.level;
		obj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;
	}

	function Chalk(options) {
		// We check for this.template here since calling `chalk.constructor()`
		// by itself will have a `this` of a previously constructed chalk object
		if (!this || !(this instanceof Chalk) || this.template) {
			const chalk = {};
			applyOptions(chalk, options);

			chalk.template = function () {
				const args = [].slice.call(arguments);
				return chalkTag.apply(null, [chalk.template].concat(args));
			};

			Object.setPrototypeOf(chalk, Chalk.prototype);
			Object.setPrototypeOf(chalk.template, chalk);

			chalk.template.constructor = Chalk;

			return chalk.template;
		}

		applyOptions(this, options);
	}

	// Use bright blue on Windows as the normal blue color is illegible
	if (isSimpleWindowsTerm) {
		ansiStyles$1.blue.open = '\u001B[94m';
	}

	for (const key of Object.keys(ansiStyles$1)) {
		ansiStyles$1[key].closeRe = new RegExp(escapeStringRegexp$1(ansiStyles$1[key].close), 'g');

		styles[key] = {
			get() {
				const codes = ansiStyles$1[key];
				return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
			}
		};
	}

	styles.visible = {
		get() {
			return build.call(this, this._styles || [], true, 'visible');
		}
	};

	ansiStyles$1.color.closeRe = new RegExp(escapeStringRegexp$1(ansiStyles$1.color.close), 'g');
	for (const model of Object.keys(ansiStyles$1.color.ansi)) {
		if (skipModels.has(model)) {
			continue;
		}

		styles[model] = {
			get() {
				const level = this.level;
				return function () {
					const open = ansiStyles$1.color[levelMapping[level]][model].apply(null, arguments);
					const codes = {
						open,
						close: ansiStyles$1.color.close,
						closeRe: ansiStyles$1.color.closeRe
					};
					return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
				};
			}
		};
	}

	ansiStyles$1.bgColor.closeRe = new RegExp(escapeStringRegexp$1(ansiStyles$1.bgColor.close), 'g');
	for (const model of Object.keys(ansiStyles$1.bgColor.ansi)) {
		if (skipModels.has(model)) {
			continue;
		}

		const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
		styles[bgModel] = {
			get() {
				const level = this.level;
				return function () {
					const open = ansiStyles$1.bgColor[levelMapping[level]][model].apply(null, arguments);
					const codes = {
						open,
						close: ansiStyles$1.bgColor.close,
						closeRe: ansiStyles$1.bgColor.closeRe
					};
					return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
				};
			}
		};
	}

	const proto = Object.defineProperties(() => {}, styles);

	function build(_styles, _empty, key) {
		const builder = function () {
			return applyStyle.apply(builder, arguments);
		};

		builder._styles = _styles;
		builder._empty = _empty;

		const self = this;

		Object.defineProperty(builder, 'level', {
			enumerable: true,
			get() {
				return self.level;
			},
			set(level) {
				self.level = level;
			}
		});

		Object.defineProperty(builder, 'enabled', {
			enumerable: true,
			get() {
				return self.enabled;
			},
			set(enabled) {
				self.enabled = enabled;
			}
		});

		// See below for fix regarding invisible grey/dim combination on Windows
		builder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey';

		// `__proto__` is used because we must return a function, but there is
		// no way to create a function with a different prototype
		builder.__proto__ = proto; // eslint-disable-line no-proto

		return builder;
	}

	function applyStyle() {
		// Support varags, but simply cast to string in case there's only one arg
		const args = arguments;
		const argsLen = args.length;
		let str = String(arguments[0]);

		if (argsLen === 0) {
			return '';
		}

		if (argsLen > 1) {
			// Don't slice `arguments`, it prevents V8 optimizations
			for (let a = 1; a < argsLen; a++) {
				str += ' ' + args[a];
			}
		}

		if (!this.enabled || this.level <= 0 || !str) {
			return this._empty ? '' : str;
		}

		// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
		// see https://github.com/chalk/chalk/issues/58
		// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.
		const originalDim = ansiStyles$1.dim.open;
		if (isSimpleWindowsTerm && this.hasGrey) {
			ansiStyles$1.dim.open = '';
		}

		for (const code of this._styles.slice().reverse()) {
			// Replace any instances already present with a re-opening code
			// otherwise only the part of the string until said closing code
			// will be colored, and the rest will simply be 'plain'.
			str = code.open + str.replace(code.closeRe, code.open) + code.close;

			// Close the styling before a linebreak and reopen
			// after next line to fix a bleed issue on macOS
			// https://github.com/chalk/chalk/pull/92
			str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
		}

		// Reset the original `dim` if we changed it to work around the Windows dimmed gray issue
		ansiStyles$1.dim.open = originalDim;

		return str;
	}

	function chalkTag(chalk, strings) {
		if (!Array.isArray(strings)) {
			// If chalk() was called by itself or with a string,
			// return the string itself as a string.
			return [].slice.call(arguments, 1).join(' ');
		}

		const args = [].slice.call(arguments, 2);
		const parts = [strings.raw[0]];

		for (let i = 1; i < strings.length; i++) {
			parts.push(String(args[i - 1]).replace(/[{}\\]/g, '\\$&'));
			parts.push(String(strings.raw[i]));
		}

		return template(chalk, parts.join(''));
	}

	Object.defineProperties(Chalk.prototype, styles);

	module.exports = Chalk(); // eslint-disable-line new-cap
	module.exports.supportsColor = stdoutColor;
	module.exports.default = module.exports; // For TypeScript
	}(chalk));

	Object.defineProperty(lib$n, "__esModule", {
	  value: true
	});
	lib$n.shouldHighlight = shouldHighlight;
	lib$n.getChalk = getChalk;
	lib$n.default = highlight;

	var _jsTokens = jsTokens;

	var _helperValidatorIdentifier$1 = lib$r;

	var _chalk = chalk.exports;

	const sometimesKeywords = new Set(["as", "async", "from", "get", "of", "set"]);

	function getDefs$1(chalk) {
	  return {
	    keyword: chalk.cyan,
	    capitalized: chalk.yellow,
	    jsxIdentifier: chalk.yellow,
	    punctuator: chalk.yellow,
	    number: chalk.magenta,
	    string: chalk.green,
	    regex: chalk.magenta,
	    comment: chalk.grey,
	    invalid: chalk.white.bgRed.bold
	  };
	}

	const NEWLINE$1 = /\r\n|[\n\r\u2028\u2029]/;
	const BRACKET = /^[()[\]{}]$/;
	let tokenize;
	{
	  const JSX_TAG = /^[a-z][\w-]*$/i;

	  const getTokenType = function (token, offset, text) {
	    if (token.type === "name") {
	      if ((0, _helperValidatorIdentifier$1.isKeyword)(token.value) || (0, _helperValidatorIdentifier$1.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {
	        return "keyword";
	      }

	      if (JSX_TAG.test(token.value) && (text[offset - 1] === "<" || text.substr(offset - 2, 2) == "</")) {
	        return "jsxIdentifier";
	      }

	      if (token.value[0] !== token.value[0].toLowerCase()) {
	        return "capitalized";
	      }
	    }

	    if (token.type === "punctuator" && BRACKET.test(token.value)) {
	      return "bracket";
	    }

	    if (token.type === "invalid" && (token.value === "@" || token.value === "#")) {
	      return "punctuator";
	    }

	    return token.type;
	  };

	  tokenize = function* (text) {
	    let match;

	    while (match = _jsTokens.default.exec(text)) {
	      const token = _jsTokens.matchToToken(match);

	      yield {
	        type: getTokenType(token, match.index, text),
	        value: token.value
	      };
	    }
	  };
	}

	function highlightTokens(defs, text) {
	  let highlighted = "";

	  for (const {
	    type,
	    value
	  } of tokenize(text)) {
	    const colorize = defs[type];

	    if (colorize) {
	      highlighted += value.split(NEWLINE$1).map(str => colorize(str)).join("\n");
	    } else {
	      highlighted += value;
	    }
	  }

	  return highlighted;
	}

	function shouldHighlight(options) {
	  return !!_chalk.supportsColor || options.forceColor;
	}

	function getChalk(options) {
	  return options.forceColor ? new _chalk.constructor({
	    enabled: true,
	    level: 1
	  }) : _chalk;
	}

	function highlight(code, options = {}) {
	  if (shouldHighlight(options)) {
	    const chalk = getChalk(options);
	    const defs = getDefs$1(chalk);
	    return highlightTokens(defs, code);
	  } else {
	    return code;
	  }
	}

	Object.defineProperty(lib$o, "__esModule", {
	  value: true
	});
	lib$o.codeFrameColumns = codeFrameColumns;
	lib$o.default = _default$c;

	var _highlight = lib$n;

	let deprecationWarningShown = false;

	function getDefs(chalk) {
	  return {
	    gutter: chalk.grey,
	    marker: chalk.red.bold,
	    message: chalk.red.bold
	  };
	}

	const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;

	function getMarkerLines(loc, source, opts) {
	  const startLoc = Object.assign({
	    column: 0,
	    line: -1
	  }, loc.start);
	  const endLoc = Object.assign({}, startLoc, loc.end);
	  const {
	    linesAbove = 2,
	    linesBelow = 3
	  } = opts || {};
	  const startLine = startLoc.line;
	  const startColumn = startLoc.column;
	  const endLine = endLoc.line;
	  const endColumn = endLoc.column;
	  let start = Math.max(startLine - (linesAbove + 1), 0);
	  let end = Math.min(source.length, endLine + linesBelow);

	  if (startLine === -1) {
	    start = 0;
	  }

	  if (endLine === -1) {
	    end = source.length;
	  }

	  const lineDiff = endLine - startLine;
	  const markerLines = {};

	  if (lineDiff) {
	    for (let i = 0; i <= lineDiff; i++) {
	      const lineNumber = i + startLine;

	      if (!startColumn) {
	        markerLines[lineNumber] = true;
	      } else if (i === 0) {
	        const sourceLength = source[lineNumber - 1].length;
	        markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
	      } else if (i === lineDiff) {
	        markerLines[lineNumber] = [0, endColumn];
	      } else {
	        const sourceLength = source[lineNumber - i].length;
	        markerLines[lineNumber] = [0, sourceLength];
	      }
	    }
	  } else {
	    if (startColumn === endColumn) {
	      if (startColumn) {
	        markerLines[startLine] = [startColumn, 0];
	      } else {
	        markerLines[startLine] = true;
	      }
	    } else {
	      markerLines[startLine] = [startColumn, endColumn - startColumn];
	    }
	  }

	  return {
	    start,
	    end,
	    markerLines
	  };
	}

	function codeFrameColumns(rawLines, loc, opts = {}) {
	  const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);
	  const chalk = (0, _highlight.getChalk)(opts);
	  const defs = getDefs(chalk);

	  const maybeHighlight = (chalkFn, string) => {
	    return highlighted ? chalkFn(string) : string;
	  };

	  const lines = rawLines.split(NEWLINE);
	  const {
	    start,
	    end,
	    markerLines
	  } = getMarkerLines(loc, lines, opts);
	  const hasColumns = loc.start && typeof loc.start.column === "number";
	  const numberMaxWidth = String(end).length;
	  const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;
	  let frame = highlightedLines.split(NEWLINE).slice(start, end).map((line, index) => {
	    const number = start + 1 + index;
	    const paddedNumber = ` ${number}`.slice(-numberMaxWidth);
	    const gutter = ` ${paddedNumber} |`;
	    const hasMarker = markerLines[number];
	    const lastMarkerLine = !markerLines[number + 1];

	    if (hasMarker) {
	      let markerLine = "";

	      if (Array.isArray(hasMarker)) {
	        const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
	        const numberOfMarkers = hasMarker[1] || 1;
	        markerLine = ["\n ", maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")), " ", markerSpacing, maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)].join("");

	        if (lastMarkerLine && opts.message) {
	          markerLine += " " + maybeHighlight(defs.message, opts.message);
	        }
	      }

	      return [maybeHighlight(defs.marker, ">"), maybeHighlight(defs.gutter, gutter), line.length > 0 ? ` ${line}` : "", markerLine].join("");
	    } else {
	      return ` ${maybeHighlight(defs.gutter, gutter)}${line.length > 0 ? ` ${line}` : ""}`;
	    }
	  }).join("\n");

	  if (opts.message && !hasColumns) {
	    frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}\n${frame}`;
	  }

	  if (highlighted) {
	    return chalk.reset(frame);
	  } else {
	    return frame;
	  }
	}

	function _default$c(rawLines, lineNumber, colNumber, opts = {}) {
	  if (!deprecationWarningShown) {
	    deprecationWarningShown = true;
	    const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";

	    if (process.emitWarning) {
	      process.emitWarning(message, "DeprecationWarning");
	    } else {
	      const deprecationError = new Error(message);
	      deprecationError.name = "DeprecationWarning";
	      console.warn(new Error(message));
	    }
	  }

	  colNumber = Math.max(colNumber, 0);
	  const location = {
	    start: {
	      column: colNumber,
	      line: lineNumber
	    }
	  };
	  return codeFrameColumns(rawLines, location, opts);
	}

	var lib$m = {};

	Object.defineProperty(lib$m, "__esModule", {
	  value: true
	});
	lib$m.default = hoistVariables;

	var _t$r = lib$s;

	const {
	  assignmentExpression: assignmentExpression$9,
	  expressionStatement: expressionStatement$8,
	  identifier: identifier$c
	} = _t$r;
	const visitor$2 = {
	  Scope(path, state) {
	    if (state.kind === "let") path.skip();
	  },

	  FunctionParent(path) {
	    path.skip();
	  },

	  VariableDeclaration(path, state) {
	    if (state.kind && path.node.kind !== state.kind) return;
	    const nodes = [];
	    const declarations = path.get("declarations");
	    let firstId;

	    for (const declar of declarations) {
	      firstId = declar.node.id;

	      if (declar.node.init) {
	        nodes.push(expressionStatement$8(assignmentExpression$9("=", declar.node.id, declar.node.init)));
	      }

	      for (const name of Object.keys(declar.getBindingIdentifiers())) {
	        state.emit(identifier$c(name), name, declar.node.init !== null);
	      }
	    }

	    if (path.parentPath.isFor({
	      left: path.node
	    })) {
	      path.replaceWith(firstId);
	    } else {
	      path.replaceWithMultiple(nodes);
	    }
	  }

	};

	function hoistVariables(path, emit, kind = "var") {
	  path.traverse(visitor$2, {
	    kind,
	    emit
	  });
	}

	Object.defineProperty(replacement, "__esModule", {
	  value: true
	});
	replacement.replaceWithMultiple = replaceWithMultiple;
	replacement.replaceWithSourceString = replaceWithSourceString;
	replacement.replaceWith = replaceWith$3;
	replacement._replaceWith = _replaceWith;
	replacement.replaceExpressionWithStatements = replaceExpressionWithStatements;
	replacement.replaceInline = replaceInline;

	var _codeFrame$3 = lib$o;

	var _index$5 = lib$t;

	var _index2$1 = path$2;

	var _cache$3 = cache$1;

	var _parser$4 = lib$x;

	var _t$q = lib$s;

	var _helperHoistVariables = lib$m;

	const {
	  FUNCTION_TYPES,
	  arrowFunctionExpression: arrowFunctionExpression$3,
	  assignmentExpression: assignmentExpression$8,
	  awaitExpression,
	  blockStatement: blockStatement$4,
	  callExpression: callExpression$8,
	  cloneNode: cloneNode$d,
	  expressionStatement: expressionStatement$7,
	  identifier: identifier$b,
	  inheritLeadingComments,
	  inheritTrailingComments,
	  inheritsComments,
	  isExpression: isExpression$2,
	  isProgram,
	  isStatement: isStatement$2,
	  removeComments,
	  returnStatement: returnStatement$1,
	  toSequenceExpression,
	  validate: validate$4,
	  yieldExpression
	} = _t$q;

	function replaceWithMultiple(nodes) {
	  var _pathCache$get;

	  this.resync();
	  nodes = this._verifyNodeList(nodes);
	  inheritLeadingComments(nodes[0], this.node);
	  inheritTrailingComments(nodes[nodes.length - 1], this.node);
	  (_pathCache$get = _cache$3.path.get(this.parent)) == null ? void 0 : _pathCache$get.delete(this.node);
	  this.node = this.container[this.key] = null;
	  const paths = this.insertAfter(nodes);

	  if (this.node) {
	    this.requeue();
	  } else {
	    this.remove();
	  }

	  return paths;
	}

	function replaceWithSourceString(replacement) {
	  this.resync();

	  try {
	    replacement = `(${replacement})`;
	    replacement = (0, _parser$4.parse)(replacement);
	  } catch (err) {
	    const loc = err.loc;

	    if (loc) {
	      err.message += " - make sure this is an expression.\n" + (0, _codeFrame$3.codeFrameColumns)(replacement, {
	        start: {
	          line: loc.line,
	          column: loc.column + 1
	        }
	      });
	      err.code = "BABEL_REPLACE_SOURCE_ERROR";
	    }

	    throw err;
	  }

	  replacement = replacement.program.body[0].expression;

	  _index$5.default.removeProperties(replacement);

	  return this.replaceWith(replacement);
	}

	function replaceWith$3(replacement) {
	  this.resync();

	  if (this.removed) {
	    throw new Error("You can't replace this node, we've already removed it");
	  }

	  if (replacement instanceof _index2$1.default) {
	    replacement = replacement.node;
	  }

	  if (!replacement) {
	    throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
	  }

	  if (this.node === replacement) {
	    return [this];
	  }

	  if (this.isProgram() && !isProgram(replacement)) {
	    throw new Error("You can only replace a Program root node with another Program node");
	  }

	  if (Array.isArray(replacement)) {
	    throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
	  }

	  if (typeof replacement === "string") {
	    throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
	  }

	  let nodePath = "";

	  if (this.isNodeType("Statement") && isExpression$2(replacement)) {
	    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement) && !this.parentPath.isExportDefaultDeclaration()) {
	      replacement = expressionStatement$7(replacement);
	      nodePath = "expression";
	    }
	  }

	  if (this.isNodeType("Expression") && isStatement$2(replacement)) {
	    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {
	      return this.replaceExpressionWithStatements([replacement]);
	    }
	  }

	  const oldNode = this.node;

	  if (oldNode) {
	    inheritsComments(replacement, oldNode);
	    removeComments(oldNode);
	  }

	  this._replaceWith(replacement);

	  this.type = replacement.type;
	  this.setScope();
	  this.requeue();
	  return [nodePath ? this.get(nodePath) : this];
	}

	function _replaceWith(node) {
	  var _pathCache$get2;

	  if (!this.container) {
	    throw new ReferenceError("Container is falsy");
	  }

	  if (this.inList) {
	    validate$4(this.parent, this.key, [node]);
	  } else {
	    validate$4(this.parent, this.key, node);
	  }

	  this.debug(`Replace with ${node == null ? void 0 : node.type}`);
	  (_pathCache$get2 = _cache$3.path.get(this.parent)) == null ? void 0 : _pathCache$get2.set(node, this).delete(this.node);
	  this.node = this.container[this.key] = node;
	}

	function replaceExpressionWithStatements(nodes) {
	  this.resync();
	  const nodesAsSequenceExpression = toSequenceExpression(nodes, this.scope);

	  if (nodesAsSequenceExpression) {
	    return this.replaceWith(nodesAsSequenceExpression)[0].get("expressions");
	  }

	  const functionParent = this.getFunctionParent();
	  const isParentAsync = functionParent == null ? void 0 : functionParent.is("async");
	  const isParentGenerator = functionParent == null ? void 0 : functionParent.is("generator");
	  const container = arrowFunctionExpression$3([], blockStatement$4(nodes));
	  this.replaceWith(callExpression$8(container, []));
	  const callee = this.get("callee");
	  (0, _helperHoistVariables.default)(callee.get("body"), id => {
	    this.scope.push({
	      id
	    });
	  }, "var");
	  const completionRecords = this.get("callee").getCompletionRecords();

	  for (const path of completionRecords) {
	    if (!path.isExpressionStatement()) continue;
	    const loop = path.findParent(path => path.isLoop());

	    if (loop) {
	      let uid = loop.getData("expressionReplacementReturnUid");

	      if (!uid) {
	        uid = callee.scope.generateDeclaredUidIdentifier("ret");
	        callee.get("body").pushContainer("body", returnStatement$1(cloneNode$d(uid)));
	        loop.setData("expressionReplacementReturnUid", uid);
	      } else {
	        uid = identifier$b(uid.name);
	      }

	      path.get("expression").replaceWith(assignmentExpression$8("=", cloneNode$d(uid), path.node.expression));
	    } else {
	      path.replaceWith(returnStatement$1(path.node.expression));
	    }
	  }

	  callee.arrowFunctionToExpression();
	  const newCallee = callee;

	  const needToAwaitFunction = isParentAsync && _index$5.default.hasType(this.get("callee.body").node, "AwaitExpression", FUNCTION_TYPES);

	  const needToYieldFunction = isParentGenerator && _index$5.default.hasType(this.get("callee.body").node, "YieldExpression", FUNCTION_TYPES);

	  if (needToAwaitFunction) {
	    newCallee.set("async", true);

	    if (!needToYieldFunction) {
	      this.replaceWith(awaitExpression(this.node));
	    }
	  }

	  if (needToYieldFunction) {
	    newCallee.set("generator", true);
	    this.replaceWith(yieldExpression(this.node, true));
	  }

	  return newCallee.get("body.body");
	}

	function replaceInline(nodes) {
	  this.resync();

	  if (Array.isArray(nodes)) {
	    if (Array.isArray(this.container)) {
	      nodes = this._verifyNodeList(nodes);

	      const paths = this._containerInsertAfter(nodes);

	      this.remove();
	      return paths;
	    } else {
	      return this.replaceWithMultiple(nodes);
	    }
	  } else {
	    return this.replaceWith(nodes);
	  }
	}

	var evaluation = {};

	Object.defineProperty(evaluation, "__esModule", {
	  value: true
	});
	evaluation.evaluateTruthy = evaluateTruthy;
	evaluation.evaluate = evaluate;
	const VALID_CALLEES = ["String", "Number", "Math"];
	const INVALID_METHODS = ["random"];

	function evaluateTruthy() {
	  const res = this.evaluate();
	  if (res.confident) return !!res.value;
	}

	function deopt(path, state) {
	  if (!state.confident) return;
	  state.deoptPath = path;
	  state.confident = false;
	}

	function evaluateCached(path, state) {
	  const {
	    node
	  } = path;
	  const {
	    seen
	  } = state;

	  if (seen.has(node)) {
	    const existing = seen.get(node);

	    if (existing.resolved) {
	      return existing.value;
	    } else {
	      deopt(path, state);
	      return;
	    }
	  } else {
	    const item = {
	      resolved: false
	    };
	    seen.set(node, item);

	    const val = _evaluate(path, state);

	    if (state.confident) {
	      item.resolved = true;
	      item.value = val;
	    }

	    return val;
	  }
	}

	function _evaluate(path, state) {
	  if (!state.confident) return;

	  if (path.isSequenceExpression()) {
	    const exprs = path.get("expressions");
	    return evaluateCached(exprs[exprs.length - 1], state);
	  }

	  if (path.isStringLiteral() || path.isNumericLiteral() || path.isBooleanLiteral()) {
	    return path.node.value;
	  }

	  if (path.isNullLiteral()) {
	    return null;
	  }

	  if (path.isTemplateLiteral()) {
	    return evaluateQuasis(path, path.node.quasis, state);
	  }

	  if (path.isTaggedTemplateExpression() && path.get("tag").isMemberExpression()) {
	    const object = path.get("tag.object");
	    const {
	      node: {
	        name
	      }
	    } = object;
	    const property = path.get("tag.property");

	    if (object.isIdentifier() && name === "String" && !path.scope.getBinding(name) && property.isIdentifier() && property.node.name === "raw") {
	      return evaluateQuasis(path, path.node.quasi.quasis, state, true);
	    }
	  }

	  if (path.isConditionalExpression()) {
	    const testResult = evaluateCached(path.get("test"), state);
	    if (!state.confident) return;

	    if (testResult) {
	      return evaluateCached(path.get("consequent"), state);
	    } else {
	      return evaluateCached(path.get("alternate"), state);
	    }
	  }

	  if (path.isExpressionWrapper()) {
	    return evaluateCached(path.get("expression"), state);
	  }

	  if (path.isMemberExpression() && !path.parentPath.isCallExpression({
	    callee: path.node
	  })) {
	    const property = path.get("property");
	    const object = path.get("object");

	    if (object.isLiteral() && property.isIdentifier()) {
	      const value = object.node.value;
	      const type = typeof value;

	      if (type === "number" || type === "string") {
	        return value[property.node.name];
	      }
	    }
	  }

	  if (path.isReferencedIdentifier()) {
	    const binding = path.scope.getBinding(path.node.name);

	    if (binding && binding.constantViolations.length > 0) {
	      return deopt(binding.path, state);
	    }

	    if (binding && path.node.start < binding.path.node.end) {
	      return deopt(binding.path, state);
	    }

	    if (binding != null && binding.hasValue) {
	      return binding.value;
	    } else {
	      if (path.node.name === "undefined") {
	        return binding ? deopt(binding.path, state) : undefined;
	      } else if (path.node.name === "Infinity") {
	        return binding ? deopt(binding.path, state) : Infinity;
	      } else if (path.node.name === "NaN") {
	        return binding ? deopt(binding.path, state) : NaN;
	      }

	      const resolved = path.resolve();

	      if (resolved === path) {
	        return deopt(path, state);
	      } else {
	        return evaluateCached(resolved, state);
	      }
	    }
	  }

	  if (path.isUnaryExpression({
	    prefix: true
	  })) {
	    if (path.node.operator === "void") {
	      return undefined;
	    }

	    const argument = path.get("argument");

	    if (path.node.operator === "typeof" && (argument.isFunction() || argument.isClass())) {
	      return "function";
	    }

	    const arg = evaluateCached(argument, state);
	    if (!state.confident) return;

	    switch (path.node.operator) {
	      case "!":
	        return !arg;

	      case "+":
	        return +arg;

	      case "-":
	        return -arg;

	      case "~":
	        return ~arg;

	      case "typeof":
	        return typeof arg;
	    }
	  }

	  if (path.isArrayExpression()) {
	    const arr = [];
	    const elems = path.get("elements");

	    for (const elem of elems) {
	      const elemValue = elem.evaluate();

	      if (elemValue.confident) {
	        arr.push(elemValue.value);
	      } else {
	        return deopt(elemValue.deopt, state);
	      }
	    }

	    return arr;
	  }

	  if (path.isObjectExpression()) {
	    const obj = {};
	    const props = path.get("properties");

	    for (const prop of props) {
	      if (prop.isObjectMethod() || prop.isSpreadElement()) {
	        return deopt(prop, state);
	      }

	      const keyPath = prop.get("key");
	      let key = keyPath;

	      if (prop.node.computed) {
	        key = key.evaluate();

	        if (!key.confident) {
	          return deopt(key.deopt, state);
	        }

	        key = key.value;
	      } else if (key.isIdentifier()) {
	        key = key.node.name;
	      } else {
	        key = key.node.value;
	      }

	      const valuePath = prop.get("value");
	      let value = valuePath.evaluate();

	      if (!value.confident) {
	        return deopt(value.deopt, state);
	      }

	      value = value.value;
	      obj[key] = value;
	    }

	    return obj;
	  }

	  if (path.isLogicalExpression()) {
	    const wasConfident = state.confident;
	    const left = evaluateCached(path.get("left"), state);
	    const leftConfident = state.confident;
	    state.confident = wasConfident;
	    const right = evaluateCached(path.get("right"), state);
	    const rightConfident = state.confident;

	    switch (path.node.operator) {
	      case "||":
	        state.confident = leftConfident && (!!left || rightConfident);
	        if (!state.confident) return;
	        return left || right;

	      case "&&":
	        state.confident = leftConfident && (!left || rightConfident);
	        if (!state.confident) return;
	        return left && right;
	    }
	  }

	  if (path.isBinaryExpression()) {
	    const left = evaluateCached(path.get("left"), state);
	    if (!state.confident) return;
	    const right = evaluateCached(path.get("right"), state);
	    if (!state.confident) return;

	    switch (path.node.operator) {
	      case "-":
	        return left - right;

	      case "+":
	        return left + right;

	      case "/":
	        return left / right;

	      case "*":
	        return left * right;

	      case "%":
	        return left % right;

	      case "**":
	        return Math.pow(left, right);

	      case "<":
	        return left < right;

	      case ">":
	        return left > right;

	      case "<=":
	        return left <= right;

	      case ">=":
	        return left >= right;

	      case "==":
	        return left == right;

	      case "!=":
	        return left != right;

	      case "===":
	        return left === right;

	      case "!==":
	        return left !== right;

	      case "|":
	        return left | right;

	      case "&":
	        return left & right;

	      case "^":
	        return left ^ right;

	      case "<<":
	        return left << right;

	      case ">>":
	        return left >> right;

	      case ">>>":
	        return left >>> right;
	    }
	  }

	  if (path.isCallExpression()) {
	    const callee = path.get("callee");
	    let context;
	    let func;

	    if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name) && VALID_CALLEES.indexOf(callee.node.name) >= 0) {
	      func = commonjsGlobal[callee.node.name];
	    }

	    if (callee.isMemberExpression()) {
	      const object = callee.get("object");
	      const property = callee.get("property");

	      if (object.isIdentifier() && property.isIdentifier() && VALID_CALLEES.indexOf(object.node.name) >= 0 && INVALID_METHODS.indexOf(property.node.name) < 0) {
	        context = commonjsGlobal[object.node.name];
	        func = context[property.node.name];
	      }

	      if (object.isLiteral() && property.isIdentifier()) {
	        const type = typeof object.node.value;

	        if (type === "string" || type === "number") {
	          context = object.node.value;
	          func = context[property.node.name];
	        }
	      }
	    }

	    if (func) {
	      const args = path.get("arguments").map(arg => evaluateCached(arg, state));
	      if (!state.confident) return;
	      return func.apply(context, args);
	    }
	  }

	  deopt(path, state);
	}

	function evaluateQuasis(path, quasis, state, raw = false) {
	  let str = "";
	  let i = 0;
	  const exprs = path.get("expressions");

	  for (const elem of quasis) {
	    if (!state.confident) break;
	    str += raw ? elem.value.raw : elem.value.cooked;
	    const expr = exprs[i++];
	    if (expr) str += String(evaluateCached(expr, state));
	  }

	  if (!state.confident) return;
	  return str;
	}

	function evaluate() {
	  const state = {
	    confident: true,
	    deoptPath: null,
	    seen: new Map()
	  };
	  let value = evaluateCached(this, state);
	  if (!state.confident) value = undefined;
	  return {
	    confident: state.confident,
	    deopt: state.deoptPath,
	    value: value
	  };
	}

	var conversion = {};

	var lib$l = {};

	var lib$k = {};

	Object.defineProperty(lib$k, "__esModule", {
	  value: true
	});
	lib$k.default = _default$b;

	var _t$p = lib$s;

	const {
	  isAssignmentPattern,
	  isRestElement
	} = _t$p;

	function _default$b(node) {
	  const params = node.params;

	  for (let i = 0; i < params.length; i++) {
	    const param = params[i];

	    if (isAssignmentPattern(param) || isRestElement(param)) {
	      return i;
	    }
	  }

	  return params.length;
	}

	var lib$j = {};

	var formatters$1 = {};

	Object.defineProperty(formatters$1, "__esModule", {
	  value: true
	});
	formatters$1.program = formatters$1.expression = formatters$1.statement = formatters$1.statements = formatters$1.smart = void 0;

	var _t$o = lib$s;

	const {
	  assertExpressionStatement
	} = _t$o;

	function makeStatementFormatter(fn) {
	  return {
	    code: str => `/* @babel/template */;\n${str}`,
	    validate: () => {},
	    unwrap: ast => {
	      return fn(ast.program.body.slice(1));
	    }
	  };
	}

	const smart$1 = makeStatementFormatter(body => {
	  if (body.length > 1) {
	    return body;
	  } else {
	    return body[0];
	  }
	});
	formatters$1.smart = smart$1;
	const statements$1 = makeStatementFormatter(body => body);
	formatters$1.statements = statements$1;
	const statement$1 = makeStatementFormatter(body => {
	  if (body.length === 0) {
	    throw new Error("Found nothing to return.");
	  }

	  if (body.length > 1) {
	    throw new Error("Found multiple statements but wanted one");
	  }

	  return body[0];
	});
	formatters$1.statement = statement$1;
	const expression$1 = {
	  code: str => `(\n${str}\n)`,
	  validate: ast => {
	    if (ast.program.body.length > 1) {
	      throw new Error("Found multiple statements but wanted one");
	    }

	    if (expression$1.unwrap(ast).start === 0) {
	      throw new Error("Parse result included parens.");
	    }
	  },
	  unwrap: ({
	    program
	  }) => {
	    const [stmt] = program.body;
	    assertExpressionStatement(stmt);
	    return stmt.expression;
	  }
	};
	formatters$1.expression = expression$1;
	const program$2 = {
	  code: str => str,
	  validate: () => {},
	  unwrap: ast => ast.program
	};
	formatters$1.program = program$2;

	var builder = {};

	var options$2 = {};

	Object.defineProperty(options$2, "__esModule", {
	  value: true
	});
	options$2.merge = merge$1;
	options$2.validate = validate$3;
	options$2.normalizeReplacements = normalizeReplacements;
	const _excluded$1 = ["placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders"];

	function _objectWithoutPropertiesLoose$1(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function merge$1(a, b) {
	  const {
	    placeholderWhitelist = a.placeholderWhitelist,
	    placeholderPattern = a.placeholderPattern,
	    preserveComments = a.preserveComments,
	    syntacticPlaceholders = a.syntacticPlaceholders
	  } = b;
	  return {
	    parser: Object.assign({}, a.parser, b.parser),
	    placeholderWhitelist,
	    placeholderPattern,
	    preserveComments,
	    syntacticPlaceholders
	  };
	}

	function validate$3(opts) {
	  if (opts != null && typeof opts !== "object") {
	    throw new Error("Unknown template options.");
	  }

	  const _ref = opts || {},
	        {
	    placeholderWhitelist,
	    placeholderPattern,
	    preserveComments,
	    syntacticPlaceholders
	  } = _ref,
	        parser = _objectWithoutPropertiesLoose$1(_ref, _excluded$1);

	  if (placeholderWhitelist != null && !(placeholderWhitelist instanceof Set)) {
	    throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
	  }

	  if (placeholderPattern != null && !(placeholderPattern instanceof RegExp) && placeholderPattern !== false) {
	    throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
	  }

	  if (preserveComments != null && typeof preserveComments !== "boolean") {
	    throw new Error("'.preserveComments' must be a boolean, null, or undefined");
	  }

	  if (syntacticPlaceholders != null && typeof syntacticPlaceholders !== "boolean") {
	    throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
	  }

	  if (syntacticPlaceholders === true && (placeholderWhitelist != null || placeholderPattern != null)) {
	    throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible" + " with '.syntacticPlaceholders: true'");
	  }

	  return {
	    parser,
	    placeholderWhitelist: placeholderWhitelist || undefined,
	    placeholderPattern: placeholderPattern == null ? undefined : placeholderPattern,
	    preserveComments: preserveComments == null ? undefined : preserveComments,
	    syntacticPlaceholders: syntacticPlaceholders == null ? undefined : syntacticPlaceholders
	  };
	}

	function normalizeReplacements(replacements) {
	  if (Array.isArray(replacements)) {
	    return replacements.reduce((acc, replacement, i) => {
	      acc["$" + i] = replacement;
	      return acc;
	    }, {});
	  } else if (typeof replacements === "object" || replacements == null) {
	    return replacements || undefined;
	  }

	  throw new Error("Template replacements must be an array, object, null, or undefined");
	}

	var string = {};

	var parse$b = {};

	Object.defineProperty(parse$b, "__esModule", {
	  value: true
	});
	parse$b.default = parseAndBuildMetadata;

	var _t$n = lib$s;

	var _parser$3 = lib$x;

	var _codeFrame$2 = lib$o;

	const {
	  isCallExpression,
	  isExpressionStatement,
	  isFunction: isFunction$2,
	  isIdentifier: isIdentifier$4,
	  isJSXIdentifier,
	  isNewExpression,
	  isPlaceholder,
	  isStatement: isStatement$1,
	  isStringLiteral: isStringLiteral$2,
	  removePropertiesDeep,
	  traverse
	} = _t$n;
	const PATTERN = /^[_$A-Z0-9]+$/;

	function parseAndBuildMetadata(formatter, code, opts) {
	  const {
	    placeholderWhitelist,
	    placeholderPattern,
	    preserveComments,
	    syntacticPlaceholders
	  } = opts;
	  const ast = parseWithCodeFrame(code, opts.parser, syntacticPlaceholders);
	  removePropertiesDeep(ast, {
	    preserveComments
	  });
	  formatter.validate(ast);
	  const syntactic = {
	    placeholders: [],
	    placeholderNames: new Set()
	  };
	  const legacy = {
	    placeholders: [],
	    placeholderNames: new Set()
	  };
	  const isLegacyRef = {
	    value: undefined
	  };
	  traverse(ast, placeholderVisitorHandler, {
	    syntactic,
	    legacy,
	    isLegacyRef,
	    placeholderWhitelist,
	    placeholderPattern,
	    syntacticPlaceholders
	  });
	  return Object.assign({
	    ast
	  }, isLegacyRef.value ? legacy : syntactic);
	}

	function placeholderVisitorHandler(node, ancestors, state) {
	  var _state$placeholderWhi;

	  let name;

	  if (isPlaceholder(node)) {
	    if (state.syntacticPlaceholders === false) {
	      throw new Error("%%foo%%-style placeholders can't be used when " + "'.syntacticPlaceholders' is false.");
	    } else {
	      name = node.name.name;
	      state.isLegacyRef.value = false;
	    }
	  } else if (state.isLegacyRef.value === false || state.syntacticPlaceholders) {
	    return;
	  } else if (isIdentifier$4(node) || isJSXIdentifier(node)) {
	    name = node.name;
	    state.isLegacyRef.value = true;
	  } else if (isStringLiteral$2(node)) {
	    name = node.value;
	    state.isLegacyRef.value = true;
	  } else {
	    return;
	  }

	  if (!state.isLegacyRef.value && (state.placeholderPattern != null || state.placeholderWhitelist != null)) {
	    throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible" + " with '.syntacticPlaceholders: true'");
	  }

	  if (state.isLegacyRef.value && (state.placeholderPattern === false || !(state.placeholderPattern || PATTERN).test(name)) && !((_state$placeholderWhi = state.placeholderWhitelist) != null && _state$placeholderWhi.has(name))) {
	    return;
	  }

	  ancestors = ancestors.slice();
	  const {
	    node: parent,
	    key
	  } = ancestors[ancestors.length - 1];
	  let type;

	  if (isStringLiteral$2(node) || isPlaceholder(node, {
	    expectedNode: "StringLiteral"
	  })) {
	    type = "string";
	  } else if (isNewExpression(parent) && key === "arguments" || isCallExpression(parent) && key === "arguments" || isFunction$2(parent) && key === "params") {
	    type = "param";
	  } else if (isExpressionStatement(parent) && !isPlaceholder(node)) {
	    type = "statement";
	    ancestors = ancestors.slice(0, -1);
	  } else if (isStatement$1(node) && isPlaceholder(node)) {
	    type = "statement";
	  } else {
	    type = "other";
	  }

	  const {
	    placeholders,
	    placeholderNames
	  } = state.isLegacyRef.value ? state.legacy : state.syntactic;
	  placeholders.push({
	    name,
	    type,
	    resolve: ast => resolveAncestors(ast, ancestors),
	    isDuplicate: placeholderNames.has(name)
	  });
	  placeholderNames.add(name);
	}

	function resolveAncestors(ast, ancestors) {
	  let parent = ast;

	  for (let i = 0; i < ancestors.length - 1; i++) {
	    const {
	      key,
	      index
	    } = ancestors[i];

	    if (index === undefined) {
	      parent = parent[key];
	    } else {
	      parent = parent[key][index];
	    }
	  }

	  const {
	    key,
	    index
	  } = ancestors[ancestors.length - 1];
	  return {
	    parent,
	    key,
	    index
	  };
	}

	function parseWithCodeFrame(code, parserOpts, syntacticPlaceholders) {
	  const plugins = (parserOpts.plugins || []).slice();

	  if (syntacticPlaceholders !== false) {
	    plugins.push("placeholders");
	  }

	  parserOpts = Object.assign({
	    allowReturnOutsideFunction: true,
	    allowSuperOutsideMethod: true,
	    sourceType: "module"
	  }, parserOpts, {
	    plugins
	  });

	  try {
	    return (0, _parser$3.parse)(code, parserOpts);
	  } catch (err) {
	    const loc = err.loc;

	    if (loc) {
	      err.message += "\n" + (0, _codeFrame$2.codeFrameColumns)(code, {
	        start: loc
	      });
	      err.code = "BABEL_TEMPLATE_PARSE_ERROR";
	    }

	    throw err;
	  }
	}

	var populate = {};

	Object.defineProperty(populate, "__esModule", {
	  value: true
	});
	populate.default = populatePlaceholders;

	var _t$m = lib$s;

	const {
	  blockStatement: blockStatement$3,
	  cloneNode: cloneNode$c,
	  emptyStatement,
	  expressionStatement: expressionStatement$6,
	  identifier: identifier$a,
	  isStatement,
	  isStringLiteral: isStringLiteral$1,
	  stringLiteral: stringLiteral$5,
	  validate: validate$2
	} = _t$m;

	function populatePlaceholders(metadata, replacements) {
	  const ast = cloneNode$c(metadata.ast);

	  if (replacements) {
	    metadata.placeholders.forEach(placeholder => {
	      if (!Object.prototype.hasOwnProperty.call(replacements, placeholder.name)) {
	        const placeholderName = placeholder.name;
	        throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}
            - { placeholderPattern: /^${placeholderName}$/ }`);
	      }
	    });
	    Object.keys(replacements).forEach(key => {
	      if (!metadata.placeholderNames.has(key)) {
	        throw new Error(`Unknown substitution "${key}" given`);
	      }
	    });
	  }

	  metadata.placeholders.slice().reverse().forEach(placeholder => {
	    try {
	      applyReplacement(placeholder, ast, replacements && replacements[placeholder.name] || null);
	    } catch (e) {
	      e.message = `@babel/template placeholder "${placeholder.name}": ${e.message}`;
	      throw e;
	    }
	  });
	  return ast;
	}

	function applyReplacement(placeholder, ast, replacement) {
	  if (placeholder.isDuplicate) {
	    if (Array.isArray(replacement)) {
	      replacement = replacement.map(node => cloneNode$c(node));
	    } else if (typeof replacement === "object") {
	      replacement = cloneNode$c(replacement);
	    }
	  }

	  const {
	    parent,
	    key,
	    index
	  } = placeholder.resolve(ast);

	  if (placeholder.type === "string") {
	    if (typeof replacement === "string") {
	      replacement = stringLiteral$5(replacement);
	    }

	    if (!replacement || !isStringLiteral$1(replacement)) {
	      throw new Error("Expected string substitution");
	    }
	  } else if (placeholder.type === "statement") {
	    if (index === undefined) {
	      if (!replacement) {
	        replacement = emptyStatement();
	      } else if (Array.isArray(replacement)) {
	        replacement = blockStatement$3(replacement);
	      } else if (typeof replacement === "string") {
	        replacement = expressionStatement$6(identifier$a(replacement));
	      } else if (!isStatement(replacement)) {
	        replacement = expressionStatement$6(replacement);
	      }
	    } else {
	      if (replacement && !Array.isArray(replacement)) {
	        if (typeof replacement === "string") {
	          replacement = identifier$a(replacement);
	        }

	        if (!isStatement(replacement)) {
	          replacement = expressionStatement$6(replacement);
	        }
	      }
	    }
	  } else if (placeholder.type === "param") {
	    if (typeof replacement === "string") {
	      replacement = identifier$a(replacement);
	    }

	    if (index === undefined) throw new Error("Assertion failure.");
	  } else {
	    if (typeof replacement === "string") {
	      replacement = identifier$a(replacement);
	    }

	    if (Array.isArray(replacement)) {
	      throw new Error("Cannot replace single expression with an array.");
	    }
	  }

	  if (index === undefined) {
	    validate$2(parent, key, replacement);
	    parent[key] = replacement;
	  } else {
	    const items = parent[key].slice();

	    if (placeholder.type === "statement" || placeholder.type === "param") {
	      if (replacement == null) {
	        items.splice(index, 1);
	      } else if (Array.isArray(replacement)) {
	        items.splice(index, 1, ...replacement);
	      } else {
	        items[index] = replacement;
	      }
	    } else {
	      items[index] = replacement;
	    }

	    validate$2(parent, key, items);
	    parent[key] = items;
	  }
	}

	Object.defineProperty(string, "__esModule", {
	  value: true
	});
	string.default = stringTemplate;

	var _options$6 = options$2;

	var _parse$1 = parse$b;

	var _populate$1 = populate;

	function stringTemplate(formatter, code, opts) {
	  code = formatter.code(code);
	  let metadata;
	  return arg => {
	    const replacements = (0, _options$6.normalizeReplacements)(arg);
	    if (!metadata) metadata = (0, _parse$1.default)(formatter, code, opts);
	    return formatter.unwrap((0, _populate$1.default)(metadata, replacements));
	  };
	}

	var literal$1 = {};

	Object.defineProperty(literal$1, "__esModule", {
	  value: true
	});
	literal$1.default = literalTemplate;

	var _options$5 = options$2;

	var _parse = parse$b;

	var _populate = populate;

	function literalTemplate(formatter, tpl, opts) {
	  const {
	    metadata,
	    names
	  } = buildLiteralData(formatter, tpl, opts);
	  return arg => {
	    const defaultReplacements = {};
	    arg.forEach((replacement, i) => {
	      defaultReplacements[names[i]] = replacement;
	    });
	    return arg => {
	      const replacements = (0, _options$5.normalizeReplacements)(arg);

	      if (replacements) {
	        Object.keys(replacements).forEach(key => {
	          if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) {
	            throw new Error("Unexpected replacement overlap.");
	          }
	        });
	      }

	      return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));
	    };
	  };
	}

	function buildLiteralData(formatter, tpl, opts) {
	  let names;
	  let nameSet;
	  let metadata;
	  let prefix = "";

	  do {
	    prefix += "$";
	    const result = buildTemplateCode(tpl, prefix);
	    names = result.names;
	    nameSet = new Set(names);
	    metadata = (0, _parse.default)(formatter, formatter.code(result.code), {
	      parser: opts.parser,
	      placeholderWhitelist: new Set(result.names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),
	      placeholderPattern: opts.placeholderPattern,
	      preserveComments: opts.preserveComments,
	      syntacticPlaceholders: opts.syntacticPlaceholders
	    });
	  } while (metadata.placeholders.some(placeholder => placeholder.isDuplicate && nameSet.has(placeholder.name)));

	  return {
	    metadata,
	    names
	  };
	}

	function buildTemplateCode(tpl, prefix) {
	  const names = [];
	  let code = tpl[0];

	  for (let i = 1; i < tpl.length; i++) {
	    const value = `${prefix}${i - 1}`;
	    names.push(value);
	    code += value + tpl[i];
	  }

	  return {
	    names,
	    code
	  };
	}

	Object.defineProperty(builder, "__esModule", {
	  value: true
	});
	builder.default = createTemplateBuilder;

	var _options$4 = options$2;

	var _string = string;

	var _literal = literal$1;

	const NO_PLACEHOLDER = (0, _options$4.validate)({
	  placeholderPattern: false
	});

	function createTemplateBuilder(formatter, defaultOpts) {
	  const templateFnCache = new WeakMap();
	  const templateAstCache = new WeakMap();
	  const cachedOpts = defaultOpts || (0, _options$4.validate)(null);
	  return Object.assign((tpl, ...args) => {
	    if (typeof tpl === "string") {
	      if (args.length > 1) throw new Error("Unexpected extra params.");
	      return extendedTrace((0, _string.default)(formatter, tpl, (0, _options$4.merge)(cachedOpts, (0, _options$4.validate)(args[0]))));
	    } else if (Array.isArray(tpl)) {
	      let builder = templateFnCache.get(tpl);

	      if (!builder) {
	        builder = (0, _literal.default)(formatter, tpl, cachedOpts);
	        templateFnCache.set(tpl, builder);
	      }

	      return extendedTrace(builder(args));
	    } else if (typeof tpl === "object" && tpl) {
	      if (args.length > 0) throw new Error("Unexpected extra params.");
	      return createTemplateBuilder(formatter, (0, _options$4.merge)(cachedOpts, (0, _options$4.validate)(tpl)));
	    }

	    throw new Error(`Unexpected template param ${typeof tpl}`);
	  }, {
	    ast: (tpl, ...args) => {
	      if (typeof tpl === "string") {
	        if (args.length > 1) throw new Error("Unexpected extra params.");
	        return (0, _string.default)(formatter, tpl, (0, _options$4.merge)((0, _options$4.merge)(cachedOpts, (0, _options$4.validate)(args[0])), NO_PLACEHOLDER))();
	      } else if (Array.isArray(tpl)) {
	        let builder = templateAstCache.get(tpl);

	        if (!builder) {
	          builder = (0, _literal.default)(formatter, tpl, (0, _options$4.merge)(cachedOpts, NO_PLACEHOLDER));
	          templateAstCache.set(tpl, builder);
	        }

	        return builder(args)();
	      }

	      throw new Error(`Unexpected template param ${typeof tpl}`);
	    }
	  });
	}

	function extendedTrace(fn) {
	  let rootStack = "";

	  try {
	    throw new Error();
	  } catch (error) {
	    if (error.stack) {
	      rootStack = error.stack.split("\n").slice(3).join("\n");
	    }
	  }

	  return arg => {
	    try {
	      return fn(arg);
	    } catch (err) {
	      err.stack += `\n    =============\n${rootStack}`;
	      throw err;
	    }
	  };
	}

	Object.defineProperty(lib$j, "__esModule", {
	  value: true
	});
	lib$j.default = lib$j.program = lib$j.expression = lib$j.statements = lib$j.statement = lib$j.smart = void 0;

	var formatters = formatters$1;

	var _builder = builder;

	const smart = (0, _builder.default)(formatters.smart);
	lib$j.smart = smart;
	const statement = (0, _builder.default)(formatters.statement);
	lib$j.statement = statement;
	const statements = (0, _builder.default)(formatters.statements);
	lib$j.statements = statements;
	const expression = (0, _builder.default)(formatters.expression);
	lib$j.expression = expression;
	const program$1 = (0, _builder.default)(formatters.program);
	lib$j.program = program$1;

	var _default$a = Object.assign(smart.bind(undefined), {
	  smart,
	  statement,
	  statements,
	  expression,
	  program: program$1,
	  ast: smart.ast
	});

	lib$j.default = _default$a;

	Object.defineProperty(lib$l, "__esModule", {
	  value: true
	});
	lib$l.default = _default$9;

	var _helperGetFunctionArity = lib$k;

	var _template$4 = lib$j;

	var _t$l = lib$s;

	const {
	  NOT_LOCAL_BINDING,
	  cloneNode: cloneNode$b,
	  identifier: identifier$9,
	  isAssignmentExpression,
	  isFunction: isFunction$1,
	  isIdentifier: isIdentifier$3,
	  isLiteral: isLiteral$1,
	  isNullLiteral,
	  isObjectMethod,
	  isObjectProperty,
	  isRegExpLiteral,
	  isTemplateLiteral,
	  isVariableDeclarator,
	  toBindingIdentifierName
	} = _t$l;
	const buildPropertyMethodAssignmentWrapper = (0, _template$4.default)(`
  (function (FUNCTION_KEY) {
    function FUNCTION_ID() {
      return FUNCTION_KEY.apply(this, arguments);
    }

    FUNCTION_ID.toString = function () {
      return FUNCTION_KEY.toString();
    }

    return FUNCTION_ID;
  })(FUNCTION)
`);
	const buildGeneratorPropertyMethodAssignmentWrapper = (0, _template$4.default)(`
  (function (FUNCTION_KEY) {
    function* FUNCTION_ID() {
      return yield* FUNCTION_KEY.apply(this, arguments);
    }

    FUNCTION_ID.toString = function () {
      return FUNCTION_KEY.toString();
    };

    return FUNCTION_ID;
  })(FUNCTION)
`);
	const visitor$1 = {
	  "ReferencedIdentifier|BindingIdentifier"(path, state) {
	    if (path.node.name !== state.name) return;
	    const localDeclar = path.scope.getBindingIdentifier(state.name);
	    if (localDeclar !== state.outerDeclar) return;
	    state.selfReference = true;
	    path.stop();
	  }

	};

	function getNameFromLiteralId(id) {
	  if (isNullLiteral(id)) {
	    return "null";
	  }

	  if (isRegExpLiteral(id)) {
	    return `_${id.pattern}_${id.flags}`;
	  }

	  if (isTemplateLiteral(id)) {
	    return id.quasis.map(quasi => quasi.value.raw).join("");
	  }

	  if (id.value !== undefined) {
	    return id.value + "";
	  }

	  return "";
	}

	function wrap(state, method, id, scope) {
	  if (state.selfReference) {
	    if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {
	      scope.rename(id.name);
	    } else {
	      if (!isFunction$1(method)) return;
	      let build = buildPropertyMethodAssignmentWrapper;

	      if (method.generator) {
	        build = buildGeneratorPropertyMethodAssignmentWrapper;
	      }

	      const template = build({
	        FUNCTION: method,
	        FUNCTION_ID: id,
	        FUNCTION_KEY: scope.generateUidIdentifier(id.name)
	      }).expression;
	      const params = template.callee.body.body[0].params;

	      for (let i = 0, len = (0, _helperGetFunctionArity.default)(method); i < len; i++) {
	        params.push(scope.generateUidIdentifier("x"));
	      }

	      return template;
	    }
	  }

	  method.id = id;
	  scope.getProgramParent().references[id.name] = true;
	}

	function visit$1(node, name, scope) {
	  const state = {
	    selfAssignment: false,
	    selfReference: false,
	    outerDeclar: scope.getBindingIdentifier(name),
	    references: [],
	    name: name
	  };
	  const binding = scope.getOwnBinding(name);

	  if (binding) {
	    if (binding.kind === "param") {
	      state.selfReference = true;
	    }
	  } else if (state.outerDeclar || scope.hasGlobal(name)) {
	    scope.traverse(node, visitor$1, state);
	  }

	  return state;
	}

	function _default$9({
	  node,
	  parent,
	  scope,
	  id
	}, localBinding = false) {
	  if (node.id) return;

	  if ((isObjectProperty(parent) || isObjectMethod(parent, {
	    kind: "method"
	  })) && (!parent.computed || isLiteral$1(parent.key))) {
	    id = parent.key;
	  } else if (isVariableDeclarator(parent)) {
	    id = parent.id;

	    if (isIdentifier$3(id) && !localBinding) {
	      const binding = scope.parent.getBinding(id.name);

	      if (binding && binding.constant && scope.getBinding(id.name) === binding) {
	        node.id = cloneNode$b(id);
	        node.id[NOT_LOCAL_BINDING] = true;
	        return;
	      }
	    }
	  } else if (isAssignmentExpression(parent, {
	    operator: "="
	  })) {
	    id = parent.left;
	  } else if (!id) {
	    return;
	  }

	  let name;

	  if (id && isLiteral$1(id)) {
	    name = getNameFromLiteralId(id);
	  } else if (id && isIdentifier$3(id)) {
	    name = id.name;
	  }

	  if (name === undefined) {
	    return;
	  }

	  name = toBindingIdentifierName(name);
	  id = identifier$9(name);
	  id[NOT_LOCAL_BINDING] = true;
	  const state = visit$1(node, name, scope);
	  return wrap(state, node, id, scope) || node;
	}

	Object.defineProperty(conversion, "__esModule", {
	  value: true
	});
	conversion.toComputedKey = toComputedKey;
	conversion.ensureBlock = ensureBlock;
	conversion.arrowFunctionToShadowed = arrowFunctionToShadowed;
	conversion.unwrapFunctionEnvironment = unwrapFunctionEnvironment;
	conversion.arrowFunctionToExpression = arrowFunctionToExpression;

	var _t$k = lib$s;

	var _helperFunctionName = lib$l;

	const {
	  arrowFunctionExpression: arrowFunctionExpression$2,
	  assignmentExpression: assignmentExpression$7,
	  binaryExpression: binaryExpression$3,
	  blockStatement: blockStatement$2,
	  callExpression: callExpression$7,
	  conditionalExpression: conditionalExpression$2,
	  expressionStatement: expressionStatement$5,
	  identifier: identifier$8,
	  isIdentifier: isIdentifier$2,
	  jsxIdentifier: jsxIdentifier$1,
	  memberExpression: memberExpression$6,
	  metaProperty,
	  numericLiteral: numericLiteral$6,
	  objectExpression: objectExpression$1,
	  restElement,
	  returnStatement,
	  sequenceExpression: sequenceExpression$5,
	  spreadElement,
	  stringLiteral: stringLiteral$4,
	  super: _super,
	  thisExpression: thisExpression$1,
	  unaryExpression: unaryExpression$5
	} = _t$k;

	function toComputedKey() {
	  let key;

	  if (this.isMemberExpression()) {
	    key = this.node.property;
	  } else if (this.isProperty() || this.isMethod()) {
	    key = this.node.key;
	  } else {
	    throw new ReferenceError("todo");
	  }

	  if (!this.node.computed) {
	    if (isIdentifier$2(key)) key = stringLiteral$4(key.name);
	  }

	  return key;
	}

	function ensureBlock() {
	  const body = this.get("body");
	  const bodyNode = body.node;

	  if (Array.isArray(body)) {
	    throw new Error("Can't convert array path to a block statement");
	  }

	  if (!bodyNode) {
	    throw new Error("Can't convert node without a body");
	  }

	  if (body.isBlockStatement()) {
	    return bodyNode;
	  }

	  const statements = [];
	  let stringPath = "body";
	  let key;
	  let listKey;

	  if (body.isStatement()) {
	    listKey = "body";
	    key = 0;
	    statements.push(body.node);
	  } else {
	    stringPath += ".body.0";

	    if (this.isFunction()) {
	      key = "argument";
	      statements.push(returnStatement(body.node));
	    } else {
	      key = "expression";
	      statements.push(expressionStatement$5(body.node));
	    }
	  }

	  this.node.body = blockStatement$2(statements);
	  const parentPath = this.get(stringPath);
	  body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key);
	  return this.node;
	}

	function arrowFunctionToShadowed() {
	  if (!this.isArrowFunctionExpression()) return;
	  this.arrowFunctionToExpression();
	}

	function unwrapFunctionEnvironment() {
	  if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) {
	    throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
	  }

	  hoistFunctionEnvironment(this);
	}

	function arrowFunctionToExpression({
	  allowInsertArrow = true,
	  specCompliant = false,
	  noNewArrows = !specCompliant
	} = {}) {
	  if (!this.isArrowFunctionExpression()) {
	    throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
	  }

	  const thisBinding = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow);
	  this.ensureBlock();
	  this.node.type = "FunctionExpression";

	  if (!noNewArrows) {
	    const checkBinding = thisBinding ? null : this.parentPath.scope.generateUidIdentifier("arrowCheckId");

	    if (checkBinding) {
	      this.parentPath.scope.push({
	        id: checkBinding,
	        init: objectExpression$1([])
	      });
	    }

	    this.get("body").unshiftContainer("body", expressionStatement$5(callExpression$7(this.hub.addHelper("newArrowCheck"), [thisExpression$1(), checkBinding ? identifier$8(checkBinding.name) : identifier$8(thisBinding)])));
	    this.replaceWith(callExpression$7(memberExpression$6((0, _helperFunctionName.default)(this, true) || this.node, identifier$8("bind")), [checkBinding ? identifier$8(checkBinding.name) : thisExpression$1()]));
	  }
	}

	function hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true) {
	  const thisEnvFn = fnPath.findParent(p => {
	    return p.isFunction() && !p.isArrowFunctionExpression() || p.isProgram() || p.isClassProperty({
	      static: false
	    });
	  });
	  const inConstructor = (thisEnvFn == null ? void 0 : thisEnvFn.node.kind) === "constructor";

	  if (thisEnvFn.isClassProperty()) {
	    throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");
	  }

	  const {
	    thisPaths,
	    argumentsPaths,
	    newTargetPaths,
	    superProps,
	    superCalls
	  } = getScopeInformation(fnPath);

	  if (inConstructor && superCalls.length > 0) {
	    if (!allowInsertArrow) {
	      throw superCalls[0].buildCodeFrameError("Unable to handle nested super() usage in arrow");
	    }

	    const allSuperCalls = [];
	    thisEnvFn.traverse({
	      Function(child) {
	        if (child.isArrowFunctionExpression()) return;
	        child.skip();
	      },

	      ClassProperty(child) {
	        child.skip();
	      },

	      CallExpression(child) {
	        if (!child.get("callee").isSuper()) return;
	        allSuperCalls.push(child);
	      }

	    });
	    const superBinding = getSuperBinding(thisEnvFn);
	    allSuperCalls.forEach(superCall => {
	      const callee = identifier$8(superBinding);
	      callee.loc = superCall.node.callee.loc;
	      superCall.get("callee").replaceWith(callee);
	    });
	  }

	  if (argumentsPaths.length > 0) {
	    const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {
	      const args = () => identifier$8("arguments");

	      if (thisEnvFn.scope.path.isProgram()) {
	        return conditionalExpression$2(binaryExpression$3("===", unaryExpression$5("typeof", args()), stringLiteral$4("undefined")), thisEnvFn.scope.buildUndefinedNode(), args());
	      } else {
	        return args();
	      }
	    });
	    argumentsPaths.forEach(argumentsChild => {
	      const argsRef = identifier$8(argumentsBinding);
	      argsRef.loc = argumentsChild.node.loc;
	      argumentsChild.replaceWith(argsRef);
	    });
	  }

	  if (newTargetPaths.length > 0) {
	    const newTargetBinding = getBinding(thisEnvFn, "newtarget", () => metaProperty(identifier$8("new"), identifier$8("target")));
	    newTargetPaths.forEach(targetChild => {
	      const targetRef = identifier$8(newTargetBinding);
	      targetRef.loc = targetChild.node.loc;
	      targetChild.replaceWith(targetRef);
	    });
	  }

	  if (superProps.length > 0) {
	    if (!allowInsertArrow) {
	      throw superProps[0].buildCodeFrameError("Unable to handle nested super.prop usage");
	    }

	    const flatSuperProps = superProps.reduce((acc, superProp) => acc.concat(standardizeSuperProperty(superProp)), []);
	    flatSuperProps.forEach(superProp => {
	      const key = superProp.node.computed ? "" : superProp.get("property").node.name;
	      const isAssignment = superProp.parentPath.isAssignmentExpression({
	        left: superProp.node
	      });
	      const isCall = superProp.parentPath.isCallExpression({
	        callee: superProp.node
	      });
	      const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);
	      const args = [];

	      if (superProp.node.computed) {
	        args.push(superProp.get("property").node);
	      }

	      if (isAssignment) {
	        const value = superProp.parentPath.node.right;
	        args.push(value);
	      }

	      const call = callExpression$7(identifier$8(superBinding), args);

	      if (isCall) {
	        superProp.parentPath.unshiftContainer("arguments", thisExpression$1());
	        superProp.replaceWith(memberExpression$6(call, identifier$8("call")));
	        thisPaths.push(superProp.parentPath.get("arguments.0"));
	      } else if (isAssignment) {
	        superProp.parentPath.replaceWith(call);
	      } else {
	        superProp.replaceWith(call);
	      }
	    });
	  }

	  let thisBinding;

	  if (thisPaths.length > 0 || !noNewArrows) {
	    thisBinding = getThisBinding(thisEnvFn, inConstructor);

	    if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {
	      thisPaths.forEach(thisChild => {
	        const thisRef = thisChild.isJSX() ? jsxIdentifier$1(thisBinding) : identifier$8(thisBinding);
	        thisRef.loc = thisChild.node.loc;
	        thisChild.replaceWith(thisRef);
	      });
	      if (!noNewArrows) thisBinding = null;
	    }
	  }

	  return thisBinding;
	}

	function standardizeSuperProperty(superProp) {
	  if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== "=") {
	    const assignmentPath = superProp.parentPath;
	    const op = assignmentPath.node.operator.slice(0, -1);
	    const value = assignmentPath.node.right;
	    assignmentPath.node.operator = "=";

	    if (superProp.node.computed) {
	      const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
	      assignmentPath.get("left").replaceWith(memberExpression$6(superProp.node.object, assignmentExpression$7("=", tmp, superProp.node.property), true));
	      assignmentPath.get("right").replaceWith(binaryExpression$3(op, memberExpression$6(superProp.node.object, identifier$8(tmp.name), true), value));
	    } else {
	      assignmentPath.get("left").replaceWith(memberExpression$6(superProp.node.object, superProp.node.property));
	      assignmentPath.get("right").replaceWith(binaryExpression$3(op, memberExpression$6(superProp.node.object, identifier$8(superProp.node.property.name)), value));
	    }

	    return [assignmentPath.get("left"), assignmentPath.get("right").get("left")];
	  } else if (superProp.parentPath.isUpdateExpression()) {
	    const updateExpr = superProp.parentPath;
	    const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
	    const computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier("prop") : null;
	    const parts = [assignmentExpression$7("=", tmp, memberExpression$6(superProp.node.object, computedKey ? assignmentExpression$7("=", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), assignmentExpression$7("=", memberExpression$6(superProp.node.object, computedKey ? identifier$8(computedKey.name) : superProp.node.property, superProp.node.computed), binaryExpression$3("+", identifier$8(tmp.name), numericLiteral$6(1)))];

	    if (!superProp.parentPath.node.prefix) {
	      parts.push(identifier$8(tmp.name));
	    }

	    updateExpr.replaceWith(sequenceExpression$5(parts));
	    const left = updateExpr.get("expressions.0.right");
	    const right = updateExpr.get("expressions.1.left");
	    return [left, right];
	  }

	  return [superProp];
	}

	function hasSuperClass(thisEnvFn) {
	  return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;
	}

	function getThisBinding(thisEnvFn, inConstructor) {
	  return getBinding(thisEnvFn, "this", thisBinding => {
	    if (!inConstructor || !hasSuperClass(thisEnvFn)) return thisExpression$1();
	    const supers = new WeakSet();
	    thisEnvFn.traverse({
	      Function(child) {
	        if (child.isArrowFunctionExpression()) return;
	        child.skip();
	      },

	      ClassProperty(child) {
	        child.skip();
	      },

	      CallExpression(child) {
	        if (!child.get("callee").isSuper()) return;
	        if (supers.has(child.node)) return;
	        supers.add(child.node);
	        child.replaceWithMultiple([child.node, assignmentExpression$7("=", identifier$8(thisBinding), identifier$8("this"))]);
	      }

	    });
	  });
	}

	function getSuperBinding(thisEnvFn) {
	  return getBinding(thisEnvFn, "supercall", () => {
	    const argsBinding = thisEnvFn.scope.generateUidIdentifier("args");
	    return arrowFunctionExpression$2([restElement(argsBinding)], callExpression$7(_super(), [spreadElement(identifier$8(argsBinding.name))]));
	  });
	}

	function getSuperPropBinding(thisEnvFn, isAssignment, propName) {
	  const op = isAssignment ? "set" : "get";
	  return getBinding(thisEnvFn, `superprop_${op}:${propName || ""}`, () => {
	    const argsList = [];
	    let fnBody;

	    if (propName) {
	      fnBody = memberExpression$6(_super(), identifier$8(propName));
	    } else {
	      const method = thisEnvFn.scope.generateUidIdentifier("prop");
	      argsList.unshift(method);
	      fnBody = memberExpression$6(_super(), identifier$8(method.name), true);
	    }

	    if (isAssignment) {
	      const valueIdent = thisEnvFn.scope.generateUidIdentifier("value");
	      argsList.push(valueIdent);
	      fnBody = assignmentExpression$7("=", fnBody, identifier$8(valueIdent.name));
	    }

	    return arrowFunctionExpression$2(argsList, fnBody);
	  });
	}

	function getBinding(thisEnvFn, key, init) {
	  const cacheKey = "binding:" + key;
	  let data = thisEnvFn.getData(cacheKey);

	  if (!data) {
	    const id = thisEnvFn.scope.generateUidIdentifier(key);
	    data = id.name;
	    thisEnvFn.setData(cacheKey, data);
	    thisEnvFn.scope.push({
	      id: id,
	      init: init(data)
	    });
	  }

	  return data;
	}

	function getScopeInformation(fnPath) {
	  const thisPaths = [];
	  const argumentsPaths = [];
	  const newTargetPaths = [];
	  const superProps = [];
	  const superCalls = [];
	  fnPath.traverse({
	    ClassProperty(child) {
	      child.skip();
	    },

	    Function(child) {
	      if (child.isArrowFunctionExpression()) return;
	      child.skip();
	    },

	    ThisExpression(child) {
	      thisPaths.push(child);
	    },

	    JSXIdentifier(child) {
	      if (child.node.name !== "this") return;

	      if (!child.parentPath.isJSXMemberExpression({
	        object: child.node
	      }) && !child.parentPath.isJSXOpeningElement({
	        name: child.node
	      })) {
	        return;
	      }

	      thisPaths.push(child);
	    },

	    CallExpression(child) {
	      if (child.get("callee").isSuper()) superCalls.push(child);
	    },

	    MemberExpression(child) {
	      if (child.get("object").isSuper()) superProps.push(child);
	    },

	    ReferencedIdentifier(child) {
	      if (child.node.name !== "arguments") return;
	      let curr = child.scope;

	      do {
	        if (curr.hasOwnBinding("arguments")) {
	          curr.rename("arguments");
	          return;
	        }

	        if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {
	          break;
	        }
	      } while (curr = curr.parent);

	      argumentsPaths.push(child);
	    },

	    MetaProperty(child) {
	      if (!child.get("meta").isIdentifier({
	        name: "new"
	      })) return;
	      if (!child.get("property").isIdentifier({
	        name: "target"
	      })) return;
	      newTargetPaths.push(child);
	    }

	  });
	  return {
	    thisPaths,
	    argumentsPaths,
	    newTargetPaths,
	    superProps,
	    superCalls
	  };
	}

	var introspection = {};

	Object.defineProperty(introspection, "__esModule", {
	  value: true
	});
	introspection.matchesPattern = matchesPattern;
	introspection.has = has$2;
	introspection.isStatic = isStatic;
	introspection.isnt = isnt;
	introspection.equals = equals$1;
	introspection.isNodeType = isNodeType;
	introspection.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
	introspection.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;
	introspection.isCompletionRecord = isCompletionRecord;
	introspection.isStatementOrBlock = isStatementOrBlock;
	introspection.referencesImport = referencesImport;
	introspection.getSource = getSource$1;
	introspection.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
	introspection._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
	introspection._guessExecutionStatusRelativeToDifferentFunctions = _guessExecutionStatusRelativeToDifferentFunctions;
	introspection.resolve = resolve$1;
	introspection._resolve = _resolve;
	introspection.isConstantExpression = isConstantExpression;
	introspection.isInStrictMode = isInStrictMode;
	introspection.is = void 0;

	var _t$j = lib$s;

	const {
	  STATEMENT_OR_BLOCK_KEYS,
	  VISITOR_KEYS: VISITOR_KEYS$2,
	  isBlockStatement,
	  isExpression: isExpression$1,
	  isIdentifier: isIdentifier$1,
	  isLiteral,
	  isStringLiteral,
	  isType,
	  matchesPattern: _matchesPattern
	} = _t$j;

	function matchesPattern(pattern, allowPartial) {
	  return _matchesPattern(this.node, pattern, allowPartial);
	}

	function has$2(key) {
	  const val = this.node && this.node[key];

	  if (val && Array.isArray(val)) {
	    return !!val.length;
	  } else {
	    return !!val;
	  }
	}

	function isStatic() {
	  return this.scope.isStatic(this.node);
	}

	const is = has$2;
	introspection.is = is;

	function isnt(key) {
	  return !this.has(key);
	}

	function equals$1(key, value) {
	  return this.node[key] === value;
	}

	function isNodeType(type) {
	  return isType(this.type, type);
	}

	function canHaveVariableDeclarationOrExpression() {
	  return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
	}

	function canSwapBetweenExpressionAndStatement(replacement) {
	  if (this.key !== "body" || !this.parentPath.isArrowFunctionExpression()) {
	    return false;
	  }

	  if (this.isExpression()) {
	    return isBlockStatement(replacement);
	  } else if (this.isBlockStatement()) {
	    return isExpression$1(replacement);
	  }

	  return false;
	}

	function isCompletionRecord(allowInsideFunction) {
	  let path = this;
	  let first = true;

	  do {
	    const container = path.container;

	    if (path.isFunction() && !first) {
	      return !!allowInsideFunction;
	    }

	    first = false;

	    if (Array.isArray(container) && path.key !== container.length - 1) {
	      return false;
	    }
	  } while ((path = path.parentPath) && !path.isProgram());

	  return true;
	}

	function isStatementOrBlock() {
	  if (this.parentPath.isLabeledStatement() || isBlockStatement(this.container)) {
	    return false;
	  } else {
	    return STATEMENT_OR_BLOCK_KEYS.includes(this.key);
	  }
	}

	function referencesImport(moduleSource, importName) {
	  if (!this.isReferencedIdentifier()) {
	    if ((this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, {
	      value: importName
	    }) : this.node.property.name === importName)) {
	      const object = this.get("object");
	      return object.isReferencedIdentifier() && object.referencesImport(moduleSource, "*");
	    }

	    return false;
	  }

	  const binding = this.scope.getBinding(this.node.name);
	  if (!binding || binding.kind !== "module") return false;
	  const path = binding.path;
	  const parent = path.parentPath;
	  if (!parent.isImportDeclaration()) return false;

	  if (parent.node.source.value === moduleSource) {
	    if (!importName) return true;
	  } else {
	    return false;
	  }

	  if (path.isImportDefaultSpecifier() && importName === "default") {
	    return true;
	  }

	  if (path.isImportNamespaceSpecifier() && importName === "*") {
	    return true;
	  }

	  if (path.isImportSpecifier() && isIdentifier$1(path.node.imported, {
	    name: importName
	  })) {
	    return true;
	  }

	  return false;
	}

	function getSource$1() {
	  const node = this.node;

	  if (node.end) {
	    const code = this.hub.getCode();
	    if (code) return code.slice(node.start, node.end);
	  }

	  return "";
	}

	function willIMaybeExecuteBefore(target) {
	  return this._guessExecutionStatusRelativeTo(target) !== "after";
	}

	function getOuterFunction(path) {
	  return (path.scope.getFunctionParent() || path.scope.getProgramParent()).path;
	}

	function isExecutionUncertain(type, key) {
	  switch (type) {
	    case "LogicalExpression":
	      return key === "right";

	    case "ConditionalExpression":
	    case "IfStatement":
	      return key === "consequent" || key === "alternate";

	    case "WhileStatement":
	    case "DoWhileStatement":
	    case "ForInStatement":
	    case "ForOfStatement":
	      return key === "body";

	    case "ForStatement":
	      return key === "body" || key === "update";

	    case "SwitchStatement":
	      return key === "cases";

	    case "TryStatement":
	      return key === "handler";

	    case "AssignmentPattern":
	      return key === "right";

	    case "OptionalMemberExpression":
	      return key === "property";

	    case "OptionalCallExpression":
	      return key === "arguments";

	    default:
	      return false;
	  }
	}

	function isExecutionUncertainInList(paths, maxIndex) {
	  for (let i = 0; i < maxIndex; i++) {
	    const path = paths[i];

	    if (isExecutionUncertain(path.parent.type, path.parentKey)) {
	      return true;
	    }
	  }

	  return false;
	}

	function _guessExecutionStatusRelativeTo(target) {
	  const funcParent = {
	    this: getOuterFunction(this),
	    target: getOuterFunction(target)
	  };

	  if (funcParent.target.node !== funcParent.this.node) {
	    return this._guessExecutionStatusRelativeToDifferentFunctions(funcParent.target);
	  }

	  const paths = {
	    target: target.getAncestry(),
	    this: this.getAncestry()
	  };
	  if (paths.target.indexOf(this) >= 0) return "after";
	  if (paths.this.indexOf(target) >= 0) return "before";
	  let commonPath;
	  const commonIndex = {
	    target: 0,
	    this: 0
	  };

	  while (!commonPath && commonIndex.this < paths.this.length) {
	    const path = paths.this[commonIndex.this];
	    commonIndex.target = paths.target.indexOf(path);

	    if (commonIndex.target >= 0) {
	      commonPath = path;
	    } else {
	      commonIndex.this++;
	    }
	  }

	  if (!commonPath) {
	    throw new Error("Internal Babel error - The two compared nodes" + " don't appear to belong to the same program.");
	  }

	  if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) {
	    return "unknown";
	  }

	  const divergence = {
	    this: paths.this[commonIndex.this - 1],
	    target: paths.target[commonIndex.target - 1]
	  };

	  if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) {
	    return divergence.target.key > divergence.this.key ? "before" : "after";
	  }

	  const keys = VISITOR_KEYS$2[commonPath.type];
	  const keyPosition = {
	    this: keys.indexOf(divergence.this.parentKey),
	    target: keys.indexOf(divergence.target.parentKey)
	  };
	  return keyPosition.target > keyPosition.this ? "before" : "after";
	}

	const executionOrderCheckedNodes = new WeakSet();

	function _guessExecutionStatusRelativeToDifferentFunctions(target) {
	  if (!target.isFunctionDeclaration() || target.parentPath.isExportDeclaration()) {
	    return "unknown";
	  }

	  const binding = target.scope.getBinding(target.node.id.name);
	  if (!binding.references) return "before";
	  const referencePaths = binding.referencePaths;
	  let allStatus;

	  for (const path of referencePaths) {
	    const childOfFunction = !!path.find(path => path.node === target.node);
	    if (childOfFunction) continue;

	    if (path.key !== "callee" || !path.parentPath.isCallExpression()) {
	      return "unknown";
	    }

	    if (executionOrderCheckedNodes.has(path.node)) continue;
	    executionOrderCheckedNodes.add(path.node);

	    const status = this._guessExecutionStatusRelativeTo(path);

	    executionOrderCheckedNodes.delete(path.node);

	    if (allStatus && allStatus !== status) {
	      return "unknown";
	    } else {
	      allStatus = status;
	    }
	  }

	  return allStatus;
	}

	function resolve$1(dangerous, resolved) {
	  return this._resolve(dangerous, resolved) || this;
	}

	function _resolve(dangerous, resolved) {
	  if (resolved && resolved.indexOf(this) >= 0) return;
	  resolved = resolved || [];
	  resolved.push(this);

	  if (this.isVariableDeclarator()) {
	    if (this.get("id").isIdentifier()) {
	      return this.get("init").resolve(dangerous, resolved);
	    }
	  } else if (this.isReferencedIdentifier()) {
	    const binding = this.scope.getBinding(this.node.name);
	    if (!binding) return;
	    if (!binding.constant) return;
	    if (binding.kind === "module") return;

	    if (binding.path !== this) {
	      const ret = binding.path.resolve(dangerous, resolved);
	      if (this.find(parent => parent.node === ret.node)) return;
	      return ret;
	    }
	  } else if (this.isTypeCastExpression()) {
	    return this.get("expression").resolve(dangerous, resolved);
	  } else if (dangerous && this.isMemberExpression()) {
	    const targetKey = this.toComputedKey();
	    if (!isLiteral(targetKey)) return;
	    const targetName = targetKey.value;
	    const target = this.get("object").resolve(dangerous, resolved);

	    if (target.isObjectExpression()) {
	      const props = target.get("properties");

	      for (const prop of props) {
	        if (!prop.isProperty()) continue;
	        const key = prop.get("key");
	        let match = prop.isnt("computed") && key.isIdentifier({
	          name: targetName
	        });
	        match = match || key.isLiteral({
	          value: targetName
	        });
	        if (match) return prop.get("value").resolve(dangerous, resolved);
	      }
	    } else if (target.isArrayExpression() && !isNaN(+targetName)) {
	      const elems = target.get("elements");
	      const elem = elems[targetName];
	      if (elem) return elem.resolve(dangerous, resolved);
	    }
	  }
	}

	function isConstantExpression() {
	  if (this.isIdentifier()) {
	    const binding = this.scope.getBinding(this.node.name);
	    if (!binding) return false;
	    return binding.constant;
	  }

	  if (this.isLiteral()) {
	    if (this.isRegExpLiteral()) {
	      return false;
	    }

	    if (this.isTemplateLiteral()) {
	      return this.get("expressions").every(expression => expression.isConstantExpression());
	    }

	    return true;
	  }

	  if (this.isUnaryExpression()) {
	    if (this.node.operator !== "void") {
	      return false;
	    }

	    return this.get("argument").isConstantExpression();
	  }

	  if (this.isBinaryExpression()) {
	    return this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
	  }

	  return false;
	}

	function isInStrictMode() {
	  const start = this.isProgram() ? this : this.parentPath;
	  const strictParent = start.find(path => {
	    if (path.isProgram({
	      sourceType: "module"
	    })) return true;
	    if (path.isClass()) return true;
	    if (!path.isProgram() && !path.isFunction()) return false;

	    if (path.isArrowFunctionExpression() && !path.get("body").isBlockStatement()) {
	      return false;
	    }

	    const body = path.isFunction() ? path.node.body : path.node;

	    for (const directive of body.directives) {
	      if (directive.value.value === "use strict") {
	        return true;
	      }
	    }
	  });
	  return !!strictParent;
	}

	var context$1 = {};

	Object.defineProperty(context$1, "__esModule", {
	  value: true
	});
	context$1.call = call;
	context$1._call = _call;
	context$1.isBlacklisted = context$1.isDenylisted = isDenylisted;
	context$1.visit = visit;
	context$1.skip = skip;
	context$1.skipKey = skipKey;
	context$1.stop = stop;
	context$1.setScope = setScope;
	context$1.setContext = setContext;
	context$1.resync = resync;
	context$1._resyncParent = _resyncParent;
	context$1._resyncKey = _resyncKey;
	context$1._resyncList = _resyncList;
	context$1._resyncRemoved = _resyncRemoved;
	context$1.popContext = popContext;
	context$1.pushContext = pushContext;
	context$1.setup = setup;
	context$1.setKey = setKey;
	context$1.requeue = requeue;
	context$1._getQueueContexts = _getQueueContexts;

	var _index$4 = lib$t;

	var _index2 = path$2;

	function call(key) {
	  const opts = this.opts;
	  this.debug(key);

	  if (this.node) {
	    if (this._call(opts[key])) return true;
	  }

	  if (this.node) {
	    return this._call(opts[this.node.type] && opts[this.node.type][key]);
	  }

	  return false;
	}

	function _call(fns) {
	  if (!fns) return false;

	  for (const fn of fns) {
	    if (!fn) continue;
	    const node = this.node;
	    if (!node) return true;
	    const ret = fn.call(this.state, this, this.state);

	    if (ret && typeof ret === "object" && typeof ret.then === "function") {
	      throw new Error(`You appear to be using a plugin with an async traversal visitor, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);
	    }

	    if (ret) {
	      throw new Error(`Unexpected return value from visitor method ${fn}`);
	    }

	    if (this.node !== node) return true;
	    if (this._traverseFlags > 0) return true;
	  }

	  return false;
	}

	function isDenylisted() {
	  var _this$opts$denylist;

	  const denylist = (_this$opts$denylist = this.opts.denylist) != null ? _this$opts$denylist : this.opts.blacklist;
	  return denylist && denylist.indexOf(this.node.type) > -1;
	}

	function visit() {
	  if (!this.node) {
	    return false;
	  }

	  if (this.isDenylisted()) {
	    return false;
	  }

	  if (this.opts.shouldSkip && this.opts.shouldSkip(this)) {
	    return false;
	  }

	  if (this.shouldSkip || this.call("enter") || this.shouldSkip) {
	    this.debug("Skip...");
	    return this.shouldStop;
	  }

	  this.debug("Recursing into...");

	  _index$4.default.node(this.node, this.opts, this.scope, this.state, this, this.skipKeys);

	  this.call("exit");
	  return this.shouldStop;
	}

	function skip() {
	  this.shouldSkip = true;
	}

	function skipKey(key) {
	  if (this.skipKeys == null) {
	    this.skipKeys = {};
	  }

	  this.skipKeys[key] = true;
	}

	function stop() {
	  this._traverseFlags |= _index2.SHOULD_SKIP | _index2.SHOULD_STOP;
	}

	function setScope() {
	  if (this.opts && this.opts.noScope) return;
	  let path = this.parentPath;
	  if (this.key === "key" && path.isMethod()) path = path.parentPath;
	  let target;

	  while (path && !target) {
	    if (path.opts && path.opts.noScope) return;
	    target = path.scope;
	    path = path.parentPath;
	  }

	  this.scope = this.getScope(target);
	  if (this.scope) this.scope.init();
	}

	function setContext(context) {
	  if (this.skipKeys != null) {
	    this.skipKeys = {};
	  }

	  this._traverseFlags = 0;

	  if (context) {
	    this.context = context;
	    this.state = context.state;
	    this.opts = context.opts;
	  }

	  this.setScope();
	  return this;
	}

	function resync() {
	  if (this.removed) return;

	  this._resyncParent();

	  this._resyncList();

	  this._resyncKey();
	}

	function _resyncParent() {
	  if (this.parentPath) {
	    this.parent = this.parentPath.node;
	  }
	}

	function _resyncKey() {
	  if (!this.container) return;
	  if (this.node === this.container[this.key]) return;

	  if (Array.isArray(this.container)) {
	    for (let i = 0; i < this.container.length; i++) {
	      if (this.container[i] === this.node) {
	        return this.setKey(i);
	      }
	    }
	  } else {
	    for (const key of Object.keys(this.container)) {
	      if (this.container[key] === this.node) {
	        return this.setKey(key);
	      }
	    }
	  }

	  this.key = null;
	}

	function _resyncList() {
	  if (!this.parent || !this.inList) return;
	  const newContainer = this.parent[this.listKey];
	  if (this.container === newContainer) return;
	  this.container = newContainer || null;
	}

	function _resyncRemoved() {
	  if (this.key == null || !this.container || this.container[this.key] !== this.node) {
	    this._markRemoved();
	  }
	}

	function popContext() {
	  this.contexts.pop();

	  if (this.contexts.length > 0) {
	    this.setContext(this.contexts[this.contexts.length - 1]);
	  } else {
	    this.setContext(undefined);
	  }
	}

	function pushContext(context) {
	  this.contexts.push(context);
	  this.setContext(context);
	}

	function setup(parentPath, container, listKey, key) {
	  this.listKey = listKey;
	  this.container = container;
	  this.parentPath = parentPath || this.parentPath;
	  this.setKey(key);
	}

	function setKey(key) {
	  var _this$node;

	  this.key = key;
	  this.node = this.container[this.key];
	  this.type = (_this$node = this.node) == null ? void 0 : _this$node.type;
	}

	function requeue(pathToQueue = this) {
	  if (pathToQueue.removed) return;
	  const contexts = this.contexts;

	  for (const context of contexts) {
	    context.maybeQueue(pathToQueue);
	  }
	}

	function _getQueueContexts() {
	  let path = this;
	  let contexts = this.contexts;

	  while (!contexts.length) {
	    path = path.parentPath;
	    if (!path) break;
	    contexts = path.contexts;
	  }

	  return contexts;
	}

	var removal = {};

	var removalHooks = {};

	Object.defineProperty(removalHooks, "__esModule", {
	  value: true
	});
	removalHooks.hooks = void 0;
	const hooks = [function (self, parent) {
	  const removeParent = self.key === "test" && (parent.isWhile() || parent.isSwitchCase()) || self.key === "declaration" && parent.isExportDeclaration() || self.key === "body" && parent.isLabeledStatement() || self.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 1 || self.key === "expression" && parent.isExpressionStatement();

	  if (removeParent) {
	    parent.remove();
	    return true;
	  }
	}, function (self, parent) {
	  if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {
	    parent.replaceWith(parent.node.expressions[0]);
	    return true;
	  }
	}, function (self, parent) {
	  if (parent.isBinary()) {
	    if (self.key === "left") {
	      parent.replaceWith(parent.node.right);
	    } else {
	      parent.replaceWith(parent.node.left);
	    }

	    return true;
	  }
	}, function (self, parent) {
	  if (parent.isIfStatement() && (self.key === "consequent" || self.key === "alternate") || self.key === "body" && (parent.isLoop() || parent.isArrowFunctionExpression())) {
	    self.replaceWith({
	      type: "BlockStatement",
	      body: []
	    });
	    return true;
	  }
	}];
	removalHooks.hooks = hooks;

	Object.defineProperty(removal, "__esModule", {
	  value: true
	});
	removal.remove = remove$3;
	removal._removeFromScope = _removeFromScope;
	removal._callRemovalHooks = _callRemovalHooks;
	removal._remove = _remove;
	removal._markRemoved = _markRemoved;
	removal._assertUnremoved = _assertUnremoved;

	var _removalHooks = removalHooks;

	var _cache$2 = cache$1;

	var _index$3 = path$2;

	function remove$3() {
	  var _this$opts;

	  this._assertUnremoved();

	  this.resync();

	  if (!((_this$opts = this.opts) != null && _this$opts.noScope)) {
	    this._removeFromScope();
	  }

	  if (this._callRemovalHooks()) {
	    this._markRemoved();

	    return;
	  }

	  this.shareCommentsWithSiblings();

	  this._remove();

	  this._markRemoved();
	}

	function _removeFromScope() {
	  const bindings = this.getBindingIdentifiers();
	  Object.keys(bindings).forEach(name => this.scope.removeBinding(name));
	}

	function _callRemovalHooks() {
	  for (const fn of _removalHooks.hooks) {
	    if (fn(this, this.parentPath)) return true;
	  }
	}

	function _remove() {
	  if (Array.isArray(this.container)) {
	    this.container.splice(this.key, 1);
	    this.updateSiblingKeys(this.key, -1);
	  } else {
	    this._replaceWith(null);
	  }
	}

	function _markRemoved() {
	  this._traverseFlags |= _index$3.SHOULD_SKIP | _index$3.REMOVED;
	  if (this.parent) _cache$2.path.get(this.parent).delete(this.node);
	  this.node = null;
	}

	function _assertUnremoved() {
	  if (this.removed) {
	    throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
	  }
	}

	var modification = {};

	var hoister = {};

	Object.defineProperty(hoister, "__esModule", {
	  value: true
	});
	hoister.default = void 0;

	var _t$i = lib$s;

	var _t2 = _t$i;
	const {
	  react
	} = _t$i;
	const {
	  cloneNode: cloneNode$a,
	  jsxExpressionContainer,
	  variableDeclaration: variableDeclaration$4,
	  variableDeclarator: variableDeclarator$4
	} = _t2;
	const referenceVisitor = {
	  ReferencedIdentifier(path, state) {
	    if (path.isJSXIdentifier() && react.isCompatTag(path.node.name) && !path.parentPath.isJSXMemberExpression()) {
	      return;
	    }

	    if (path.node.name === "this") {
	      let scope = path.scope;

	      do {
	        if (scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) {
	          break;
	        }
	      } while (scope = scope.parent);

	      if (scope) state.breakOnScopePaths.push(scope.path);
	    }

	    const binding = path.scope.getBinding(path.node.name);
	    if (!binding) return;

	    for (const violation of binding.constantViolations) {
	      if (violation.scope !== binding.path.scope) {
	        state.mutableBinding = true;
	        path.stop();
	        return;
	      }
	    }

	    if (binding !== state.scope.getBinding(path.node.name)) return;
	    state.bindings[path.node.name] = binding;
	  }

	};

	class PathHoister {
	  constructor(path, scope) {
	    this.breakOnScopePaths = void 0;
	    this.bindings = void 0;
	    this.mutableBinding = void 0;
	    this.scopes = void 0;
	    this.scope = void 0;
	    this.path = void 0;
	    this.attachAfter = void 0;
	    this.breakOnScopePaths = [];
	    this.bindings = {};
	    this.mutableBinding = false;
	    this.scopes = [];
	    this.scope = scope;
	    this.path = path;
	    this.attachAfter = false;
	  }

	  isCompatibleScope(scope) {
	    for (const key of Object.keys(this.bindings)) {
	      const binding = this.bindings[key];

	      if (!scope.bindingIdentifierEquals(key, binding.identifier)) {
	        return false;
	      }
	    }

	    return true;
	  }

	  getCompatibleScopes() {
	    let scope = this.path.scope;

	    do {
	      if (this.isCompatibleScope(scope)) {
	        this.scopes.push(scope);
	      } else {
	        break;
	      }

	      if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {
	        break;
	      }
	    } while (scope = scope.parent);
	  }

	  getAttachmentPath() {
	    let path = this._getAttachmentPath();

	    if (!path) return;
	    let targetScope = path.scope;

	    if (targetScope.path === path) {
	      targetScope = path.scope.parent;
	    }

	    if (targetScope.path.isProgram() || targetScope.path.isFunction()) {
	      for (const name of Object.keys(this.bindings)) {
	        if (!targetScope.hasOwnBinding(name)) continue;
	        const binding = this.bindings[name];

	        if (binding.kind === "param" || binding.path.parentKey === "params") {
	          continue;
	        }

	        const bindingParentPath = this.getAttachmentParentForPath(binding.path);

	        if (bindingParentPath.key >= path.key) {
	          this.attachAfter = true;
	          path = binding.path;

	          for (const violationPath of binding.constantViolations) {
	            if (this.getAttachmentParentForPath(violationPath).key > path.key) {
	              path = violationPath;
	            }
	          }
	        }
	      }
	    }

	    return path;
	  }

	  _getAttachmentPath() {
	    const scopes = this.scopes;
	    const scope = scopes.pop();
	    if (!scope) return;

	    if (scope.path.isFunction()) {
	      if (this.hasOwnParamBindings(scope)) {
	        if (this.scope === scope) return;
	        const bodies = scope.path.get("body").get("body");

	        for (let i = 0; i < bodies.length; i++) {
	          if (bodies[i].node._blockHoist) continue;
	          return bodies[i];
	        }
	      } else {
	        return this.getNextScopeAttachmentParent();
	      }
	    } else if (scope.path.isProgram()) {
	      return this.getNextScopeAttachmentParent();
	    }
	  }

	  getNextScopeAttachmentParent() {
	    const scope = this.scopes.pop();
	    if (scope) return this.getAttachmentParentForPath(scope.path);
	  }

	  getAttachmentParentForPath(path) {
	    do {
	      if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
	        return path;
	      }
	    } while (path = path.parentPath);
	  }

	  hasOwnParamBindings(scope) {
	    for (const name of Object.keys(this.bindings)) {
	      if (!scope.hasOwnBinding(name)) continue;
	      const binding = this.bindings[name];
	      if (binding.kind === "param" && binding.constant) return true;
	    }

	    return false;
	  }

	  run() {
	    this.path.traverse(referenceVisitor, this);
	    if (this.mutableBinding) return;
	    this.getCompatibleScopes();
	    const attachTo = this.getAttachmentPath();
	    if (!attachTo) return;
	    if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;
	    let uid = attachTo.scope.generateUidIdentifier("ref");
	    const declarator = variableDeclarator$4(uid, this.path.node);
	    const insertFn = this.attachAfter ? "insertAfter" : "insertBefore";
	    const [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration$4("var", [declarator])]);
	    const parent = this.path.parentPath;

	    if (parent.isJSXElement() && this.path.container === parent.node.children) {
	      uid = jsxExpressionContainer(uid);
	    }

	    this.path.replaceWith(cloneNode$a(uid));
	    return attachTo.isVariableDeclarator() ? attached.get("init") : attached.get("declarations.0.init");
	  }

	}

	hoister.default = PathHoister;

	Object.defineProperty(modification, "__esModule", {
	  value: true
	});
	modification.insertBefore = insertBefore$1;
	modification._containerInsert = _containerInsert;
	modification._containerInsertBefore = _containerInsertBefore;
	modification._containerInsertAfter = _containerInsertAfter;
	modification.insertAfter = insertAfter;
	modification.updateSiblingKeys = updateSiblingKeys;
	modification._verifyNodeList = _verifyNodeList;
	modification.unshiftContainer = unshiftContainer;
	modification.pushContainer = pushContainer;
	modification.hoist = hoist;

	var _cache$1 = cache$1;

	var _hoister = hoister;

	var _index$2 = path$2;

	var _t$h = lib$s;

	const {
	  arrowFunctionExpression: arrowFunctionExpression$1,
	  assertExpression,
	  assignmentExpression: assignmentExpression$6,
	  blockStatement: blockStatement$1,
	  callExpression: callExpression$6,
	  cloneNode: cloneNode$9,
	  expressionStatement: expressionStatement$4,
	  isExpression
	} = _t$h;

	function insertBefore$1(nodes_) {
	  this._assertUnremoved();

	  const nodes = this._verifyNodeList(nodes_);

	  const {
	    parentPath
	  } = this;

	  if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || parentPath.isExportNamedDeclaration() || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {
	    return parentPath.insertBefore(nodes);
	  } else if (this.isNodeType("Expression") && !this.isJSXElement() || parentPath.isForStatement() && this.key === "init") {
	    if (this.node) nodes.push(this.node);
	    return this.replaceExpressionWithStatements(nodes);
	  } else if (Array.isArray(this.container)) {
	    return this._containerInsertBefore(nodes);
	  } else if (this.isStatementOrBlock()) {
	    const node = this.node;
	    const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);
	    this.replaceWith(blockStatement$1(shouldInsertCurrentNode ? [node] : []));
	    return this.unshiftContainer("body", nodes);
	  } else {
	    throw new Error("We don't know what to do with this node type. " + "We were previously a Statement but we can't fit in here?");
	  }
	}

	function _containerInsert(from, nodes) {
	  this.updateSiblingKeys(from, nodes.length);
	  const paths = [];
	  this.container.splice(from, 0, ...nodes);

	  for (let i = 0; i < nodes.length; i++) {
	    const to = from + i;
	    const path = this.getSibling(to);
	    paths.push(path);

	    if (this.context && this.context.queue) {
	      path.pushContext(this.context);
	    }
	  }

	  const contexts = this._getQueueContexts();

	  for (const path of paths) {
	    path.setScope();
	    path.debug("Inserted.");

	    for (const context of contexts) {
	      context.maybeQueue(path, true);
	    }
	  }

	  return paths;
	}

	function _containerInsertBefore(nodes) {
	  return this._containerInsert(this.key, nodes);
	}

	function _containerInsertAfter(nodes) {
	  return this._containerInsert(this.key + 1, nodes);
	}

	function insertAfter(nodes_) {
	  this._assertUnremoved();

	  const nodes = this._verifyNodeList(nodes_);

	  const {
	    parentPath
	  } = this;

	  if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || parentPath.isExportNamedDeclaration() || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {
	    return parentPath.insertAfter(nodes.map(node => {
	      return isExpression(node) ? expressionStatement$4(node) : node;
	    }));
	  } else if (this.isNodeType("Expression") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && this.key === "init") {
	    if (this.node) {
	      const node = this.node;
	      let {
	        scope
	      } = this;

	      if (scope.path.isPattern()) {
	        assertExpression(node);
	        this.replaceWith(callExpression$6(arrowFunctionExpression$1([], node), []));
	        this.get("callee.body").insertAfter(nodes);
	        return [this];
	      }

	      if (parentPath.isMethod({
	        computed: true,
	        key: node
	      })) {
	        scope = scope.parent;
	      }

	      const temp = scope.generateDeclaredUidIdentifier();
	      nodes.unshift(expressionStatement$4(assignmentExpression$6("=", cloneNode$9(temp), node)));
	      nodes.push(expressionStatement$4(cloneNode$9(temp)));
	    }

	    return this.replaceExpressionWithStatements(nodes);
	  } else if (Array.isArray(this.container)) {
	    return this._containerInsertAfter(nodes);
	  } else if (this.isStatementOrBlock()) {
	    const node = this.node;
	    const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);
	    this.replaceWith(blockStatement$1(shouldInsertCurrentNode ? [node] : []));
	    return this.pushContainer("body", nodes);
	  } else {
	    throw new Error("We don't know what to do with this node type. " + "We were previously a Statement but we can't fit in here?");
	  }
	}

	function updateSiblingKeys(fromIndex, incrementBy) {
	  if (!this.parent) return;

	  const paths = _cache$1.path.get(this.parent);

	  for (const [, path] of paths) {
	    if (path.key >= fromIndex) {
	      path.key += incrementBy;
	    }
	  }
	}

	function _verifyNodeList(nodes) {
	  if (!nodes) {
	    return [];
	  }

	  if (!Array.isArray(nodes)) {
	    nodes = [nodes];
	  }

	  for (let i = 0; i < nodes.length; i++) {
	    const node = nodes[i];
	    let msg;

	    if (!node) {
	      msg = "has falsy node";
	    } else if (typeof node !== "object") {
	      msg = "contains a non-object node";
	    } else if (!node.type) {
	      msg = "without a type";
	    } else if (node instanceof _index$2.default) {
	      msg = "has a NodePath when it expected a raw object";
	    }

	    if (msg) {
	      const type = Array.isArray(node) ? "array" : typeof node;
	      throw new Error(`Node list ${msg} with the index of ${i} and type of ${type}`);
	    }
	  }

	  return nodes;
	}

	function unshiftContainer(listKey, nodes) {
	  this._assertUnremoved();

	  nodes = this._verifyNodeList(nodes);

	  const path = _index$2.default.get({
	    parentPath: this,
	    parent: this.node,
	    container: this.node[listKey],
	    listKey,
	    key: 0
	  }).setContext(this.context);

	  return path._containerInsertBefore(nodes);
	}

	function pushContainer(listKey, nodes) {
	  this._assertUnremoved();

	  const verifiedNodes = this._verifyNodeList(nodes);

	  const container = this.node[listKey];

	  const path = _index$2.default.get({
	    parentPath: this,
	    parent: this.node,
	    container: container,
	    listKey,
	    key: container.length
	  }).setContext(this.context);

	  return path.replaceWithMultiple(verifiedNodes);
	}

	function hoist(scope = this.scope) {
	  const hoister = new _hoister.default(this, scope);
	  return hoister.run();
	}

	var family = {};

	Object.defineProperty(family, "__esModule", {
	  value: true
	});
	family.getOpposite = getOpposite;
	family.getCompletionRecords = getCompletionRecords;
	family.getSibling = getSibling;
	family.getPrevSibling = getPrevSibling;
	family.getNextSibling = getNextSibling;
	family.getAllNextSiblings = getAllNextSiblings;
	family.getAllPrevSiblings = getAllPrevSiblings;
	family.get = get$2;
	family._getKey = _getKey;
	family._getPattern = _getPattern;
	family.getBindingIdentifiers = getBindingIdentifiers;
	family.getOuterBindingIdentifiers = getOuterBindingIdentifiers$1;
	family.getBindingIdentifierPaths = getBindingIdentifierPaths;
	family.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;

	var _index$1 = path$2;

	var _t$g = lib$s;

	const {
	  getBindingIdentifiers: _getBindingIdentifiers,
	  getOuterBindingIdentifiers: _getOuterBindingIdentifiers,
	  isDeclaration,
	  numericLiteral: numericLiteral$5,
	  unaryExpression: unaryExpression$4
	} = _t$g;
	const NORMAL_COMPLETION = 0;
	const BREAK_COMPLETION = 1;

	function NormalCompletion(path) {
	  return {
	    type: NORMAL_COMPLETION,
	    path
	  };
	}

	function BreakCompletion(path) {
	  return {
	    type: BREAK_COMPLETION,
	    path
	  };
	}

	function getOpposite() {
	  if (this.key === "left") {
	    return this.getSibling("right");
	  } else if (this.key === "right") {
	    return this.getSibling("left");
	  }

	  return null;
	}

	function addCompletionRecords(path, records, context) {
	  if (path) {
	    records.push(..._getCompletionRecords(path, context));
	  }

	  return records;
	}

	function completionRecordForSwitch(cases, records, context) {
	  let lastNormalCompletions = [];

	  for (let i = 0; i < cases.length; i++) {
	    const casePath = cases[i];

	    const caseCompletions = _getCompletionRecords(casePath, context);

	    const normalCompletions = [];
	    const breakCompletions = [];

	    for (const c of caseCompletions) {
	      if (c.type === NORMAL_COMPLETION) {
	        normalCompletions.push(c);
	      }

	      if (c.type === BREAK_COMPLETION) {
	        breakCompletions.push(c);
	      }
	    }

	    if (normalCompletions.length) {
	      lastNormalCompletions = normalCompletions;
	    }

	    records.push(...breakCompletions);
	  }

	  records.push(...lastNormalCompletions);
	  return records;
	}

	function normalCompletionToBreak(completions) {
	  completions.forEach(c => {
	    c.type = BREAK_COMPLETION;
	  });
	}

	function replaceBreakStatementInBreakCompletion(completions, reachable) {
	  completions.forEach(c => {
	    if (c.path.isBreakStatement({
	      label: null
	    })) {
	      if (reachable) {
	        c.path.replaceWith(unaryExpression$4("void", numericLiteral$5(0)));
	      } else {
	        c.path.remove();
	      }
	    }
	  });
	}

	function getStatementListCompletion(paths, context) {
	  const completions = [];

	  if (context.canHaveBreak) {
	    let lastNormalCompletions = [];

	    for (let i = 0; i < paths.length; i++) {
	      const path = paths[i];
	      const newContext = Object.assign({}, context, {
	        inCaseClause: false
	      });

	      if (path.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak)) {
	        newContext.shouldPopulateBreak = true;
	      } else {
	        newContext.shouldPopulateBreak = false;
	      }

	      const statementCompletions = _getCompletionRecords(path, newContext);

	      if (statementCompletions.length > 0 && statementCompletions.every(c => c.type === BREAK_COMPLETION)) {
	        if (lastNormalCompletions.length > 0 && statementCompletions.every(c => c.path.isBreakStatement({
	          label: null
	        }))) {
	          normalCompletionToBreak(lastNormalCompletions);
	          completions.push(...lastNormalCompletions);

	          if (lastNormalCompletions.some(c => c.path.isDeclaration())) {
	            completions.push(...statementCompletions);
	            replaceBreakStatementInBreakCompletion(statementCompletions, true);
	          }

	          replaceBreakStatementInBreakCompletion(statementCompletions, false);
	        } else {
	          completions.push(...statementCompletions);

	          if (!context.shouldPopulateBreak) {
	            replaceBreakStatementInBreakCompletion(statementCompletions, true);
	          }
	        }

	        break;
	      }

	      if (i === paths.length - 1) {
	        completions.push(...statementCompletions);
	      } else {
	        lastNormalCompletions = [];

	        for (let i = 0; i < statementCompletions.length; i++) {
	          const c = statementCompletions[i];

	          if (c.type === BREAK_COMPLETION) {
	            completions.push(c);
	          }

	          if (c.type === NORMAL_COMPLETION) {
	            lastNormalCompletions.push(c);
	          }
	        }
	      }
	    }
	  } else if (paths.length) {
	    for (let i = paths.length - 1; i >= 0; i--) {
	      const pathCompletions = _getCompletionRecords(paths[i], context);

	      if (pathCompletions.length > 1 || pathCompletions.length === 1 && !pathCompletions[0].path.isVariableDeclaration()) {
	        completions.push(...pathCompletions);
	        break;
	      }
	    }
	  }

	  return completions;
	}

	function _getCompletionRecords(path, context) {
	  let records = [];

	  if (path.isIfStatement()) {
	    records = addCompletionRecords(path.get("consequent"), records, context);
	    records = addCompletionRecords(path.get("alternate"), records, context);
	  } else if (path.isDoExpression() || path.isFor() || path.isWhile() || path.isLabeledStatement()) {
	    return addCompletionRecords(path.get("body"), records, context);
	  } else if (path.isProgram() || path.isBlockStatement()) {
	    return getStatementListCompletion(path.get("body"), context);
	  } else if (path.isFunction()) {
	    return _getCompletionRecords(path.get("body"), context);
	  } else if (path.isTryStatement()) {
	    records = addCompletionRecords(path.get("block"), records, context);
	    records = addCompletionRecords(path.get("handler"), records, context);
	  } else if (path.isCatchClause()) {
	    return addCompletionRecords(path.get("body"), records, context);
	  } else if (path.isSwitchStatement()) {
	    return completionRecordForSwitch(path.get("cases"), records, context);
	  } else if (path.isSwitchCase()) {
	    return getStatementListCompletion(path.get("consequent"), {
	      canHaveBreak: true,
	      shouldPopulateBreak: false,
	      inCaseClause: true
	    });
	  } else if (path.isBreakStatement()) {
	    records.push(BreakCompletion(path));
	  } else {
	    records.push(NormalCompletion(path));
	  }

	  return records;
	}

	function getCompletionRecords() {
	  const records = _getCompletionRecords(this, {
	    canHaveBreak: false,
	    shouldPopulateBreak: false,
	    inCaseClause: false
	  });

	  return records.map(r => r.path);
	}

	function getSibling(key) {
	  return _index$1.default.get({
	    parentPath: this.parentPath,
	    parent: this.parent,
	    container: this.container,
	    listKey: this.listKey,
	    key: key
	  }).setContext(this.context);
	}

	function getPrevSibling() {
	  return this.getSibling(this.key - 1);
	}

	function getNextSibling() {
	  return this.getSibling(this.key + 1);
	}

	function getAllNextSiblings() {
	  let _key = this.key;
	  let sibling = this.getSibling(++_key);
	  const siblings = [];

	  while (sibling.node) {
	    siblings.push(sibling);
	    sibling = this.getSibling(++_key);
	  }

	  return siblings;
	}

	function getAllPrevSiblings() {
	  let _key = this.key;
	  let sibling = this.getSibling(--_key);
	  const siblings = [];

	  while (sibling.node) {
	    siblings.push(sibling);
	    sibling = this.getSibling(--_key);
	  }

	  return siblings;
	}

	function get$2(key, context = true) {
	  if (context === true) context = this.context;
	  const parts = key.split(".");

	  if (parts.length === 1) {
	    return this._getKey(key, context);
	  } else {
	    return this._getPattern(parts, context);
	  }
	}

	function _getKey(key, context) {
	  const node = this.node;
	  const container = node[key];

	  if (Array.isArray(container)) {
	    return container.map((_, i) => {
	      return _index$1.default.get({
	        listKey: key,
	        parentPath: this,
	        parent: node,
	        container: container,
	        key: i
	      }).setContext(context);
	    });
	  } else {
	    return _index$1.default.get({
	      parentPath: this,
	      parent: node,
	      container: node,
	      key: key
	    }).setContext(context);
	  }
	}

	function _getPattern(parts, context) {
	  let path = this;

	  for (const part of parts) {
	    if (part === ".") {
	      path = path.parentPath;
	    } else {
	      if (Array.isArray(path)) {
	        path = path[part];
	      } else {
	        path = path.get(part, context);
	      }
	    }
	  }

	  return path;
	}

	function getBindingIdentifiers(duplicates) {
	  return _getBindingIdentifiers(this.node, duplicates);
	}

	function getOuterBindingIdentifiers$1(duplicates) {
	  return _getOuterBindingIdentifiers(this.node, duplicates);
	}

	function getBindingIdentifierPaths(duplicates = false, outerOnly = false) {
	  const path = this;
	  const search = [path];
	  const ids = Object.create(null);

	  while (search.length) {
	    const id = search.shift();
	    if (!id) continue;
	    if (!id.node) continue;
	    const keys = _getBindingIdentifiers.keys[id.node.type];

	    if (id.isIdentifier()) {
	      if (duplicates) {
	        const _ids = ids[id.node.name] = ids[id.node.name] || [];

	        _ids.push(id);
	      } else {
	        ids[id.node.name] = id;
	      }

	      continue;
	    }

	    if (id.isExportDeclaration()) {
	      const declaration = id.get("declaration");

	      if (isDeclaration(declaration)) {
	        search.push(declaration);
	      }

	      continue;
	    }

	    if (outerOnly) {
	      if (id.isFunctionDeclaration()) {
	        search.push(id.get("id"));
	        continue;
	      }

	      if (id.isFunctionExpression()) {
	        continue;
	      }
	    }

	    if (keys) {
	      for (let i = 0; i < keys.length; i++) {
	        const key = keys[i];
	        const child = id.get(key);

	        if (Array.isArray(child)) {
	          search.push(...child);
	        } else if (child.node) {
	          search.push(child);
	        }
	      }
	    }
	  }

	  return ids;
	}

	function getOuterBindingIdentifierPaths(duplicates) {
	  return this.getBindingIdentifierPaths(duplicates, true);
	}

	var comments = {};

	Object.defineProperty(comments, "__esModule", {
	  value: true
	});
	comments.shareCommentsWithSiblings = shareCommentsWithSiblings;
	comments.addComment = addComment;
	comments.addComments = addComments;

	var _t$f = lib$s;

	const {
	  addComment: _addComment,
	  addComments: _addComments
	} = _t$f;

	function shareCommentsWithSiblings() {
	  if (typeof this.key === "string") return;
	  const node = this.node;
	  if (!node) return;
	  const trailing = node.trailingComments;
	  const leading = node.leadingComments;
	  if (!trailing && !leading) return;
	  const prev = this.getSibling(this.key - 1);
	  const next = this.getSibling(this.key + 1);
	  const hasPrev = Boolean(prev.node);
	  const hasNext = Boolean(next.node);

	  if (hasPrev && !hasNext) {
	    prev.addComments("trailing", trailing);
	  } else if (hasNext && !hasPrev) {
	    next.addComments("leading", leading);
	  }
	}

	function addComment(type, content, line) {
	  _addComment(this.node, type, content, line);
	}

	function addComments(type, comments) {
	  _addComments(this.node, type, comments);
	}

	Object.defineProperty(path$2, "__esModule", {
	  value: true
	});
	path$2.default = path$2.SHOULD_SKIP = path$2.SHOULD_STOP = path$2.REMOVED = void 0;

	var virtualTypes$1 = virtualTypes$2;

	var _debug$4 = src.exports;

	var _index = lib$t;

	var _scope = scope$1;

	var _t$e = lib$s;

	var t = _t$e;

	var _cache = cache$1;

	var _generator$2 = lib$p;

	var NodePath_ancestry = ancestry;

	var NodePath_inference = inference;

	var NodePath_replacement = replacement;

	var NodePath_evaluation = evaluation;

	var NodePath_conversion = conversion;

	var NodePath_introspection = introspection;

	var NodePath_context = context$1;

	var NodePath_removal = removal;

	var NodePath_modification = modification;

	var NodePath_family = family;

	var NodePath_comments = comments;

	const {
	  validate: validate$1
	} = _t$e;

	const debug$5 = _debug$4("babel");

	const REMOVED = 1 << 0;
	path$2.REMOVED = REMOVED;
	const SHOULD_STOP = 1 << 1;
	path$2.SHOULD_STOP = SHOULD_STOP;
	const SHOULD_SKIP = 1 << 2;
	path$2.SHOULD_SKIP = SHOULD_SKIP;

	class NodePath {
	  constructor(hub, parent) {
	    this.contexts = [];
	    this.state = null;
	    this.opts = null;
	    this._traverseFlags = 0;
	    this.skipKeys = null;
	    this.parentPath = null;
	    this.container = null;
	    this.listKey = null;
	    this.key = null;
	    this.node = null;
	    this.type = null;
	    this.parent = parent;
	    this.hub = hub;
	    this.data = null;
	    this.context = null;
	    this.scope = null;
	  }

	  static get({
	    hub,
	    parentPath,
	    parent,
	    container,
	    listKey,
	    key
	  }) {
	    if (!hub && parentPath) {
	      hub = parentPath.hub;
	    }

	    if (!parent) {
	      throw new Error("To get a node path the parent needs to exist");
	    }

	    const targetNode = container[key];

	    let paths = _cache.path.get(parent);

	    if (!paths) {
	      paths = new Map();

	      _cache.path.set(parent, paths);
	    }

	    let path = paths.get(targetNode);

	    if (!path) {
	      path = new NodePath(hub, parent);
	      if (targetNode) paths.set(targetNode, path);
	    }

	    path.setup(parentPath, container, listKey, key);
	    return path;
	  }

	  getScope(scope) {
	    return this.isScope() ? new _scope.default(this) : scope;
	  }

	  setData(key, val) {
	    if (this.data == null) {
	      this.data = Object.create(null);
	    }

	    return this.data[key] = val;
	  }

	  getData(key, def) {
	    if (this.data == null) {
	      this.data = Object.create(null);
	    }

	    let val = this.data[key];
	    if (val === undefined && def !== undefined) val = this.data[key] = def;
	    return val;
	  }

	  buildCodeFrameError(msg, Error = SyntaxError) {
	    return this.hub.buildError(this.node, msg, Error);
	  }

	  traverse(visitor, state) {
	    (0, _index.default)(this.node, visitor, this.scope, state, this);
	  }

	  set(key, node) {
	    validate$1(this.node, key, node);
	    this.node[key] = node;
	  }

	  getPathLocation() {
	    const parts = [];
	    let path = this;

	    do {
	      let key = path.key;
	      if (path.inList) key = `${path.listKey}[${key}]`;
	      parts.unshift(key);
	    } while (path = path.parentPath);

	    return parts.join(".");
	  }

	  debug(message) {
	    if (!debug$5.enabled) return;
	    debug$5(`${this.getPathLocation()} ${this.type}: ${message}`);
	  }

	  toString() {
	    return (0, _generator$2.default)(this.node).code;
	  }

	  get inList() {
	    return !!this.listKey;
	  }

	  set inList(inList) {
	    if (!inList) {
	      this.listKey = null;
	    }
	  }

	  get parentKey() {
	    return this.listKey || this.key;
	  }

	  get shouldSkip() {
	    return !!(this._traverseFlags & SHOULD_SKIP);
	  }

	  set shouldSkip(v) {
	    if (v) {
	      this._traverseFlags |= SHOULD_SKIP;
	    } else {
	      this._traverseFlags &= ~SHOULD_SKIP;
	    }
	  }

	  get shouldStop() {
	    return !!(this._traverseFlags & SHOULD_STOP);
	  }

	  set shouldStop(v) {
	    if (v) {
	      this._traverseFlags |= SHOULD_STOP;
	    } else {
	      this._traverseFlags &= ~SHOULD_STOP;
	    }
	  }

	  get removed() {
	    return !!(this._traverseFlags & REMOVED);
	  }

	  set removed(v) {
	    if (v) {
	      this._traverseFlags |= REMOVED;
	    } else {
	      this._traverseFlags &= ~REMOVED;
	    }
	  }

	}

	Object.assign(NodePath.prototype, NodePath_ancestry, NodePath_inference, NodePath_replacement, NodePath_evaluation, NodePath_conversion, NodePath_introspection, NodePath_context, NodePath_removal, NodePath_modification, NodePath_family, NodePath_comments);

	for (const type of t.TYPES) {
	  const typeKey = `is${type}`;
	  const fn = t[typeKey];

	  NodePath.prototype[typeKey] = function (opts) {
	    return fn(this.node, opts);
	  };

	  NodePath.prototype[`assert${type}`] = function (opts) {
	    if (!fn(this.node, opts)) {
	      throw new TypeError(`Expected node path of type ${type}`);
	    }
	  };
	}

	for (const type of Object.keys(virtualTypes$1)) {
	  if (type[0] === "_") continue;
	  if (t.TYPES.indexOf(type) < 0) t.TYPES.push(type);
	  const virtualType = virtualTypes$1[type];

	  NodePath.prototype[`is${type}`] = function (opts) {
	    return virtualType.checkPath(this, opts);
	  };
	}

	var _default$8 = NodePath;
	path$2.default = _default$8;

	Object.defineProperty(context$2, "__esModule", {
	  value: true
	});
	context$2.default = void 0;

	var _path$c = path$2;

	var _t$d = lib$s;

	const {
	  VISITOR_KEYS: VISITOR_KEYS$1
	} = _t$d;

	class TraversalContext {
	  constructor(scope, opts, state, parentPath) {
	    this.queue = null;
	    this.priorityQueue = null;
	    this.parentPath = parentPath;
	    this.scope = scope;
	    this.state = state;
	    this.opts = opts;
	  }

	  shouldVisit(node) {
	    const opts = this.opts;
	    if (opts.enter || opts.exit) return true;
	    if (opts[node.type]) return true;
	    const keys = VISITOR_KEYS$1[node.type];
	    if (!(keys != null && keys.length)) return false;

	    for (const key of keys) {
	      if (node[key]) return true;
	    }

	    return false;
	  }

	  create(node, obj, key, listKey) {
	    return _path$c.default.get({
	      parentPath: this.parentPath,
	      parent: node,
	      container: obj,
	      key: key,
	      listKey
	    });
	  }

	  maybeQueue(path, notPriority) {
	    if (this.queue) {
	      if (notPriority) {
	        this.queue.push(path);
	      } else {
	        this.priorityQueue.push(path);
	      }
	    }
	  }

	  visitMultiple(container, parent, listKey) {
	    if (container.length === 0) return false;
	    const queue = [];

	    for (let key = 0; key < container.length; key++) {
	      const node = container[key];

	      if (node && this.shouldVisit(node)) {
	        queue.push(this.create(parent, container, key, listKey));
	      }
	    }

	    return this.visitQueue(queue);
	  }

	  visitSingle(node, key) {
	    if (this.shouldVisit(node[key])) {
	      return this.visitQueue([this.create(node, node, key)]);
	    } else {
	      return false;
	    }
	  }

	  visitQueue(queue) {
	    this.queue = queue;
	    this.priorityQueue = [];
	    const visited = new WeakSet();
	    let stop = false;

	    for (const path of queue) {
	      path.resync();

	      if (path.contexts.length === 0 || path.contexts[path.contexts.length - 1] !== this) {
	        path.pushContext(this);
	      }

	      if (path.key === null) continue;
	      const {
	        node
	      } = path;
	      if (visited.has(node)) continue;
	      if (node) visited.add(node);

	      if (path.visit()) {
	        stop = true;
	        break;
	      }

	      if (this.priorityQueue.length) {
	        stop = this.visitQueue(this.priorityQueue);
	        this.priorityQueue = [];
	        this.queue = queue;
	        if (stop) break;
	      }
	    }

	    for (const path of queue) {
	      path.popContext();
	    }

	    this.queue = null;
	    return stop;
	  }

	  visit(node, key) {
	    const nodes = node[key];
	    if (!nodes) return false;

	    if (Array.isArray(nodes)) {
	      return this.visitMultiple(nodes, node, key);
	    } else {
	      return this.visitSingle(node, key);
	    }
	  }

	}

	context$2.default = TraversalContext;

	var visitors = {};

	Object.defineProperty(visitors, "__esModule", {
	  value: true
	});
	visitors.explode = explode;
	visitors.verify = verify;
	visitors.merge = merge;

	var virtualTypes = virtualTypes$2;

	var _t$c = lib$s;

	const {
	  DEPRECATED_KEYS,
	  FLIPPED_ALIAS_KEYS,
	  TYPES
	} = _t$c;

	function explode(visitor) {
	  if (visitor._exploded) return visitor;
	  visitor._exploded = true;

	  for (const nodeType of Object.keys(visitor)) {
	    if (shouldIgnoreKey(nodeType)) continue;
	    const parts = nodeType.split("|");
	    if (parts.length === 1) continue;
	    const fns = visitor[nodeType];
	    delete visitor[nodeType];

	    for (const part of parts) {
	      visitor[part] = fns;
	    }
	  }

	  verify(visitor);
	  delete visitor.__esModule;
	  ensureEntranceObjects(visitor);
	  ensureCallbackArrays(visitor);

	  for (const nodeType of Object.keys(visitor)) {
	    if (shouldIgnoreKey(nodeType)) continue;
	    const wrapper = virtualTypes[nodeType];
	    if (!wrapper) continue;
	    const fns = visitor[nodeType];

	    for (const type of Object.keys(fns)) {
	      fns[type] = wrapCheck(wrapper, fns[type]);
	    }

	    delete visitor[nodeType];

	    if (wrapper.types) {
	      for (const type of wrapper.types) {
	        if (visitor[type]) {
	          mergePair(visitor[type], fns);
	        } else {
	          visitor[type] = fns;
	        }
	      }
	    } else {
	      mergePair(visitor, fns);
	    }
	  }

	  for (const nodeType of Object.keys(visitor)) {
	    if (shouldIgnoreKey(nodeType)) continue;
	    const fns = visitor[nodeType];
	    let aliases = FLIPPED_ALIAS_KEYS[nodeType];
	    const deprecatedKey = DEPRECATED_KEYS[nodeType];

	    if (deprecatedKey) {
	      console.trace(`Visitor defined for ${nodeType} but it has been renamed to ${deprecatedKey}`);
	      aliases = [deprecatedKey];
	    }

	    if (!aliases) continue;
	    delete visitor[nodeType];

	    for (const alias of aliases) {
	      const existing = visitor[alias];

	      if (existing) {
	        mergePair(existing, fns);
	      } else {
	        visitor[alias] = Object.assign({}, fns);
	      }
	    }
	  }

	  for (const nodeType of Object.keys(visitor)) {
	    if (shouldIgnoreKey(nodeType)) continue;
	    ensureCallbackArrays(visitor[nodeType]);
	  }

	  return visitor;
	}

	function verify(visitor) {
	  if (visitor._verified) return;

	  if (typeof visitor === "function") {
	    throw new Error("You passed `traverse()` a function when it expected a visitor object, " + "are you sure you didn't mean `{ enter: Function }`?");
	  }

	  for (const nodeType of Object.keys(visitor)) {
	    if (nodeType === "enter" || nodeType === "exit") {
	      validateVisitorMethods(nodeType, visitor[nodeType]);
	    }

	    if (shouldIgnoreKey(nodeType)) continue;

	    if (TYPES.indexOf(nodeType) < 0) {
	      throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type`);
	    }

	    const visitors = visitor[nodeType];

	    if (typeof visitors === "object") {
	      for (const visitorKey of Object.keys(visitors)) {
	        if (visitorKey === "enter" || visitorKey === "exit") {
	          validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors[visitorKey]);
	        } else {
	          throw new Error("You passed `traverse()` a visitor object with the property " + `${nodeType} that has the invalid property ${visitorKey}`);
	        }
	      }
	    }
	  }

	  visitor._verified = true;
	}

	function validateVisitorMethods(path, val) {
	  const fns = [].concat(val);

	  for (const fn of fns) {
	    if (typeof fn !== "function") {
	      throw new TypeError(`Non-function found defined in ${path} with type ${typeof fn}`);
	    }
	  }
	}

	function merge(visitors, states = [], wrapper) {
	  const rootVisitor = {};

	  for (let i = 0; i < visitors.length; i++) {
	    const visitor = visitors[i];
	    const state = states[i];
	    explode(visitor);

	    for (const type of Object.keys(visitor)) {
	      let visitorType = visitor[type];

	      if (state || wrapper) {
	        visitorType = wrapWithStateOrWrapper(visitorType, state, wrapper);
	      }

	      const nodeVisitor = rootVisitor[type] = rootVisitor[type] || {};
	      mergePair(nodeVisitor, visitorType);
	    }
	  }

	  return rootVisitor;
	}

	function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
	  const newVisitor = {};

	  for (const key of Object.keys(oldVisitor)) {
	    let fns = oldVisitor[key];
	    if (!Array.isArray(fns)) continue;
	    fns = fns.map(function (fn) {
	      let newFn = fn;

	      if (state) {
	        newFn = function (path) {
	          return fn.call(state, path, state);
	        };
	      }

	      if (wrapper) {
	        newFn = wrapper(state.key, key, newFn);
	      }

	      if (newFn !== fn) {
	        newFn.toString = () => fn.toString();
	      }

	      return newFn;
	    });
	    newVisitor[key] = fns;
	  }

	  return newVisitor;
	}

	function ensureEntranceObjects(obj) {
	  for (const key of Object.keys(obj)) {
	    if (shouldIgnoreKey(key)) continue;
	    const fns = obj[key];

	    if (typeof fns === "function") {
	      obj[key] = {
	        enter: fns
	      };
	    }
	  }
	}

	function ensureCallbackArrays(obj) {
	  if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];
	  if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];
	}

	function wrapCheck(wrapper, fn) {
	  const newFn = function (path) {
	    if (wrapper.checkPath(path)) {
	      return fn.apply(this, arguments);
	    }
	  };

	  newFn.toString = () => fn.toString();

	  return newFn;
	}

	function shouldIgnoreKey(key) {
	  if (key[0] === "_") return true;
	  if (key === "enter" || key === "exit" || key === "shouldSkip") return true;

	  if (key === "denylist" || key === "noScope" || key === "skipKeys" || key === "blacklist") {
	    return true;
	  }

	  return false;
	}

	function mergePair(dest, src) {
	  for (const key of Object.keys(src)) {
	    dest[key] = [].concat(dest[key] || [], src[key]);
	  }
	}

	var hub = {};

	Object.defineProperty(hub, "__esModule", {
	  value: true
	});
	hub.default = void 0;

	class Hub {
	  getCode() {}

	  getScope() {}

	  addHelper() {
	    throw new Error("Helpers are not supported by the default hub.");
	  }

	  buildError(node, msg, Error = TypeError) {
	    return new Error(msg);
	  }

	}

	hub.default = Hub;

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "NodePath", {
	  enumerable: true,
	  get: function () {
	    return _path.default;
	  }
	});
	Object.defineProperty(exports, "Scope", {
	  enumerable: true,
	  get: function () {
	    return _scope.default;
	  }
	});
	Object.defineProperty(exports, "Hub", {
	  enumerable: true,
	  get: function () {
	    return _hub.default;
	  }
	});
	exports.visitors = exports.default = void 0;

	var _context = context$2;

	var visitors$1 = visitors;

	exports.visitors = visitors$1;

	var _t = lib$s;

	var cache = cache$1;

	var _path = path$2;

	var _scope = scope$1;

	var _hub = hub;

	const {
	  VISITOR_KEYS,
	  removeProperties,
	  traverseFast
	} = _t;

	function traverse(parent, opts = {}, scope, state, parentPath) {
	  if (!parent) return;

	  if (!opts.noScope && !scope) {
	    if (parent.type !== "Program" && parent.type !== "File") {
	      throw new Error("You must pass a scope and parentPath unless traversing a Program/File. " + `Instead of that you tried to traverse a ${parent.type} node without ` + "passing scope and parentPath.");
	    }
	  }

	  if (!VISITOR_KEYS[parent.type]) {
	    return;
	  }

	  visitors$1.explode(opts);
	  traverse.node(parent, opts, scope, state, parentPath);
	}

	var _default = traverse;
	exports.default = _default;
	traverse.visitors = visitors$1;
	traverse.verify = visitors$1.verify;
	traverse.explode = visitors$1.explode;

	traverse.cheap = function (node, enter) {
	  return traverseFast(node, enter);
	};

	traverse.node = function (node, opts, scope, state, parentPath, skipKeys) {
	  const keys = VISITOR_KEYS[node.type];
	  if (!keys) return;
	  const context = new _context.default(scope, opts, state, parentPath);

	  for (const key of keys) {
	    if (skipKeys && skipKeys[key]) continue;
	    if (context.visit(node, key)) return;
	  }
	};

	traverse.clearNode = function (node, opts) {
	  removeProperties(node, opts);
	  cache.path.delete(node);
	};

	traverse.removeProperties = function (tree, opts) {
	  traverseFast(tree, traverse.clearNode, opts);
	  return tree;
	};

	function hasDenylistedType(path, state) {
	  if (path.node.type === state.type) {
	    state.has = true;
	    path.stop();
	  }
	}

	traverse.hasType = function (tree, type, denylistTypes) {
	  if (denylistTypes != null && denylistTypes.includes(tree.type)) return false;
	  if (tree.type === type) return true;
	  const state = {
	    has: false,
	    type: type
	  };
	  traverse(tree, {
	    noScope: true,
	    denylist: denylistTypes,
	    enter: hasDenylistedType
	  }, null, state);
	  return state.has;
	};

	traverse.cache = cache;
	}(lib$t));

	var helpers$4 = {};

	var helpersGenerated = {};

	Object.defineProperty(helpersGenerated, "__esModule", {
	  value: true
	});
	helpersGenerated.wrapRegExp = helpersGenerated.typeof = helpersGenerated.objectSpread2 = helpersGenerated.jsx = void 0;

	var _template$3 = lib$j;

	const jsx = {
	  minVersion: "7.0.0-beta.0",
	  ast: () => _template$3.default.program.ast('\nvar REACT_ELEMENT_TYPE;\nexport default function _createRawReactElement(type, props, key, children) {\n  if (!REACT_ELEMENT_TYPE) {\n    REACT_ELEMENT_TYPE =\n      (typeof Symbol === "function" &&\n        \n        Symbol["for"] &&\n        Symbol["for"]("react.element")) ||\n      0xeac7;\n  }\n  var defaultProps = type && type.defaultProps;\n  var childrenLength = arguments.length - 3;\n  if (!props && childrenLength !== 0) {\n    \n    \n    props = { children: void 0 };\n  }\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = new Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 3];\n    }\n    props.children = childArray;\n  }\n  if (props && defaultProps) {\n    for (var propName in defaultProps) {\n      if (props[propName] === void 0) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  } else if (!props) {\n    props = defaultProps || {};\n  }\n  return {\n    $$typeof: REACT_ELEMENT_TYPE,\n    type: type,\n    key: key === undefined ? null : "" + key,\n    ref: null,\n    props: props,\n    _owner: null,\n  };\n}\n')
	};
	helpersGenerated.jsx = jsx;
	const objectSpread2 = {
	  minVersion: "7.5.0",
	  ast: () => _template$3.default.program.ast('\nimport defineProperty from "defineProperty";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(\n          target,\n          key,\n          Object.getOwnPropertyDescriptor(source, key)\n        );\n      });\n    }\n  }\n  return target;\n}\n')
	};
	helpersGenerated.objectSpread2 = objectSpread2;
	const _typeof = {
	  minVersion: "7.0.0-beta.0",
	  ast: () => _template$3.default.program.ast('\nexport default function _typeof(obj) {\n  "@babel/helpers - typeof";\n  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj &&\n        typeof Symbol === "function" &&\n        obj.constructor === Symbol &&\n        obj !== Symbol.prototype\n        ? "symbol"\n        : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\n')
	};
	helpersGenerated.typeof = _typeof;
	const wrapRegExp = {
	  minVersion: "7.2.6",
	  ast: () => _template$3.default.program.ast('\nimport setPrototypeOf from "setPrototypeOf";\nimport inherits from "inherits";\nexport default function _wrapRegExp() {\n  _wrapRegExp = function (re, groups) {\n    return new BabelRegExp(re, undefined, groups);\n  };\n  var _super = RegExp.prototype;\n  var _groups = new WeakMap();\n  function BabelRegExp(re, flags, groups) {\n    var _this = new RegExp(re, flags);\n    \n    _groups.set(_this, groups || _groups.get(re));\n    return setPrototypeOf(_this, BabelRegExp.prototype);\n  }\n  inherits(BabelRegExp, RegExp);\n  BabelRegExp.prototype.exec = function (str) {\n    var result = _super.exec.call(this, str);\n    if (result) result.groups = buildGroups(result, this);\n    return result;\n  };\n  BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {\n    if (typeof substitution === "string") {\n      var groups = _groups.get(this);\n      return _super[Symbol.replace].call(\n        this,\n        str,\n        substitution.replace(/\\$<([^>]+)>/g, function (_, name) {\n          return "$" + groups[name];\n        })\n      );\n    } else if (typeof substitution === "function") {\n      var _this = this;\n      return _super[Symbol.replace].call(this, str, function () {\n        var args = arguments;\n        \n        if (typeof args[args.length - 1] !== "object") {\n          args = [].slice.call(args);\n          args.push(buildGroups(args, _this));\n        }\n        return substitution.apply(this, args);\n      });\n    } else {\n      return _super[Symbol.replace].call(this, str, substitution);\n    }\n  };\n  function buildGroups(result, re) {\n    \n    \n    var g = _groups.get(re);\n    return Object.keys(g).reduce(function (groups, name) {\n      groups[name] = result[g[name]];\n      return groups;\n    }, Object.create(null));\n  }\n  return _wrapRegExp.apply(this, arguments);\n}\n')
	};
	helpersGenerated.wrapRegExp = wrapRegExp;

	Object.defineProperty(helpers$4, "__esModule", {
	  value: true
	});
	helpers$4.default = void 0;

	var _template$2 = lib$j;

	var generated = helpersGenerated;

	const helpers$3 = Object.assign({
	  __proto__: null
	}, generated);
	var _default$7 = helpers$3;
	helpers$4.default = _default$7;

	const helper = minVersion => tpl => ({
	  minVersion,
	  ast: () => _template$2.default.program.ast(tpl)
	});

	helpers$3.asyncIterator = helper("7.0.0-beta.0")`
  export default function _asyncIterator(iterable) {
    var method;
    if (typeof Symbol !== "undefined") {
      if (Symbol.asyncIterator) method = iterable[Symbol.asyncIterator];
      if (method == null && Symbol.iterator) method = iterable[Symbol.iterator];
    }
    if (method == null) method = iterable["@@asyncIterator"];
    if (method == null) method = iterable["@@iterator"]
    if (method == null) throw new TypeError("Object is not async iterable");
    return method.call(iterable);
  }
`;
	helpers$3.AwaitValue = helper("7.0.0-beta.0")`
  export default function _AwaitValue(value) {
    this.wrapped = value;
  }
`;
	helpers$3.AsyncGenerator = helper("7.0.0-beta.0")`
  import AwaitValue from "AwaitValue";

  export default function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null,
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg)
        var value = result.value;
        var wrappedAwait = value instanceof AwaitValue;

        Promise.resolve(wrappedAwait ? value.wrapped : value).then(
          function (arg) {
            if (wrappedAwait) {
              resume(key === "return" ? "return" : "next", arg);
              return
            }

            settle(result.done ? "return" : "normal", arg);
          },
          function (err) { resume("throw", err); });
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({ value: value, done: true });
          break;
        case "throw":
          front.reject(value);
          break;
        default:
          front.resolve({ value: value, done: false });
          break;
      }

      front = front.next;
      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    // Hide "return" method if generator return is not supported
    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  AsyncGenerator.prototype[typeof Symbol === "function" && Symbol.asyncIterator || "@@asyncIterator"] = function () { return this; };

  AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };
  AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };
  AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };
`;
	helpers$3.wrapAsyncGenerator = helper("7.0.0-beta.0")`
  import AsyncGenerator from "AsyncGenerator";

  export default function _wrapAsyncGenerator(fn) {
    return function () {
      return new AsyncGenerator(fn.apply(this, arguments));
    };
  }
`;
	helpers$3.awaitAsyncGenerator = helper("7.0.0-beta.0")`
  import AwaitValue from "AwaitValue";

  export default function _awaitAsyncGenerator(value) {
    return new AwaitValue(value);
  }
`;
	helpers$3.asyncGeneratorDelegate = helper("7.0.0-beta.0")`
  export default function _asyncGeneratorDelegate(inner, awaitWrap) {
    var iter = {}, waiting = false;

    function pump(key, value) {
      waiting = true;
      value = new Promise(function (resolve) { resolve(inner[key](value)); });
      return { done: false, value: awaitWrap(value) };
    };

    iter[typeof Symbol !== "undefined" && Symbol.iterator || "@@iterator"] = function () { return this; };

    iter.next = function (value) {
      if (waiting) {
        waiting = false;
        return value;
      }
      return pump("next", value);
    };

    if (typeof inner.throw === "function") {
      iter.throw = function (value) {
        if (waiting) {
          waiting = false;
          throw value;
        }
        return pump("throw", value);
      };
    }

    if (typeof inner.return === "function") {
      iter.return = function (value) {
        if (waiting) {
          waiting = false;
          return value;
        }
        return pump("return", value);
      };
    }

    return iter;
  }
`;
	helpers$3.asyncToGenerator = helper("7.0.0-beta.0")`
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  export default function _asyncToGenerator(fn) {
    return function () {
      var self = this, args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }
`;
	helpers$3.classCallCheck = helper("7.0.0-beta.0")`
  export default function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
`;
	helpers$3.createClass = helper("7.0.0-beta.0")`
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i ++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  export default function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }
`;
	helpers$3.defineEnumerableProperties = helper("7.0.0-beta.0")`
  export default function _defineEnumerableProperties(obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ("value" in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    // Symbols are not enumerated over by for-in loops. If native
    // Symbols are available, fetch all of the descs object's own
    // symbol properties and define them on our target object too.
    if (Object.getOwnPropertySymbols) {
      var objectSymbols = Object.getOwnPropertySymbols(descs);
      for (var i = 0; i < objectSymbols.length; i++) {
        var sym = objectSymbols[i];
        var desc = descs[sym];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc) desc.writable = true;
        Object.defineProperty(obj, sym, desc);
      }
    }
    return obj;
  }
`;
	helpers$3.defaults = helper("7.0.0-beta.0")`
  export default function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = Object.getOwnPropertyDescriptor(defaults, key);
      if (value && value.configurable && obj[key] === undefined) {
        Object.defineProperty(obj, key, value);
      }
    }
    return obj;
  }
`;
	helpers$3.defineProperty = helper("7.0.0-beta.0")`
  export default function _defineProperty(obj, key, value) {
    // Shortcircuit the slow defineProperty path when possible.
    // We are trying to avoid issues where setters defined on the
    // prototype cause side effects under the fast path of simple
    // assignment. By checking for existence of the property with
    // the in operator, we can optimize most of this overhead away.
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
`;
	helpers$3.extends = helper("7.0.0-beta.0")`
  export default function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };

    return _extends.apply(this, arguments);
  }
`;
	helpers$3.objectSpread = helper("7.0.0-beta.0")`
  import defineProperty from "defineProperty";

  export default function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = (arguments[i] != null) ? Object(arguments[i]) : {};
      var ownKeys = Object.keys(source);
      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function(sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }
      ownKeys.forEach(function(key) {
        defineProperty(target, key, source[key]);
      });
    }
    return target;
  }
`;
	helpers$3.inherits = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  export default function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) setPrototypeOf(subClass, superClass);
  }
`;
	helpers$3.inheritsLoose = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  export default function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    setPrototypeOf(subClass, superClass);
  }
`;
	helpers$3.getPrototypeOf = helper("7.0.0-beta.0")`
  export default function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
    return _getPrototypeOf(o);
  }
`;
	helpers$3.setPrototypeOf = helper("7.0.0-beta.0")`
  export default function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }
`;
	helpers$3.isNativeReflectConstruct = helper("7.9.0")`
  export default function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;

    // core-js@3
    if (Reflect.construct.sham) return false;

    // Proxy can't be polyfilled. Every browser implemented
    // proxies before or at the same time as Reflect.construct,
    // so if they support Proxy they also support Reflect.construct.
    if (typeof Proxy === "function") return true;

    // Since Reflect.construct can't be properly polyfilled, some
    // implementations (e.g. core-js@2) don't set the correct internal slots.
    // Those polyfills don't allow us to subclass built-ins, so we need to
    // use our fallback implementation.
    try {
      // If the internal slots aren't set, this throws an error similar to
      //   TypeError: this is not a Boolean object.

      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
      return true;
    } catch (e) {
      return false;
    }
  }
`;
	helpers$3.construct = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";
  import isNativeReflectConstruct from "isNativeReflectConstruct";

  export default function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      // NOTE: If Parent !== Class, the correct __proto__ is set *after*
      //       calling the constructor.
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }
    // Avoid issues with Class being present but undefined when it wasn't
    // present in the original call.
    return _construct.apply(null, arguments);
  }
`;
	helpers$3.isNativeFunction = helper("7.0.0-beta.0")`
  export default function _isNativeFunction(fn) {
    // Note: This function returns "true" for core-js functions.
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }
`;
	helpers$3.wrapNativeSuper = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";
  import setPrototypeOf from "setPrototypeOf";
  import isNativeFunction from "isNativeFunction";
  import construct from "construct";

  export default function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !isNativeFunction(Class)) return Class;
      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);
        _cache.set(Class, Wrapper);
      }
      function Wrapper() {
        return construct(Class, arguments, getPrototypeOf(this).constructor)
      }
      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true,
        }
      });

      return setPrototypeOf(Wrapper, Class);
    }

    return _wrapNativeSuper(Class)
  }
`;
	helpers$3.instanceof = helper("7.0.0-beta.0")`
  export default function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
      return !!right[Symbol.hasInstance](left);
    } else {
      return left instanceof right;
    }
  }
`;
	helpers$3.interopRequireDefault = helper("7.0.0-beta.0")`
  export default function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
`;
	helpers$3.interopRequireWildcard = helper("7.14.0")`
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;

    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function (nodeInterop) {
      return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }

  export default function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }

    if (obj === null || (typeof obj !== "object" && typeof obj !== "function")) {
      return { default: obj }
    }

    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }

    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor
          ? Object.getOwnPropertyDescriptor(obj, key)
          : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
`;
	helpers$3.newArrowCheck = helper("7.0.0-beta.0")`
  export default function _newArrowCheck(innerThis, boundThis) {
    if (innerThis !== boundThis) {
      throw new TypeError("Cannot instantiate an arrow function");
    }
  }
`;
	helpers$3.objectDestructuringEmpty = helper("7.0.0-beta.0")`
  export default function _objectDestructuringEmpty(obj) {
    if (obj == null) throw new TypeError("Cannot destructure undefined");
  }
`;
	helpers$3.objectWithoutPropertiesLoose = helper("7.0.0-beta.0")`
  export default function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};

    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }
`;
	helpers$3.objectWithoutProperties = helper("7.0.0-beta.0")`
  import objectWithoutPropertiesLoose from "objectWithoutPropertiesLoose";

  export default function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }
`;
	helpers$3.assertThisInitialized = helper("7.0.0-beta.0")`
  export default function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
`;
	helpers$3.possibleConstructorReturn = helper("7.0.0-beta.0")`
  import assertThisInitialized from "assertThisInitialized";

  export default function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return assertThisInitialized(self);
  }
`;
	helpers$3.createSuper = helper("7.9.0")`
  import getPrototypeOf from "getPrototypeOf";
  import isNativeReflectConstruct from "isNativeReflectConstruct";
  import possibleConstructorReturn from "possibleConstructorReturn";

  export default function _createSuper(Derived) {
    var hasNativeReflectConstruct = isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        // NOTE: This doesn't work if this.__proto__.constructor has been modified.
        var NewTarget = getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return possibleConstructorReturn(this, result);
    }
  }
 `;
	helpers$3.superPropBase = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";

  export default function _superPropBase(object, property) {
    // Yes, this throws if object is null to being with, that's on purpose.
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = getPrototypeOf(object);
      if (object === null) break;
    }
    return object;
  }
`;
	helpers$3.get = helper("7.0.0-beta.0")`
  import superPropBase from "superPropBase";

  export default function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = superPropBase(target, property);

        if (!base) return;

        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }
    return _get(target, property, receiver || target);
  }
`;
	helpers$3.set = helper("7.0.0-beta.0")`
  import superPropBase from "superPropBase";
  import defineProperty from "defineProperty";

  function set(target, property, value, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.set) {
      set = Reflect.set;
    } else {
      set = function set(target, property, value, receiver) {
        var base = superPropBase(target, property);
        var desc;

        if (base) {
          desc = Object.getOwnPropertyDescriptor(base, property);
          if (desc.set) {
            desc.set.call(receiver, value);
            return true;
          } else if (!desc.writable) {
            // Both getter and non-writable fall into this.
            return false;
          }
        }

        // Without a super that defines the property, spec boils down to
        // "define on receiver" for some reason.
        desc = Object.getOwnPropertyDescriptor(receiver, property);
        if (desc) {
          if (!desc.writable) {
            // Setter, getter, and non-writable fall into this.
            return false;
          }

          desc.value = value;
          Object.defineProperty(receiver, property, desc);
        } else {
          // Avoid setters that may be defined on Sub's prototype, but not on
          // the instance.
          defineProperty(receiver, property, value);
        }

        return true;
      };
    }

    return set(target, property, value, receiver);
  }

  export default function _set(target, property, value, receiver, isStrict) {
    var s = set(target, property, value, receiver || target);
    if (!s && isStrict) {
      throw new Error('failed to set property');
    }

    return value;
  }
`;
	helpers$3.taggedTemplateLiteral = helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteral(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    return Object.freeze(Object.defineProperties(strings, {
        raw: { value: Object.freeze(raw) }
    }));
  }
`;
	helpers$3.taggedTemplateLiteralLoose = helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    strings.raw = raw;
    return strings;
  }
`;
	helpers$3.readOnlyError = helper("7.0.0-beta.0")`
  export default function _readOnlyError(name) {
    throw new TypeError("\\"" + name + "\\" is read-only");
  }
`;
	helpers$3.writeOnlyError = helper("7.12.13")`
  export default function _writeOnlyError(name) {
    throw new TypeError("\\"" + name + "\\" is write-only");
  }
`;
	helpers$3.classNameTDZError = helper("7.0.0-beta.0")`
  export default function _classNameTDZError(name) {
    throw new Error("Class \\"" + name + "\\" cannot be referenced in computed property keys.");
  }
`;
	helpers$3.temporalUndefined = helper("7.0.0-beta.0")`
  // This function isn't mean to be called, but to be used as a reference.
  // We can't use a normal object because it isn't hoisted.
  export default function _temporalUndefined() {}
`;
	helpers$3.tdz = helper("7.5.5")`
  export default function _tdzError(name) {
    throw new ReferenceError(name + " is not defined - temporal dead zone");
  }
`;
	helpers$3.temporalRef = helper("7.0.0-beta.0")`
  import undef from "temporalUndefined";
  import err from "tdz";

  export default function _temporalRef(val, name) {
    return val === undef ? err(name) : val;
  }
`;
	helpers$3.slicedToArray = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimit from "iterableToArrayLimit";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArray(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimit(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
`;
	helpers$3.slicedToArrayLoose = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimitLoose from "iterableToArrayLimitLoose";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArrayLoose(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimitLoose(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
`;
	helpers$3.toArray = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArray from "iterableToArray";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _toArray(arr) {
    return (
      arrayWithHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableRest()
    );
  }
`;
	helpers$3.toConsumableArray = helper("7.0.0-beta.0")`
  import arrayWithoutHoles from "arrayWithoutHoles";
  import iterableToArray from "iterableToArray";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableSpread from "nonIterableSpread";

  export default function _toConsumableArray(arr) {
    return (
      arrayWithoutHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableSpread()
    );
  }
`;
	helpers$3.arrayWithoutHoles = helper("7.0.0-beta.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return arrayLikeToArray(arr);
  }
`;
	helpers$3.arrayWithHoles = helper("7.0.0-beta.0")`
  export default function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
`;
	helpers$3.maybeArrayLike = helper("7.9.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _maybeArrayLike(next, arr, i) {
    if (arr && !Array.isArray(arr) && typeof arr.length === "number") {
      var len = arr.length;
      return arrayLikeToArray(arr, i !== void 0 && i < len ? i : len);
    }
    return next(arr, i);
  }
`;
	helpers$3.iterableToArray = helper("7.0.0-beta.0")`
  export default function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
`;
	helpers$3.iterableToArrayLimit = helper("7.0.0-beta.0")`
  export default function _iterableToArrayLimit(arr, i) {
    // this is an expanded form of \`for...of\` that properly supports abrupt completions of
    // iterators etc. variable names have been minimised to reduce the size of this massive
    // helper. sometimes spec compliance is annoying :(
    //
    // _n = _iteratorNormalCompletion
    // _d = _didIteratorError
    // _e = _iteratorError
    // _i = _iterator
    // _s = _step

    var _i = arr == null ? null : (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);
    if (_i == null) return;

    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
`;
	helpers$3.iterableToArrayLimitLoose = helper("7.0.0-beta.0")`
  export default function _iterableToArrayLimitLoose(arr, i) {
    var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);
    if (_i == null) return;

    var _arr = [];
    for (_i = _i.call(arr), _step; !(_step = _i.next()).done;) {
      _arr.push(_step.value);
      if (i && _arr.length === i) break;
    }
    return _arr;
  }
`;
	helpers$3.unsupportedIterableToArray = helper("7.9.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return arrayLikeToArray(o, minLen);
  }
`;
	helpers$3.arrayLikeToArray = helper("7.9.0")`
  export default function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
`;
	helpers$3.nonIterableSpread = helper("7.0.0-beta.0")`
  export default function _nonIterableSpread() {
    throw new TypeError(
      "Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
`;
	helpers$3.nonIterableRest = helper("7.0.0-beta.0")`
  export default function _nonIterableRest() {
    throw new TypeError(
      "Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
`;
	helpers$3.createForOfIteratorHelper = helper("7.9.0")`
  import unsupportedIterableToArray from "unsupportedIterableToArray";

  // s: start (create the iterator)
  // n: next
  // e: error (called whenever something throws)
  // f: finish (always called at the end)

  export default function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      // Fallback for engines without symbol support
      if (
        Array.isArray(o) ||
        (it = unsupportedIterableToArray(o)) ||
        (allowArrayLike && o && typeof o.length === "number")
      ) {
        if (it) o = it;
        var i = 0;
        var F = function(){};
        return {
          s: F,
          n: function() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          },
          e: function(e) { throw e; },
          f: F,
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true, didErr = false, err;

    return {
      s: function() {
        it = it.call(o);
      },
      n: function() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function(e) {
        didErr = true;
        err = e;
      },
      f: function() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }
`;
	helpers$3.createForOfIteratorHelperLoose = helper("7.9.0")`
  import unsupportedIterableToArray from "unsupportedIterableToArray";

  export default function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (it) return (it = it.call(o)).next.bind(it);

    // Fallback for engines without symbol support
    if (
      Array.isArray(o) ||
      (it = unsupportedIterableToArray(o)) ||
      (allowArrayLike && o && typeof o.length === "number")
    ) {
      if (it) o = it;
      var i = 0;
      return function() {
        if (i >= o.length) return { done: true };
        return { done: false, value: o[i++] };
      }
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
`;
	helpers$3.skipFirstGeneratorNext = helper("7.0.0-beta.0")`
  export default function _skipFirstGeneratorNext(fn) {
    return function () {
      var it = fn.apply(this, arguments);
      it.next();
      return it;
    }
  }
`;
	helpers$3.toPrimitive = helper("7.1.5")`
  export default function _toPrimitive(
    input,
    hint /*: "default" | "string" | "number" | void */
  ) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
`;
	helpers$3.toPropertyKey = helper("7.1.5")`
  import toPrimitive from "toPrimitive";

  export default function _toPropertyKey(arg) {
    var key = toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
`;
	helpers$3.initializerWarningHelper = helper("7.0.0-beta.0")`
    export default function _initializerWarningHelper(descriptor, context){
        throw new Error(
          'Decorating class property failed. Please ensure that ' +
          'proposal-class-properties is enabled and runs after the decorators transform.'
        );
    }
`;
	helpers$3.initializerDefineProperty = helper("7.0.0-beta.0")`
    export default function _initializerDefineProperty(target, property, descriptor, context){
        if (!descriptor) return;

        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0,
        });
    }
`;
	helpers$3.applyDecoratedDescriptor = helper("7.0.0-beta.0")`
    export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context){
        var desc = {};
        Object.keys(descriptor).forEach(function(key){
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;
        if ('value' in desc || desc.initializer){
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function(desc, decorator){
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0){
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0){
            Object.defineProperty(target, property, desc);
            desc = null;
        }

        return desc;
    }
`;
	helpers$3.classPrivateFieldLooseKey = helper("7.0.0-beta.0")`
  var id = 0;
  export default function _classPrivateFieldKey(name) {
    return "__private_" + (id++) + "_" + name;
  }
`;
	helpers$3.classPrivateFieldLooseBase = helper("7.0.0-beta.0")`
  export default function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
  }
`;
	helpers$3.classPrivateFieldGet = helper("7.0.0-beta.0")`
  import classApplyDescriptorGet from "classApplyDescriptorGet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "get");
    return classApplyDescriptorGet(receiver, descriptor);
  }
`;
	helpers$3.classPrivateFieldSet = helper("7.0.0-beta.0")`
  import classApplyDescriptorSet from "classApplyDescriptorSet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
`;
	helpers$3.classPrivateFieldDestructureSet = helper("7.4.4")`
  import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldDestructureSet(receiver, privateMap) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
`;
	helpers$3.classExtractFieldDescriptor = helper("7.13.10")`
  export default function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
  }
`;
	helpers$3.classStaticPrivateFieldSpecGet = helper("7.0.2")`
  import classApplyDescriptorGet from "classApplyDescriptorGet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "get");
    return classApplyDescriptorGet(receiver, descriptor);
  }
`;
	helpers$3.classStaticPrivateFieldSpecSet = helper("7.0.2")`
  import classApplyDescriptorSet from "classApplyDescriptorSet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "set");
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
`;
	helpers$3.classStaticPrivateMethodGet = helper("7.3.2")`
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  export default function _classStaticPrivateMethodGet(receiver, classConstructor, method) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    return method;
  }
`;
	helpers$3.classStaticPrivateMethodSet = helper("7.3.2")`
  export default function _classStaticPrivateMethodSet() {
    throw new TypeError("attempted to set read only static private field");
  }
`;
	helpers$3.classApplyDescriptorGet = helper("7.13.10")`
  export default function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
      return descriptor.get.call(receiver);
    }
    return descriptor.value;
  }
`;
	helpers$3.classApplyDescriptorSet = helper("7.13.10")`
  export default function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
      descriptor.set.call(receiver, value);
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError("attempted to set read only private field");
      }
      descriptor.value = value;
    }
  }
`;
	helpers$3.classApplyDescriptorDestructureSet = helper("7.13.10")`
  export default function _classApplyDescriptorDestructureSet(receiver, descriptor) {
    if (descriptor.set) {
      if (!("__destrObj" in descriptor)) {
        descriptor.__destrObj = {
          set value(v) {
            descriptor.set.call(receiver, v)
          },
        };
      }
      return descriptor.__destrObj;
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError("attempted to set read only private field");
      }

      return descriptor;
    }
  }
`;
	helpers$3.classStaticPrivateFieldDestructureSet = helper("7.13.10")`
  import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldDestructureSet(receiver, classConstructor, descriptor) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "set");
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
`;
	helpers$3.classCheckPrivateStaticAccess = helper("7.13.10")`
  export default function _classCheckPrivateStaticAccess(receiver, classConstructor) {
    if (receiver !== classConstructor) {
      throw new TypeError("Private static access of wrong provenance");
    }
  }
`;
	helpers$3.classCheckPrivateStaticFieldDescriptor = helper("7.13.10")`
  export default function _classCheckPrivateStaticFieldDescriptor(descriptor, action) {
    if (descriptor === undefined) {
      throw new TypeError("attempted to " + action + " private static field before its declaration");
    }
  }
`;
	helpers$3.decorate = helper("7.1.5")`
  import toArray from "toArray";
  import toPropertyKey from "toPropertyKey";

  // These comments are stripped by @babel/template
  /*::
  type PropertyDescriptor =
    | {
        value: any,
        writable: boolean,
        configurable: boolean,
        enumerable: boolean,
      }
    | {
        get?: () => any,
        set?: (v: any) => void,
        configurable: boolean,
        enumerable: boolean,
      };

  type FieldDescriptor ={
    writable: boolean,
    configurable: boolean,
    enumerable: boolean,
  };

  type Placement = "static" | "prototype" | "own";
  type Key = string | symbol; // PrivateName is not supported yet.

  type ElementDescriptor =
    | {
        kind: "method",
        key: Key,
        placement: Placement,
        descriptor: PropertyDescriptor
      }
    | {
        kind: "field",
        key: Key,
        placement: Placement,
        descriptor: FieldDescriptor,
        initializer?: () => any,
      };

  // This is exposed to the user code
  type ElementObjectInput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
  };

  // This is exposed to the user code
  type ElementObjectOutput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
    extras?: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  // This is exposed to the user code
  type ClassObject = {
    [@@toStringTag]?: "Descriptor",
    kind: "class",
    elements: ElementDescriptor[],
  };

  type ElementDecorator = (descriptor: ElementObjectInput) => ?ElementObjectOutput;
  type ClassDecorator = (descriptor: ClassObject) => ?ClassObject;
  type ClassFinisher = <A, B>(cl: Class<A>) => Class<B>;

  // Only used by Babel in the transform output, not part of the spec.
  type ElementDefinition =
    | {
        kind: "method",
        value: any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
      }
    | {
        kind: "field",
        value: () => any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
    };

  declare function ClassFactory<C>(initialize: (instance: C) => void): {
    F: Class<C>,
    d: ElementDefinition[]
  }

  */

  /*::
  // Various combinations with/without extras and with one or many finishers

  type ElementFinisherExtras = {
    element: ElementDescriptor,
    finisher?: ClassFinisher,
    extras?: ElementDescriptor[],
  };

  type ElementFinishersExtras = {
    element: ElementDescriptor,
    finishers: ClassFinisher[],
    extras: ElementDescriptor[],
  };

  type ElementsFinisher = {
    elements: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  type ElementsFinishers = {
    elements: ElementDescriptor[],
    finishers: ClassFinisher[],
  };

  */

  /*::

  type Placements = {
    static: Key[],
    prototype: Key[],
    own: Key[],
  };

  */

  // ClassDefinitionEvaluation (Steps 26-*)
  export default function _decorate(
    decorators /*: ClassDecorator[] */,
    factory /*: ClassFactory */,
    superClass /*: ?Class<*> */,
    mixins /*: ?Array<Function> */,
  ) /*: Class<*> */ {
    var api = _getDecoratorsApi();
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        api = mixins[i](api);
      }
    }

    var r = factory(function initialize(O) {
      api.initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = api.decorateClass(
      _coalesceClassElements(r.d.map(_createElementDescriptor)),
      decorators,
    );

    api.initializeClassElements(r.F, decorated.elements);

    return api.runClassFinishers(r.F, decorated.finishers);
  }

  function _getDecoratorsApi() {
    _getDecoratorsApi = function() {
      return api;
    };

    var api = {
      elementsDefinitionOrder: [["method"], ["field"]],

      // InitializeInstanceElements
      initializeInstanceElements: function(
        /*::<C>*/ O /*: C */,
        elements /*: ElementDescriptor[] */,
      ) {
        ["method", "field"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            if (element.kind === kind && element.placement === "own") {
              this.defineClassElement(O, element);
            }
          }, this);
        }, this);
      },

      // InitializeClassElements
      initializeClassElements: function(
        /*::<C>*/ F /*: Class<C> */,
        elements /*: ElementDescriptor[] */,
      ) {
        var proto = F.prototype;

        ["method", "field"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            var placement = element.placement;
            if (
              element.kind === kind &&
              (placement === "static" || placement === "prototype")
            ) {
              var receiver = placement === "static" ? F : proto;
              this.defineClassElement(receiver, element);
            }
          }, this);
        }, this);
      },

      // DefineClassElement
      defineClassElement: function(
        /*::<C>*/ receiver /*: C | Class<C> */,
        element /*: ElementDescriptor */,
      ) {
        var descriptor /*: PropertyDescriptor */ = element.descriptor;
        if (element.kind === "field") {
          var initializer = element.initializer;
          descriptor = {
            enumerable: descriptor.enumerable,
            writable: descriptor.writable,
            configurable: descriptor.configurable,
            value: initializer === void 0 ? void 0 : initializer.call(receiver),
          };
        }
        Object.defineProperty(receiver, element.key, descriptor);
      },

      // DecorateClass
      decorateClass: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var newElements /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];
        var placements /*: Placements */ = {
          static: [],
          prototype: [],
          own: [],
        };

        elements.forEach(function(element /*: ElementDescriptor */) {
          this.addElementPlacement(element, placements);
        }, this);

        elements.forEach(function(element /*: ElementDescriptor */) {
          if (!_hasDecorators(element)) return newElements.push(element);

          var elementFinishersExtras /*: ElementFinishersExtras */ = this.decorateElement(
            element,
            placements,
          );
          newElements.push(elementFinishersExtras.element);
          newElements.push.apply(newElements, elementFinishersExtras.extras);
          finishers.push.apply(finishers, elementFinishersExtras.finishers);
        }, this);

        if (!decorators) {
          return { elements: newElements, finishers: finishers };
        }

        var result /*: ElementsFinishers */ = this.decorateConstructor(
          newElements,
          decorators,
        );
        finishers.push.apply(finishers, result.finishers);
        result.finishers = finishers;

        return result;
      },

      // AddElementPlacement
      addElementPlacement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
        silent /*: boolean */,
      ) {
        var keys = placements[element.placement];
        if (!silent && keys.indexOf(element.key) !== -1) {
          throw new TypeError("Duplicated element (" + element.key + ")");
        }
        keys.push(element.key);
      },

      // DecorateElement
      decorateElement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
      ) /*: ElementFinishersExtras */ {
        var extras /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];

        for (
          var decorators = element.decorators, i = decorators.length - 1;
          i >= 0;
          i--
        ) {
          // (inlined) RemoveElementPlacement
          var keys = placements[element.placement];
          keys.splice(keys.indexOf(element.key), 1);

          var elementObject /*: ElementObjectInput */ = this.fromElementDescriptor(
            element,
          );
          var elementFinisherExtras /*: ElementFinisherExtras */ = this.toElementFinisherExtras(
            (0, decorators[i])(elementObject) /*: ElementObjectOutput */ ||
              elementObject,
          );

          element = elementFinisherExtras.element;
          this.addElementPlacement(element, placements);

          if (elementFinisherExtras.finisher) {
            finishers.push(elementFinisherExtras.finisher);
          }

          var newExtras /*: ElementDescriptor[] | void */ =
            elementFinisherExtras.extras;
          if (newExtras) {
            for (var j = 0; j < newExtras.length; j++) {
              this.addElementPlacement(newExtras[j], placements);
            }
            extras.push.apply(extras, newExtras);
          }
        }

        return { element: element, finishers: finishers, extras: extras };
      },

      // DecorateConstructor
      decorateConstructor: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var finishers /*: ClassFinisher[] */ = [];

        for (var i = decorators.length - 1; i >= 0; i--) {
          var obj /*: ClassObject */ = this.fromClassDescriptor(elements);
          var elementsAndFinisher /*: ElementsFinisher */ = this.toClassDescriptor(
            (0, decorators[i])(obj) /*: ClassObject */ || obj,
          );

          if (elementsAndFinisher.finisher !== undefined) {
            finishers.push(elementsAndFinisher.finisher);
          }

          if (elementsAndFinisher.elements !== undefined) {
            elements = elementsAndFinisher.elements;

            for (var j = 0; j < elements.length - 1; j++) {
              for (var k = j + 1; k < elements.length; k++) {
                if (
                  elements[j].key === elements[k].key &&
                  elements[j].placement === elements[k].placement
                ) {
                  throw new TypeError(
                    "Duplicated element (" + elements[j].key + ")",
                  );
                }
              }
            }
          }
        }

        return { elements: elements, finishers: finishers };
      },

      // FromElementDescriptor
      fromElementDescriptor: function(
        element /*: ElementDescriptor */,
      ) /*: ElementObject */ {
        var obj /*: ElementObject */ = {
          kind: element.kind,
          key: element.key,
          placement: element.placement,
          descriptor: element.descriptor,
        };

        var desc = {
          value: "Descriptor",
          configurable: true,
        };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        if (element.kind === "field") obj.initializer = element.initializer;

        return obj;
      },

      // ToElementDescriptors
      toElementDescriptors: function(
        elementObjects /*: ElementObject[] */,
      ) /*: ElementDescriptor[] */ {
        if (elementObjects === undefined) return;
        return toArray(elementObjects).map(function(elementObject) {
          var element = this.toElementDescriptor(elementObject);
          this.disallowProperty(elementObject, "finisher", "An element descriptor");
          this.disallowProperty(elementObject, "extras", "An element descriptor");
          return element;
        }, this);
      },

      // ToElementDescriptor
      toElementDescriptor: function(
        elementObject /*: ElementObject */,
      ) /*: ElementDescriptor */ {
        var kind = String(elementObject.kind);
        if (kind !== "method" && kind !== "field") {
          throw new TypeError(
            'An element descriptor\\'s .kind property must be either "method" or' +
              ' "field", but a decorator created an element descriptor with' +
              ' .kind "' +
              kind +
              '"',
          );
        }

        var key = toPropertyKey(elementObject.key);

        var placement = String(elementObject.placement);
        if (
          placement !== "static" &&
          placement !== "prototype" &&
          placement !== "own"
        ) {
          throw new TypeError(
            'An element descriptor\\'s .placement property must be one of "static",' +
              ' "prototype" or "own", but a decorator created an element descriptor' +
              ' with .placement "' +
              placement +
              '"',
          );
        }

        var descriptor /*: PropertyDescriptor */ = elementObject.descriptor;

        this.disallowProperty(elementObject, "elements", "An element descriptor");

        var element /*: ElementDescriptor */ = {
          kind: kind,
          key: key,
          placement: placement,
          descriptor: Object.assign({}, descriptor),
        };

        if (kind !== "field") {
          this.disallowProperty(elementObject, "initializer", "A method descriptor");
        } else {
          this.disallowProperty(
            descriptor,
            "get",
            "The property descriptor of a field descriptor",
          );
          this.disallowProperty(
            descriptor,
            "set",
            "The property descriptor of a field descriptor",
          );
          this.disallowProperty(
            descriptor,
            "value",
            "The property descriptor of a field descriptor",
          );

          element.initializer = elementObject.initializer;
        }

        return element;
      },

      toElementFinisherExtras: function(
        elementObject /*: ElementObject */,
      ) /*: ElementFinisherExtras */ {
        var element /*: ElementDescriptor */ = this.toElementDescriptor(
          elementObject,
        );
        var finisher /*: ClassFinisher */ = _optionalCallableProperty(
          elementObject,
          "finisher",
        );
        var extras /*: ElementDescriptors[] */ = this.toElementDescriptors(
          elementObject.extras,
        );

        return { element: element, finisher: finisher, extras: extras };
      },

      // FromClassDescriptor
      fromClassDescriptor: function(
        elements /*: ElementDescriptor[] */,
      ) /*: ClassObject */ {
        var obj = {
          kind: "class",
          elements: elements.map(this.fromElementDescriptor, this),
        };

        var desc = { value: "Descriptor", configurable: true };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        return obj;
      },

      // ToClassDescriptor
      toClassDescriptor: function(
        obj /*: ClassObject */,
      ) /*: ElementsFinisher */ {
        var kind = String(obj.kind);
        if (kind !== "class") {
          throw new TypeError(
            'A class descriptor\\'s .kind property must be "class", but a decorator' +
              ' created a class descriptor with .kind "' +
              kind +
              '"',
          );
        }

        this.disallowProperty(obj, "key", "A class descriptor");
        this.disallowProperty(obj, "placement", "A class descriptor");
        this.disallowProperty(obj, "descriptor", "A class descriptor");
        this.disallowProperty(obj, "initializer", "A class descriptor");
        this.disallowProperty(obj, "extras", "A class descriptor");

        var finisher = _optionalCallableProperty(obj, "finisher");
        var elements = this.toElementDescriptors(obj.elements);

        return { elements: elements, finisher: finisher };
      },

      // RunClassFinishers
      runClassFinishers: function(
        constructor /*: Class<*> */,
        finishers /*: ClassFinisher[] */,
      ) /*: Class<*> */ {
        for (var i = 0; i < finishers.length; i++) {
          var newConstructor /*: ?Class<*> */ = (0, finishers[i])(constructor);
          if (newConstructor !== undefined) {
            // NOTE: This should check if IsConstructor(newConstructor) is false.
            if (typeof newConstructor !== "function") {
              throw new TypeError("Finishers must return a constructor.");
            }
            constructor = newConstructor;
          }
        }
        return constructor;
      },

      disallowProperty: function(obj, name, objectType) {
        if (obj[name] !== undefined) {
          throw new TypeError(objectType + " can't have a ." + name + " property.");
        }
      }
    };

    return api;
  }

  // ClassElementEvaluation
  function _createElementDescriptor(
    def /*: ElementDefinition */,
  ) /*: ElementDescriptor */ {
    var key = toPropertyKey(def.key);

    var descriptor /*: PropertyDescriptor */;
    if (def.kind === "method") {
      descriptor = {
        value: def.value,
        writable: true,
        configurable: true,
        enumerable: false,
      };
    } else if (def.kind === "get") {
      descriptor = { get: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "set") {
      descriptor = { set: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "field") {
      descriptor = { configurable: true, writable: true, enumerable: true };
    }

    var element /*: ElementDescriptor */ = {
      kind: def.kind === "field" ? "field" : "method",
      key: key,
      placement: def.static
        ? "static"
        : def.kind === "field"
        ? "own"
        : "prototype",
      descriptor: descriptor,
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === "field") element.initializer = def.value;

    return element;
  }

  // CoalesceGetterSetter
  function _coalesceGetterSetter(
    element /*: ElementDescriptor */,
    other /*: ElementDescriptor */,
  ) {
    if (element.descriptor.get !== undefined) {
      other.descriptor.get = element.descriptor.get;
    } else {
      other.descriptor.set = element.descriptor.set;
    }
  }

  // CoalesceClassElements
  function _coalesceClassElements(
    elements /*: ElementDescriptor[] */,
  ) /*: ElementDescriptor[] */ {
    var newElements /*: ElementDescriptor[] */ = [];

    var isSameElement = function(
      other /*: ElementDescriptor */,
    ) /*: boolean */ {
      return (
        other.kind === "method" &&
        other.key === element.key &&
        other.placement === element.placement
      );
    };

    for (var i = 0; i < elements.length; i++) {
      var element /*: ElementDescriptor */ = elements[i];
      var other /*: ElementDescriptor */;

      if (
        element.kind === "method" &&
        (other = newElements.find(isSameElement))
      ) {
        if (
          _isDataDescriptor(element.descriptor) ||
          _isDataDescriptor(other.descriptor)
        ) {
          if (_hasDecorators(element) || _hasDecorators(other)) {
            throw new ReferenceError(
              "Duplicated methods (" + element.key + ") can't be decorated.",
            );
          }
          other.descriptor = element.descriptor;
        } else {
          if (_hasDecorators(element)) {
            if (_hasDecorators(other)) {
              throw new ReferenceError(
                "Decorators can't be placed on different accessors with for " +
                  "the same property (" +
                  element.key +
                  ").",
              );
            }
            other.decorators = element.decorators;
          }
          _coalesceGetterSetter(element, other);
        }
      } else {
        newElements.push(element);
      }
    }

    return newElements;
  }

  function _hasDecorators(element /*: ElementDescriptor */) /*: boolean */ {
    return element.decorators && element.decorators.length;
  }

  function _isDataDescriptor(desc /*: PropertyDescriptor */) /*: boolean */ {
    return (
      desc !== undefined &&
      !(desc.value === undefined && desc.writable === undefined)
    );
  }

  function _optionalCallableProperty /*::<T>*/(
    obj /*: T */,
    name /*: $Keys<T> */,
  ) /*: ?Function */ {
    var value = obj[name];
    if (value !== undefined && typeof value !== "function") {
      throw new TypeError("Expected '" + name + "' to be a function");
    }
    return value;
  }

`;
	helpers$3.classPrivateMethodGet = helper("7.1.6")`
  export default function _classPrivateMethodGet(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
  }
`;
	helpers$3.checkPrivateRedeclaration = helper("7.14.1")`
  export default function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
      throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
  }
`;
	helpers$3.classPrivateFieldInitSpec = helper("7.14.1")`
  import checkPrivateRedeclaration from "checkPrivateRedeclaration";

  export default function _classPrivateFieldInitSpec(obj, privateMap, value) {
    checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
  }
`;
	helpers$3.classPrivateMethodInitSpec = helper("7.14.1")`
  import checkPrivateRedeclaration from "checkPrivateRedeclaration";

  export default function _classPrivateMethodInitSpec(obj, privateSet) {
    checkPrivateRedeclaration(obj, privateSet);
    privateSet.add(obj);
  }
`;
	{
	  helpers$3.classPrivateMethodSet = helper("7.1.6")`
    export default function _classPrivateMethodSet() {
      throw new TypeError("attempted to reassign private method");
    }
  `;
	}

	Object.defineProperty(lib$u, "__esModule", {
	  value: true
	});
	lib$u.get = get$1;
	lib$u.minVersion = minVersion;
	lib$u.getDependencies = getDependencies;
	lib$u.ensure = ensure;
	lib$u.default = lib$u.list = void 0;

	var _traverse$6 = lib$t;

	var _t$b = lib$s;

	var _helpers = helpers$4;

	const {
	  assignmentExpression: assignmentExpression$5,
	  cloneNode: cloneNode$8,
	  expressionStatement: expressionStatement$3,
	  file: t_file,
	  identifier: identifier$7,
	  variableDeclaration: variableDeclaration$3,
	  variableDeclarator: variableDeclarator$3
	} = _t$b;

	function makePath(path) {
	  const parts = [];

	  for (; path.parentPath; path = path.parentPath) {
	    parts.push(path.key);
	    if (path.inList) parts.push(path.listKey);
	  }

	  return parts.reverse().join(".");
	}

	let fileClass = undefined;

	function getHelperMetadata(file) {
	  const globals = new Set();
	  const localBindingNames = new Set();
	  const dependencies = new Map();
	  let exportName;
	  let exportPath;
	  const exportBindingAssignments = [];
	  const importPaths = [];
	  const importBindingsReferences = [];
	  const dependencyVisitor = {
	    ImportDeclaration(child) {
	      const name = child.node.source.value;

	      if (!_helpers.default[name]) {
	        throw child.buildCodeFrameError(`Unknown helper ${name}`);
	      }

	      if (child.get("specifiers").length !== 1 || !child.get("specifiers.0").isImportDefaultSpecifier()) {
	        throw child.buildCodeFrameError("Helpers can only import a default value");
	      }

	      const bindingIdentifier = child.node.specifiers[0].local;
	      dependencies.set(bindingIdentifier, name);
	      importPaths.push(makePath(child));
	    },

	    ExportDefaultDeclaration(child) {
	      const decl = child.get("declaration");

	      if (decl.isFunctionDeclaration()) {
	        if (!decl.node.id) {
	          throw decl.buildCodeFrameError("Helpers should give names to their exported func declaration");
	        }

	        exportName = decl.node.id.name;
	      }

	      exportPath = makePath(child);
	    },

	    ExportAllDeclaration(child) {
	      throw child.buildCodeFrameError("Helpers can only export default");
	    },

	    ExportNamedDeclaration(child) {
	      throw child.buildCodeFrameError("Helpers can only export default");
	    },

	    Statement(child) {
	      if (child.isModuleDeclaration()) return;
	      child.skip();
	    }

	  };
	  const referenceVisitor = {
	    Program(path) {
	      const bindings = path.scope.getAllBindings();
	      Object.keys(bindings).forEach(name => {
	        if (name === exportName) return;
	        if (dependencies.has(bindings[name].identifier)) return;
	        localBindingNames.add(name);
	      });
	    },

	    ReferencedIdentifier(child) {
	      const name = child.node.name;
	      const binding = child.scope.getBinding(name);

	      if (!binding) {
	        globals.add(name);
	      } else if (dependencies.has(binding.identifier)) {
	        importBindingsReferences.push(makePath(child));
	      }
	    },

	    AssignmentExpression(child) {
	      const left = child.get("left");
	      if (!(exportName in left.getBindingIdentifiers())) return;

	      if (!left.isIdentifier()) {
	        throw left.buildCodeFrameError("Only simple assignments to exports are allowed in helpers");
	      }

	      const binding = child.scope.getBinding(exportName);

	      if (binding != null && binding.scope.path.isProgram()) {
	        exportBindingAssignments.push(makePath(child));
	      }
	    }

	  };
	  (0, _traverse$6.default)(file.ast, dependencyVisitor, file.scope);
	  (0, _traverse$6.default)(file.ast, referenceVisitor, file.scope);
	  if (!exportPath) throw new Error("Helpers must default-export something.");
	  exportBindingAssignments.reverse();
	  return {
	    globals: Array.from(globals),
	    localBindingNames: Array.from(localBindingNames),
	    dependencies,
	    exportBindingAssignments,
	    exportPath,
	    exportName,
	    importBindingsReferences,
	    importPaths
	  };
	}

	function permuteHelperAST(file, metadata, id, localBindings, getDependency) {
	  if (localBindings && !id) {
	    throw new Error("Unexpected local bindings for module-based helpers.");
	  }

	  if (!id) return;
	  const {
	    localBindingNames,
	    dependencies,
	    exportBindingAssignments,
	    exportPath,
	    exportName,
	    importBindingsReferences,
	    importPaths
	  } = metadata;
	  const dependenciesRefs = {};
	  dependencies.forEach((name, id) => {
	    dependenciesRefs[id.name] = typeof getDependency === "function" && getDependency(name) || id;
	  });
	  const toRename = {};
	  const bindings = new Set(localBindings || []);
	  localBindingNames.forEach(name => {
	    let newName = name;

	    while (bindings.has(newName)) newName = "_" + newName;

	    if (newName !== name) toRename[name] = newName;
	  });

	  if (id.type === "Identifier" && exportName !== id.name) {
	    toRename[exportName] = id.name;
	  }

	  const visitor = {
	    Program(path) {
	      const exp = path.get(exportPath);
	      const imps = importPaths.map(p => path.get(p));
	      const impsBindingRefs = importBindingsReferences.map(p => path.get(p));
	      const decl = exp.get("declaration");

	      if (id.type === "Identifier") {
	        if (decl.isFunctionDeclaration()) {
	          exp.replaceWith(decl);
	        } else {
	          exp.replaceWith(variableDeclaration$3("var", [variableDeclarator$3(id, decl.node)]));
	        }
	      } else if (id.type === "MemberExpression") {
	        if (decl.isFunctionDeclaration()) {
	          exportBindingAssignments.forEach(assignPath => {
	            const assign = path.get(assignPath);
	            assign.replaceWith(assignmentExpression$5("=", id, assign.node));
	          });
	          exp.replaceWith(decl);
	          path.pushContainer("body", expressionStatement$3(assignmentExpression$5("=", id, identifier$7(exportName))));
	        } else {
	          exp.replaceWith(expressionStatement$3(assignmentExpression$5("=", id, decl.node)));
	        }
	      } else {
	        throw new Error("Unexpected helper format.");
	      }

	      Object.keys(toRename).forEach(name => {
	        path.scope.rename(name, toRename[name]);
	      });

	      for (const path of imps) path.remove();

	      for (const path of impsBindingRefs) {
	        const node = cloneNode$8(dependenciesRefs[path.node.name]);
	        path.replaceWith(node);
	      }

	      path.stop();
	    }

	  };
	  (0, _traverse$6.default)(file.ast, visitor, file.scope);
	}

	const helperData = Object.create(null);

	function loadHelper(name) {
	  if (!helperData[name]) {
	    const helper = _helpers.default[name];

	    if (!helper) {
	      throw Object.assign(new ReferenceError(`Unknown helper ${name}`), {
	        code: "BABEL_HELPER_UNKNOWN",
	        helper: name
	      });
	    }

	    const fn = () => {
	      const file = {
	        ast: t_file(helper.ast())
	      };

	      if (fileClass) {
	        return new fileClass({
	          filename: `babel-helper://${name}`
	        }, file);
	      }

	      return file;
	    };

	    const metadata = getHelperMetadata(fn());
	    helperData[name] = {
	      build(getDependency, id, localBindings) {
	        const file = fn();
	        permuteHelperAST(file, metadata, id, localBindings, getDependency);
	        return {
	          nodes: file.ast.program.body,
	          globals: metadata.globals
	        };
	      },

	      minVersion() {
	        return helper.minVersion;
	      },

	      dependencies: metadata.dependencies
	    };
	  }

	  return helperData[name];
	}

	function get$1(name, getDependency, id, localBindings) {
	  return loadHelper(name).build(getDependency, id, localBindings);
	}

	function minVersion(name) {
	  return loadHelper(name).minVersion();
	}

	function getDependencies(name) {
	  return Array.from(loadHelper(name).dependencies.values());
	}

	function ensure(name, newFileClass) {
	  if (!fileClass) {
	    fileClass = newFileClass;
	  }

	  loadHelper(name);
	}

	const list = Object.keys(_helpers.default).map(name => name.replace(/^_/, "")).filter(name => name !== "__esModule");
	lib$u.list = list;
	var _default$6 = get$1;
	lib$u.default = _default$6;

	var lib$i = {};

	var lib$h = {};

	var importInjector = {};

	var importBuilder = {};

	Object.defineProperty(importBuilder, "__esModule", {
	  value: true
	});
	importBuilder.default = void 0;

	var _assert$2 = require$$1__default['default'];

	var _t$a = lib$s;

	const {
	  callExpression: callExpression$5,
	  cloneNode: cloneNode$7,
	  expressionStatement: expressionStatement$2,
	  identifier: identifier$6,
	  importDeclaration,
	  importDefaultSpecifier,
	  importNamespaceSpecifier,
	  importSpecifier,
	  memberExpression: memberExpression$5,
	  stringLiteral: stringLiteral$3,
	  variableDeclaration: variableDeclaration$2,
	  variableDeclarator: variableDeclarator$2
	} = _t$a;

	class ImportBuilder {
	  constructor(importedSource, scope, hub) {
	    this._statements = [];
	    this._resultName = null;
	    this._scope = null;
	    this._hub = null;
	    this._importedSource = void 0;
	    this._scope = scope;
	    this._hub = hub;
	    this._importedSource = importedSource;
	  }

	  done() {
	    return {
	      statements: this._statements,
	      resultName: this._resultName
	    };
	  }

	  import() {
	    this._statements.push(importDeclaration([], stringLiteral$3(this._importedSource)));

	    return this;
	  }

	  require() {
	    this._statements.push(expressionStatement$2(callExpression$5(identifier$6("require"), [stringLiteral$3(this._importedSource)])));

	    return this;
	  }

	  namespace(name = "namespace") {
	    const local = this._scope.generateUidIdentifier(name);

	    const statement = this._statements[this._statements.length - 1];

	    _assert$2(statement.type === "ImportDeclaration");

	    _assert$2(statement.specifiers.length === 0);

	    statement.specifiers = [importNamespaceSpecifier(local)];
	    this._resultName = cloneNode$7(local);
	    return this;
	  }

	  default(name) {
	    name = this._scope.generateUidIdentifier(name);
	    const statement = this._statements[this._statements.length - 1];

	    _assert$2(statement.type === "ImportDeclaration");

	    _assert$2(statement.specifiers.length === 0);

	    statement.specifiers = [importDefaultSpecifier(name)];
	    this._resultName = cloneNode$7(name);
	    return this;
	  }

	  named(name, importName) {
	    if (importName === "default") return this.default(name);
	    name = this._scope.generateUidIdentifier(name);
	    const statement = this._statements[this._statements.length - 1];

	    _assert$2(statement.type === "ImportDeclaration");

	    _assert$2(statement.specifiers.length === 0);

	    statement.specifiers = [importSpecifier(name, identifier$6(importName))];
	    this._resultName = cloneNode$7(name);
	    return this;
	  }

	  var(name) {
	    name = this._scope.generateUidIdentifier(name);
	    let statement = this._statements[this._statements.length - 1];

	    if (statement.type !== "ExpressionStatement") {
	      _assert$2(this._resultName);

	      statement = expressionStatement$2(this._resultName);

	      this._statements.push(statement);
	    }

	    this._statements[this._statements.length - 1] = variableDeclaration$2("var", [variableDeclarator$2(name, statement.expression)]);
	    this._resultName = cloneNode$7(name);
	    return this;
	  }

	  defaultInterop() {
	    return this._interop(this._hub.addHelper("interopRequireDefault"));
	  }

	  wildcardInterop() {
	    return this._interop(this._hub.addHelper("interopRequireWildcard"));
	  }

	  _interop(callee) {
	    const statement = this._statements[this._statements.length - 1];

	    if (statement.type === "ExpressionStatement") {
	      statement.expression = callExpression$5(callee, [statement.expression]);
	    } else if (statement.type === "VariableDeclaration") {
	      _assert$2(statement.declarations.length === 1);

	      statement.declarations[0].init = callExpression$5(callee, [statement.declarations[0].init]);
	    } else {
	      _assert$2.fail("Unexpected type.");
	    }

	    return this;
	  }

	  prop(name) {
	    const statement = this._statements[this._statements.length - 1];

	    if (statement.type === "ExpressionStatement") {
	      statement.expression = memberExpression$5(statement.expression, identifier$6(name));
	    } else if (statement.type === "VariableDeclaration") {
	      _assert$2(statement.declarations.length === 1);

	      statement.declarations[0].init = memberExpression$5(statement.declarations[0].init, identifier$6(name));
	    } else {
	      _assert$2.fail("Unexpected type:" + statement.type);
	    }

	    return this;
	  }

	  read(name) {
	    this._resultName = memberExpression$5(this._resultName, identifier$6(name));
	  }

	}

	importBuilder.default = ImportBuilder;

	var isModule$1 = {};

	Object.defineProperty(isModule$1, "__esModule", {
	  value: true
	});
	isModule$1.default = isModule;

	function isModule(path) {
	  const {
	    sourceType
	  } = path.node;

	  if (sourceType !== "module" && sourceType !== "script") {
	    throw path.buildCodeFrameError(`Unknown sourceType "${sourceType}", cannot transform.`);
	  }

	  return path.node.sourceType === "module";
	}

	Object.defineProperty(importInjector, "__esModule", {
	  value: true
	});
	importInjector.default = void 0;

	var _assert$1 = require$$1__default['default'];

	var _t$9 = lib$s;

	var _importBuilder = importBuilder;

	var _isModule = isModule$1;

	const {
	  numericLiteral: numericLiteral$4,
	  sequenceExpression: sequenceExpression$4
	} = _t$9;

	class ImportInjector {
	  constructor(path, importedSource, opts) {
	    this._defaultOpts = {
	      importedSource: null,
	      importedType: "commonjs",
	      importedInterop: "babel",
	      importingInterop: "babel",
	      ensureLiveReference: false,
	      ensureNoContext: false,
	      importPosition: "before"
	    };
	    const programPath = path.find(p => p.isProgram());
	    this._programPath = programPath;
	    this._programScope = programPath.scope;
	    this._hub = programPath.hub;
	    this._defaultOpts = this._applyDefaults(importedSource, opts, true);
	  }

	  addDefault(importedSourceIn, opts) {
	    return this.addNamed("default", importedSourceIn, opts);
	  }

	  addNamed(importName, importedSourceIn, opts) {
	    _assert$1(typeof importName === "string");

	    return this._generateImport(this._applyDefaults(importedSourceIn, opts), importName);
	  }

	  addNamespace(importedSourceIn, opts) {
	    return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);
	  }

	  addSideEffect(importedSourceIn, opts) {
	    return this._generateImport(this._applyDefaults(importedSourceIn, opts), false);
	  }

	  _applyDefaults(importedSource, opts, isInit = false) {
	    const optsList = [];

	    if (typeof importedSource === "string") {
	      optsList.push({
	        importedSource
	      });
	      optsList.push(opts);
	    } else {
	      _assert$1(!opts, "Unexpected secondary arguments.");

	      optsList.push(importedSource);
	    }

	    const newOpts = Object.assign({}, this._defaultOpts);

	    for (const opts of optsList) {
	      if (!opts) continue;
	      Object.keys(newOpts).forEach(key => {
	        if (opts[key] !== undefined) newOpts[key] = opts[key];
	      });

	      if (!isInit) {
	        if (opts.nameHint !== undefined) newOpts.nameHint = opts.nameHint;
	        if (opts.blockHoist !== undefined) newOpts.blockHoist = opts.blockHoist;
	      }
	    }

	    return newOpts;
	  }

	  _generateImport(opts, importName) {
	    const isDefault = importName === "default";
	    const isNamed = !!importName && !isDefault;
	    const isNamespace = importName === null;
	    const {
	      importedSource,
	      importedType,
	      importedInterop,
	      importingInterop,
	      ensureLiveReference,
	      ensureNoContext,
	      nameHint,
	      importPosition,
	      blockHoist
	    } = opts;
	    let name = nameHint || importName;
	    const isMod = (0, _isModule.default)(this._programPath);
	    const isModuleForNode = isMod && importingInterop === "node";
	    const isModuleForBabel = isMod && importingInterop === "babel";

	    if (importPosition === "after" && !isMod) {
	      throw new Error(`"importPosition": "after" is only supported in modules`);
	    }

	    const builder = new _importBuilder.default(importedSource, this._programScope, this._hub);

	    if (importedType === "es6") {
	      if (!isModuleForNode && !isModuleForBabel) {
	        throw new Error("Cannot import an ES6 module from CommonJS");
	      }

	      builder.import();

	      if (isNamespace) {
	        builder.namespace(nameHint || importedSource);
	      } else if (isDefault || isNamed) {
	        builder.named(name, importName);
	      }
	    } else if (importedType !== "commonjs") {
	      throw new Error(`Unexpected interopType "${importedType}"`);
	    } else if (importedInterop === "babel") {
	      if (isModuleForNode) {
	        name = name !== "default" ? name : importedSource;
	        const es6Default = `${importedSource}$es6Default`;
	        builder.import();

	        if (isNamespace) {
	          builder.default(es6Default).var(name || importedSource).wildcardInterop();
	        } else if (isDefault) {
	          if (ensureLiveReference) {
	            builder.default(es6Default).var(name || importedSource).defaultInterop().read("default");
	          } else {
	            builder.default(es6Default).var(name).defaultInterop().prop(importName);
	          }
	        } else if (isNamed) {
	          builder.default(es6Default).read(importName);
	        }
	      } else if (isModuleForBabel) {
	        builder.import();

	        if (isNamespace) {
	          builder.namespace(name || importedSource);
	        } else if (isDefault || isNamed) {
	          builder.named(name, importName);
	        }
	      } else {
	        builder.require();

	        if (isNamespace) {
	          builder.var(name || importedSource).wildcardInterop();
	        } else if ((isDefault || isNamed) && ensureLiveReference) {
	          if (isDefault) {
	            name = name !== "default" ? name : importedSource;
	            builder.var(name).read(importName);
	            builder.defaultInterop();
	          } else {
	            builder.var(importedSource).read(importName);
	          }
	        } else if (isDefault) {
	          builder.var(name).defaultInterop().prop(importName);
	        } else if (isNamed) {
	          builder.var(name).prop(importName);
	        }
	      }
	    } else if (importedInterop === "compiled") {
	      if (isModuleForNode) {
	        builder.import();

	        if (isNamespace) {
	          builder.default(name || importedSource);
	        } else if (isDefault || isNamed) {
	          builder.default(importedSource).read(name);
	        }
	      } else if (isModuleForBabel) {
	        builder.import();

	        if (isNamespace) {
	          builder.namespace(name || importedSource);
	        } else if (isDefault || isNamed) {
	          builder.named(name, importName);
	        }
	      } else {
	        builder.require();

	        if (isNamespace) {
	          builder.var(name || importedSource);
	        } else if (isDefault || isNamed) {
	          if (ensureLiveReference) {
	            builder.var(importedSource).read(name);
	          } else {
	            builder.prop(importName).var(name);
	          }
	        }
	      }
	    } else if (importedInterop === "uncompiled") {
	      if (isDefault && ensureLiveReference) {
	        throw new Error("No live reference for commonjs default");
	      }

	      if (isModuleForNode) {
	        builder.import();

	        if (isNamespace) {
	          builder.default(name || importedSource);
	        } else if (isDefault) {
	          builder.default(name);
	        } else if (isNamed) {
	          builder.default(importedSource).read(name);
	        }
	      } else if (isModuleForBabel) {
	        builder.import();

	        if (isNamespace) {
	          builder.default(name || importedSource);
	        } else if (isDefault) {
	          builder.default(name);
	        } else if (isNamed) {
	          builder.named(name, importName);
	        }
	      } else {
	        builder.require();

	        if (isNamespace) {
	          builder.var(name || importedSource);
	        } else if (isDefault) {
	          builder.var(name);
	        } else if (isNamed) {
	          if (ensureLiveReference) {
	            builder.var(importedSource).read(name);
	          } else {
	            builder.var(name).prop(importName);
	          }
	        }
	      }
	    } else {
	      throw new Error(`Unknown importedInterop "${importedInterop}".`);
	    }

	    const {
	      statements,
	      resultName
	    } = builder.done();

	    this._insertStatements(statements, importPosition, blockHoist);

	    if ((isDefault || isNamed) && ensureNoContext && resultName.type !== "Identifier") {
	      return sequenceExpression$4([numericLiteral$4(0), resultName]);
	    }

	    return resultName;
	  }

	  _insertStatements(statements, importPosition = "before", blockHoist = 3) {
	    const body = this._programPath.get("body");

	    if (importPosition === "after") {
	      for (let i = body.length - 1; i >= 0; i--) {
	        if (body[i].isImportDeclaration()) {
	          body[i].insertAfter(statements);
	          return;
	        }
	      }
	    } else {
	      statements.forEach(node => {
	        node._blockHoist = blockHoist;
	      });
	      const targetPath = body.find(p => {
	        const val = p.node._blockHoist;
	        return Number.isFinite(val) && val < 4;
	      });

	      if (targetPath) {
	        targetPath.insertBefore(statements);
	        return;
	      }
	    }

	    this._programPath.unshiftContainer("body", statements);
	  }

	}

	importInjector.default = ImportInjector;

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.addDefault = addDefault;
	exports.addNamed = addNamed;
	exports.addNamespace = addNamespace;
	exports.addSideEffect = addSideEffect;
	Object.defineProperty(exports, "ImportInjector", {
	  enumerable: true,
	  get: function () {
	    return _importInjector.default;
	  }
	});
	Object.defineProperty(exports, "isModule", {
	  enumerable: true,
	  get: function () {
	    return _isModule.default;
	  }
	});

	var _importInjector = importInjector;

	var _isModule = isModule$1;

	function addDefault(path, importedSource, opts) {
	  return new _importInjector.default(path).addDefault(importedSource, opts);
	}

	function addNamed(path, name, importedSource, opts) {
	  return new _importInjector.default(path).addNamed(name, importedSource, opts);
	}

	function addNamespace(path, importedSource, opts) {
	  return new _importInjector.default(path).addNamespace(importedSource, opts);
	}

	function addSideEffect(path, importedSource, opts) {
	  return new _importInjector.default(path).addSideEffect(importedSource, opts);
	}
	}(lib$h));

	var rewriteThis$1 = {};

	var lib$g = {};

	var lib$f = {};

	Object.defineProperty(lib$f, '__esModule', { value: true });

	var _t$8 = lib$s;

	function _interopNamespace$1(e) {
	  if (e && e.__esModule) return e;
	  var n = Object.create(null);
	  if (e) {
	    Object.keys(e).forEach(function (k) {
	      if (k !== 'default') {
	        var d = Object.getOwnPropertyDescriptor(e, k);
	        Object.defineProperty(n, k, d.get ? d : {
	          enumerable: true,
	          get: function () {
	            return e[k];
	          }
	        });
	      }
	    });
	  }
	  n['default'] = e;
	  return Object.freeze(n);
	}

	var _t__namespace = /*#__PURE__*/_interopNamespace$1(_t$8);

	function willPathCastToBoolean(path) {
	  const maybeWrapped = path;
	  const {
	    node,
	    parentPath
	  } = maybeWrapped;

	  if (parentPath.isLogicalExpression()) {
	    const {
	      operator,
	      right
	    } = parentPath.node;

	    if (operator === "&&" || operator === "||" || operator === "??" && node === right) {
	      return willPathCastToBoolean(parentPath);
	    }
	  }

	  if (parentPath.isSequenceExpression()) {
	    const {
	      expressions
	    } = parentPath.node;

	    if (expressions[expressions.length - 1] === node) {
	      return willPathCastToBoolean(parentPath);
	    } else {
	      return true;
	    }
	  }

	  return parentPath.isConditional({
	    test: node
	  }) || parentPath.isUnaryExpression({
	    operator: "!"
	  }) || parentPath.isLoop({
	    test: node
	  });
	}

	const {
	  LOGICAL_OPERATORS: LOGICAL_OPERATORS$1,
	  arrowFunctionExpression,
	  assignmentExpression: assignmentExpression$4,
	  binaryExpression: binaryExpression$2,
	  booleanLiteral: booleanLiteral$1,
	  callExpression: callExpression$4,
	  cloneNode: cloneNode$6,
	  conditionalExpression: conditionalExpression$1,
	  identifier: identifier$5,
	  isMemberExpression: isMemberExpression$1,
	  isOptionalCallExpression,
	  isOptionalMemberExpression,
	  isUpdateExpression,
	  logicalExpression: logicalExpression$1,
	  memberExpression: memberExpression$4,
	  nullLiteral,
	  numericLiteral: numericLiteral$3,
	  optionalCallExpression: optionalCallExpression$1,
	  optionalMemberExpression: optionalMemberExpression$1,
	  sequenceExpression: sequenceExpression$3,
	  unaryExpression: unaryExpression$3
	} = _t__namespace;

	class AssignmentMemoiser {
	  constructor() {
	    this._map = void 0;
	    this._map = new WeakMap();
	  }

	  has(key) {
	    return this._map.has(key);
	  }

	  get(key) {
	    if (!this.has(key)) return;

	    const record = this._map.get(key);

	    const {
	      value
	    } = record;
	    record.count--;

	    if (record.count === 0) {
	      return assignmentExpression$4("=", value, key);
	    }

	    return value;
	  }

	  set(key, value, count) {
	    return this._map.set(key, {
	      count,
	      value
	    });
	  }

	}

	function toNonOptional(path, base) {
	  const {
	    node
	  } = path;

	  if (isOptionalMemberExpression(node)) {
	    return memberExpression$4(base, node.property, node.computed);
	  }

	  if (path.isOptionalCallExpression()) {
	    const callee = path.get("callee");

	    if (path.node.optional && callee.isOptionalMemberExpression()) {
	      const {
	        object
	      } = callee.node;
	      const context = path.scope.maybeGenerateMemoised(object) || object;
	      callee.get("object").replaceWith(assignmentExpression$4("=", context, object));
	      return callExpression$4(memberExpression$4(base, identifier$5("call")), [context, ...path.node.arguments]);
	    }

	    return callExpression$4(base, path.node.arguments);
	  }

	  return path.node;
	}

	function isInDetachedTree(path) {
	  while (path) {
	    if (path.isProgram()) break;
	    const {
	      parentPath,
	      container,
	      listKey
	    } = path;
	    const parentNode = parentPath.node;

	    if (listKey) {
	      if (container !== parentNode[listKey]) return true;
	    } else {
	      if (container !== parentNode) return true;
	    }

	    path = parentPath;
	  }

	  return false;
	}

	const handle = {
	  memoise() {},

	  handle(member, noDocumentAll) {
	    const {
	      node,
	      parent,
	      parentPath,
	      scope
	    } = member;

	    if (member.isOptionalMemberExpression()) {
	      if (isInDetachedTree(member)) return;
	      const endPath = member.find(({
	        node,
	        parent
	      }) => {
	        if (isOptionalMemberExpression(parent)) {
	          return parent.optional || parent.object !== node;
	        }

	        if (isOptionalCallExpression(parent)) {
	          return node !== member.node && parent.optional || parent.callee !== node;
	        }

	        return true;
	      });

	      if (scope.path.isPattern()) {
	        endPath.replaceWith(callExpression$4(arrowFunctionExpression([], endPath.node), []));
	        return;
	      }

	      const willEndPathCastToBoolean = willPathCastToBoolean(endPath);
	      const rootParentPath = endPath.parentPath;

	      if (rootParentPath.isUpdateExpression({
	        argument: node
	      }) || rootParentPath.isAssignmentExpression({
	        left: node
	      })) {
	        throw member.buildCodeFrameError(`can't handle assignment`);
	      }

	      const isDeleteOperation = rootParentPath.isUnaryExpression({
	        operator: "delete"
	      });

	      if (isDeleteOperation && endPath.isOptionalMemberExpression() && endPath.get("property").isPrivateName()) {
	        throw member.buildCodeFrameError(`can't delete a private class element`);
	      }

	      let startingOptional = member;

	      for (;;) {
	        if (startingOptional.isOptionalMemberExpression()) {
	          if (startingOptional.node.optional) break;
	          startingOptional = startingOptional.get("object");
	          continue;
	        } else if (startingOptional.isOptionalCallExpression()) {
	          if (startingOptional.node.optional) break;
	          startingOptional = startingOptional.get("callee");
	          continue;
	        }

	        throw new Error(`Internal error: unexpected ${startingOptional.node.type}`);
	      }

	      const startingProp = startingOptional.isOptionalMemberExpression() ? "object" : "callee";
	      const startingNode = startingOptional.node[startingProp];
	      const baseNeedsMemoised = scope.maybeGenerateMemoised(startingNode);
	      const baseRef = baseNeedsMemoised != null ? baseNeedsMemoised : startingNode;
	      const parentIsOptionalCall = parentPath.isOptionalCallExpression({
	        callee: node
	      });

	      const isOptionalCall = parent => parentIsOptionalCall;

	      const parentIsCall = parentPath.isCallExpression({
	        callee: node
	      });
	      startingOptional.replaceWith(toNonOptional(startingOptional, baseRef));

	      if (isOptionalCall()) {
	        if (parent.optional) {
	          parentPath.replaceWith(this.optionalCall(member, parent.arguments));
	        } else {
	          parentPath.replaceWith(this.call(member, parent.arguments));
	        }
	      } else if (parentIsCall) {
	        member.replaceWith(this.boundGet(member));
	      } else {
	        member.replaceWith(this.get(member));
	      }

	      let regular = member.node;

	      for (let current = member; current !== endPath;) {
	        const parentPath = current.parentPath;

	        if (parentPath === endPath && isOptionalCall() && parent.optional) {
	          regular = parentPath.node;
	          break;
	        }

	        regular = toNonOptional(parentPath, regular);
	        current = parentPath;
	      }

	      let context;
	      const endParentPath = endPath.parentPath;

	      if (isMemberExpression$1(regular) && endParentPath.isOptionalCallExpression({
	        callee: endPath.node,
	        optional: true
	      })) {
	        const {
	          object
	        } = regular;
	        context = member.scope.maybeGenerateMemoised(object);

	        if (context) {
	          regular.object = assignmentExpression$4("=", context, object);
	        }
	      }

	      let replacementPath = endPath;

	      if (isDeleteOperation) {
	        replacementPath = endParentPath;
	        regular = endParentPath.node;
	      }

	      const baseMemoised = baseNeedsMemoised ? assignmentExpression$4("=", cloneNode$6(baseRef), cloneNode$6(startingNode)) : cloneNode$6(baseRef);

	      if (willEndPathCastToBoolean) {
	        let nonNullishCheck;

	        if (noDocumentAll) {
	          nonNullishCheck = binaryExpression$2("!=", baseMemoised, nullLiteral());
	        } else {
	          nonNullishCheck = logicalExpression$1("&&", binaryExpression$2("!==", baseMemoised, nullLiteral()), binaryExpression$2("!==", cloneNode$6(baseRef), scope.buildUndefinedNode()));
	        }

	        replacementPath.replaceWith(logicalExpression$1("&&", nonNullishCheck, regular));
	      } else {
	        let nullishCheck;

	        if (noDocumentAll) {
	          nullishCheck = binaryExpression$2("==", baseMemoised, nullLiteral());
	        } else {
	          nullishCheck = logicalExpression$1("||", binaryExpression$2("===", baseMemoised, nullLiteral()), binaryExpression$2("===", cloneNode$6(baseRef), scope.buildUndefinedNode()));
	        }

	        replacementPath.replaceWith(conditionalExpression$1(nullishCheck, isDeleteOperation ? booleanLiteral$1(true) : scope.buildUndefinedNode(), regular));
	      }

	      if (context) {
	        const endParent = endParentPath.node;
	        endParentPath.replaceWith(optionalCallExpression$1(optionalMemberExpression$1(endParent.callee, identifier$5("call"), false, true), [cloneNode$6(context), ...endParent.arguments], false));
	      }

	      return;
	    }

	    if (isUpdateExpression(parent, {
	      argument: node
	    })) {
	      if (this.simpleSet) {
	        member.replaceWith(this.simpleSet(member));
	        return;
	      }

	      const {
	        operator,
	        prefix
	      } = parent;
	      this.memoise(member, 2);
	      const value = binaryExpression$2(operator[0], unaryExpression$3("+", this.get(member)), numericLiteral$3(1));

	      if (prefix) {
	        parentPath.replaceWith(this.set(member, value));
	      } else {
	        const {
	          scope
	        } = member;
	        const ref = scope.generateUidIdentifierBasedOnNode(node);
	        scope.push({
	          id: ref
	        });
	        value.left = assignmentExpression$4("=", cloneNode$6(ref), value.left);
	        parentPath.replaceWith(sequenceExpression$3([this.set(member, value), cloneNode$6(ref)]));
	      }

	      return;
	    }

	    if (parentPath.isAssignmentExpression({
	      left: node
	    })) {
	      if (this.simpleSet) {
	        member.replaceWith(this.simpleSet(member));
	        return;
	      }

	      const {
	        operator,
	        right: value
	      } = parentPath.node;

	      if (operator === "=") {
	        parentPath.replaceWith(this.set(member, value));
	      } else {
	        const operatorTrunc = operator.slice(0, -1);

	        if (LOGICAL_OPERATORS$1.includes(operatorTrunc)) {
	          this.memoise(member, 1);
	          parentPath.replaceWith(logicalExpression$1(operatorTrunc, this.get(member), this.set(member, value)));
	        } else {
	          this.memoise(member, 2);
	          parentPath.replaceWith(this.set(member, binaryExpression$2(operatorTrunc, this.get(member), value)));
	        }
	      }

	      return;
	    }

	    if (parentPath.isCallExpression({
	      callee: node
	    })) {
	      parentPath.replaceWith(this.call(member, parentPath.node.arguments));
	      return;
	    }

	    if (parentPath.isOptionalCallExpression({
	      callee: node
	    })) {
	      if (scope.path.isPattern()) {
	        parentPath.replaceWith(callExpression$4(arrowFunctionExpression([], parentPath.node), []));
	        return;
	      }

	      parentPath.replaceWith(this.optionalCall(member, parentPath.node.arguments));
	      return;
	    }

	    if (parentPath.isForXStatement({
	      left: node
	    }) || parentPath.isObjectProperty({
	      value: node
	    }) && parentPath.parentPath.isObjectPattern() || parentPath.isAssignmentPattern({
	      left: node
	    }) && parentPath.parentPath.isObjectProperty({
	      value: parent
	    }) && parentPath.parentPath.parentPath.isObjectPattern() || parentPath.isArrayPattern() || parentPath.isAssignmentPattern({
	      left: node
	    }) && parentPath.parentPath.isArrayPattern() || parentPath.isRestElement()) {
	      member.replaceWith(this.destructureSet(member));
	      return;
	    }

	    if (parentPath.isTaggedTemplateExpression()) {
	      member.replaceWith(this.boundGet(member));
	    } else {
	      member.replaceWith(this.get(member));
	    }
	  }

	};
	function memberExpressionToFunctions(path, visitor, state) {
	  path.traverse(visitor, Object.assign({}, handle, state, {
	    memoiser: new AssignmentMemoiser()
	  }));
	}

	lib$f.default = memberExpressionToFunctions;

	var lib$e = {};

	Object.defineProperty(lib$e, "__esModule", {
	  value: true
	});
	lib$e.default = optimiseCallExpression;

	var _t$7 = lib$s;

	const {
	  callExpression: callExpression$3,
	  identifier: identifier$4,
	  isIdentifier,
	  isSpreadElement,
	  memberExpression: memberExpression$3,
	  optionalCallExpression,
	  optionalMemberExpression
	} = _t$7;

	function optimiseCallExpression(callee, thisNode, args, optional) {
	  if (args.length === 1 && isSpreadElement(args[0]) && isIdentifier(args[0].argument, {
	    name: "arguments"
	  })) {
	    if (optional) {
	      return optionalCallExpression(optionalMemberExpression(callee, identifier$4("apply"), false, true), [thisNode, args[0].argument], false);
	    }

	    return callExpression$3(memberExpression$3(callee, identifier$4("apply")), [thisNode, args[0].argument]);
	  } else {
	    if (optional) {
	      return optionalCallExpression(optionalMemberExpression(callee, identifier$4("call"), false, true), [thisNode, ...args], false);
	    }

	    return callExpression$3(memberExpression$3(callee, identifier$4("call")), [thisNode, ...args]);
	  }
	}

	Object.defineProperty(lib$g, "__esModule", {
	  value: true
	});
	lib$g.skipAllButComputedKey = skipAllButComputedKey;
	lib$g.default = lib$g.environmentVisitor = void 0;

	var _traverse$5 = lib$t;

	var _helperMemberExpressionToFunctions = lib$f;

	var _helperOptimiseCallExpression = lib$e;

	var _t$6 = lib$s;

	const {
	  VISITOR_KEYS,
	  assignmentExpression: assignmentExpression$3,
	  booleanLiteral,
	  callExpression: callExpression$2,
	  cloneNode: cloneNode$5,
	  identifier: identifier$3,
	  memberExpression: memberExpression$2,
	  sequenceExpression: sequenceExpression$2,
	  staticBlock,
	  stringLiteral: stringLiteral$2,
	  thisExpression
	} = _t$6;

	function getPrototypeOfExpression(objectRef, isStatic, file, isPrivateMethod) {
	  objectRef = cloneNode$5(objectRef);
	  const targetRef = isStatic || isPrivateMethod ? objectRef : memberExpression$2(objectRef, identifier$3("prototype"));
	  return callExpression$2(file.addHelper("getPrototypeOf"), [targetRef]);
	}

	function skipAllButComputedKey(path) {
	  if (!path.node.computed) {
	    path.skip();
	    return;
	  }

	  const keys = VISITOR_KEYS[path.type];

	  for (const key of keys) {
	    if (key !== "key") path.skipKey(key);
	  }
	}

	const environmentVisitor = {
	  [`${staticBlock ? "StaticBlock|" : ""}ClassPrivateProperty|TypeAnnotation`](path) {
	    path.skip();
	  },

	  Function(path) {
	    if (path.isMethod()) return;
	    if (path.isArrowFunctionExpression()) return;
	    path.skip();
	  },

	  "Method|ClassProperty"(path) {
	    skipAllButComputedKey(path);
	  }

	};
	lib$g.environmentVisitor = environmentVisitor;

	const visitor = _traverse$5.default.visitors.merge([environmentVisitor, {
	  Super(path, state) {
	    const {
	      node,
	      parentPath
	    } = path;
	    if (!parentPath.isMemberExpression({
	      object: node
	    })) return;
	    state.handle(parentPath);
	  }

	}]);

	const unshadowSuperBindingVisitor = _traverse$5.default.visitors.merge([environmentVisitor, {
	  Scopable(path, {
	    refName
	  }) {
	    const binding = path.scope.getOwnBinding(refName);

	    if (binding && binding.identifier.name === refName) {
	      path.scope.rename(refName);
	    }
	  }

	}]);

	const specHandlers = {
	  memoise(superMember, count) {
	    const {
	      scope,
	      node
	    } = superMember;
	    const {
	      computed,
	      property
	    } = node;

	    if (!computed) {
	      return;
	    }

	    const memo = scope.maybeGenerateMemoised(property);

	    if (!memo) {
	      return;
	    }

	    this.memoiser.set(property, memo, count);
	  },

	  prop(superMember) {
	    const {
	      computed,
	      property
	    } = superMember.node;

	    if (this.memoiser.has(property)) {
	      return cloneNode$5(this.memoiser.get(property));
	    }

	    if (computed) {
	      return cloneNode$5(property);
	    }

	    return stringLiteral$2(property.name);
	  },

	  get(superMember) {
	    return this._get(superMember, this._getThisRefs());
	  },

	  _get(superMember, thisRefs) {
	    const proto = getPrototypeOfExpression(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
	    return callExpression$2(this.file.addHelper("get"), [thisRefs.memo ? sequenceExpression$2([thisRefs.memo, proto]) : proto, this.prop(superMember), thisRefs.this]);
	  },

	  _getThisRefs() {
	    if (!this.isDerivedConstructor) {
	      return {
	        this: thisExpression()
	      };
	    }

	    const thisRef = this.scope.generateDeclaredUidIdentifier("thisSuper");
	    return {
	      memo: assignmentExpression$3("=", thisRef, thisExpression()),
	      this: cloneNode$5(thisRef)
	    };
	  },

	  set(superMember, value) {
	    const thisRefs = this._getThisRefs();

	    const proto = getPrototypeOfExpression(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
	    return callExpression$2(this.file.addHelper("set"), [thisRefs.memo ? sequenceExpression$2([thisRefs.memo, proto]) : proto, this.prop(superMember), value, thisRefs.this, booleanLiteral(superMember.isInStrictMode())]);
	  },

	  destructureSet(superMember) {
	    throw superMember.buildCodeFrameError(`Destructuring to a super field is not supported yet.`);
	  },

	  call(superMember, args) {
	    const thisRefs = this._getThisRefs();

	    return (0, _helperOptimiseCallExpression.default)(this._get(superMember, thisRefs), cloneNode$5(thisRefs.this), args, false);
	  },

	  optionalCall(superMember, args) {
	    const thisRefs = this._getThisRefs();

	    return (0, _helperOptimiseCallExpression.default)(this._get(superMember, thisRefs), cloneNode$5(thisRefs.this), args, true);
	  }

	};
	const looseHandlers = Object.assign({}, specHandlers, {
	  prop(superMember) {
	    const {
	      property
	    } = superMember.node;

	    if (this.memoiser.has(property)) {
	      return cloneNode$5(this.memoiser.get(property));
	    }

	    return cloneNode$5(property);
	  },

	  get(superMember) {
	    const {
	      isStatic,
	      getSuperRef
	    } = this;
	    const {
	      computed
	    } = superMember.node;
	    const prop = this.prop(superMember);
	    let object;

	    if (isStatic) {
	      var _getSuperRef;

	      object = (_getSuperRef = getSuperRef()) != null ? _getSuperRef : memberExpression$2(identifier$3("Function"), identifier$3("prototype"));
	    } else {
	      var _getSuperRef2;

	      object = memberExpression$2((_getSuperRef2 = getSuperRef()) != null ? _getSuperRef2 : identifier$3("Object"), identifier$3("prototype"));
	    }

	    return memberExpression$2(object, prop, computed);
	  },

	  set(superMember, value) {
	    const {
	      computed
	    } = superMember.node;
	    const prop = this.prop(superMember);
	    return assignmentExpression$3("=", memberExpression$2(thisExpression(), prop, computed), value);
	  },

	  destructureSet(superMember) {
	    const {
	      computed
	    } = superMember.node;
	    const prop = this.prop(superMember);
	    return memberExpression$2(thisExpression(), prop, computed);
	  },

	  call(superMember, args) {
	    return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, false);
	  },

	  optionalCall(superMember, args) {
	    return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, true);
	  }

	});

	class ReplaceSupers {
	  constructor(opts) {
	    var _opts$constantSuper;

	    const path = opts.methodPath;
	    this.methodPath = path;
	    this.isDerivedConstructor = path.isClassMethod({
	      kind: "constructor"
	    }) && !!opts.superRef;
	    this.isStatic = path.isObjectMethod() || path.node.static || (path.isStaticBlock == null ? void 0 : path.isStaticBlock());
	    this.isPrivateMethod = path.isPrivate() && path.isMethod();
	    this.file = opts.file;
	    this.constantSuper = (_opts$constantSuper = opts.constantSuper) != null ? _opts$constantSuper : opts.isLoose;
	    this.opts = opts;
	  }

	  getObjectRef() {
	    return cloneNode$5(this.opts.objectRef || this.opts.getObjectRef());
	  }

	  getSuperRef() {
	    if (this.opts.superRef) return cloneNode$5(this.opts.superRef);
	    if (this.opts.getSuperRef) return cloneNode$5(this.opts.getSuperRef());
	  }

	  replace() {
	    if (this.opts.refToPreserve) {
	      this.methodPath.traverse(unshadowSuperBindingVisitor, {
	        refName: this.opts.refToPreserve.name
	      });
	    }

	    const handler = this.constantSuper ? looseHandlers : specHandlers;
	    (0, _helperMemberExpressionToFunctions.default)(this.methodPath, visitor, Object.assign({
	      file: this.file,
	      scope: this.methodPath.scope,
	      isDerivedConstructor: this.isDerivedConstructor,
	      isStatic: this.isStatic,
	      isPrivateMethod: this.isPrivateMethod,
	      getObjectRef: this.getObjectRef.bind(this),
	      getSuperRef: this.getSuperRef.bind(this),
	      boundGet: handler.get
	    }, handler));
	  }

	}

	lib$g.default = ReplaceSupers;

	Object.defineProperty(rewriteThis$1, "__esModule", {
	  value: true
	});
	rewriteThis$1.default = rewriteThis;

	var _helperReplaceSupers = lib$g;

	var _traverse$4 = lib$t;

	var _t$5 = lib$s;

	const {
	  numericLiteral: numericLiteral$2,
	  unaryExpression: unaryExpression$2
	} = _t$5;

	function rewriteThis(programPath) {
	  (0, _traverse$4.default)(programPath.node, Object.assign({}, rewriteThisVisitor, {
	    noScope: true
	  }));
	}

	const rewriteThisVisitor = _traverse$4.default.visitors.merge([_helperReplaceSupers.environmentVisitor, {
	  ThisExpression(path) {
	    path.replaceWith(unaryExpression$2("void", numericLiteral$2(0), true));
	  }

	}]);

	var rewriteLiveReferences$1 = {};

	var lib$d = {};

	Object.defineProperty(lib$d, "__esModule", {
	  value: true
	});
	lib$d.default = simplifyAccess;

	var _t$4 = lib$s;

	const {
	  LOGICAL_OPERATORS,
	  assignmentExpression: assignmentExpression$2,
	  binaryExpression: binaryExpression$1,
	  cloneNode: cloneNode$4,
	  identifier: identifier$2,
	  logicalExpression,
	  numericLiteral: numericLiteral$1,
	  sequenceExpression: sequenceExpression$1,
	  unaryExpression: unaryExpression$1
	} = _t$4;

	function simplifyAccess(path, bindingNames) {
	  path.traverse(simpleAssignmentVisitor, {
	    scope: path.scope,
	    bindingNames,
	    seen: new WeakSet()
	  });
	}

	const simpleAssignmentVisitor = {
	  UpdateExpression: {
	    exit(path) {
	      const {
	        scope,
	        bindingNames
	      } = this;
	      const arg = path.get("argument");
	      if (!arg.isIdentifier()) return;
	      const localName = arg.node.name;
	      if (!bindingNames.has(localName)) return;

	      if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {
	        return;
	      }

	      if (path.parentPath.isExpressionStatement() && !path.isCompletionRecord()) {
	        const operator = path.node.operator == "++" ? "+=" : "-=";
	        path.replaceWith(assignmentExpression$2(operator, arg.node, numericLiteral$1(1)));
	      } else if (path.node.prefix) {
	        path.replaceWith(assignmentExpression$2("=", identifier$2(localName), binaryExpression$1(path.node.operator[0], unaryExpression$1("+", arg.node), numericLiteral$1(1))));
	      } else {
	        const old = path.scope.generateUidIdentifierBasedOnNode(arg.node, "old");
	        const varName = old.name;
	        path.scope.push({
	          id: old
	        });
	        const binary = binaryExpression$1(path.node.operator[0], identifier$2(varName), numericLiteral$1(1));
	        path.replaceWith(sequenceExpression$1([assignmentExpression$2("=", identifier$2(varName), unaryExpression$1("+", arg.node)), assignmentExpression$2("=", cloneNode$4(arg.node), binary), identifier$2(varName)]));
	      }
	    }

	  },
	  AssignmentExpression: {
	    exit(path) {
	      const {
	        scope,
	        seen,
	        bindingNames
	      } = this;
	      if (path.node.operator === "=") return;
	      if (seen.has(path.node)) return;
	      seen.add(path.node);
	      const left = path.get("left");
	      if (!left.isIdentifier()) return;
	      const localName = left.node.name;
	      if (!bindingNames.has(localName)) return;

	      if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {
	        return;
	      }

	      const operator = path.node.operator.slice(0, -1);

	      if (LOGICAL_OPERATORS.includes(operator)) {
	        path.replaceWith(logicalExpression(operator, path.node.left, assignmentExpression$2("=", cloneNode$4(path.node.left), path.node.right)));
	      } else {
	        path.node.right = binaryExpression$1(operator, cloneNode$4(path.node.left), path.node.right);
	        path.node.operator = "=";
	      }
	    }

	  }
	};

	Object.defineProperty(rewriteLiveReferences$1, "__esModule", {
	  value: true
	});
	rewriteLiveReferences$1.default = rewriteLiveReferences;

	var _assert = require$$1__default['default'];

	var _t$3 = lib$s;

	var _template$1 = lib$j;

	var _helperSimpleAccess = lib$d;

	const {
	  assignmentExpression: assignmentExpression$1,
	  callExpression: callExpression$1,
	  cloneNode: cloneNode$3,
	  expressionStatement: expressionStatement$1,
	  getOuterBindingIdentifiers,
	  identifier: identifier$1,
	  isMemberExpression,
	  isVariableDeclaration,
	  jsxIdentifier,
	  jsxMemberExpression,
	  memberExpression: memberExpression$1,
	  numericLiteral,
	  sequenceExpression,
	  stringLiteral: stringLiteral$1,
	  variableDeclaration: variableDeclaration$1,
	  variableDeclarator: variableDeclarator$1
	} = _t$3;

	function isInType(path) {
	  do {
	    switch (path.parent.type) {
	      case "TSTypeAnnotation":
	      case "TSTypeAliasDeclaration":
	      case "TSTypeReference":
	      case "TypeAnnotation":
	      case "TypeAlias":
	        return true;

	      case "ExportSpecifier":
	        return path.parentPath.parent.exportKind === "type";

	      default:
	        if (path.parentPath.isStatement() || path.parentPath.isExpression()) {
	          return false;
	        }

	    }
	  } while (path = path.parentPath);
	}

	function rewriteLiveReferences(programPath, metadata) {
	  const imported = new Map();
	  const exported = new Map();

	  const requeueInParent = path => {
	    programPath.requeue(path);
	  };

	  for (const [source, data] of metadata.source) {
	    for (const [localName, importName] of data.imports) {
	      imported.set(localName, [source, importName, null]);
	    }

	    for (const localName of data.importsNamespace) {
	      imported.set(localName, [source, null, localName]);
	    }
	  }

	  for (const [local, data] of metadata.local) {
	    let exportMeta = exported.get(local);

	    if (!exportMeta) {
	      exportMeta = [];
	      exported.set(local, exportMeta);
	    }

	    exportMeta.push(...data.names);
	  }

	  const rewriteBindingInitVisitorState = {
	    metadata,
	    requeueInParent,
	    scope: programPath.scope,
	    exported
	  };
	  programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);
	  (0, _helperSimpleAccess.default)(programPath, new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]));
	  const rewriteReferencesVisitorState = {
	    seen: new WeakSet(),
	    metadata,
	    requeueInParent,
	    scope: programPath.scope,
	    imported,
	    exported,
	    buildImportReference: ([source, importName, localName], identNode) => {
	      const meta = metadata.source.get(source);

	      if (localName) {
	        if (meta.lazy) identNode = callExpression$1(identNode, []);
	        return identNode;
	      }

	      let namespace = identifier$1(meta.name);
	      if (meta.lazy) namespace = callExpression$1(namespace, []);

	      if (importName === "default" && meta.interop === "node-default") {
	        return namespace;
	      }

	      const computed = metadata.stringSpecifiers.has(importName);
	      return memberExpression$1(namespace, computed ? stringLiteral$1(importName) : identifier$1(importName), computed);
	    }
	  };
	  programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);
	}

	const rewriteBindingInitVisitor = {
	  Scope(path) {
	    path.skip();
	  },

	  ClassDeclaration(path) {
	    const {
	      requeueInParent,
	      exported,
	      metadata
	    } = this;
	    const {
	      id
	    } = path.node;
	    if (!id) throw new Error("Expected class to have a name");
	    const localName = id.name;
	    const exportNames = exported.get(localName) || [];

	    if (exportNames.length > 0) {
	      const statement = expressionStatement$1(buildBindingExportAssignmentExpression(metadata, exportNames, identifier$1(localName)));
	      statement._blockHoist = path.node._blockHoist;
	      requeueInParent(path.insertAfter(statement)[0]);
	    }
	  },

	  VariableDeclaration(path) {
	    const {
	      requeueInParent,
	      exported,
	      metadata
	    } = this;
	    Object.keys(path.getOuterBindingIdentifiers()).forEach(localName => {
	      const exportNames = exported.get(localName) || [];

	      if (exportNames.length > 0) {
	        const statement = expressionStatement$1(buildBindingExportAssignmentExpression(metadata, exportNames, identifier$1(localName)));
	        statement._blockHoist = path.node._blockHoist;
	        requeueInParent(path.insertAfter(statement)[0]);
	      }
	    });
	  }

	};

	const buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr) => {
	  return (exportNames || []).reduce((expr, exportName) => {
	    const {
	      stringSpecifiers
	    } = metadata;
	    const computed = stringSpecifiers.has(exportName);
	    return assignmentExpression$1("=", memberExpression$1(identifier$1(metadata.exportName), computed ? stringLiteral$1(exportName) : identifier$1(exportName), computed), expr);
	  }, localExpr);
	};

	const buildImportThrow = localName => {
	  return _template$1.default.expression.ast`
    (function() {
      throw new Error('"' + '${localName}' + '" is read-only.');
    })()
  `;
	};

	const rewriteReferencesVisitor = {
	  ReferencedIdentifier(path) {
	    const {
	      seen,
	      buildImportReference,
	      scope,
	      imported,
	      requeueInParent
	    } = this;
	    if (seen.has(path.node)) return;
	    seen.add(path.node);
	    const localName = path.node.name;
	    const importData = imported.get(localName);

	    if (importData) {
	      if (isInType(path)) {
	        throw path.buildCodeFrameError(`Cannot transform the imported binding "${localName}" since it's also used in a type annotation. ` + `Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);
	      }

	      const localBinding = path.scope.getBinding(localName);
	      const rootBinding = scope.getBinding(localName);
	      if (rootBinding !== localBinding) return;
	      const ref = buildImportReference(importData, path.node);
	      ref.loc = path.node.loc;

	      if ((path.parentPath.isCallExpression({
	        callee: path.node
	      }) || path.parentPath.isOptionalCallExpression({
	        callee: path.node
	      }) || path.parentPath.isTaggedTemplateExpression({
	        tag: path.node
	      })) && isMemberExpression(ref)) {
	        path.replaceWith(sequenceExpression([numericLiteral(0), ref]));
	      } else if (path.isJSXIdentifier() && isMemberExpression(ref)) {
	        const {
	          object,
	          property
	        } = ref;
	        path.replaceWith(jsxMemberExpression(jsxIdentifier(object.name), jsxIdentifier(property.name)));
	      } else {
	        path.replaceWith(ref);
	      }

	      requeueInParent(path);
	      path.skip();
	    }
	  },

	  AssignmentExpression: {
	    exit(path) {
	      const {
	        scope,
	        seen,
	        imported,
	        exported,
	        requeueInParent,
	        buildImportReference
	      } = this;
	      if (seen.has(path.node)) return;
	      seen.add(path.node);
	      const left = path.get("left");
	      if (left.isMemberExpression()) return;

	      if (left.isIdentifier()) {
	        const localName = left.node.name;

	        if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {
	          return;
	        }

	        const exportedNames = exported.get(localName);
	        const importData = imported.get(localName);

	        if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {
	          _assert(path.node.operator === "=", "Path was not simplified");

	          const assignment = path.node;

	          if (importData) {
	            assignment.left = buildImportReference(importData, assignment.left);
	            assignment.right = sequenceExpression([assignment.right, buildImportThrow(localName)]);
	          }

	          path.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment));
	          requeueInParent(path);
	        }
	      } else {
	        const ids = left.getOuterBindingIdentifiers();
	        const programScopeIds = Object.keys(ids).filter(localName => scope.getBinding(localName) === path.scope.getBinding(localName));
	        const id = programScopeIds.find(localName => imported.has(localName));

	        if (id) {
	          path.node.right = sequenceExpression([path.node.right, buildImportThrow(id)]);
	        }

	        const items = [];
	        programScopeIds.forEach(localName => {
	          const exportedNames = exported.get(localName) || [];

	          if (exportedNames.length > 0) {
	            items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier$1(localName)));
	          }
	        });

	        if (items.length > 0) {
	          let node = sequenceExpression(items);

	          if (path.parentPath.isExpressionStatement()) {
	            node = expressionStatement$1(node);
	            node._blockHoist = path.parentPath.node._blockHoist;
	          }

	          const statement = path.insertAfter(node)[0];
	          requeueInParent(statement);
	        }
	      }
	    }

	  },

	  "ForOfStatement|ForInStatement"(path) {
	    const {
	      scope,
	      node
	    } = path;
	    const {
	      left
	    } = node;
	    const {
	      exported,
	      imported,
	      scope: programScope
	    } = this;

	    if (!isVariableDeclaration(left)) {
	      let didTransformExport = false,
	          importConstViolationName;
	      const loopBodyScope = path.get("body").scope;

	      for (const name of Object.keys(getOuterBindingIdentifiers(left))) {
	        if (programScope.getBinding(name) === scope.getBinding(name)) {
	          if (exported.has(name)) {
	            didTransformExport = true;

	            if (loopBodyScope.hasOwnBinding(name)) {
	              loopBodyScope.rename(name);
	            }
	          }

	          if (imported.has(name) && !importConstViolationName) {
	            importConstViolationName = name;
	          }
	        }
	      }

	      if (!didTransformExport && !importConstViolationName) {
	        return;
	      }

	      path.ensureBlock();
	      const bodyPath = path.get("body");
	      const newLoopId = scope.generateUidIdentifierBasedOnNode(left);
	      path.get("left").replaceWith(variableDeclaration$1("let", [variableDeclarator$1(cloneNode$3(newLoopId))]));
	      scope.registerDeclaration(path.get("left"));

	      if (didTransformExport) {
	        bodyPath.unshiftContainer("body", expressionStatement$1(assignmentExpression$1("=", left, newLoopId)));
	      }

	      if (importConstViolationName) {
	        bodyPath.unshiftContainer("body", expressionStatement$1(buildImportThrow(importConstViolationName)));
	      }
	    }
	  }

	};

	var normalizeAndLoadMetadata = {};

	Object.defineProperty(normalizeAndLoadMetadata, "__esModule", {
	  value: true
	});
	normalizeAndLoadMetadata.hasExports = hasExports;
	normalizeAndLoadMetadata.isSideEffectImport = isSideEffectImport;
	normalizeAndLoadMetadata.validateImportInteropOption = validateImportInteropOption;
	normalizeAndLoadMetadata.default = normalizeModuleAndLoadMetadata;

	var _path$b = require$$0__default['default'];

	var _helperValidatorIdentifier = lib$r;

	var _helperSplitExportDeclaration = lib$q;

	function hasExports(metadata) {
	  return metadata.hasExports;
	}

	function isSideEffectImport(source) {
	  return source.imports.size === 0 && source.importsNamespace.size === 0 && source.reexports.size === 0 && source.reexportNamespace.size === 0 && !source.reexportAll;
	}

	function validateImportInteropOption(importInterop) {
	  if (typeof importInterop !== "function" && importInterop !== "none" && importInterop !== "babel" && importInterop !== "node") {
	    throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${importInterop}).`);
	  }

	  return importInterop;
	}

	function resolveImportInterop(importInterop, source) {
	  if (typeof importInterop === "function") {
	    return validateImportInteropOption(importInterop(source));
	  }

	  return importInterop;
	}

	function normalizeModuleAndLoadMetadata(programPath, exportName, {
	  importInterop,
	  initializeReexports = false,
	  lazy = false,
	  esNamespaceOnly = false
	}) {
	  if (!exportName) {
	    exportName = programPath.scope.generateUidIdentifier("exports").name;
	  }

	  const stringSpecifiers = new Set();
	  nameAnonymousExports(programPath);
	  const {
	    local,
	    source,
	    hasExports
	  } = getModuleMetadata(programPath, {
	    initializeReexports,
	    lazy
	  }, stringSpecifiers);
	  removeModuleDeclarations(programPath);

	  for (const [, metadata] of source) {
	    if (metadata.importsNamespace.size > 0) {
	      metadata.name = metadata.importsNamespace.values().next().value;
	    }

	    const resolvedInterop = resolveImportInterop(importInterop, metadata.source);

	    if (resolvedInterop === "none") {
	      metadata.interop = "none";
	    } else if (resolvedInterop === "node" && metadata.interop === "namespace") {
	      metadata.interop = "node-namespace";
	    } else if (resolvedInterop === "node" && metadata.interop === "default") {
	      metadata.interop = "node-default";
	    } else if (esNamespaceOnly && metadata.interop === "namespace") {
	      metadata.interop = "default";
	    }
	  }

	  return {
	    exportName,
	    exportNameListName: null,
	    hasExports,
	    local,
	    source,
	    stringSpecifiers
	  };
	}

	function getExportSpecifierName(path, stringSpecifiers) {
	  if (path.isIdentifier()) {
	    return path.node.name;
	  } else if (path.isStringLiteral()) {
	    const stringValue = path.node.value;

	    if (!(0, _helperValidatorIdentifier.isIdentifierName)(stringValue)) {
	      stringSpecifiers.add(stringValue);
	    }

	    return stringValue;
	  } else {
	    throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${path.node.type}`);
	  }
	}

	function assertExportSpecifier(path) {
	  if (path.isExportSpecifier()) {
	    return;
	  } else if (path.isExportNamespaceSpecifier()) {
	    throw path.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-proposal-export-namespace-from`.");
	  } else {
	    throw path.buildCodeFrameError("Unexpected export specifier type");
	  }
	}

	function getModuleMetadata(programPath, {
	  lazy,
	  initializeReexports
	}, stringSpecifiers) {
	  const localData = getLocalExportMetadata(programPath, initializeReexports, stringSpecifiers);
	  const sourceData = new Map();

	  const getData = sourceNode => {
	    const source = sourceNode.value;
	    let data = sourceData.get(source);

	    if (!data) {
	      data = {
	        name: programPath.scope.generateUidIdentifier((0, _path$b.basename)(source, (0, _path$b.extname)(source))).name,
	        interop: "none",
	        loc: null,
	        imports: new Map(),
	        importsNamespace: new Set(),
	        reexports: new Map(),
	        reexportNamespace: new Set(),
	        reexportAll: null,
	        lazy: false,
	        source
	      };
	      sourceData.set(source, data);
	    }

	    return data;
	  };

	  let hasExports = false;
	  programPath.get("body").forEach(child => {
	    if (child.isImportDeclaration()) {
	      const data = getData(child.node.source);
	      if (!data.loc) data.loc = child.node.loc;
	      child.get("specifiers").forEach(spec => {
	        if (spec.isImportDefaultSpecifier()) {
	          const localName = spec.get("local").node.name;
	          data.imports.set(localName, "default");
	          const reexport = localData.get(localName);

	          if (reexport) {
	            localData.delete(localName);
	            reexport.names.forEach(name => {
	              data.reexports.set(name, "default");
	            });
	          }
	        } else if (spec.isImportNamespaceSpecifier()) {
	          const localName = spec.get("local").node.name;
	          data.importsNamespace.add(localName);
	          const reexport = localData.get(localName);

	          if (reexport) {
	            localData.delete(localName);
	            reexport.names.forEach(name => {
	              data.reexportNamespace.add(name);
	            });
	          }
	        } else if (spec.isImportSpecifier()) {
	          const importName = getExportSpecifierName(spec.get("imported"), stringSpecifiers);
	          const localName = spec.get("local").node.name;
	          data.imports.set(localName, importName);
	          const reexport = localData.get(localName);

	          if (reexport) {
	            localData.delete(localName);
	            reexport.names.forEach(name => {
	              data.reexports.set(name, importName);
	            });
	          }
	        }
	      });
	    } else if (child.isExportAllDeclaration()) {
	      hasExports = true;
	      const data = getData(child.node.source);
	      if (!data.loc) data.loc = child.node.loc;
	      data.reexportAll = {
	        loc: child.node.loc
	      };
	    } else if (child.isExportNamedDeclaration() && child.node.source) {
	      hasExports = true;
	      const data = getData(child.node.source);
	      if (!data.loc) data.loc = child.node.loc;
	      child.get("specifiers").forEach(spec => {
	        assertExportSpecifier(spec);
	        const importName = getExportSpecifierName(spec.get("local"), stringSpecifiers);
	        const exportName = getExportSpecifierName(spec.get("exported"), stringSpecifiers);
	        data.reexports.set(exportName, importName);

	        if (exportName === "__esModule") {
	          throw spec.get("exported").buildCodeFrameError('Illegal export "__esModule".');
	        }
	      });
	    } else if (child.isExportNamedDeclaration() || child.isExportDefaultDeclaration()) {
	      hasExports = true;
	    }
	  });

	  for (const metadata of sourceData.values()) {
	    let needsDefault = false;
	    let needsNamed = false;

	    if (metadata.importsNamespace.size > 0) {
	      needsDefault = true;
	      needsNamed = true;
	    }

	    if (metadata.reexportAll) {
	      needsNamed = true;
	    }

	    for (const importName of metadata.imports.values()) {
	      if (importName === "default") needsDefault = true;else needsNamed = true;
	    }

	    for (const importName of metadata.reexports.values()) {
	      if (importName === "default") needsDefault = true;else needsNamed = true;
	    }

	    if (needsDefault && needsNamed) {
	      metadata.interop = "namespace";
	    } else if (needsDefault) {
	      metadata.interop = "default";
	    }
	  }

	  for (const [source, metadata] of sourceData) {
	    if (lazy !== false && !(isSideEffectImport(metadata) || metadata.reexportAll)) {
	      if (lazy === true) {
	        metadata.lazy = !/\./.test(source);
	      } else if (Array.isArray(lazy)) {
	        metadata.lazy = lazy.indexOf(source) !== -1;
	      } else if (typeof lazy === "function") {
	        metadata.lazy = lazy(source);
	      } else {
	        throw new Error(`.lazy must be a boolean, string array, or function`);
	      }
	    }
	  }

	  return {
	    hasExports,
	    local: localData,
	    source: sourceData
	  };
	}

	function getLocalExportMetadata(programPath, initializeReexports, stringSpecifiers) {
	  const bindingKindLookup = new Map();
	  programPath.get("body").forEach(child => {
	    let kind;

	    if (child.isImportDeclaration()) {
	      kind = "import";
	    } else {
	      if (child.isExportDefaultDeclaration()) child = child.get("declaration");

	      if (child.isExportNamedDeclaration()) {
	        if (child.node.declaration) {
	          child = child.get("declaration");
	        } else if (initializeReexports && child.node.source && child.get("source").isStringLiteral()) {
	          child.get("specifiers").forEach(spec => {
	            assertExportSpecifier(spec);
	            bindingKindLookup.set(spec.get("local").node.name, "block");
	          });
	          return;
	        }
	      }

	      if (child.isFunctionDeclaration()) {
	        kind = "hoisted";
	      } else if (child.isClassDeclaration()) {
	        kind = "block";
	      } else if (child.isVariableDeclaration({
	        kind: "var"
	      })) {
	        kind = "var";
	      } else if (child.isVariableDeclaration()) {
	        kind = "block";
	      } else {
	        return;
	      }
	    }

	    Object.keys(child.getOuterBindingIdentifiers()).forEach(name => {
	      bindingKindLookup.set(name, kind);
	    });
	  });
	  const localMetadata = new Map();

	  const getLocalMetadata = idPath => {
	    const localName = idPath.node.name;
	    let metadata = localMetadata.get(localName);

	    if (!metadata) {
	      const kind = bindingKindLookup.get(localName);

	      if (kind === undefined) {
	        throw idPath.buildCodeFrameError(`Exporting local "${localName}", which is not declared.`);
	      }

	      metadata = {
	        names: [],
	        kind
	      };
	      localMetadata.set(localName, metadata);
	    }

	    return metadata;
	  };

	  programPath.get("body").forEach(child => {
	    if (child.isExportNamedDeclaration() && (initializeReexports || !child.node.source)) {
	      if (child.node.declaration) {
	        const declaration = child.get("declaration");
	        const ids = declaration.getOuterBindingIdentifierPaths();
	        Object.keys(ids).forEach(name => {
	          if (name === "__esModule") {
	            throw declaration.buildCodeFrameError('Illegal export "__esModule".');
	          }

	          getLocalMetadata(ids[name]).names.push(name);
	        });
	      } else {
	        child.get("specifiers").forEach(spec => {
	          const local = spec.get("local");
	          const exported = spec.get("exported");
	          const localMetadata = getLocalMetadata(local);
	          const exportName = getExportSpecifierName(exported, stringSpecifiers);

	          if (exportName === "__esModule") {
	            throw exported.buildCodeFrameError('Illegal export "__esModule".');
	          }

	          localMetadata.names.push(exportName);
	        });
	      }
	    } else if (child.isExportDefaultDeclaration()) {
	      const declaration = child.get("declaration");

	      if (declaration.isFunctionDeclaration() || declaration.isClassDeclaration()) {
	        getLocalMetadata(declaration.get("id")).names.push("default");
	      } else {
	        throw declaration.buildCodeFrameError("Unexpected default expression export.");
	      }
	    }
	  });
	  return localMetadata;
	}

	function nameAnonymousExports(programPath) {
	  programPath.get("body").forEach(child => {
	    if (!child.isExportDefaultDeclaration()) return;
	    (0, _helperSplitExportDeclaration.default)(child);
	  });
	}

	function removeModuleDeclarations(programPath) {
	  programPath.get("body").forEach(child => {
	    if (child.isImportDeclaration()) {
	      child.remove();
	    } else if (child.isExportNamedDeclaration()) {
	      if (child.node.declaration) {
	        child.node.declaration._blockHoist = child.node._blockHoist;
	        child.replaceWith(child.node.declaration);
	      } else {
	        child.remove();
	      }
	    } else if (child.isExportDefaultDeclaration()) {
	      const declaration = child.get("declaration");

	      if (declaration.isFunctionDeclaration() || declaration.isClassDeclaration()) {
	        declaration._blockHoist = child.node._blockHoist;
	        child.replaceWith(declaration);
	      } else {
	        throw declaration.buildCodeFrameError("Unexpected default expression export.");
	      }
	    } else if (child.isExportAllDeclaration()) {
	      child.remove();
	    }
	  });
	}

	var getModuleName$1 = {};

	Object.defineProperty(getModuleName$1, "__esModule", {
	  value: true
	});
	getModuleName$1.default = getModuleName;
	{
	  const originalGetModuleName = getModuleName;

	  getModuleName$1.default = getModuleName = function getModuleName(rootOpts, pluginOpts) {
	    var _pluginOpts$moduleId, _pluginOpts$moduleIds, _pluginOpts$getModule, _pluginOpts$moduleRoo;

	    return originalGetModuleName(rootOpts, {
	      moduleId: (_pluginOpts$moduleId = pluginOpts.moduleId) != null ? _pluginOpts$moduleId : rootOpts.moduleId,
	      moduleIds: (_pluginOpts$moduleIds = pluginOpts.moduleIds) != null ? _pluginOpts$moduleIds : rootOpts.moduleIds,
	      getModuleId: (_pluginOpts$getModule = pluginOpts.getModuleId) != null ? _pluginOpts$getModule : rootOpts.getModuleId,
	      moduleRoot: (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) != null ? _pluginOpts$moduleRoo : rootOpts.moduleRoot
	    });
	  };
	}

	function getModuleName(rootOpts, pluginOpts) {
	  const {
	    filename,
	    filenameRelative = filename,
	    sourceRoot = pluginOpts.moduleRoot
	  } = rootOpts;
	  const {
	    moduleId,
	    moduleIds = !!moduleId,
	    getModuleId,
	    moduleRoot = sourceRoot
	  } = pluginOpts;
	  if (!moduleIds) return null;

	  if (moduleId != null && !getModuleId) {
	    return moduleId;
	  }

	  let moduleName = moduleRoot != null ? moduleRoot + "/" : "";

	  if (filenameRelative) {
	    const sourceRootReplacer = sourceRoot != null ? new RegExp("^" + sourceRoot + "/?") : "";
	    moduleName += filenameRelative.replace(sourceRootReplacer, "").replace(/\.(\w*?)$/, "");
	  }

	  moduleName = moduleName.replace(/\\/g, "/");

	  if (getModuleId) {
	    return getModuleId(moduleName) || moduleName;
	  } else {
	    return moduleName;
	  }
	}

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.rewriteModuleStatementsAndPrepareHeader = rewriteModuleStatementsAndPrepareHeader;
	exports.ensureStatementsHoisted = ensureStatementsHoisted;
	exports.wrapInterop = wrapInterop;
	exports.buildNamespaceInitStatements = buildNamespaceInitStatements;
	Object.defineProperty(exports, "isModule", {
	  enumerable: true,
	  get: function () {
	    return _helperModuleImports.isModule;
	  }
	});
	Object.defineProperty(exports, "rewriteThis", {
	  enumerable: true,
	  get: function () {
	    return _rewriteThis.default;
	  }
	});
	Object.defineProperty(exports, "hasExports", {
	  enumerable: true,
	  get: function () {
	    return _normalizeAndLoadMetadata.hasExports;
	  }
	});
	Object.defineProperty(exports, "isSideEffectImport", {
	  enumerable: true,
	  get: function () {
	    return _normalizeAndLoadMetadata.isSideEffectImport;
	  }
	});
	Object.defineProperty(exports, "getModuleName", {
	  enumerable: true,
	  get: function () {
	    return _getModuleName.default;
	  }
	});

	var _assert = require$$1__default['default'];

	var _t = lib$s;

	var _template = lib$j;

	var _helperModuleImports = lib$h;

	var _rewriteThis = rewriteThis$1;

	var _rewriteLiveReferences = rewriteLiveReferences$1;

	var _normalizeAndLoadMetadata = normalizeAndLoadMetadata;

	var _getModuleName = getModuleName$1;

	const {
	  booleanLiteral,
	  callExpression,
	  cloneNode,
	  directive,
	  directiveLiteral,
	  expressionStatement,
	  identifier,
	  isIdentifier,
	  memberExpression,
	  stringLiteral,
	  valueToNode,
	  variableDeclaration,
	  variableDeclarator
	} = _t;

	function rewriteModuleStatementsAndPrepareHeader(path, {
	  loose,
	  exportName,
	  strict,
	  allowTopLevelThis,
	  strictMode,
	  noInterop,
	  importInterop = noInterop ? "none" : "babel",
	  lazy,
	  esNamespaceOnly,
	  constantReexports = loose,
	  enumerableModuleMeta = loose,
	  noIncompleteNsImportDetection
	}) {
	  (0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop);

	  _assert((0, _helperModuleImports.isModule)(path), "Cannot process module statements in a script");

	  path.node.sourceType = "script";
	  const meta = (0, _normalizeAndLoadMetadata.default)(path, exportName, {
	    importInterop,
	    initializeReexports: constantReexports,
	    lazy,
	    esNamespaceOnly
	  });

	  if (!allowTopLevelThis) {
	    (0, _rewriteThis.default)(path);
	  }

	  (0, _rewriteLiveReferences.default)(path, meta);

	  if (strictMode !== false) {
	    const hasStrict = path.node.directives.some(directive => {
	      return directive.value.value === "use strict";
	    });

	    if (!hasStrict) {
	      path.unshiftContainer("directives", directive(directiveLiteral("use strict")));
	    }
	  }

	  const headers = [];

	  if ((0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict) {
	    headers.push(buildESModuleHeader(meta, enumerableModuleMeta));
	  }

	  const nameList = buildExportNameListDeclaration(path, meta);

	  if (nameList) {
	    meta.exportNameListName = nameList.name;
	    headers.push(nameList.statement);
	  }

	  headers.push(...buildExportInitializationStatements(path, meta, constantReexports, noIncompleteNsImportDetection));
	  return {
	    meta,
	    headers
	  };
	}

	function ensureStatementsHoisted(statements) {
	  statements.forEach(header => {
	    header._blockHoist = 3;
	  });
	}

	function wrapInterop(programPath, expr, type) {
	  if (type === "none") {
	    return null;
	  }

	  if (type === "node-namespace") {
	    return callExpression(programPath.hub.addHelper("interopRequireWildcard"), [expr, booleanLiteral(true)]);
	  } else if (type === "node-default") {
	    return null;
	  }

	  let helper;

	  if (type === "default") {
	    helper = "interopRequireDefault";
	  } else if (type === "namespace") {
	    helper = "interopRequireWildcard";
	  } else {
	    throw new Error(`Unknown interop: ${type}`);
	  }

	  return callExpression(programPath.hub.addHelper(helper), [expr]);
	}

	function buildNamespaceInitStatements(metadata, sourceMetadata, constantReexports = false) {
	  const statements = [];
	  let srcNamespace = identifier(sourceMetadata.name);
	  if (sourceMetadata.lazy) srcNamespace = callExpression(srcNamespace, []);

	  for (const localName of sourceMetadata.importsNamespace) {
	    if (localName === sourceMetadata.name) continue;
	    statements.push(_template.default.statement`var NAME = SOURCE;`({
	      NAME: localName,
	      SOURCE: cloneNode(srcNamespace)
	    }));
	  }

	  if (constantReexports) {
	    statements.push(...buildReexportsFromMeta(metadata, sourceMetadata, true));
	  }

	  for (const exportName of sourceMetadata.reexportNamespace) {
	    statements.push((sourceMetadata.lazy ? _template.default.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          ` : _template.default.statement`EXPORTS.NAME = NAMESPACE;`)({
	      EXPORTS: metadata.exportName,
	      NAME: exportName,
	      NAMESPACE: cloneNode(srcNamespace)
	    }));
	  }

	  if (sourceMetadata.reexportAll) {
	    const statement = buildNamespaceReexport(metadata, cloneNode(srcNamespace), constantReexports);
	    statement.loc = sourceMetadata.reexportAll.loc;
	    statements.push(statement);
	  }

	  return statements;
	}

	const ReexportTemplate = {
	  constant: _template.default.statement`EXPORTS.EXPORT_NAME = NAMESPACE_IMPORT;`,
	  constantComputed: _template.default.statement`EXPORTS["EXPORT_NAME"] = NAMESPACE_IMPORT;`,
	  spec: (0, _template.default)`
    Object.defineProperty(EXPORTS, "EXPORT_NAME", {
      enumerable: true,
      get: function() {
        return NAMESPACE_IMPORT;
      },
    });
    `
	};

	const buildReexportsFromMeta = (meta, metadata, constantReexports) => {
	  const namespace = metadata.lazy ? callExpression(identifier(metadata.name), []) : identifier(metadata.name);
	  const {
	    stringSpecifiers
	  } = meta;
	  return Array.from(metadata.reexports, ([exportName, importName]) => {
	    let NAMESPACE_IMPORT = cloneNode(namespace);

	    if (importName === "default" && metadata.interop === "node-default") ; else if (stringSpecifiers.has(importName)) {
	      NAMESPACE_IMPORT = memberExpression(NAMESPACE_IMPORT, stringLiteral(importName), true);
	    } else {
	      NAMESPACE_IMPORT = memberExpression(NAMESPACE_IMPORT, identifier(importName));
	    }

	    const astNodes = {
	      EXPORTS: meta.exportName,
	      EXPORT_NAME: exportName,
	      NAMESPACE_IMPORT
	    };

	    if (constantReexports || isIdentifier(NAMESPACE_IMPORT)) {
	      if (stringSpecifiers.has(exportName)) {
	        return ReexportTemplate.constantComputed(astNodes);
	      } else {
	        return ReexportTemplate.constant(astNodes);
	      }
	    } else {
	      return ReexportTemplate.spec(astNodes);
	    }
	  });
	};

	function buildESModuleHeader(metadata, enumerableModuleMeta = false) {
	  return (enumerableModuleMeta ? _template.default.statement`
        EXPORTS.__esModule = true;
      ` : _template.default.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({
	    EXPORTS: metadata.exportName
	  });
	}

	function buildNamespaceReexport(metadata, namespace, constantReexports) {
	  return (constantReexports ? _template.default.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      ` : _template.default.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({
	    NAMESPACE: namespace,
	    EXPORTS: metadata.exportName,
	    VERIFY_NAME_LIST: metadata.exportNameListName ? (0, _template.default)`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({
	      EXPORTS_LIST: metadata.exportNameListName
	    }) : null
	  });
	}

	function buildExportNameListDeclaration(programPath, metadata) {
	  const exportedVars = Object.create(null);

	  for (const data of metadata.local.values()) {
	    for (const name of data.names) {
	      exportedVars[name] = true;
	    }
	  }

	  let hasReexport = false;

	  for (const data of metadata.source.values()) {
	    for (const exportName of data.reexports.keys()) {
	      exportedVars[exportName] = true;
	    }

	    for (const exportName of data.reexportNamespace) {
	      exportedVars[exportName] = true;
	    }

	    hasReexport = hasReexport || !!data.reexportAll;
	  }

	  if (!hasReexport || Object.keys(exportedVars).length === 0) return null;
	  const name = programPath.scope.generateUidIdentifier("exportNames");
	  delete exportedVars.default;
	  return {
	    name: name.name,
	    statement: variableDeclaration("var", [variableDeclarator(name, valueToNode(exportedVars))])
	  };
	}

	function buildExportInitializationStatements(programPath, metadata, constantReexports = false, noIncompleteNsImportDetection = false) {
	  const initStatements = [];
	  const exportNames = [];

	  for (const [localName, data] of metadata.local) {
	    if (data.kind === "import") ; else if (data.kind === "hoisted") {
	      initStatements.push(buildInitStatement(metadata, data.names, identifier(localName)));
	    } else {
	      exportNames.push(...data.names);
	    }
	  }

	  for (const data of metadata.source.values()) {
	    if (!constantReexports) {
	      initStatements.push(...buildReexportsFromMeta(metadata, data, false));
	    }

	    for (const exportName of data.reexportNamespace) {
	      exportNames.push(exportName);
	    }
	  }

	  if (!noIncompleteNsImportDetection) {
	    initStatements.push(...chunk(exportNames, 100).map(members => {
	      return buildInitStatement(metadata, members, programPath.scope.buildUndefinedNode());
	    }));
	  }

	  return initStatements;
	}

	const InitTemplate = {
	  computed: _template.default.expression`EXPORTS["NAME"] = VALUE`,
	  default: _template.default.expression`EXPORTS.NAME = VALUE`
	};

	function buildInitStatement(metadata, exportNames, initExpr) {
	  const {
	    stringSpecifiers,
	    exportName: EXPORTS
	  } = metadata;
	  return expressionStatement(exportNames.reduce((acc, exportName) => {
	    const params = {
	      EXPORTS,
	      NAME: exportName,
	      VALUE: acc
	    };

	    if (stringSpecifiers.has(exportName)) {
	      return InitTemplate.computed(params);
	    } else {
	      return InitTemplate.default(params);
	    }
	  }, initExpr));
	}

	function chunk(array, size) {
	  const chunks = [];

	  for (let i = 0; i < array.length; i += size) {
	    chunks.push(array.slice(i, i + size));
	  }

	  return chunks;
	}
	}(lib$i));

	var semver = {exports: {}};

	(function (module, exports) {
	exports = module.exports = SemVer;

	var debug;
	/* istanbul ignore next */
	if (typeof process === 'object' &&
	    process.env &&
	    process.env.NODE_DEBUG &&
	    /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
	  debug = function () {
	    var args = Array.prototype.slice.call(arguments, 0);
	    args.unshift('SEMVER');
	    console.log.apply(console, args);
	  };
	} else {
	  debug = function () {};
	}

	// Note: this is the semver.org version of the spec that it implements
	// Not necessarily the package version of this code.
	exports.SEMVER_SPEC_VERSION = '2.0.0';

	var MAX_LENGTH = 256;
	var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
	  /* istanbul ignore next */ 9007199254740991;

	// Max safe segment length for coercion.
	var MAX_SAFE_COMPONENT_LENGTH = 16;

	// The actual regexps go on exports.re
	var re = exports.re = [];
	var src = exports.src = [];
	var t = exports.tokens = {};
	var R = 0;

	function tok (n) {
	  t[n] = R++;
	}

	// The following Regular Expressions can be used for tokenizing,
	// validating, and parsing SemVer version strings.

	// ## Numeric Identifier
	// A single `0`, or a non-zero digit followed by zero or more digits.

	tok('NUMERICIDENTIFIER');
	src[t.NUMERICIDENTIFIER] = '0|[1-9]\\d*';
	tok('NUMERICIDENTIFIERLOOSE');
	src[t.NUMERICIDENTIFIERLOOSE] = '[0-9]+';

	// ## Non-numeric Identifier
	// Zero or more digits, followed by a letter or hyphen, and then zero or
	// more letters, digits, or hyphens.

	tok('NONNUMERICIDENTIFIER');
	src[t.NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';

	// ## Main Version
	// Three dot-separated numeric identifiers.

	tok('MAINVERSION');
	src[t.MAINVERSION] = '(' + src[t.NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[t.NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[t.NUMERICIDENTIFIER] + ')';

	tok('MAINVERSIONLOOSE');
	src[t.MAINVERSIONLOOSE] = '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')';

	// ## Pre-release Version Identifier
	// A numeric identifier, or a non-numeric identifier.

	tok('PRERELEASEIDENTIFIER');
	src[t.PRERELEASEIDENTIFIER] = '(?:' + src[t.NUMERICIDENTIFIER] +
	                            '|' + src[t.NONNUMERICIDENTIFIER] + ')';

	tok('PRERELEASEIDENTIFIERLOOSE');
	src[t.PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[t.NUMERICIDENTIFIERLOOSE] +
	                                 '|' + src[t.NONNUMERICIDENTIFIER] + ')';

	// ## Pre-release Version
	// Hyphen, followed by one or more dot-separated pre-release version
	// identifiers.

	tok('PRERELEASE');
	src[t.PRERELEASE] = '(?:-(' + src[t.PRERELEASEIDENTIFIER] +
	                  '(?:\\.' + src[t.PRERELEASEIDENTIFIER] + ')*))';

	tok('PRERELEASELOOSE');
	src[t.PRERELEASELOOSE] = '(?:-?(' + src[t.PRERELEASEIDENTIFIERLOOSE] +
	                       '(?:\\.' + src[t.PRERELEASEIDENTIFIERLOOSE] + ')*))';

	// ## Build Metadata Identifier
	// Any combination of digits, letters, or hyphens.

	tok('BUILDIDENTIFIER');
	src[t.BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

	// ## Build Metadata
	// Plus sign, followed by one or more period-separated build metadata
	// identifiers.

	tok('BUILD');
	src[t.BUILD] = '(?:\\+(' + src[t.BUILDIDENTIFIER] +
	             '(?:\\.' + src[t.BUILDIDENTIFIER] + ')*))';

	// ## Full Version String
	// A main version, followed optionally by a pre-release version and
	// build metadata.

	// Note that the only major, minor, patch, and pre-release sections of
	// the version string are capturing groups.  The build metadata is not a
	// capturing group, because it should not ever be used in version
	// comparison.

	tok('FULL');
	tok('FULLPLAIN');
	src[t.FULLPLAIN] = 'v?' + src[t.MAINVERSION] +
	                  src[t.PRERELEASE] + '?' +
	                  src[t.BUILD] + '?';

	src[t.FULL] = '^' + src[t.FULLPLAIN] + '$';

	// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
	// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
	// common in the npm registry.
	tok('LOOSEPLAIN');
	src[t.LOOSEPLAIN] = '[v=\\s]*' + src[t.MAINVERSIONLOOSE] +
	                  src[t.PRERELEASELOOSE] + '?' +
	                  src[t.BUILD] + '?';

	tok('LOOSE');
	src[t.LOOSE] = '^' + src[t.LOOSEPLAIN] + '$';

	tok('GTLT');
	src[t.GTLT] = '((?:<|>)?=?)';

	// Something like "2.*" or "1.2.x".
	// Note that "x.x" is a valid xRange identifer, meaning "any version"
	// Only the first item is strictly required.
	tok('XRANGEIDENTIFIERLOOSE');
	src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
	tok('XRANGEIDENTIFIER');
	src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + '|x|X|\\*';

	tok('XRANGEPLAIN');
	src[t.XRANGEPLAIN] = '[v=\\s]*(' + src[t.XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[t.XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[t.XRANGEIDENTIFIER] + ')' +
	                   '(?:' + src[t.PRERELEASE] + ')?' +
	                   src[t.BUILD] + '?' +
	                   ')?)?';

	tok('XRANGEPLAINLOOSE');
	src[t.XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:' + src[t.PRERELEASELOOSE] + ')?' +
	                        src[t.BUILD] + '?' +
	                        ')?)?';

	tok('XRANGE');
	src[t.XRANGE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAIN] + '$';
	tok('XRANGELOOSE');
	src[t.XRANGELOOSE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAINLOOSE] + '$';

	// Coercion.
	// Extract anything that could conceivably be a part of a valid semver
	tok('COERCE');
	src[t.COERCE] = '(^|[^\\d])' +
	              '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
	              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
	              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
	              '(?:$|[^\\d])';
	tok('COERCERTL');
	re[t.COERCERTL] = new RegExp(src[t.COERCE], 'g');

	// Tilde ranges.
	// Meaning is "reasonably at or greater than"
	tok('LONETILDE');
	src[t.LONETILDE] = '(?:~>?)';

	tok('TILDETRIM');
	src[t.TILDETRIM] = '(\\s*)' + src[t.LONETILDE] + '\\s+';
	re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], 'g');
	var tildeTrimReplace = '$1~';

	tok('TILDE');
	src[t.TILDE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAIN] + '$';
	tok('TILDELOOSE');
	src[t.TILDELOOSE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + '$';

	// Caret ranges.
	// Meaning is "at least and backwards compatible with"
	tok('LONECARET');
	src[t.LONECARET] = '(?:\\^)';

	tok('CARETTRIM');
	src[t.CARETTRIM] = '(\\s*)' + src[t.LONECARET] + '\\s+';
	re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], 'g');
	var caretTrimReplace = '$1^';

	tok('CARET');
	src[t.CARET] = '^' + src[t.LONECARET] + src[t.XRANGEPLAIN] + '$';
	tok('CARETLOOSE');
	src[t.CARETLOOSE] = '^' + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + '$';

	// A simple gt/lt/eq thing, or just "" to indicate "any version"
	tok('COMPARATORLOOSE');
	src[t.COMPARATORLOOSE] = '^' + src[t.GTLT] + '\\s*(' + src[t.LOOSEPLAIN] + ')$|^$';
	tok('COMPARATOR');
	src[t.COMPARATOR] = '^' + src[t.GTLT] + '\\s*(' + src[t.FULLPLAIN] + ')$|^$';

	// An expression to strip any whitespace between the gtlt and the thing
	// it modifies, so that `> 1.2.3` ==> `>1.2.3`
	tok('COMPARATORTRIM');
	src[t.COMPARATORTRIM] = '(\\s*)' + src[t.GTLT] +
	                      '\\s*(' + src[t.LOOSEPLAIN] + '|' + src[t.XRANGEPLAIN] + ')';

	// this one has to use the /g flag
	re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], 'g');
	var comparatorTrimReplace = '$1$2$3';

	// Something like `1.2.3 - 1.2.4`
	// Note that these all use the loose form, because they'll be
	// checked against either the strict or loose comparator form
	// later.
	tok('HYPHENRANGE');
	src[t.HYPHENRANGE] = '^\\s*(' + src[t.XRANGEPLAIN] + ')' +
	                   '\\s+-\\s+' +
	                   '(' + src[t.XRANGEPLAIN] + ')' +
	                   '\\s*$';

	tok('HYPHENRANGELOOSE');
	src[t.HYPHENRANGELOOSE] = '^\\s*(' + src[t.XRANGEPLAINLOOSE] + ')' +
	                        '\\s+-\\s+' +
	                        '(' + src[t.XRANGEPLAINLOOSE] + ')' +
	                        '\\s*$';

	// Star ranges basically just allow anything at all.
	tok('STAR');
	src[t.STAR] = '(<|>)?=?\\s*\\*';

	// Compile to actual regexp objects.
	// All are flag-free, unless they were created above with a flag.
	for (var i = 0; i < R; i++) {
	  debug(i, src[i]);
	  if (!re[i]) {
	    re[i] = new RegExp(src[i]);
	  }
	}

	exports.parse = parse;
	function parse (version, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  if (version instanceof SemVer) {
	    return version
	  }

	  if (typeof version !== 'string') {
	    return null
	  }

	  if (version.length > MAX_LENGTH) {
	    return null
	  }

	  var r = options.loose ? re[t.LOOSE] : re[t.FULL];
	  if (!r.test(version)) {
	    return null
	  }

	  try {
	    return new SemVer(version, options)
	  } catch (er) {
	    return null
	  }
	}

	exports.valid = valid;
	function valid (version, options) {
	  var v = parse(version, options);
	  return v ? v.version : null
	}

	exports.clean = clean;
	function clean (version, options) {
	  var s = parse(version.trim().replace(/^[=v]+/, ''), options);
	  return s ? s.version : null
	}

	exports.SemVer = SemVer;

	function SemVer (version, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }
	  if (version instanceof SemVer) {
	    if (version.loose === options.loose) {
	      return version
	    } else {
	      version = version.version;
	    }
	  } else if (typeof version !== 'string') {
	    throw new TypeError('Invalid Version: ' + version)
	  }

	  if (version.length > MAX_LENGTH) {
	    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')
	  }

	  if (!(this instanceof SemVer)) {
	    return new SemVer(version, options)
	  }

	  debug('SemVer', version, options);
	  this.options = options;
	  this.loose = !!options.loose;

	  var m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);

	  if (!m) {
	    throw new TypeError('Invalid Version: ' + version)
	  }

	  this.raw = version;

	  // these are actually numbers
	  this.major = +m[1];
	  this.minor = +m[2];
	  this.patch = +m[3];

	  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
	    throw new TypeError('Invalid major version')
	  }

	  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
	    throw new TypeError('Invalid minor version')
	  }

	  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
	    throw new TypeError('Invalid patch version')
	  }

	  // numberify any prerelease numeric ids
	  if (!m[4]) {
	    this.prerelease = [];
	  } else {
	    this.prerelease = m[4].split('.').map(function (id) {
	      if (/^[0-9]+$/.test(id)) {
	        var num = +id;
	        if (num >= 0 && num < MAX_SAFE_INTEGER) {
	          return num
	        }
	      }
	      return id
	    });
	  }

	  this.build = m[5] ? m[5].split('.') : [];
	  this.format();
	}

	SemVer.prototype.format = function () {
	  this.version = this.major + '.' + this.minor + '.' + this.patch;
	  if (this.prerelease.length) {
	    this.version += '-' + this.prerelease.join('.');
	  }
	  return this.version
	};

	SemVer.prototype.toString = function () {
	  return this.version
	};

	SemVer.prototype.compare = function (other) {
	  debug('SemVer.compare', this.version, this.options, other);
	  if (!(other instanceof SemVer)) {
	    other = new SemVer(other, this.options);
	  }

	  return this.compareMain(other) || this.comparePre(other)
	};

	SemVer.prototype.compareMain = function (other) {
	  if (!(other instanceof SemVer)) {
	    other = new SemVer(other, this.options);
	  }

	  return compareIdentifiers(this.major, other.major) ||
	         compareIdentifiers(this.minor, other.minor) ||
	         compareIdentifiers(this.patch, other.patch)
	};

	SemVer.prototype.comparePre = function (other) {
	  if (!(other instanceof SemVer)) {
	    other = new SemVer(other, this.options);
	  }

	  // NOT having a prerelease is > having one
	  if (this.prerelease.length && !other.prerelease.length) {
	    return -1
	  } else if (!this.prerelease.length && other.prerelease.length) {
	    return 1
	  } else if (!this.prerelease.length && !other.prerelease.length) {
	    return 0
	  }

	  var i = 0;
	  do {
	    var a = this.prerelease[i];
	    var b = other.prerelease[i];
	    debug('prerelease compare', i, a, b);
	    if (a === undefined && b === undefined) {
	      return 0
	    } else if (b === undefined) {
	      return 1
	    } else if (a === undefined) {
	      return -1
	    } else if (a === b) {
	      continue
	    } else {
	      return compareIdentifiers(a, b)
	    }
	  } while (++i)
	};

	SemVer.prototype.compareBuild = function (other) {
	  if (!(other instanceof SemVer)) {
	    other = new SemVer(other, this.options);
	  }

	  var i = 0;
	  do {
	    var a = this.build[i];
	    var b = other.build[i];
	    debug('prerelease compare', i, a, b);
	    if (a === undefined && b === undefined) {
	      return 0
	    } else if (b === undefined) {
	      return 1
	    } else if (a === undefined) {
	      return -1
	    } else if (a === b) {
	      continue
	    } else {
	      return compareIdentifiers(a, b)
	    }
	  } while (++i)
	};

	// preminor will bump the version up to the next minor release, and immediately
	// down to pre-release. premajor and prepatch work the same way.
	SemVer.prototype.inc = function (release, identifier) {
	  switch (release) {
	    case 'premajor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor = 0;
	      this.major++;
	      this.inc('pre', identifier);
	      break
	    case 'preminor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor++;
	      this.inc('pre', identifier);
	      break
	    case 'prepatch':
	      // If this is already a prerelease, it will bump to the next version
	      // drop any prereleases that might already exist, since they are not
	      // relevant at this point.
	      this.prerelease.length = 0;
	      this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break
	    // If the input is a non-prerelease version, this acts the same as
	    // prepatch.
	    case 'prerelease':
	      if (this.prerelease.length === 0) {
	        this.inc('patch', identifier);
	      }
	      this.inc('pre', identifier);
	      break

	    case 'major':
	      // If this is a pre-major version, bump up to the same major version.
	      // Otherwise increment major.
	      // 1.0.0-5 bumps to 1.0.0
	      // 1.1.0 bumps to 2.0.0
	      if (this.minor !== 0 ||
	          this.patch !== 0 ||
	          this.prerelease.length === 0) {
	        this.major++;
	      }
	      this.minor = 0;
	      this.patch = 0;
	      this.prerelease = [];
	      break
	    case 'minor':
	      // If this is a pre-minor version, bump up to the same minor version.
	      // Otherwise increment minor.
	      // 1.2.0-5 bumps to 1.2.0
	      // 1.2.1 bumps to 1.3.0
	      if (this.patch !== 0 || this.prerelease.length === 0) {
	        this.minor++;
	      }
	      this.patch = 0;
	      this.prerelease = [];
	      break
	    case 'patch':
	      // If this is not a pre-release version, it will increment the patch.
	      // If it is a pre-release it will bump up to the same patch version.
	      // 1.2.0-5 patches to 1.2.0
	      // 1.2.0 patches to 1.2.1
	      if (this.prerelease.length === 0) {
	        this.patch++;
	      }
	      this.prerelease = [];
	      break
	    // This probably shouldn't be used publicly.
	    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
	    case 'pre':
	      if (this.prerelease.length === 0) {
	        this.prerelease = [0];
	      } else {
	        var i = this.prerelease.length;
	        while (--i >= 0) {
	          if (typeof this.prerelease[i] === 'number') {
	            this.prerelease[i]++;
	            i = -2;
	          }
	        }
	        if (i === -1) {
	          // didn't increment anything
	          this.prerelease.push(0);
	        }
	      }
	      if (identifier) {
	        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
	        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
	        if (this.prerelease[0] === identifier) {
	          if (isNaN(this.prerelease[1])) {
	            this.prerelease = [identifier, 0];
	          }
	        } else {
	          this.prerelease = [identifier, 0];
	        }
	      }
	      break

	    default:
	      throw new Error('invalid increment argument: ' + release)
	  }
	  this.format();
	  this.raw = this.version;
	  return this
	};

	exports.inc = inc;
	function inc (version, release, loose, identifier) {
	  if (typeof (loose) === 'string') {
	    identifier = loose;
	    loose = undefined;
	  }

	  try {
	    return new SemVer(version, loose).inc(release, identifier).version
	  } catch (er) {
	    return null
	  }
	}

	exports.diff = diff;
	function diff (version1, version2) {
	  if (eq(version1, version2)) {
	    return null
	  } else {
	    var v1 = parse(version1);
	    var v2 = parse(version2);
	    var prefix = '';
	    if (v1.prerelease.length || v2.prerelease.length) {
	      prefix = 'pre';
	      var defaultResult = 'prerelease';
	    }
	    for (var key in v1) {
	      if (key === 'major' || key === 'minor' || key === 'patch') {
	        if (v1[key] !== v2[key]) {
	          return prefix + key
	        }
	      }
	    }
	    return defaultResult // may be undefined
	  }
	}

	exports.compareIdentifiers = compareIdentifiers;

	var numeric = /^[0-9]+$/;
	function compareIdentifiers (a, b) {
	  var anum = numeric.test(a);
	  var bnum = numeric.test(b);

	  if (anum && bnum) {
	    a = +a;
	    b = +b;
	  }

	  return a === b ? 0
	    : (anum && !bnum) ? -1
	    : (bnum && !anum) ? 1
	    : a < b ? -1
	    : 1
	}

	exports.rcompareIdentifiers = rcompareIdentifiers;
	function rcompareIdentifiers (a, b) {
	  return compareIdentifiers(b, a)
	}

	exports.major = major;
	function major (a, loose) {
	  return new SemVer(a, loose).major
	}

	exports.minor = minor;
	function minor (a, loose) {
	  return new SemVer(a, loose).minor
	}

	exports.patch = patch;
	function patch (a, loose) {
	  return new SemVer(a, loose).patch
	}

	exports.compare = compare;
	function compare (a, b, loose) {
	  return new SemVer(a, loose).compare(new SemVer(b, loose))
	}

	exports.compareLoose = compareLoose;
	function compareLoose (a, b) {
	  return compare(a, b, true)
	}

	exports.compareBuild = compareBuild;
	function compareBuild (a, b, loose) {
	  var versionA = new SemVer(a, loose);
	  var versionB = new SemVer(b, loose);
	  return versionA.compare(versionB) || versionA.compareBuild(versionB)
	}

	exports.rcompare = rcompare;
	function rcompare (a, b, loose) {
	  return compare(b, a, loose)
	}

	exports.sort = sort;
	function sort (list, loose) {
	  return list.sort(function (a, b) {
	    return exports.compareBuild(a, b, loose)
	  })
	}

	exports.rsort = rsort;
	function rsort (list, loose) {
	  return list.sort(function (a, b) {
	    return exports.compareBuild(b, a, loose)
	  })
	}

	exports.gt = gt;
	function gt (a, b, loose) {
	  return compare(a, b, loose) > 0
	}

	exports.lt = lt;
	function lt (a, b, loose) {
	  return compare(a, b, loose) < 0
	}

	exports.eq = eq;
	function eq (a, b, loose) {
	  return compare(a, b, loose) === 0
	}

	exports.neq = neq;
	function neq (a, b, loose) {
	  return compare(a, b, loose) !== 0
	}

	exports.gte = gte;
	function gte (a, b, loose) {
	  return compare(a, b, loose) >= 0
	}

	exports.lte = lte;
	function lte (a, b, loose) {
	  return compare(a, b, loose) <= 0
	}

	exports.cmp = cmp;
	function cmp (a, op, b, loose) {
	  switch (op) {
	    case '===':
	      if (typeof a === 'object')
	        a = a.version;
	      if (typeof b === 'object')
	        b = b.version;
	      return a === b

	    case '!==':
	      if (typeof a === 'object')
	        a = a.version;
	      if (typeof b === 'object')
	        b = b.version;
	      return a !== b

	    case '':
	    case '=':
	    case '==':
	      return eq(a, b, loose)

	    case '!=':
	      return neq(a, b, loose)

	    case '>':
	      return gt(a, b, loose)

	    case '>=':
	      return gte(a, b, loose)

	    case '<':
	      return lt(a, b, loose)

	    case '<=':
	      return lte(a, b, loose)

	    default:
	      throw new TypeError('Invalid operator: ' + op)
	  }
	}

	exports.Comparator = Comparator;
	function Comparator (comp, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  if (comp instanceof Comparator) {
	    if (comp.loose === !!options.loose) {
	      return comp
	    } else {
	      comp = comp.value;
	    }
	  }

	  if (!(this instanceof Comparator)) {
	    return new Comparator(comp, options)
	  }

	  debug('comparator', comp, options);
	  this.options = options;
	  this.loose = !!options.loose;
	  this.parse(comp);

	  if (this.semver === ANY) {
	    this.value = '';
	  } else {
	    this.value = this.operator + this.semver.version;
	  }

	  debug('comp', this);
	}

	var ANY = {};
	Comparator.prototype.parse = function (comp) {
	  var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
	  var m = comp.match(r);

	  if (!m) {
	    throw new TypeError('Invalid comparator: ' + comp)
	  }

	  this.operator = m[1] !== undefined ? m[1] : '';
	  if (this.operator === '=') {
	    this.operator = '';
	  }

	  // if it literally is just '>' or '' then allow anything.
	  if (!m[2]) {
	    this.semver = ANY;
	  } else {
	    this.semver = new SemVer(m[2], this.options.loose);
	  }
	};

	Comparator.prototype.toString = function () {
	  return this.value
	};

	Comparator.prototype.test = function (version) {
	  debug('Comparator.test', version, this.options.loose);

	  if (this.semver === ANY || version === ANY) {
	    return true
	  }

	  if (typeof version === 'string') {
	    try {
	      version = new SemVer(version, this.options);
	    } catch (er) {
	      return false
	    }
	  }

	  return cmp(version, this.operator, this.semver, this.options)
	};

	Comparator.prototype.intersects = function (comp, options) {
	  if (!(comp instanceof Comparator)) {
	    throw new TypeError('a Comparator is required')
	  }

	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  var rangeTmp;

	  if (this.operator === '') {
	    if (this.value === '') {
	      return true
	    }
	    rangeTmp = new Range(comp.value, options);
	    return satisfies(this.value, rangeTmp, options)
	  } else if (comp.operator === '') {
	    if (comp.value === '') {
	      return true
	    }
	    rangeTmp = new Range(this.value, options);
	    return satisfies(comp.semver, rangeTmp, options)
	  }

	  var sameDirectionIncreasing =
	    (this.operator === '>=' || this.operator === '>') &&
	    (comp.operator === '>=' || comp.operator === '>');
	  var sameDirectionDecreasing =
	    (this.operator === '<=' || this.operator === '<') &&
	    (comp.operator === '<=' || comp.operator === '<');
	  var sameSemVer = this.semver.version === comp.semver.version;
	  var differentDirectionsInclusive =
	    (this.operator === '>=' || this.operator === '<=') &&
	    (comp.operator === '>=' || comp.operator === '<=');
	  var oppositeDirectionsLessThan =
	    cmp(this.semver, '<', comp.semver, options) &&
	    ((this.operator === '>=' || this.operator === '>') &&
	    (comp.operator === '<=' || comp.operator === '<'));
	  var oppositeDirectionsGreaterThan =
	    cmp(this.semver, '>', comp.semver, options) &&
	    ((this.operator === '<=' || this.operator === '<') &&
	    (comp.operator === '>=' || comp.operator === '>'));

	  return sameDirectionIncreasing || sameDirectionDecreasing ||
	    (sameSemVer && differentDirectionsInclusive) ||
	    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan
	};

	exports.Range = Range;
	function Range (range, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  if (range instanceof Range) {
	    if (range.loose === !!options.loose &&
	        range.includePrerelease === !!options.includePrerelease) {
	      return range
	    } else {
	      return new Range(range.raw, options)
	    }
	  }

	  if (range instanceof Comparator) {
	    return new Range(range.value, options)
	  }

	  if (!(this instanceof Range)) {
	    return new Range(range, options)
	  }

	  this.options = options;
	  this.loose = !!options.loose;
	  this.includePrerelease = !!options.includePrerelease;

	  // First, split based on boolean or ||
	  this.raw = range;
	  this.set = range.split(/\s*\|\|\s*/).map(function (range) {
	    return this.parseRange(range.trim())
	  }, this).filter(function (c) {
	    // throw out any that are not relevant for whatever reason
	    return c.length
	  });

	  if (!this.set.length) {
	    throw new TypeError('Invalid SemVer Range: ' + range)
	  }

	  this.format();
	}

	Range.prototype.format = function () {
	  this.range = this.set.map(function (comps) {
	    return comps.join(' ').trim()
	  }).join('||').trim();
	  return this.range
	};

	Range.prototype.toString = function () {
	  return this.range
	};

	Range.prototype.parseRange = function (range) {
	  var loose = this.options.loose;
	  range = range.trim();
	  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
	  var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
	  range = range.replace(hr, hyphenReplace);
	  debug('hyphen replace', range);
	  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
	  range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
	  debug('comparator trim', range, re[t.COMPARATORTRIM]);

	  // `~ 1.2.3` => `~1.2.3`
	  range = range.replace(re[t.TILDETRIM], tildeTrimReplace);

	  // `^ 1.2.3` => `^1.2.3`
	  range = range.replace(re[t.CARETTRIM], caretTrimReplace);

	  // normalize spaces
	  range = range.split(/\s+/).join(' ');

	  // At this point, the range is completely trimmed and
	  // ready to be split into comparators.

	  var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
	  var set = range.split(' ').map(function (comp) {
	    return parseComparator(comp, this.options)
	  }, this).join(' ').split(/\s+/);
	  if (this.options.loose) {
	    // in loose mode, throw out any that are not valid comparators
	    set = set.filter(function (comp) {
	      return !!comp.match(compRe)
	    });
	  }
	  set = set.map(function (comp) {
	    return new Comparator(comp, this.options)
	  }, this);

	  return set
	};

	Range.prototype.intersects = function (range, options) {
	  if (!(range instanceof Range)) {
	    throw new TypeError('a Range is required')
	  }

	  return this.set.some(function (thisComparators) {
	    return (
	      isSatisfiable(thisComparators, options) &&
	      range.set.some(function (rangeComparators) {
	        return (
	          isSatisfiable(rangeComparators, options) &&
	          thisComparators.every(function (thisComparator) {
	            return rangeComparators.every(function (rangeComparator) {
	              return thisComparator.intersects(rangeComparator, options)
	            })
	          })
	        )
	      })
	    )
	  })
	};

	// take a set of comparators and determine whether there
	// exists a version which can satisfy it
	function isSatisfiable (comparators, options) {
	  var result = true;
	  var remainingComparators = comparators.slice();
	  var testComparator = remainingComparators.pop();

	  while (result && remainingComparators.length) {
	    result = remainingComparators.every(function (otherComparator) {
	      return testComparator.intersects(otherComparator, options)
	    });

	    testComparator = remainingComparators.pop();
	  }

	  return result
	}

	// Mostly just for testing and legacy API reasons
	exports.toComparators = toComparators;
	function toComparators (range, options) {
	  return new Range(range, options).set.map(function (comp) {
	    return comp.map(function (c) {
	      return c.value
	    }).join(' ').trim().split(' ')
	  })
	}

	// comprised of xranges, tildes, stars, and gtlt's at this point.
	// already replaced the hyphen ranges
	// turn into a set of JUST comparators.
	function parseComparator (comp, options) {
	  debug('comp', comp, options);
	  comp = replaceCarets(comp, options);
	  debug('caret', comp);
	  comp = replaceTildes(comp, options);
	  debug('tildes', comp);
	  comp = replaceXRanges(comp, options);
	  debug('xrange', comp);
	  comp = replaceStars(comp, options);
	  debug('stars', comp);
	  return comp
	}

	function isX (id) {
	  return !id || id.toLowerCase() === 'x' || id === '*'
	}

	// ~, ~> --> * (any, kinda silly)
	// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
	// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
	// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
	// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
	// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
	function replaceTildes (comp, options) {
	  return comp.trim().split(/\s+/).map(function (comp) {
	    return replaceTilde(comp, options)
	  }).join(' ')
	}

	function replaceTilde (comp, options) {
	  var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
	  return comp.replace(r, function (_, M, m, p, pr) {
	    debug('tilde', comp, _, M, m, p, pr);
	    var ret;

	    if (isX(M)) {
	      ret = '';
	    } else if (isX(m)) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (isX(p)) {
	      // ~1.2 == >=1.2.0 <1.3.0
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    } else if (pr) {
	      debug('replaceTilde pr', pr);
	      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	            ' <' + M + '.' + (+m + 1) + '.0';
	    } else {
	      // ~1.2.3 == >=1.2.3 <1.3.0
	      ret = '>=' + M + '.' + m + '.' + p +
	            ' <' + M + '.' + (+m + 1) + '.0';
	    }

	    debug('tilde return', ret);
	    return ret
	  })
	}

	// ^ --> * (any, kinda silly)
	// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
	// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
	// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
	// ^1.2.3 --> >=1.2.3 <2.0.0
	// ^1.2.0 --> >=1.2.0 <2.0.0
	function replaceCarets (comp, options) {
	  return comp.trim().split(/\s+/).map(function (comp) {
	    return replaceCaret(comp, options)
	  }).join(' ')
	}

	function replaceCaret (comp, options) {
	  debug('caret', comp, options);
	  var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
	  return comp.replace(r, function (_, M, m, p, pr) {
	    debug('caret', comp, _, M, m, p, pr);
	    var ret;

	    if (isX(M)) {
	      ret = '';
	    } else if (isX(m)) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (isX(p)) {
	      if (M === '0') {
	        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	      } else {
	        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
	      }
	    } else if (pr) {
	      debug('replaceCaret pr', pr);
	      if (M === '0') {
	        if (m === '0') {
	          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        } else {
	          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	                ' <' + M + '.' + (+m + 1) + '.0';
	        }
	      } else {
	        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	              ' <' + (+M + 1) + '.0.0';
	      }
	    } else {
	      debug('no pr');
	      if (M === '0') {
	        if (m === '0') {
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        } else {
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + (+m + 1) + '.0';
	        }
	      } else {
	        ret = '>=' + M + '.' + m + '.' + p +
	              ' <' + (+M + 1) + '.0.0';
	      }
	    }

	    debug('caret return', ret);
	    return ret
	  })
	}

	function replaceXRanges (comp, options) {
	  debug('replaceXRanges', comp, options);
	  return comp.split(/\s+/).map(function (comp) {
	    return replaceXRange(comp, options)
	  }).join(' ')
	}

	function replaceXRange (comp, options) {
	  comp = comp.trim();
	  var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
	  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
	    debug('xRange', comp, ret, gtlt, M, m, p, pr);
	    var xM = isX(M);
	    var xm = xM || isX(m);
	    var xp = xm || isX(p);
	    var anyX = xp;

	    if (gtlt === '=' && anyX) {
	      gtlt = '';
	    }

	    // if we're including prereleases in the match, then we need
	    // to fix this to -0, the lowest possible prerelease value
	    pr = options.includePrerelease ? '-0' : '';

	    if (xM) {
	      if (gtlt === '>' || gtlt === '<') {
	        // nothing is allowed
	        ret = '<0.0.0-0';
	      } else {
	        // nothing is forbidden
	        ret = '*';
	      }
	    } else if (gtlt && anyX) {
	      // we know patch is an x, because we have any x at all.
	      // replace X with 0
	      if (xm) {
	        m = 0;
	      }
	      p = 0;

	      if (gtlt === '>') {
	        // >1 => >=2.0.0
	        // >1.2 => >=1.3.0
	        // >1.2.3 => >= 1.2.4
	        gtlt = '>=';
	        if (xm) {
	          M = +M + 1;
	          m = 0;
	          p = 0;
	        } else {
	          m = +m + 1;
	          p = 0;
	        }
	      } else if (gtlt === '<=') {
	        // <=0.7.x is actually <0.8.0, since any 0.7.x should
	        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
	        gtlt = '<';
	        if (xm) {
	          M = +M + 1;
	        } else {
	          m = +m + 1;
	        }
	      }

	      ret = gtlt + M + '.' + m + '.' + p + pr;
	    } else if (xm) {
	      ret = '>=' + M + '.0.0' + pr + ' <' + (+M + 1) + '.0.0' + pr;
	    } else if (xp) {
	      ret = '>=' + M + '.' + m + '.0' + pr +
	        ' <' + M + '.' + (+m + 1) + '.0' + pr;
	    }

	    debug('xRange return', ret);

	    return ret
	  })
	}

	// Because * is AND-ed with everything else in the comparator,
	// and '' means "any version", just remove the *s entirely.
	function replaceStars (comp, options) {
	  debug('replaceStars', comp, options);
	  // Looseness is ignored here.  star is always as loose as it gets!
	  return comp.trim().replace(re[t.STAR], '')
	}

	// This function is passed to string.replace(re[t.HYPHENRANGE])
	// M, m, patch, prerelease, build
	// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
	// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
	// 1.2 - 3.4 => >=1.2.0 <3.5.0
	function hyphenReplace ($0,
	  from, fM, fm, fp, fpr, fb,
	  to, tM, tm, tp, tpr, tb) {
	  if (isX(fM)) {
	    from = '';
	  } else if (isX(fm)) {
	    from = '>=' + fM + '.0.0';
	  } else if (isX(fp)) {
	    from = '>=' + fM + '.' + fm + '.0';
	  } else {
	    from = '>=' + from;
	  }

	  if (isX(tM)) {
	    to = '';
	  } else if (isX(tm)) {
	    to = '<' + (+tM + 1) + '.0.0';
	  } else if (isX(tp)) {
	    to = '<' + tM + '.' + (+tm + 1) + '.0';
	  } else if (tpr) {
	    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
	  } else {
	    to = '<=' + to;
	  }

	  return (from + ' ' + to).trim()
	}

	// if ANY of the sets match ALL of its comparators, then pass
	Range.prototype.test = function (version) {
	  if (!version) {
	    return false
	  }

	  if (typeof version === 'string') {
	    try {
	      version = new SemVer(version, this.options);
	    } catch (er) {
	      return false
	    }
	  }

	  for (var i = 0; i < this.set.length; i++) {
	    if (testSet(this.set[i], version, this.options)) {
	      return true
	    }
	  }
	  return false
	};

	function testSet (set, version, options) {
	  for (var i = 0; i < set.length; i++) {
	    if (!set[i].test(version)) {
	      return false
	    }
	  }

	  if (version.prerelease.length && !options.includePrerelease) {
	    // Find the set of versions that are allowed to have prereleases
	    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
	    // That should allow `1.2.3-pr.2` to pass.
	    // However, `1.2.4-alpha.notready` should NOT be allowed,
	    // even though it's within the range set by the comparators.
	    for (i = 0; i < set.length; i++) {
	      debug(set[i].semver);
	      if (set[i].semver === ANY) {
	        continue
	      }

	      if (set[i].semver.prerelease.length > 0) {
	        var allowed = set[i].semver;
	        if (allowed.major === version.major &&
	            allowed.minor === version.minor &&
	            allowed.patch === version.patch) {
	          return true
	        }
	      }
	    }

	    // Version has a -pre, but it's not one of the ones we like.
	    return false
	  }

	  return true
	}

	exports.satisfies = satisfies;
	function satisfies (version, range, options) {
	  try {
	    range = new Range(range, options);
	  } catch (er) {
	    return false
	  }
	  return range.test(version)
	}

	exports.maxSatisfying = maxSatisfying;
	function maxSatisfying (versions, range, options) {
	  var max = null;
	  var maxSV = null;
	  try {
	    var rangeObj = new Range(range, options);
	  } catch (er) {
	    return null
	  }
	  versions.forEach(function (v) {
	    if (rangeObj.test(v)) {
	      // satisfies(v, range, options)
	      if (!max || maxSV.compare(v) === -1) {
	        // compare(max, v, true)
	        max = v;
	        maxSV = new SemVer(max, options);
	      }
	    }
	  });
	  return max
	}

	exports.minSatisfying = minSatisfying;
	function minSatisfying (versions, range, options) {
	  var min = null;
	  var minSV = null;
	  try {
	    var rangeObj = new Range(range, options);
	  } catch (er) {
	    return null
	  }
	  versions.forEach(function (v) {
	    if (rangeObj.test(v)) {
	      // satisfies(v, range, options)
	      if (!min || minSV.compare(v) === 1) {
	        // compare(min, v, true)
	        min = v;
	        minSV = new SemVer(min, options);
	      }
	    }
	  });
	  return min
	}

	exports.minVersion = minVersion;
	function minVersion (range, loose) {
	  range = new Range(range, loose);

	  var minver = new SemVer('0.0.0');
	  if (range.test(minver)) {
	    return minver
	  }

	  minver = new SemVer('0.0.0-0');
	  if (range.test(minver)) {
	    return minver
	  }

	  minver = null;
	  for (var i = 0; i < range.set.length; ++i) {
	    var comparators = range.set[i];

	    comparators.forEach(function (comparator) {
	      // Clone to avoid manipulating the comparator's semver object.
	      var compver = new SemVer(comparator.semver.version);
	      switch (comparator.operator) {
	        case '>':
	          if (compver.prerelease.length === 0) {
	            compver.patch++;
	          } else {
	            compver.prerelease.push(0);
	          }
	          compver.raw = compver.format();
	          /* fallthrough */
	        case '':
	        case '>=':
	          if (!minver || gt(minver, compver)) {
	            minver = compver;
	          }
	          break
	        case '<':
	        case '<=':
	          /* Ignore maximum versions */
	          break
	        /* istanbul ignore next */
	        default:
	          throw new Error('Unexpected operation: ' + comparator.operator)
	      }
	    });
	  }

	  if (minver && range.test(minver)) {
	    return minver
	  }

	  return null
	}

	exports.validRange = validRange;
	function validRange (range, options) {
	  try {
	    // Return '*' instead of '' so that truthiness works.
	    // This will throw if it's invalid anyway
	    return new Range(range, options).range || '*'
	  } catch (er) {
	    return null
	  }
	}

	// Determine if version is less than all the versions possible in the range
	exports.ltr = ltr;
	function ltr (version, range, options) {
	  return outside(version, range, '<', options)
	}

	// Determine if version is greater than all the versions possible in the range.
	exports.gtr = gtr;
	function gtr (version, range, options) {
	  return outside(version, range, '>', options)
	}

	exports.outside = outside;
	function outside (version, range, hilo, options) {
	  version = new SemVer(version, options);
	  range = new Range(range, options);

	  var gtfn, ltefn, ltfn, comp, ecomp;
	  switch (hilo) {
	    case '>':
	      gtfn = gt;
	      ltefn = lte;
	      ltfn = lt;
	      comp = '>';
	      ecomp = '>=';
	      break
	    case '<':
	      gtfn = lt;
	      ltefn = gte;
	      ltfn = gt;
	      comp = '<';
	      ecomp = '<=';
	      break
	    default:
	      throw new TypeError('Must provide a hilo val of "<" or ">"')
	  }

	  // If it satisifes the range it is not outside
	  if (satisfies(version, range, options)) {
	    return false
	  }

	  // From now on, variable terms are as if we're in "gtr" mode.
	  // but note that everything is flipped for the "ltr" function.

	  for (var i = 0; i < range.set.length; ++i) {
	    var comparators = range.set[i];

	    var high = null;
	    var low = null;

	    comparators.forEach(function (comparator) {
	      if (comparator.semver === ANY) {
	        comparator = new Comparator('>=0.0.0');
	      }
	      high = high || comparator;
	      low = low || comparator;
	      if (gtfn(comparator.semver, high.semver, options)) {
	        high = comparator;
	      } else if (ltfn(comparator.semver, low.semver, options)) {
	        low = comparator;
	      }
	    });

	    // If the edge version comparator has a operator then our version
	    // isn't outside it
	    if (high.operator === comp || high.operator === ecomp) {
	      return false
	    }

	    // If the lowest version comparator has an operator and our version
	    // is less than it then it isn't higher than the range
	    if ((!low.operator || low.operator === comp) &&
	        ltefn(version, low.semver)) {
	      return false
	    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
	      return false
	    }
	  }
	  return true
	}

	exports.prerelease = prerelease;
	function prerelease (version, options) {
	  var parsed = parse(version, options);
	  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
	}

	exports.intersects = intersects;
	function intersects (r1, r2, options) {
	  r1 = new Range(r1, options);
	  r2 = new Range(r2, options);
	  return r1.intersects(r2)
	}

	exports.coerce = coerce;
	function coerce (version, options) {
	  if (version instanceof SemVer) {
	    return version
	  }

	  if (typeof version === 'number') {
	    version = String(version);
	  }

	  if (typeof version !== 'string') {
	    return null
	  }

	  options = options || {};

	  var match = null;
	  if (!options.rtl) {
	    match = version.match(re[t.COERCE]);
	  } else {
	    // Find the right-most coercible string that does not share
	    // a terminus with a more left-ward coercible string.
	    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
	    //
	    // Walk through the string checking with a /g regexp
	    // Manually set the index so as to pick up overlapping matches.
	    // Stop when we get a match that ends at the string end, since no
	    // coercible string can be more right-ward without the same terminus.
	    var next;
	    while ((next = re[t.COERCERTL].exec(version)) &&
	      (!match || match.index + match[0].length !== version.length)
	    ) {
	      if (!match ||
	          next.index + next[0].length !== match.index + match[0].length) {
	        match = next;
	      }
	      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
	    }
	    // leave it in a clean state
	    re[t.COERCERTL].lastIndex = -1;
	  }

	  if (match === null) {
	    return null
	  }

	  return parse(match[2] +
	    '.' + (match[3] || '0') +
	    '.' + (match[4] || '0'), options)
	}
	}(semver, semver.exports));

	Object.defineProperty(file$2, "__esModule", {
	  value: true
	});
	file$2.default = void 0;

	function helpers$2() {
	  const data = lib$u;

	  helpers$2 = function () {
	    return data;
	  };

	  return data;
	}

	function _traverse$3() {
	  const data = lib$t;

	  _traverse$3 = function () {
	    return data;
	  };

	  return data;
	}

	function _codeFrame$1() {
	  const data = lib$o;

	  _codeFrame$1 = function () {
	    return data;
	  };

	  return data;
	}

	function _t$2() {
	  const data = lib$s;

	  _t$2 = function () {
	    return data;
	  };

	  return data;
	}

	function _helperModuleTransforms() {
	  const data = lib$i;

	  _helperModuleTransforms = function () {
	    return data;
	  };

	  return data;
	}

	function _semver$5() {
	  const data = semver.exports;

	  _semver$5 = function () {
	    return data;
	  };

	  return data;
	}

	const {
	  cloneNode: cloneNode$2,
	  interpreterDirective
	} = _t$2();

	const errorVisitor = {
	  enter(path, state) {
	    const loc = path.node.loc;

	    if (loc) {
	      state.loc = loc;
	      path.stop();
	    }
	  }

	};

	class File {
	  constructor(options, {
	    code,
	    ast,
	    inputMap
	  }) {
	    this._map = new Map();
	    this.opts = void 0;
	    this.declarations = {};
	    this.path = null;
	    this.ast = {};
	    this.scope = void 0;
	    this.metadata = {};
	    this.code = "";
	    this.inputMap = null;
	    this.hub = {
	      file: this,
	      getCode: () => this.code,
	      getScope: () => this.scope,
	      addHelper: this.addHelper.bind(this),
	      buildError: this.buildCodeFrameError.bind(this)
	    };
	    this.opts = options;
	    this.code = code;
	    this.ast = ast;
	    this.inputMap = inputMap;
	    this.path = _traverse$3().NodePath.get({
	      hub: this.hub,
	      parentPath: null,
	      parent: this.ast,
	      container: this.ast,
	      key: "program"
	    }).setContext();
	    this.scope = this.path.scope;
	  }

	  get shebang() {
	    const {
	      interpreter
	    } = this.path.node;
	    return interpreter ? interpreter.value : "";
	  }

	  set shebang(value) {
	    if (value) {
	      this.path.get("interpreter").replaceWith(interpreterDirective(value));
	    } else {
	      this.path.get("interpreter").remove();
	    }
	  }

	  set(key, val) {
	    if (key === "helpersNamespace") {
	      throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility." + "If you are using @babel/plugin-external-helpers you will need to use a newer " + "version than the one you currently have installed. " + "If you have your own implementation, you'll want to explore using 'helperGenerator' " + "alongside 'file.availableHelper()'.");
	    }

	    this._map.set(key, val);
	  }

	  get(key) {
	    return this._map.get(key);
	  }

	  has(key) {
	    return this._map.has(key);
	  }

	  getModuleName() {
	    return (0, _helperModuleTransforms().getModuleName)(this.opts, this.opts);
	  }

	  addImport() {
	    throw new Error("This API has been removed. If you're looking for this " + "functionality in Babel 7, you should import the " + "'@babel/helper-module-imports' module and use the functions exposed " + " from that module, such as 'addNamed' or 'addDefault'.");
	  }

	  availableHelper(name, versionRange) {
	    let minVersion;

	    try {
	      minVersion = helpers$2().minVersion(name);
	    } catch (err) {
	      if (err.code !== "BABEL_HELPER_UNKNOWN") throw err;
	      return false;
	    }

	    if (typeof versionRange !== "string") return true;
	    if (_semver$5().valid(versionRange)) versionRange = `^${versionRange}`;
	    return !_semver$5().intersects(`<${minVersion}`, versionRange) && !_semver$5().intersects(`>=8.0.0`, versionRange);
	  }

	  addHelper(name) {
	    const declar = this.declarations[name];
	    if (declar) return cloneNode$2(declar);
	    const generator = this.get("helperGenerator");

	    if (generator) {
	      const res = generator(name);
	      if (res) return res;
	    }

	    helpers$2().ensure(name, File);
	    const uid = this.declarations[name] = this.scope.generateUidIdentifier(name);
	    const dependencies = {};

	    for (const dep of helpers$2().getDependencies(name)) {
	      dependencies[dep] = this.addHelper(dep);
	    }

	    const {
	      nodes,
	      globals
	    } = helpers$2().get(name, dep => dependencies[dep], uid, Object.keys(this.scope.getAllBindings()));
	    globals.forEach(name => {
	      if (this.path.scope.hasBinding(name, true)) {
	        this.path.scope.rename(name);
	      }
	    });
	    nodes.forEach(node => {
	      node._compact = true;
	    });
	    this.path.unshiftContainer("body", nodes);
	    this.path.get("body").forEach(path => {
	      if (nodes.indexOf(path.node) === -1) return;
	      if (path.isVariableDeclaration()) this.scope.registerDeclaration(path);
	    });
	    return uid;
	  }

	  addTemplateObject() {
	    throw new Error("This function has been moved into the template literal transform itself.");
	  }

	  buildCodeFrameError(node, msg, _Error = SyntaxError) {
	    let loc = node && (node.loc || node._loc);

	    if (!loc && node) {
	      const state = {
	        loc: null
	      };
	      (0, _traverse$3().default)(node, errorVisitor, this.scope, state);
	      loc = state.loc;
	      let txt = "This is an error on an internal node. Probably an internal error.";
	      if (loc) txt += " Location has been estimated.";
	      msg += ` (${txt})`;
	    }

	    if (loc) {
	      const {
	        highlightCode = true
	      } = this.opts;
	      msg += "\n" + (0, _codeFrame$1().codeFrameColumns)(this.code, {
	        start: {
	          line: loc.start.line,
	          column: loc.start.column + 1
	        },
	        end: loc.end && loc.start.line === loc.end.line ? {
	          line: loc.end.line,
	          column: loc.end.column + 1
	        } : undefined
	      }, {
	        highlightCode
	      });
	    }

	    return new _Error(msg);
	  }

	}

	file$2.default = File;

	var buildExternalHelpers = {};

	Object.defineProperty(buildExternalHelpers, "__esModule", {
	  value: true
	});
	buildExternalHelpers.default = _default$5;

	function helpers$1() {
	  const data = lib$u;

	  helpers$1 = function () {
	    return data;
	  };

	  return data;
	}

	function _generator$1() {
	  const data = lib$p;

	  _generator$1 = function () {
	    return data;
	  };

	  return data;
	}

	function _template() {
	  const data = lib$j;

	  _template = function () {
	    return data;
	  };

	  return data;
	}

	function _t$1() {
	  const data = lib$s;

	  _t$1 = function () {
	    return data;
	  };

	  return data;
	}

	var _file$1 = file$2;

	const {
	  arrayExpression,
	  assignmentExpression,
	  binaryExpression,
	  blockStatement,
	  callExpression,
	  cloneNode: cloneNode$1,
	  conditionalExpression,
	  exportNamedDeclaration,
	  exportSpecifier,
	  expressionStatement,
	  functionExpression,
	  identifier,
	  memberExpression,
	  objectExpression,
	  program,
	  stringLiteral,
	  unaryExpression,
	  variableDeclaration,
	  variableDeclarator
	} = _t$1();

	const buildUmdWrapper = replacements => _template().default.statement`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(replacements);

	function buildGlobal(allowlist) {
	  const namespace = identifier("babelHelpers");
	  const body = [];
	  const container = functionExpression(null, [identifier("global")], blockStatement(body));
	  const tree = program([expressionStatement(callExpression(container, [conditionalExpression(binaryExpression("===", unaryExpression("typeof", identifier("global")), stringLiteral("undefined")), identifier("self"), identifier("global"))]))]);
	  body.push(variableDeclaration("var", [variableDeclarator(namespace, assignmentExpression("=", memberExpression(identifier("global"), namespace), objectExpression([])))]));
	  buildHelpers(body, namespace, allowlist);
	  return tree;
	}

	function buildModule(allowlist) {
	  const body = [];
	  const refs = buildHelpers(body, null, allowlist);
	  body.unshift(exportNamedDeclaration(null, Object.keys(refs).map(name => {
	    return exportSpecifier(cloneNode$1(refs[name]), identifier(name));
	  })));
	  return program(body, [], "module");
	}

	function buildUmd(allowlist) {
	  const namespace = identifier("babelHelpers");
	  const body = [];
	  body.push(variableDeclaration("var", [variableDeclarator(namespace, identifier("global"))]));
	  buildHelpers(body, namespace, allowlist);
	  return program([buildUmdWrapper({
	    FACTORY_PARAMETERS: identifier("global"),
	    BROWSER_ARGUMENTS: assignmentExpression("=", memberExpression(identifier("root"), namespace), objectExpression([])),
	    COMMON_ARGUMENTS: identifier("exports"),
	    AMD_ARGUMENTS: arrayExpression([stringLiteral("exports")]),
	    FACTORY_BODY: body,
	    UMD_ROOT: identifier("this")
	  })]);
	}

	function buildVar(allowlist) {
	  const namespace = identifier("babelHelpers");
	  const body = [];
	  body.push(variableDeclaration("var", [variableDeclarator(namespace, objectExpression([]))]));
	  const tree = program(body);
	  buildHelpers(body, namespace, allowlist);
	  body.push(expressionStatement(namespace));
	  return tree;
	}

	function buildHelpers(body, namespace, allowlist) {
	  const getHelperReference = name => {
	    return namespace ? memberExpression(namespace, identifier(name)) : identifier(`_${name}`);
	  };

	  const refs = {};
	  helpers$1().list.forEach(function (name) {
	    if (allowlist && allowlist.indexOf(name) < 0) return;
	    const ref = refs[name] = getHelperReference(name);
	    helpers$1().ensure(name, _file$1.default);
	    const {
	      nodes
	    } = helpers$1().get(name, getHelperReference, ref);
	    body.push(...nodes);
	  });
	  return refs;
	}

	function _default$5(allowlist, outputType = "global") {
	  let tree;
	  const build = {
	    global: buildGlobal,
	    module: buildModule,
	    umd: buildUmd,
	    var: buildVar
	  }[outputType];

	  if (build) {
	    tree = build(allowlist);
	  } else {
	    throw new Error(`Unsupported output type ${outputType}`);
	  }

	  return (0, _generator$1().default)(tree).code;
	}

	var files = {};

	var _package = {};

	var utils$2 = {};

	var caching = {};

	// These use the global symbol registry so that multiple copies of this
	// library can work together in case they are not deduped.
	const GENSYNC_START = Symbol.for("gensync:v1:start");
	const GENSYNC_SUSPEND = Symbol.for("gensync:v1:suspend");

	const GENSYNC_EXPECTED_START = "GENSYNC_EXPECTED_START";
	const GENSYNC_EXPECTED_SUSPEND = "GENSYNC_EXPECTED_SUSPEND";
	const GENSYNC_OPTIONS_ERROR = "GENSYNC_OPTIONS_ERROR";
	const GENSYNC_RACE_NONEMPTY = "GENSYNC_RACE_NONEMPTY";
	const GENSYNC_ERRBACK_NO_CALLBACK = "GENSYNC_ERRBACK_NO_CALLBACK";

	var gensync = Object.assign(
	  function gensync(optsOrFn) {
	    let genFn = optsOrFn;
	    if (typeof optsOrFn !== "function") {
	      genFn = newGenerator(optsOrFn);
	    } else {
	      genFn = wrapGenerator(optsOrFn);
	    }

	    return Object.assign(genFn, makeFunctionAPI(genFn));
	  },
	  {
	    all: buildOperation({
	      name: "all",
	      arity: 1,
	      sync: function(args) {
	        const items = Array.from(args[0]);
	        return items.map(item => evaluateSync(item));
	      },
	      async: function(args, resolve, reject) {
	        const items = Array.from(args[0]);

	        if (items.length === 0) {
	          Promise.resolve().then(() => resolve([]));
	          return;
	        }

	        let count = 0;
	        const results = items.map(() => undefined);
	        items.forEach((item, i) => {
	          evaluateAsync(
	            item,
	            val => {
	              results[i] = val;
	              count += 1;

	              if (count === results.length) resolve(results);
	            },
	            reject
	          );
	        });
	      },
	    }),
	    race: buildOperation({
	      name: "race",
	      arity: 1,
	      sync: function(args) {
	        const items = Array.from(args[0]);
	        if (items.length === 0) {
	          throw makeError("Must race at least 1 item", GENSYNC_RACE_NONEMPTY);
	        }

	        return evaluateSync(items[0]);
	      },
	      async: function(args, resolve, reject) {
	        const items = Array.from(args[0]);
	        if (items.length === 0) {
	          throw makeError("Must race at least 1 item", GENSYNC_RACE_NONEMPTY);
	        }

	        for (const item of items) {
	          evaluateAsync(item, resolve, reject);
	        }
	      },
	    }),
	  }
	);

	/**
	 * Given a generator function, return the standard API object that executes
	 * the generator and calls the callbacks.
	 */
	function makeFunctionAPI(genFn) {
	  const fns = {
	    sync: function(...args) {
	      return evaluateSync(genFn.apply(this, args));
	    },
	    async: function(...args) {
	      return new Promise((resolve, reject) => {
	        evaluateAsync(genFn.apply(this, args), resolve, reject);
	      });
	    },
	    errback: function(...args) {
	      const cb = args.pop();
	      if (typeof cb !== "function") {
	        throw makeError(
	          "Asynchronous function called without callback",
	          GENSYNC_ERRBACK_NO_CALLBACK
	        );
	      }

	      let gen;
	      try {
	        gen = genFn.apply(this, args);
	      } catch (err) {
	        cb(err);
	        return;
	      }

	      evaluateAsync(gen, val => cb(undefined, val), err => cb(err));
	    },
	  };
	  return fns;
	}

	function assertTypeof(type, name, value, allowUndefined) {
	  if (
	    typeof value === type ||
	    (allowUndefined && typeof value === "undefined")
	  ) {
	    return;
	  }

	  let msg;
	  if (allowUndefined) {
	    msg = `Expected opts.${name} to be either a ${type}, or undefined.`;
	  } else {
	    msg = `Expected opts.${name} to be a ${type}.`;
	  }

	  throw makeError(msg, GENSYNC_OPTIONS_ERROR);
	}
	function makeError(msg, code) {
	  return Object.assign(new Error(msg), { code });
	}

	/**
	 * Given an options object, return a new generator that dispatches the
	 * correct handler based on sync or async execution.
	 */
	function newGenerator({ name, arity, sync, async, errback }) {
	  assertTypeof("string", "name", name, true /* allowUndefined */);
	  assertTypeof("number", "arity", arity, true /* allowUndefined */);
	  assertTypeof("function", "sync", sync);
	  assertTypeof("function", "async", async, true /* allowUndefined */);
	  assertTypeof("function", "errback", errback, true /* allowUndefined */);
	  if (async && errback) {
	    throw makeError(
	      "Expected one of either opts.async or opts.errback, but got _both_.",
	      GENSYNC_OPTIONS_ERROR
	    );
	  }

	  if (typeof name !== "string") {
	    let fnName;
	    if (errback && errback.name && errback.name !== "errback") {
	      fnName = errback.name;
	    }
	    if (async && async.name && async.name !== "async") {
	      fnName = async.name.replace(/Async$/, "");
	    }
	    if (sync && sync.name && sync.name !== "sync") {
	      fnName = sync.name.replace(/Sync$/, "");
	    }

	    if (typeof fnName === "string") {
	      name = fnName;
	    }
	  }

	  if (typeof arity !== "number") {
	    arity = sync.length;
	  }

	  return buildOperation({
	    name,
	    arity,
	    sync: function(args) {
	      return sync.apply(this, args);
	    },
	    async: function(args, resolve, reject) {
	      if (async) {
	        async.apply(this, args).then(resolve, reject);
	      } else if (errback) {
	        errback.call(this, ...args, (err, value) => {
	          if (err == null) resolve(value);
	          else reject(err);
	        });
	      } else {
	        resolve(sync.apply(this, args));
	      }
	    },
	  });
	}

	function wrapGenerator(genFn) {
	  return setFunctionMetadata(genFn.name, genFn.length, function(...args) {
	    return genFn.apply(this, args);
	  });
	}

	function buildOperation({ name, arity, sync, async }) {
	  return setFunctionMetadata(name, arity, function*(...args) {
	    const resume = yield GENSYNC_START;
	    if (!resume) {
	      // Break the tail call to avoid a bug in V8 v6.X with --harmony enabled.
	      const res = sync.call(this, args);
	      return res;
	    }

	    let result;
	    try {
	      async.call(
	        this,
	        args,
	        value => {
	          if (result) return;

	          result = { value };
	          resume();
	        },
	        err => {
	          if (result) return;

	          result = { err };
	          resume();
	        }
	      );
	    } catch (err) {
	      result = { err };
	      resume();
	    }

	    // Suspend until the callbacks run. Will resume synchronously if the
	    // callback was already called.
	    yield GENSYNC_SUSPEND;

	    if (result.hasOwnProperty("err")) {
	      throw result.err;
	    }

	    return result.value;
	  });
	}

	function evaluateSync(gen) {
	  let value;
	  while (!({ value } = gen.next()).done) {
	    assertStart(value, gen);
	  }
	  return value;
	}

	function evaluateAsync(gen, resolve, reject) {
	  (function step() {
	    try {
	      let value;
	      while (!({ value } = gen.next()).done) {
	        assertStart(value, gen);

	        // If this throws, it is considered to have broken the contract
	        // established for async handlers. If these handlers are called
	        // synchronously, it is also considered bad behavior.
	        let sync = true;
	        let didSyncResume = false;
	        const out = gen.next(() => {
	          if (sync) {
	            didSyncResume = true;
	          } else {
	            step();
	          }
	        });
	        sync = false;

	        assertSuspend(out, gen);

	        if (!didSyncResume) {
	          // Callback wasn't called synchronously, so break out of the loop
	          // and let it call 'step' later.
	          return;
	        }
	      }

	      return resolve(value);
	    } catch (err) {
	      return reject(err);
	    }
	  })();
	}

	function assertStart(value, gen) {
	  if (value === GENSYNC_START) return;

	  throwError(
	    gen,
	    makeError(
	      `Got unexpected yielded value in gensync generator: ${JSON.stringify(
        value
      )}. Did you perhaps mean to use 'yield*' instead of 'yield'?`,
	      GENSYNC_EXPECTED_START
	    )
	  );
	}
	function assertSuspend({ value, done }, gen) {
	  if (!done && value === GENSYNC_SUSPEND) return;

	  throwError(
	    gen,
	    makeError(
	      done
	        ? "Unexpected generator completion. If you get this, it is probably a gensync bug."
	        : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(
            value
          )}. If you get this, it is probably a gensync bug.`,
	      GENSYNC_EXPECTED_SUSPEND
	    )
	  );
	}

	function throwError(gen, err) {
	  // Call `.throw` so that users can step in a debugger to easily see which
	  // 'yield' passed an unexpected value. If the `.throw` call didn't throw
	  // back to the generator, we explicitly do it to stop the error
	  // from being swallowed by user code try/catches.
	  if (gen.throw) gen.throw(err);
	  throw err;
	}

	function setFunctionMetadata(name, arity, fn) {
	  if (typeof name === "string") {
	    // This should always work on the supported Node versions, but for the
	    // sake of users that are compiling to older versions, we check for
	    // configurability so we don't throw.
	    const nameDesc = Object.getOwnPropertyDescriptor(fn, "name");
	    if (!nameDesc || nameDesc.configurable) {
	      Object.defineProperty(
	        fn,
	        "name",
	        Object.assign(nameDesc || {}, {
	          configurable: true,
	          value: name,
	        })
	      );
	    }
	  }

	  if (typeof arity === "number") {
	    const lengthDesc = Object.getOwnPropertyDescriptor(fn, "length");
	    if (!lengthDesc || lengthDesc.configurable) {
	      Object.defineProperty(
	        fn,
	        "length",
	        Object.assign(lengthDesc || {}, {
	          configurable: true,
	          value: arity,
	        })
	      );
	    }
	  }

	  return fn;
	}

	var async = {};

	Object.defineProperty(async, "__esModule", {
	  value: true
	});
	async.maybeAsync = maybeAsync;
	async.forwardAsync = forwardAsync;
	async.isThenable = isThenable$1;
	async.waitFor = async.onFirstPause = async.isAsync = void 0;

	function _gensync$b() {
	  const data = gensync;

	  _gensync$b = function () {
	    return data;
	  };

	  return data;
	}

	const id = x => x;

	const runGenerator = _gensync$b()(function* (item) {
	  return yield* item;
	});

	const isAsync = _gensync$b()({
	  sync: () => false,
	  errback: cb => cb(null, true)
	});

	async.isAsync = isAsync;

	function maybeAsync(fn, message) {
	  return _gensync$b()({
	    sync(...args) {
	      const result = fn.apply(this, args);
	      if (isThenable$1(result)) throw new Error(message);
	      return result;
	    },

	    async(...args) {
	      return Promise.resolve(fn.apply(this, args));
	    }

	  });
	}

	const withKind = _gensync$b()({
	  sync: cb => cb("sync"),
	  async: cb => cb("async")
	});

	function forwardAsync(action, cb) {
	  const g = _gensync$b()(action);

	  return withKind(kind => {
	    const adapted = g[kind];
	    return cb(adapted);
	  });
	}

	const onFirstPause = _gensync$b()({
	  name: "onFirstPause",
	  arity: 2,
	  sync: function (item) {
	    return runGenerator.sync(item);
	  },
	  errback: function (item, firstPause, cb) {
	    let completed = false;
	    runGenerator.errback(item, (err, value) => {
	      completed = true;
	      cb(err, value);
	    });

	    if (!completed) {
	      firstPause();
	    }
	  }
	});

	async.onFirstPause = onFirstPause;

	const waitFor = _gensync$b()({
	  sync: id,
	  async: id
	});

	async.waitFor = waitFor;

	function isThenable$1(val) {
	  return !!val && (typeof val === "object" || typeof val === "function") && !!val.then && typeof val.then === "function";
	}

	var util$7 = {};

	Object.defineProperty(util$7, "__esModule", {
	  value: true
	});
	util$7.mergeOptions = mergeOptions;
	util$7.isIterableIterator = isIterableIterator;

	function mergeOptions(target, source) {
	  for (const k of Object.keys(source)) {
	    if ((k === "parserOpts" || k === "generatorOpts" || k === "assumptions") && source[k]) {
	      const parserOpts = source[k];
	      const targetObj = target[k] || (target[k] = {});
	      mergeDefaultFields(targetObj, parserOpts);
	    } else {
	      const val = source[k];
	      if (val !== undefined) target[k] = val;
	    }
	  }
	}

	function mergeDefaultFields(target, source) {
	  for (const k of Object.keys(source)) {
	    const val = source[k];
	    if (val !== undefined) target[k] = val;
	  }
	}

	function isIterableIterator(value) {
	  return !!value && typeof value.next === "function" && typeof value[Symbol.iterator] === "function";
	}

	Object.defineProperty(caching, "__esModule", {
	  value: true
	});
	caching.makeWeakCache = makeWeakCache;
	caching.makeWeakCacheSync = makeWeakCacheSync;
	caching.makeStrongCache = makeStrongCache;
	caching.makeStrongCacheSync = makeStrongCacheSync;
	caching.assertSimpleType = assertSimpleType;

	function _gensync$a() {
	  const data = gensync;

	  _gensync$a = function () {
	    return data;
	  };

	  return data;
	}

	var _async$2 = async;

	var _util$2 = util$7;

	const synchronize = gen => {
	  return _gensync$a()(gen).sync;
	};

	function* genTrue() {
	  return true;
	}

	function makeWeakCache(handler) {
	  return makeCachedFunction(WeakMap, handler);
	}

	function makeWeakCacheSync(handler) {
	  return synchronize(makeWeakCache(handler));
	}

	function makeStrongCache(handler) {
	  return makeCachedFunction(Map, handler);
	}

	function makeStrongCacheSync(handler) {
	  return synchronize(makeStrongCache(handler));
	}

	function makeCachedFunction(CallCache, handler) {
	  const callCacheSync = new CallCache();
	  const callCacheAsync = new CallCache();
	  const futureCache = new CallCache();
	  return function* cachedFunction(arg, data) {
	    const asyncContext = yield* (0, _async$2.isAsync)();
	    const callCache = asyncContext ? callCacheAsync : callCacheSync;
	    const cached = yield* getCachedValueOrWait(asyncContext, callCache, futureCache, arg, data);
	    if (cached.valid) return cached.value;
	    const cache = new CacheConfigurator(data);
	    const handlerResult = handler(arg, cache);
	    let finishLock;
	    let value;

	    if ((0, _util$2.isIterableIterator)(handlerResult)) {
	      const gen = handlerResult;
	      value = yield* (0, _async$2.onFirstPause)(gen, () => {
	        finishLock = setupAsyncLocks(cache, futureCache, arg);
	      });
	    } else {
	      value = handlerResult;
	    }

	    updateFunctionCache(callCache, cache, arg, value);

	    if (finishLock) {
	      futureCache.delete(arg);
	      finishLock.release(value);
	    }

	    return value;
	  };
	}

	function* getCachedValue(cache, arg, data) {
	  const cachedValue = cache.get(arg);

	  if (cachedValue) {
	    for (const {
	      value,
	      valid
	    } of cachedValue) {
	      if (yield* valid(data)) return {
	        valid: true,
	        value
	      };
	    }
	  }

	  return {
	    valid: false,
	    value: null
	  };
	}

	function* getCachedValueOrWait(asyncContext, callCache, futureCache, arg, data) {
	  const cached = yield* getCachedValue(callCache, arg, data);

	  if (cached.valid) {
	    return cached;
	  }

	  if (asyncContext) {
	    const cached = yield* getCachedValue(futureCache, arg, data);

	    if (cached.valid) {
	      const value = yield* (0, _async$2.waitFor)(cached.value.promise);
	      return {
	        valid: true,
	        value
	      };
	    }
	  }

	  return {
	    valid: false,
	    value: null
	  };
	}

	function setupAsyncLocks(config, futureCache, arg) {
	  const finishLock = new Lock();
	  updateFunctionCache(futureCache, config, arg, finishLock);
	  return finishLock;
	}

	function updateFunctionCache(cache, config, arg, value) {
	  if (!config.configured()) config.forever();
	  let cachedValue = cache.get(arg);
	  config.deactivate();

	  switch (config.mode()) {
	    case "forever":
	      cachedValue = [{
	        value,
	        valid: genTrue
	      }];
	      cache.set(arg, cachedValue);
	      break;

	    case "invalidate":
	      cachedValue = [{
	        value,
	        valid: config.validator()
	      }];
	      cache.set(arg, cachedValue);
	      break;

	    case "valid":
	      if (cachedValue) {
	        cachedValue.push({
	          value,
	          valid: config.validator()
	        });
	      } else {
	        cachedValue = [{
	          value,
	          valid: config.validator()
	        }];
	        cache.set(arg, cachedValue);
	      }

	  }
	}

	class CacheConfigurator {
	  constructor(data) {
	    this._active = true;
	    this._never = false;
	    this._forever = false;
	    this._invalidate = false;
	    this._configured = false;
	    this._pairs = [];
	    this._data = void 0;
	    this._data = data;
	  }

	  simple() {
	    return makeSimpleConfigurator(this);
	  }

	  mode() {
	    if (this._never) return "never";
	    if (this._forever) return "forever";
	    if (this._invalidate) return "invalidate";
	    return "valid";
	  }

	  forever() {
	    if (!this._active) {
	      throw new Error("Cannot change caching after evaluation has completed.");
	    }

	    if (this._never) {
	      throw new Error("Caching has already been configured with .never()");
	    }

	    this._forever = true;
	    this._configured = true;
	  }

	  never() {
	    if (!this._active) {
	      throw new Error("Cannot change caching after evaluation has completed.");
	    }

	    if (this._forever) {
	      throw new Error("Caching has already been configured with .forever()");
	    }

	    this._never = true;
	    this._configured = true;
	  }

	  using(handler) {
	    if (!this._active) {
	      throw new Error("Cannot change caching after evaluation has completed.");
	    }

	    if (this._never || this._forever) {
	      throw new Error("Caching has already been configured with .never or .forever()");
	    }

	    this._configured = true;
	    const key = handler(this._data);
	    const fn = (0, _async$2.maybeAsync)(handler, `You appear to be using an async cache handler, but Babel has been called synchronously`);

	    if ((0, _async$2.isThenable)(key)) {
	      return key.then(key => {
	        this._pairs.push([key, fn]);

	        return key;
	      });
	    }

	    this._pairs.push([key, fn]);

	    return key;
	  }

	  invalidate(handler) {
	    this._invalidate = true;
	    return this.using(handler);
	  }

	  validator() {
	    const pairs = this._pairs;
	    return function* (data) {
	      for (const [key, fn] of pairs) {
	        if (key !== (yield* fn(data))) return false;
	      }

	      return true;
	    };
	  }

	  deactivate() {
	    this._active = false;
	  }

	  configured() {
	    return this._configured;
	  }

	}

	function makeSimpleConfigurator(cache) {
	  function cacheFn(val) {
	    if (typeof val === "boolean") {
	      if (val) cache.forever();else cache.never();
	      return;
	    }

	    return cache.using(() => assertSimpleType(val()));
	  }

	  cacheFn.forever = () => cache.forever();

	  cacheFn.never = () => cache.never();

	  cacheFn.using = cb => cache.using(() => assertSimpleType(cb()));

	  cacheFn.invalidate = cb => cache.invalidate(() => assertSimpleType(cb()));

	  return cacheFn;
	}

	function assertSimpleType(value) {
	  if ((0, _async$2.isThenable)(value)) {
	    throw new Error(`You appear to be using an async cache handler, ` + `which your current version of Babel does not support. ` + `We may add support for this in the future, ` + `but if you're on the most recent version of @babel/core and still ` + `seeing this error, then you'll need to synchronously handle your caching logic.`);
	  }

	  if (value != null && typeof value !== "string" && typeof value !== "boolean" && typeof value !== "number") {
	    throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");
	  }

	  return value;
	}

	class Lock {
	  constructor() {
	    this.released = false;
	    this.promise = void 0;
	    this._resolve = void 0;
	    this.promise = new Promise(resolve => {
	      this._resolve = resolve;
	    });
	  }

	  release(value) {
	    this.released = true;

	    this._resolve(value);
	  }

	}

	var fs$3 = {};

	Object.defineProperty(fs$3, "__esModule", {
	  value: true
	});
	fs$3.stat = fs$3.readFile = void 0;

	function _fs$2() {
	  const data = require$$0__default$2['default'];

	  _fs$2 = function () {
	    return data;
	  };

	  return data;
	}

	function _gensync$9() {
	  const data = gensync;

	  _gensync$9 = function () {
	    return data;
	  };

	  return data;
	}

	const readFile = _gensync$9()({
	  sync: _fs$2().readFileSync,
	  errback: _fs$2().readFile
	});

	fs$3.readFile = readFile;

	const stat = _gensync$9()({
	  sync: _fs$2().statSync,
	  errback: _fs$2().stat
	});

	fs$3.stat = stat;

	Object.defineProperty(utils$2, "__esModule", {
	  value: true
	});
	utils$2.makeStaticFileCache = makeStaticFileCache;

	var _caching$5 = caching;

	var fs$2 = fs$3;

	function _fs2() {
	  const data = require$$0__default$2['default'];

	  _fs2 = function () {
	    return data;
	  };

	  return data;
	}

	function makeStaticFileCache(fn) {
	  return (0, _caching$5.makeStrongCache)(function* (filepath, cache) {
	    const cached = cache.invalidate(() => fileMtime(filepath));

	    if (cached === null) {
	      return null;
	    }

	    return fn(filepath, yield* fs$2.readFile(filepath, "utf8"));
	  });
	}

	function fileMtime(filepath) {
	  if (!_fs2().existsSync(filepath)) return null;

	  try {
	    return +_fs2().statSync(filepath).mtime;
	  } catch (e) {
	    if (e.code !== "ENOENT" && e.code !== "ENOTDIR") throw e;
	  }

	  return null;
	}

	Object.defineProperty(_package, "__esModule", {
	  value: true
	});
	_package.findPackageData = findPackageData;

	function _path$a() {
	  const data = require$$0__default['default'];

	  _path$a = function () {
	    return data;
	  };

	  return data;
	}

	var _utils$3 = utils$2;

	const PACKAGE_FILENAME = "package.json";

	function* findPackageData(filepath) {
	  let pkg = null;
	  const directories = [];
	  let isPackage = true;

	  let dirname = _path$a().dirname(filepath);

	  while (!pkg && _path$a().basename(dirname) !== "node_modules") {
	    directories.push(dirname);
	    pkg = yield* readConfigPackage(_path$a().join(dirname, PACKAGE_FILENAME));

	    const nextLoc = _path$a().dirname(dirname);

	    if (dirname === nextLoc) {
	      isPackage = false;
	      break;
	    }

	    dirname = nextLoc;
	  }

	  return {
	    filepath,
	    directories,
	    pkg,
	    isPackage
	  };
	}

	const readConfigPackage = (0, _utils$3.makeStaticFileCache)((filepath, content) => {
	  let options;

	  try {
	    options = JSON.parse(content);
	  } catch (err) {
	    err.message = `${filepath}: Error while parsing JSON - ${err.message}`;
	    throw err;
	  }

	  if (!options) throw new Error(`${filepath}: No config detected`);

	  if (typeof options !== "object") {
	    throw new Error(`${filepath}: Config returned typeof ${typeof options}`);
	  }

	  if (Array.isArray(options)) {
	    throw new Error(`${filepath}: Expected config object but found array`);
	  }

	  return {
	    filepath,
	    dirname: _path$a().dirname(filepath),
	    options
	  };
	});

	var configuration = {};

	// This is a generated file. Do not edit.
	var Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/;
	var ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
	var ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;

	var unicode = {
		Space_Separator: Space_Separator,
		ID_Start: ID_Start,
		ID_Continue: ID_Continue
	};

	var util$6 = {
	    isSpaceSeparator (c) {
	        return typeof c === 'string' && unicode.Space_Separator.test(c)
	    },

	    isIdStartChar (c) {
	        return typeof c === 'string' && (
	            (c >= 'a' && c <= 'z') ||
	        (c >= 'A' && c <= 'Z') ||
	        (c === '$') || (c === '_') ||
	        unicode.ID_Start.test(c)
	        )
	    },

	    isIdContinueChar (c) {
	        return typeof c === 'string' && (
	            (c >= 'a' && c <= 'z') ||
	        (c >= 'A' && c <= 'Z') ||
	        (c >= '0' && c <= '9') ||
	        (c === '$') || (c === '_') ||
	        (c === '\u200C') || (c === '\u200D') ||
	        unicode.ID_Continue.test(c)
	        )
	    },

	    isDigit (c) {
	        return typeof c === 'string' && /[0-9]/.test(c)
	    },

	    isHexDigit (c) {
	        return typeof c === 'string' && /[0-9A-Fa-f]/.test(c)
	    },
	};

	let source;
	let parseState;
	let stack;
	let pos;
	let line;
	let column;
	let token;
	let key$1;
	let root;

	var parse$a = function parse (text, reviver) {
	    source = String(text);
	    parseState = 'start';
	    stack = [];
	    pos = 0;
	    line = 1;
	    column = 0;
	    token = undefined;
	    key$1 = undefined;
	    root = undefined;

	    do {
	        token = lex();

	        // This code is unreachable.
	        // if (!parseStates[parseState]) {
	        //     throw invalidParseState()
	        // }

	        parseStates[parseState]();
	    } while (token.type !== 'eof')

	    if (typeof reviver === 'function') {
	        return internalize({'': root}, '', reviver)
	    }

	    return root
	};

	function internalize (holder, name, reviver) {
	    const value = holder[name];
	    if (value != null && typeof value === 'object') {
	        for (const key in value) {
	            const replacement = internalize(value, key, reviver);
	            if (replacement === undefined) {
	                delete value[key];
	            } else {
	                value[key] = replacement;
	            }
	        }
	    }

	    return reviver.call(holder, name, value)
	}

	let lexState;
	let buffer;
	let doubleQuote;
	let sign;
	let c;

	function lex () {
	    lexState = 'default';
	    buffer = '';
	    doubleQuote = false;
	    sign = 1;

	    for (;;) {
	        c = peek();

	        // This code is unreachable.
	        // if (!lexStates[lexState]) {
	        //     throw invalidLexState(lexState)
	        // }

	        const token = lexStates[lexState]();
	        if (token) {
	            return token
	        }
	    }
	}

	function peek () {
	    if (source[pos]) {
	        return String.fromCodePoint(source.codePointAt(pos))
	    }
	}

	function read () {
	    const c = peek();

	    if (c === '\n') {
	        line++;
	        column = 0;
	    } else if (c) {
	        column += c.length;
	    } else {
	        column++;
	    }

	    if (c) {
	        pos += c.length;
	    }

	    return c
	}

	const lexStates = {
	    default () {
	        switch (c) {
	        case '\t':
	        case '\v':
	        case '\f':
	        case ' ':
	        case '\u00A0':
	        case '\uFEFF':
	        case '\n':
	        case '\r':
	        case '\u2028':
	        case '\u2029':
	            read();
	            return

	        case '/':
	            read();
	            lexState = 'comment';
	            return

	        case undefined:
	            read();
	            return newToken('eof')
	        }

	        if (util$6.isSpaceSeparator(c)) {
	            read();
	            return
	        }

	        // This code is unreachable.
	        // if (!lexStates[parseState]) {
	        //     throw invalidLexState(parseState)
	        // }

	        return lexStates[parseState]()
	    },

	    comment () {
	        switch (c) {
	        case '*':
	            read();
	            lexState = 'multiLineComment';
	            return

	        case '/':
	            read();
	            lexState = 'singleLineComment';
	            return
	        }

	        throw invalidChar(read())
	    },

	    multiLineComment () {
	        switch (c) {
	        case '*':
	            read();
	            lexState = 'multiLineCommentAsterisk';
	            return

	        case undefined:
	            throw invalidChar(read())
	        }

	        read();
	    },

	    multiLineCommentAsterisk () {
	        switch (c) {
	        case '*':
	            read();
	            return

	        case '/':
	            read();
	            lexState = 'default';
	            return

	        case undefined:
	            throw invalidChar(read())
	        }

	        read();
	        lexState = 'multiLineComment';
	    },

	    singleLineComment () {
	        switch (c) {
	        case '\n':
	        case '\r':
	        case '\u2028':
	        case '\u2029':
	            read();
	            lexState = 'default';
	            return

	        case undefined:
	            read();
	            return newToken('eof')
	        }

	        read();
	    },

	    value () {
	        switch (c) {
	        case '{':
	        case '[':
	            return newToken('punctuator', read())

	        case 'n':
	            read();
	            literal('ull');
	            return newToken('null', null)

	        case 't':
	            read();
	            literal('rue');
	            return newToken('boolean', true)

	        case 'f':
	            read();
	            literal('alse');
	            return newToken('boolean', false)

	        case '-':
	        case '+':
	            if (read() === '-') {
	                sign = -1;
	            }

	            lexState = 'sign';
	            return

	        case '.':
	            buffer = read();
	            lexState = 'decimalPointLeading';
	            return

	        case '0':
	            buffer = read();
	            lexState = 'zero';
	            return

	        case '1':
	        case '2':
	        case '3':
	        case '4':
	        case '5':
	        case '6':
	        case '7':
	        case '8':
	        case '9':
	            buffer = read();
	            lexState = 'decimalInteger';
	            return

	        case 'I':
	            read();
	            literal('nfinity');
	            return newToken('numeric', Infinity)

	        case 'N':
	            read();
	            literal('aN');
	            return newToken('numeric', NaN)

	        case '"':
	        case "'":
	            doubleQuote = (read() === '"');
	            buffer = '';
	            lexState = 'string';
	            return
	        }

	        throw invalidChar(read())
	    },

	    identifierNameStartEscape () {
	        if (c !== 'u') {
	            throw invalidChar(read())
	        }

	        read();
	        const u = unicodeEscape();
	        switch (u) {
	        case '$':
	        case '_':
	            break

	        default:
	            if (!util$6.isIdStartChar(u)) {
	                throw invalidIdentifier()
	            }

	            break
	        }

	        buffer += u;
	        lexState = 'identifierName';
	    },

	    identifierName () {
	        switch (c) {
	        case '$':
	        case '_':
	        case '\u200C':
	        case '\u200D':
	            buffer += read();
	            return

	        case '\\':
	            read();
	            lexState = 'identifierNameEscape';
	            return
	        }

	        if (util$6.isIdContinueChar(c)) {
	            buffer += read();
	            return
	        }

	        return newToken('identifier', buffer)
	    },

	    identifierNameEscape () {
	        if (c !== 'u') {
	            throw invalidChar(read())
	        }

	        read();
	        const u = unicodeEscape();
	        switch (u) {
	        case '$':
	        case '_':
	        case '\u200C':
	        case '\u200D':
	            break

	        default:
	            if (!util$6.isIdContinueChar(u)) {
	                throw invalidIdentifier()
	            }

	            break
	        }

	        buffer += u;
	        lexState = 'identifierName';
	    },

	    sign () {
	        switch (c) {
	        case '.':
	            buffer = read();
	            lexState = 'decimalPointLeading';
	            return

	        case '0':
	            buffer = read();
	            lexState = 'zero';
	            return

	        case '1':
	        case '2':
	        case '3':
	        case '4':
	        case '5':
	        case '6':
	        case '7':
	        case '8':
	        case '9':
	            buffer = read();
	            lexState = 'decimalInteger';
	            return

	        case 'I':
	            read();
	            literal('nfinity');
	            return newToken('numeric', sign * Infinity)

	        case 'N':
	            read();
	            literal('aN');
	            return newToken('numeric', NaN)
	        }

	        throw invalidChar(read())
	    },

	    zero () {
	        switch (c) {
	        case '.':
	            buffer += read();
	            lexState = 'decimalPoint';
	            return

	        case 'e':
	        case 'E':
	            buffer += read();
	            lexState = 'decimalExponent';
	            return

	        case 'x':
	        case 'X':
	            buffer += read();
	            lexState = 'hexadecimal';
	            return
	        }

	        return newToken('numeric', sign * 0)
	    },

	    decimalInteger () {
	        switch (c) {
	        case '.':
	            buffer += read();
	            lexState = 'decimalPoint';
	            return

	        case 'e':
	        case 'E':
	            buffer += read();
	            lexState = 'decimalExponent';
	            return
	        }

	        if (util$6.isDigit(c)) {
	            buffer += read();
	            return
	        }

	        return newToken('numeric', sign * Number(buffer))
	    },

	    decimalPointLeading () {
	        if (util$6.isDigit(c)) {
	            buffer += read();
	            lexState = 'decimalFraction';
	            return
	        }

	        throw invalidChar(read())
	    },

	    decimalPoint () {
	        switch (c) {
	        case 'e':
	        case 'E':
	            buffer += read();
	            lexState = 'decimalExponent';
	            return
	        }

	        if (util$6.isDigit(c)) {
	            buffer += read();
	            lexState = 'decimalFraction';
	            return
	        }

	        return newToken('numeric', sign * Number(buffer))
	    },

	    decimalFraction () {
	        switch (c) {
	        case 'e':
	        case 'E':
	            buffer += read();
	            lexState = 'decimalExponent';
	            return
	        }

	        if (util$6.isDigit(c)) {
	            buffer += read();
	            return
	        }

	        return newToken('numeric', sign * Number(buffer))
	    },

	    decimalExponent () {
	        switch (c) {
	        case '+':
	        case '-':
	            buffer += read();
	            lexState = 'decimalExponentSign';
	            return
	        }

	        if (util$6.isDigit(c)) {
	            buffer += read();
	            lexState = 'decimalExponentInteger';
	            return
	        }

	        throw invalidChar(read())
	    },

	    decimalExponentSign () {
	        if (util$6.isDigit(c)) {
	            buffer += read();
	            lexState = 'decimalExponentInteger';
	            return
	        }

	        throw invalidChar(read())
	    },

	    decimalExponentInteger () {
	        if (util$6.isDigit(c)) {
	            buffer += read();
	            return
	        }

	        return newToken('numeric', sign * Number(buffer))
	    },

	    hexadecimal () {
	        if (util$6.isHexDigit(c)) {
	            buffer += read();
	            lexState = 'hexadecimalInteger';
	            return
	        }

	        throw invalidChar(read())
	    },

	    hexadecimalInteger () {
	        if (util$6.isHexDigit(c)) {
	            buffer += read();
	            return
	        }

	        return newToken('numeric', sign * Number(buffer))
	    },

	    string () {
	        switch (c) {
	        case '\\':
	            read();
	            buffer += escape$4();
	            return

	        case '"':
	            if (doubleQuote) {
	                read();
	                return newToken('string', buffer)
	            }

	            buffer += read();
	            return

	        case "'":
	            if (!doubleQuote) {
	                read();
	                return newToken('string', buffer)
	            }

	            buffer += read();
	            return

	        case '\n':
	        case '\r':
	            throw invalidChar(read())

	        case '\u2028':
	        case '\u2029':
	            separatorChar(c);
	            break

	        case undefined:
	            throw invalidChar(read())
	        }

	        buffer += read();
	    },

	    start () {
	        switch (c) {
	        case '{':
	        case '[':
	            return newToken('punctuator', read())

	        // This code is unreachable since the default lexState handles eof.
	        // case undefined:
	        //     return newToken('eof')
	        }

	        lexState = 'value';
	    },

	    beforePropertyName () {
	        switch (c) {
	        case '$':
	        case '_':
	            buffer = read();
	            lexState = 'identifierName';
	            return

	        case '\\':
	            read();
	            lexState = 'identifierNameStartEscape';
	            return

	        case '}':
	            return newToken('punctuator', read())

	        case '"':
	        case "'":
	            doubleQuote = (read() === '"');
	            lexState = 'string';
	            return
	        }

	        if (util$6.isIdStartChar(c)) {
	            buffer += read();
	            lexState = 'identifierName';
	            return
	        }

	        throw invalidChar(read())
	    },

	    afterPropertyName () {
	        if (c === ':') {
	            return newToken('punctuator', read())
	        }

	        throw invalidChar(read())
	    },

	    beforePropertyValue () {
	        lexState = 'value';
	    },

	    afterPropertyValue () {
	        switch (c) {
	        case ',':
	        case '}':
	            return newToken('punctuator', read())
	        }

	        throw invalidChar(read())
	    },

	    beforeArrayValue () {
	        if (c === ']') {
	            return newToken('punctuator', read())
	        }

	        lexState = 'value';
	    },

	    afterArrayValue () {
	        switch (c) {
	        case ',':
	        case ']':
	            return newToken('punctuator', read())
	        }

	        throw invalidChar(read())
	    },

	    end () {
	        // This code is unreachable since it's handled by the default lexState.
	        // if (c === undefined) {
	        //     read()
	        //     return newToken('eof')
	        // }

	        throw invalidChar(read())
	    },
	};

	function newToken (type, value) {
	    return {
	        type,
	        value,
	        line,
	        column,
	    }
	}

	function literal (s) {
	    for (const c of s) {
	        const p = peek();

	        if (p !== c) {
	            throw invalidChar(read())
	        }

	        read();
	    }
	}

	function escape$4 () {
	    const c = peek();
	    switch (c) {
	    case 'b':
	        read();
	        return '\b'

	    case 'f':
	        read();
	        return '\f'

	    case 'n':
	        read();
	        return '\n'

	    case 'r':
	        read();
	        return '\r'

	    case 't':
	        read();
	        return '\t'

	    case 'v':
	        read();
	        return '\v'

	    case '0':
	        read();
	        if (util$6.isDigit(peek())) {
	            throw invalidChar(read())
	        }

	        return '\0'

	    case 'x':
	        read();
	        return hexEscape()

	    case 'u':
	        read();
	        return unicodeEscape()

	    case '\n':
	    case '\u2028':
	    case '\u2029':
	        read();
	        return ''

	    case '\r':
	        read();
	        if (peek() === '\n') {
	            read();
	        }

	        return ''

	    case '1':
	    case '2':
	    case '3':
	    case '4':
	    case '5':
	    case '6':
	    case '7':
	    case '8':
	    case '9':
	        throw invalidChar(read())

	    case undefined:
	        throw invalidChar(read())
	    }

	    return read()
	}

	function hexEscape () {
	    let buffer = '';
	    let c = peek();

	    if (!util$6.isHexDigit(c)) {
	        throw invalidChar(read())
	    }

	    buffer += read();

	    c = peek();
	    if (!util$6.isHexDigit(c)) {
	        throw invalidChar(read())
	    }

	    buffer += read();

	    return String.fromCodePoint(parseInt(buffer, 16))
	}

	function unicodeEscape () {
	    let buffer = '';
	    let count = 4;

	    while (count-- > 0) {
	        const c = peek();
	        if (!util$6.isHexDigit(c)) {
	            throw invalidChar(read())
	        }

	        buffer += read();
	    }

	    return String.fromCodePoint(parseInt(buffer, 16))
	}

	const parseStates = {
	    start () {
	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        push$1();
	    },

	    beforePropertyName () {
	        switch (token.type) {
	        case 'identifier':
	        case 'string':
	            key$1 = token.value;
	            parseState = 'afterPropertyName';
	            return

	        case 'punctuator':
	            // This code is unreachable since it's handled by the lexState.
	            // if (token.value !== '}') {
	            //     throw invalidToken()
	            // }

	            pop();
	            return

	        case 'eof':
	            throw invalidEOF()
	        }

	        // This code is unreachable since it's handled by the lexState.
	        // throw invalidToken()
	    },

	    afterPropertyName () {
	        // This code is unreachable since it's handled by the lexState.
	        // if (token.type !== 'punctuator' || token.value !== ':') {
	        //     throw invalidToken()
	        // }

	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        parseState = 'beforePropertyValue';
	    },

	    beforePropertyValue () {
	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        push$1();
	    },

	    beforeArrayValue () {
	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        if (token.type === 'punctuator' && token.value === ']') {
	            pop();
	            return
	        }

	        push$1();
	    },

	    afterPropertyValue () {
	        // This code is unreachable since it's handled by the lexState.
	        // if (token.type !== 'punctuator') {
	        //     throw invalidToken()
	        // }

	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        switch (token.value) {
	        case ',':
	            parseState = 'beforePropertyName';
	            return

	        case '}':
	            pop();
	        }

	        // This code is unreachable since it's handled by the lexState.
	        // throw invalidToken()
	    },

	    afterArrayValue () {
	        // This code is unreachable since it's handled by the lexState.
	        // if (token.type !== 'punctuator') {
	        //     throw invalidToken()
	        // }

	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        switch (token.value) {
	        case ',':
	            parseState = 'beforeArrayValue';
	            return

	        case ']':
	            pop();
	        }

	        // This code is unreachable since it's handled by the lexState.
	        // throw invalidToken()
	    },

	    end () {
	        // This code is unreachable since it's handled by the lexState.
	        // if (token.type !== 'eof') {
	        //     throw invalidToken()
	        // }
	    },
	};

	function push$1 () {
	    let value;

	    switch (token.type) {
	    case 'punctuator':
	        switch (token.value) {
	        case '{':
	            value = {};
	            break

	        case '[':
	            value = [];
	            break
	        }

	        break

	    case 'null':
	    case 'boolean':
	    case 'numeric':
	    case 'string':
	        value = token.value;
	        break

	    // This code is unreachable.
	    // default:
	    //     throw invalidToken()
	    }

	    if (root === undefined) {
	        root = value;
	    } else {
	        const parent = stack[stack.length - 1];
	        if (Array.isArray(parent)) {
	            parent.push(value);
	        } else {
	            parent[key$1] = value;
	        }
	    }

	    if (value !== null && typeof value === 'object') {
	        stack.push(value);

	        if (Array.isArray(value)) {
	            parseState = 'beforeArrayValue';
	        } else {
	            parseState = 'beforePropertyName';
	        }
	    } else {
	        const current = stack[stack.length - 1];
	        if (current == null) {
	            parseState = 'end';
	        } else if (Array.isArray(current)) {
	            parseState = 'afterArrayValue';
	        } else {
	            parseState = 'afterPropertyValue';
	        }
	    }
	}

	function pop () {
	    stack.pop();

	    const current = stack[stack.length - 1];
	    if (current == null) {
	        parseState = 'end';
	    } else if (Array.isArray(current)) {
	        parseState = 'afterArrayValue';
	    } else {
	        parseState = 'afterPropertyValue';
	    }
	}

	// This code is unreachable.
	// function invalidParseState () {
	//     return new Error(`JSON5: invalid parse state '${parseState}'`)
	// }

	// This code is unreachable.
	// function invalidLexState (state) {
	//     return new Error(`JSON5: invalid lex state '${state}'`)
	// }

	function invalidChar (c) {
	    if (c === undefined) {
	        return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)
	    }

	    return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)
	}

	function invalidEOF () {
	    return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)
	}

	// This code is unreachable.
	// function invalidToken () {
	//     if (token.type === 'eof') {
	//         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)
	//     }

	//     const c = String.fromCodePoint(token.value.codePointAt(0))
	//     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)
	// }

	function invalidIdentifier () {
	    column -= 5;
	    return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`)
	}

	function separatorChar (c) {
	    console.warn(`JSON5: '${formatChar(c)}' in strings is not valid ECMAScript; consider escaping`);
	}

	function formatChar (c) {
	    const replacements = {
	        "'": "\\'",
	        '"': '\\"',
	        '\\': '\\\\',
	        '\b': '\\b',
	        '\f': '\\f',
	        '\n': '\\n',
	        '\r': '\\r',
	        '\t': '\\t',
	        '\v': '\\v',
	        '\0': '\\0',
	        '\u2028': '\\u2028',
	        '\u2029': '\\u2029',
	    };

	    if (replacements[c]) {
	        return replacements[c]
	    }

	    if (c < ' ') {
	        const hexString = c.charCodeAt(0).toString(16);
	        return '\\x' + ('00' + hexString).substring(hexString.length)
	    }

	    return c
	}

	function syntaxError (message) {
	    const err = new SyntaxError(message);
	    err.lineNumber = line;
	    err.columnNumber = column;
	    return err
	}

	var stringify$3 = function stringify (value, replacer, space) {
	    const stack = [];
	    let indent = '';
	    let propertyList;
	    let replacerFunc;
	    let gap = '';
	    let quote;

	    if (
	        replacer != null &&
	        typeof replacer === 'object' &&
	        !Array.isArray(replacer)
	    ) {
	        space = replacer.space;
	        quote = replacer.quote;
	        replacer = replacer.replacer;
	    }

	    if (typeof replacer === 'function') {
	        replacerFunc = replacer;
	    } else if (Array.isArray(replacer)) {
	        propertyList = [];
	        for (const v of replacer) {
	            let item;

	            if (typeof v === 'string') {
	                item = v;
	            } else if (
	                typeof v === 'number' ||
	                v instanceof String ||
	                v instanceof Number
	            ) {
	                item = String(v);
	            }

	            if (item !== undefined && propertyList.indexOf(item) < 0) {
	                propertyList.push(item);
	            }
	        }
	    }

	    if (space instanceof Number) {
	        space = Number(space);
	    } else if (space instanceof String) {
	        space = String(space);
	    }

	    if (typeof space === 'number') {
	        if (space > 0) {
	            space = Math.min(10, Math.floor(space));
	            gap = '          '.substr(0, space);
	        }
	    } else if (typeof space === 'string') {
	        gap = space.substr(0, 10);
	    }

	    return serializeProperty('', {'': value})

	    function serializeProperty (key, holder) {
	        let value = holder[key];
	        if (value != null) {
	            if (typeof value.toJSON5 === 'function') {
	                value = value.toJSON5(key);
	            } else if (typeof value.toJSON === 'function') {
	                value = value.toJSON(key);
	            }
	        }

	        if (replacerFunc) {
	            value = replacerFunc.call(holder, key, value);
	        }

	        if (value instanceof Number) {
	            value = Number(value);
	        } else if (value instanceof String) {
	            value = String(value);
	        } else if (value instanceof Boolean) {
	            value = value.valueOf();
	        }

	        switch (value) {
	        case null: return 'null'
	        case true: return 'true'
	        case false: return 'false'
	        }

	        if (typeof value === 'string') {
	            return quoteString(value)
	        }

	        if (typeof value === 'number') {
	            return String(value)
	        }

	        if (typeof value === 'object') {
	            return Array.isArray(value) ? serializeArray(value) : serializeObject(value)
	        }

	        return undefined
	    }

	    function quoteString (value) {
	        const quotes = {
	            "'": 0.1,
	            '"': 0.2,
	        };

	        const replacements = {
	            "'": "\\'",
	            '"': '\\"',
	            '\\': '\\\\',
	            '\b': '\\b',
	            '\f': '\\f',
	            '\n': '\\n',
	            '\r': '\\r',
	            '\t': '\\t',
	            '\v': '\\v',
	            '\0': '\\0',
	            '\u2028': '\\u2028',
	            '\u2029': '\\u2029',
	        };

	        let product = '';

	        for (let i = 0; i < value.length; i++) {
	            const c = value[i];
	            switch (c) {
	            case "'":
	            case '"':
	                quotes[c]++;
	                product += c;
	                continue

	            case '\0':
	                if (util$6.isDigit(value[i + 1])) {
	                    product += '\\x00';
	                    continue
	                }
	            }

	            if (replacements[c]) {
	                product += replacements[c];
	                continue
	            }

	            if (c < ' ') {
	                let hexString = c.charCodeAt(0).toString(16);
	                product += '\\x' + ('00' + hexString).substring(hexString.length);
	                continue
	            }

	            product += c;
	        }

	        const quoteChar = quote || Object.keys(quotes).reduce((a, b) => (quotes[a] < quotes[b]) ? a : b);

	        product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar]);

	        return quoteChar + product + quoteChar
	    }

	    function serializeObject (value) {
	        if (stack.indexOf(value) >= 0) {
	            throw TypeError('Converting circular structure to JSON5')
	        }

	        stack.push(value);

	        let stepback = indent;
	        indent = indent + gap;

	        let keys = propertyList || Object.keys(value);
	        let partial = [];
	        for (const key of keys) {
	            const propertyString = serializeProperty(key, value);
	            if (propertyString !== undefined) {
	                let member = serializeKey(key) + ':';
	                if (gap !== '') {
	                    member += ' ';
	                }
	                member += propertyString;
	                partial.push(member);
	            }
	        }

	        let final;
	        if (partial.length === 0) {
	            final = '{}';
	        } else {
	            let properties;
	            if (gap === '') {
	                properties = partial.join(',');
	                final = '{' + properties + '}';
	            } else {
	                let separator = ',\n' + indent;
	                properties = partial.join(separator);
	                final = '{\n' + indent + properties + ',\n' + stepback + '}';
	            }
	        }

	        stack.pop();
	        indent = stepback;
	        return final
	    }

	    function serializeKey (key) {
	        if (key.length === 0) {
	            return quoteString(key)
	        }

	        const firstChar = String.fromCodePoint(key.codePointAt(0));
	        if (!util$6.isIdStartChar(firstChar)) {
	            return quoteString(key)
	        }

	        for (let i = firstChar.length; i < key.length; i++) {
	            if (!util$6.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {
	                return quoteString(key)
	            }
	        }

	        return key
	    }

	    function serializeArray (value) {
	        if (stack.indexOf(value) >= 0) {
	            throw TypeError('Converting circular structure to JSON5')
	        }

	        stack.push(value);

	        let stepback = indent;
	        indent = indent + gap;

	        let partial = [];
	        for (let i = 0; i < value.length; i++) {
	            const propertyString = serializeProperty(String(i), value);
	            partial.push((propertyString !== undefined) ? propertyString : 'null');
	        }

	        let final;
	        if (partial.length === 0) {
	            final = '[]';
	        } else {
	            if (gap === '') {
	                let properties = partial.join(',');
	                final = '[' + properties + ']';
	            } else {
	                let separator = ',\n' + indent;
	                let properties = partial.join(separator);
	                final = '[\n' + indent + properties + ',\n' + stepback + ']';
	            }
	        }

	        stack.pop();
	        indent = stepback;
	        return final
	    }
	};

	const JSON5 = {
	    parse: parse$a,
	    stringify: stringify$3,
	};

	var lib$c = JSON5;

	var dist = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': lib$c
	});

	var require$$3 = /*@__PURE__*/getAugmentedNamespace(dist);

	var configApi = {};

	Object.defineProperty(configApi, "__esModule", {
	  value: true
	});
	configApi.makeConfigAPI = makeConfigAPI;
	configApi.makePresetAPI = makePresetAPI;
	configApi.makePluginAPI = makePluginAPI;

	function _semver$4() {
	  const data = semver.exports;

	  _semver$4 = function () {
	    return data;
	  };

	  return data;
	}

	var _ = lib$v;

	var _caching$4 = caching;

	function makeConfigAPI(cache) {
	  const env = value => cache.using(data => {
	    if (typeof value === "undefined") return data.envName;

	    if (typeof value === "function") {
	      return (0, _caching$4.assertSimpleType)(value(data.envName));
	    }

	    if (!Array.isArray(value)) value = [value];
	    return value.some(entry => {
	      if (typeof entry !== "string") {
	        throw new Error("Unexpected non-string value");
	      }

	      return entry === data.envName;
	    });
	  });

	  const caller = cb => cache.using(data => (0, _caching$4.assertSimpleType)(cb(data.caller)));

	  return {
	    version: _.version,
	    cache: cache.simple(),
	    env,
	    async: () => false,
	    caller,
	    assertVersion
	  };
	}

	function makePresetAPI(cache) {
	  const targets = () => JSON.parse(cache.using(data => JSON.stringify(data.targets)));

	  return Object.assign({}, makeConfigAPI(cache), {
	    targets
	  });
	}

	function makePluginAPI(cache) {
	  const assumption = name => cache.using(data => data.assumptions[name]);

	  return Object.assign({}, makePresetAPI(cache), {
	    assumption
	  });
	}

	function assertVersion(range) {
	  if (typeof range === "number") {
	    if (!Number.isInteger(range)) {
	      throw new Error("Expected string or integer value.");
	    }

	    range = `^${range}.0.0-0`;
	  }

	  if (typeof range !== "string") {
	    throw new Error("Expected string or integer value.");
	  }

	  if (_semver$4().satisfies(_.version, range)) return;
	  const limit = Error.stackTraceLimit;

	  if (typeof limit === "number" && limit < 25) {
	    Error.stackTraceLimit = 25;
	  }

	  const err = new Error(`Requires Babel "${range}", but was loaded with "${_.version}". ` + `If you are sure you have a compatible version of @babel/core, ` + `it is likely that something in your build process is loading the ` + `wrong version. Inspect the stack trace of this error to look for ` + `the first entry that doesn't mention "@babel/core" or "babel-core" ` + `to see what is calling Babel.`);

	  if (typeof limit === "number") {
	    Error.stackTraceLimit = limit;
	  }

	  throw Object.assign(err, {
	    code: "BABEL_VERSION_UNSUPPORTED",
	    version: _.version,
	    range
	  });
	}

	var moduleTypes = {};

	var _import = {};

	Object.defineProperty(_import, "__esModule", {
	  value: true
	});
	_import.default = import_$1;

	function import_$1(filepath) {
	  return import(filepath);
	}

	Object.defineProperty(moduleTypes, "__esModule", {
	  value: true
	});
	moduleTypes.default = loadCjsOrMjsDefault;

	var _async$1 = async;

	function _path$9() {
	  const data = require$$0__default['default'];

	  _path$9 = function () {
	    return data;
	  };

	  return data;
	}

	function _url() {
	  const data = require$$2__default['default'];

	  _url = function () {
	    return data;
	  };

	  return data;
	}

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	let import_;

	try {
	  import_ = _import.default;
	} catch (_unused) {}

	function* loadCjsOrMjsDefault(filepath, asyncError, fallbackToTranspiledModule = false) {
	  switch (guessJSModuleType(filepath)) {
	    case "cjs":
	      return loadCjsDefault(filepath, fallbackToTranspiledModule);

	    case "unknown":
	      try {
	        return loadCjsDefault(filepath, fallbackToTranspiledModule);
	      } catch (e) {
	        if (e.code !== "ERR_REQUIRE_ESM") throw e;
	      }

	    case "mjs":
	      if (yield* (0, _async$1.isAsync)()) {
	        return yield* (0, _async$1.waitFor)(loadMjsDefault(filepath));
	      }

	      throw new Error(asyncError);
	  }
	}

	function guessJSModuleType(filename) {
	  switch (_path$9().extname(filename)) {
	    case ".cjs":
	      return "cjs";

	    case ".mjs":
	      return "mjs";

	    default:
	      return "unknown";
	  }
	}

	function loadCjsDefault(filepath, fallbackToTranspiledModule) {
	  const module = commonjsRequire(filepath);

	  return module != null && module.__esModule ? module.default || (fallbackToTranspiledModule ? module : undefined) : module;
	}

	function loadMjsDefault(_x) {
	  return _loadMjsDefault.apply(this, arguments);
	}

	function _loadMjsDefault() {
	  _loadMjsDefault = _asyncToGenerator(function* (filepath) {
	    if (!import_) {
	      throw new Error("Internal error: Native ECMAScript modules aren't supported" + " by this platform.\n");
	    }

	    const module = yield import_((0, _url().pathToFileURL)(filepath));
	    return module.default;
	  });
	  return _loadMjsDefault.apply(this, arguments);
	}

	var patternToRegex = {};

	Object.defineProperty(patternToRegex, "__esModule", {
	  value: true
	});
	patternToRegex.default = pathToPattern;

	function _path$8() {
	  const data = require$$0__default['default'];

	  _path$8 = function () {
	    return data;
	  };

	  return data;
	}

	const sep = `\\${_path$8().sep}`;
	const endSep = `(?:${sep}|$)`;
	const substitution = `[^${sep}]+`;
	const starPat = `(?:${substitution}${sep})`;
	const starPatLast = `(?:${substitution}${endSep})`;
	const starStarPat = `${starPat}*?`;
	const starStarPatLast = `${starPat}*?${starPatLast}?`;

	function escapeRegExp(string) {
	  return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
	}

	function pathToPattern(pattern, dirname) {
	  const parts = _path$8().resolve(dirname, pattern).split(_path$8().sep);

	  return new RegExp(["^", ...parts.map((part, i) => {
	    const last = i === parts.length - 1;
	    if (part === "**") return last ? starStarPatLast : starStarPat;
	    if (part === "*") return last ? starPatLast : starPat;

	    if (part.indexOf("*.") === 0) {
	      return substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep);
	    }

	    return escapeRegExp(part) + (last ? endSep : sep);
	  })].join(""));
	}

	Object.defineProperty(configuration, "__esModule", {
	  value: true
	});
	configuration.findConfigUpwards = findConfigUpwards;
	configuration.findRelativeConfig = findRelativeConfig;
	configuration.findRootConfig = findRootConfig;
	configuration.loadConfig = loadConfig;
	configuration.resolveShowConfigPath = resolveShowConfigPath;
	configuration.ROOT_CONFIG_FILENAMES = void 0;

	function _debug$3() {
	  const data = src.exports;

	  _debug$3 = function () {
	    return data;
	  };

	  return data;
	}

	function _fs$1() {
	  const data = require$$0__default$2['default'];

	  _fs$1 = function () {
	    return data;
	  };

	  return data;
	}

	function _path$7() {
	  const data = require$$0__default['default'];

	  _path$7 = function () {
	    return data;
	  };

	  return data;
	}

	function _json() {
	  const data = require$$3;

	  _json = function () {
	    return data;
	  };

	  return data;
	}

	function _gensync$8() {
	  const data = gensync;

	  _gensync$8 = function () {
	    return data;
	  };

	  return data;
	}

	var _caching$3 = caching;

	var _configApi$1 = configApi;

	var _utils$2 = utils$2;

	var _moduleTypes$1 = moduleTypes;

	var _patternToRegex$1 = patternToRegex;

	var fs$1 = fs$3;

	const debug$4 = _debug$3()("babel:config:loading:files:configuration");

	const ROOT_CONFIG_FILENAMES = ["babel.config.js", "babel.config.cjs", "babel.config.mjs", "babel.config.json"];
	configuration.ROOT_CONFIG_FILENAMES = ROOT_CONFIG_FILENAMES;
	const RELATIVE_CONFIG_FILENAMES = [".babelrc", ".babelrc.js", ".babelrc.cjs", ".babelrc.mjs", ".babelrc.json"];
	const BABELIGNORE_FILENAME = ".babelignore";

	function findConfigUpwards(rootDir) {
	  let dirname = rootDir;

	  for (;;) {
	    for (const filename of ROOT_CONFIG_FILENAMES) {
	      if (_fs$1().existsSync(_path$7().join(dirname, filename))) {
	        return dirname;
	      }
	    }

	    const nextDir = _path$7().dirname(dirname);

	    if (dirname === nextDir) break;
	    dirname = nextDir;
	  }

	  return null;
	}

	function* findRelativeConfig(packageData, envName, caller) {
	  let config = null;
	  let ignore = null;

	  const dirname = _path$7().dirname(packageData.filepath);

	  for (const loc of packageData.directories) {
	    if (!config) {
	      var _packageData$pkg;

	      config = yield* loadOneConfig(RELATIVE_CONFIG_FILENAMES, loc, envName, caller, ((_packageData$pkg = packageData.pkg) == null ? void 0 : _packageData$pkg.dirname) === loc ? packageToBabelConfig(packageData.pkg) : null);
	    }

	    if (!ignore) {
	      const ignoreLoc = _path$7().join(loc, BABELIGNORE_FILENAME);

	      ignore = yield* readIgnoreConfig(ignoreLoc);

	      if (ignore) {
	        debug$4("Found ignore %o from %o.", ignore.filepath, dirname);
	      }
	    }
	  }

	  return {
	    config,
	    ignore
	  };
	}

	function findRootConfig(dirname, envName, caller) {
	  return loadOneConfig(ROOT_CONFIG_FILENAMES, dirname, envName, caller);
	}

	function* loadOneConfig(names, dirname, envName, caller, previousConfig = null) {
	  const configs = yield* _gensync$8().all(names.map(filename => readConfig(_path$7().join(dirname, filename), envName, caller)));
	  const config = configs.reduce((previousConfig, config) => {
	    if (config && previousConfig) {
	      throw new Error(`Multiple configuration files found. Please remove one:\n` + ` - ${_path$7().basename(previousConfig.filepath)}\n` + ` - ${config.filepath}\n` + `from ${dirname}`);
	    }

	    return config || previousConfig;
	  }, previousConfig);

	  if (config) {
	    debug$4("Found configuration %o from %o.", config.filepath, dirname);
	  }

	  return config;
	}

	function* loadConfig(name, dirname, envName, caller) {
	  const filepath = (((v, w) => (v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, "8.9") ? require.resolve : (r, {
	    paths: [b]
	  }, M = require$$3__default['default']) => {
	    let f = M._findPath(r, M._nodeModulePaths(b).concat(b));

	    if (f) return f;
	    f = new Error(`Cannot resolve module '${r}'`);
	    f.code = "MODULE_NOT_FOUND";
	    throw f;
	  })(name, {
	    paths: [dirname]
	  });
	  const conf = yield* readConfig(filepath, envName, caller);

	  if (!conf) {
	    throw new Error(`Config file ${filepath} contains no configuration data`);
	  }

	  debug$4("Loaded config %o from %o.", name, dirname);
	  return conf;
	}

	function readConfig(filepath, envName, caller) {
	  const ext = _path$7().extname(filepath);

	  return ext === ".js" || ext === ".cjs" || ext === ".mjs" ? readConfigJS(filepath, {
	    envName,
	    caller
	  }) : readConfigJSON5(filepath);
	}

	const LOADING_CONFIGS = new Set();
	const readConfigJS = (0, _caching$3.makeStrongCache)(function* readConfigJS(filepath, cache) {
	  if (!_fs$1().existsSync(filepath)) {
	    cache.never();
	    return null;
	  }

	  if (LOADING_CONFIGS.has(filepath)) {
	    cache.never();
	    debug$4("Auto-ignoring usage of config %o.", filepath);
	    return {
	      filepath,
	      dirname: _path$7().dirname(filepath),
	      options: {}
	    };
	  }

	  let options;

	  try {
	    LOADING_CONFIGS.add(filepath);
	    options = yield* (0, _moduleTypes$1.default)(filepath, "You appear to be using a native ECMAScript module configuration " + "file, which is only supported when running Babel asynchronously.");
	  } catch (err) {
	    err.message = `${filepath}: Error while loading config - ${err.message}`;
	    throw err;
	  } finally {
	    LOADING_CONFIGS.delete(filepath);
	  }

	  let assertCache = false;

	  if (typeof options === "function") {
	    yield* [];
	    options = options((0, _configApi$1.makeConfigAPI)(cache));
	    assertCache = true;
	  }

	  if (!options || typeof options !== "object" || Array.isArray(options)) {
	    throw new Error(`${filepath}: Configuration should be an exported JavaScript object.`);
	  }

	  if (typeof options.then === "function") {
	    throw new Error(`You appear to be using an async configuration, ` + `which your current version of Babel does not support. ` + `We may add support for this in the future, ` + `but if you're on the most recent version of @babel/core and still ` + `seeing this error, then you'll need to synchronously return your config.`);
	  }

	  if (assertCache && !cache.configured()) throwConfigError();
	  return {
	    filepath,
	    dirname: _path$7().dirname(filepath),
	    options
	  };
	});
	const packageToBabelConfig = (0, _caching$3.makeWeakCacheSync)(file => {
	  const babel = file.options["babel"];
	  if (typeof babel === "undefined") return null;

	  if (typeof babel !== "object" || Array.isArray(babel) || babel === null) {
	    throw new Error(`${file.filepath}: .babel property must be an object`);
	  }

	  return {
	    filepath: file.filepath,
	    dirname: file.dirname,
	    options: babel
	  };
	});
	const readConfigJSON5 = (0, _utils$2.makeStaticFileCache)((filepath, content) => {
	  let options;

	  try {
	    options = _json().parse(content);
	  } catch (err) {
	    err.message = `${filepath}: Error while parsing config - ${err.message}`;
	    throw err;
	  }

	  if (!options) throw new Error(`${filepath}: No config detected`);

	  if (typeof options !== "object") {
	    throw new Error(`${filepath}: Config returned typeof ${typeof options}`);
	  }

	  if (Array.isArray(options)) {
	    throw new Error(`${filepath}: Expected config object but found array`);
	  }

	  return {
	    filepath,
	    dirname: _path$7().dirname(filepath),
	    options
	  };
	});
	const readIgnoreConfig = (0, _utils$2.makeStaticFileCache)((filepath, content) => {
	  const ignoreDir = _path$7().dirname(filepath);

	  const ignorePatterns = content.split("\n").map(line => line.replace(/#(.*?)$/, "").trim()).filter(line => !!line);

	  for (const pattern of ignorePatterns) {
	    if (pattern[0] === "!") {
	      throw new Error(`Negation of file paths is not supported.`);
	    }
	  }

	  return {
	    filepath,
	    dirname: _path$7().dirname(filepath),
	    ignore: ignorePatterns.map(pattern => (0, _patternToRegex$1.default)(pattern, ignoreDir))
	  };
	});

	function* resolveShowConfigPath(dirname) {
	  const targetPath = process.env.BABEL_SHOW_CONFIG_FOR;

	  if (targetPath != null) {
	    const absolutePath = _path$7().resolve(dirname, targetPath);

	    const stats = yield* fs$1.stat(absolutePath);

	    if (!stats.isFile()) {
	      throw new Error(`${absolutePath}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`);
	    }

	    return absolutePath;
	  }

	  return null;
	}

	function throwConfigError() {
	  throw new Error(`\
Caching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured
for various types of caching, using the first param of their handler functions:

module.exports = function(api) {
  // The API exposes the following:

  // Cache the returned value forever and don't call this function again.
  api.cache(true);

  // Don't cache at all. Not recommended because it will be very slow.
  api.cache(false);

  // Cached based on the value of some function. If this function returns a value different from
  // a previously-encountered value, the plugins will re-evaluate.
  var env = api.cache(() => process.env.NODE_ENV);

  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for
  // any possible NODE_ENV value that might come up during plugin execution.
  var isProd = api.cache(() => process.env.NODE_ENV === "production");

  // .cache(fn) will perform a linear search though instances to find the matching plugin based
  // based on previous instantiated plugins. If you want to recreate the plugin and discard the
  // previous instance whenever something changes, you may use:
  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === "production");

  // Note, we also expose the following more-verbose versions of the above examples:
  api.cache.forever(); // api.cache(true)
  api.cache.never();   // api.cache(false)
  api.cache.using(fn); // api.cache(fn)

  // Return the value that will be cached.
  return { };
};`);
	}

	var plugins$2 = {};

	Object.defineProperty(plugins$2, "__esModule", {
	  value: true
	});
	plugins$2.resolvePlugin = resolvePlugin;
	plugins$2.resolvePreset = resolvePreset;
	plugins$2.loadPlugin = loadPlugin;
	plugins$2.loadPreset = loadPreset;

	function _debug$2() {
	  const data = src.exports;

	  _debug$2 = function () {
	    return data;
	  };

	  return data;
	}

	function _path$6() {
	  const data = require$$0__default['default'];

	  _path$6 = function () {
	    return data;
	  };

	  return data;
	}

	var _moduleTypes = moduleTypes;

	const debug$3 = _debug$2()("babel:config:loading:files:plugins");

	const EXACT_RE = /^module:/;
	const BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-plugin-)/;
	const BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-preset-)/;
	const BABEL_PLUGIN_ORG_RE = /^(@babel\/)(?!plugin-|[^/]+\/)/;
	const BABEL_PRESET_ORG_RE = /^(@babel\/)(?!preset-|[^/]+\/)/;
	const OTHER_PLUGIN_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-plugin(?:-|\/|$)|[^/]+\/)/;
	const OTHER_PRESET_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-preset(?:-|\/|$)|[^/]+\/)/;
	const OTHER_ORG_DEFAULT_RE = /^(@(?!babel$)[^/]+)$/;

	function resolvePlugin(name, dirname) {
	  return resolveStandardizedName("plugin", name, dirname);
	}

	function resolvePreset(name, dirname) {
	  return resolveStandardizedName("preset", name, dirname);
	}

	function* loadPlugin(name, dirname) {
	  const filepath = resolvePlugin(name, dirname);

	  if (!filepath) {
	    throw new Error(`Plugin ${name} not found relative to ${dirname}`);
	  }

	  const value = yield* requireModule("plugin", filepath);
	  debug$3("Loaded plugin %o from %o.", name, dirname);
	  return {
	    filepath,
	    value
	  };
	}

	function* loadPreset(name, dirname) {
	  const filepath = resolvePreset(name, dirname);

	  if (!filepath) {
	    throw new Error(`Preset ${name} not found relative to ${dirname}`);
	  }

	  const value = yield* requireModule("preset", filepath);
	  debug$3("Loaded preset %o from %o.", name, dirname);
	  return {
	    filepath,
	    value
	  };
	}

	function standardizeName(type, name) {
	  if (_path$6().isAbsolute(name)) return name;
	  const isPreset = type === "preset";
	  return name.replace(isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE, `babel-${type}-`).replace(isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE, `$1${type}-`).replace(isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE, `$1babel-${type}-`).replace(OTHER_ORG_DEFAULT_RE, `$1/babel-${type}`).replace(EXACT_RE, "");
	}

	function resolveStandardizedName(type, name, dirname = process.cwd()) {
	  const standardizedName = standardizeName(type, name);

	  try {
	    return (((v, w) => (v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, "8.9") ? require.resolve : (r, {
	      paths: [b]
	    }, M = require$$3__default['default']) => {
	      let f = M._findPath(r, M._nodeModulePaths(b).concat(b));

	      if (f) return f;
	      f = new Error(`Cannot resolve module '${r}'`);
	      f.code = "MODULE_NOT_FOUND";
	      throw f;
	    })(standardizedName, {
	      paths: [dirname]
	    });
	  } catch (e) {
	    if (e.code !== "MODULE_NOT_FOUND") throw e;

	    if (standardizedName !== name) {
	      let resolvedOriginal = false;

	      try {
	        (((v, w) => (v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, "8.9") ? require.resolve : (r, {
	          paths: [b]
	        }, M = require$$3__default['default']) => {
	          let f = M._findPath(r, M._nodeModulePaths(b).concat(b));

	          if (f) return f;
	          f = new Error(`Cannot resolve module '${r}'`);
	          f.code = "MODULE_NOT_FOUND";
	          throw f;
	        })(name, {
	          paths: [dirname]
	        });
	        resolvedOriginal = true;
	      } catch (_unused) {}

	      if (resolvedOriginal) {
	        e.message += `\n- If you want to resolve "${name}", use "module:${name}"`;
	      }
	    }

	    let resolvedBabel = false;

	    try {
	      (((v, w) => (v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, "8.9") ? require.resolve : (r, {
	        paths: [b]
	      }, M = require$$3__default['default']) => {
	        let f = M._findPath(r, M._nodeModulePaths(b).concat(b));

	        if (f) return f;
	        f = new Error(`Cannot resolve module '${r}'`);
	        f.code = "MODULE_NOT_FOUND";
	        throw f;
	      })(standardizeName(type, "@babel/" + name), {
	        paths: [dirname]
	      });
	      resolvedBabel = true;
	    } catch (_unused2) {}

	    if (resolvedBabel) {
	      e.message += `\n- Did you mean "@babel/${name}"?`;
	    }

	    let resolvedOppositeType = false;
	    const oppositeType = type === "preset" ? "plugin" : "preset";

	    try {
	      (((v, w) => (v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, "8.9") ? require.resolve : (r, {
	        paths: [b]
	      }, M = require$$3__default['default']) => {
	        let f = M._findPath(r, M._nodeModulePaths(b).concat(b));

	        if (f) return f;
	        f = new Error(`Cannot resolve module '${r}'`);
	        f.code = "MODULE_NOT_FOUND";
	        throw f;
	      })(standardizeName(oppositeType, name), {
	        paths: [dirname]
	      });
	      resolvedOppositeType = true;
	    } catch (_unused3) {}

	    if (resolvedOppositeType) {
	      e.message += `\n- Did you accidentally pass a ${oppositeType} as a ${type}?`;
	    }

	    throw e;
	  }
	}

	const LOADING_MODULES = new Set();

	function* requireModule(type, name) {
	  if (LOADING_MODULES.has(name)) {
	    throw new Error(`Reentrant ${type} detected trying to load "${name}". This module is not ignored ` + "and is trying to load itself while compiling itself, leading to a dependency cycle. " + 'We recommend adding it to your "ignore" list in your babelrc, or to a .babelignore.');
	  }

	  try {
	    LOADING_MODULES.add(name);
	    return yield* (0, _moduleTypes.default)(name, `You appear to be using a native ECMAScript module ${type}, ` + "which is only supported when running Babel asynchronously.", true);
	  } catch (err) {
	    err.message = `[BABEL]: ${err.message} (While processing: ${name})`;
	    throw err;
	  } finally {
	    LOADING_MODULES.delete(name);
	  }
	}

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "findPackageData", {
	  enumerable: true,
	  get: function () {
	    return _package$1.findPackageData;
	  }
	});
	Object.defineProperty(exports, "findConfigUpwards", {
	  enumerable: true,
	  get: function () {
	    return _configuration.findConfigUpwards;
	  }
	});
	Object.defineProperty(exports, "findRelativeConfig", {
	  enumerable: true,
	  get: function () {
	    return _configuration.findRelativeConfig;
	  }
	});
	Object.defineProperty(exports, "findRootConfig", {
	  enumerable: true,
	  get: function () {
	    return _configuration.findRootConfig;
	  }
	});
	Object.defineProperty(exports, "loadConfig", {
	  enumerable: true,
	  get: function () {
	    return _configuration.loadConfig;
	  }
	});
	Object.defineProperty(exports, "resolveShowConfigPath", {
	  enumerable: true,
	  get: function () {
	    return _configuration.resolveShowConfigPath;
	  }
	});
	Object.defineProperty(exports, "ROOT_CONFIG_FILENAMES", {
	  enumerable: true,
	  get: function () {
	    return _configuration.ROOT_CONFIG_FILENAMES;
	  }
	});
	Object.defineProperty(exports, "resolvePlugin", {
	  enumerable: true,
	  get: function () {
	    return _plugins.resolvePlugin;
	  }
	});
	Object.defineProperty(exports, "resolvePreset", {
	  enumerable: true,
	  get: function () {
	    return _plugins.resolvePreset;
	  }
	});
	Object.defineProperty(exports, "loadPlugin", {
	  enumerable: true,
	  get: function () {
	    return _plugins.loadPlugin;
	  }
	});
	Object.defineProperty(exports, "loadPreset", {
	  enumerable: true,
	  get: function () {
	    return _plugins.loadPreset;
	  }
	});

	var _package$1 = _package;

	var _configuration = configuration;

	var _plugins = plugins$2;
	}(files));

	var environment = {};

	Object.defineProperty(environment, "__esModule", {
	  value: true
	});
	environment.getEnv = getEnv;

	function getEnv(defaultValue = "development") {
	  return process.env.BABEL_ENV || process.env.NODE_ENV || defaultValue;
	}

	var config = {};

	var full = {};

	var plugin = {};

	Object.defineProperty(plugin, "__esModule", {
	  value: true
	});
	plugin.default = void 0;

	class Plugin {
	  constructor(plugin, options, key) {
	    this.key = void 0;
	    this.manipulateOptions = void 0;
	    this.post = void 0;
	    this.pre = void 0;
	    this.visitor = void 0;
	    this.parserOverride = void 0;
	    this.generatorOverride = void 0;
	    this.options = void 0;
	    this.key = plugin.name || key;
	    this.manipulateOptions = plugin.manipulateOptions;
	    this.post = plugin.post;
	    this.pre = plugin.pre;
	    this.visitor = plugin.visitor || {};
	    this.parserOverride = plugin.parserOverride;
	    this.generatorOverride = plugin.generatorOverride;
	    this.options = options;
	  }

	}

	plugin.default = Plugin;

	var item = {};

	var configDescriptors = {};

	var resolveTargets$1 = {};

	var lib$b = {};

	var require$$0$4 = [
		{
			name: "nodejs",
			version: "0.2.0",
			date: "2011-08-26",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "0.3.0",
			date: "2011-08-26",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "0.4.0",
			date: "2011-08-26",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "0.5.0",
			date: "2011-08-26",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "0.6.0",
			date: "2011-11-04",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "0.7.0",
			date: "2012-01-17",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "0.8.0",
			date: "2012-06-22",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "0.9.0",
			date: "2012-07-20",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "0.10.0",
			date: "2013-03-11",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "0.11.0",
			date: "2013-03-28",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "0.12.0",
			date: "2015-02-06",
			lts: false,
			security: false
		},
		{
			name: "iojs",
			version: "1.0.0",
			date: "2015-01-14"
		},
		{
			name: "iojs",
			version: "1.1.0",
			date: "2015-02-03"
		},
		{
			name: "iojs",
			version: "1.2.0",
			date: "2015-02-11"
		},
		{
			name: "iojs",
			version: "1.3.0",
			date: "2015-02-20"
		},
		{
			name: "iojs",
			version: "1.5.0",
			date: "2015-03-06"
		},
		{
			name: "iojs",
			version: "1.6.0",
			date: "2015-03-20"
		},
		{
			name: "iojs",
			version: "2.0.0",
			date: "2015-05-04"
		},
		{
			name: "iojs",
			version: "2.1.0",
			date: "2015-05-24"
		},
		{
			name: "iojs",
			version: "2.2.0",
			date: "2015-06-01"
		},
		{
			name: "iojs",
			version: "2.3.0",
			date: "2015-06-13"
		},
		{
			name: "iojs",
			version: "2.4.0",
			date: "2015-07-17"
		},
		{
			name: "iojs",
			version: "2.5.0",
			date: "2015-07-28"
		},
		{
			name: "iojs",
			version: "3.0.0",
			date: "2015-08-04"
		},
		{
			name: "iojs",
			version: "3.1.0",
			date: "2015-08-19"
		},
		{
			name: "iojs",
			version: "3.2.0",
			date: "2015-08-25"
		},
		{
			name: "iojs",
			version: "3.3.0",
			date: "2015-09-02"
		},
		{
			name: "nodejs",
			version: "4.0.0",
			date: "2015-09-08",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "4.1.0",
			date: "2015-09-17",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "4.2.0",
			date: "2015-10-12",
			lts: "Argon",
			security: false
		},
		{
			name: "nodejs",
			version: "4.3.0",
			date: "2016-02-09",
			lts: "Argon",
			security: false
		},
		{
			name: "nodejs",
			version: "4.4.0",
			date: "2016-03-08",
			lts: "Argon",
			security: false
		},
		{
			name: "nodejs",
			version: "4.5.0",
			date: "2016-08-16",
			lts: "Argon",
			security: false
		},
		{
			name: "nodejs",
			version: "4.6.0",
			date: "2016-09-27",
			lts: "Argon",
			security: true
		},
		{
			name: "nodejs",
			version: "4.7.0",
			date: "2016-12-06",
			lts: "Argon",
			security: false
		},
		{
			name: "nodejs",
			version: "4.8.0",
			date: "2017-02-21",
			lts: "Argon",
			security: false
		},
		{
			name: "nodejs",
			version: "4.9.0",
			date: "2018-03-28",
			lts: "Argon",
			security: true
		},
		{
			name: "nodejs",
			version: "5.0.0",
			date: "2015-10-29",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "5.1.0",
			date: "2015-11-17",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "5.2.0",
			date: "2015-12-09",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "5.3.0",
			date: "2015-12-15",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "5.4.0",
			date: "2016-01-06",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "5.5.0",
			date: "2016-01-21",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "5.6.0",
			date: "2016-02-09",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "5.7.0",
			date: "2016-02-23",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "5.8.0",
			date: "2016-03-09",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "5.9.0",
			date: "2016-03-16",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "5.10.0",
			date: "2016-04-01",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "5.11.0",
			date: "2016-04-21",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "5.12.0",
			date: "2016-06-23",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "6.0.0",
			date: "2016-04-26",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "6.1.0",
			date: "2016-05-05",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "6.2.0",
			date: "2016-05-17",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "6.3.0",
			date: "2016-07-06",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "6.4.0",
			date: "2016-08-12",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "6.5.0",
			date: "2016-08-26",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "6.6.0",
			date: "2016-09-14",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "6.7.0",
			date: "2016-09-27",
			lts: false,
			security: true
		},
		{
			name: "nodejs",
			version: "6.8.0",
			date: "2016-10-12",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "6.9.0",
			date: "2016-10-18",
			lts: "Boron",
			security: false
		},
		{
			name: "nodejs",
			version: "6.10.0",
			date: "2017-02-21",
			lts: "Boron",
			security: false
		},
		{
			name: "nodejs",
			version: "6.11.0",
			date: "2017-06-06",
			lts: "Boron",
			security: false
		},
		{
			name: "nodejs",
			version: "6.12.0",
			date: "2017-11-06",
			lts: "Boron",
			security: false
		},
		{
			name: "nodejs",
			version: "6.13.0",
			date: "2018-02-10",
			lts: "Boron",
			security: false
		},
		{
			name: "nodejs",
			version: "6.14.0",
			date: "2018-03-28",
			lts: "Boron",
			security: true
		},
		{
			name: "nodejs",
			version: "6.15.0",
			date: "2018-11-27",
			lts: "Boron",
			security: true
		},
		{
			name: "nodejs",
			version: "6.16.0",
			date: "2018-12-26",
			lts: "Boron",
			security: false
		},
		{
			name: "nodejs",
			version: "6.17.0",
			date: "2019-02-28",
			lts: "Boron",
			security: true
		},
		{
			name: "nodejs",
			version: "7.0.0",
			date: "2016-10-25",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "7.1.0",
			date: "2016-11-08",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "7.2.0",
			date: "2016-11-22",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "7.3.0",
			date: "2016-12-20",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "7.4.0",
			date: "2017-01-04",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "7.5.0",
			date: "2017-01-31",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "7.6.0",
			date: "2017-02-21",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "7.7.0",
			date: "2017-02-28",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "7.8.0",
			date: "2017-03-29",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "7.9.0",
			date: "2017-04-11",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "7.10.0",
			date: "2017-05-02",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "8.0.0",
			date: "2017-05-30",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "8.1.0",
			date: "2017-06-08",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "8.2.0",
			date: "2017-07-19",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "8.3.0",
			date: "2017-08-08",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "8.4.0",
			date: "2017-08-15",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "8.5.0",
			date: "2017-09-12",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "8.6.0",
			date: "2017-09-26",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "8.7.0",
			date: "2017-10-11",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "8.8.0",
			date: "2017-10-24",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "8.9.0",
			date: "2017-10-31",
			lts: "Carbon",
			security: false
		},
		{
			name: "nodejs",
			version: "8.10.0",
			date: "2018-03-06",
			lts: "Carbon",
			security: false
		},
		{
			name: "nodejs",
			version: "8.11.0",
			date: "2018-03-28",
			lts: "Carbon",
			security: true
		},
		{
			name: "nodejs",
			version: "8.12.0",
			date: "2018-09-10",
			lts: "Carbon",
			security: false
		},
		{
			name: "nodejs",
			version: "8.13.0",
			date: "2018-11-20",
			lts: "Carbon",
			security: false
		},
		{
			name: "nodejs",
			version: "8.14.0",
			date: "2018-11-27",
			lts: "Carbon",
			security: true
		},
		{
			name: "nodejs",
			version: "8.15.0",
			date: "2018-12-26",
			lts: "Carbon",
			security: false
		},
		{
			name: "nodejs",
			version: "8.16.0",
			date: "2019-04-16",
			lts: "Carbon",
			security: false
		},
		{
			name: "nodejs",
			version: "8.17.0",
			date: "2019-12-17",
			lts: "Carbon",
			security: true
		},
		{
			name: "nodejs",
			version: "9.0.0",
			date: "2017-10-31",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "9.1.0",
			date: "2017-11-07",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "9.2.0",
			date: "2017-11-14",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "9.3.0",
			date: "2017-12-12",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "9.4.0",
			date: "2018-01-10",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "9.5.0",
			date: "2018-01-31",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "9.6.0",
			date: "2018-02-21",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "9.7.0",
			date: "2018-03-01",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "9.8.0",
			date: "2018-03-07",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "9.9.0",
			date: "2018-03-21",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "9.10.0",
			date: "2018-03-28",
			lts: false,
			security: true
		},
		{
			name: "nodejs",
			version: "9.11.0",
			date: "2018-04-04",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "10.0.0",
			date: "2018-04-24",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "10.1.0",
			date: "2018-05-08",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "10.2.0",
			date: "2018-05-23",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "10.3.0",
			date: "2018-05-29",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "10.4.0",
			date: "2018-06-06",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "10.5.0",
			date: "2018-06-20",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "10.6.0",
			date: "2018-07-04",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "10.7.0",
			date: "2018-07-18",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "10.8.0",
			date: "2018-08-01",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "10.9.0",
			date: "2018-08-15",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "10.10.0",
			date: "2018-09-06",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "10.11.0",
			date: "2018-09-19",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "10.12.0",
			date: "2018-10-10",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "10.13.0",
			date: "2018-10-30",
			lts: "Dubnium",
			security: false
		},
		{
			name: "nodejs",
			version: "10.14.0",
			date: "2018-11-27",
			lts: "Dubnium",
			security: true
		},
		{
			name: "nodejs",
			version: "10.15.0",
			date: "2018-12-26",
			lts: "Dubnium",
			security: false
		},
		{
			name: "nodejs",
			version: "10.16.0",
			date: "2019-05-28",
			lts: "Dubnium",
			security: false
		},
		{
			name: "nodejs",
			version: "10.17.0",
			date: "2019-10-22",
			lts: "Dubnium",
			security: false
		},
		{
			name: "nodejs",
			version: "10.18.0",
			date: "2019-12-17",
			lts: "Dubnium",
			security: true
		},
		{
			name: "nodejs",
			version: "10.19.0",
			date: "2020-02-05",
			lts: "Dubnium",
			security: true
		},
		{
			name: "nodejs",
			version: "10.20.0",
			date: "2020-03-26",
			lts: "Dubnium",
			security: false
		},
		{
			name: "nodejs",
			version: "10.21.0",
			date: "2020-06-02",
			lts: "Dubnium",
			security: true
		},
		{
			name: "nodejs",
			version: "10.22.0",
			date: "2020-07-21",
			lts: "Dubnium",
			security: false
		},
		{
			name: "nodejs",
			version: "10.23.0",
			date: "2020-10-27",
			lts: "Dubnium",
			security: false
		},
		{
			name: "nodejs",
			version: "10.24.0",
			date: "2021-02-23",
			lts: "Dubnium",
			security: true
		},
		{
			name: "nodejs",
			version: "11.0.0",
			date: "2018-10-23",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "11.1.0",
			date: "2018-10-30",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "11.2.0",
			date: "2018-11-15",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "11.3.0",
			date: "2018-11-27",
			lts: false,
			security: true
		},
		{
			name: "nodejs",
			version: "11.4.0",
			date: "2018-12-07",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "11.5.0",
			date: "2018-12-18",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "11.6.0",
			date: "2018-12-26",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "11.7.0",
			date: "2019-01-17",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "11.8.0",
			date: "2019-01-24",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "11.9.0",
			date: "2019-01-30",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "11.10.0",
			date: "2019-02-14",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "11.11.0",
			date: "2019-03-05",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "11.12.0",
			date: "2019-03-14",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "11.13.0",
			date: "2019-03-28",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "11.14.0",
			date: "2019-04-10",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "11.15.0",
			date: "2019-04-30",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "12.0.0",
			date: "2019-04-23",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "12.1.0",
			date: "2019-04-29",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "12.2.0",
			date: "2019-05-07",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "12.3.0",
			date: "2019-05-21",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "12.4.0",
			date: "2019-06-04",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "12.5.0",
			date: "2019-06-26",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "12.6.0",
			date: "2019-07-03",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "12.7.0",
			date: "2019-07-23",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "12.8.0",
			date: "2019-08-06",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "12.9.0",
			date: "2019-08-20",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "12.10.0",
			date: "2019-09-04",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "12.11.0",
			date: "2019-09-25",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "12.12.0",
			date: "2019-10-11",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "12.13.0",
			date: "2019-10-21",
			lts: "Erbium",
			security: false
		},
		{
			name: "nodejs",
			version: "12.14.0",
			date: "2019-12-17",
			lts: "Erbium",
			security: true
		},
		{
			name: "nodejs",
			version: "12.15.0",
			date: "2020-02-05",
			lts: "Erbium",
			security: true
		},
		{
			name: "nodejs",
			version: "12.16.0",
			date: "2020-02-11",
			lts: "Erbium",
			security: false
		},
		{
			name: "nodejs",
			version: "12.17.0",
			date: "2020-05-26",
			lts: "Erbium",
			security: false
		},
		{
			name: "nodejs",
			version: "12.18.0",
			date: "2020-06-02",
			lts: "Erbium",
			security: true
		},
		{
			name: "nodejs",
			version: "12.19.0",
			date: "2020-10-06",
			lts: "Erbium",
			security: false
		},
		{
			name: "nodejs",
			version: "12.20.0",
			date: "2020-11-24",
			lts: "Erbium",
			security: false
		},
		{
			name: "nodejs",
			version: "12.21.0",
			date: "2021-02-23",
			lts: "Erbium",
			security: true
		},
		{
			name: "nodejs",
			version: "12.22.0",
			date: "2021-03-30",
			lts: "Erbium",
			security: false
		},
		{
			name: "nodejs",
			version: "13.0.0",
			date: "2019-10-22",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "13.1.0",
			date: "2019-11-05",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "13.2.0",
			date: "2019-11-21",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "13.3.0",
			date: "2019-12-03",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "13.4.0",
			date: "2019-12-17",
			lts: false,
			security: true
		},
		{
			name: "nodejs",
			version: "13.5.0",
			date: "2019-12-18",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "13.6.0",
			date: "2020-01-07",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "13.7.0",
			date: "2020-01-21",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "13.8.0",
			date: "2020-02-05",
			lts: false,
			security: true
		},
		{
			name: "nodejs",
			version: "13.9.0",
			date: "2020-02-18",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "13.10.0",
			date: "2020-03-04",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "13.11.0",
			date: "2020-03-12",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "13.12.0",
			date: "2020-03-26",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "13.13.0",
			date: "2020-04-14",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "13.14.0",
			date: "2020-04-29",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "14.0.0",
			date: "2020-04-21",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "14.1.0",
			date: "2020-04-29",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "14.2.0",
			date: "2020-05-05",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "14.3.0",
			date: "2020-05-19",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "14.4.0",
			date: "2020-06-02",
			lts: false,
			security: true
		},
		{
			name: "nodejs",
			version: "14.5.0",
			date: "2020-06-30",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "14.6.0",
			date: "2020-07-20",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "14.7.0",
			date: "2020-07-29",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "14.8.0",
			date: "2020-08-11",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "14.9.0",
			date: "2020-08-27",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "14.10.0",
			date: "2020-09-08",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "14.11.0",
			date: "2020-09-15",
			lts: false,
			security: true
		},
		{
			name: "nodejs",
			version: "14.12.0",
			date: "2020-09-22",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "14.13.0",
			date: "2020-09-29",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "14.14.0",
			date: "2020-10-15",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "14.15.0",
			date: "2020-10-27",
			lts: "Fermium",
			security: false
		},
		{
			name: "nodejs",
			version: "14.16.0",
			date: "2021-02-23",
			lts: "Fermium",
			security: true
		},
		{
			name: "nodejs",
			version: "14.17.0",
			date: "2021-05-11",
			lts: "Fermium",
			security: false
		},
		{
			name: "nodejs",
			version: "15.0.0",
			date: "2020-10-20",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "15.1.0",
			date: "2020-11-04",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "15.2.0",
			date: "2020-11-10",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "15.3.0",
			date: "2020-11-24",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "15.4.0",
			date: "2020-12-09",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "15.5.0",
			date: "2020-12-22",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "15.6.0",
			date: "2021-01-14",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "15.7.0",
			date: "2021-01-25",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "15.8.0",
			date: "2021-02-02",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "15.9.0",
			date: "2021-02-18",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "15.10.0",
			date: "2021-02-23",
			lts: false,
			security: true
		},
		{
			name: "nodejs",
			version: "15.11.0",
			date: "2021-03-03",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "15.12.0",
			date: "2021-03-17",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "15.13.0",
			date: "2021-03-31",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "15.14.0",
			date: "2021-04-06",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "16.0.0",
			date: "2021-04-20",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "16.1.0",
			date: "2021-05-04",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "16.2.0",
			date: "2021-05-19",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "16.3.0",
			date: "2021-06-03",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "16.4.0",
			date: "2021-06-23",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "16.5.0",
			date: "2021-07-14",
			lts: false,
			security: false
		},
		{
			name: "nodejs",
			version: "16.6.0",
			date: "2021-07-29",
			lts: false,
			security: true
		},
		{
			name: "nodejs",
			version: "16.7.0",
			date: "2021-08-18",
			lts: false,
			security: false
		}
	];

	var agents$2 = {};

	var browsers$4 = {};

	var browsers$3={A:"ie",B:"edge",C:"firefox",D:"chrome",E:"safari",F:"opera",G:"ios_saf",H:"op_mini",I:"android",J:"bb",K:"op_mob",L:"and_chr",M:"and_ff",N:"ie_mob",O:"and_uc",P:"samsung",Q:"and_qq",R:"baidu",S:"kaios"};

	browsers$4.browsers = browsers$3;

	var browserVersions$1 = {};

	var browserVersions={"0":"41","1":"42","2":"43","3":"44","4":"45","5":"46","6":"47","7":"48","8":"49","9":"50",A:"10",B:"11",C:"12",D:"7",E:"8",F:"9",G:"15",H:"93",I:"4",J:"6",K:"13",L:"14",M:"16",N:"17",O:"18",P:"92",Q:"64",R:"79",S:"80",T:"81",U:"83",V:"84",W:"85",X:"86",Y:"87",Z:"88",a:"89",b:"90",c:"91",d:"5",e:"19",f:"20",g:"21",h:"22",i:"23",j:"24",k:"25",l:"26",m:"27",n:"28",o:"29",p:"30",q:"31",r:"32",s:"33",t:"34",u:"35",v:"36",w:"37",x:"38",y:"39",z:"40",AB:"51",BB:"52",CB:"53",DB:"54",EB:"55",FB:"56",GB:"57",HB:"58",IB:"60",JB:"62",KB:"63",LB:"65",MB:"66",NB:"67",OB:"68",PB:"69",QB:"70",RB:"71",SB:"72",TB:"73",UB:"74",VB:"75",WB:"76",XB:"77",YB:"78",ZB:"11.1",aB:"12.1",bB:"3",cB:"59",dB:"61",eB:"94",fB:"3.2",gB:"10.1",hB:"11.5",iB:"4.2-4.3",jB:"5.5",kB:"2",lB:"82",mB:"3.5",nB:"3.6",oB:"95",pB:"96",qB:"3.1",rB:"5.1",sB:"6.1",tB:"7.1",uB:"9.1",vB:"13.1",wB:"14.1",xB:"TP",yB:"9.5-9.6",zB:"10.0-10.1","0B":"10.5","1B":"10.6","2B":"11.6","3B":"4.0-4.1","4B":"5.0-5.1","5B":"6.0-6.1","6B":"7.0-7.1","7B":"8.1-8.4","8B":"9.0-9.2","9B":"9.3",AC:"10.0-10.2",BC:"10.3",CC:"11.0-11.2",DC:"11.3-11.4",EC:"12.0-12.1",FC:"12.2-12.4",GC:"13.0-13.1",HC:"13.2",IC:"13.3",JC:"13.4-13.7",KC:"14.0-14.4",LC:"14.5-14.7",MC:"all",NC:"2.1",OC:"2.2",PC:"2.3",QC:"4.1",RC:"4.4",SC:"4.4.3-4.4.4",TC:"12.12",UC:"5.0-5.4",VC:"6.2-6.4",WC:"7.2-7.4",XC:"8.2",YC:"9.2",ZC:"11.1-11.2",aC:"12.0",bC:"13.0",cC:"14.0",dC:"10.4",eC:"7.12",fC:"2.5"};

	browserVersions$1.browserVersions = browserVersions;

	var agents$1={A:{A:{J:0.0131217,D:0.00621152,E:0.0255585,F:0.115013,A:0.0255585,B:0.747587,jB:0.009298},B:"ms",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jB","J","D","E","F","A","B","","",""],E:"IE",F:{jB:962323200,J:998870400,D:1161129600,E:1237420800,F:1300060800,A:1346716800,B:1381968000}},B:{A:{C:0.008086,K:0.004267,L:0.004043,G:0.008086,M:0.008086,N:0.016172,O:0.08086,R:0,S:0.004298,T:0.00944,U:0.004043,V:0.012129,W:0.008086,X:0.008086,Y:0.008086,Z:0.008086,a:0.020215,b:0.016172,c:0.105118,P:3.35973,H:0.004043},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","C","K","L","G","M","N","O","R","S","T","U","V","W","X","Y","Z","a","b","c","P","H","","",""],E:"Edge",F:{C:1438128000,K:1447286400,L:1470096000,G:1491868800,M:1508198400,N:1525046400,O:1542067200,R:1579046400,S:1581033600,T:1586736000,U:1590019200,V:1594857600,W:1598486400,X:1602201600,Y:1605830400,Z:1611360000,a:1614816000,b:1618358400,c:1622073600,P:1626912000,H:1630627200},D:{C:"ms",K:"ms",L:"ms",G:"ms",M:"ms",N:"ms",O:"ms"}},C:{A:{"0":0.005029,"1":0.0047,"2":0.04043,"3":0.008086,"4":0.004043,"5":0.004525,"6":0.004043,"7":0.008086,"8":0.004538,"9":0.008282,kB:0.004043,bB:0.004271,I:0.020215,d:0.004879,J:0.020136,D:0.005725,E:0.004525,F:0.00533,A:0.004283,B:0.008086,C:0.004471,K:0.004486,L:0.00453,G:0.004043,M:0.004417,N:0.004425,O:0.004043,e:0.004443,f:0.004283,g:0.004043,h:0.013698,i:0.004043,j:0.008786,k:0.008086,l:0.004317,m:0.004393,n:0.004418,o:0.008834,p:0.004043,q:0.008928,r:0.004471,s:0.009284,t:0.004707,u:0.009076,v:0.004425,w:0.004783,x:0.004271,y:0.004783,z:0.00487,AB:0.008086,BB:0.072774,CB:0.004335,DB:0.004141,EB:0.008086,FB:0.012129,GB:0.004425,HB:0.004043,cB:0.004043,IB:0.008086,dB:0.00472,JB:0.004425,KB:0.008086,Q:0.00415,LB:0.004267,MB:0.004043,NB:0.004267,OB:0.012129,PB:0.00415,QB:0.008282,RB:0.004425,SB:0.008086,TB:0.00415,UB:0.00415,VB:0.004141,WB:0.004043,XB:0.004043,YB:0.157677,R:0.008086,S:0.008086,T:0.008086,lB:0.012129,U:0.008086,V:0.016172,W:0.008086,X:0.008086,Y:0.012129,Z:0.036387,a:0.084903,b:1.01479,c:1.4757,P:0.020215,H:0,eB:0,mB:0.008786,nB:0.00487},B:"moz",C:["kB","bB","mB","nB","I","d","J","D","E","F","A","B","C","K","L","G","M","N","O","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","AB","BB","CB","DB","EB","FB","GB","HB","cB","IB","dB","JB","KB","Q","LB","MB","NB","OB","PB","QB","RB","SB","TB","UB","VB","WB","XB","YB","R","S","T","lB","U","V","W","X","Y","Z","a","b","c","P","H","eB",""],E:"Firefox",F:{"0":1442880000,"1":1446508800,"2":1450137600,"3":1453852800,"4":1457395200,"5":1461628800,"6":1465257600,"7":1470096000,"8":1474329600,"9":1479168000,kB:1161648000,bB:1213660800,mB:1246320000,nB:1264032000,I:1300752000,d:1308614400,J:1313452800,D:1317081600,E:1317081600,F:1320710400,A:1324339200,B:1327968000,C:1331596800,K:1335225600,L:1338854400,G:1342483200,M:1346112000,N:1349740800,O:1353628800,e:1357603200,f:1361232000,g:1364860800,h:1368489600,i:1372118400,j:1375747200,k:1379376000,l:1386633600,m:1391472000,n:1395100800,o:1398729600,p:1402358400,q:1405987200,r:1409616000,s:1413244800,t:1417392000,u:1421107200,v:1424736000,w:1428278400,x:1431475200,y:1435881600,z:1439251200,AB:1485216000,BB:1488844800,CB:1492560000,DB:1497312000,EB:1502150400,FB:1506556800,GB:1510617600,HB:1516665600,cB:1520985600,IB:1525824000,dB:1529971200,JB:1536105600,KB:1540252800,Q:1544486400,LB:1548720000,MB:1552953600,NB:1558396800,OB:1562630400,PB:1567468800,QB:1571788800,RB:1575331200,SB:1578355200,TB:1581379200,UB:1583798400,VB:1586304000,WB:1588636800,XB:1591056000,YB:1593475200,R:1595894400,S:1598313600,T:1600732800,lB:1603152000,U:1605571200,V:1607990400,W:1611619200,X:1614038400,Y:1616457600,Z:1618790400,a:1622505600,b:1626134400,c:1628553600,P:1630972800,H:null,eB:null}},D:{A:{"0":0.0236,"1":0.004403,"2":0.008086,"3":0.004465,"4":0.004642,"5":0.004891,"6":0.012129,"7":0.020215,"8":0.190021,"9":0.004043,I:0.004706,d:0.004879,J:0.004879,D:0.005591,E:0.005591,F:0.005591,A:0.004534,B:0.004464,C:0.010424,K:0.0083,L:0.004706,G:0.015087,M:0.004393,N:0.004393,O:0.008652,e:0.004043,f:0.004393,g:0.004317,h:0.012129,i:0.008786,j:0.016172,k:0.004461,l:0.004141,m:0.004326,n:0.0047,o:0.004538,p:0.004043,q:0.008596,r:0.004566,s:0.008086,t:0.008086,u:0.016172,v:0.004335,w:0.004464,x:0.028301,y:0.004464,z:0.016172,AB:0.004043,BB:0.008086,CB:0.016172,DB:0.012129,EB:0.012129,FB:0.060645,GB:0.008086,HB:0.008086,cB:0.008086,IB:0.012129,dB:0.04043,JB:0.008086,KB:0.016172,Q:0.020215,LB:0.024258,MB:0.024258,NB:0.016172,OB:0.012129,PB:0.068731,QB:0.052559,RB:0.024258,SB:0.04043,TB:0.016172,UB:0.092989,VB:0.076817,WB:0.060645,XB:0.024258,YB:0.056602,R:0.185978,S:0.088946,T:0.064688,U:0.097032,V:0.113204,W:0.214279,X:0.12129,Y:0.299182,Z:0.133419,a:0.198107,b:0.311311,c:1.33823,P:21.4077,H:0.028301,eB:0.024258,oB:0.008086,pB:0},B:"webkit",C:["","","","","I","d","J","D","E","F","A","B","C","K","L","G","M","N","O","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","AB","BB","CB","DB","EB","FB","GB","HB","cB","IB","dB","JB","KB","Q","LB","MB","NB","OB","PB","QB","RB","SB","TB","UB","VB","WB","XB","YB","R","S","T","U","V","W","X","Y","Z","a","b","c","P","H","eB","oB","pB"],E:"Chrome",F:{"0":1425513600,"1":1429401600,"2":1432080000,"3":1437523200,"4":1441152000,"5":1444780800,"6":1449014400,"7":1453248000,"8":1456963200,"9":1460592000,I:1264377600,d:1274745600,J:1283385600,D:1287619200,E:1291248000,F:1296777600,A:1299542400,B:1303862400,C:1307404800,K:1312243200,L:1316131200,G:1316131200,M:1319500800,N:1323734400,O:1328659200,e:1332892800,f:1337040000,g:1340668800,h:1343692800,i:1348531200,j:1352246400,k:1357862400,l:1361404800,m:1364428800,n:1369094400,o:1374105600,p:1376956800,q:1384214400,r:1389657600,s:1392940800,t:1397001600,u:1400544000,v:1405468800,w:1409011200,x:1412640000,y:1416268800,z:1421798400,AB:1464134400,BB:1469059200,CB:1472601600,DB:1476230400,EB:1480550400,FB:1485302400,GB:1489017600,HB:1492560000,cB:1496707200,IB:1500940800,dB:1504569600,JB:1508198400,KB:1512518400,Q:1516752000,LB:1520294400,MB:1523923200,NB:1527552000,OB:1532390400,PB:1536019200,QB:1539648000,RB:1543968000,SB:1548720000,TB:1552348800,UB:1555977600,VB:1559606400,WB:1564444800,XB:1568073600,YB:1571702400,R:1575936000,S:1580860800,T:1586304000,U:1589846400,V:1594684800,W:1598313600,X:1601942400,Y:1605571200,Z:1611014400,a:1614556800,b:1618272000,c:1621987200,P:1626739200,H:1630368000,eB:null,oB:null,pB:null}},E:{A:{I:0,d:0.004043,J:0.004656,D:0.004465,E:0.004043,F:0.004891,A:0.004425,B:0.008086,C:0.012129,K:0.076817,L:0.517504,G:0.016172,qB:0,fB:0.008692,rB:0.020215,sB:0.00456,tB:0.004283,uB:0.016172,gB:0.020215,ZB:0.052559,aB:0.08086,vB:0.529633,wB:2.59156,xB:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","qB","fB","I","d","rB","J","sB","D","tB","E","F","uB","A","gB","B","ZB","C","aB","K","vB","L","wB","G","xB",""],E:"Safari",F:{qB:1205798400,fB:1226534400,I:1244419200,d:1275868800,rB:1311120000,J:1343174400,sB:1382400000,D:1382400000,tB:1410998400,E:1413417600,F:1443657600,uB:1458518400,A:1474329600,gB:1490572800,B:1505779200,ZB:1522281600,C:1537142400,aB:1553472000,K:1568851200,vB:1585008000,L:1600214400,wB:1619395200,G:null,xB:null}},F:{A:{"0":0.004227,"1":0.004418,"2":0.004043,"3":0.004227,"4":0.004725,"5":0.008086,"6":0.008942,"7":0.004707,"8":0.004827,"9":0.004707,F:0.0082,B:0.016581,C:0.004317,G:0.00685,M:0.00685,N:0.00685,O:0.005014,e:0.006015,f:0.004879,g:0.006597,h:0.006597,i:0.013434,j:0.006702,k:0.006015,l:0.005595,m:0.004393,n:0.008652,o:0.004879,p:0.004879,q:0.004043,r:0.005152,s:0.005014,t:0.009758,u:0.004879,v:0.008086,w:0.004283,x:0.004367,y:0.004534,z:0.008086,AB:0.004707,BB:0.004326,CB:0.008922,DB:0.014349,EB:0.004425,FB:0.00472,GB:0.004425,HB:0.004425,IB:0.00472,JB:0.004532,KB:0.004566,Q:0.02283,LB:0.00867,MB:0.004656,NB:0.004642,OB:0.004043,PB:0.00944,QB:0.00415,RB:0.004271,SB:0.004298,TB:0.096692,UB:0.004201,VB:0.004141,WB:0.004043,XB:0.456859,YB:0.392171,yB:0.00685,zB:0.004043,"0B":0.008392,"1B":0.004706,ZB:0.006229,hB:0.004879,"2B":0.008786,aB:0.00472},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","F","yB","zB","0B","1B","B","ZB","hB","2B","C","aB","G","M","N","O","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","AB","BB","CB","DB","EB","FB","GB","HB","IB","JB","KB","Q","LB","MB","NB","OB","PB","QB","RB","SB","TB","UB","VB","WB","XB","YB","","",""],E:"Opera",F:{"0":1477267200,"1":1481587200,"2":1486425600,"3":1490054400,"4":1494374400,"5":1498003200,"6":1502236800,"7":1506470400,"8":1510099200,"9":1515024000,F:1150761600,yB:1223424000,zB:1251763200,"0B":1267488000,"1B":1277942400,B:1292457600,ZB:1302566400,hB:1309219200,"2B":1323129600,C:1323129600,aB:1352073600,G:1372723200,M:1377561600,N:1381104000,O:1386288000,e:1390867200,f:1393891200,g:1399334400,h:1401753600,i:1405987200,j:1409616000,k:1413331200,l:1417132800,m:1422316800,n:1425945600,o:1430179200,p:1433808000,q:1438646400,r:1442448000,s:1445904000,t:1449100800,u:1454371200,v:1457308800,w:1462320000,x:1465344000,y:1470096000,z:1474329600,AB:1517961600,BB:1521676800,CB:1525910400,DB:1530144000,EB:1534982400,FB:1537833600,GB:1543363200,HB:1548201600,IB:1554768000,JB:1561593600,KB:1566259200,Q:1570406400,LB:1573689600,MB:1578441600,NB:1583971200,OB:1587513600,PB:1592956800,QB:1595894400,RB:1600128000,SB:1603238400,TB:1613520000,UB:1612224000,VB:1616544000,WB:1619568000,XB:1623715200,YB:1627948800},D:{F:"o",B:"o",C:"o",yB:"o",zB:"o","0B":"o","1B":"o",ZB:"o",hB:"o","2B":"o",aB:"o"}},G:{A:{E:0.0014876,fB:0,"3B":0,iB:0.0029752,"4B":0.0089256,"5B":0.101157,"6B":0.0267768,"7B":0.0163636,"8B":0.0208264,"9B":0.133884,AC:0.0401652,BC:0.145785,CC:0.0773552,DC:0.0624792,EC:0.0639668,FC:0.182975,GC:0.0565288,HC:0.0252892,IC:0.138347,JC:0.450743,KC:1.8714,LC:10.8193},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fB","3B","iB","4B","5B","6B","E","7B","8B","9B","AC","BC","CC","DC","EC","FC","GC","HC","IC","JC","KC","LC","","",""],E:"Safari on iOS",F:{fB:1270252800,"3B":1283904000,iB:1299628800,"4B":1331078400,"5B":1359331200,"6B":1394409600,E:1410912000,"7B":1413763200,"8B":1442361600,"9B":1458518400,AC:1473724800,BC:1490572800,CC:1505779200,DC:1522281600,EC:1537142400,FC:1553472000,GC:1568851200,HC:1572220800,IC:1580169600,JC:1585008000,KC:1600214400,LC:1619395200}},H:{A:{MC:1.15031},B:"o",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","MC","","",""],E:"Opera Mini",F:{MC:1426464000}},I:{A:{bB:0,I:0.0104681,H:0,NC:0,OC:0,PC:0,QC:0.0157022,iB:0.0575747,RC:0,SC:0.261703},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","NC","OC","PC","bB","I","QC","iB","RC","SC","H","","",""],E:"Android Browser",F:{NC:1256515200,OC:1274313600,PC:1291593600,bB:1298332800,I:1318896000,QC:1341792000,iB:1374624000,RC:1386547200,SC:1401667200,H:1630368000}},J:{A:{D:0,A:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","D","A","","",""],E:"Blackberry Browser",F:{D:1325376000,A:1359504000}},K:{A:{A:0,B:0,C:0,Q:0.0111391,ZB:0,hB:0,aB:0},B:"o",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A","B","ZB","hB","C","aB","Q","","",""],E:"Opera Mobile",F:{A:1287100800,B:1300752000,ZB:1314835200,hB:1318291200,C:1330300800,aB:1349740800,Q:1613433600},D:{Q:"webkit"}},L:{A:{H:39.6323},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","H","","",""],E:"Chrome for Android",F:{H:1630454400}},M:{A:{P:0.303756},B:"moz",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","P","","",""],E:"Firefox for Android",F:{P:1630972800}},N:{A:{A:0.0115934,B:0.022664},B:"ms",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A","B","","",""],E:"IE Mobile",F:{A:1340150400,B:1353456000}},O:{A:{TC:1.11377},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","TC","","",""],E:"UC Browser for Android",F:{TC:1471392000},D:{TC:"webkit"}},P:{A:{I:0.291303,UC:0.0103543,VC:0.010304,WC:0.0728256,XC:0.0103584,YC:0.0416146,gB:0.0208073,ZC:0.135248,aC:0.062422,bC:0.19767,cC:2.25759},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","I","UC","VC","WC","XC","YC","gB","ZC","aC","bC","cC","","",""],E:"Samsung Internet",F:{I:1461024000,UC:1481846400,VC:1509408000,WC:1528329600,XC:1546128000,YC:1554163200,gB:1567900800,ZC:1582588800,aC:1593475200,bC:1605657600,cC:1618531200}},Q:{A:{dC:0.17868},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dC","","",""],E:"QQ Browser",F:{dC:1589846400}},R:{A:{eC:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","eC","","",""],E:"Baidu Browser",F:{eC:1491004800}},S:{A:{fC:0.113164},B:"moz",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fC","","",""],E:"KaiOS Browser",F:{fC:1527811200}}};

	const browsers$2 = browsers$4.browsers;
	const versions$2 = browserVersions$1.browserVersions;
	const agentsData = agents$1;

	function unpackBrowserVersions(versionsData) {
	  return Object.keys(versionsData).reduce((usage, version) => {
	    usage[versions$2[version]] = versionsData[version];
	    return usage
	  }, {})
	}

	agents$2.agents = Object.keys(agentsData).reduce((map, key) => {
	  let versionsData = agentsData[key];
	  map[browsers$2[key]] = Object.keys(versionsData).reduce((data, entry) => {
	    if (entry === 'A') {
	      data.usage_global = unpackBrowserVersions(versionsData[entry]);
	    } else if (entry === 'C') {
	      data.versions = versionsData[entry].reduce((list, version) => {
	        if (version === '') {
	          list.push(null);
	        } else {
	          list.push(versions$2[version]);
	        }
	        return list
	      }, []);
	    } else if (entry === 'D') {
	      data.prefix_exceptions = unpackBrowserVersions(versionsData[entry]);
	    } else if (entry === 'E') {
	      data.browser = versionsData[entry];
	    } else if (entry === 'F') {
	      data.release_date = Object.keys(versionsData[entry]).reduce(
	        (map2, key2) => {
	          map2[versions$2[key2]] = versionsData[entry][key2];
	          return map2
	        },
	        {}
	      );
	    } else {
	      // entry is B
	      data.prefix = versionsData[entry];
	    }
	    return data
	  }, {});
	  return map
	}, {});

	var v4 = {
		start: "2015-09-08",
		lts: "2015-10-12",
		maintenance: "2017-04-01",
		end: "2018-04-30",
		codename: "Argon"
	};
	var v5 = {
		start: "2015-10-29",
		maintenance: "2016-04-30",
		end: "2016-06-30"
	};
	var v6 = {
		start: "2016-04-26",
		lts: "2016-10-18",
		maintenance: "2018-04-30",
		end: "2019-04-30",
		codename: "Boron"
	};
	var v7 = {
		start: "2016-10-25",
		maintenance: "2017-04-30",
		end: "2017-06-30"
	};
	var v8 = {
		start: "2017-05-30",
		lts: "2017-10-31",
		maintenance: "2019-01-01",
		end: "2019-12-31",
		codename: "Carbon"
	};
	var v9 = {
		start: "2017-10-01",
		maintenance: "2018-04-01",
		end: "2018-06-30"
	};
	var v10 = {
		start: "2018-04-24",
		lts: "2018-10-30",
		maintenance: "2020-05-19",
		end: "2021-04-30",
		codename: "Dubnium"
	};
	var v11 = {
		start: "2018-10-23",
		maintenance: "2019-04-22",
		end: "2019-06-01"
	};
	var v12 = {
		start: "2019-04-23",
		lts: "2019-10-21",
		maintenance: "2020-11-30",
		end: "2022-04-30",
		codename: "Erbium"
	};
	var v13 = {
		start: "2019-10-22",
		maintenance: "2020-04-01",
		end: "2020-06-01"
	};
	var v14 = {
		start: "2020-04-21",
		lts: "2020-10-27",
		maintenance: "2021-10-19",
		end: "2023-04-30",
		codename: "Fermium"
	};
	var v15 = {
		start: "2020-10-20",
		maintenance: "2021-04-01",
		end: "2021-06-01"
	};
	var v16 = {
		start: "2021-04-20",
		lts: "2021-10-26",
		maintenance: "2022-10-18",
		end: "2024-04-30",
		codename: ""
	};
	var v17 = {
		start: "2021-10-19",
		maintenance: "2022-04-01",
		end: "2022-06-01"
	};
	var v18 = {
		start: "2022-04-19",
		lts: "2022-10-25",
		maintenance: "2023-10-18",
		end: "2025-04-30",
		codename: ""
	};
	var require$$2$1 = {
		"v0.8": {
		start: "2012-06-25",
		end: "2014-07-31"
	},
		"v0.10": {
		start: "2013-03-11",
		end: "2016-10-31"
	},
		"v0.12": {
		start: "2015-02-06",
		end: "2016-12-31"
	},
		v4: v4,
		v5: v5,
		v6: v6,
		v7: v7,
		v8: v8,
		v9: v9,
		v10: v10,
		v11: v11,
		v12: v12,
		v13: v13,
		v14: v14,
		v15: v15,
		v16: v16,
		v17: v17,
		v18: v18
	};

	var versions$1 = {
		"0.20": "39",
		"0.21": "41",
		"0.22": "41",
		"0.23": "41",
		"0.24": "41",
		"0.25": "42",
		"0.26": "42",
		"0.27": "43",
		"0.28": "43",
		"0.29": "43",
		"0.30": "44",
		"0.31": "45",
		"0.32": "45",
		"0.33": "45",
		"0.34": "45",
		"0.35": "45",
		"0.36": "47",
		"0.37": "49",
		"1.0": "49",
		"1.1": "50",
		"1.2": "51",
		"1.3": "52",
		"1.4": "53",
		"1.5": "54",
		"1.6": "56",
		"1.7": "58",
		"1.8": "59",
		"2.0": "61",
		"2.1": "61",
		"3.0": "66",
		"3.1": "66",
		"4.0": "69",
		"4.1": "69",
		"4.2": "69",
		"5.0": "73",
		"6.0": "76",
		"6.1": "76",
		"7.0": "78",
		"7.1": "78",
		"7.2": "78",
		"7.3": "78",
		"8.0": "80",
		"8.1": "80",
		"8.2": "80",
		"8.3": "80",
		"8.4": "80",
		"8.5": "80",
		"9.0": "83",
		"9.1": "83",
		"9.2": "83",
		"9.3": "83",
		"9.4": "83",
		"10.0": "85",
		"10.1": "85",
		"10.2": "85",
		"10.3": "85",
		"10.4": "85",
		"11.0": "87",
		"11.1": "87",
		"11.2": "87",
		"11.3": "87",
		"11.4": "87",
		"11.5": "87",
		"12.0": "89",
		"12.1": "89",
		"13.0": "91",
		"13.1": "91",
		"13.2": "91",
		"13.3": "91",
		"13.4": "91",
		"14.0": "93",
		"15.0": "94"
	};

	function BrowserslistError$1 (message) {
	  this.name = 'BrowserslistError';
	  this.message = message;
	  this.browserslist = true;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, BrowserslistError$1);
	  }
	}

	BrowserslistError$1.prototype = Error.prototype;

	var error = BrowserslistError$1;

	var node$3 = {exports: {}};

	var feature = {exports: {}};

	var statuses$1 = {
	  1: 'ls', // WHATWG Living Standard
	  2: 'rec', // W3C Recommendation
	  3: 'pr', // W3C Proposed Recommendation
	  4: 'cr', // W3C Candidate Recommendation
	  5: 'wd', // W3C Working Draft
	  6: 'other', // Non-W3C, but reputable
	  7: 'unoff' // Unofficial, Editor's Draft or W3C "Note"
	};

	var supported$1 = {
	  y: 1 << 0,
	  n: 1 << 1,
	  a: 1 << 2,
	  p: 1 << 3,
	  u: 1 << 4,
	  x: 1 << 5,
	  d: 1 << 6
	};

	const statuses = statuses$1;
	const supported = supported$1;
	const browsers$1 = browsers$4.browsers;
	const versions = browserVersions$1.browserVersions;

	const MATH2LOG = Math.log(2);

	function unpackSupport(cipher) {
	  // bit flags
	  let stats = Object.keys(supported).reduce((list, support) => {
	    if (cipher & supported[support]) list.push(support);
	    return list
	  }, []);

	  // notes
	  let notes = cipher >> 7;
	  let notesArray = [];
	  while (notes) {
	    let note = Math.floor(Math.log(notes) / MATH2LOG) + 1;
	    notesArray.unshift(`#${note}`);
	    notes -= Math.pow(2, note - 1);
	  }

	  return stats.concat(notesArray).join(' ')
	}

	function unpackFeature(packed) {
	  let unpacked = { status: statuses[packed.B], title: packed.C };
	  unpacked.stats = Object.keys(packed.A).reduce((browserStats, key) => {
	    let browser = packed.A[key];
	    browserStats[browsers$1[key]] = Object.keys(browser).reduce(
	      (stats, support) => {
	        let packedVersions = browser[support].split(' ');
	        let unpacked2 = unpackSupport(support);
	        packedVersions.forEach(v => (stats[versions[v]] = unpacked2));
	        return stats
	      },
	      {}
	    );
	    return browserStats
	  }, {});
	  return unpacked
	}

	feature.exports = unpackFeature;
	feature.exports.default = unpackFeature;

	var region = {exports: {}};

	const browsers = browsers$4.browsers;

	function unpackRegion(packed) {
	  return Object.keys(packed).reduce((list, browser) => {
	    let data = packed[browser];
	    list[browsers[browser]] = Object.keys(data).reduce((memo, key) => {
	      let stats = data[key];
	      if (key === '_') {
	        stats.split(' ').forEach(version => (memo[version] = null));
	      } else {
	        memo[key] = stats;
	      }
	      return memo
	    }, {});
	    return list
	  }, {})
	}

	region.exports = unpackRegion;
	region.exports.default = unpackRegion;

	(function (module) {
	var feature$1 = feature.exports.default;
	var region$1 = region.exports.default;
	var path = require$$0__default['default'];
	var fs = require$$0__default$2['default'];

	var BrowserslistError = error;

	var IS_SECTION = /^\s*\[(.+)]\s*$/;
	var CONFIG_PATTERN = /^browserslist-config-/;
	var SCOPED_CONFIG__PATTERN = /@[^/]+\/browserslist-config(-|$|\/)/;
	var TIME_TO_UPDATE_CANIUSE = 6 * 30 * 24 * 60 * 60 * 1000;
	var FORMAT = 'Browserslist config should be a string or an array ' +
	             'of strings with browser queries';

	var dataTimeChecked = false;
	var filenessCache = { };
	var configCache = { };
	function checkExtend (name) {
	  var use = ' Use `dangerousExtend` option to disable.';
	  if (!CONFIG_PATTERN.test(name) && !SCOPED_CONFIG__PATTERN.test(name)) {
	    throw new BrowserslistError(
	      'Browserslist config needs `browserslist-config-` prefix. ' + use)
	  }
	  if (name.replace(/^@[^/]+\//, '').indexOf('.') !== -1) {
	    throw new BrowserslistError(
	      '`.` not allowed in Browserslist config name. ' + use)
	  }
	  if (name.indexOf('node_modules') !== -1) {
	    throw new BrowserslistError(
	      '`node_modules` not allowed in Browserslist config.' + use)
	  }
	}

	function isFile (file) {
	  if (file in filenessCache) {
	    return filenessCache[file]
	  }
	  var result = fs.existsSync(file) && fs.statSync(file).isFile();
	  if (!process.env.BROWSERSLIST_DISABLE_CACHE) {
	    filenessCache[file] = result;
	  }
	  return result
	}

	function eachParent (file, callback) {
	  var dir = isFile(file) ? path.dirname(file) : file;
	  var loc = path.resolve(dir);
	  do {
	    var result = callback(loc);
	    if (typeof result !== 'undefined') return result
	  } while (loc !== (loc = path.dirname(loc)))
	  return undefined
	}

	function check (section) {
	  if (Array.isArray(section)) {
	    for (var i = 0; i < section.length; i++) {
	      if (typeof section[i] !== 'string') {
	        throw new BrowserslistError(FORMAT)
	      }
	    }
	  } else if (typeof section !== 'string') {
	    throw new BrowserslistError(FORMAT)
	  }
	}

	function pickEnv (config, opts) {
	  if (typeof config !== 'object') return config

	  var name;
	  if (typeof opts.env === 'string') {
	    name = opts.env;
	  } else if (process.env.BROWSERSLIST_ENV) {
	    name = process.env.BROWSERSLIST_ENV;
	  } else if (process.env.NODE_ENV) {
	    name = process.env.NODE_ENV;
	  } else {
	    name = 'production';
	  }

	  return config[name] || config.defaults
	}

	function parsePackage (file) {
	  var config = JSON.parse(fs.readFileSync(file));
	  if (config.browserlist && !config.browserslist) {
	    throw new BrowserslistError(
	      '`browserlist` key instead of `browserslist` in ' + file
	    )
	  }
	  var list = config.browserslist;
	  if (Array.isArray(list) || typeof list === 'string') {
	    list = { defaults: list };
	  }
	  for (var i in list) {
	    check(list[i]);
	  }

	  return list
	}

	function latestReleaseTime (agents) {
	  var latest = 0;
	  for (var name in agents) {
	    var dates = agents[name].releaseDate || { };
	    for (var key in dates) {
	      if (latest < dates[key]) {
	        latest = dates[key];
	      }
	    }
	  }
	  return latest * 1000
	}

	function normalizeStats (data, stats) {
	  if (!data) {
	    data = {};
	  }
	  if (stats && 'dataByBrowser' in stats) {
	    stats = stats.dataByBrowser;
	  }

	  if (typeof stats !== 'object') return undefined

	  var normalized = { };
	  for (var i in stats) {
	    var versions = Object.keys(stats[i]);
	    if (
	      versions.length === 1 &&
	      data[i] &&
	      data[i].versions.length === 1
	    ) {
	      var normal = data[i].versions[0];
	      normalized[i] = { };
	      normalized[i][normal] = stats[i][versions[0]];
	    } else {
	      normalized[i] = stats[i];
	    }
	  }

	  return normalized
	}

	function normalizeUsageData (usageData, data) {
	  for (var browser in usageData) {
	    var browserUsage = usageData[browser];
	    // eslint-disable-next-line max-len
	    // https://github.com/browserslist/browserslist/issues/431#issuecomment-565230615
	    // caniuse-db returns { 0: "percentage" } for `and_*` regional stats
	    if ('0' in browserUsage) {
	      var versions = data[browser].versions;
	      browserUsage[versions[versions.length - 1]] = browserUsage[0];
	      delete browserUsage[0];
	    }
	  }
	}

	module.exports = {
	  loadQueries: function loadQueries (ctx, name) {
	    if (!ctx.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND) {
	      checkExtend(name);
	    }
	    // eslint-disable-next-line security/detect-non-literal-require
	    var queries = commonjsRequire(require.resolve(name, { paths: ['.'] }));
	    if (queries) {
	      if (Array.isArray(queries)) {
	        return queries
	      } else if (typeof queries === 'object') {
	        if (!queries.defaults) queries.defaults = [];
	        return pickEnv(queries, ctx)
	      }
	    }
	    throw new BrowserslistError(
	      '`' + name + '` config exports not an array of queries' +
	      ' or an object of envs'
	    )
	  },

	  loadStat: function loadStat (ctx, name, data) {
	    if (!ctx.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND) {
	      checkExtend(name);
	    }
	    // eslint-disable-next-line security/detect-non-literal-require
	    var stats = commonjsRequire(
	      require.resolve(
	        path.join(name, 'browserslist-stats.json'),
	        { paths: ['.'] }
	      )
	    );
	    return normalizeStats(data, stats)
	  },

	  getStat: function getStat (opts, data) {
	    var stats;
	    if (opts.stats) {
	      stats = opts.stats;
	    } else if (process.env.BROWSERSLIST_STATS) {
	      stats = process.env.BROWSERSLIST_STATS;
	    } else if (opts.path && path.resolve && fs.existsSync) {
	      stats = eachParent(opts.path, function (dir) {
	        var file = path.join(dir, 'browserslist-stats.json');
	        return isFile(file) ? file : undefined
	      });
	    }
	    if (typeof stats === 'string') {
	      try {
	        stats = JSON.parse(fs.readFileSync(stats));
	      } catch (e) {
	        throw new BrowserslistError('Can\'t read ' + stats)
	      }
	    }
	    return normalizeStats(data, stats)
	  },

	  loadConfig: function loadConfig (opts) {
	    if (process.env.BROWSERSLIST) {
	      return process.env.BROWSERSLIST
	    } else if (opts.config || process.env.BROWSERSLIST_CONFIG) {
	      var file = opts.config || process.env.BROWSERSLIST_CONFIG;
	      if (path.basename(file) === 'package.json') {
	        return pickEnv(parsePackage(file), opts)
	      } else {
	        return pickEnv(module.exports.readConfig(file), opts)
	      }
	    } else if (opts.path) {
	      return pickEnv(module.exports.findConfig(opts.path), opts)
	    } else {
	      return undefined
	    }
	  },

	  loadCountry: function loadCountry (usage, country, data) {
	    var code = country.replace(/[^\w-]/g, '');
	    if (!usage[code]) {
	      // eslint-disable-next-line security/detect-non-literal-require
	      var compressed = commonjsRequire('caniuse-lite/data/regions/' + code + '.js');
	      var usageData = region$1(compressed);
	      normalizeUsageData(usageData, data);
	      usage[country] = { };
	      for (var i in usageData) {
	        for (var j in usageData[i]) {
	          usage[country][i + ' ' + j] = usageData[i][j];
	        }
	      }
	    }
	  },

	  loadFeature: function loadFeature (features, name) {
	    name = name.replace(/[^\w-]/g, '');
	    if (features[name]) return

	    // eslint-disable-next-line security/detect-non-literal-require
	    var compressed = commonjsRequire('caniuse-lite/data/features/' + name + '.js');
	    var stats = feature$1(compressed).stats;
	    features[name] = { };
	    for (var i in stats) {
	      for (var j in stats[i]) {
	        features[name][i + ' ' + j] = stats[i][j];
	      }
	    }
	  },

	  parseConfig: function parseConfig (string) {
	    var result = { defaults: [] };
	    var sections = ['defaults'];

	    string.toString()
	      .replace(/#[^\n]*/g, '')
	      .split(/\n|,/)
	      .map(function (line) {
	        return line.trim()
	      })
	      .filter(function (line) {
	        return line !== ''
	      })
	      .forEach(function (line) {
	        if (IS_SECTION.test(line)) {
	          sections = line.match(IS_SECTION)[1].trim().split(' ');
	          sections.forEach(function (section) {
	            if (result[section]) {
	              throw new BrowserslistError(
	                'Duplicate section ' + section + ' in Browserslist config'
	              )
	            }
	            result[section] = [];
	          });
	        } else {
	          sections.forEach(function (section) {
	            result[section].push(line);
	          });
	        }
	      });

	    return result
	  },

	  readConfig: function readConfig (file) {
	    if (!isFile(file)) {
	      throw new BrowserslistError('Can\'t read ' + file + ' config')
	    }
	    return module.exports.parseConfig(fs.readFileSync(file))
	  },

	  findConfig: function findConfig (from) {
	    from = path.resolve(from);

	    var passed = [];
	    var resolved = eachParent(from, function (dir) {
	      if (dir in configCache) {
	        return configCache[dir]
	      }

	      passed.push(dir);

	      var config = path.join(dir, 'browserslist');
	      var pkg = path.join(dir, 'package.json');
	      var rc = path.join(dir, '.browserslistrc');

	      var pkgBrowserslist;
	      if (isFile(pkg)) {
	        try {
	          pkgBrowserslist = parsePackage(pkg);
	        } catch (e) {
	          if (e.name === 'BrowserslistError') throw e
	          console.warn(
	            '[Browserslist] Could not parse ' + pkg + '. Ignoring it.'
	          );
	        }
	      }

	      if (isFile(config) && pkgBrowserslist) {
	        throw new BrowserslistError(
	          dir + ' contains both browserslist and package.json with browsers'
	        )
	      } else if (isFile(rc) && pkgBrowserslist) {
	        throw new BrowserslistError(
	          dir + ' contains both .browserslistrc and package.json with browsers'
	        )
	      } else if (isFile(config) && isFile(rc)) {
	        throw new BrowserslistError(
	          dir + ' contains both .browserslistrc and browserslist'
	        )
	      } else if (isFile(config)) {
	        return module.exports.readConfig(config)
	      } else if (isFile(rc)) {
	        return module.exports.readConfig(rc)
	      } else {
	        return pkgBrowserslist
	      }
	    });
	    if (!process.env.BROWSERSLIST_DISABLE_CACHE) {
	      passed.forEach(function (dir) {
	        configCache[dir] = resolved;
	      });
	    }
	    return resolved
	  },

	  clearCaches: function clearCaches () {
	    dataTimeChecked = false;
	    filenessCache = { };
	    configCache = { };

	    this.cache = { };
	  },

	  oldDataWarning: function oldDataWarning (agentsObj) {
	    if (dataTimeChecked) return
	    dataTimeChecked = true;
	    if (process.env.BROWSERSLIST_IGNORE_OLD_DATA) return

	    var latest = latestReleaseTime(agentsObj);
	    var halfYearAgo = Date.now() - TIME_TO_UPDATE_CANIUSE;

	    if (latest !== 0 && latest < halfYearAgo) {
	      console.warn(
	        'Browserslist: caniuse-lite is outdated. Please run:\n' +
	        '  npx browserslist@latest --update-db\n' +
	        '  Why you should do it regularly: ' +
	        'https://github.com/browserslist/browserslist#browsers-data-updating'
	      );
	    }
	  },

	  currentNode: function currentNode () {
	    return 'node ' + process.versions.node
	  }
	};
	}(node$3));

	var jsReleases = require$$0$4;
	var agents = agents$2.agents;
	var jsEOL = require$$2$1;
	var path = require$$0__default['default'];
	var e2c = versions$1;

	var BrowserslistError = error;
	var env = node$3.exports; // Will load browser.js in webpack

	var YEAR = 365.259641 * 24 * 60 * 60 * 1000;
	var ANDROID_EVERGREEN_FIRST = 37;

	var QUERY_OR = 1;
	var QUERY_AND = 2;

	function isVersionsMatch (versionA, versionB) {
	  return (versionA + '.').indexOf(versionB + '.') === 0
	}

	function isEolReleased (name) {
	  var version = name.slice(1);
	  return jsReleases.some(function (i) {
	    return isVersionsMatch(i.version, version)
	  })
	}

	function normalize$1 (versions) {
	  return versions.filter(function (version) {
	    return typeof version === 'string'
	  })
	}

	function normalizeElectron (version) {
	  var versionToUse = version;
	  if (version.split('.').length === 3) {
	    versionToUse = version
	      .split('.')
	      .slice(0, -1)
	      .join('.');
	  }
	  return versionToUse
	}

	function nameMapper (name) {
	  return function mapName (version) {
	    return name + ' ' + version
	  }
	}

	function getMajor (version) {
	  return parseInt(version.split('.')[0])
	}

	function getMajorVersions (released, number) {
	  if (released.length === 0) return []
	  var majorVersions = uniq(released.map(getMajor));
	  var minimum = majorVersions[majorVersions.length - number];
	  if (!minimum) {
	    return released
	  }
	  var selected = [];
	  for (var i = released.length - 1; i >= 0; i--) {
	    if (minimum > getMajor(released[i])) break
	    selected.unshift(released[i]);
	  }
	  return selected
	}

	function uniq (array) {
	  var filtered = [];
	  for (var i = 0; i < array.length; i++) {
	    if (filtered.indexOf(array[i]) === -1) filtered.push(array[i]);
	  }
	  return filtered
	}

	// Helpers

	function fillUsage (result, name, data) {
	  for (var i in data) {
	    result[name + ' ' + i] = data[i];
	  }
	}

	function generateFilter (sign, version) {
	  version = parseFloat(version);
	  if (sign === '>') {
	    return function (v) {
	      return parseFloat(v) > version
	    }
	  } else if (sign === '>=') {
	    return function (v) {
	      return parseFloat(v) >= version
	    }
	  } else if (sign === '<') {
	    return function (v) {
	      return parseFloat(v) < version
	    }
	  } else {
	    return function (v) {
	      return parseFloat(v) <= version
	    }
	  }
	}

	function generateSemverFilter (sign, version) {
	  version = version.split('.').map(parseSimpleInt);
	  version[1] = version[1] || 0;
	  version[2] = version[2] || 0;
	  if (sign === '>') {
	    return function (v) {
	      v = v.split('.').map(parseSimpleInt);
	      return compareSemver(v, version) > 0
	    }
	  } else if (sign === '>=') {
	    return function (v) {
	      v = v.split('.').map(parseSimpleInt);
	      return compareSemver(v, version) >= 0
	    }
	  } else if (sign === '<') {
	    return function (v) {
	      v = v.split('.').map(parseSimpleInt);
	      return compareSemver(version, v) > 0
	    }
	  } else {
	    return function (v) {
	      v = v.split('.').map(parseSimpleInt);
	      return compareSemver(version, v) >= 0
	    }
	  }
	}

	function parseSimpleInt (x) {
	  return parseInt(x)
	}

	function compare (a, b) {
	  if (a < b) return -1
	  if (a > b) return +1
	  return 0
	}

	function compareSemver (a, b) {
	  return (
	    compare(parseInt(a[0]), parseInt(b[0])) ||
	    compare(parseInt(a[1] || '0'), parseInt(b[1] || '0')) ||
	    compare(parseInt(a[2] || '0'), parseInt(b[2] || '0'))
	  )
	}

	// this follows the npm-like semver behavior
	function semverFilterLoose (operator, range) {
	  range = range.split('.').map(parseSimpleInt);
	  if (typeof range[1] === 'undefined') {
	    range[1] = 'x';
	  }
	  // ignore any patch version because we only return minor versions
	  // range[2] = 'x'
	  switch (operator) {
	    case '<=':
	      return function (version) {
	        version = version.split('.').map(parseSimpleInt);
	        return compareSemverLoose(version, range) <= 0
	      }
	    default:
	    case '>=':
	      return function (version) {
	        version = version.split('.').map(parseSimpleInt);
	        return compareSemverLoose(version, range) >= 0
	      }
	  }
	}

	// this follows the npm-like semver behavior
	function compareSemverLoose (version, range) {
	  if (version[0] !== range[0]) {
	    return version[0] < range[0] ? -1 : +1
	  }
	  if (range[1] === 'x') {
	    return 0
	  }
	  if (version[1] !== range[1]) {
	    return version[1] < range[1] ? -1 : +1
	  }
	  return 0
	}

	function resolveVersion (data, version) {
	  if (data.versions.indexOf(version) !== -1) {
	    return version
	  } else if (browserslist.versionAliases[data.name][version]) {
	    return browserslist.versionAliases[data.name][version]
	  } else {
	    return false
	  }
	}

	function normalizeVersion (data, version) {
	  var resolved = resolveVersion(data, version);
	  if (resolved) {
	    return resolved
	  } else if (data.versions.length === 1) {
	    return data.versions[0]
	  } else {
	    return false
	  }
	}

	function filterByYear (since, context) {
	  since = since / 1000;
	  return Object.keys(agents).reduce(function (selected, name) {
	    var data = byName(name, context);
	    if (!data) return selected
	    var versions = Object.keys(data.releaseDate).filter(function (v) {
	      return data.releaseDate[v] >= since
	    });
	    return selected.concat(versions.map(nameMapper(data.name)))
	  }, [])
	}

	function cloneData (data) {
	  return {
	    name: data.name,
	    versions: data.versions,
	    released: data.released,
	    releaseDate: data.releaseDate
	  }
	}

	function mapVersions (data, map) {
	  data.versions = data.versions.map(function (i) {
	    return map[i] || i
	  });
	  data.released = data.versions.map(function (i) {
	    return map[i] || i
	  });
	  var fixedDate = { };
	  for (var i in data.releaseDate) {
	    fixedDate[map[i] || i] = data.releaseDate[i];
	  }
	  data.releaseDate = fixedDate;
	  return data
	}

	function byName (name, context) {
	  name = name.toLowerCase();
	  name = browserslist.aliases[name] || name;
	  if (context.mobileToDesktop && browserslist.desktopNames[name]) {
	    var desktop = browserslist.data[browserslist.desktopNames[name]];
	    if (name === 'android') {
	      return normalizeAndroidData(cloneData(browserslist.data[name]), desktop)
	    } else {
	      var cloned = cloneData(desktop);
	      cloned.name = name;
	      if (name === 'op_mob') {
	        cloned = mapVersions(cloned, { '10.0-10.1': '10' });
	      }
	      return cloned
	    }
	  }
	  return browserslist.data[name]
	}

	function normalizeAndroidVersions (androidVersions, chromeVersions) {
	  var firstEvergreen = ANDROID_EVERGREEN_FIRST;
	  var last = chromeVersions[chromeVersions.length - 1];
	  return androidVersions
	    .filter(function (version) { return /^(?:[2-4]\.|[34]$)/.test(version) })
	    .concat(chromeVersions.slice(firstEvergreen - last - 1))
	}

	function normalizeAndroidData (android, chrome) {
	  android.released = normalizeAndroidVersions(android.released, chrome.released);
	  android.versions = normalizeAndroidVersions(android.versions, chrome.versions);
	  return android
	}

	function checkName (name, context) {
	  var data = byName(name, context);
	  if (!data) throw new BrowserslistError('Unknown browser ' + name)
	  return data
	}

	function unknownQuery (query) {
	  return new BrowserslistError(
	    'Unknown browser query `' + query + '`. ' +
	    'Maybe you are using old Browserslist or made typo in query.'
	  )
	}

	function filterAndroid (list, versions, context) {
	  if (context.mobileToDesktop) return list
	  var released = browserslist.data.android.released;
	  var last = released[released.length - 1];
	  var diff = last - ANDROID_EVERGREEN_FIRST - versions;
	  if (diff > 0) {
	    return list.slice(-1)
	  } else {
	    return list.slice(diff - 1)
	  }
	}

	/**
	 * Resolves queries into a browser list.
	 * @param {string|string[]} queries Queries to combine.
	 * Either an array of queries or a long string of queries.
	 * @param {object} [context] Optional arguments to
	 * the select function in `queries`.
	 * @returns {string[]} A list of browsers
	 */
	function resolve (queries, context) {
	  if (Array.isArray(queries)) {
	    queries = flatten(queries.map(parse$9));
	  } else {
	    queries = parse$9(queries);
	  }

	  return queries.reduce(function (result, query, index) {
	    var selection = query.queryString;

	    var isExclude = selection.indexOf('not ') === 0;
	    if (isExclude) {
	      if (index === 0) {
	        throw new BrowserslistError(
	          'Write any browsers query (for instance, `defaults`) ' +
	          'before `' + selection + '`')
	      }
	      selection = selection.slice(4);
	    }

	    for (var i = 0; i < QUERIES.length; i++) {
	      var type = QUERIES[i];
	      var match = selection.match(type.regexp);
	      if (match) {
	        var args = [context].concat(match.slice(1));
	        var array = type.select.apply(browserslist, args).map(function (j) {
	          var parts = j.split(' ');
	          if (parts[1] === '0') {
	            return parts[0] + ' ' + byName(parts[0], context).versions[0]
	          } else {
	            return j
	          }
	        });

	        switch (query.type) {
	          case QUERY_AND:
	            if (isExclude) {
	              return result.filter(function (j) {
	                return array.indexOf(j) === -1
	              })
	            } else {
	              return result.filter(function (j) {
	                return array.indexOf(j) !== -1
	              })
	            }
	          case QUERY_OR:
	          default:
	            if (isExclude) {
	              var filter = { };
	              array.forEach(function (j) {
	                filter[j] = true;
	              });
	              return result.filter(function (j) {
	                return !filter[j]
	              })
	            }
	            return result.concat(array)
	        }
	      }
	    }

	    throw unknownQuery(selection)
	  }, [])
	}

	var cache = { };

	/**
	 * Return array of browsers by selection queries.
	 *
	 * @param {(string|string[])} [queries=browserslist.defaults] Browser queries.
	 * @param {object} [opts] Options.
	 * @param {string} [opts.path="."] Path to processed file.
	 *                                 It will be used to find config files.
	 * @param {string} [opts.env="production"] Processing environment.
	 *                                         It will be used to take right
	 *                                         queries from config file.
	 * @param {string} [opts.config] Path to config file with queries.
	 * @param {object} [opts.stats] Custom browser usage statistics
	 *                              for "> 1% in my stats" query.
	 * @param {boolean} [opts.ignoreUnknownVersions=false] Do not throw on unknown
	 *                                                     version in direct query.
	 * @param {boolean} [opts.dangerousExtend] Disable security checks
	 *                                         for extend query.
	 * @param {boolean} [opts.mobileToDesktop] Alias mobile browsers to the desktop
	 *                                         version when Can I Use doesn't have
	 *                                         data about the specified version.
	 * @returns {string[]} Array with browser names in Can I Use.
	 *
	 * @example
	 * browserslist('IE >= 10, IE 8') //=> ['ie 11', 'ie 10', 'ie 8']
	 */
	function browserslist (queries, opts) {
	  if (typeof opts === 'undefined') opts = { };

	  if (typeof opts.path === 'undefined') {
	    opts.path = path.resolve ? path.resolve('.') : '.';
	  }

	  if (typeof queries === 'undefined' || queries === null) {
	    var config = browserslist.loadConfig(opts);
	    if (config) {
	      queries = config;
	    } else {
	      queries = browserslist.defaults;
	    }
	  }

	  if (!(typeof queries === 'string' || Array.isArray(queries))) {
	    throw new BrowserslistError(
	      'Browser queries must be an array or string. Got ' + typeof queries + '.')
	  }

	  var context = {
	    ignoreUnknownVersions: opts.ignoreUnknownVersions,
	    dangerousExtend: opts.dangerousExtend,
	    mobileToDesktop: opts.mobileToDesktop,
	    path: opts.path,
	    env: opts.env
	  };

	  env.oldDataWarning(browserslist.data);
	  var stats = env.getStat(opts, browserslist.data);
	  if (stats) {
	    context.customUsage = { };
	    for (var browser in stats) {
	      fillUsage(context.customUsage, browser, stats[browser]);
	    }
	  }

	  var cacheKey = JSON.stringify([queries, context]);
	  if (cache[cacheKey]) return cache[cacheKey]

	  var result = uniq(resolve(queries, context)).sort(function (name1, name2) {
	    name1 = name1.split(' ');
	    name2 = name2.split(' ');
	    if (name1[0] === name2[0]) {
	      // assumptions on caniuse data
	      // 1) version ranges never overlaps
	      // 2) if version is not a range, it never contains `-`
	      var version1 = name1[1].split('-')[0];
	      var version2 = name2[1].split('-')[0];
	      return compareSemver(version2.split('.'), version1.split('.'))
	    } else {
	      return compare(name1[0], name2[0])
	    }
	  });
	  if (!process.env.BROWSERSLIST_DISABLE_CACHE) {
	    cache[cacheKey] = result;
	  }
	  return result
	}

	function parse$9 (queries) {
	  var qs = [];
	  do {
	    queries = doMatch(queries, qs);
	  } while (queries)
	  return qs
	}

	function doMatch (string, qs) {
	  var or = /^(?:,\s*|\s+or\s+)(.*)/i;
	  var and = /^\s+and\s+(.*)/i;

	  return find$1(string, function (parsed, n, max) {
	    if (and.test(parsed)) {
	      qs.unshift({ type: QUERY_AND, queryString: parsed.match(and)[1] });
	      return true
	    } else if (or.test(parsed)) {
	      qs.unshift({ type: QUERY_OR, queryString: parsed.match(or)[1] });
	      return true
	    } else if (n === max) {
	      qs.unshift({ type: QUERY_OR, queryString: parsed.trim() });
	      return true
	    }
	    return false
	  })
	}

	function find$1 (string, predicate) {
	  for (var n = 1, max = string.length; n <= max; n++) {
	    var parsed = string.substr(-n, n);
	    if (predicate(parsed, n, max)) {
	      return string.slice(0, -n)
	    }
	  }
	  return ''
	}

	function flatten (array) {
	  if (!Array.isArray(array)) return [array]
	  return array.reduce(function (a, b) {
	    return a.concat(flatten(b))
	  }, [])
	}

	// Will be filled by Can I Use data below
	browserslist.cache = { };
	browserslist.data = { };
	browserslist.usage = {
	  global: { },
	  custom: null
	};

	// Default browsers query
	browserslist.defaults = [
	  '> 0.5%',
	  'last 2 versions',
	  'Firefox ESR',
	  'not dead'
	];

	// Browser names aliases
	browserslist.aliases = {
	  fx: 'firefox',
	  ff: 'firefox',
	  ios: 'ios_saf',
	  explorer: 'ie',
	  blackberry: 'bb',
	  explorermobile: 'ie_mob',
	  operamini: 'op_mini',
	  operamobile: 'op_mob',
	  chromeandroid: 'and_chr',
	  firefoxandroid: 'and_ff',
	  ucandroid: 'and_uc',
	  qqandroid: 'and_qq'
	};

	// Can I Use only provides a few versions for some browsers (e.g. and_chr).
	// Fallback to a similar browser for unknown versions
	browserslist.desktopNames = {
	  and_chr: 'chrome',
	  and_ff: 'firefox',
	  ie_mob: 'ie',
	  op_mob: 'opera',
	  android: 'chrome' // has extra processing logic
	};

	// Aliases to work with joined versions like `ios_saf 7.0-7.1`
	browserslist.versionAliases = { };

	browserslist.clearCaches = env.clearCaches;
	browserslist.parseConfig = env.parseConfig;
	browserslist.readConfig = env.readConfig;
	browserslist.findConfig = env.findConfig;
	browserslist.loadConfig = env.loadConfig;

	/**
	 * Return browsers market coverage.
	 *
	 * @param {string[]} browsers Browsers names in Can I Use.
	 * @param {string|object} [stats="global"] Which statistics should be used.
	 *                                         Country code or custom statistics.
	 *                                         Pass `"my stats"` to load statistics
	 *                                         from Browserslist files.
	 *
	 * @return {number} Total market coverage for all selected browsers.
	 *
	 * @example
	 * browserslist.coverage(browserslist('> 1% in US'), 'US') //=> 83.1
	 */
	browserslist.coverage = function (browsers, stats) {
	  var data;
	  if (typeof stats === 'undefined') {
	    data = browserslist.usage.global;
	  } else if (stats === 'my stats') {
	    var opts = {};
	    opts.path = path.resolve ? path.resolve('.') : '.';
	    var customStats = env.getStat(opts);
	    if (!customStats) {
	      throw new BrowserslistError('Custom usage statistics was not provided')
	    }
	    data = {};
	    for (var browser in customStats) {
	      fillUsage(data, browser, customStats[browser]);
	    }
	  } else if (typeof stats === 'string') {
	    if (stats.length > 2) {
	      stats = stats.toLowerCase();
	    } else {
	      stats = stats.toUpperCase();
	    }
	    env.loadCountry(browserslist.usage, stats, browserslist.data);
	    data = browserslist.usage[stats];
	  } else {
	    if ('dataByBrowser' in stats) {
	      stats = stats.dataByBrowser;
	    }
	    data = { };
	    for (var name in stats) {
	      for (var version in stats[name]) {
	        data[name + ' ' + version] = stats[name][version];
	      }
	    }
	  }

	  return browsers.reduce(function (all, i) {
	    var usage = data[i];
	    if (usage === undefined) {
	      usage = data[i.replace(/ \S+$/, ' 0')];
	    }
	    return all + (usage || 0)
	  }, 0)
	};

	function nodeQuery (context, version) {
	  var nodeReleases = jsReleases.filter(function (i) {
	    return i.name === 'nodejs'
	  });
	  var matched = nodeReleases.filter(function (i) {
	    return isVersionsMatch(i.version, version)
	  });
	  if (matched.length === 0) {
	    if (context.ignoreUnknownVersions) {
	      return []
	    } else {
	      throw new BrowserslistError('Unknown version ' + version + ' of Node.js')
	    }
	  }
	  return ['node ' + matched[matched.length - 1].version]
	}

	function sinceQuery (context, year, month, date) {
	  year = parseInt(year);
	  month = parseInt(month || '01') - 1;
	  date = parseInt(date || '01');
	  return filterByYear(Date.UTC(year, month, date, 0, 0, 0), context)
	}

	function coverQuery (context, coverage, statMode) {
	  coverage = parseFloat(coverage);
	  var usage = browserslist.usage.global;
	  if (statMode) {
	    if (statMode.match(/^my\s+stats$/)) {
	      if (!context.customUsage) {
	        throw new BrowserslistError(
	          'Custom usage statistics was not provided'
	        )
	      }
	      usage = context.customUsage;
	    } else {
	      var place;
	      if (statMode.length === 2) {
	        place = statMode.toUpperCase();
	      } else {
	        place = statMode.toLowerCase();
	      }
	      env.loadCountry(browserslist.usage, place, browserslist.data);
	      usage = browserslist.usage[place];
	    }
	  }
	  var versions = Object.keys(usage).sort(function (a, b) {
	    return usage[b] - usage[a]
	  });
	  var coveraged = 0;
	  var result = [];
	  var version;
	  for (var i = 0; i <= versions.length; i++) {
	    version = versions[i];
	    if (usage[version] === 0) break
	    coveraged += usage[version];
	    result.push(version);
	    if (coveraged >= coverage) break
	  }
	  return result
	}

	var QUERIES = [
	  {
	    regexp: /^last\s+(\d+)\s+major\s+versions?$/i,
	    select: function (context, versions) {
	      return Object.keys(agents).reduce(function (selected, name) {
	        var data = byName(name, context);
	        if (!data) return selected
	        var list = getMajorVersions(data.released, versions);
	        list = list.map(nameMapper(data.name));
	        if (data.name === 'android') {
	          list = filterAndroid(list, versions, context);
	        }
	        return selected.concat(list)
	      }, [])
	    }
	  },
	  {
	    regexp: /^last\s+(\d+)\s+versions?$/i,
	    select: function (context, versions) {
	      return Object.keys(agents).reduce(function (selected, name) {
	        var data = byName(name, context);
	        if (!data) return selected
	        var list = data.released.slice(-versions);
	        list = list.map(nameMapper(data.name));
	        if (data.name === 'android') {
	          list = filterAndroid(list, versions, context);
	        }
	        return selected.concat(list)
	      }, [])
	    }
	  },
	  {
	    regexp: /^last\s+(\d+)\s+electron\s+major\s+versions?$/i,
	    select: function (context, versions) {
	      var validVersions = getMajorVersions(Object.keys(e2c), versions);
	      return validVersions.map(function (i) {
	        return 'chrome ' + e2c[i]
	      })
	    }
	  },
	  {
	    regexp: /^last\s+(\d+)\s+(\w+)\s+major\s+versions?$/i,
	    select: function (context, versions, name) {
	      var data = checkName(name, context);
	      var validVersions = getMajorVersions(data.released, versions);
	      var list = validVersions.map(nameMapper(data.name));
	      if (data.name === 'android') {
	        list = filterAndroid(list, versions, context);
	      }
	      return list
	    }
	  },
	  {
	    regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
	    select: function (context, versions) {
	      return Object.keys(e2c)
	        .slice(-versions)
	        .map(function (i) {
	          return 'chrome ' + e2c[i]
	        })
	    }
	  },
	  {
	    regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
	    select: function (context, versions, name) {
	      var data = checkName(name, context);
	      var list = data.released.slice(-versions).map(nameMapper(data.name));
	      if (data.name === 'android') {
	        list = filterAndroid(list, versions, context);
	      }
	      return list
	    }
	  },
	  {
	    regexp: /^unreleased\s+versions$/i,
	    select: function (context) {
	      return Object.keys(agents).reduce(function (selected, name) {
	        var data = byName(name, context);
	        if (!data) return selected
	        var list = data.versions.filter(function (v) {
	          return data.released.indexOf(v) === -1
	        });
	        list = list.map(nameMapper(data.name));
	        return selected.concat(list)
	      }, [])
	    }
	  },
	  {
	    regexp: /^unreleased\s+electron\s+versions?$/i,
	    select: function () {
	      return []
	    }
	  },
	  {
	    regexp: /^unreleased\s+(\w+)\s+versions?$/i,
	    select: function (context, name) {
	      var data = checkName(name, context);
	      return data.versions
	        .filter(function (v) {
	          return data.released.indexOf(v) === -1
	        })
	        .map(nameMapper(data.name))
	    }
	  },
	  {
	    regexp: /^last\s+(\d*.?\d+)\s+years?$/i,
	    select: function (context, years) {
	      return filterByYear(Date.now() - YEAR * years, context)
	    }
	  },
	  {
	    regexp: /^since (\d+)$/i,
	    select: sinceQuery
	  },
	  {
	    regexp: /^since (\d+)-(\d+)$/i,
	    select: sinceQuery
	  },
	  {
	    regexp: /^since (\d+)-(\d+)-(\d+)$/i,
	    select: sinceQuery
	  },
	  {
	    regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%$/,
	    select: function (context, sign, popularity) {
	      popularity = parseFloat(popularity);
	      var usage = browserslist.usage.global;
	      return Object.keys(usage).reduce(function (result, version) {
	        if (sign === '>') {
	          if (usage[version] > popularity) {
	            result.push(version);
	          }
	        } else if (sign === '<') {
	          if (usage[version] < popularity) {
	            result.push(version);
	          }
	        } else if (sign === '<=') {
	          if (usage[version] <= popularity) {
	            result.push(version);
	          }
	        } else if (usage[version] >= popularity) {
	          result.push(version);
	        }
	        return result
	      }, [])
	    }
	  },
	  {
	    regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+my\s+stats$/,
	    select: function (context, sign, popularity) {
	      popularity = parseFloat(popularity);
	      if (!context.customUsage) {
	        throw new BrowserslistError('Custom usage statistics was not provided')
	      }
	      var usage = context.customUsage;
	      return Object.keys(usage).reduce(function (result, version) {
	        if (sign === '>') {
	          if (usage[version] > popularity) {
	            result.push(version);
	          }
	        } else if (sign === '<') {
	          if (usage[version] < popularity) {
	            result.push(version);
	          }
	        } else if (sign === '<=') {
	          if (usage[version] <= popularity) {
	            result.push(version);
	          }
	        } else if (usage[version] >= popularity) {
	          result.push(version);
	        }
	        return result
	      }, [])
	    }
	  },
	  {
	    regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+(\S+)\s+stats$/,
	    select: function (context, sign, popularity, name) {
	      popularity = parseFloat(popularity);
	      var stats = env.loadStat(context, name, browserslist.data);
	      if (stats) {
	        context.customUsage = {};
	        for (var browser in stats) {
	          fillUsage(context.customUsage, browser, stats[browser]);
	        }
	      }
	      if (!context.customUsage) {
	        throw new BrowserslistError('Custom usage statistics was not provided')
	      }
	      var usage = context.customUsage;
	      return Object.keys(usage).reduce(function (result, version) {
	        if (sign === '>') {
	          if (usage[version] > popularity) {
	            result.push(version);
	          }
	        } else if (sign === '<') {
	          if (usage[version] < popularity) {
	            result.push(version);
	          }
	        } else if (sign === '<=') {
	          if (usage[version] <= popularity) {
	            result.push(version);
	          }
	        } else if (usage[version] >= popularity) {
	          result.push(version);
	        }
	        return result
	      }, [])
	    }
	  },
	  {
	    regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+((alt-)?\w\w)$/,
	    select: function (context, sign, popularity, place) {
	      popularity = parseFloat(popularity);
	      if (place.length === 2) {
	        place = place.toUpperCase();
	      } else {
	        place = place.toLowerCase();
	      }
	      env.loadCountry(browserslist.usage, place, browserslist.data);
	      var usage = browserslist.usage[place];
	      return Object.keys(usage).reduce(function (result, version) {
	        if (sign === '>') {
	          if (usage[version] > popularity) {
	            result.push(version);
	          }
	        } else if (sign === '<') {
	          if (usage[version] < popularity) {
	            result.push(version);
	          }
	        } else if (sign === '<=') {
	          if (usage[version] <= popularity) {
	            result.push(version);
	          }
	        } else if (usage[version] >= popularity) {
	          result.push(version);
	        }
	        return result
	      }, [])
	    }
	  },
	  {
	    regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%$/,
	    select: coverQuery
	  },
	  {
	    regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%\s+in\s+(my\s+stats|(alt-)?\w\w)$/,
	    select: coverQuery
	  },
	  {
	    regexp: /^supports\s+([\w-]+)$/,
	    select: function (context, feature) {
	      env.loadFeature(browserslist.cache, feature);
	      var features = browserslist.cache[feature];
	      return Object.keys(features).reduce(function (result, version) {
	        var flags = features[version];
	        if (flags.indexOf('y') >= 0 || flags.indexOf('a') >= 0) {
	          result.push(version);
	        }
	        return result
	      }, [])
	    }
	  },
	  {
	    regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
	    select: function (context, from, to) {
	      var fromToUse = normalizeElectron(from);
	      var toToUse = normalizeElectron(to);
	      if (!e2c[fromToUse]) {
	        throw new BrowserslistError('Unknown version ' + from + ' of electron')
	      }
	      if (!e2c[toToUse]) {
	        throw new BrowserslistError('Unknown version ' + to + ' of electron')
	      }
	      from = parseFloat(from);
	      to = parseFloat(to);
	      return Object.keys(e2c)
	        .filter(function (i) {
	          var parsed = parseFloat(i);
	          return parsed >= from && parsed <= to
	        })
	        .map(function (i) {
	          return 'chrome ' + e2c[i]
	        })
	    }
	  },
	  {
	    regexp: /^node\s+([\d.]+)\s*-\s*([\d.]+)$/i,
	    select: function (context, from, to) {
	      var nodeVersions = jsReleases
	        .filter(function (i) {
	          return i.name === 'nodejs'
	        })
	        .map(function (i) {
	          return i.version
	        });
	      return nodeVersions
	        .filter(semverFilterLoose('>=', from))
	        .filter(semverFilterLoose('<=', to))
	        .map(function (v) {
	          return 'node ' + v
	        })
	    }
	  },
	  {
	    regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
	    select: function (context, name, from, to) {
	      var data = checkName(name, context);
	      from = parseFloat(normalizeVersion(data, from) || from);
	      to = parseFloat(normalizeVersion(data, to) || to);
	      function filter (v) {
	        var parsed = parseFloat(v);
	        return parsed >= from && parsed <= to
	      }
	      return data.released.filter(filter).map(nameMapper(data.name))
	    }
	  },
	  {
	    regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
	    select: function (context, sign, version) {
	      var versionToUse = normalizeElectron(version);
	      return Object.keys(e2c)
	        .filter(generateFilter(sign, versionToUse))
	        .map(function (i) {
	          return 'chrome ' + e2c[i]
	        })
	    }
	  },
	  {
	    regexp: /^node\s*(>=?|<=?)\s*([\d.]+)$/i,
	    select: function (context, sign, version) {
	      var nodeVersions = jsReleases
	        .filter(function (i) {
	          return i.name === 'nodejs'
	        })
	        .map(function (i) {
	          return i.version
	        });
	      return nodeVersions
	        .filter(generateSemverFilter(sign, version))
	        .map(function (v) {
	          return 'node ' + v
	        })
	    }
	  },
	  {
	    regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
	    select: function (context, name, sign, version) {
	      var data = checkName(name, context);
	      var alias = browserslist.versionAliases[data.name][version];
	      if (alias) {
	        version = alias;
	      }
	      return data.released
	        .filter(generateFilter(sign, version))
	        .map(function (v) {
	          return data.name + ' ' + v
	        })
	    }
	  },
	  {
	    regexp: /^(firefox|ff|fx)\s+esr$/i,
	    select: function () {
	      return ['firefox 78', 'firefox 91']
	    }
	  },
	  {
	    regexp: /(operamini|op_mini)\s+all/i,
	    select: function () {
	      return ['op_mini all']
	    }
	  },
	  {
	    regexp: /^electron\s+([\d.]+)$/i,
	    select: function (context, version) {
	      var versionToUse = normalizeElectron(version);
	      var chrome = e2c[versionToUse];
	      if (!chrome) {
	        throw new BrowserslistError(
	          'Unknown version ' + version + ' of electron'
	        )
	      }
	      return ['chrome ' + chrome]
	    }
	  },
	  {
	    regexp: /^node\s+(\d+)$/i,
	    select: nodeQuery
	  },
	  {
	    regexp: /^node\s+(\d+\.\d+)$/i,
	    select: nodeQuery
	  },
	  {
	    regexp: /^node\s+(\d+\.\d+\.\d+)$/i,
	    select: nodeQuery
	  },
	  {
	    regexp: /^current\s+node$/i,
	    select: function (context) {
	      return [env.currentNode(resolve, context)]
	    }
	  },
	  {
	    regexp: /^maintained\s+node\s+versions$/i,
	    select: function (context) {
	      var now = Date.now();
	      var queries = Object.keys(jsEOL)
	        .filter(function (key) {
	          return (
	            now < Date.parse(jsEOL[key].end) &&
	            now > Date.parse(jsEOL[key].start) &&
	            isEolReleased(key)
	          )
	        })
	        .map(function (key) {
	          return 'node ' + key.slice(1)
	        });
	      return resolve(queries, context)
	    }
	  },
	  {
	    regexp: /^phantomjs\s+1.9$/i,
	    select: function () {
	      return ['safari 5']
	    }
	  },
	  {
	    regexp: /^phantomjs\s+2.1$/i,
	    select: function () {
	      return ['safari 6']
	    }
	  },
	  {
	    regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
	    select: function (context, name, version) {
	      if (/^tp$/i.test(version)) version = 'TP';
	      var data = checkName(name, context);
	      var alias = normalizeVersion(data, version);
	      if (alias) {
	        version = alias;
	      } else {
	        if (version.indexOf('.') === -1) {
	          alias = version + '.0';
	        } else {
	          alias = version.replace(/\.0$/, '');
	        }
	        alias = normalizeVersion(data, alias);
	        if (alias) {
	          version = alias;
	        } else if (context.ignoreUnknownVersions) {
	          return []
	        } else {
	          throw new BrowserslistError(
	            'Unknown version ' + version + ' of ' + name
	          )
	        }
	      }
	      return [data.name + ' ' + version]
	    }
	  },
	  {
	    regexp: /^browserslist config$/i,
	    select: function (context) {
	      return browserslist(undefined, context)
	    }
	  },
	  {
	    regexp: /^extends (.+)$/i,
	    select: function (context, name) {
	      return resolve(env.loadQueries(context, name), context)
	    }
	  },
	  {
	    regexp: /^defaults$/i,
	    select: function (context) {
	      return resolve(browserslist.defaults, context)
	    }
	  },
	  {
	    regexp: /^dead$/i,
	    select: function (context) {
	      var dead = [
	        'ie <= 10',
	        'ie_mob <= 11',
	        'bb <= 10',
	        'op_mob <= 12.1',
	        'samsung 4'
	      ];
	      return resolve(dead, context)
	    }
	  },
	  {
	    regexp: /^(\w+)$/i,
	    select: function (context, name) {
	      if (byName(name, context)) {
	        throw new BrowserslistError(
	          'Specify versions in Browserslist query for browser ' + name
	        )
	      } else {
	        throw unknownQuery(name)
	      }
	    }
	  }
	];

	// Get and convert Can I Use data

	(function () {
	  for (var name in agents) {
	    var browser = agents[name];
	    browserslist.data[name] = {
	      name: name,
	      versions: normalize$1(agents[name].versions),
	      released: normalize$1(agents[name].versions.slice(0, -3)),
	      releaseDate: agents[name].release_date
	    };
	    fillUsage(browserslist.usage.global, name, browser.usage_global);

	    browserslist.versionAliases[name] = { };
	    for (var i = 0; i < browser.versions.length; i++) {
	      var full = browser.versions[i];
	      if (!full) continue

	      if (full.indexOf('-') !== -1) {
	        var interval = full.split('-');
	        for (var j = 0; j < interval.length; j++) {
	          browserslist.versionAliases[name][interval[j]] = full;
	        }
	      }
	    }
	  }

	  browserslist.versionAliases.op_mob['59'] = '58';
	}());

	var browserslist_1 = browserslist;

	var lib$a = {};

	var validator = {};

	var findSuggestion$1 = {};

	Object.defineProperty(findSuggestion$1, "__esModule", {
	  value: true
	});
	findSuggestion$1.findSuggestion = findSuggestion;
	const {
	  min
	} = Math;

	function levenshtein(a, b) {
	  let t = [],
	      u = [],
	      i,
	      j;
	  const m = a.length,
	        n = b.length;

	  if (!m) {
	    return n;
	  }

	  if (!n) {
	    return m;
	  }

	  for (j = 0; j <= n; j++) {
	    t[j] = j;
	  }

	  for (i = 1; i <= m; i++) {
	    for (u = [i], j = 1; j <= n; j++) {
	      u[j] = a[i - 1] === b[j - 1] ? t[j - 1] : min(t[j - 1], t[j], u[j - 1]) + 1;
	    }

	    t = u;
	  }

	  return u[n];
	}

	function findSuggestion(str, arr) {
	  const distances = arr.map(el => levenshtein(el, str));
	  return arr[distances.indexOf(min(...distances))];
	}

	Object.defineProperty(validator, "__esModule", {
	  value: true
	});
	validator.OptionValidator = void 0;

	var _findSuggestion = findSuggestion$1;

	class OptionValidator {
	  constructor(descriptor) {
	    this.descriptor = descriptor;
	  }

	  validateTopLevelOptions(options, TopLevelOptionShape) {
	    const validOptionNames = Object.keys(TopLevelOptionShape);

	    for (const option of Object.keys(options)) {
	      if (!validOptionNames.includes(option)) {
	        throw new Error(this.formatMessage(`'${option}' is not a valid top-level option.
- Did you mean '${(0, _findSuggestion.findSuggestion)(option, validOptionNames)}'?`));
	      }
	    }
	  }

	  validateBooleanOption(name, value, defaultValue) {
	    if (value === undefined) {
	      return defaultValue;
	    } else {
	      this.invariant(typeof value === "boolean", `'${name}' option must be a boolean.`);
	    }

	    return value;
	  }

	  validateStringOption(name, value, defaultValue) {
	    if (value === undefined) {
	      return defaultValue;
	    } else {
	      this.invariant(typeof value === "string", `'${name}' option must be a string.`);
	    }

	    return value;
	  }

	  invariant(condition, message) {
	    if (!condition) {
	      throw new Error(this.formatMessage(message));
	    }
	  }

	  formatMessage(message) {
	    return `${this.descriptor}: ${message}`;
	  }

	}

	validator.OptionValidator = OptionValidator;

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "OptionValidator", {
	  enumerable: true,
	  get: function () {
	    return _validator.OptionValidator;
	  }
	});
	Object.defineProperty(exports, "findSuggestion", {
	  enumerable: true,
	  get: function () {
	    return _findSuggestion.findSuggestion;
	  }
	});

	var _validator = validator;

	var _findSuggestion = findSuggestion$1;
	}(lib$a));

	var require$$0$3 = {
		"es6.module": {
		chrome: "61",
		and_chr: "61",
		edge: "16",
		firefox: "60",
		and_ff: "60",
		node: "13.2.0",
		opera: "48",
		op_mob: "48",
		safari: "10.1",
		ios: "10.3",
		samsung: "8.2",
		android: "61",
		electron: "2.0",
		ios_saf: "10.3"
	}
	};

	var nativeModules = require$$0$3;

	var utils$1 = {};

	var targets = {};

	Object.defineProperty(targets, "__esModule", {
	  value: true
	});
	targets.browserNameMap = targets.unreleasedLabels = void 0;
	const unreleasedLabels = {
	  safari: "tp"
	};
	targets.unreleasedLabels = unreleasedLabels;
	const browserNameMap = {
	  and_chr: "chrome",
	  and_ff: "firefox",
	  android: "android",
	  chrome: "chrome",
	  edge: "edge",
	  firefox: "firefox",
	  ie: "ie",
	  ie_mob: "ie",
	  ios_saf: "ios",
	  node: "node",
	  op_mob: "opera",
	  opera: "opera",
	  safari: "safari",
	  samsung: "samsung"
	};
	targets.browserNameMap = browserNameMap;

	Object.defineProperty(utils$1, "__esModule", {
	  value: true
	});
	utils$1.semverMin = semverMin;
	utils$1.semverify = semverify;
	utils$1.isUnreleasedVersion = isUnreleasedVersion;
	utils$1.getLowestUnreleased = getLowestUnreleased;
	utils$1.getHighestUnreleased = getHighestUnreleased;
	utils$1.getLowestImplementedVersion = getLowestImplementedVersion;

	var _semver$3 = semver.exports;

	var _helperValidatorOption = lib$a;

	var _targets$1 = targets;

	const versionRegExp = /^(\d+|\d+.\d+)$/;
	const v = new _helperValidatorOption.OptionValidator("@babel/helper-compilation-targets");

	function semverMin(first, second) {
	  return first && _semver$3.lt(first, second) ? first : second;
	}

	function semverify(version) {
	  if (typeof version === "string" && _semver$3.valid(version)) {
	    return version;
	  }

	  v.invariant(typeof version === "number" || typeof version === "string" && versionRegExp.test(version), `'${version}' is not a valid version`);
	  const split = version.toString().split(".");

	  while (split.length < 3) {
	    split.push("0");
	  }

	  return split.join(".");
	}

	function isUnreleasedVersion(version, env) {
	  const unreleasedLabel = _targets$1.unreleasedLabels[env];
	  return !!unreleasedLabel && unreleasedLabel === version.toString().toLowerCase();
	}

	function getLowestUnreleased(a, b, env) {
	  const unreleasedLabel = _targets$1.unreleasedLabels[env];
	  const hasUnreleased = [a, b].some(item => item === unreleasedLabel);

	  if (hasUnreleased) {
	    return a === hasUnreleased ? b : a || b;
	  }

	  return semverMin(a, b);
	}

	function getHighestUnreleased(a, b, env) {
	  return getLowestUnreleased(a, b, env) === a ? b : a;
	}

	function getLowestImplementedVersion(plugin, environment) {
	  const result = plugin[environment];

	  if (!result && environment === "android") {
	    return plugin.chrome;
	  }

	  return result;
	}

	var options$1 = {};

	Object.defineProperty(options$1, "__esModule", {
	  value: true
	});
	options$1.TargetNames = void 0;
	const TargetNames = {
	  node: "node",
	  chrome: "chrome",
	  opera: "opera",
	  edge: "edge",
	  firefox: "firefox",
	  safari: "safari",
	  ie: "ie",
	  ios: "ios",
	  android: "android",
	  electron: "electron",
	  samsung: "samsung",
	  rhino: "rhino"
	};
	options$1.TargetNames = TargetNames;

	var pretty = {};

	Object.defineProperty(pretty, "__esModule", {
	  value: true
	});
	pretty.prettifyVersion = prettifyVersion;
	pretty.prettifyTargets = prettifyTargets;

	var _semver$2 = semver.exports;

	var _targets = targets;

	function prettifyVersion(version) {
	  if (typeof version !== "string") {
	    return version;
	  }

	  const parts = [_semver$2.major(version)];

	  const minor = _semver$2.minor(version);

	  const patch = _semver$2.patch(version);

	  if (minor || patch) {
	    parts.push(minor);
	  }

	  if (patch) {
	    parts.push(patch);
	  }

	  return parts.join(".");
	}

	function prettifyTargets(targets) {
	  return Object.keys(targets).reduce((results, target) => {
	    let value = targets[target];
	    const unreleasedLabel = _targets.unreleasedLabels[target];

	    if (typeof value === "string" && unreleasedLabel !== value) {
	      value = prettifyVersion(value);
	    }

	    results[target] = value;
	    return results;
	  }, {});
	}

	var debug$2 = {};

	Object.defineProperty(debug$2, "__esModule", {
	  value: true
	});
	debug$2.getInclusionReasons = getInclusionReasons;

	var _semver$1 = semver.exports;

	var _pretty = pretty;

	var _utils$1 = utils$1;

	function getInclusionReasons(item, targetVersions, list) {
	  const minVersions = list[item] || {};
	  return Object.keys(targetVersions).reduce((result, env) => {
	    const minVersion = (0, _utils$1.getLowestImplementedVersion)(minVersions, env);
	    const targetVersion = targetVersions[env];

	    if (!minVersion) {
	      result[env] = (0, _pretty.prettifyVersion)(targetVersion);
	    } else {
	      const minIsUnreleased = (0, _utils$1.isUnreleasedVersion)(minVersion, env);
	      const targetIsUnreleased = (0, _utils$1.isUnreleasedVersion)(targetVersion, env);

	      if (!targetIsUnreleased && (minIsUnreleased || _semver$1.lt(targetVersion.toString(), (0, _utils$1.semverify)(minVersion)))) {
	        result[env] = (0, _pretty.prettifyVersion)(targetVersion);
	      }
	    }

	    return result;
	  }, {});
	}

	var filterItems$1 = {};

	var require$$0$2 = {
		"proposal-class-static-block": {
		chrome: "91",
		electron: "13.0"
	},
		"proposal-private-property-in-object": {
		chrome: "91",
		firefox: "90",
		electron: "13.0"
	},
		"proposal-class-properties": {
		chrome: "74",
		opera: "62",
		edge: "79",
		firefox: "90",
		safari: "14.1",
		node: "12",
		samsung: "11",
		electron: "6.0"
	},
		"proposal-private-methods": {
		chrome: "84",
		opera: "70",
		edge: "84",
		firefox: "90",
		safari: "15",
		node: "14.6",
		electron: "10.0"
	},
		"proposal-numeric-separator": {
		chrome: "75",
		opera: "62",
		edge: "79",
		firefox: "70",
		safari: "13",
		node: "12.5",
		ios: "13",
		samsung: "11",
		electron: "6.0"
	},
		"proposal-logical-assignment-operators": {
		chrome: "85",
		opera: "71",
		edge: "85",
		firefox: "79",
		safari: "14",
		node: "15",
		ios: "14",
		electron: "10.0"
	},
		"proposal-nullish-coalescing-operator": {
		chrome: "80",
		opera: "67",
		edge: "80",
		firefox: "72",
		safari: "13.1",
		node: "14",
		ios: "13.4",
		samsung: "13",
		electron: "8.0"
	},
		"proposal-optional-chaining": {
		firefox: "74",
		safari: "13.1",
		ios: "13.4"
	},
		"proposal-json-strings": {
		chrome: "66",
		opera: "53",
		edge: "79",
		firefox: "62",
		safari: "12",
		node: "10",
		ios: "12",
		samsung: "9",
		electron: "3.0"
	},
		"proposal-optional-catch-binding": {
		chrome: "66",
		opera: "53",
		edge: "79",
		firefox: "58",
		safari: "11.1",
		node: "10",
		ios: "11.3",
		samsung: "9",
		electron: "3.0"
	},
		"transform-parameters": {
		chrome: "49",
		opera: "36",
		edge: "18",
		firefox: "53",
		safari: "10",
		node: "6",
		ios: "10",
		samsung: "5",
		electron: "0.37"
	},
		"proposal-async-generator-functions": {
		chrome: "63",
		opera: "50",
		edge: "79",
		firefox: "57",
		safari: "12",
		node: "10",
		ios: "12",
		samsung: "8",
		electron: "3.0"
	},
		"proposal-object-rest-spread": {
		chrome: "60",
		opera: "47",
		edge: "79",
		firefox: "55",
		safari: "11.1",
		node: "8.3",
		ios: "11.3",
		samsung: "8",
		electron: "2.0"
	},
		"transform-dotall-regex": {
		chrome: "62",
		opera: "49",
		edge: "79",
		firefox: "78",
		safari: "11.1",
		node: "8.10",
		ios: "11.3",
		samsung: "8",
		electron: "3.0"
	},
		"proposal-unicode-property-regex": {
		chrome: "64",
		opera: "51",
		edge: "79",
		firefox: "78",
		safari: "11.1",
		node: "10",
		ios: "11.3",
		samsung: "9",
		electron: "3.0"
	},
		"transform-named-capturing-groups-regex": {
		chrome: "64",
		opera: "51",
		edge: "79",
		firefox: "78",
		safari: "11.1",
		node: "10",
		ios: "11.3",
		samsung: "9",
		electron: "3.0"
	},
		"transform-async-to-generator": {
		chrome: "55",
		opera: "42",
		edge: "15",
		firefox: "52",
		safari: "11",
		node: "7.6",
		ios: "11",
		samsung: "6",
		electron: "1.6"
	},
		"transform-exponentiation-operator": {
		chrome: "52",
		opera: "39",
		edge: "14",
		firefox: "52",
		safari: "10.1",
		node: "7",
		ios: "10.3",
		samsung: "6",
		electron: "1.3"
	},
		"transform-template-literals": {
		chrome: "41",
		opera: "28",
		edge: "13",
		firefox: "34",
		safari: "13",
		node: "4",
		ios: "13",
		samsung: "3.4",
		electron: "0.21"
	},
		"transform-literals": {
		chrome: "44",
		opera: "31",
		edge: "12",
		firefox: "53",
		safari: "9",
		node: "4",
		ios: "9",
		samsung: "4",
		electron: "0.30"
	},
		"transform-function-name": {
		chrome: "51",
		opera: "38",
		edge: "79",
		firefox: "53",
		safari: "10",
		node: "6.5",
		ios: "10",
		samsung: "5",
		electron: "1.2"
	},
		"transform-arrow-functions": {
		chrome: "47",
		opera: "34",
		edge: "13",
		firefox: "43",
		safari: "10",
		node: "6",
		ios: "10",
		samsung: "5",
		rhino: "1.7.13",
		electron: "0.36"
	},
		"transform-block-scoped-functions": {
		chrome: "41",
		opera: "28",
		edge: "12",
		firefox: "46",
		safari: "10",
		node: "4",
		ie: "11",
		ios: "10",
		samsung: "3.4",
		electron: "0.21"
	},
		"transform-classes": {
		chrome: "46",
		opera: "33",
		edge: "13",
		firefox: "45",
		safari: "10",
		node: "5",
		ios: "10",
		samsung: "5",
		electron: "0.36"
	},
		"transform-object-super": {
		chrome: "46",
		opera: "33",
		edge: "13",
		firefox: "45",
		safari: "10",
		node: "5",
		ios: "10",
		samsung: "5",
		electron: "0.36"
	},
		"transform-shorthand-properties": {
		chrome: "43",
		opera: "30",
		edge: "12",
		firefox: "33",
		safari: "9",
		node: "4",
		ios: "9",
		samsung: "4",
		electron: "0.27"
	},
		"transform-duplicate-keys": {
		chrome: "42",
		opera: "29",
		edge: "12",
		firefox: "34",
		safari: "9",
		node: "4",
		ios: "9",
		samsung: "3.4",
		electron: "0.25"
	},
		"transform-computed-properties": {
		chrome: "44",
		opera: "31",
		edge: "12",
		firefox: "34",
		safari: "7.1",
		node: "4",
		ios: "8",
		samsung: "4",
		electron: "0.30"
	},
		"transform-for-of": {
		chrome: "51",
		opera: "38",
		edge: "15",
		firefox: "53",
		safari: "10",
		node: "6.5",
		ios: "10",
		samsung: "5",
		electron: "1.2"
	},
		"transform-sticky-regex": {
		chrome: "49",
		opera: "36",
		edge: "13",
		firefox: "3",
		safari: "10",
		node: "6",
		ios: "10",
		samsung: "5",
		electron: "0.37"
	},
		"transform-unicode-escapes": {
		chrome: "44",
		opera: "31",
		edge: "12",
		firefox: "53",
		safari: "9",
		node: "4",
		ios: "9",
		samsung: "4",
		electron: "0.30"
	},
		"transform-unicode-regex": {
		chrome: "50",
		opera: "37",
		edge: "13",
		firefox: "46",
		safari: "12",
		node: "6",
		ios: "12",
		samsung: "5",
		electron: "1.1"
	},
		"transform-spread": {
		chrome: "46",
		opera: "33",
		edge: "13",
		firefox: "45",
		safari: "10",
		node: "5",
		ios: "10",
		samsung: "5",
		electron: "0.36"
	},
		"transform-destructuring": {
		chrome: "51",
		opera: "38",
		edge: "15",
		firefox: "53",
		safari: "10",
		node: "6.5",
		ios: "10",
		samsung: "5",
		electron: "1.2"
	},
		"transform-block-scoping": {
		chrome: "49",
		opera: "36",
		edge: "14",
		firefox: "51",
		safari: "11",
		node: "6",
		ios: "11",
		samsung: "5",
		electron: "0.37"
	},
		"transform-typeof-symbol": {
		chrome: "38",
		opera: "25",
		edge: "12",
		firefox: "36",
		safari: "9",
		node: "0.12",
		ios: "9",
		samsung: "3",
		rhino: "1.7.13",
		electron: "0.20"
	},
		"transform-new-target": {
		chrome: "46",
		opera: "33",
		edge: "14",
		firefox: "45",
		safari: "10",
		node: "5",
		ios: "10",
		samsung: "5",
		electron: "0.36"
	},
		"transform-regenerator": {
		chrome: "50",
		opera: "37",
		edge: "13",
		firefox: "53",
		safari: "10",
		node: "6",
		ios: "10",
		samsung: "5",
		electron: "1.1"
	},
		"transform-member-expression-literals": {
		chrome: "7",
		opera: "12",
		edge: "12",
		firefox: "2",
		safari: "5.1",
		node: "0.10",
		ie: "9",
		android: "4",
		ios: "6",
		phantom: "2",
		samsung: "1",
		rhino: "1.7.13",
		electron: "0.20"
	},
		"transform-property-literals": {
		chrome: "7",
		opera: "12",
		edge: "12",
		firefox: "2",
		safari: "5.1",
		node: "0.10",
		ie: "9",
		android: "4",
		ios: "6",
		phantom: "2",
		samsung: "1",
		rhino: "1.7.13",
		electron: "0.20"
	},
		"transform-reserved-words": {
		chrome: "13",
		opera: "10.50",
		edge: "12",
		firefox: "2",
		safari: "3.1",
		node: "0.10",
		ie: "9",
		android: "4.4",
		ios: "6",
		phantom: "2",
		samsung: "1",
		rhino: "1.7.13",
		electron: "0.20"
	},
		"proposal-export-namespace-from": {
		chrome: "72",
		and_chr: "72",
		edge: "79",
		firefox: "80",
		and_ff: "80",
		node: "13.2",
		opera: "60",
		op_mob: "51",
		samsung: "11.0",
		android: "72",
		electron: "5.0"
	}
	};

	var plugins$1 = require$$0$2;

	Object.defineProperty(filterItems$1, "__esModule", {
	  value: true
	});
	filterItems$1.targetsSupported = targetsSupported;
	filterItems$1.isRequired = isRequired;
	filterItems$1.default = filterItems;

	var _semver = semver.exports;

	var _plugins$1 = plugins$1;

	var _utils = utils$1;

	function targetsSupported(target, support) {
	  const targetEnvironments = Object.keys(target);

	  if (targetEnvironments.length === 0) {
	    return false;
	  }

	  const unsupportedEnvironments = targetEnvironments.filter(environment => {
	    const lowestImplementedVersion = (0, _utils.getLowestImplementedVersion)(support, environment);

	    if (!lowestImplementedVersion) {
	      return true;
	    }

	    const lowestTargetedVersion = target[environment];

	    if ((0, _utils.isUnreleasedVersion)(lowestTargetedVersion, environment)) {
	      return false;
	    }

	    if ((0, _utils.isUnreleasedVersion)(lowestImplementedVersion, environment)) {
	      return true;
	    }

	    if (!_semver.valid(lowestTargetedVersion.toString())) {
	      throw new Error(`Invalid version passed for target "${environment}": "${lowestTargetedVersion}". ` + "Versions must be in semver format (major.minor.patch)");
	    }

	    return _semver.gt((0, _utils.semverify)(lowestImplementedVersion), lowestTargetedVersion.toString());
	  });
	  return unsupportedEnvironments.length === 0;
	}

	function isRequired(name, targets, {
	  compatData = _plugins$1,
	  includes,
	  excludes
	} = {}) {
	  if (excludes != null && excludes.has(name)) return false;
	  if (includes != null && includes.has(name)) return true;
	  return !targetsSupported(targets, compatData[name]);
	}

	function filterItems(list, includes, excludes, targets, defaultIncludes, defaultExcludes, pluginSyntaxMap) {
	  const result = new Set();
	  const options = {
	    compatData: list,
	    includes,
	    excludes
	  };

	  for (const item in list) {
	    if (isRequired(item, targets, options)) {
	      result.add(item);
	    } else if (pluginSyntaxMap) {
	      const shippedProposalsSyntax = pluginSyntaxMap.get(item);

	      if (shippedProposalsSyntax) {
	        result.add(shippedProposalsSyntax);
	      }
	    }
	  }

	  if (defaultIncludes) {
	    defaultIncludes.forEach(item => !excludes.has(item) && result.add(item));
	  }

	  if (defaultExcludes) {
	    defaultExcludes.forEach(item => !includes.has(item) && result.delete(item));
	  }

	  return result;
	}

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isBrowsersQueryValid = isBrowsersQueryValid;
	exports.default = getTargets;
	Object.defineProperty(exports, "unreleasedLabels", {
	  enumerable: true,
	  get: function () {
	    return _targets.unreleasedLabels;
	  }
	});
	Object.defineProperty(exports, "TargetNames", {
	  enumerable: true,
	  get: function () {
	    return _options.TargetNames;
	  }
	});
	Object.defineProperty(exports, "prettifyTargets", {
	  enumerable: true,
	  get: function () {
	    return _pretty.prettifyTargets;
	  }
	});
	Object.defineProperty(exports, "getInclusionReasons", {
	  enumerable: true,
	  get: function () {
	    return _debug.getInclusionReasons;
	  }
	});
	Object.defineProperty(exports, "filterItems", {
	  enumerable: true,
	  get: function () {
	    return _filterItems.default;
	  }
	});
	Object.defineProperty(exports, "isRequired", {
	  enumerable: true,
	  get: function () {
	    return _filterItems.isRequired;
	  }
	});

	var _browserslist = browserslist_1;

	var _helperValidatorOption = lib$a;

	var _nativeModules = nativeModules;

	var _utils = utils$1;

	var _targets = targets;

	var _options = options$1;

	var _pretty = pretty;

	var _debug = debug$2;

	var _filterItems = filterItems$1;

	const ESM_SUPPORT = _nativeModules["es6.module"];
	const v = new _helperValidatorOption.OptionValidator("@babel/helper-compilation-targets");

	function validateTargetNames(targets) {
	  const validTargets = Object.keys(_options.TargetNames);

	  for (const target of Object.keys(targets)) {
	    if (!(target in _options.TargetNames)) {
	      throw new Error(v.formatMessage(`'${target}' is not a valid target
- Did you mean '${(0, _helperValidatorOption.findSuggestion)(target, validTargets)}'?`));
	    }
	  }

	  return targets;
	}

	function isBrowsersQueryValid(browsers) {
	  return typeof browsers === "string" || Array.isArray(browsers) && browsers.every(b => typeof b === "string");
	}

	function validateBrowsers(browsers) {
	  v.invariant(browsers === undefined || isBrowsersQueryValid(browsers), `'${String(browsers)}' is not a valid browserslist query`);
	  return browsers;
	}

	function getLowestVersions(browsers) {
	  return browsers.reduce((all, browser) => {
	    const [browserName, browserVersion] = browser.split(" ");
	    const normalizedBrowserName = _targets.browserNameMap[browserName];

	    if (!normalizedBrowserName) {
	      return all;
	    }

	    try {
	      const splitVersion = browserVersion.split("-")[0].toLowerCase();
	      const isSplitUnreleased = (0, _utils.isUnreleasedVersion)(splitVersion, browserName);

	      if (!all[normalizedBrowserName]) {
	        all[normalizedBrowserName] = isSplitUnreleased ? splitVersion : (0, _utils.semverify)(splitVersion);
	        return all;
	      }

	      const version = all[normalizedBrowserName];
	      const isUnreleased = (0, _utils.isUnreleasedVersion)(version, browserName);

	      if (isUnreleased && isSplitUnreleased) {
	        all[normalizedBrowserName] = (0, _utils.getLowestUnreleased)(version, splitVersion, browserName);
	      } else if (isUnreleased) {
	        all[normalizedBrowserName] = (0, _utils.semverify)(splitVersion);
	      } else if (!isUnreleased && !isSplitUnreleased) {
	        const parsedBrowserVersion = (0, _utils.semverify)(splitVersion);
	        all[normalizedBrowserName] = (0, _utils.semverMin)(version, parsedBrowserVersion);
	      }
	    } catch (e) {}

	    return all;
	  }, {});
	}

	function outputDecimalWarning(decimalTargets) {
	  if (!decimalTargets.length) {
	    return;
	  }

	  console.warn("Warning, the following targets are using a decimal version:\n");
	  decimalTargets.forEach(({
	    target,
	    value
	  }) => console.warn(`  ${target}: ${value}`));
	  console.warn(`
We recommend using a string for minor/patch versions to avoid numbers like 6.10
getting parsed as 6.1, which can lead to unexpected behavior.
`);
	}

	function semverifyTarget(target, value) {
	  try {
	    return (0, _utils.semverify)(value);
	  } catch (error) {
	    throw new Error(v.formatMessage(`'${value}' is not a valid value for 'targets.${target}'.`));
	  }
	}

	const targetParserMap = {
	  __default(target, value) {
	    const version = (0, _utils.isUnreleasedVersion)(value, target) ? value.toLowerCase() : semverifyTarget(target, value);
	    return [target, version];
	  },

	  node(target, value) {
	    const parsed = value === true || value === "current" ? process.versions.node : semverifyTarget(target, value);
	    return [target, parsed];
	  }

	};

	function generateTargets(inputTargets) {
	  const input = Object.assign({}, inputTargets);
	  delete input.esmodules;
	  delete input.browsers;
	  return input;
	}

	function resolveTargets(queries, env) {
	  const resolved = _browserslist(queries, {
	    mobileToDesktop: true,
	    env
	  });

	  return getLowestVersions(resolved);
	}

	function getTargets(inputTargets = {}, options = {}) {
	  var _browsers;

	  let {
	    browsers,
	    esmodules
	  } = inputTargets;
	  const {
	    configPath = "."
	  } = options;
	  validateBrowsers(browsers);
	  const input = generateTargets(inputTargets);
	  let targets = validateTargetNames(input);
	  const shouldParseBrowsers = !!browsers;
	  const hasTargets = shouldParseBrowsers || Object.keys(targets).length > 0;
	  const shouldSearchForConfig = !options.ignoreBrowserslistConfig && !hasTargets;

	  if (!browsers && shouldSearchForConfig) {
	    browsers = _browserslist.loadConfig({
	      config: options.configFile,
	      path: configPath,
	      env: options.browserslistEnv
	    });

	    if (browsers == null) {
	      {
	        browsers = [];
	      }
	    }
	  }

	  if (esmodules && (esmodules !== "intersect" || !((_browsers = browsers) != null && _browsers.length))) {
	    browsers = Object.keys(ESM_SUPPORT).map(browser => `${browser} >= ${ESM_SUPPORT[browser]}`).join(", ");
	    esmodules = false;
	  }

	  if (browsers) {
	    const queryBrowsers = resolveTargets(browsers, options.browserslistEnv);

	    if (esmodules === "intersect") {
	      for (const browser of Object.keys(queryBrowsers)) {
	        const version = queryBrowsers[browser];

	        if (ESM_SUPPORT[browser]) {
	          queryBrowsers[browser] = (0, _utils.getHighestUnreleased)(version, (0, _utils.semverify)(ESM_SUPPORT[browser]), browser);
	        } else {
	          delete queryBrowsers[browser];
	        }
	      }
	    }

	    targets = Object.assign(queryBrowsers, targets);
	  }

	  const result = {};
	  const decimalWarnings = [];

	  for (const target of Object.keys(targets).sort()) {
	    var _targetParserMap$targ;

	    const value = targets[target];

	    if (typeof value === "number" && value % 1 !== 0) {
	      decimalWarnings.push({
	        target,
	        value
	      });
	    }

	    const parser = (_targetParserMap$targ = targetParserMap[target]) != null ? _targetParserMap$targ : targetParserMap.__default;
	    const [parsedTarget, parsedValue] = parser(target, value);

	    if (parsedValue) {
	      result[parsedTarget] = parsedValue;
	    }
	  }

	  outputDecimalWarning(decimalWarnings);
	  return result;
	}
	}(lib$b));

	Object.defineProperty(resolveTargets$1, "__esModule", {
	  value: true
	});
	resolveTargets$1.resolveBrowserslistConfigFile = resolveBrowserslistConfigFile;
	resolveTargets$1.resolveTargets = resolveTargets;

	function _path$5() {
	  const data = require$$0__default['default'];

	  _path$5 = function () {
	    return data;
	  };

	  return data;
	}

	function _helperCompilationTargets$1() {
	  const data = lib$b;

	  _helperCompilationTargets$1 = function () {
	    return data;
	  };

	  return data;
	}

	function resolveBrowserslistConfigFile(browserslistConfigFile, configFileDir) {
	  return _path$5().resolve(configFileDir, browserslistConfigFile);
	}

	function resolveTargets(options, root) {
	  let targets = options.targets;

	  if (typeof targets === "string" || Array.isArray(targets)) {
	    targets = {
	      browsers: targets
	    };
	  }

	  if (targets && targets.esmodules) {
	    targets = Object.assign({}, targets, {
	      esmodules: "intersect"
	    });
	  }

	  const {
	    browserslistConfigFile
	  } = options;
	  let configFile;
	  let ignoreBrowserslistConfig = false;

	  if (typeof browserslistConfigFile === "string") {
	    configFile = browserslistConfigFile;
	  } else {
	    ignoreBrowserslistConfig = browserslistConfigFile === false;
	  }

	  return (0, _helperCompilationTargets$1().default)(targets, {
	    ignoreBrowserslistConfig,
	    configFile,
	    configPath: root,
	    browserslistEnv: options.browserslistEnv
	  });
	}

	Object.defineProperty(configDescriptors, "__esModule", {
	  value: true
	});
	configDescriptors.createCachedDescriptors = createCachedDescriptors;
	configDescriptors.createUncachedDescriptors = createUncachedDescriptors;
	configDescriptors.createDescriptor = createDescriptor;

	function _gensync$7() {
	  const data = gensync;

	  _gensync$7 = function () {
	    return data;
	  };

	  return data;
	}

	var _files$2 = files;

	var _item$2 = item;

	var _caching$2 = caching;

	var _resolveTargets$1 = resolveTargets$1;

	function isEqualDescriptor(a, b) {
	  return a.name === b.name && a.value === b.value && a.options === b.options && a.dirname === b.dirname && a.alias === b.alias && a.ownPass === b.ownPass && (a.file && a.file.request) === (b.file && b.file.request) && (a.file && a.file.resolved) === (b.file && b.file.resolved);
	}

	function* handlerOf(value) {
	  return value;
	}

	function optionsWithResolvedBrowserslistConfigFile(options, dirname) {
	  if (typeof options.browserslistConfigFile === "string") {
	    options.browserslistConfigFile = (0, _resolveTargets$1.resolveBrowserslistConfigFile)(options.browserslistConfigFile, dirname);
	  }

	  return options;
	}

	function createCachedDescriptors(dirname, options, alias) {
	  const {
	    plugins,
	    presets,
	    passPerPreset
	  } = options;
	  return {
	    options: optionsWithResolvedBrowserslistConfigFile(options, dirname),
	    plugins: plugins ? () => createCachedPluginDescriptors(plugins, dirname)(alias) : () => handlerOf([]),
	    presets: presets ? () => createCachedPresetDescriptors(presets, dirname)(alias)(!!passPerPreset) : () => handlerOf([])
	  };
	}

	function createUncachedDescriptors(dirname, options, alias) {
	  let plugins;
	  let presets;
	  return {
	    options: optionsWithResolvedBrowserslistConfigFile(options, dirname),

	    *plugins() {
	      if (!plugins) {
	        plugins = yield* createPluginDescriptors(options.plugins || [], dirname, alias);
	      }

	      return plugins;
	    },

	    *presets() {
	      if (!presets) {
	        presets = yield* createPresetDescriptors(options.presets || [], dirname, alias, !!options.passPerPreset);
	      }

	      return presets;
	    }

	  };
	}

	const PRESET_DESCRIPTOR_CACHE = new WeakMap();
	const createCachedPresetDescriptors = (0, _caching$2.makeWeakCacheSync)((items, cache) => {
	  const dirname = cache.using(dir => dir);
	  return (0, _caching$2.makeStrongCacheSync)(alias => (0, _caching$2.makeStrongCache)(function* (passPerPreset) {
	    const descriptors = yield* createPresetDescriptors(items, dirname, alias, passPerPreset);
	    return descriptors.map(desc => loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc));
	  }));
	});
	const PLUGIN_DESCRIPTOR_CACHE = new WeakMap();
	const createCachedPluginDescriptors = (0, _caching$2.makeWeakCacheSync)((items, cache) => {
	  const dirname = cache.using(dir => dir);
	  return (0, _caching$2.makeStrongCache)(function* (alias) {
	    const descriptors = yield* createPluginDescriptors(items, dirname, alias);
	    return descriptors.map(desc => loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc));
	  });
	});
	const DEFAULT_OPTIONS = {};

	function loadCachedDescriptor(cache, desc) {
	  const {
	    value,
	    options = DEFAULT_OPTIONS
	  } = desc;
	  if (options === false) return desc;
	  let cacheByOptions = cache.get(value);

	  if (!cacheByOptions) {
	    cacheByOptions = new WeakMap();
	    cache.set(value, cacheByOptions);
	  }

	  let possibilities = cacheByOptions.get(options);

	  if (!possibilities) {
	    possibilities = [];
	    cacheByOptions.set(options, possibilities);
	  }

	  if (possibilities.indexOf(desc) === -1) {
	    const matches = possibilities.filter(possibility => isEqualDescriptor(possibility, desc));

	    if (matches.length > 0) {
	      return matches[0];
	    }

	    possibilities.push(desc);
	  }

	  return desc;
	}

	function* createPresetDescriptors(items, dirname, alias, passPerPreset) {
	  return yield* createDescriptors("preset", items, dirname, alias, passPerPreset);
	}

	function* createPluginDescriptors(items, dirname, alias) {
	  return yield* createDescriptors("plugin", items, dirname, alias);
	}

	function* createDescriptors(type, items, dirname, alias, ownPass) {
	  const descriptors = yield* _gensync$7().all(items.map((item, index) => createDescriptor(item, dirname, {
	    type,
	    alias: `${alias}$${index}`,
	    ownPass: !!ownPass
	  })));
	  assertNoDuplicates(descriptors);
	  return descriptors;
	}

	function* createDescriptor(pair, dirname, {
	  type,
	  alias,
	  ownPass
	}) {
	  const desc = (0, _item$2.getItemDescriptor)(pair);

	  if (desc) {
	    return desc;
	  }

	  let name;
	  let options;
	  let value = pair;

	  if (Array.isArray(value)) {
	    if (value.length === 3) {
	      [value, options, name] = value;
	    } else {
	      [value, options] = value;
	    }
	  }

	  let file = undefined;
	  let filepath = null;

	  if (typeof value === "string") {
	    if (typeof type !== "string") {
	      throw new Error("To resolve a string-based item, the type of item must be given");
	    }

	    const resolver = type === "plugin" ? _files$2.loadPlugin : _files$2.loadPreset;
	    const request = value;
	    ({
	      filepath,
	      value
	    } = yield* resolver(value, dirname));
	    file = {
	      request,
	      resolved: filepath
	    };
	  }

	  if (!value) {
	    throw new Error(`Unexpected falsy value: ${String(value)}`);
	  }

	  if (typeof value === "object" && value.__esModule) {
	    if (value.default) {
	      value = value.default;
	    } else {
	      throw new Error("Must export a default export when using ES6 modules.");
	    }
	  }

	  if (typeof value !== "object" && typeof value !== "function") {
	    throw new Error(`Unsupported format: ${typeof value}. Expected an object or a function.`);
	  }

	  if (filepath !== null && typeof value === "object" && value) {
	    throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`);
	  }

	  return {
	    name,
	    alias: filepath || alias,
	    value,
	    options,
	    dirname,
	    ownPass,
	    file
	  };
	}

	function assertNoDuplicates(items) {
	  const map = new Map();

	  for (const item of items) {
	    if (typeof item.value !== "function") continue;
	    let nameMap = map.get(item.value);

	    if (!nameMap) {
	      nameMap = new Set();
	      map.set(item.value, nameMap);
	    }

	    if (nameMap.has(item.name)) {
	      const conflicts = items.filter(i => i.value === item.value);
	      throw new Error([`Duplicate plugin/preset detected.`, `If you'd like to use two separate instances of a plugin,`, `they need separate names, e.g.`, ``, `  plugins: [`, `    ['some-plugin', {}],`, `    ['some-plugin', {}, 'some unique name'],`, `  ]`, ``, `Duplicates detected are:`, `${JSON.stringify(conflicts, null, 2)}`].join("\n"));
	    }

	    nameMap.add(item.name);
	  }
	}

	Object.defineProperty(item, "__esModule", {
	  value: true
	});
	item.createItemFromDescriptor = createItemFromDescriptor;
	item.createConfigItem = createConfigItem;
	item.getItemDescriptor = getItemDescriptor;

	function _path$4() {
	  const data = require$$0__default['default'];

	  _path$4 = function () {
	    return data;
	  };

	  return data;
	}

	var _configDescriptors$1 = configDescriptors;

	function createItemFromDescriptor(desc) {
	  return new ConfigItem(desc);
	}

	function* createConfigItem(value, {
	  dirname = ".",
	  type
	} = {}) {
	  const descriptor = yield* (0, _configDescriptors$1.createDescriptor)(value, _path$4().resolve(dirname), {
	    type,
	    alias: "programmatic item"
	  });
	  return createItemFromDescriptor(descriptor);
	}

	function getItemDescriptor(item) {
	  if (item != null && item[CONFIG_ITEM_BRAND]) {
	    return item._descriptor;
	  }

	  return undefined;
	}

	const CONFIG_ITEM_BRAND = Symbol.for("@babel/core@7 - ConfigItem");

	class ConfigItem {
	  constructor(descriptor) {
	    this._descriptor = void 0;
	    this[CONFIG_ITEM_BRAND] = true;
	    this.value = void 0;
	    this.options = void 0;
	    this.dirname = void 0;
	    this.name = void 0;
	    this.file = void 0;
	    this._descriptor = descriptor;
	    Object.defineProperty(this, "_descriptor", {
	      enumerable: false
	    });
	    Object.defineProperty(this, CONFIG_ITEM_BRAND, {
	      enumerable: false
	    });
	    this.value = this._descriptor.value;
	    this.options = this._descriptor.options;
	    this.dirname = this._descriptor.dirname;
	    this.name = this._descriptor.name;
	    this.file = this._descriptor.file ? {
	      request: this._descriptor.file.request,
	      resolved: this._descriptor.file.resolved
	    } : undefined;
	    Object.freeze(this);
	  }

	}

	Object.freeze(ConfigItem.prototype);

	var configChain = {};

	var options = {};

	var removed = {};

	Object.defineProperty(removed, "__esModule", {
	  value: true
	});
	removed.default = void 0;
	var _default$4 = {
	  auxiliaryComment: {
	    message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`"
	  },
	  blacklist: {
	    message: "Put the specific transforms you want in the `plugins` option"
	  },
	  breakConfig: {
	    message: "This is not a necessary option in Babel 6"
	  },
	  experimental: {
	    message: "Put the specific transforms you want in the `plugins` option"
	  },
	  externalHelpers: {
	    message: "Use the `external-helpers` plugin instead. " + "Check out http://babeljs.io/docs/plugins/external-helpers/"
	  },
	  extra: {
	    message: ""
	  },
	  jsxPragma: {
	    message: "use the `pragma` option in the `react-jsx` plugin. " + "Check out http://babeljs.io/docs/plugins/transform-react-jsx/"
	  },
	  loose: {
	    message: "Specify the `loose` option for the relevant plugin you are using " + "or use a preset that sets the option."
	  },
	  metadataUsedHelpers: {
	    message: "Not required anymore as this is enabled by default"
	  },
	  modules: {
	    message: "Use the corresponding module transform plugin in the `plugins` option. " + "Check out http://babeljs.io/docs/plugins/#modules"
	  },
	  nonStandard: {
	    message: "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. " + "Also check out the react preset http://babeljs.io/docs/plugins/preset-react/"
	  },
	  optional: {
	    message: "Put the specific transforms you want in the `plugins` option"
	  },
	  sourceMapName: {
	    message: "The `sourceMapName` option has been removed because it makes more sense for the " + "tooling that calls Babel to assign `map.file` themselves."
	  },
	  stage: {
	    message: "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets"
	  },
	  whitelist: {
	    message: "Put the specific transforms you want in the `plugins` option"
	  },
	  resolveModuleSource: {
	    version: 6,
	    message: "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options"
	  },
	  metadata: {
	    version: 6,
	    message: "Generated plugin metadata is always included in the output result"
	  },
	  sourceMapTarget: {
	    version: 6,
	    message: "The `sourceMapTarget` option has been removed because it makes more sense for the tooling " + "that calls Babel to assign `map.file` themselves."
	  }
	};
	removed.default = _default$4;

	var optionAssertions = {};

	Object.defineProperty(optionAssertions, "__esModule", {
	  value: true
	});
	optionAssertions.msg = msg;
	optionAssertions.access = access;
	optionAssertions.assertRootMode = assertRootMode;
	optionAssertions.assertSourceMaps = assertSourceMaps;
	optionAssertions.assertCompact = assertCompact;
	optionAssertions.assertSourceType = assertSourceType;
	optionAssertions.assertCallerMetadata = assertCallerMetadata;
	optionAssertions.assertInputSourceMap = assertInputSourceMap;
	optionAssertions.assertString = assertString;
	optionAssertions.assertFunction = assertFunction;
	optionAssertions.assertBoolean = assertBoolean;
	optionAssertions.assertObject = assertObject;
	optionAssertions.assertArray = assertArray;
	optionAssertions.assertIgnoreList = assertIgnoreList;
	optionAssertions.assertConfigApplicableTest = assertConfigApplicableTest;
	optionAssertions.assertConfigFileSearch = assertConfigFileSearch;
	optionAssertions.assertBabelrcSearch = assertBabelrcSearch;
	optionAssertions.assertPluginList = assertPluginList;
	optionAssertions.assertTargets = assertTargets;
	optionAssertions.assertAssumptions = assertAssumptions;

	function _helperCompilationTargets() {
	  const data = lib$b;

	  _helperCompilationTargets = function () {
	    return data;
	  };

	  return data;
	}

	var _options$3 = options;

	function msg(loc) {
	  switch (loc.type) {
	    case "root":
	      return ``;

	    case "env":
	      return `${msg(loc.parent)}.env["${loc.name}"]`;

	    case "overrides":
	      return `${msg(loc.parent)}.overrides[${loc.index}]`;

	    case "option":
	      return `${msg(loc.parent)}.${loc.name}`;

	    case "access":
	      return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;

	    default:
	      throw new Error(`Assertion failure: Unknown type ${loc.type}`);
	  }
	}

	function access(loc, name) {
	  return {
	    type: "access",
	    name,
	    parent: loc
	  };
	}

	function assertRootMode(loc, value) {
	  if (value !== undefined && value !== "root" && value !== "upward" && value !== "upward-optional") {
	    throw new Error(`${msg(loc)} must be a "root", "upward", "upward-optional" or undefined`);
	  }

	  return value;
	}

	function assertSourceMaps(loc, value) {
	  if (value !== undefined && typeof value !== "boolean" && value !== "inline" && value !== "both") {
	    throw new Error(`${msg(loc)} must be a boolean, "inline", "both", or undefined`);
	  }

	  return value;
	}

	function assertCompact(loc, value) {
	  if (value !== undefined && typeof value !== "boolean" && value !== "auto") {
	    throw new Error(`${msg(loc)} must be a boolean, "auto", or undefined`);
	  }

	  return value;
	}

	function assertSourceType(loc, value) {
	  if (value !== undefined && value !== "module" && value !== "script" && value !== "unambiguous") {
	    throw new Error(`${msg(loc)} must be "module", "script", "unambiguous", or undefined`);
	  }

	  return value;
	}

	function assertCallerMetadata(loc, value) {
	  const obj = assertObject(loc, value);

	  if (obj) {
	    if (typeof obj.name !== "string") {
	      throw new Error(`${msg(loc)} set but does not contain "name" property string`);
	    }

	    for (const prop of Object.keys(obj)) {
	      const propLoc = access(loc, prop);
	      const value = obj[prop];

	      if (value != null && typeof value !== "boolean" && typeof value !== "string" && typeof value !== "number") {
	        throw new Error(`${msg(propLoc)} must be null, undefined, a boolean, a string, or a number.`);
	      }
	    }
	  }

	  return value;
	}

	function assertInputSourceMap(loc, value) {
	  if (value !== undefined && typeof value !== "boolean" && (typeof value !== "object" || !value)) {
	    throw new Error(`${msg(loc)} must be a boolean, object, or undefined`);
	  }

	  return value;
	}

	function assertString(loc, value) {
	  if (value !== undefined && typeof value !== "string") {
	    throw new Error(`${msg(loc)} must be a string, or undefined`);
	  }

	  return value;
	}

	function assertFunction(loc, value) {
	  if (value !== undefined && typeof value !== "function") {
	    throw new Error(`${msg(loc)} must be a function, or undefined`);
	  }

	  return value;
	}

	function assertBoolean(loc, value) {
	  if (value !== undefined && typeof value !== "boolean") {
	    throw new Error(`${msg(loc)} must be a boolean, or undefined`);
	  }

	  return value;
	}

	function assertObject(loc, value) {
	  if (value !== undefined && (typeof value !== "object" || Array.isArray(value) || !value)) {
	    throw new Error(`${msg(loc)} must be an object, or undefined`);
	  }

	  return value;
	}

	function assertArray(loc, value) {
	  if (value != null && !Array.isArray(value)) {
	    throw new Error(`${msg(loc)} must be an array, or undefined`);
	  }

	  return value;
	}

	function assertIgnoreList(loc, value) {
	  const arr = assertArray(loc, value);

	  if (arr) {
	    arr.forEach((item, i) => assertIgnoreItem(access(loc, i), item));
	  }

	  return arr;
	}

	function assertIgnoreItem(loc, value) {
	  if (typeof value !== "string" && typeof value !== "function" && !(value instanceof RegExp)) {
	    throw new Error(`${msg(loc)} must be an array of string/Function/RegExp values, or undefined`);
	  }

	  return value;
	}

	function assertConfigApplicableTest(loc, value) {
	  if (value === undefined) return value;

	  if (Array.isArray(value)) {
	    value.forEach((item, i) => {
	      if (!checkValidTest(item)) {
	        throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
	      }
	    });
	  } else if (!checkValidTest(value)) {
	    throw new Error(`${msg(loc)} must be a string/Function/RegExp, or an array of those`);
	  }

	  return value;
	}

	function checkValidTest(value) {
	  return typeof value === "string" || typeof value === "function" || value instanceof RegExp;
	}

	function assertConfigFileSearch(loc, value) {
	  if (value !== undefined && typeof value !== "boolean" && typeof value !== "string") {
	    throw new Error(`${msg(loc)} must be a undefined, a boolean, a string, ` + `got ${JSON.stringify(value)}`);
	  }

	  return value;
	}

	function assertBabelrcSearch(loc, value) {
	  if (value === undefined || typeof value === "boolean") return value;

	  if (Array.isArray(value)) {
	    value.forEach((item, i) => {
	      if (!checkValidTest(item)) {
	        throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
	      }
	    });
	  } else if (!checkValidTest(value)) {
	    throw new Error(`${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp ` + `or an array of those, got ${JSON.stringify(value)}`);
	  }

	  return value;
	}

	function assertPluginList(loc, value) {
	  const arr = assertArray(loc, value);

	  if (arr) {
	    arr.forEach((item, i) => assertPluginItem(access(loc, i), item));
	  }

	  return arr;
	}

	function assertPluginItem(loc, value) {
	  if (Array.isArray(value)) {
	    if (value.length === 0) {
	      throw new Error(`${msg(loc)} must include an object`);
	    }

	    if (value.length > 3) {
	      throw new Error(`${msg(loc)} may only be a two-tuple or three-tuple`);
	    }

	    assertPluginTarget(access(loc, 0), value[0]);

	    if (value.length > 1) {
	      const opts = value[1];

	      if (opts !== undefined && opts !== false && (typeof opts !== "object" || Array.isArray(opts) || opts === null)) {
	        throw new Error(`${msg(access(loc, 1))} must be an object, false, or undefined`);
	      }
	    }

	    if (value.length === 3) {
	      const name = value[2];

	      if (name !== undefined && typeof name !== "string") {
	        throw new Error(`${msg(access(loc, 2))} must be a string, or undefined`);
	      }
	    }
	  } else {
	    assertPluginTarget(loc, value);
	  }

	  return value;
	}

	function assertPluginTarget(loc, value) {
	  if ((typeof value !== "object" || !value) && typeof value !== "string" && typeof value !== "function") {
	    throw new Error(`${msg(loc)} must be a string, object, function`);
	  }

	  return value;
	}

	function assertTargets(loc, value) {
	  if ((0, _helperCompilationTargets().isBrowsersQueryValid)(value)) return value;

	  if (typeof value !== "object" || !value || Array.isArray(value)) {
	    throw new Error(`${msg(loc)} must be a string, an array of strings or an object`);
	  }

	  const browsersLoc = access(loc, "browsers");
	  const esmodulesLoc = access(loc, "esmodules");
	  assertBrowsersList(browsersLoc, value.browsers);
	  assertBoolean(esmodulesLoc, value.esmodules);

	  for (const key of Object.keys(value)) {
	    const val = value[key];
	    const subLoc = access(loc, key);
	    if (key === "esmodules") assertBoolean(subLoc, val);else if (key === "browsers") assertBrowsersList(subLoc, val);else if (!Object.hasOwnProperty.call(_helperCompilationTargets().TargetNames, key)) {
	      const validTargets = Object.keys(_helperCompilationTargets().TargetNames).join(", ");
	      throw new Error(`${msg(subLoc)} is not a valid target. Supported targets are ${validTargets}`);
	    } else assertBrowserVersion(subLoc, val);
	  }

	  return value;
	}

	function assertBrowsersList(loc, value) {
	  if (value !== undefined && !(0, _helperCompilationTargets().isBrowsersQueryValid)(value)) {
	    throw new Error(`${msg(loc)} must be undefined, a string or an array of strings`);
	  }
	}

	function assertBrowserVersion(loc, value) {
	  if (typeof value === "number" && Math.round(value) === value) return;
	  if (typeof value === "string") return;
	  throw new Error(`${msg(loc)} must be a string or an integer number`);
	}

	function assertAssumptions(loc, value) {
	  if (value === undefined) return;

	  if (typeof value !== "object" || value === null) {
	    throw new Error(`${msg(loc)} must be an object or undefined.`);
	  }

	  let root = loc;

	  do {
	    root = root.parent;
	  } while (root.type !== "root");

	  const inPreset = root.source === "preset";

	  for (const name of Object.keys(value)) {
	    const subLoc = access(loc, name);

	    if (!_options$3.assumptionsNames.has(name)) {
	      throw new Error(`${msg(subLoc)} is not a supported assumption.`);
	    }

	    if (typeof value[name] !== "boolean") {
	      throw new Error(`${msg(subLoc)} must be a boolean.`);
	    }

	    if (inPreset && value[name] === false) {
	      throw new Error(`${msg(subLoc)} cannot be set to 'false' inside presets.`);
	    }
	  }

	  return value;
	}

	Object.defineProperty(options, "__esModule", {
	  value: true
	});
	options.validate = validate;
	options.checkNoUnwrappedItemOptionPairs = checkNoUnwrappedItemOptionPairs;
	options.assumptionsNames = void 0;

	var _removed = removed;

	var _optionAssertions$1 = optionAssertions;

	const ROOT_VALIDATORS = {
	  cwd: _optionAssertions$1.assertString,
	  root: _optionAssertions$1.assertString,
	  rootMode: _optionAssertions$1.assertRootMode,
	  configFile: _optionAssertions$1.assertConfigFileSearch,
	  caller: _optionAssertions$1.assertCallerMetadata,
	  filename: _optionAssertions$1.assertString,
	  filenameRelative: _optionAssertions$1.assertString,
	  code: _optionAssertions$1.assertBoolean,
	  ast: _optionAssertions$1.assertBoolean,
	  cloneInputAst: _optionAssertions$1.assertBoolean,
	  envName: _optionAssertions$1.assertString
	};
	const BABELRC_VALIDATORS = {
	  babelrc: _optionAssertions$1.assertBoolean,
	  babelrcRoots: _optionAssertions$1.assertBabelrcSearch
	};
	const NONPRESET_VALIDATORS = {
	  extends: _optionAssertions$1.assertString,
	  ignore: _optionAssertions$1.assertIgnoreList,
	  only: _optionAssertions$1.assertIgnoreList,
	  targets: _optionAssertions$1.assertTargets,
	  browserslistConfigFile: _optionAssertions$1.assertConfigFileSearch,
	  browserslistEnv: _optionAssertions$1.assertString
	};
	const COMMON_VALIDATORS = {
	  inputSourceMap: _optionAssertions$1.assertInputSourceMap,
	  presets: _optionAssertions$1.assertPluginList,
	  plugins: _optionAssertions$1.assertPluginList,
	  passPerPreset: _optionAssertions$1.assertBoolean,
	  assumptions: _optionAssertions$1.assertAssumptions,
	  env: assertEnvSet,
	  overrides: assertOverridesList,
	  test: _optionAssertions$1.assertConfigApplicableTest,
	  include: _optionAssertions$1.assertConfigApplicableTest,
	  exclude: _optionAssertions$1.assertConfigApplicableTest,
	  retainLines: _optionAssertions$1.assertBoolean,
	  comments: _optionAssertions$1.assertBoolean,
	  shouldPrintComment: _optionAssertions$1.assertFunction,
	  compact: _optionAssertions$1.assertCompact,
	  minified: _optionAssertions$1.assertBoolean,
	  auxiliaryCommentBefore: _optionAssertions$1.assertString,
	  auxiliaryCommentAfter: _optionAssertions$1.assertString,
	  sourceType: _optionAssertions$1.assertSourceType,
	  wrapPluginVisitorMethod: _optionAssertions$1.assertFunction,
	  highlightCode: _optionAssertions$1.assertBoolean,
	  sourceMaps: _optionAssertions$1.assertSourceMaps,
	  sourceMap: _optionAssertions$1.assertSourceMaps,
	  sourceFileName: _optionAssertions$1.assertString,
	  sourceRoot: _optionAssertions$1.assertString,
	  parserOpts: _optionAssertions$1.assertObject,
	  generatorOpts: _optionAssertions$1.assertObject
	};
	{
	  Object.assign(COMMON_VALIDATORS, {
	    getModuleId: _optionAssertions$1.assertFunction,
	    moduleRoot: _optionAssertions$1.assertString,
	    moduleIds: _optionAssertions$1.assertBoolean,
	    moduleId: _optionAssertions$1.assertString
	  });
	}
	const assumptionsNames = new Set(["arrayLikeIsIterable", "constantReexports", "constantSuper", "enumerableModuleMeta", "ignoreFunctionLength", "ignoreToPrimitiveHint", "iterableIsArray", "mutableTemplateObject", "noClassCalls", "noDocumentAll", "noIncompleteNsImportDetection", "noNewArrows", "objectRestNoSymbols", "privateFieldsAsProperties", "pureGetters", "setClassMethods", "setComputedProperties", "setPublicClassFields", "setSpreadProperties", "skipForOfIteratorClosing", "superIsCallableConstructor"]);
	options.assumptionsNames = assumptionsNames;

	function getSource(loc) {
	  return loc.type === "root" ? loc.source : getSource(loc.parent);
	}

	function validate(type, opts) {
	  return validateNested({
	    type: "root",
	    source: type
	  }, opts);
	}

	function validateNested(loc, opts) {
	  const type = getSource(loc);
	  assertNoDuplicateSourcemap(opts);
	  Object.keys(opts).forEach(key => {
	    const optLoc = {
	      type: "option",
	      name: key,
	      parent: loc
	    };

	    if (type === "preset" && NONPRESET_VALIDATORS[key]) {
	      throw new Error(`${(0, _optionAssertions$1.msg)(optLoc)} is not allowed in preset options`);
	    }

	    if (type !== "arguments" && ROOT_VALIDATORS[key]) {
	      throw new Error(`${(0, _optionAssertions$1.msg)(optLoc)} is only allowed in root programmatic options`);
	    }

	    if (type !== "arguments" && type !== "configfile" && BABELRC_VALIDATORS[key]) {
	      if (type === "babelrcfile" || type === "extendsfile") {
	        throw new Error(`${(0, _optionAssertions$1.msg)(optLoc)} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, ` + `or babel.config.js/config file options`);
	      }

	      throw new Error(`${(0, _optionAssertions$1.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);
	    }

	    const validator = COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError;
	    validator(optLoc, opts[key]);
	  });
	  return opts;
	}

	function throwUnknownError(loc) {
	  const key = loc.name;

	  if (_removed.default[key]) {
	    const {
	      message,
	      version = 5
	    } = _removed.default[key];
	    throw new Error(`Using removed Babel ${version} option: ${(0, _optionAssertions$1.msg)(loc)} - ${message}`);
	  } else {
	    const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions$1.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);
	    unknownOptErr.code = "BABEL_UNKNOWN_OPTION";
	    throw unknownOptErr;
	  }
	}

	function has$1(obj, key) {
	  return Object.prototype.hasOwnProperty.call(obj, key);
	}

	function assertNoDuplicateSourcemap(opts) {
	  if (has$1(opts, "sourceMap") && has$1(opts, "sourceMaps")) {
	    throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both");
	  }
	}

	function assertEnvSet(loc, value) {
	  if (loc.parent.type === "env") {
	    throw new Error(`${(0, _optionAssertions$1.msg)(loc)} is not allowed inside of another .env block`);
	  }

	  const parent = loc.parent;
	  const obj = (0, _optionAssertions$1.assertObject)(loc, value);

	  if (obj) {
	    for (const envName of Object.keys(obj)) {
	      const env = (0, _optionAssertions$1.assertObject)((0, _optionAssertions$1.access)(loc, envName), obj[envName]);
	      if (!env) continue;
	      const envLoc = {
	        type: "env",
	        name: envName,
	        parent
	      };
	      validateNested(envLoc, env);
	    }
	  }

	  return obj;
	}

	function assertOverridesList(loc, value) {
	  if (loc.parent.type === "env") {
	    throw new Error(`${(0, _optionAssertions$1.msg)(loc)} is not allowed inside an .env block`);
	  }

	  if (loc.parent.type === "overrides") {
	    throw new Error(`${(0, _optionAssertions$1.msg)(loc)} is not allowed inside an .overrides block`);
	  }

	  const parent = loc.parent;
	  const arr = (0, _optionAssertions$1.assertArray)(loc, value);

	  if (arr) {
	    for (const [index, item] of arr.entries()) {
	      const objLoc = (0, _optionAssertions$1.access)(loc, index);
	      const env = (0, _optionAssertions$1.assertObject)(objLoc, item);
	      if (!env) throw new Error(`${(0, _optionAssertions$1.msg)(objLoc)} must be an object`);
	      const overridesLoc = {
	        type: "overrides",
	        index,
	        parent
	      };
	      validateNested(overridesLoc, env);
	    }
	  }

	  return arr;
	}

	function checkNoUnwrappedItemOptionPairs(items, index, type, e) {
	  if (index === 0) return;
	  const lastItem = items[index - 1];
	  const thisItem = items[index];

	  if (lastItem.file && lastItem.options === undefined && typeof thisItem.value === "object") {
	    e.message += `\n- Maybe you meant to use\n` + `"${type}s": [\n  ["${lastItem.file.request}", ${JSON.stringify(thisItem.value, undefined, 2)}]\n]\n` + `To be a valid ${type}, its name and options should be wrapped in a pair of brackets`;
	  }
	}

	var printer = {};

	Object.defineProperty(printer, "__esModule", {
	  value: true
	});
	printer.ConfigPrinter = printer.ChainFormatter = void 0;

	function _gensync$6() {
	  const data = gensync;

	  _gensync$6 = function () {
	    return data;
	  };

	  return data;
	}

	const ChainFormatter = {
	  Programmatic: 0,
	  Config: 1
	};
	printer.ChainFormatter = ChainFormatter;
	const Formatter = {
	  title(type, callerName, filepath) {
	    let title = "";

	    if (type === ChainFormatter.Programmatic) {
	      title = "programmatic options";

	      if (callerName) {
	        title += " from " + callerName;
	      }
	    } else {
	      title = "config " + filepath;
	    }

	    return title;
	  },

	  loc(index, envName) {
	    let loc = "";

	    if (index != null) {
	      loc += `.overrides[${index}]`;
	    }

	    if (envName != null) {
	      loc += `.env["${envName}"]`;
	    }

	    return loc;
	  },

	  *optionsAndDescriptors(opt) {
	    const content = Object.assign({}, opt.options);
	    delete content.overrides;
	    delete content.env;
	    const pluginDescriptors = [...(yield* opt.plugins())];

	    if (pluginDescriptors.length) {
	      content.plugins = pluginDescriptors.map(d => descriptorToConfig(d));
	    }

	    const presetDescriptors = [...(yield* opt.presets())];

	    if (presetDescriptors.length) {
	      content.presets = [...presetDescriptors].map(d => descriptorToConfig(d));
	    }

	    return JSON.stringify(content, undefined, 2);
	  }

	};

	function descriptorToConfig(d) {
	  var _d$file;

	  let name = (_d$file = d.file) == null ? void 0 : _d$file.request;

	  if (name == null) {
	    if (typeof d.value === "object") {
	      name = d.value;
	    } else if (typeof d.value === "function") {
	      name = `[Function: ${d.value.toString().substr(0, 50)} ... ]`;
	    }
	  }

	  if (name == null) {
	    name = "[Unknown]";
	  }

	  if (d.options === undefined) {
	    return name;
	  } else if (d.name == null) {
	    return [name, d.options];
	  } else {
	    return [name, d.options, d.name];
	  }
	}

	class ConfigPrinter {
	  constructor() {
	    this._stack = [];
	  }

	  configure(enabled, type, {
	    callerName,
	    filepath
	  }) {
	    if (!enabled) return () => {};
	    return (content, index, envName) => {
	      this._stack.push({
	        type,
	        callerName,
	        filepath,
	        content,
	        index,
	        envName
	      });
	    };
	  }

	  static *format(config) {
	    let title = Formatter.title(config.type, config.callerName, config.filepath);
	    const loc = Formatter.loc(config.index, config.envName);
	    if (loc) title += ` ${loc}`;
	    const content = yield* Formatter.optionsAndDescriptors(config.content);
	    return `${title}\n${content}`;
	  }

	  *output() {
	    if (this._stack.length === 0) return "";
	    const configs = yield* _gensync$6().all(this._stack.map(s => ConfigPrinter.format(s)));
	    return configs.join("\n\n");
	  }

	}

	printer.ConfigPrinter = ConfigPrinter;

	Object.defineProperty(configChain, "__esModule", {
	  value: true
	});
	configChain.buildPresetChain = buildPresetChain;
	configChain.buildRootChain = buildRootChain;
	configChain.buildPresetChainWalker = void 0;

	function _path$3() {
	  const data = require$$0__default['default'];

	  _path$3 = function () {
	    return data;
	  };

	  return data;
	}

	function _debug$1() {
	  const data = src.exports;

	  _debug$1 = function () {
	    return data;
	  };

	  return data;
	}

	var _options$2 = options;

	var _patternToRegex = patternToRegex;

	var _printer = printer;

	var _files$1 = files;

	var _caching$1 = caching;

	var _configDescriptors = configDescriptors;

	const debug$1 = _debug$1()("babel:config:config-chain");

	function* buildPresetChain(arg, context) {
	  const chain = yield* buildPresetChainWalker(arg, context);
	  if (!chain) return null;
	  return {
	    plugins: dedupDescriptors(chain.plugins),
	    presets: dedupDescriptors(chain.presets),
	    options: chain.options.map(o => normalizeOptions$1(o)),
	    files: new Set()
	  };
	}

	const buildPresetChainWalker = makeChainWalker({
	  root: preset => loadPresetDescriptors(preset),
	  env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName),
	  overrides: (preset, index) => loadPresetOverridesDescriptors(preset)(index),
	  overridesEnv: (preset, index, envName) => loadPresetOverridesEnvDescriptors(preset)(index)(envName),
	  createLogger: () => () => {}
	});
	configChain.buildPresetChainWalker = buildPresetChainWalker;
	const loadPresetDescriptors = (0, _caching$1.makeWeakCacheSync)(preset => buildRootDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors));
	const loadPresetEnvDescriptors = (0, _caching$1.makeWeakCacheSync)(preset => (0, _caching$1.makeStrongCacheSync)(envName => buildEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, envName)));
	const loadPresetOverridesDescriptors = (0, _caching$1.makeWeakCacheSync)(preset => (0, _caching$1.makeStrongCacheSync)(index => buildOverrideDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index)));
	const loadPresetOverridesEnvDescriptors = (0, _caching$1.makeWeakCacheSync)(preset => (0, _caching$1.makeStrongCacheSync)(index => (0, _caching$1.makeStrongCacheSync)(envName => buildOverrideEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index, envName))));

	function* buildRootChain(opts, context) {
	  let configReport, babelRcReport;
	  const programmaticLogger = new _printer.ConfigPrinter();
	  const programmaticChain = yield* loadProgrammaticChain({
	    options: opts,
	    dirname: context.cwd
	  }, context, undefined, programmaticLogger);
	  if (!programmaticChain) return null;
	  const programmaticReport = yield* programmaticLogger.output();
	  let configFile;

	  if (typeof opts.configFile === "string") {
	    configFile = yield* (0, _files$1.loadConfig)(opts.configFile, context.cwd, context.envName, context.caller);
	  } else if (opts.configFile !== false) {
	    configFile = yield* (0, _files$1.findRootConfig)(context.root, context.envName, context.caller);
	  }

	  let {
	    babelrc,
	    babelrcRoots
	  } = opts;
	  let babelrcRootsDirectory = context.cwd;
	  const configFileChain = emptyChain();
	  const configFileLogger = new _printer.ConfigPrinter();

	  if (configFile) {
	    const validatedFile = validateConfigFile(configFile);
	    const result = yield* loadFileChain(validatedFile, context, undefined, configFileLogger);
	    if (!result) return null;
	    configReport = yield* configFileLogger.output();

	    if (babelrc === undefined) {
	      babelrc = validatedFile.options.babelrc;
	    }

	    if (babelrcRoots === undefined) {
	      babelrcRootsDirectory = validatedFile.dirname;
	      babelrcRoots = validatedFile.options.babelrcRoots;
	    }

	    mergeChain(configFileChain, result);
	  }

	  let ignoreFile, babelrcFile;
	  let isIgnored = false;
	  const fileChain = emptyChain();

	  if ((babelrc === true || babelrc === undefined) && typeof context.filename === "string") {
	    const pkgData = yield* (0, _files$1.findPackageData)(context.filename);

	    if (pkgData && babelrcLoadEnabled(context, pkgData, babelrcRoots, babelrcRootsDirectory)) {
	      ({
	        ignore: ignoreFile,
	        config: babelrcFile
	      } = yield* (0, _files$1.findRelativeConfig)(pkgData, context.envName, context.caller));

	      if (ignoreFile) {
	        fileChain.files.add(ignoreFile.filepath);
	      }

	      if (ignoreFile && shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname)) {
	        isIgnored = true;
	      }

	      if (babelrcFile && !isIgnored) {
	        const validatedFile = validateBabelrcFile(babelrcFile);
	        const babelrcLogger = new _printer.ConfigPrinter();
	        const result = yield* loadFileChain(validatedFile, context, undefined, babelrcLogger);

	        if (!result) {
	          isIgnored = true;
	        } else {
	          babelRcReport = yield* babelrcLogger.output();
	          mergeChain(fileChain, result);
	        }
	      }

	      if (babelrcFile && isIgnored) {
	        fileChain.files.add(babelrcFile.filepath);
	      }
	    }
	  }

	  if (context.showConfig) {
	    console.log(`Babel configs on "${context.filename}" (ascending priority):\n` + [configReport, babelRcReport, programmaticReport].filter(x => !!x).join("\n\n") + "\n-----End Babel configs-----");
	  }

	  const chain = mergeChain(mergeChain(mergeChain(emptyChain(), configFileChain), fileChain), programmaticChain);
	  return {
	    plugins: isIgnored ? [] : dedupDescriptors(chain.plugins),
	    presets: isIgnored ? [] : dedupDescriptors(chain.presets),
	    options: isIgnored ? [] : chain.options.map(o => normalizeOptions$1(o)),
	    fileHandling: isIgnored ? "ignored" : "transpile",
	    ignore: ignoreFile || undefined,
	    babelrc: babelrcFile || undefined,
	    config: configFile || undefined,
	    files: chain.files
	  };
	}

	function babelrcLoadEnabled(context, pkgData, babelrcRoots, babelrcRootsDirectory) {
	  if (typeof babelrcRoots === "boolean") return babelrcRoots;
	  const absoluteRoot = context.root;

	  if (babelrcRoots === undefined) {
	    return pkgData.directories.indexOf(absoluteRoot) !== -1;
	  }

	  let babelrcPatterns = babelrcRoots;

	  if (!Array.isArray(babelrcPatterns)) {
	    babelrcPatterns = [babelrcPatterns];
	  }

	  babelrcPatterns = babelrcPatterns.map(pat => {
	    return typeof pat === "string" ? _path$3().resolve(babelrcRootsDirectory, pat) : pat;
	  });

	  if (babelrcPatterns.length === 1 && babelrcPatterns[0] === absoluteRoot) {
	    return pkgData.directories.indexOf(absoluteRoot) !== -1;
	  }

	  return babelrcPatterns.some(pat => {
	    if (typeof pat === "string") {
	      pat = (0, _patternToRegex.default)(pat, babelrcRootsDirectory);
	    }

	    return pkgData.directories.some(directory => {
	      return matchPattern(pat, babelrcRootsDirectory, directory, context);
	    });
	  });
	}

	const validateConfigFile = (0, _caching$1.makeWeakCacheSync)(file => ({
	  filepath: file.filepath,
	  dirname: file.dirname,
	  options: (0, _options$2.validate)("configfile", file.options)
	}));
	const validateBabelrcFile = (0, _caching$1.makeWeakCacheSync)(file => ({
	  filepath: file.filepath,
	  dirname: file.dirname,
	  options: (0, _options$2.validate)("babelrcfile", file.options)
	}));
	const validateExtendFile = (0, _caching$1.makeWeakCacheSync)(file => ({
	  filepath: file.filepath,
	  dirname: file.dirname,
	  options: (0, _options$2.validate)("extendsfile", file.options)
	}));
	const loadProgrammaticChain = makeChainWalker({
	  root: input => buildRootDescriptors(input, "base", _configDescriptors.createCachedDescriptors),
	  env: (input, envName) => buildEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, envName),
	  overrides: (input, index) => buildOverrideDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index),
	  overridesEnv: (input, index, envName) => buildOverrideEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index, envName),
	  createLogger: (input, context, baseLogger) => buildProgrammaticLogger(input, context, baseLogger)
	});
	const loadFileChainWalker = makeChainWalker({
	  root: file => loadFileDescriptors(file),
	  env: (file, envName) => loadFileEnvDescriptors(file)(envName),
	  overrides: (file, index) => loadFileOverridesDescriptors(file)(index),
	  overridesEnv: (file, index, envName) => loadFileOverridesEnvDescriptors(file)(index)(envName),
	  createLogger: (file, context, baseLogger) => buildFileLogger(file.filepath, context, baseLogger)
	});

	function* loadFileChain(input, context, files, baseLogger) {
	  const chain = yield* loadFileChainWalker(input, context, files, baseLogger);

	  if (chain) {
	    chain.files.add(input.filepath);
	  }

	  return chain;
	}

	const loadFileDescriptors = (0, _caching$1.makeWeakCacheSync)(file => buildRootDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors));
	const loadFileEnvDescriptors = (0, _caching$1.makeWeakCacheSync)(file => (0, _caching$1.makeStrongCacheSync)(envName => buildEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, envName)));
	const loadFileOverridesDescriptors = (0, _caching$1.makeWeakCacheSync)(file => (0, _caching$1.makeStrongCacheSync)(index => buildOverrideDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index)));
	const loadFileOverridesEnvDescriptors = (0, _caching$1.makeWeakCacheSync)(file => (0, _caching$1.makeStrongCacheSync)(index => (0, _caching$1.makeStrongCacheSync)(envName => buildOverrideEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index, envName))));

	function buildFileLogger(filepath, context, baseLogger) {
	  if (!baseLogger) {
	    return () => {};
	  }

	  return baseLogger.configure(context.showConfig, _printer.ChainFormatter.Config, {
	    filepath
	  });
	}

	function buildRootDescriptors({
	  dirname,
	  options
	}, alias, descriptors) {
	  return descriptors(dirname, options, alias);
	}

	function buildProgrammaticLogger(_, context, baseLogger) {
	  var _context$caller;

	  if (!baseLogger) {
	    return () => {};
	  }

	  return baseLogger.configure(context.showConfig, _printer.ChainFormatter.Programmatic, {
	    callerName: (_context$caller = context.caller) == null ? void 0 : _context$caller.name
	  });
	}

	function buildEnvDescriptors({
	  dirname,
	  options
	}, alias, descriptors, envName) {
	  const opts = options.env && options.env[envName];
	  return opts ? descriptors(dirname, opts, `${alias}.env["${envName}"]`) : null;
	}

	function buildOverrideDescriptors({
	  dirname,
	  options
	}, alias, descriptors, index) {
	  const opts = options.overrides && options.overrides[index];
	  if (!opts) throw new Error("Assertion failure - missing override");
	  return descriptors(dirname, opts, `${alias}.overrides[${index}]`);
	}

	function buildOverrideEnvDescriptors({
	  dirname,
	  options
	}, alias, descriptors, index, envName) {
	  const override = options.overrides && options.overrides[index];
	  if (!override) throw new Error("Assertion failure - missing override");
	  const opts = override.env && override.env[envName];
	  return opts ? descriptors(dirname, opts, `${alias}.overrides[${index}].env["${envName}"]`) : null;
	}

	function makeChainWalker({
	  root,
	  env,
	  overrides,
	  overridesEnv,
	  createLogger
	}) {
	  return function* (input, context, files = new Set(), baseLogger) {
	    const {
	      dirname
	    } = input;
	    const flattenedConfigs = [];
	    const rootOpts = root(input);

	    if (configIsApplicable(rootOpts, dirname, context)) {
	      flattenedConfigs.push({
	        config: rootOpts,
	        envName: undefined,
	        index: undefined
	      });
	      const envOpts = env(input, context.envName);

	      if (envOpts && configIsApplicable(envOpts, dirname, context)) {
	        flattenedConfigs.push({
	          config: envOpts,
	          envName: context.envName,
	          index: undefined
	        });
	      }

	      (rootOpts.options.overrides || []).forEach((_, index) => {
	        const overrideOps = overrides(input, index);

	        if (configIsApplicable(overrideOps, dirname, context)) {
	          flattenedConfigs.push({
	            config: overrideOps,
	            index,
	            envName: undefined
	          });
	          const overrideEnvOpts = overridesEnv(input, index, context.envName);

	          if (overrideEnvOpts && configIsApplicable(overrideEnvOpts, dirname, context)) {
	            flattenedConfigs.push({
	              config: overrideEnvOpts,
	              index,
	              envName: context.envName
	            });
	          }
	        }
	      });
	    }

	    if (flattenedConfigs.some(({
	      config: {
	        options: {
	          ignore,
	          only
	        }
	      }
	    }) => shouldIgnore(context, ignore, only, dirname))) {
	      return null;
	    }

	    const chain = emptyChain();
	    const logger = createLogger(input, context, baseLogger);

	    for (const {
	      config,
	      index,
	      envName
	    } of flattenedConfigs) {
	      if (!(yield* mergeExtendsChain(chain, config.options, dirname, context, files, baseLogger))) {
	        return null;
	      }

	      logger(config, index, envName);
	      yield* mergeChainOpts(chain, config);
	    }

	    return chain;
	  };
	}

	function* mergeExtendsChain(chain, opts, dirname, context, files, baseLogger) {
	  if (opts.extends === undefined) return true;
	  const file = yield* (0, _files$1.loadConfig)(opts.extends, dirname, context.envName, context.caller);

	  if (files.has(file)) {
	    throw new Error(`Configuration cycle detected loading ${file.filepath}.\n` + `File already loaded following the config chain:\n` + Array.from(files, file => ` - ${file.filepath}`).join("\n"));
	  }

	  files.add(file);
	  const fileChain = yield* loadFileChain(validateExtendFile(file), context, files, baseLogger);
	  files.delete(file);
	  if (!fileChain) return false;
	  mergeChain(chain, fileChain);
	  return true;
	}

	function mergeChain(target, source) {
	  target.options.push(...source.options);
	  target.plugins.push(...source.plugins);
	  target.presets.push(...source.presets);

	  for (const file of source.files) {
	    target.files.add(file);
	  }

	  return target;
	}

	function* mergeChainOpts(target, {
	  options,
	  plugins,
	  presets
	}) {
	  target.options.push(options);
	  target.plugins.push(...(yield* plugins()));
	  target.presets.push(...(yield* presets()));
	  return target;
	}

	function emptyChain() {
	  return {
	    options: [],
	    presets: [],
	    plugins: [],
	    files: new Set()
	  };
	}

	function normalizeOptions$1(opts) {
	  const options = Object.assign({}, opts);
	  delete options.extends;
	  delete options.env;
	  delete options.overrides;
	  delete options.plugins;
	  delete options.presets;
	  delete options.passPerPreset;
	  delete options.ignore;
	  delete options.only;
	  delete options.test;
	  delete options.include;
	  delete options.exclude;

	  if (Object.prototype.hasOwnProperty.call(options, "sourceMap")) {
	    options.sourceMaps = options.sourceMap;
	    delete options.sourceMap;
	  }

	  return options;
	}

	function dedupDescriptors(items) {
	  const map = new Map();
	  const descriptors = [];

	  for (const item of items) {
	    if (typeof item.value === "function") {
	      const fnKey = item.value;
	      let nameMap = map.get(fnKey);

	      if (!nameMap) {
	        nameMap = new Map();
	        map.set(fnKey, nameMap);
	      }

	      let desc = nameMap.get(item.name);

	      if (!desc) {
	        desc = {
	          value: item
	        };
	        descriptors.push(desc);
	        if (!item.ownPass) nameMap.set(item.name, desc);
	      } else {
	        desc.value = item;
	      }
	    } else {
	      descriptors.push({
	        value: item
	      });
	    }
	  }

	  return descriptors.reduce((acc, desc) => {
	    acc.push(desc.value);
	    return acc;
	  }, []);
	}

	function configIsApplicable({
	  options
	}, dirname, context) {
	  return (options.test === undefined || configFieldIsApplicable(context, options.test, dirname)) && (options.include === undefined || configFieldIsApplicable(context, options.include, dirname)) && (options.exclude === undefined || !configFieldIsApplicable(context, options.exclude, dirname));
	}

	function configFieldIsApplicable(context, test, dirname) {
	  const patterns = Array.isArray(test) ? test : [test];
	  return matchesPatterns(context, patterns, dirname);
	}

	function shouldIgnore(context, ignore, only, dirname) {
	  if (ignore && matchesPatterns(context, ignore, dirname)) {
	    var _context$filename;

	    const message = `No config is applied to "${(_context$filename = context.filename) != null ? _context$filename : "(unknown)"}" because it matches one of \`ignore: ${JSON.stringify(ignore)}\` from "${dirname}"`;
	    debug$1(message);

	    if (context.showConfig) {
	      console.log(message);
	    }

	    return true;
	  }

	  if (only && !matchesPatterns(context, only, dirname)) {
	    var _context$filename2;

	    const message = `No config is applied to "${(_context$filename2 = context.filename) != null ? _context$filename2 : "(unknown)"}" because it fails to match one of \`only: ${JSON.stringify(only)}\` from "${dirname}"`;
	    debug$1(message);

	    if (context.showConfig) {
	      console.log(message);
	    }

	    return true;
	  }

	  return false;
	}

	function matchesPatterns(context, patterns, dirname) {
	  return patterns.some(pattern => matchPattern(pattern, dirname, context.filename, context));
	}

	function matchPattern(pattern, dirname, pathToTest, context) {
	  if (typeof pattern === "function") {
	    return !!pattern(pathToTest, {
	      dirname,
	      envName: context.envName,
	      caller: context.caller
	    });
	  }

	  if (typeof pathToTest !== "string") {
	    throw new Error(`Configuration contains string/RegExp pattern, but no filename was passed to Babel`);
	  }

	  if (typeof pattern === "string") {
	    pattern = (0, _patternToRegex.default)(pattern, dirname);
	  }

	  return pattern.test(pathToTest);
	}

	var plugins = {};

	Object.defineProperty(plugins, "__esModule", {
	  value: true
	});
	plugins.validatePluginObject = validatePluginObject;

	var _optionAssertions = optionAssertions;

	const VALIDATORS = {
	  name: _optionAssertions.assertString,
	  manipulateOptions: _optionAssertions.assertFunction,
	  pre: _optionAssertions.assertFunction,
	  post: _optionAssertions.assertFunction,
	  inherits: _optionAssertions.assertFunction,
	  visitor: assertVisitorMap,
	  parserOverride: _optionAssertions.assertFunction,
	  generatorOverride: _optionAssertions.assertFunction
	};

	function assertVisitorMap(loc, value) {
	  const obj = (0, _optionAssertions.assertObject)(loc, value);

	  if (obj) {
	    Object.keys(obj).forEach(prop => assertVisitorHandler(prop, obj[prop]));

	    if (obj.enter || obj.exit) {
	      throw new Error(`${(0, _optionAssertions.msg)(loc)} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);
	    }
	  }

	  return obj;
	}

	function assertVisitorHandler(key, value) {
	  if (value && typeof value === "object") {
	    Object.keys(value).forEach(handler => {
	      if (handler !== "enter" && handler !== "exit") {
	        throw new Error(`.visitor["${key}"] may only have .enter and/or .exit handlers.`);
	      }
	    });
	  } else if (typeof value !== "function") {
	    throw new Error(`.visitor["${key}"] must be a function`);
	  }

	  return value;
	}

	function validatePluginObject(obj) {
	  const rootPath = {
	    type: "root",
	    source: "plugin"
	  };
	  Object.keys(obj).forEach(key => {
	    const validator = VALIDATORS[key];

	    if (validator) {
	      const optLoc = {
	        type: "option",
	        name: key,
	        parent: rootPath
	      };
	      validator(optLoc, obj[key]);
	    } else {
	      const invalidPluginPropertyError = new Error(`.${key} is not a valid Plugin property`);
	      invalidPluginPropertyError.code = "BABEL_UNKNOWN_PLUGIN_PROPERTY";
	      throw invalidPluginPropertyError;
	    }
	  });
	  return obj;
	}

	var partial = {};

	Object.defineProperty(partial, "__esModule", {
	  value: true
	});
	partial.default = loadPrivatePartialConfig;
	partial.loadPartialConfig = void 0;

	function _path$2() {
	  const data = require$$0__default['default'];

	  _path$2 = function () {
	    return data;
	  };

	  return data;
	}

	function _gensync$5() {
	  const data = gensync;

	  _gensync$5 = function () {
	    return data;
	  };

	  return data;
	}

	var _plugin$2 = plugin;

	var _util$1 = util$7;

	var _item$1 = item;

	var _configChain$1 = configChain;

	var _environment = environment;

	var _options$1 = options;

	var _files = files;

	var _resolveTargets = resolveTargets$1;

	const _excluded = ["showIgnoredFiles"];

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function resolveRootMode(rootDir, rootMode) {
	  switch (rootMode) {
	    case "root":
	      return rootDir;

	    case "upward-optional":
	      {
	        const upwardRootDir = (0, _files.findConfigUpwards)(rootDir);
	        return upwardRootDir === null ? rootDir : upwardRootDir;
	      }

	    case "upward":
	      {
	        const upwardRootDir = (0, _files.findConfigUpwards)(rootDir);
	        if (upwardRootDir !== null) return upwardRootDir;
	        throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not ` + `be found when searching upward from "${rootDir}".\n` + `One of the following config files must be in the directory tree: ` + `"${_files.ROOT_CONFIG_FILENAMES.join(", ")}".`), {
	          code: "BABEL_ROOT_NOT_FOUND",
	          dirname: rootDir
	        });
	      }

	    default:
	      throw new Error(`Assertion failure - unknown rootMode value.`);
	  }
	}

	function* loadPrivatePartialConfig(inputOpts) {
	  if (inputOpts != null && (typeof inputOpts !== "object" || Array.isArray(inputOpts))) {
	    throw new Error("Babel options must be an object, null, or undefined");
	  }

	  const args = inputOpts ? (0, _options$1.validate)("arguments", inputOpts) : {};
	  const {
	    envName = (0, _environment.getEnv)(),
	    cwd = ".",
	    root: rootDir = ".",
	    rootMode = "root",
	    caller,
	    cloneInputAst = true
	  } = args;

	  const absoluteCwd = _path$2().resolve(cwd);

	  const absoluteRootDir = resolveRootMode(_path$2().resolve(absoluteCwd, rootDir), rootMode);
	  const filename = typeof args.filename === "string" ? _path$2().resolve(cwd, args.filename) : undefined;
	  const showConfigPath = yield* (0, _files.resolveShowConfigPath)(absoluteCwd);
	  const context = {
	    filename,
	    cwd: absoluteCwd,
	    root: absoluteRootDir,
	    envName,
	    caller,
	    showConfig: showConfigPath === filename
	  };
	  const configChain = yield* (0, _configChain$1.buildRootChain)(args, context);
	  if (!configChain) return null;
	  const merged = {
	    assumptions: {}
	  };
	  configChain.options.forEach(opts => {
	    (0, _util$1.mergeOptions)(merged, opts);
	  });
	  const options = Object.assign({}, merged, {
	    targets: (0, _resolveTargets.resolveTargets)(merged, absoluteRootDir),
	    cloneInputAst,
	    babelrc: false,
	    configFile: false,
	    browserslistConfigFile: false,
	    passPerPreset: false,
	    envName: context.envName,
	    cwd: context.cwd,
	    root: context.root,
	    rootMode: "root",
	    filename: typeof context.filename === "string" ? context.filename : undefined,
	    plugins: configChain.plugins.map(descriptor => (0, _item$1.createItemFromDescriptor)(descriptor)),
	    presets: configChain.presets.map(descriptor => (0, _item$1.createItemFromDescriptor)(descriptor))
	  });
	  return {
	    options,
	    context,
	    fileHandling: configChain.fileHandling,
	    ignore: configChain.ignore,
	    babelrc: configChain.babelrc,
	    config: configChain.config,
	    files: configChain.files
	  };
	}

	const loadPartialConfig = _gensync$5()(function* (opts) {
	  let showIgnoredFiles = false;

	  if (typeof opts === "object" && opts !== null && !Array.isArray(opts)) {
	    var _opts = opts;
	    ({
	      showIgnoredFiles
	    } = _opts);
	    opts = _objectWithoutPropertiesLoose(_opts, _excluded);
	  }

	  const result = yield* loadPrivatePartialConfig(opts);
	  if (!result) return null;
	  const {
	    options,
	    babelrc,
	    ignore,
	    config,
	    fileHandling,
	    files
	  } = result;

	  if (fileHandling === "ignored" && !showIgnoredFiles) {
	    return null;
	  }

	  (options.plugins || []).forEach(item => {
	    if (item.value instanceof _plugin$2.default) {
	      throw new Error("Passing cached plugin instances is not supported in " + "babel.loadPartialConfig()");
	    }
	  });
	  return new PartialConfig(options, babelrc ? babelrc.filepath : undefined, ignore ? ignore.filepath : undefined, config ? config.filepath : undefined, fileHandling, files);
	});

	partial.loadPartialConfig = loadPartialConfig;

	class PartialConfig {
	  constructor(options, babelrc, ignore, config, fileHandling, files) {
	    this.options = void 0;
	    this.babelrc = void 0;
	    this.babelignore = void 0;
	    this.config = void 0;
	    this.fileHandling = void 0;
	    this.files = void 0;
	    this.options = options;
	    this.babelignore = ignore;
	    this.babelrc = babelrc;
	    this.config = config;
	    this.fileHandling = fileHandling;
	    this.files = files;
	    Object.freeze(this);
	  }

	  hasFilesystemConfig() {
	    return this.babelrc !== undefined || this.config !== undefined;
	  }

	}

	Object.freeze(PartialConfig.prototype);

	Object.defineProperty(full, "__esModule", {
	  value: true
	});
	full.default = void 0;

	function _gensync$4() {
	  const data = gensync;

	  _gensync$4 = function () {
	    return data;
	  };

	  return data;
	}

	var _async = async;

	var _util = util$7;

	var context = lib$v;

	var _plugin$1 = plugin;

	var _item = item;

	var _configChain = configChain;

	function _traverse$2() {
	  const data = lib$t;

	  _traverse$2 = function () {
	    return data;
	  };

	  return data;
	}

	var _caching = caching;

	var _options = options;

	var _plugins = plugins;

	var _configApi = configApi;

	var _partial = partial;

	var _default$3 = _gensync$4()(function* loadFullConfig(inputOpts) {
	  var _opts$assumptions;

	  const result = yield* (0, _partial.default)(inputOpts);

	  if (!result) {
	    return null;
	  }

	  const {
	    options,
	    context,
	    fileHandling
	  } = result;

	  if (fileHandling === "ignored") {
	    return null;
	  }

	  const optionDefaults = {};
	  const {
	    plugins,
	    presets
	  } = options;

	  if (!plugins || !presets) {
	    throw new Error("Assertion failure - plugins and presets exist");
	  }

	  const presetContext = Object.assign({}, context, {
	    targets: options.targets
	  });

	  const toDescriptor = item => {
	    const desc = (0, _item.getItemDescriptor)(item);

	    if (!desc) {
	      throw new Error("Assertion failure - must be config item");
	    }

	    return desc;
	  };

	  const presetsDescriptors = presets.map(toDescriptor);
	  const initialPluginsDescriptors = plugins.map(toDescriptor);
	  const pluginDescriptorsByPass = [[]];
	  const passes = [];
	  const ignored = yield* enhanceError(context, function* recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {
	    const presets = [];

	    for (let i = 0; i < rawPresets.length; i++) {
	      const descriptor = rawPresets[i];

	      if (descriptor.options !== false) {
	        try {
	          if (descriptor.ownPass) {
	            presets.push({
	              preset: yield* loadPresetDescriptor(descriptor, presetContext),
	              pass: []
	            });
	          } else {
	            presets.unshift({
	              preset: yield* loadPresetDescriptor(descriptor, presetContext),
	              pass: pluginDescriptorsPass
	            });
	          }
	        } catch (e) {
	          if (e.code === "BABEL_UNKNOWN_OPTION") {
	            (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i, "preset", e);
	          }

	          throw e;
	        }
	      }
	    }

	    if (presets.length > 0) {
	      pluginDescriptorsByPass.splice(1, 0, ...presets.map(o => o.pass).filter(p => p !== pluginDescriptorsPass));

	      for (const {
	        preset,
	        pass
	      } of presets) {
	        if (!preset) return true;
	        pass.push(...preset.plugins);
	        const ignored = yield* recursePresetDescriptors(preset.presets, pass);
	        if (ignored) return true;
	        preset.options.forEach(opts => {
	          (0, _util.mergeOptions)(optionDefaults, opts);
	        });
	      }
	    }
	  })(presetsDescriptors, pluginDescriptorsByPass[0]);
	  if (ignored) return null;
	  const opts = optionDefaults;
	  (0, _util.mergeOptions)(opts, options);
	  const pluginContext = Object.assign({}, presetContext, {
	    assumptions: (_opts$assumptions = opts.assumptions) != null ? _opts$assumptions : {}
	  });
	  yield* enhanceError(context, function* loadPluginDescriptors() {
	    pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);

	    for (const descs of pluginDescriptorsByPass) {
	      const pass = [];
	      passes.push(pass);

	      for (let i = 0; i < descs.length; i++) {
	        const descriptor = descs[i];

	        if (descriptor.options !== false) {
	          try {
	            pass.push(yield* loadPluginDescriptor(descriptor, pluginContext));
	          } catch (e) {
	            if (e.code === "BABEL_UNKNOWN_PLUGIN_PROPERTY") {
	              (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i, "plugin", e);
	            }

	            throw e;
	          }
	        }
	      }
	    }
	  })();
	  opts.plugins = passes[0];
	  opts.presets = passes.slice(1).filter(plugins => plugins.length > 0).map(plugins => ({
	    plugins
	  }));
	  opts.passPerPreset = opts.presets.length > 0;
	  return {
	    options: opts,
	    passes: passes
	  };
	});

	full.default = _default$3;

	function enhanceError(context, fn) {
	  return function* (arg1, arg2) {
	    try {
	      return yield* fn(arg1, arg2);
	    } catch (e) {
	      if (!/^\[BABEL\]/.test(e.message)) {
	        e.message = `[BABEL] ${context.filename || "unknown"}: ${e.message}`;
	      }

	      throw e;
	    }
	  };
	}

	const makeDescriptorLoader = apiFactory => (0, _caching.makeWeakCache)(function* ({
	  value,
	  options,
	  dirname,
	  alias
	}, cache) {
	  if (options === false) throw new Error("Assertion failure");
	  options = options || {};
	  let item = value;

	  if (typeof value === "function") {
	    const factory = (0, _async.maybeAsync)(value, `You appear to be using an async plugin/preset, but Babel has been called synchronously`);
	    const api = Object.assign({}, context, apiFactory(cache));

	    try {
	      item = yield* factory(api, options, dirname);
	    } catch (e) {
	      if (alias) {
	        e.message += ` (While processing: ${JSON.stringify(alias)})`;
	      }

	      throw e;
	    }
	  }

	  if (!item || typeof item !== "object") {
	    throw new Error("Plugin/Preset did not return an object.");
	  }

	  if ((0, _async.isThenable)(item)) {
	    yield* [];
	    throw new Error(`You appear to be using a promise as a plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, ` + `you may need to upgrade your @babel/core version. ` + `As an alternative, you can prefix the promise with "await". ` + `(While processing: ${JSON.stringify(alias)})`);
	  }

	  return {
	    value: item,
	    options,
	    dirname,
	    alias
	  };
	});

	const pluginDescriptorLoader = makeDescriptorLoader(_configApi.makePluginAPI);
	const presetDescriptorLoader = makeDescriptorLoader(_configApi.makePresetAPI);

	function* loadPluginDescriptor(descriptor, context) {
	  if (descriptor.value instanceof _plugin$1.default) {
	    if (descriptor.options) {
	      throw new Error("Passed options to an existing Plugin instance will not work.");
	    }

	    return descriptor.value;
	  }

	  return yield* instantiatePlugin(yield* pluginDescriptorLoader(descriptor, context), context);
	}

	const instantiatePlugin = (0, _caching.makeWeakCache)(function* ({
	  value,
	  options,
	  dirname,
	  alias
	}, cache) {
	  const pluginObj = (0, _plugins.validatePluginObject)(value);
	  const plugin = Object.assign({}, pluginObj);

	  if (plugin.visitor) {
	    plugin.visitor = _traverse$2().default.explode(Object.assign({}, plugin.visitor));
	  }

	  if (plugin.inherits) {
	    const inheritsDescriptor = {
	      name: undefined,
	      alias: `${alias}$inherits`,
	      value: plugin.inherits,
	      options,
	      dirname
	    };
	    const inherits = yield* (0, _async.forwardAsync)(loadPluginDescriptor, run => {
	      return cache.invalidate(data => run(inheritsDescriptor, data));
	    });
	    plugin.pre = chain(inherits.pre, plugin.pre);
	    plugin.post = chain(inherits.post, plugin.post);
	    plugin.manipulateOptions = chain(inherits.manipulateOptions, plugin.manipulateOptions);
	    plugin.visitor = _traverse$2().default.visitors.merge([inherits.visitor || {}, plugin.visitor || {}]);
	  }

	  return new _plugin$1.default(plugin, options, alias);
	});

	const validateIfOptionNeedsFilename = (options, descriptor) => {
	  if (options.test || options.include || options.exclude) {
	    const formattedPresetName = descriptor.name ? `"${descriptor.name}"` : "/* your preset */";
	    throw new Error([`Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`, `\`\`\``, `babel.transform(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`, `\`\`\``, `See https://babeljs.io/docs/en/options#filename for more information.`].join("\n"));
	  }
	};

	const validatePreset = (preset, context, descriptor) => {
	  if (!context.filename) {
	    const {
	      options
	    } = preset;
	    validateIfOptionNeedsFilename(options, descriptor);

	    if (options.overrides) {
	      options.overrides.forEach(overrideOptions => validateIfOptionNeedsFilename(overrideOptions, descriptor));
	    }
	  }
	};

	function* loadPresetDescriptor(descriptor, context) {
	  const preset = instantiatePreset(yield* presetDescriptorLoader(descriptor, context));
	  validatePreset(preset, context, descriptor);
	  return yield* (0, _configChain.buildPresetChain)(preset, context);
	}

	const instantiatePreset = (0, _caching.makeWeakCacheSync)(({
	  value,
	  dirname,
	  alias
	}) => {
	  return {
	    options: (0, _options.validate)("preset", value),
	    alias,
	    dirname
	  };
	});

	function chain(a, b) {
	  const fns = [a, b].filter(Boolean);
	  if (fns.length <= 1) return fns[0];
	  return function (...args) {
	    for (const fn of fns) {
	      fn.apply(this, args);
	    }
	  };
	}

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.createConfigItem = createConfigItem;
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function () {
	    return _full.default;
	  }
	});
	exports.createConfigItemAsync = exports.createConfigItemSync = exports.loadOptionsAsync = exports.loadOptionsSync = exports.loadOptions = exports.loadPartialConfigAsync = exports.loadPartialConfigSync = exports.loadPartialConfig = void 0;

	function _gensync() {
	  const data = gensync;

	  _gensync = function () {
	    return data;
	  };

	  return data;
	}

	var _full = full;

	var _partial = partial;

	var _item = item;

	const loadOptionsRunner = _gensync()(function* (opts) {
	  var _config$options;

	  const config = yield* (0, _full.default)(opts);
	  return (_config$options = config == null ? void 0 : config.options) != null ? _config$options : null;
	});

	const createConfigItemRunner = _gensync()(_item.createConfigItem);

	const maybeErrback = runner => (opts, callback) => {
	  if (callback === undefined && typeof opts === "function") {
	    callback = opts;
	    opts = undefined;
	  }

	  return callback ? runner.errback(opts, callback) : runner.sync(opts);
	};

	const loadPartialConfig = maybeErrback(_partial.loadPartialConfig);
	exports.loadPartialConfig = loadPartialConfig;
	const loadPartialConfigSync = _partial.loadPartialConfig.sync;
	exports.loadPartialConfigSync = loadPartialConfigSync;
	const loadPartialConfigAsync = _partial.loadPartialConfig.async;
	exports.loadPartialConfigAsync = loadPartialConfigAsync;
	const loadOptions = maybeErrback(loadOptionsRunner);
	exports.loadOptions = loadOptions;
	const loadOptionsSync = loadOptionsRunner.sync;
	exports.loadOptionsSync = loadOptionsSync;
	const loadOptionsAsync = loadOptionsRunner.async;
	exports.loadOptionsAsync = loadOptionsAsync;
	const createConfigItemSync = createConfigItemRunner.sync;
	exports.createConfigItemSync = createConfigItemSync;
	const createConfigItemAsync = createConfigItemRunner.async;
	exports.createConfigItemAsync = createConfigItemAsync;

	function createConfigItem(target, options, callback) {
	  if (callback !== undefined) {
	    return createConfigItemRunner.errback(target, options, callback);
	  } else if (typeof options === "function") {
	    return createConfigItemRunner.errback(target, undefined, callback);
	  } else {
	    return createConfigItemRunner.sync(target, options);
	  }
	}
	}(config));

	var transform$1 = {};

	var transformation = {};

	var pluginPass = {};

	Object.defineProperty(pluginPass, "__esModule", {
	  value: true
	});
	pluginPass.default = void 0;

	class PluginPass {
	  constructor(file, key, options) {
	    this._map = new Map();
	    this.key = void 0;
	    this.file = void 0;
	    this.opts = void 0;
	    this.cwd = void 0;
	    this.filename = void 0;
	    this.key = key;
	    this.file = file;
	    this.opts = options || {};
	    this.cwd = file.opts.cwd;
	    this.filename = file.opts.filename;
	  }

	  set(key, val) {
	    this._map.set(key, val);
	  }

	  get(key) {
	    return this._map.get(key);
	  }

	  availableHelper(name, versionRange) {
	    return this.file.availableHelper(name, versionRange);
	  }

	  addHelper(name) {
	    return this.file.addHelper(name);
	  }

	  addImport() {
	    return this.file.addImport();
	  }

	  buildCodeFrameError(node, msg, _Error) {
	    return this.file.buildCodeFrameError(node, msg, _Error);
	  }

	}

	pluginPass.default = PluginPass;
	{
	  PluginPass.prototype.getModuleName = function getModuleName() {
	    return this.file.getModuleName();
	  };
	}

	var blockHoistPlugin$1 = {};

	Object.defineProperty(blockHoistPlugin$1, "__esModule", {
	  value: true
	});
	blockHoistPlugin$1.default = loadBlockHoistPlugin;

	function _traverse$1() {
	  const data = lib$t;

	  _traverse$1 = function () {
	    return data;
	  };

	  return data;
	}

	var _plugin = plugin;

	let LOADED_PLUGIN;

	function loadBlockHoistPlugin() {
	  if (!LOADED_PLUGIN) {
	    LOADED_PLUGIN = new _plugin.default(Object.assign({}, blockHoistPlugin, {
	      visitor: _traverse$1().default.explode(blockHoistPlugin.visitor)
	    }), {});
	  }

	  return LOADED_PLUGIN;
	}

	function priority(bodyNode) {
	  const priority = bodyNode == null ? void 0 : bodyNode._blockHoist;
	  if (priority == null) return 1;
	  if (priority === true) return 2;
	  return priority;
	}

	function stableSort(body) {
	  const buckets = Object.create(null);

	  for (let i = 0; i < body.length; i++) {
	    const n = body[i];
	    const p = priority(n);
	    const bucket = buckets[p] || (buckets[p] = []);
	    bucket.push(n);
	  }

	  const keys = Object.keys(buckets).map(k => +k).sort((a, b) => b - a);
	  let index = 0;

	  for (const key of keys) {
	    const bucket = buckets[key];

	    for (const n of bucket) {
	      body[index++] = n;
	    }
	  }

	  return body;
	}

	const blockHoistPlugin = {
	  name: "internal.blockHoist",
	  visitor: {
	    Block: {
	      exit({
	        node
	      }) {
	        const {
	          body
	        } = node;
	        let max = Math.pow(2, 30) - 1;
	        let hasChange = false;

	        for (let i = 0; i < body.length; i++) {
	          const n = body[i];
	          const p = priority(n);

	          if (p > max) {
	            hasChange = true;
	            break;
	          }

	          max = p;
	        }

	        if (!hasChange) return;
	        node.body = stableSort(body.slice());
	      }

	    }
	  }
	};

	var normalizeOpts = {};

	Object.defineProperty(normalizeOpts, "__esModule", {
	  value: true
	});
	normalizeOpts.default = normalizeOptions;

	function _path$1() {
	  const data = require$$0__default['default'];

	  _path$1 = function () {
	    return data;
	  };

	  return data;
	}

	function normalizeOptions(config) {
	  const {
	    filename,
	    cwd,
	    filenameRelative = typeof filename === "string" ? _path$1().relative(cwd, filename) : "unknown",
	    sourceType = "module",
	    inputSourceMap,
	    sourceMaps = !!inputSourceMap,
	    sourceRoot = config.options.moduleRoot,
	    sourceFileName = _path$1().basename(filenameRelative),
	    comments = true,
	    compact = "auto"
	  } = config.options;
	  const opts = config.options;
	  const options = Object.assign({}, opts, {
	    parserOpts: Object.assign({
	      sourceType: _path$1().extname(filenameRelative) === ".mjs" ? "module" : sourceType,
	      sourceFileName: filename,
	      plugins: []
	    }, opts.parserOpts),
	    generatorOpts: Object.assign({
	      filename,
	      auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
	      auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
	      retainLines: opts.retainLines,
	      comments,
	      shouldPrintComment: opts.shouldPrintComment,
	      compact,
	      minified: opts.minified,
	      sourceMaps,
	      sourceRoot,
	      sourceFileName
	    }, opts.generatorOpts)
	  });

	  for (const plugins of config.passes) {
	    for (const plugin of plugins) {
	      if (plugin.manipulateOptions) {
	        plugin.manipulateOptions(options, options.parserOpts);
	      }
	    }
	  }

	  return options;
	}

	var normalizeFile$1 = {};

	var convertSourceMap = {};

	var safeBuffer = {exports: {}};

	/* eslint-disable node/no-deprecated-api */

	(function (module, exports) {
	var buffer = require$$0__default$3['default'];
	var Buffer = buffer.Buffer;

	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key];
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer;
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports);
	  exports.Buffer = SafeBuffer;
	}

	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}

	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer);

	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	};

	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size);
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding);
	    } else {
	      buf.fill(fill);
	    }
	  } else {
	    buf.fill(0);
	  }
	  return buf
	};

	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	};

	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	};
	}(safeBuffer, safeBuffer.exports));

	(function (exports) {
	var fs = require$$0__default$2['default'];
	var path = require$$0__default['default'];
	var SafeBuffer = safeBuffer.exports;

	Object.defineProperty(exports, 'commentRegex', {
	  get: function getCommentRegex () {
	    return /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/mg;
	  }
	});

	Object.defineProperty(exports, 'mapFileCommentRegex', {
	  get: function getMapFileCommentRegex () {
	    // Matches sourceMappingURL in either // or /* comment styles.
	    return /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"`]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/mg;
	  }
	});


	function decodeBase64(base64) {
	  return (SafeBuffer.Buffer.from(base64, 'base64') || "").toString();
	}

	function stripComment(sm) {
	  return sm.split(',').pop();
	}

	function readFromFileMap(sm, dir) {
	  // NOTE: this will only work on the server since it attempts to read the map file

	  var r = exports.mapFileCommentRegex.exec(sm);

	  // for some odd reason //# .. captures in 1 and /* .. */ in 2
	  var filename = r[1] || r[2];
	  var filepath = path.resolve(dir, filename);

	  try {
	    return fs.readFileSync(filepath, 'utf8');
	  } catch (e) {
	    throw new Error('An error occurred while trying to read the map file at ' + filepath + '\n' + e);
	  }
	}

	function Converter (sm, opts) {
	  opts = opts || {};

	  if (opts.isFileComment) sm = readFromFileMap(sm, opts.commentFileDir);
	  if (opts.hasComment) sm = stripComment(sm);
	  if (opts.isEncoded) sm = decodeBase64(sm);
	  if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);

	  this.sourcemap = sm;
	}

	Converter.prototype.toJSON = function (space) {
	  return JSON.stringify(this.sourcemap, null, space);
	};

	Converter.prototype.toBase64 = function () {
	  var json = this.toJSON();
	  return (SafeBuffer.Buffer.from(json, 'utf8') || "").toString('base64');
	};

	Converter.prototype.toComment = function (options) {
	  var base64 = this.toBase64();
	  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
	  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
	};

	// returns copy instead of original
	Converter.prototype.toObject = function () {
	  return JSON.parse(this.toJSON());
	};

	Converter.prototype.addProperty = function (key, value) {
	  if (this.sourcemap.hasOwnProperty(key)) throw new Error('property "' + key + '" already exists on the sourcemap, use set property instead');
	  return this.setProperty(key, value);
	};

	Converter.prototype.setProperty = function (key, value) {
	  this.sourcemap[key] = value;
	  return this;
	};

	Converter.prototype.getProperty = function (key) {
	  return this.sourcemap[key];
	};

	exports.fromObject = function (obj) {
	  return new Converter(obj);
	};

	exports.fromJSON = function (json) {
	  return new Converter(json, { isJSON: true });
	};

	exports.fromBase64 = function (base64) {
	  return new Converter(base64, { isEncoded: true });
	};

	exports.fromComment = function (comment) {
	  comment = comment
	    .replace(/^\/\*/g, '//')
	    .replace(/\*\/$/g, '');

	  return new Converter(comment, { isEncoded: true, hasComment: true });
	};

	exports.fromMapFileComment = function (comment, dir) {
	  return new Converter(comment, { commentFileDir: dir, isFileComment: true, isJSON: true });
	};

	// Finds last sourcemap comment in file or returns null if none was found
	exports.fromSource = function (content) {
	  var m = content.match(exports.commentRegex);
	  return m ? exports.fromComment(m.pop()) : null;
	};

	// Finds last sourcemap comment in file or returns null if none was found
	exports.fromMapFileSource = function (content, dir) {
	  var m = content.match(exports.mapFileCommentRegex);
	  return m ? exports.fromMapFileComment(m.pop(), dir) : null;
	};

	exports.removeComments = function (src) {
	  return src.replace(exports.commentRegex, '');
	};

	exports.removeMapFileComments = function (src) {
	  return src.replace(exports.mapFileCommentRegex, '');
	};

	exports.generateMapFileComment = function (file, options) {
	  var data = 'sourceMappingURL=' + file;
	  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
	};
	}(convertSourceMap));

	var parser$2 = {};

	var missingPluginHelper = {};

	Object.defineProperty(missingPluginHelper, "__esModule", {
	  value: true
	});
	missingPluginHelper.default = generateMissingPluginMessage;
	const pluginNameMap = {
	  asyncDoExpressions: {
	    syntax: {
	      name: "@babel/plugin-syntax-async-do-expressions",
	      url: "https://git.io/JYer8"
	    }
	  },
	  classProperties: {
	    syntax: {
	      name: "@babel/plugin-syntax-class-properties",
	      url: "https://git.io/vb4yQ"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-class-properties",
	      url: "https://git.io/vb4SL"
	    }
	  },
	  classPrivateProperties: {
	    syntax: {
	      name: "@babel/plugin-syntax-class-properties",
	      url: "https://git.io/vb4yQ"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-class-properties",
	      url: "https://git.io/vb4SL"
	    }
	  },
	  classPrivateMethods: {
	    syntax: {
	      name: "@babel/plugin-syntax-class-properties",
	      url: "https://git.io/vb4yQ"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-private-methods",
	      url: "https://git.io/JvpRG"
	    }
	  },
	  classStaticBlock: {
	    syntax: {
	      name: "@babel/plugin-syntax-class-static-block",
	      url: "https://git.io/JTLB6"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-class-static-block",
	      url: "https://git.io/JTLBP"
	    }
	  },
	  decimal: {
	    syntax: {
	      name: "@babel/plugin-syntax-decimal",
	      url: "https://git.io/JfKOH"
	    }
	  },
	  decorators: {
	    syntax: {
	      name: "@babel/plugin-syntax-decorators",
	      url: "https://git.io/vb4y9"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-decorators",
	      url: "https://git.io/vb4ST"
	    }
	  },
	  doExpressions: {
	    syntax: {
	      name: "@babel/plugin-syntax-do-expressions",
	      url: "https://git.io/vb4yh"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-do-expressions",
	      url: "https://git.io/vb4S3"
	    }
	  },
	  dynamicImport: {
	    syntax: {
	      name: "@babel/plugin-syntax-dynamic-import",
	      url: "https://git.io/vb4Sv"
	    }
	  },
	  exportDefaultFrom: {
	    syntax: {
	      name: "@babel/plugin-syntax-export-default-from",
	      url: "https://git.io/vb4SO"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-export-default-from",
	      url: "https://git.io/vb4yH"
	    }
	  },
	  exportNamespaceFrom: {
	    syntax: {
	      name: "@babel/plugin-syntax-export-namespace-from",
	      url: "https://git.io/vb4Sf"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-export-namespace-from",
	      url: "https://git.io/vb4SG"
	    }
	  },
	  flow: {
	    syntax: {
	      name: "@babel/plugin-syntax-flow",
	      url: "https://git.io/vb4yb"
	    },
	    transform: {
	      name: "@babel/preset-flow",
	      url: "https://git.io/JfeDn"
	    }
	  },
	  functionBind: {
	    syntax: {
	      name: "@babel/plugin-syntax-function-bind",
	      url: "https://git.io/vb4y7"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-function-bind",
	      url: "https://git.io/vb4St"
	    }
	  },
	  functionSent: {
	    syntax: {
	      name: "@babel/plugin-syntax-function-sent",
	      url: "https://git.io/vb4yN"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-function-sent",
	      url: "https://git.io/vb4SZ"
	    }
	  },
	  importMeta: {
	    syntax: {
	      name: "@babel/plugin-syntax-import-meta",
	      url: "https://git.io/vbKK6"
	    }
	  },
	  jsx: {
	    syntax: {
	      name: "@babel/plugin-syntax-jsx",
	      url: "https://git.io/vb4yA"
	    },
	    transform: {
	      name: "@babel/preset-react",
	      url: "https://git.io/JfeDR"
	    }
	  },
	  importAssertions: {
	    syntax: {
	      name: "@babel/plugin-syntax-import-assertions",
	      url: "https://git.io/JUbkv"
	    }
	  },
	  moduleStringNames: {
	    syntax: {
	      name: "@babel/plugin-syntax-module-string-names",
	      url: "https://git.io/JTL8G"
	    }
	  },
	  numericSeparator: {
	    syntax: {
	      name: "@babel/plugin-syntax-numeric-separator",
	      url: "https://git.io/vb4Sq"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-numeric-separator",
	      url: "https://git.io/vb4yS"
	    }
	  },
	  optionalChaining: {
	    syntax: {
	      name: "@babel/plugin-syntax-optional-chaining",
	      url: "https://git.io/vb4Sc"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-optional-chaining",
	      url: "https://git.io/vb4Sk"
	    }
	  },
	  pipelineOperator: {
	    syntax: {
	      name: "@babel/plugin-syntax-pipeline-operator",
	      url: "https://git.io/vb4yj"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-pipeline-operator",
	      url: "https://git.io/vb4SU"
	    }
	  },
	  privateIn: {
	    syntax: {
	      name: "@babel/plugin-syntax-private-property-in-object",
	      url: "https://git.io/JfK3q"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-private-property-in-object",
	      url: "https://git.io/JfK3O"
	    }
	  },
	  recordAndTuple: {
	    syntax: {
	      name: "@babel/plugin-syntax-record-and-tuple",
	      url: "https://git.io/JvKp3"
	    }
	  },
	  throwExpressions: {
	    syntax: {
	      name: "@babel/plugin-syntax-throw-expressions",
	      url: "https://git.io/vb4SJ"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-throw-expressions",
	      url: "https://git.io/vb4yF"
	    }
	  },
	  typescript: {
	    syntax: {
	      name: "@babel/plugin-syntax-typescript",
	      url: "https://git.io/vb4SC"
	    },
	    transform: {
	      name: "@babel/preset-typescript",
	      url: "https://git.io/JfeDz"
	    }
	  },
	  asyncGenerators: {
	    syntax: {
	      name: "@babel/plugin-syntax-async-generators",
	      url: "https://git.io/vb4SY"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-async-generator-functions",
	      url: "https://git.io/vb4yp"
	    }
	  },
	  logicalAssignment: {
	    syntax: {
	      name: "@babel/plugin-syntax-logical-assignment-operators",
	      url: "https://git.io/vAlBp"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-logical-assignment-operators",
	      url: "https://git.io/vAlRe"
	    }
	  },
	  nullishCoalescingOperator: {
	    syntax: {
	      name: "@babel/plugin-syntax-nullish-coalescing-operator",
	      url: "https://git.io/vb4yx"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-nullish-coalescing-operator",
	      url: "https://git.io/vb4Se"
	    }
	  },
	  objectRestSpread: {
	    syntax: {
	      name: "@babel/plugin-syntax-object-rest-spread",
	      url: "https://git.io/vb4y5"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-object-rest-spread",
	      url: "https://git.io/vb4Ss"
	    }
	  },
	  optionalCatchBinding: {
	    syntax: {
	      name: "@babel/plugin-syntax-optional-catch-binding",
	      url: "https://git.io/vb4Sn"
	    },
	    transform: {
	      name: "@babel/plugin-proposal-optional-catch-binding",
	      url: "https://git.io/vb4SI"
	    }
	  }
	};
	pluginNameMap.privateIn.syntax = pluginNameMap.privateIn.transform;

	const getNameURLCombination = ({
	  name,
	  url
	}) => `${name} (${url})`;

	function generateMissingPluginMessage(missingPluginName, loc, codeFrame) {
	  let helpMessage = `Support for the experimental syntax '${missingPluginName}' isn't currently enabled ` + `(${loc.line}:${loc.column + 1}):\n\n` + codeFrame;
	  const pluginInfo = pluginNameMap[missingPluginName];

	  if (pluginInfo) {
	    const {
	      syntax: syntaxPlugin,
	      transform: transformPlugin
	    } = pluginInfo;

	    if (syntaxPlugin) {
	      const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);

	      if (transformPlugin) {
	        const transformPluginInfo = getNameURLCombination(transformPlugin);
	        const sectionType = transformPlugin.name.startsWith("@babel/plugin") ? "plugins" : "presets";
	        helpMessage += `\n\nAdd ${transformPluginInfo} to the '${sectionType}' section of your Babel config to enable transformation.
If you want to leave it as-is, add ${syntaxPluginInfo} to the 'plugins' section to enable parsing.`;
	      } else {
	        helpMessage += `\n\nAdd ${syntaxPluginInfo} to the 'plugins' section of your Babel config ` + `to enable parsing.`;
	      }
	    }
	  }

	  return helpMessage;
	}

	Object.defineProperty(parser$2, "__esModule", {
	  value: true
	});
	parser$2.default = parser$1;

	function _parser$2() {
	  const data = lib$x;

	  _parser$2 = function () {
	    return data;
	  };

	  return data;
	}

	function _codeFrame() {
	  const data = lib$o;

	  _codeFrame = function () {
	    return data;
	  };

	  return data;
	}

	var _missingPluginHelper = missingPluginHelper;

	function* parser$1(pluginPasses, {
	  parserOpts,
	  highlightCode = true,
	  filename = "unknown"
	}, code) {
	  try {
	    const results = [];

	    for (const plugins of pluginPasses) {
	      for (const plugin of plugins) {
	        const {
	          parserOverride
	        } = plugin;

	        if (parserOverride) {
	          const ast = parserOverride(code, parserOpts, _parser$2().parse);
	          if (ast !== undefined) results.push(ast);
	        }
	      }
	    }

	    if (results.length === 0) {
	      return (0, _parser$2().parse)(code, parserOpts);
	    } else if (results.length === 1) {
	      yield* [];

	      if (typeof results[0].then === "function") {
	        throw new Error(`You appear to be using an async parser plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);
	      }

	      return results[0];
	    }

	    throw new Error("More than one plugin attempted to override parsing.");
	  } catch (err) {
	    if (err.code === "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED") {
	      err.message += "\nConsider renaming the file to '.mjs', or setting sourceType:module " + "or sourceType:unambiguous in your Babel config for this file.";
	    }

	    const {
	      loc,
	      missingPlugin
	    } = err;

	    if (loc) {
	      const codeFrame = (0, _codeFrame().codeFrameColumns)(code, {
	        start: {
	          line: loc.line,
	          column: loc.column + 1
	        }
	      }, {
	        highlightCode
	      });

	      if (missingPlugin) {
	        err.message = `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame);
	      } else {
	        err.message = `${filename}: ${err.message}\n\n` + codeFrame;
	      }

	      err.code = "BABEL_PARSE_ERROR";
	    }

	    throw err;
	  }
	}

	var cloneDeep = {};

	var cloneDeepBrowser = {};

	Object.defineProperty(cloneDeepBrowser, "__esModule", {
	  value: true
	});
	cloneDeepBrowser.default = _default$2;
	const serialized = "$$ babel internal serialized type" + Math.random();

	function serialize(key, value) {
	  if (typeof value !== "bigint") return value;
	  return {
	    [serialized]: "BigInt",
	    value: value.toString()
	  };
	}

	function revive(key, value) {
	  if (!value || typeof value !== "object") return value;
	  if (value[serialized] !== "BigInt") return value;
	  return BigInt(value.value);
	}

	function _default$2(value) {
	  return JSON.parse(JSON.stringify(value, serialize), revive);
	}

	Object.defineProperty(cloneDeep, "__esModule", {
	  value: true
	});
	cloneDeep.default = _default$1;

	function _v() {
	  const data = require$$0__default$4['default'];

	  _v = function () {
	    return data;
	  };

	  return data;
	}

	var _cloneDeepBrowser = cloneDeepBrowser;

	function _default$1(value) {
	  if (_v().deserialize && _v().serialize) {
	    return _v().deserialize(_v().serialize(value));
	  }

	  return (0, _cloneDeepBrowser.default)(value);
	}

	Object.defineProperty(normalizeFile$1, "__esModule", {
	  value: true
	});
	normalizeFile$1.default = normalizeFile;

	function _fs() {
	  const data = require$$0__default$2['default'];

	  _fs = function () {
	    return data;
	  };

	  return data;
	}

	function _path() {
	  const data = require$$0__default['default'];

	  _path = function () {
	    return data;
	  };

	  return data;
	}

	function _debug() {
	  const data = src.exports;

	  _debug = function () {
	    return data;
	  };

	  return data;
	}

	function _t() {
	  const data = lib$s;

	  _t = function () {
	    return data;
	  };

	  return data;
	}

	function _convertSourceMap$1() {
	  const data = convertSourceMap;

	  _convertSourceMap$1 = function () {
	    return data;
	  };

	  return data;
	}

	var _file = file$2;

	var _parser$1 = parser$2;

	var _cloneDeep = cloneDeep;

	const {
	  file,
	  traverseFast
	} = _t();

	const debug = _debug()("babel:transform:file");

	const LARGE_INPUT_SOURCEMAP_THRESHOLD = 1000000;

	function* normalizeFile(pluginPasses, options, code, ast) {
	  code = `${code || ""}`;

	  if (ast) {
	    if (ast.type === "Program") {
	      ast = file(ast, [], []);
	    } else if (ast.type !== "File") {
	      throw new Error("AST root must be a Program or File node");
	    }

	    if (options.cloneInputAst) {
	      ast = (0, _cloneDeep.default)(ast);
	    }
	  } else {
	    ast = yield* (0, _parser$1.default)(pluginPasses, options, code);
	  }

	  let inputMap = null;

	  if (options.inputSourceMap !== false) {
	    if (typeof options.inputSourceMap === "object") {
	      inputMap = _convertSourceMap$1().fromObject(options.inputSourceMap);
	    }

	    if (!inputMap) {
	      const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);

	      if (lastComment) {
	        try {
	          inputMap = _convertSourceMap$1().fromComment(lastComment);
	        } catch (err) {
	          debug("discarding unknown inline input sourcemap", err);
	        }
	      }
	    }

	    if (!inputMap) {
	      const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);

	      if (typeof options.filename === "string" && lastComment) {
	        try {
	          const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment);

	          const inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options.filename), match[1]));

	          if (inputMapContent.length > LARGE_INPUT_SOURCEMAP_THRESHOLD) {
	            debug("skip merging input map > 1 MB");
	          } else {
	            inputMap = _convertSourceMap$1().fromJSON(inputMapContent);
	          }
	        } catch (err) {
	          debug("discarding unknown file input sourcemap", err);
	        }
	      } else if (lastComment) {
	        debug("discarding un-loadable file input sourcemap");
	      }
	    }
	  }

	  return new _file.default(options, {
	    code,
	    ast,
	    inputMap
	  });
	}

	const INLINE_SOURCEMAP_REGEX = /^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/;
	const EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;

	function extractCommentsFromList(regex, comments, lastComment) {
	  if (comments) {
	    comments = comments.filter(({
	      value
	    }) => {
	      if (regex.test(value)) {
	        lastComment = value;
	        return false;
	      }

	      return true;
	    });
	  }

	  return [comments, lastComment];
	}

	function extractComments(regex, ast) {
	  let lastComment = null;
	  traverseFast(ast, node => {
	    [node.leadingComments, lastComment] = extractCommentsFromList(regex, node.leadingComments, lastComment);
	    [node.innerComments, lastComment] = extractCommentsFromList(regex, node.innerComments, lastComment);
	    [node.trailingComments, lastComment] = extractCommentsFromList(regex, node.trailingComments, lastComment);
	  });
	  return lastComment;
	}

	var generate = {};

	var mergeMap = {};

	var sourceMap = {};

	var sourceMapGenerator = {};

	var base64Vlq = {};

	var base64$1 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

	/**
	 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	 */
	base64$1.encode = function (number) {
	  if (0 <= number && number < intToCharMap.length) {
	    return intToCharMap[number];
	  }
	  throw new TypeError("Must be between 0 and 63: " + number);
	};

	/**
	 * Decode a single base 64 character code digit to an integer. Returns -1 on
	 * failure.
	 */
	base64$1.decode = function (charCode) {
	  var bigA = 65;     // 'A'
	  var bigZ = 90;     // 'Z'

	  var littleA = 97;  // 'a'
	  var littleZ = 122; // 'z'

	  var zero = 48;     // '0'
	  var nine = 57;     // '9'

	  var plus = 43;     // '+'
	  var slash = 47;    // '/'

	  var littleOffset = 26;
	  var numberOffset = 52;

	  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
	  if (bigA <= charCode && charCode <= bigZ) {
	    return (charCode - bigA);
	  }

	  // 26 - 51: abcdefghijklmnopqrstuvwxyz
	  if (littleA <= charCode && charCode <= littleZ) {
	    return (charCode - littleA + littleOffset);
	  }

	  // 52 - 61: 0123456789
	  if (zero <= charCode && charCode <= nine) {
	    return (charCode - zero + numberOffset);
	  }

	  // 62: +
	  if (charCode == plus) {
	    return 62;
	  }

	  // 63: /
	  if (charCode == slash) {
	    return 63;
	  }

	  // Invalid base64 digit.
	  return -1;
	};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	var base64 = base64$1;

	// A single base 64 digit can contain 6 bits of data. For the base 64 variable
	// length quantities we use in the source map spec, the first bit is the sign,
	// the next four bits are the actual value, and the 6th bit is the
	// continuation bit. The continuation bit tells us whether there are more
	// digits in this value following this digit.
	//
	//   Continuation
	//   |    Sign
	//   |    |
	//   V    V
	//   101011

	var VLQ_BASE_SHIFT = 5;

	// binary: 100000
	var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

	// binary: 011111
	var VLQ_BASE_MASK = VLQ_BASE - 1;

	// binary: 100000
	var VLQ_CONTINUATION_BIT = VLQ_BASE;

	/**
	 * Converts from a two-complement value to a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	 */
	function toVLQSigned(aValue) {
	  return aValue < 0
	    ? ((-aValue) << 1) + 1
	    : (aValue << 1) + 0;
	}

	/**
	 * Converts to a two-complement value from a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	 */
	function fromVLQSigned(aValue) {
	  var isNegative = (aValue & 1) === 1;
	  var shifted = aValue >> 1;
	  return isNegative
	    ? -shifted
	    : shifted;
	}

	/**
	 * Returns the base 64 VLQ encoded value.
	 */
	base64Vlq.encode = function base64VLQ_encode(aValue) {
	  var encoded = "";
	  var digit;

	  var vlq = toVLQSigned(aValue);

	  do {
	    digit = vlq & VLQ_BASE_MASK;
	    vlq >>>= VLQ_BASE_SHIFT;
	    if (vlq > 0) {
	      // There are still more digits in this value, so we must make sure the
	      // continuation bit is marked.
	      digit |= VLQ_CONTINUATION_BIT;
	    }
	    encoded += base64.encode(digit);
	  } while (vlq > 0);

	  return encoded;
	};

	/**
	 * Decodes the next base 64 VLQ value from the given string and returns the
	 * value and the rest of the string via the out parameter.
	 */
	base64Vlq.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	  var strLen = aStr.length;
	  var result = 0;
	  var shift = 0;
	  var continuation, digit;

	  do {
	    if (aIndex >= strLen) {
	      throw new Error("Expected more digits in base 64 VLQ value.");
	    }

	    digit = base64.decode(aStr.charCodeAt(aIndex++));
	    if (digit === -1) {
	      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	    }

	    continuation = !!(digit & VLQ_CONTINUATION_BIT);
	    digit &= VLQ_BASE_MASK;
	    result = result + (digit << shift);
	    shift += VLQ_BASE_SHIFT;
	  } while (continuation);

	  aOutParam.value = fromVLQSigned(result);
	  aOutParam.rest = aIndex;
	};

	var util$5 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	(function (exports) {
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	/**
	 * This is a helper function for getting values from parameter/options
	 * objects.
	 *
	 * @param args The object we are extracting values from
	 * @param name The name of the property we are getting.
	 * @param defaultValue An optional value to return if the property is missing
	 * from the object. If this is not specified and the property is missing, an
	 * error will be thrown.
	 */
	function getArg(aArgs, aName, aDefaultValue) {
	  if (aName in aArgs) {
	    return aArgs[aName];
	  } else if (arguments.length === 3) {
	    return aDefaultValue;
	  } else {
	    throw new Error('"' + aName + '" is a required argument.');
	  }
	}
	exports.getArg = getArg;

	var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	var dataUrlRegexp = /^data:.+\,.+$/;

	function urlParse(aUrl) {
	  var match = aUrl.match(urlRegexp);
	  if (!match) {
	    return null;
	  }
	  return {
	    scheme: match[1],
	    auth: match[2],
	    host: match[3],
	    port: match[4],
	    path: match[5]
	  };
	}
	exports.urlParse = urlParse;

	function urlGenerate(aParsedUrl) {
	  var url = '';
	  if (aParsedUrl.scheme) {
	    url += aParsedUrl.scheme + ':';
	  }
	  url += '//';
	  if (aParsedUrl.auth) {
	    url += aParsedUrl.auth + '@';
	  }
	  if (aParsedUrl.host) {
	    url += aParsedUrl.host;
	  }
	  if (aParsedUrl.port) {
	    url += ":" + aParsedUrl.port;
	  }
	  if (aParsedUrl.path) {
	    url += aParsedUrl.path;
	  }
	  return url;
	}
	exports.urlGenerate = urlGenerate;

	/**
	 * Normalizes a path, or the path portion of a URL:
	 *
	 * - Replaces consecutive slashes with one slash.
	 * - Removes unnecessary '.' parts.
	 * - Removes unnecessary '<dir>/..' parts.
	 *
	 * Based on code in the Node.js 'path' core module.
	 *
	 * @param aPath The path or url to normalize.
	 */
	function normalize(aPath) {
	  var path = aPath;
	  var url = urlParse(aPath);
	  if (url) {
	    if (!url.path) {
	      return aPath;
	    }
	    path = url.path;
	  }
	  var isAbsolute = exports.isAbsolute(path);

	  var parts = path.split(/\/+/);
	  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	    part = parts[i];
	    if (part === '.') {
	      parts.splice(i, 1);
	    } else if (part === '..') {
	      up++;
	    } else if (up > 0) {
	      if (part === '') {
	        // The first part is blank if the path is absolute. Trying to go
	        // above the root is a no-op. Therefore we can remove all '..' parts
	        // directly after the root.
	        parts.splice(i + 1, up);
	        up = 0;
	      } else {
	        parts.splice(i, 2);
	        up--;
	      }
	    }
	  }
	  path = parts.join('/');

	  if (path === '') {
	    path = isAbsolute ? '/' : '.';
	  }

	  if (url) {
	    url.path = path;
	    return urlGenerate(url);
	  }
	  return path;
	}
	exports.normalize = normalize;

	/**
	 * Joins two paths/URLs.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be joined with the root.
	 *
	 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	 *   first.
	 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	 *   is updated with the result and aRoot is returned. Otherwise the result
	 *   is returned.
	 *   - If aPath is absolute, the result is aPath.
	 *   - Otherwise the two paths are joined with a slash.
	 * - Joining for example 'http://' and 'www.example.com' is also supported.
	 */
	function join(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }
	  if (aPath === "") {
	    aPath = ".";
	  }
	  var aPathUrl = urlParse(aPath);
	  var aRootUrl = urlParse(aRoot);
	  if (aRootUrl) {
	    aRoot = aRootUrl.path || '/';
	  }

	  // `join(foo, '//www.example.org')`
	  if (aPathUrl && !aPathUrl.scheme) {
	    if (aRootUrl) {
	      aPathUrl.scheme = aRootUrl.scheme;
	    }
	    return urlGenerate(aPathUrl);
	  }

	  if (aPathUrl || aPath.match(dataUrlRegexp)) {
	    return aPath;
	  }

	  // `join('http://', 'www.example.com')`
	  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	    aRootUrl.host = aPath;
	    return urlGenerate(aRootUrl);
	  }

	  var joined = aPath.charAt(0) === '/'
	    ? aPath
	    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

	  if (aRootUrl) {
	    aRootUrl.path = joined;
	    return urlGenerate(aRootUrl);
	  }
	  return joined;
	}
	exports.join = join;

	exports.isAbsolute = function (aPath) {
	  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
	};

	/**
	 * Make a path relative to a URL or another path.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be made relative to aRoot.
	 */
	function relative(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }

	  aRoot = aRoot.replace(/\/$/, '');

	  // It is possible for the path to be above the root. In this case, simply
	  // checking whether the root is a prefix of the path won't work. Instead, we
	  // need to remove components from the root one by one, until either we find
	  // a prefix that fits, or we run out of components to remove.
	  var level = 0;
	  while (aPath.indexOf(aRoot + '/') !== 0) {
	    var index = aRoot.lastIndexOf("/");
	    if (index < 0) {
	      return aPath;
	    }

	    // If the only part of the root that is left is the scheme (i.e. http://,
	    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	    // have exhausted all components, so the path is not relative to the root.
	    aRoot = aRoot.slice(0, index);
	    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	      return aPath;
	    }

	    ++level;
	  }

	  // Make sure we add a "../" for each component we removed from the root.
	  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	}
	exports.relative = relative;

	var supportsNullProto = (function () {
	  var obj = Object.create(null);
	  return !('__proto__' in obj);
	}());

	function identity (s) {
	  return s;
	}

	/**
	 * Because behavior goes wacky when you set `__proto__` on objects, we
	 * have to prefix all the strings in our set with an arbitrary character.
	 *
	 * See https://github.com/mozilla/source-map/pull/31 and
	 * https://github.com/mozilla/source-map/issues/30
	 *
	 * @param String aStr
	 */
	function toSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return '$' + aStr;
	  }

	  return aStr;
	}
	exports.toSetString = supportsNullProto ? identity : toSetString;

	function fromSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return aStr.slice(1);
	  }

	  return aStr;
	}
	exports.fromSetString = supportsNullProto ? identity : fromSetString;

	function isProtoString(s) {
	  if (!s) {
	    return false;
	  }

	  var length = s.length;

	  if (length < 9 /* "__proto__".length */) {
	    return false;
	  }

	  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
	      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
	      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
	      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 9) !== 95  /* '_' */) {
	    return false;
	  }

	  for (var i = length - 10; i >= 0; i--) {
	    if (s.charCodeAt(i) !== 36 /* '$' */) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Comparator between two mappings where the original positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same original source/line/column, but different generated
	 * line and column the same. Useful when searching for a mapping with a
	 * stubbed out mapping.
	 */
	function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	  var cmp = mappingA.source - mappingB.source;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0 || onlyCompareOriginal) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return mappingA.name - mappingB.name;
	}
	exports.compareByOriginalPositions = compareByOriginalPositions;

	/**
	 * Comparator between two mappings with deflated source and name indices where
	 * the generated positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same generated line and column, but different
	 * source/name/original line and column the same. Useful when searching for a
	 * mapping with a stubbed out mapping.
	 */
	function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0 || onlyCompareGenerated) {
	    return cmp;
	  }

	  cmp = mappingA.source - mappingB.source;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return mappingA.name - mappingB.name;
	}
	exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

	function strcmp(aStr1, aStr2) {
	  if (aStr1 === aStr2) {
	    return 0;
	  }

	  if (aStr1 > aStr2) {
	    return 1;
	  }

	  return -1;
	}

	/**
	 * Comparator between two mappings with inflated source and name strings where
	 * the generated positions are compared.
	 */
	function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
	}(util$5));

	var arraySet = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util$4 = util$5;
	var has = Object.prototype.hasOwnProperty;
	var hasNativeMap = typeof Map !== "undefined";

	/**
	 * A data structure which is a combination of an array and a set. Adding a new
	 * member is O(1), testing for membership is O(1), and finding the index of an
	 * element is O(1). Removing elements from the set is not supported. Only
	 * strings are supported for membership.
	 */
	function ArraySet$2() {
	  this._array = [];
	  this._set = hasNativeMap ? new Map() : Object.create(null);
	}

	/**
	 * Static method for creating ArraySet instances from an existing array.
	 */
	ArraySet$2.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	  var set = new ArraySet$2();
	  for (var i = 0, len = aArray.length; i < len; i++) {
	    set.add(aArray[i], aAllowDuplicates);
	  }
	  return set;
	};

	/**
	 * Return how many unique items are in this ArraySet. If duplicates have been
	 * added, than those do not count towards the size.
	 *
	 * @returns Number
	 */
	ArraySet$2.prototype.size = function ArraySet_size() {
	  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
	};

	/**
	 * Add the given string to this set.
	 *
	 * @param String aStr
	 */
	ArraySet$2.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	  var sStr = hasNativeMap ? aStr : util$4.toSetString(aStr);
	  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
	  var idx = this._array.length;
	  if (!isDuplicate || aAllowDuplicates) {
	    this._array.push(aStr);
	  }
	  if (!isDuplicate) {
	    if (hasNativeMap) {
	      this._set.set(aStr, idx);
	    } else {
	      this._set[sStr] = idx;
	    }
	  }
	};

	/**
	 * Is the given string a member of this set?
	 *
	 * @param String aStr
	 */
	ArraySet$2.prototype.has = function ArraySet_has(aStr) {
	  if (hasNativeMap) {
	    return this._set.has(aStr);
	  } else {
	    var sStr = util$4.toSetString(aStr);
	    return has.call(this._set, sStr);
	  }
	};

	/**
	 * What is the index of the given string in the array?
	 *
	 * @param String aStr
	 */
	ArraySet$2.prototype.indexOf = function ArraySet_indexOf(aStr) {
	  if (hasNativeMap) {
	    var idx = this._set.get(aStr);
	    if (idx >= 0) {
	        return idx;
	    }
	  } else {
	    var sStr = util$4.toSetString(aStr);
	    if (has.call(this._set, sStr)) {
	      return this._set[sStr];
	    }
	  }

	  throw new Error('"' + aStr + '" is not in the set.');
	};

	/**
	 * What is the element at the given index?
	 *
	 * @param Number aIdx
	 */
	ArraySet$2.prototype.at = function ArraySet_at(aIdx) {
	  if (aIdx >= 0 && aIdx < this._array.length) {
	    return this._array[aIdx];
	  }
	  throw new Error('No element indexed by ' + aIdx);
	};

	/**
	 * Returns the array representation of this set (which has the proper indices
	 * indicated by indexOf). Note that this is a copy of the internal array used
	 * for storing the members so that no one can mess with internal state.
	 */
	ArraySet$2.prototype.toArray = function ArraySet_toArray() {
	  return this._array.slice();
	};

	arraySet.ArraySet = ArraySet$2;

	var mappingList = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util$3 = util$5;

	/**
	 * Determine whether mappingB is after mappingA with respect to generated
	 * position.
	 */
	function generatedPositionAfter(mappingA, mappingB) {
	  // Optimized for most common case
	  var lineA = mappingA.generatedLine;
	  var lineB = mappingB.generatedLine;
	  var columnA = mappingA.generatedColumn;
	  var columnB = mappingB.generatedColumn;
	  return lineB > lineA || lineB == lineA && columnB >= columnA ||
	         util$3.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	}

	/**
	 * A data structure to provide a sorted view of accumulated mappings in a
	 * performance conscious manner. It trades a neglibable overhead in general
	 * case for a large speedup in case of mappings being added in order.
	 */
	function MappingList$1() {
	  this._array = [];
	  this._sorted = true;
	  // Serves as infimum
	  this._last = {generatedLine: -1, generatedColumn: 0};
	}

	/**
	 * Iterate through internal items. This method takes the same arguments that
	 * `Array.prototype.forEach` takes.
	 *
	 * NOTE: The order of the mappings is NOT guaranteed.
	 */
	MappingList$1.prototype.unsortedForEach =
	  function MappingList_forEach(aCallback, aThisArg) {
	    this._array.forEach(aCallback, aThisArg);
	  };

	/**
	 * Add the given source mapping.
	 *
	 * @param Object aMapping
	 */
	MappingList$1.prototype.add = function MappingList_add(aMapping) {
	  if (generatedPositionAfter(this._last, aMapping)) {
	    this._last = aMapping;
	    this._array.push(aMapping);
	  } else {
	    this._sorted = false;
	    this._array.push(aMapping);
	  }
	};

	/**
	 * Returns the flat, sorted array of mappings. The mappings are sorted by
	 * generated position.
	 *
	 * WARNING: This method returns internal data without copying, for
	 * performance. The return value must NOT be mutated, and should be treated as
	 * an immutable borrow. If you want to take ownership, you must make your own
	 * copy.
	 */
	MappingList$1.prototype.toArray = function MappingList_toArray() {
	  if (!this._sorted) {
	    this._array.sort(util$3.compareByGeneratedPositionsInflated);
	    this._sorted = true;
	  }
	  return this._array;
	};

	mappingList.MappingList = MappingList$1;

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var base64VLQ$1 = base64Vlq;
	var util$2 = util$5;
	var ArraySet$1 = arraySet.ArraySet;
	var MappingList = mappingList.MappingList;

	/**
	 * An instance of the SourceMapGenerator represents a source map which is
	 * being built incrementally. You may pass an object with the following
	 * properties:
	 *
	 *   - file: The filename of the generated source.
	 *   - sourceRoot: A root for all relative URLs in this source map.
	 */
	function SourceMapGenerator$1(aArgs) {
	  if (!aArgs) {
	    aArgs = {};
	  }
	  this._file = util$2.getArg(aArgs, 'file', null);
	  this._sourceRoot = util$2.getArg(aArgs, 'sourceRoot', null);
	  this._skipValidation = util$2.getArg(aArgs, 'skipValidation', false);
	  this._sources = new ArraySet$1();
	  this._names = new ArraySet$1();
	  this._mappings = new MappingList();
	  this._sourcesContents = null;
	}

	SourceMapGenerator$1.prototype._version = 3;

	/**
	 * Creates a new SourceMapGenerator based on a SourceMapConsumer
	 *
	 * @param aSourceMapConsumer The SourceMap.
	 */
	SourceMapGenerator$1.fromSourceMap =
	  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	    var sourceRoot = aSourceMapConsumer.sourceRoot;
	    var generator = new SourceMapGenerator$1({
	      file: aSourceMapConsumer.file,
	      sourceRoot: sourceRoot
	    });
	    aSourceMapConsumer.eachMapping(function (mapping) {
	      var newMapping = {
	        generated: {
	          line: mapping.generatedLine,
	          column: mapping.generatedColumn
	        }
	      };

	      if (mapping.source != null) {
	        newMapping.source = mapping.source;
	        if (sourceRoot != null) {
	          newMapping.source = util$2.relative(sourceRoot, newMapping.source);
	        }

	        newMapping.original = {
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        };

	        if (mapping.name != null) {
	          newMapping.name = mapping.name;
	        }
	      }

	      generator.addMapping(newMapping);
	    });
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        generator.setSourceContent(sourceFile, content);
	      }
	    });
	    return generator;
	  };

	/**
	 * Add a single mapping from original source line and column to the generated
	 * source's line and column for this source map being created. The mapping
	 * object should have the following properties:
	 *
	 *   - generated: An object with the generated line and column positions.
	 *   - original: An object with the original line and column positions.
	 *   - source: The original source file (relative to the sourceRoot).
	 *   - name: An optional original token name for this mapping.
	 */
	SourceMapGenerator$1.prototype.addMapping =
	  function SourceMapGenerator_addMapping(aArgs) {
	    var generated = util$2.getArg(aArgs, 'generated');
	    var original = util$2.getArg(aArgs, 'original', null);
	    var source = util$2.getArg(aArgs, 'source', null);
	    var name = util$2.getArg(aArgs, 'name', null);

	    if (!this._skipValidation) {
	      this._validateMapping(generated, original, source, name);
	    }

	    if (source != null) {
	      source = String(source);
	      if (!this._sources.has(source)) {
	        this._sources.add(source);
	      }
	    }

	    if (name != null) {
	      name = String(name);
	      if (!this._names.has(name)) {
	        this._names.add(name);
	      }
	    }

	    this._mappings.add({
	      generatedLine: generated.line,
	      generatedColumn: generated.column,
	      originalLine: original != null && original.line,
	      originalColumn: original != null && original.column,
	      source: source,
	      name: name
	    });
	  };

	/**
	 * Set the source content for a source file.
	 */
	SourceMapGenerator$1.prototype.setSourceContent =
	  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	    var source = aSourceFile;
	    if (this._sourceRoot != null) {
	      source = util$2.relative(this._sourceRoot, source);
	    }

	    if (aSourceContent != null) {
	      // Add the source content to the _sourcesContents map.
	      // Create a new _sourcesContents map if the property is null.
	      if (!this._sourcesContents) {
	        this._sourcesContents = Object.create(null);
	      }
	      this._sourcesContents[util$2.toSetString(source)] = aSourceContent;
	    } else if (this._sourcesContents) {
	      // Remove the source file from the _sourcesContents map.
	      // If the _sourcesContents map is empty, set the property to null.
	      delete this._sourcesContents[util$2.toSetString(source)];
	      if (Object.keys(this._sourcesContents).length === 0) {
	        this._sourcesContents = null;
	      }
	    }
	  };

	/**
	 * Applies the mappings of a sub-source-map for a specific source file to the
	 * source map being generated. Each mapping to the supplied source file is
	 * rewritten using the supplied source map. Note: The resolution for the
	 * resulting mappings is the minimium of this map and the supplied map.
	 *
	 * @param aSourceMapConsumer The source map to be applied.
	 * @param aSourceFile Optional. The filename of the source file.
	 *        If omitted, SourceMapConsumer's file property will be used.
	 * @param aSourceMapPath Optional. The dirname of the path to the source map
	 *        to be applied. If relative, it is relative to the SourceMapConsumer.
	 *        This parameter is needed when the two source maps aren't in the same
	 *        directory, and the source map to be applied contains relative source
	 *        paths. If so, those relative source paths need to be rewritten
	 *        relative to the SourceMapGenerator.
	 */
	SourceMapGenerator$1.prototype.applySourceMap =
	  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	    var sourceFile = aSourceFile;
	    // If aSourceFile is omitted, we will use the file property of the SourceMap
	    if (aSourceFile == null) {
	      if (aSourceMapConsumer.file == null) {
	        throw new Error(
	          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	          'or the source map\'s "file" property. Both were omitted.'
	        );
	      }
	      sourceFile = aSourceMapConsumer.file;
	    }
	    var sourceRoot = this._sourceRoot;
	    // Make "sourceFile" relative if an absolute Url is passed.
	    if (sourceRoot != null) {
	      sourceFile = util$2.relative(sourceRoot, sourceFile);
	    }
	    // Applying the SourceMap can add and remove items from the sources and
	    // the names array.
	    var newSources = new ArraySet$1();
	    var newNames = new ArraySet$1();

	    // Find mappings for the "sourceFile"
	    this._mappings.unsortedForEach(function (mapping) {
	      if (mapping.source === sourceFile && mapping.originalLine != null) {
	        // Check if it can be mapped by the source map, then update the mapping.
	        var original = aSourceMapConsumer.originalPositionFor({
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        });
	        if (original.source != null) {
	          // Copy mapping
	          mapping.source = original.source;
	          if (aSourceMapPath != null) {
	            mapping.source = util$2.join(aSourceMapPath, mapping.source);
	          }
	          if (sourceRoot != null) {
	            mapping.source = util$2.relative(sourceRoot, mapping.source);
	          }
	          mapping.originalLine = original.line;
	          mapping.originalColumn = original.column;
	          if (original.name != null) {
	            mapping.name = original.name;
	          }
	        }
	      }

	      var source = mapping.source;
	      if (source != null && !newSources.has(source)) {
	        newSources.add(source);
	      }

	      var name = mapping.name;
	      if (name != null && !newNames.has(name)) {
	        newNames.add(name);
	      }

	    }, this);
	    this._sources = newSources;
	    this._names = newNames;

	    // Copy sourcesContents of applied map.
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aSourceMapPath != null) {
	          sourceFile = util$2.join(aSourceMapPath, sourceFile);
	        }
	        if (sourceRoot != null) {
	          sourceFile = util$2.relative(sourceRoot, sourceFile);
	        }
	        this.setSourceContent(sourceFile, content);
	      }
	    }, this);
	  };

	/**
	 * A mapping can have one of the three levels of data:
	 *
	 *   1. Just the generated position.
	 *   2. The Generated position, original position, and original source.
	 *   3. Generated and original position, original source, as well as a name
	 *      token.
	 *
	 * To maintain consistency, we validate that any new mapping being added falls
	 * in to one of these categories.
	 */
	SourceMapGenerator$1.prototype._validateMapping =
	  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                              aName) {
	    // When aOriginal is truthy but has empty values for .line and .column,
	    // it is most likely a programmer error. In this case we throw a very
	    // specific error message to try to guide them the right way.
	    // For example: https://github.com/Polymer/polymer-bundler/pull/519
	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
	        throw new Error(
	            'original.line and original.column are not numbers -- you probably meant to omit ' +
	            'the original mapping entirely and only map the generated position. If so, pass ' +
	            'null for the original mapping instead of an object with empty or null values.'
	        );
	    }

	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	        && aGenerated.line > 0 && aGenerated.column >= 0
	        && !aOriginal && !aSource && !aName) {
	      // Case 1.
	      return;
	    }
	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	             && aGenerated.line > 0 && aGenerated.column >= 0
	             && aOriginal.line > 0 && aOriginal.column >= 0
	             && aSource) {
	      // Cases 2 and 3.
	      return;
	    }
	    else {
	      throw new Error('Invalid mapping: ' + JSON.stringify({
	        generated: aGenerated,
	        source: aSource,
	        original: aOriginal,
	        name: aName
	      }));
	    }
	  };

	/**
	 * Serialize the accumulated mappings in to the stream of base 64 VLQs
	 * specified by the source map format.
	 */
	SourceMapGenerator$1.prototype._serializeMappings =
	  function SourceMapGenerator_serializeMappings() {
	    var previousGeneratedColumn = 0;
	    var previousGeneratedLine = 1;
	    var previousOriginalColumn = 0;
	    var previousOriginalLine = 0;
	    var previousName = 0;
	    var previousSource = 0;
	    var result = '';
	    var next;
	    var mapping;
	    var nameIdx;
	    var sourceIdx;

	    var mappings = this._mappings.toArray();
	    for (var i = 0, len = mappings.length; i < len; i++) {
	      mapping = mappings[i];
	      next = '';

	      if (mapping.generatedLine !== previousGeneratedLine) {
	        previousGeneratedColumn = 0;
	        while (mapping.generatedLine !== previousGeneratedLine) {
	          next += ';';
	          previousGeneratedLine++;
	        }
	      }
	      else {
	        if (i > 0) {
	          if (!util$2.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	            continue;
	          }
	          next += ',';
	        }
	      }

	      next += base64VLQ$1.encode(mapping.generatedColumn
	                                 - previousGeneratedColumn);
	      previousGeneratedColumn = mapping.generatedColumn;

	      if (mapping.source != null) {
	        sourceIdx = this._sources.indexOf(mapping.source);
	        next += base64VLQ$1.encode(sourceIdx - previousSource);
	        previousSource = sourceIdx;

	        // lines are stored 0-based in SourceMap spec version 3
	        next += base64VLQ$1.encode(mapping.originalLine - 1
	                                   - previousOriginalLine);
	        previousOriginalLine = mapping.originalLine - 1;

	        next += base64VLQ$1.encode(mapping.originalColumn
	                                   - previousOriginalColumn);
	        previousOriginalColumn = mapping.originalColumn;

	        if (mapping.name != null) {
	          nameIdx = this._names.indexOf(mapping.name);
	          next += base64VLQ$1.encode(nameIdx - previousName);
	          previousName = nameIdx;
	        }
	      }

	      result += next;
	    }

	    return result;
	  };

	SourceMapGenerator$1.prototype._generateSourcesContent =
	  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	    return aSources.map(function (source) {
	      if (!this._sourcesContents) {
	        return null;
	      }
	      if (aSourceRoot != null) {
	        source = util$2.relative(aSourceRoot, source);
	      }
	      var key = util$2.toSetString(source);
	      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
	        ? this._sourcesContents[key]
	        : null;
	    }, this);
	  };

	/**
	 * Externalize the source map.
	 */
	SourceMapGenerator$1.prototype.toJSON =
	  function SourceMapGenerator_toJSON() {
	    var map = {
	      version: this._version,
	      sources: this._sources.toArray(),
	      names: this._names.toArray(),
	      mappings: this._serializeMappings()
	    };
	    if (this._file != null) {
	      map.file = this._file;
	    }
	    if (this._sourceRoot != null) {
	      map.sourceRoot = this._sourceRoot;
	    }
	    if (this._sourcesContents) {
	      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	    }

	    return map;
	  };

	/**
	 * Render the source map being generated to a string.
	 */
	SourceMapGenerator$1.prototype.toString =
	  function SourceMapGenerator_toString() {
	    return JSON.stringify(this.toJSON());
	  };

	sourceMapGenerator.SourceMapGenerator = SourceMapGenerator$1;

	var sourceMapConsumer = {};

	var binarySearch$1 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	(function (exports) {
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	exports.GREATEST_LOWER_BOUND = 1;
	exports.LEAST_UPPER_BOUND = 2;

	/**
	 * Recursive implementation of binary search.
	 *
	 * @param aLow Indices here and lower do not contain the needle.
	 * @param aHigh Indices here and higher do not contain the needle.
	 * @param aNeedle The element being searched for.
	 * @param aHaystack The non-empty array being searched.
	 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 */
	function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	  // This function terminates when one of the following is true:
	  //
	  //   1. We find the exact element we are looking for.
	  //
	  //   2. We did not find the exact element, but we can return the index of
	  //      the next-closest element.
	  //
	  //   3. We did not find the exact element, and there is no next-closest
	  //      element than the one we are searching for, so we return -1.
	  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	  var cmp = aCompare(aNeedle, aHaystack[mid], true);
	  if (cmp === 0) {
	    // Found the element we are looking for.
	    return mid;
	  }
	  else if (cmp > 0) {
	    // Our needle is greater than aHaystack[mid].
	    if (aHigh - mid > 1) {
	      // The element is in the upper half.
	      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	    }

	    // The exact needle element was not found in this haystack. Determine if
	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return aHigh < aHaystack.length ? aHigh : -1;
	    } else {
	      return mid;
	    }
	  }
	  else {
	    // Our needle is less than aHaystack[mid].
	    if (mid - aLow > 1) {
	      // The element is in the lower half.
	      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	    }

	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return mid;
	    } else {
	      return aLow < 0 ? -1 : aLow;
	    }
	  }
	}

	/**
	 * This is an implementation of binary search which will always try and return
	 * the index of the closest element if there is no exact hit. This is because
	 * mappings between original and generated line/col pairs are single points,
	 * and there is an implicit region between each of them, so a miss just means
	 * that you aren't on the very start of a region.
	 *
	 * @param aNeedle The element you are looking for.
	 * @param aHaystack The array that is being searched.
	 * @param aCompare A function which takes the needle and an element in the
	 *     array and returns -1, 0, or 1 depending on whether the needle is less
	 *     than, equal to, or greater than the element, respectively.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	 */
	exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	  if (aHaystack.length === 0) {
	    return -1;
	  }

	  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	  if (index < 0) {
	    return -1;
	  }

	  // We have found either the exact element, or the next-closest element than
	  // the one we are searching for. However, there may be more than one such
	  // element. Make sure we always return the smallest of these.
	  while (index - 1 >= 0) {
	    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	      break;
	    }
	    --index;
	  }

	  return index;
	};
	}(binarySearch$1));

	var quickSort$1 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	// It turns out that some (most?) JavaScript engines don't self-host
	// `Array.prototype.sort`. This makes sense because C++ will likely remain
	// faster than JS when doing raw CPU-intensive sorting. However, when using a
	// custom comparator function, calling back and forth between the VM's C++ and
	// JIT'd JS is rather slow *and* loses JIT type information, resulting in
	// worse generated code for the comparator function than would be optimal. In
	// fact, when sorting with a comparator, these costs outweigh the benefits of
	// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
	// a ~3500ms mean speed-up in `bench/bench.html`.

	/**
	 * Swap the elements indexed by `x` and `y` in the array `ary`.
	 *
	 * @param {Array} ary
	 *        The array.
	 * @param {Number} x
	 *        The index of the first item.
	 * @param {Number} y
	 *        The index of the second item.
	 */
	function swap(ary, x, y) {
	  var temp = ary[x];
	  ary[x] = ary[y];
	  ary[y] = temp;
	}

	/**
	 * Returns a random integer within the range `low .. high` inclusive.
	 *
	 * @param {Number} low
	 *        The lower bound on the range.
	 * @param {Number} high
	 *        The upper bound on the range.
	 */
	function randomIntInRange(low, high) {
	  return Math.round(low + (Math.random() * (high - low)));
	}

	/**
	 * The Quick Sort algorithm.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 * @param {Number} p
	 *        Start index of the array
	 * @param {Number} r
	 *        End index of the array
	 */
	function doQuickSort(ary, comparator, p, r) {
	  // If our lower bound is less than our upper bound, we (1) partition the
	  // array into two pieces and (2) recurse on each half. If it is not, this is
	  // the empty array and our base case.

	  if (p < r) {
	    // (1) Partitioning.
	    //
	    // The partitioning chooses a pivot between `p` and `r` and moves all
	    // elements that are less than or equal to the pivot to the before it, and
	    // all the elements that are greater than it after it. The effect is that
	    // once partition is done, the pivot is in the exact place it will be when
	    // the array is put in sorted order, and it will not need to be moved
	    // again. This runs in O(n) time.

	    // Always choose a random pivot so that an input array which is reverse
	    // sorted does not cause O(n^2) running time.
	    var pivotIndex = randomIntInRange(p, r);
	    var i = p - 1;

	    swap(ary, pivotIndex, r);
	    var pivot = ary[r];

	    // Immediately after `j` is incremented in this loop, the following hold
	    // true:
	    //
	    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
	    //
	    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
	    for (var j = p; j < r; j++) {
	      if (comparator(ary[j], pivot) <= 0) {
	        i += 1;
	        swap(ary, i, j);
	      }
	    }

	    swap(ary, i + 1, j);
	    var q = i + 1;

	    // (2) Recurse on each half.

	    doQuickSort(ary, comparator, p, q - 1);
	    doQuickSort(ary, comparator, q + 1, r);
	  }
	}

	/**
	 * Sort the given array in-place with the given comparator function.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 */
	quickSort$1.quickSort = function (ary, comparator) {
	  doQuickSort(ary, comparator, 0, ary.length - 1);
	};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util$1 = util$5;
	var binarySearch = binarySearch$1;
	var ArraySet = arraySet.ArraySet;
	var base64VLQ = base64Vlq;
	var quickSort = quickSort$1.quickSort;

	function SourceMapConsumer(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }

	  return sourceMap.sections != null
	    ? new IndexedSourceMapConsumer(sourceMap)
	    : new BasicSourceMapConsumer(sourceMap);
	}

	SourceMapConsumer.fromSourceMap = function(aSourceMap) {
	  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
	};

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	SourceMapConsumer.prototype._version = 3;

	// `__generatedMappings` and `__originalMappings` are arrays that hold the
	// parsed mapping coordinates from the source map's "mappings" attribute. They
	// are lazily instantiated, accessed via the `_generatedMappings` and
	// `_originalMappings` getters respectively, and we only parse the mappings
	// and create these arrays once queried for a source location. We jump through
	// these hoops because there can be many thousands of mappings, and parsing
	// them is expensive, so we only want to do it if we must.
	//
	// Each object in the arrays is of the form:
	//
	//     {
	//       generatedLine: The line number in the generated code,
	//       generatedColumn: The column number in the generated code,
	//       source: The path to the original source file that generated this
	//               chunk of code,
	//       originalLine: The line number in the original source that
	//                     corresponds to this chunk of generated code,
	//       originalColumn: The column number in the original source that
	//                       corresponds to this chunk of generated code,
	//       name: The name of the original symbol which generated this chunk of
	//             code.
	//     }
	//
	// All properties except for `generatedLine` and `generatedColumn` can be
	// `null`.
	//
	// `_generatedMappings` is ordered by the generated positions.
	//
	// `_originalMappings` is ordered by the original positions.

	SourceMapConsumer.prototype.__generatedMappings = null;
	Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
	  get: function () {
	    if (!this.__generatedMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }

	    return this.__generatedMappings;
	  }
	});

	SourceMapConsumer.prototype.__originalMappings = null;
	Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
	  get: function () {
	    if (!this.__originalMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }

	    return this.__originalMappings;
	  }
	});

	SourceMapConsumer.prototype._charIsMappingSeparator =
	  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	    var c = aStr.charAt(index);
	    return c === ";" || c === ",";
	  };

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	SourceMapConsumer.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    throw new Error("Subclasses must implement _parseMappings");
	  };

	SourceMapConsumer.GENERATED_ORDER = 1;
	SourceMapConsumer.ORIGINAL_ORDER = 2;

	SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
	SourceMapConsumer.LEAST_UPPER_BOUND = 2;

	/**
	 * Iterate over each mapping between an original source/line/column and a
	 * generated line/column in this source map.
	 *
	 * @param Function aCallback
	 *        The function that is called with each mapping.
	 * @param Object aContext
	 *        Optional. If specified, this object will be the value of `this` every
	 *        time that `aCallback` is called.
	 * @param aOrder
	 *        Either `SourceMapConsumer.GENERATED_ORDER` or
	 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	 *        iterate over the mappings sorted by the generated file's line/column
	 *        order or the original's source/line/column order, respectively. Defaults to
	 *        `SourceMapConsumer.GENERATED_ORDER`.
	 */
	SourceMapConsumer.prototype.eachMapping =
	  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	    var context = aContext || null;
	    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

	    var mappings;
	    switch (order) {
	    case SourceMapConsumer.GENERATED_ORDER:
	      mappings = this._generatedMappings;
	      break;
	    case SourceMapConsumer.ORIGINAL_ORDER:
	      mappings = this._originalMappings;
	      break;
	    default:
	      throw new Error("Unknown order of iteration.");
	    }

	    var sourceRoot = this.sourceRoot;
	    mappings.map(function (mapping) {
	      var source = mapping.source === null ? null : this._sources.at(mapping.source);
	      if (source != null && sourceRoot != null) {
	        source = util$1.join(sourceRoot, source);
	      }
	      return {
	        source: source,
	        generatedLine: mapping.generatedLine,
	        generatedColumn: mapping.generatedColumn,
	        originalLine: mapping.originalLine,
	        originalColumn: mapping.originalColumn,
	        name: mapping.name === null ? null : this._names.at(mapping.name)
	      };
	    }, this).forEach(aCallback, context);
	  };

	/**
	 * Returns all generated line and column information for the original source,
	 * line, and column provided. If no column is provided, returns all mappings
	 * corresponding to a either the line we are searching for or the next
	 * closest line that has any mappings. Otherwise, returns all mappings
	 * corresponding to the given line and either the column we are searching for
	 * or the next closest column that has any offsets.
	 *
	 * The only argument is an object with the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: Optional. the column number in the original source.
	 *
	 * and an array of objects is returned, each with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	SourceMapConsumer.prototype.allGeneratedPositionsFor =
	  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	    var line = util$1.getArg(aArgs, 'line');

	    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	    // returns the index of the closest mapping less than the needle. By
	    // setting needle.originalColumn to 0, we thus find the last mapping for
	    // the given line, provided such a mapping exists.
	    var needle = {
	      source: util$1.getArg(aArgs, 'source'),
	      originalLine: line,
	      originalColumn: util$1.getArg(aArgs, 'column', 0)
	    };

	    if (this.sourceRoot != null) {
	      needle.source = util$1.relative(this.sourceRoot, needle.source);
	    }
	    if (!this._sources.has(needle.source)) {
	      return [];
	    }
	    needle.source = this._sources.indexOf(needle.source);

	    var mappings = [];

	    var index = this._findMapping(needle,
	                                  this._originalMappings,
	                                  "originalLine",
	                                  "originalColumn",
	                                  util$1.compareByOriginalPositions,
	                                  binarySearch.LEAST_UPPER_BOUND);
	    if (index >= 0) {
	      var mapping = this._originalMappings[index];

	      if (aArgs.column === undefined) {
	        var originalLine = mapping.originalLine;

	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we found. Since
	        // mappings are sorted, this is guaranteed to find all mappings for
	        // the line we found.
	        while (mapping && mapping.originalLine === originalLine) {
	          mappings.push({
	            line: util$1.getArg(mapping, 'generatedLine', null),
	            column: util$1.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util$1.getArg(mapping, 'lastGeneratedColumn', null)
	          });

	          mapping = this._originalMappings[++index];
	        }
	      } else {
	        var originalColumn = mapping.originalColumn;

	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we were searching for.
	        // Since mappings are sorted, this is guaranteed to find all mappings for
	        // the line we are searching for.
	        while (mapping &&
	               mapping.originalLine === line &&
	               mapping.originalColumn == originalColumn) {
	          mappings.push({
	            line: util$1.getArg(mapping, 'generatedLine', null),
	            column: util$1.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util$1.getArg(mapping, 'lastGeneratedColumn', null)
	          });

	          mapping = this._originalMappings[++index];
	        }
	      }
	    }

	    return mappings;
	  };

	sourceMapConsumer.SourceMapConsumer = SourceMapConsumer;

	/**
	 * A BasicSourceMapConsumer instance represents a parsed source map which we can
	 * query for information about the original file positions by giving it a file
	 * position in the generated source.
	 *
	 * The only parameter is the raw source map (either as a JSON string, or
	 * already parsed to an object). According to the spec, source maps have the
	 * following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - sources: An array of URLs to the original source files.
	 *   - names: An array of identifiers which can be referrenced by individual mappings.
	 *   - sourceRoot: Optional. The URL root from which all sources are relative.
	 *   - sourcesContent: Optional. An array of contents of the original source files.
	 *   - mappings: A string of base64 VLQs which contain the actual mappings.
	 *   - file: Optional. The generated file this source map is associated with.
	 *
	 * Here is an example source map, taken from the source map spec[0]:
	 *
	 *     {
	 *       version : 3,
	 *       file: "out.js",
	 *       sourceRoot : "",
	 *       sources: ["foo.js", "bar.js"],
	 *       names: ["src", "maps", "are", "fun"],
	 *       mappings: "AA,AB;;ABCDE;"
	 *     }
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	 */
	function BasicSourceMapConsumer(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }

	  var version = util$1.getArg(sourceMap, 'version');
	  var sources = util$1.getArg(sourceMap, 'sources');
	  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	  // requires the array) to play nice here.
	  var names = util$1.getArg(sourceMap, 'names', []);
	  var sourceRoot = util$1.getArg(sourceMap, 'sourceRoot', null);
	  var sourcesContent = util$1.getArg(sourceMap, 'sourcesContent', null);
	  var mappings = util$1.getArg(sourceMap, 'mappings');
	  var file = util$1.getArg(sourceMap, 'file', null);

	  // Once again, Sass deviates from the spec and supplies the version as a
	  // string rather than a number, so we use loose equality checking here.
	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }

	  sources = sources
	    .map(String)
	    // Some source maps produce relative source paths like "./foo.js" instead of
	    // "foo.js".  Normalize these first so that future comparisons will succeed.
	    // See bugzil.la/1090768.
	    .map(util$1.normalize)
	    // Always ensure that absolute sources are internally stored relative to
	    // the source root, if the source root is absolute. Not doing this would
	    // be particularly problematic when the source root is a prefix of the
	    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
	    .map(function (source) {
	      return sourceRoot && util$1.isAbsolute(sourceRoot) && util$1.isAbsolute(source)
	        ? util$1.relative(sourceRoot, source)
	        : source;
	    });

	  // Pass `true` below to allow duplicate names and sources. While source maps
	  // are intended to be compressed and deduplicated, the TypeScript compiler
	  // sometimes generates source maps with duplicates in them. See Github issue
	  // #72 and bugzil.la/889492.
	  this._names = ArraySet.fromArray(names.map(String), true);
	  this._sources = ArraySet.fromArray(sources, true);

	  this.sourceRoot = sourceRoot;
	  this.sourcesContent = sourcesContent;
	  this._mappings = mappings;
	  this.file = file;
	}

	BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

	/**
	 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	 *
	 * @param SourceMapGenerator aSourceMap
	 *        The source map that will be consumed.
	 * @returns BasicSourceMapConsumer
	 */
	BasicSourceMapConsumer.fromSourceMap =
	  function SourceMapConsumer_fromSourceMap(aSourceMap) {
	    var smc = Object.create(BasicSourceMapConsumer.prototype);

	    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	    smc.sourceRoot = aSourceMap._sourceRoot;
	    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                            smc.sourceRoot);
	    smc.file = aSourceMap._file;

	    // Because we are modifying the entries (by converting string sources and
	    // names to indices into the sources and names ArraySets), we have to make
	    // a copy of the entry or else bad things happen. Shared mutable state
	    // strikes again! See github issue #191.

	    var generatedMappings = aSourceMap._mappings.toArray().slice();
	    var destGeneratedMappings = smc.__generatedMappings = [];
	    var destOriginalMappings = smc.__originalMappings = [];

	    for (var i = 0, length = generatedMappings.length; i < length; i++) {
	      var srcMapping = generatedMappings[i];
	      var destMapping = new Mapping;
	      destMapping.generatedLine = srcMapping.generatedLine;
	      destMapping.generatedColumn = srcMapping.generatedColumn;

	      if (srcMapping.source) {
	        destMapping.source = sources.indexOf(srcMapping.source);
	        destMapping.originalLine = srcMapping.originalLine;
	        destMapping.originalColumn = srcMapping.originalColumn;

	        if (srcMapping.name) {
	          destMapping.name = names.indexOf(srcMapping.name);
	        }

	        destOriginalMappings.push(destMapping);
	      }

	      destGeneratedMappings.push(destMapping);
	    }

	    quickSort(smc.__originalMappings, util$1.compareByOriginalPositions);

	    return smc;
	  };

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	BasicSourceMapConsumer.prototype._version = 3;

	/**
	 * The list of original sources.
	 */
	Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
	  get: function () {
	    return this._sources.toArray().map(function (s) {
	      return this.sourceRoot != null ? util$1.join(this.sourceRoot, s) : s;
	    }, this);
	  }
	});

	/**
	 * Provide the JIT with a nice shape / hidden class.
	 */
	function Mapping() {
	  this.generatedLine = 0;
	  this.generatedColumn = 0;
	  this.source = null;
	  this.originalLine = null;
	  this.originalColumn = null;
	  this.name = null;
	}

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	BasicSourceMapConsumer.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    var generatedLine = 1;
	    var previousGeneratedColumn = 0;
	    var previousOriginalLine = 0;
	    var previousOriginalColumn = 0;
	    var previousSource = 0;
	    var previousName = 0;
	    var length = aStr.length;
	    var index = 0;
	    var cachedSegments = {};
	    var temp = {};
	    var originalMappings = [];
	    var generatedMappings = [];
	    var mapping, str, segment, end, value;

	    while (index < length) {
	      if (aStr.charAt(index) === ';') {
	        generatedLine++;
	        index++;
	        previousGeneratedColumn = 0;
	      }
	      else if (aStr.charAt(index) === ',') {
	        index++;
	      }
	      else {
	        mapping = new Mapping();
	        mapping.generatedLine = generatedLine;

	        // Because each offset is encoded relative to the previous one,
	        // many segments often have the same encoding. We can exploit this
	        // fact by caching the parsed variable length fields of each segment,
	        // allowing us to avoid a second parse if we encounter the same
	        // segment again.
	        for (end = index; end < length; end++) {
	          if (this._charIsMappingSeparator(aStr, end)) {
	            break;
	          }
	        }
	        str = aStr.slice(index, end);

	        segment = cachedSegments[str];
	        if (segment) {
	          index += str.length;
	        } else {
	          segment = [];
	          while (index < end) {
	            base64VLQ.decode(aStr, index, temp);
	            value = temp.value;
	            index = temp.rest;
	            segment.push(value);
	          }

	          if (segment.length === 2) {
	            throw new Error('Found a source, but no line and column');
	          }

	          if (segment.length === 3) {
	            throw new Error('Found a source and line, but no column');
	          }

	          cachedSegments[str] = segment;
	        }

	        // Generated column.
	        mapping.generatedColumn = previousGeneratedColumn + segment[0];
	        previousGeneratedColumn = mapping.generatedColumn;

	        if (segment.length > 1) {
	          // Original source.
	          mapping.source = previousSource + segment[1];
	          previousSource += segment[1];

	          // Original line.
	          mapping.originalLine = previousOriginalLine + segment[2];
	          previousOriginalLine = mapping.originalLine;
	          // Lines are stored 0-based
	          mapping.originalLine += 1;

	          // Original column.
	          mapping.originalColumn = previousOriginalColumn + segment[3];
	          previousOriginalColumn = mapping.originalColumn;

	          if (segment.length > 4) {
	            // Original name.
	            mapping.name = previousName + segment[4];
	            previousName += segment[4];
	          }
	        }

	        generatedMappings.push(mapping);
	        if (typeof mapping.originalLine === 'number') {
	          originalMappings.push(mapping);
	        }
	      }
	    }

	    quickSort(generatedMappings, util$1.compareByGeneratedPositionsDeflated);
	    this.__generatedMappings = generatedMappings;

	    quickSort(originalMappings, util$1.compareByOriginalPositions);
	    this.__originalMappings = originalMappings;
	  };

	/**
	 * Find the mapping that best matches the hypothetical "needle" mapping that
	 * we are searching for in the given "haystack" of mappings.
	 */
	BasicSourceMapConsumer.prototype._findMapping =
	  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                         aColumnName, aComparator, aBias) {
	    // To return the position we are searching for, we must first find the
	    // mapping for the given position and then return the opposite position it
	    // points to. Because the mappings are sorted, we can use binary search to
	    // find the best mapping.

	    if (aNeedle[aLineName] <= 0) {
	      throw new TypeError('Line must be greater than or equal to 1, got '
	                          + aNeedle[aLineName]);
	    }
	    if (aNeedle[aColumnName] < 0) {
	      throw new TypeError('Column must be greater than or equal to 0, got '
	                          + aNeedle[aColumnName]);
	    }

	    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
	  };

	/**
	 * Compute the last column for each generated mapping. The last column is
	 * inclusive.
	 */
	BasicSourceMapConsumer.prototype.computeColumnSpans =
	  function SourceMapConsumer_computeColumnSpans() {
	    for (var index = 0; index < this._generatedMappings.length; ++index) {
	      var mapping = this._generatedMappings[index];

	      // Mappings do not contain a field for the last generated columnt. We
	      // can come up with an optimistic estimate, however, by assuming that
	      // mappings are contiguous (i.e. given two consecutive mappings, the
	      // first mapping ends where the second one starts).
	      if (index + 1 < this._generatedMappings.length) {
	        var nextMapping = this._generatedMappings[index + 1];

	        if (mapping.generatedLine === nextMapping.generatedLine) {
	          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	          continue;
	        }
	      }

	      // The last mapping for each line spans the entire line.
	      mapping.lastGeneratedColumn = Infinity;
	    }
	  };

	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.
	 *   - column: The column number in the generated source.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.
	 *   - column: The column number in the original source, or null.
	 *   - name: The original identifier, or null.
	 */
	BasicSourceMapConsumer.prototype.originalPositionFor =
	  function SourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util$1.getArg(aArgs, 'line'),
	      generatedColumn: util$1.getArg(aArgs, 'column')
	    };

	    var index = this._findMapping(
	      needle,
	      this._generatedMappings,
	      "generatedLine",
	      "generatedColumn",
	      util$1.compareByGeneratedPositionsDeflated,
	      util$1.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	    );

	    if (index >= 0) {
	      var mapping = this._generatedMappings[index];

	      if (mapping.generatedLine === needle.generatedLine) {
	        var source = util$1.getArg(mapping, 'source', null);
	        if (source !== null) {
	          source = this._sources.at(source);
	          if (this.sourceRoot != null) {
	            source = util$1.join(this.sourceRoot, source);
	          }
	        }
	        var name = util$1.getArg(mapping, 'name', null);
	        if (name !== null) {
	          name = this._names.at(name);
	        }
	        return {
	          source: source,
	          line: util$1.getArg(mapping, 'originalLine', null),
	          column: util$1.getArg(mapping, 'originalColumn', null),
	          name: name
	        };
	      }
	    }

	    return {
	      source: null,
	      line: null,
	      column: null,
	      name: null
	    };
	  };

	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
	  function BasicSourceMapConsumer_hasContentsOfAllSources() {
	    if (!this.sourcesContent) {
	      return false;
	    }
	    return this.sourcesContent.length >= this._sources.size() &&
	      !this.sourcesContent.some(function (sc) { return sc == null; });
	  };

	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	BasicSourceMapConsumer.prototype.sourceContentFor =
	  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    if (!this.sourcesContent) {
	      return null;
	    }

	    if (this.sourceRoot != null) {
	      aSource = util$1.relative(this.sourceRoot, aSource);
	    }

	    if (this._sources.has(aSource)) {
	      return this.sourcesContent[this._sources.indexOf(aSource)];
	    }

	    var url;
	    if (this.sourceRoot != null
	        && (url = util$1.urlParse(this.sourceRoot))) {
	      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	      // many users. We can help them out when they expect file:// URIs to
	      // behave like it would if they were running a local HTTP server. See
	      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	      var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
	      if (url.scheme == "file"
	          && this._sources.has(fileUriAbsPath)) {
	        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	      }

	      if ((!url.path || url.path == "/")
	          && this._sources.has("/" + aSource)) {
	        return this.sourcesContent[this._sources.indexOf("/" + aSource)];
	      }
	    }

	    // This function is used recursively from
	    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	    // don't want to throw if we can't find the source - we just want to
	    // return null, so we provide a flag to exit gracefully.
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };

	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: The column number in the original source.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	BasicSourceMapConsumer.prototype.generatedPositionFor =
	  function SourceMapConsumer_generatedPositionFor(aArgs) {
	    var source = util$1.getArg(aArgs, 'source');
	    if (this.sourceRoot != null) {
	      source = util$1.relative(this.sourceRoot, source);
	    }
	    if (!this._sources.has(source)) {
	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    }
	    source = this._sources.indexOf(source);

	    var needle = {
	      source: source,
	      originalLine: util$1.getArg(aArgs, 'line'),
	      originalColumn: util$1.getArg(aArgs, 'column')
	    };

	    var index = this._findMapping(
	      needle,
	      this._originalMappings,
	      "originalLine",
	      "originalColumn",
	      util$1.compareByOriginalPositions,
	      util$1.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	    );

	    if (index >= 0) {
	      var mapping = this._originalMappings[index];

	      if (mapping.source === needle.source) {
	        return {
	          line: util$1.getArg(mapping, 'generatedLine', null),
	          column: util$1.getArg(mapping, 'generatedColumn', null),
	          lastColumn: util$1.getArg(mapping, 'lastGeneratedColumn', null)
	        };
	      }
	    }

	    return {
	      line: null,
	      column: null,
	      lastColumn: null
	    };
	  };

	sourceMapConsumer.BasicSourceMapConsumer = BasicSourceMapConsumer;

	/**
	 * An IndexedSourceMapConsumer instance represents a parsed source map which
	 * we can query for information. It differs from BasicSourceMapConsumer in
	 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	 * input.
	 *
	 * The only parameter is a raw source map (either as a JSON string, or already
	 * parsed to an object). According to the spec for indexed source maps, they
	 * have the following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - file: Optional. The generated file this source map is associated with.
	 *   - sections: A list of section definitions.
	 *
	 * Each value under the "sections" field has two fields:
	 *   - offset: The offset into the original specified at which this section
	 *       begins to apply, defined as an object with a "line" and "column"
	 *       field.
	 *   - map: A source map definition. This source map could also be indexed,
	 *       but doesn't have to be.
	 *
	 * Instead of the "map" field, it's also possible to have a "url" field
	 * specifying a URL to retrieve a source map from, but that's currently
	 * unsupported.
	 *
	 * Here's an example source map, taken from the source map spec[0], but
	 * modified to omit a section which uses the "url" field.
	 *
	 *  {
	 *    version : 3,
	 *    file: "app.js",
	 *    sections: [{
	 *      offset: {line:100, column:10},
	 *      map: {
	 *        version : 3,
	 *        file: "section.js",
	 *        sources: ["foo.js", "bar.js"],
	 *        names: ["src", "maps", "are", "fun"],
	 *        mappings: "AAAA,E;;ABCDE;"
	 *      }
	 *    }],
	 *  }
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	 */
	function IndexedSourceMapConsumer(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }

	  var version = util$1.getArg(sourceMap, 'version');
	  var sections = util$1.getArg(sourceMap, 'sections');

	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }

	  this._sources = new ArraySet();
	  this._names = new ArraySet();

	  var lastOffset = {
	    line: -1,
	    column: 0
	  };
	  this._sections = sections.map(function (s) {
	    if (s.url) {
	      // The url field will require support for asynchronicity.
	      // See https://github.com/mozilla/source-map/issues/16
	      throw new Error('Support for url field in sections not implemented.');
	    }
	    var offset = util$1.getArg(s, 'offset');
	    var offsetLine = util$1.getArg(offset, 'line');
	    var offsetColumn = util$1.getArg(offset, 'column');

	    if (offsetLine < lastOffset.line ||
	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	      throw new Error('Section offsets must be ordered and non-overlapping.');
	    }
	    lastOffset = offset;

	    return {
	      generatedOffset: {
	        // The offset fields are 0-based, but we use 1-based indices when
	        // encoding/decoding from VLQ.
	        generatedLine: offsetLine + 1,
	        generatedColumn: offsetColumn + 1
	      },
	      consumer: new SourceMapConsumer(util$1.getArg(s, 'map'))
	    }
	  });
	}

	IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	IndexedSourceMapConsumer.prototype._version = 3;

	/**
	 * The list of original sources.
	 */
	Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
	  get: function () {
	    var sources = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	        sources.push(this._sections[i].consumer.sources[j]);
	      }
	    }
	    return sources;
	  }
	});

	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.
	 *   - column: The column number in the generated source.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.
	 *   - column: The column number in the original source, or null.
	 *   - name: The original identifier, or null.
	 */
	IndexedSourceMapConsumer.prototype.originalPositionFor =
	  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util$1.getArg(aArgs, 'line'),
	      generatedColumn: util$1.getArg(aArgs, 'column')
	    };

	    // Find the section containing the generated position we're trying to map
	    // to an original position.
	    var sectionIndex = binarySearch.search(needle, this._sections,
	      function(needle, section) {
	        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	        if (cmp) {
	          return cmp;
	        }

	        return (needle.generatedColumn -
	                section.generatedOffset.generatedColumn);
	      });
	    var section = this._sections[sectionIndex];

	    if (!section) {
	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    }

	    return section.consumer.originalPositionFor({
	      line: needle.generatedLine -
	        (section.generatedOffset.generatedLine - 1),
	      column: needle.generatedColumn -
	        (section.generatedOffset.generatedLine === needle.generatedLine
	         ? section.generatedOffset.generatedColumn - 1
	         : 0),
	      bias: aArgs.bias
	    });
	  };

	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
	  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	    return this._sections.every(function (s) {
	      return s.consumer.hasContentsOfAllSources();
	    });
	  };

	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	IndexedSourceMapConsumer.prototype.sourceContentFor =
	  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];

	      var content = section.consumer.sourceContentFor(aSource, true);
	      if (content) {
	        return content;
	      }
	    }
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };

	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: The column number in the original source.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	IndexedSourceMapConsumer.prototype.generatedPositionFor =
	  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];

	      // Only consider this section if the requested source is in the list of
	      // sources of the consumer.
	      if (section.consumer.sources.indexOf(util$1.getArg(aArgs, 'source')) === -1) {
	        continue;
	      }
	      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	      if (generatedPosition) {
	        var ret = {
	          line: generatedPosition.line +
	            (section.generatedOffset.generatedLine - 1),
	          column: generatedPosition.column +
	            (section.generatedOffset.generatedLine === generatedPosition.line
	             ? section.generatedOffset.generatedColumn - 1
	             : 0)
	        };
	        return ret;
	      }
	    }

	    return {
	      line: null,
	      column: null
	    };
	  };

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	IndexedSourceMapConsumer.prototype._parseMappings =
	  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    this.__generatedMappings = [];
	    this.__originalMappings = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	      var sectionMappings = section.consumer._generatedMappings;
	      for (var j = 0; j < sectionMappings.length; j++) {
	        var mapping = sectionMappings[j];

	        var source = section.consumer._sources.at(mapping.source);
	        if (section.consumer.sourceRoot !== null) {
	          source = util$1.join(section.consumer.sourceRoot, source);
	        }
	        this._sources.add(source);
	        source = this._sources.indexOf(source);

	        var name = section.consumer._names.at(mapping.name);
	        this._names.add(name);
	        name = this._names.indexOf(name);

	        // The mappings coming from the consumer for the section have
	        // generated positions relative to the start of the section, so we
	        // need to offset them to be relative to the start of the concatenated
	        // generated file.
	        var adjustedMapping = {
	          source: source,
	          generatedLine: mapping.generatedLine +
	            (section.generatedOffset.generatedLine - 1),
	          generatedColumn: mapping.generatedColumn +
	            (section.generatedOffset.generatedLine === mapping.generatedLine
	            ? section.generatedOffset.generatedColumn - 1
	            : 0),
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: name
	        };

	        this.__generatedMappings.push(adjustedMapping);
	        if (typeof adjustedMapping.originalLine === 'number') {
	          this.__originalMappings.push(adjustedMapping);
	        }
	      }
	    }

	    quickSort(this.__generatedMappings, util$1.compareByGeneratedPositionsDeflated);
	    quickSort(this.__originalMappings, util$1.compareByOriginalPositions);
	  };

	sourceMapConsumer.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

	var sourceNode = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var SourceMapGenerator = sourceMapGenerator.SourceMapGenerator;
	var util = util$5;

	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	// operating systems these days (capturing the result).
	var REGEX_NEWLINE = /(\r?\n)/;

	// Newline character code for charCodeAt() comparisons
	var NEWLINE_CODE = 10;

	// Private symbol for identifying `SourceNode`s when multiple versions of
	// the source-map library are loaded. This MUST NOT CHANGE across
	// versions!
	var isSourceNode = "$$$isSourceNode$$$";

	/**
	 * SourceNodes provide a way to abstract over interpolating/concatenating
	 * snippets of generated JavaScript source code while maintaining the line and
	 * column information associated with the original source code.
	 *
	 * @param aLine The original line number.
	 * @param aColumn The original column number.
	 * @param aSource The original source's filename.
	 * @param aChunks Optional. An array of strings which are snippets of
	 *        generated JS, or other SourceNodes.
	 * @param aName The original identifier.
	 */
	function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
	  this.children = [];
	  this.sourceContents = {};
	  this.line = aLine == null ? null : aLine;
	  this.column = aColumn == null ? null : aColumn;
	  this.source = aSource == null ? null : aSource;
	  this.name = aName == null ? null : aName;
	  this[isSourceNode] = true;
	  if (aChunks != null) this.add(aChunks);
	}

	/**
	 * Creates a SourceNode from generated code and a SourceMapConsumer.
	 *
	 * @param aGeneratedCode The generated code
	 * @param aSourceMapConsumer The SourceMap for the generated code
	 * @param aRelativePath Optional. The path that relative sources in the
	 *        SourceMapConsumer should be relative to.
	 */
	SourceNode.fromStringWithSourceMap =
	  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	    // The SourceNode we want to fill with the generated code
	    // and the SourceMap
	    var node = new SourceNode();

	    // All even indices of this array are one line of the generated code,
	    // while all odd indices are the newlines between two adjacent lines
	    // (since `REGEX_NEWLINE` captures its match).
	    // Processed fragments are accessed by calling `shiftNextLine`.
	    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
	    var remainingLinesIndex = 0;
	    var shiftNextLine = function() {
	      var lineContents = getNextLine();
	      // The last line of a file might not have a newline.
	      var newLine = getNextLine() || "";
	      return lineContents + newLine;

	      function getNextLine() {
	        return remainingLinesIndex < remainingLines.length ?
	            remainingLines[remainingLinesIndex++] : undefined;
	      }
	    };

	    // We need to remember the position of "remainingLines"
	    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

	    // The generate SourceNodes we need a code range.
	    // To extract it current and last mapping is used.
	    // Here we store the last mapping.
	    var lastMapping = null;

	    aSourceMapConsumer.eachMapping(function (mapping) {
	      if (lastMapping !== null) {
	        // We add the code from "lastMapping" to "mapping":
	        // First check if there is a new line in between.
	        if (lastGeneratedLine < mapping.generatedLine) {
	          // Associate first line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	          lastGeneratedLine++;
	          lastGeneratedColumn = 0;
	          // The remaining code is added without mapping
	        } else {
	          // There is no new line in between.
	          // Associate the code between "lastGeneratedColumn" and
	          // "mapping.generatedColumn" with "lastMapping"
	          var nextLine = remainingLines[remainingLinesIndex];
	          var code = nextLine.substr(0, mapping.generatedColumn -
	                                        lastGeneratedColumn);
	          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
	                                              lastGeneratedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	          addMappingWithCode(lastMapping, code);
	          // No more remaining code, continue
	          lastMapping = mapping;
	          return;
	        }
	      }
	      // We add the generated code until the first mapping
	      // to the SourceNode without any mapping.
	      // Each line is added as separate string.
	      while (lastGeneratedLine < mapping.generatedLine) {
	        node.add(shiftNextLine());
	        lastGeneratedLine++;
	      }
	      if (lastGeneratedColumn < mapping.generatedColumn) {
	        var nextLine = remainingLines[remainingLinesIndex];
	        node.add(nextLine.substr(0, mapping.generatedColumn));
	        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
	        lastGeneratedColumn = mapping.generatedColumn;
	      }
	      lastMapping = mapping;
	    }, this);
	    // We have processed all mappings.
	    if (remainingLinesIndex < remainingLines.length) {
	      if (lastMapping) {
	        // Associate the remaining code in the current line with "lastMapping"
	        addMappingWithCode(lastMapping, shiftNextLine());
	      }
	      // and add the remaining lines without any mapping
	      node.add(remainingLines.splice(remainingLinesIndex).join(""));
	    }

	    // Copy sourcesContent into SourceNode
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aRelativePath != null) {
	          sourceFile = util.join(aRelativePath, sourceFile);
	        }
	        node.setSourceContent(sourceFile, content);
	      }
	    });

	    return node;

	    function addMappingWithCode(mapping, code) {
	      if (mapping === null || mapping.source === undefined) {
	        node.add(code);
	      } else {
	        var source = aRelativePath
	          ? util.join(aRelativePath, mapping.source)
	          : mapping.source;
	        node.add(new SourceNode(mapping.originalLine,
	                                mapping.originalColumn,
	                                source,
	                                code,
	                                mapping.name));
	      }
	    }
	  };

	/**
	 * Add a chunk of generated JS to this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode.prototype.add = function SourceNode_add(aChunk) {
	  if (Array.isArray(aChunk)) {
	    aChunk.forEach(function (chunk) {
	      this.add(chunk);
	    }, this);
	  }
	  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	    if (aChunk) {
	      this.children.push(aChunk);
	    }
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};

	/**
	 * Add a chunk of generated JS to the beginning of this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
	  if (Array.isArray(aChunk)) {
	    for (var i = aChunk.length-1; i >= 0; i--) {
	      this.prepend(aChunk[i]);
	    }
	  }
	  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	    this.children.unshift(aChunk);
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};

	/**
	 * Walk over the tree of JS snippets in this node and its children. The
	 * walking function is called once for each snippet of JS and is passed that
	 * snippet and the its original associated source's line/column location.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode.prototype.walk = function SourceNode_walk(aFn) {
	  var chunk;
	  for (var i = 0, len = this.children.length; i < len; i++) {
	    chunk = this.children[i];
	    if (chunk[isSourceNode]) {
	      chunk.walk(aFn);
	    }
	    else {
	      if (chunk !== '') {
	        aFn(chunk, { source: this.source,
	                     line: this.line,
	                     column: this.column,
	                     name: this.name });
	      }
	    }
	  }
	};

	/**
	 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	 * each of `this.children`.
	 *
	 * @param aSep The separator.
	 */
	SourceNode.prototype.join = function SourceNode_join(aSep) {
	  var newChildren;
	  var i;
	  var len = this.children.length;
	  if (len > 0) {
	    newChildren = [];
	    for (i = 0; i < len-1; i++) {
	      newChildren.push(this.children[i]);
	      newChildren.push(aSep);
	    }
	    newChildren.push(this.children[i]);
	    this.children = newChildren;
	  }
	  return this;
	};

	/**
	 * Call String.prototype.replace on the very right-most source snippet. Useful
	 * for trimming whitespace from the end of a source node, etc.
	 *
	 * @param aPattern The pattern to replace.
	 * @param aReplacement The thing to replace the pattern with.
	 */
	SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	  var lastChild = this.children[this.children.length - 1];
	  if (lastChild[isSourceNode]) {
	    lastChild.replaceRight(aPattern, aReplacement);
	  }
	  else if (typeof lastChild === 'string') {
	    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	  }
	  else {
	    this.children.push(''.replace(aPattern, aReplacement));
	  }
	  return this;
	};

	/**
	 * Set the source content for a source file. This will be added to the SourceMapGenerator
	 * in the sourcesContent field.
	 *
	 * @param aSourceFile The filename of the source file
	 * @param aSourceContent The content of the source file
	 */
	SourceNode.prototype.setSourceContent =
	  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
	  };

	/**
	 * Walk over the tree of SourceNodes. The walking function is called for each
	 * source file content and is passed the filename and source content.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode.prototype.walkSourceContents =
	  function SourceNode_walkSourceContents(aFn) {
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      if (this.children[i][isSourceNode]) {
	        this.children[i].walkSourceContents(aFn);
	      }
	    }

	    var sources = Object.keys(this.sourceContents);
	    for (var i = 0, len = sources.length; i < len; i++) {
	      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	    }
	  };

	/**
	 * Return the string representation of this source node. Walks over the tree
	 * and concatenates all the various snippets together to one string.
	 */
	SourceNode.prototype.toString = function SourceNode_toString() {
	  var str = "";
	  this.walk(function (chunk) {
	    str += chunk;
	  });
	  return str;
	};

	/**
	 * Returns the string representation of this source node along with a source
	 * map.
	 */
	SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	  var generated = {
	    code: "",
	    line: 1,
	    column: 0
	  };
	  var map = new SourceMapGenerator(aArgs);
	  var sourceMappingActive = false;
	  var lastOriginalSource = null;
	  var lastOriginalLine = null;
	  var lastOriginalColumn = null;
	  var lastOriginalName = null;
	  this.walk(function (chunk, original) {
	    generated.code += chunk;
	    if (original.source !== null
	        && original.line !== null
	        && original.column !== null) {
	      if(lastOriginalSource !== original.source
	         || lastOriginalLine !== original.line
	         || lastOriginalColumn !== original.column
	         || lastOriginalName !== original.name) {
	        map.addMapping({
	          source: original.source,
	          original: {
	            line: original.line,
	            column: original.column
	          },
	          generated: {
	            line: generated.line,
	            column: generated.column
	          },
	          name: original.name
	        });
	      }
	      lastOriginalSource = original.source;
	      lastOriginalLine = original.line;
	      lastOriginalColumn = original.column;
	      lastOriginalName = original.name;
	      sourceMappingActive = true;
	    } else if (sourceMappingActive) {
	      map.addMapping({
	        generated: {
	          line: generated.line,
	          column: generated.column
	        }
	      });
	      lastOriginalSource = null;
	      sourceMappingActive = false;
	    }
	    for (var idx = 0, length = chunk.length; idx < length; idx++) {
	      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
	        generated.line++;
	        generated.column = 0;
	        // Mappings end at eol
	        if (idx + 1 === length) {
	          lastOriginalSource = null;
	          sourceMappingActive = false;
	        } else if (sourceMappingActive) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	      } else {
	        generated.column++;
	      }
	    }
	  });
	  this.walkSourceContents(function (sourceFile, sourceContent) {
	    map.setSourceContent(sourceFile, sourceContent);
	  });

	  return { code: generated.code, map: map };
	};

	sourceNode.SourceNode = SourceNode;

	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	sourceMap.SourceMapGenerator = sourceMapGenerator.SourceMapGenerator;
	sourceMap.SourceMapConsumer = sourceMapConsumer.SourceMapConsumer;
	sourceMap.SourceNode = sourceNode.SourceNode;

	Object.defineProperty(mergeMap, "__esModule", {
	  value: true
	});
	mergeMap.default = mergeSourceMap;

	function _sourceMap() {
	  const data = sourceMap;

	  _sourceMap = function () {
	    return data;
	  };

	  return data;
	}

	function mergeSourceMap(inputMap, map) {
	  const input = buildMappingData(inputMap);
	  const output = buildMappingData(map);
	  const mergedGenerator = new (_sourceMap().SourceMapGenerator)();

	  for (const {
	    source
	  } of input.sources) {
	    if (typeof source.content === "string") {
	      mergedGenerator.setSourceContent(source.path, source.content);
	    }
	  }

	  if (output.sources.length === 1) {
	    const defaultSource = output.sources[0];
	    const insertedMappings = new Map();
	    eachInputGeneratedRange(input, (generated, original, source) => {
	      eachOverlappingGeneratedOutputRange(defaultSource, generated, item => {
	        const key = makeMappingKey(item);
	        if (insertedMappings.has(key)) return;
	        insertedMappings.set(key, item);
	        mergedGenerator.addMapping({
	          source: source.path,
	          original: {
	            line: original.line,
	            column: original.columnStart
	          },
	          generated: {
	            line: item.line,
	            column: item.columnStart
	          },
	          name: original.name
	        });
	      });
	    });

	    for (const item of insertedMappings.values()) {
	      if (item.columnEnd === Infinity) {
	        continue;
	      }

	      const clearItem = {
	        line: item.line,
	        columnStart: item.columnEnd
	      };
	      const key = makeMappingKey(clearItem);

	      if (insertedMappings.has(key)) {
	        continue;
	      }

	      mergedGenerator.addMapping({
	        generated: {
	          line: clearItem.line,
	          column: clearItem.columnStart
	        }
	      });
	    }
	  }

	  const result = mergedGenerator.toJSON();

	  if (typeof input.sourceRoot === "string") {
	    result.sourceRoot = input.sourceRoot;
	  }

	  return result;
	}

	function makeMappingKey(item) {
	  return `${item.line}/${item.columnStart}`;
	}

	function eachOverlappingGeneratedOutputRange(outputFile, inputGeneratedRange, callback) {
	  const overlappingOriginal = filterApplicableOriginalRanges(outputFile, inputGeneratedRange);

	  for (const {
	    generated
	  } of overlappingOriginal) {
	    for (const item of generated) {
	      callback(item);
	    }
	  }
	}

	function filterApplicableOriginalRanges({
	  mappings
	}, {
	  line,
	  columnStart,
	  columnEnd
	}) {
	  return filterSortedArray(mappings, ({
	    original: outOriginal
	  }) => {
	    if (line > outOriginal.line) return -1;
	    if (line < outOriginal.line) return 1;
	    if (columnStart >= outOriginal.columnEnd) return -1;
	    if (columnEnd <= outOriginal.columnStart) return 1;
	    return 0;
	  });
	}

	function eachInputGeneratedRange(map, callback) {
	  for (const {
	    source,
	    mappings
	  } of map.sources) {
	    for (const {
	      original,
	      generated
	    } of mappings) {
	      for (const item of generated) {
	        callback(item, original, source);
	      }
	    }
	  }
	}

	function buildMappingData(map) {
	  const consumer = new (_sourceMap().SourceMapConsumer)(Object.assign({}, map, {
	    sourceRoot: null
	  }));
	  const sources = new Map();
	  const mappings = new Map();
	  let last = null;
	  consumer.computeColumnSpans();
	  consumer.eachMapping(m => {
	    if (m.originalLine === null) return;
	    let source = sources.get(m.source);

	    if (!source) {
	      source = {
	        path: m.source,
	        content: consumer.sourceContentFor(m.source, true)
	      };
	      sources.set(m.source, source);
	    }

	    let sourceData = mappings.get(source);

	    if (!sourceData) {
	      sourceData = {
	        source,
	        mappings: []
	      };
	      mappings.set(source, sourceData);
	    }

	    const obj = {
	      line: m.originalLine,
	      columnStart: m.originalColumn,
	      columnEnd: Infinity,
	      name: m.name
	    };

	    if (last && last.source === source && last.mapping.line === m.originalLine) {
	      last.mapping.columnEnd = m.originalColumn;
	    }

	    last = {
	      source,
	      mapping: obj
	    };
	    sourceData.mappings.push({
	      original: obj,
	      generated: consumer.allGeneratedPositionsFor({
	        source: m.source,
	        line: m.originalLine,
	        column: m.originalColumn
	      }).map(item => ({
	        line: item.line,
	        columnStart: item.column,
	        columnEnd: item.lastColumn + 1
	      }))
	    });
	  }, null, _sourceMap().SourceMapConsumer.ORIGINAL_ORDER);
	  return {
	    file: map.file,
	    sourceRoot: map.sourceRoot,
	    sources: Array.from(mappings.values())
	  };
	}

	function findInsertionLocation(array, callback) {
	  let left = 0;
	  let right = array.length;

	  while (left < right) {
	    const mid = Math.floor((left + right) / 2);
	    const item = array[mid];
	    const result = callback(item);

	    if (result === 0) {
	      left = mid;
	      break;
	    }

	    if (result >= 0) {
	      right = mid;
	    } else {
	      left = mid + 1;
	    }
	  }

	  let i = left;

	  if (i < array.length) {
	    while (i >= 0 && callback(array[i]) >= 0) {
	      i--;
	    }

	    return i + 1;
	  }

	  return i;
	}

	function filterSortedArray(array, callback) {
	  const start = findInsertionLocation(array, callback);
	  const results = [];

	  for (let i = start; i < array.length && callback(array[i]) === 0; i++) {
	    results.push(array[i]);
	  }

	  return results;
	}

	Object.defineProperty(generate, "__esModule", {
	  value: true
	});
	generate.default = generateCode;

	function _convertSourceMap() {
	  const data = convertSourceMap;

	  _convertSourceMap = function () {
	    return data;
	  };

	  return data;
	}

	function _generator() {
	  const data = lib$p;

	  _generator = function () {
	    return data;
	  };

	  return data;
	}

	var _mergeMap = mergeMap;

	function generateCode(pluginPasses, file) {
	  const {
	    opts,
	    ast,
	    code,
	    inputMap
	  } = file;
	  const results = [];

	  for (const plugins of pluginPasses) {
	    for (const plugin of plugins) {
	      const {
	        generatorOverride
	      } = plugin;

	      if (generatorOverride) {
	        const result = generatorOverride(ast, opts.generatorOpts, code, _generator().default);
	        if (result !== undefined) results.push(result);
	      }
	    }
	  }

	  let result;

	  if (results.length === 0) {
	    result = (0, _generator().default)(ast, opts.generatorOpts, code);
	  } else if (results.length === 1) {
	    result = results[0];

	    if (typeof result.then === "function") {
	      throw new Error(`You appear to be using an async codegen plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, ` + `you may need to upgrade your @babel/core version.`);
	    }
	  } else {
	    throw new Error("More than one plugin attempted to override codegen.");
	  }

	  let {
	    code: outputCode,
	    map: outputMap
	  } = result;

	  if (outputMap && inputMap) {
	    outputMap = (0, _mergeMap.default)(inputMap.toObject(), outputMap);
	  }

	  if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
	    outputCode += "\n" + _convertSourceMap().fromObject(outputMap).toComment();
	  }

	  if (opts.sourceMaps === "inline") {
	    outputMap = null;
	  }

	  return {
	    outputCode,
	    outputMap
	  };
	}

	Object.defineProperty(transformation, "__esModule", {
	  value: true
	});
	transformation.run = run;

	function _traverse() {
	  const data = lib$t;

	  _traverse = function () {
	    return data;
	  };

	  return data;
	}

	var _pluginPass = pluginPass;

	var _blockHoistPlugin = blockHoistPlugin$1;

	var _normalizeOpts$1 = normalizeOpts;

	var _normalizeFile = normalizeFile$1;

	var _generate = generate;

	function* run(config, code, ast) {
	  const file = yield* (0, _normalizeFile.default)(config.passes, (0, _normalizeOpts$1.default)(config), code, ast);
	  const opts = file.opts;

	  try {
	    yield* transformFile$2(file, config.passes);
	  } catch (e) {
	    var _opts$filename;

	    e.message = `${(_opts$filename = opts.filename) != null ? _opts$filename : "unknown"}: ${e.message}`;

	    if (!e.code) {
	      e.code = "BABEL_TRANSFORM_ERROR";
	    }

	    throw e;
	  }

	  let outputCode, outputMap;

	  try {
	    if (opts.code !== false) {
	      ({
	        outputCode,
	        outputMap
	      } = (0, _generate.default)(config.passes, file));
	    }
	  } catch (e) {
	    var _opts$filename2;

	    e.message = `${(_opts$filename2 = opts.filename) != null ? _opts$filename2 : "unknown"}: ${e.message}`;

	    if (!e.code) {
	      e.code = "BABEL_GENERATE_ERROR";
	    }

	    throw e;
	  }

	  return {
	    metadata: file.metadata,
	    options: opts,
	    ast: opts.ast === true ? file.ast : null,
	    code: outputCode === undefined ? null : outputCode,
	    map: outputMap === undefined ? null : outputMap,
	    sourceType: file.ast.program.sourceType
	  };
	}

	function* transformFile$2(file, pluginPasses) {
	  for (const pluginPairs of pluginPasses) {
	    const passPairs = [];
	    const passes = [];
	    const visitors = [];

	    for (const plugin of pluginPairs.concat([(0, _blockHoistPlugin.default)()])) {
	      const pass = new _pluginPass.default(file, plugin.key, plugin.options);
	      passPairs.push([plugin, pass]);
	      passes.push(pass);
	      visitors.push(plugin.visitor);
	    }

	    for (const [plugin, pass] of passPairs) {
	      const fn = plugin.pre;

	      if (fn) {
	        const result = fn.call(pass, file);
	        yield* [];

	        if (isThenable(result)) {
	          throw new Error(`You appear to be using an plugin with an async .pre, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);
	        }
	      }
	    }

	    const visitor = _traverse().default.visitors.merge(visitors, passes, file.opts.wrapPluginVisitorMethod);

	    (0, _traverse().default)(file.ast, visitor, file.scope);

	    for (const [plugin, pass] of passPairs) {
	      const fn = plugin.post;

	      if (fn) {
	        const result = fn.call(pass, file);
	        yield* [];

	        if (isThenable(result)) {
	          throw new Error(`You appear to be using an plugin with an async .post, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);
	        }
	      }
	    }
	  }
	}

	function isThenable(val) {
	  return !!val && (typeof val === "object" || typeof val === "function") && !!val.then && typeof val.then === "function";
	}

	Object.defineProperty(transform$1, "__esModule", {
	  value: true
	});
	transform$1.transformAsync = transform$1.transformSync = transform$1.transform = void 0;

	function _gensync$3() {
	  const data = gensync;

	  _gensync$3 = function () {
	    return data;
	  };

	  return data;
	}

	var _config$3 = config;

	var _transformation$2 = transformation;

	const transformRunner = _gensync$3()(function* transform(code, opts) {
	  const config = yield* (0, _config$3.default)(opts);
	  if (config === null) return null;
	  return yield* (0, _transformation$2.run)(config, code);
	});

	const transform = function transform(code, opts, callback) {
	  if (typeof opts === "function") {
	    callback = opts;
	    opts = undefined;
	  }

	  if (callback === undefined) return transformRunner.sync(code, opts);
	  transformRunner.errback(code, opts, callback);
	};

	transform$1.transform = transform;
	const transformSync = transformRunner.sync;
	transform$1.transformSync = transformSync;
	const transformAsync = transformRunner.async;
	transform$1.transformAsync = transformAsync;

	var transformFile$1 = {};

	Object.defineProperty(transformFile$1, "__esModule", {
	  value: true
	});
	transformFile$1.transformFileAsync = transformFile$1.transformFileSync = transformFile$1.transformFile = void 0;

	function _gensync$2() {
	  const data = gensync;

	  _gensync$2 = function () {
	    return data;
	  };

	  return data;
	}

	var _config$2 = config;

	var _transformation$1 = transformation;

	var fs = fs$3;

	const transformFileRunner = _gensync$2()(function* (filename, opts) {
	  const options = Object.assign({}, opts, {
	    filename
	  });
	  const config = yield* (0, _config$2.default)(options);
	  if (config === null) return null;
	  const code = yield* fs.readFile(filename, "utf8");
	  return yield* (0, _transformation$1.run)(config, code);
	});

	const transformFile = transformFileRunner.errback;
	transformFile$1.transformFile = transformFile;
	const transformFileSync = transformFileRunner.sync;
	transformFile$1.transformFileSync = transformFileSync;
	const transformFileAsync = transformFileRunner.async;
	transformFile$1.transformFileAsync = transformFileAsync;

	var transformAst = {};

	Object.defineProperty(transformAst, "__esModule", {
	  value: true
	});
	transformAst.transformFromAstAsync = transformAst.transformFromAstSync = transformAst.transformFromAst = void 0;

	function _gensync$1() {
	  const data = gensync;

	  _gensync$1 = function () {
	    return data;
	  };

	  return data;
	}

	var _config$1 = config;

	var _transformation = transformation;

	const transformFromAstRunner = _gensync$1()(function* (ast, code, opts) {
	  const config = yield* (0, _config$1.default)(opts);
	  if (config === null) return null;
	  if (!ast) throw new Error("No AST given");
	  return yield* (0, _transformation.run)(config, code, ast);
	});

	const transformFromAst = function transformFromAst(ast, code, opts, callback) {
	  if (typeof opts === "function") {
	    callback = opts;
	    opts = undefined;
	  }

	  if (callback === undefined) {
	    return transformFromAstRunner.sync(ast, code, opts);
	  }

	  transformFromAstRunner.errback(ast, code, opts, callback);
	};

	transformAst.transformFromAst = transformFromAst;
	const transformFromAstSync = transformFromAstRunner.sync;
	transformAst.transformFromAstSync = transformFromAstSync;
	const transformFromAstAsync = transformFromAstRunner.async;
	transformAst.transformFromAstAsync = transformFromAstAsync;

	var parse$8 = {};

	Object.defineProperty(parse$8, "__esModule", {
	  value: true
	});
	parse$8.parseAsync = parse$8.parseSync = parse$8.parse = void 0;

	function _gensync() {
	  const data = gensync;

	  _gensync = function () {
	    return data;
	  };

	  return data;
	}

	var _config = config;

	var _parser = parser$2;

	var _normalizeOpts = normalizeOpts;

	const parseRunner = _gensync()(function* parse(code, opts) {
	  const config = yield* (0, _config.default)(opts);

	  if (config === null) {
	    return null;
	  }

	  return yield* (0, _parser.default)(config.passes, (0, _normalizeOpts.default)(config), code);
	});

	const parse$7 = function parse(code, opts, callback) {
	  if (typeof opts === "function") {
	    callback = opts;
	    opts = undefined;
	  }

	  if (callback === undefined) return parseRunner.sync(code, opts);
	  parseRunner.errback(code, opts, callback);
	};

	parse$8.parse = parse$7;
	const parseSync = parseRunner.sync;
	parse$8.parseSync = parseSync;
	const parseAsync = parseRunner.async;
	parse$8.parseAsync = parseAsync;

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Plugin = Plugin;
	Object.defineProperty(exports, "File", {
	  enumerable: true,
	  get: function () {
	    return _file.default;
	  }
	});
	Object.defineProperty(exports, "buildExternalHelpers", {
	  enumerable: true,
	  get: function () {
	    return _buildExternalHelpers.default;
	  }
	});
	Object.defineProperty(exports, "resolvePlugin", {
	  enumerable: true,
	  get: function () {
	    return _files.resolvePlugin;
	  }
	});
	Object.defineProperty(exports, "resolvePreset", {
	  enumerable: true,
	  get: function () {
	    return _files.resolvePreset;
	  }
	});
	Object.defineProperty(exports, "getEnv", {
	  enumerable: true,
	  get: function () {
	    return _environment.getEnv;
	  }
	});
	Object.defineProperty(exports, "tokTypes", {
	  enumerable: true,
	  get: function () {
	    return _parser().tokTypes;
	  }
	});
	Object.defineProperty(exports, "traverse", {
	  enumerable: true,
	  get: function () {
	    return _traverse().default;
	  }
	});
	Object.defineProperty(exports, "template", {
	  enumerable: true,
	  get: function () {
	    return _template().default;
	  }
	});
	Object.defineProperty(exports, "createConfigItem", {
	  enumerable: true,
	  get: function () {
	    return _config.createConfigItem;
	  }
	});
	Object.defineProperty(exports, "createConfigItemSync", {
	  enumerable: true,
	  get: function () {
	    return _config.createConfigItemSync;
	  }
	});
	Object.defineProperty(exports, "createConfigItemAsync", {
	  enumerable: true,
	  get: function () {
	    return _config.createConfigItemAsync;
	  }
	});
	Object.defineProperty(exports, "loadPartialConfig", {
	  enumerable: true,
	  get: function () {
	    return _config.loadPartialConfig;
	  }
	});
	Object.defineProperty(exports, "loadPartialConfigSync", {
	  enumerable: true,
	  get: function () {
	    return _config.loadPartialConfigSync;
	  }
	});
	Object.defineProperty(exports, "loadPartialConfigAsync", {
	  enumerable: true,
	  get: function () {
	    return _config.loadPartialConfigAsync;
	  }
	});
	Object.defineProperty(exports, "loadOptions", {
	  enumerable: true,
	  get: function () {
	    return _config.loadOptions;
	  }
	});
	Object.defineProperty(exports, "loadOptionsSync", {
	  enumerable: true,
	  get: function () {
	    return _config.loadOptionsSync;
	  }
	});
	Object.defineProperty(exports, "loadOptionsAsync", {
	  enumerable: true,
	  get: function () {
	    return _config.loadOptionsAsync;
	  }
	});
	Object.defineProperty(exports, "transform", {
	  enumerable: true,
	  get: function () {
	    return _transform.transform;
	  }
	});
	Object.defineProperty(exports, "transformSync", {
	  enumerable: true,
	  get: function () {
	    return _transform.transformSync;
	  }
	});
	Object.defineProperty(exports, "transformAsync", {
	  enumerable: true,
	  get: function () {
	    return _transform.transformAsync;
	  }
	});
	Object.defineProperty(exports, "transformFile", {
	  enumerable: true,
	  get: function () {
	    return _transformFile.transformFile;
	  }
	});
	Object.defineProperty(exports, "transformFileSync", {
	  enumerable: true,
	  get: function () {
	    return _transformFile.transformFileSync;
	  }
	});
	Object.defineProperty(exports, "transformFileAsync", {
	  enumerable: true,
	  get: function () {
	    return _transformFile.transformFileAsync;
	  }
	});
	Object.defineProperty(exports, "transformFromAst", {
	  enumerable: true,
	  get: function () {
	    return _transformAst.transformFromAst;
	  }
	});
	Object.defineProperty(exports, "transformFromAstSync", {
	  enumerable: true,
	  get: function () {
	    return _transformAst.transformFromAstSync;
	  }
	});
	Object.defineProperty(exports, "transformFromAstAsync", {
	  enumerable: true,
	  get: function () {
	    return _transformAst.transformFromAstAsync;
	  }
	});
	Object.defineProperty(exports, "parse", {
	  enumerable: true,
	  get: function () {
	    return _parse.parse;
	  }
	});
	Object.defineProperty(exports, "parseSync", {
	  enumerable: true,
	  get: function () {
	    return _parse.parseSync;
	  }
	});
	Object.defineProperty(exports, "parseAsync", {
	  enumerable: true,
	  get: function () {
	    return _parse.parseAsync;
	  }
	});
	exports.types = exports.OptionManager = exports.DEFAULT_EXTENSIONS = exports.version = void 0;

	var _file = file$2;

	var _buildExternalHelpers = buildExternalHelpers;

	var _files = files;

	var _environment = environment;

	function _types() {
	  const data = lib$s;

	  _types = function () {
	    return data;
	  };

	  return data;
	}

	Object.defineProperty(exports, "types", {
	  enumerable: true,
	  get: function () {
	    return _types();
	  }
	});

	function _parser() {
	  const data = lib$x;

	  _parser = function () {
	    return data;
	  };

	  return data;
	}

	function _traverse() {
	  const data = lib$t;

	  _traverse = function () {
	    return data;
	  };

	  return data;
	}

	function _template() {
	  const data = lib$j;

	  _template = function () {
	    return data;
	  };

	  return data;
	}

	var _config = config;

	var _transform = transform$1;

	var _transformFile = transformFile$1;

	var _transformAst = transformAst;

	var _parse = parse$8;

	const version = "7.15.5";
	exports.version = version;
	const DEFAULT_EXTENSIONS = Object.freeze([".js", ".jsx", ".es6", ".es", ".mjs", ".cjs"]);
	exports.DEFAULT_EXTENSIONS = DEFAULT_EXTENSIONS;

	class OptionManager {
	  init(opts) {
	    return (0, _config.loadOptions)(opts);
	  }

	}

	exports.OptionManager = OptionManager;

	function Plugin(alias) {
	  throw new Error(`The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`);
	}
	}(lib$v));

	var cjs$2 = {};

	var parser = {};

	var symbols = {};

	// used in Attr to signal changes
	const CHANGED$2 = Symbol('changed');
	symbols.CHANGED = CHANGED$2;

	// used in Element to setup once classList
	const CLASS_LIST$2 = Symbol('classList');
	symbols.CLASS_LIST = CLASS_LIST$2;

	// used in Document to attach once customElements
	const CUSTOM_ELEMENTS$4 = Symbol('CustomElements');
	symbols.CUSTOM_ELEMENTS = CUSTOM_ELEMENTS$4;

	// used in HTMLTemplateElement
	const CONTENT$1 = Symbol('content');
	symbols.CONTENT = CONTENT$1;

	// used in Element for data attributes
	const DATASET$1 = Symbol('dataset');
	symbols.DATASET = DATASET$1;

	// used in Document to attach the DocType
	const DOCTYPE$1 = Symbol('doctype');
	symbols.DOCTYPE = DOCTYPE$1;

	// used in parser and Document to attach once a DOMParser
	const DOM_PARSER$2 = Symbol('DOMParser');
	symbols.DOM_PARSER = DOM_PARSER$2;

	// used to reference an end node
	const END$d = Symbol('end');
	symbols.END = END$d;

	// used in Document to make the globalThis an event target
	const EVENT_TARGET$1 = Symbol('EventTarget');
	symbols.EVENT_TARGET = EVENT_TARGET$1;

	// used in both Canvas and Document to provide images
	const IMAGE$2 = Symbol('image');
	symbols.IMAGE = IMAGE$2;

	// used to define Document mime type
	const MIME$5 = Symbol('mime');
	symbols.MIME = MIME$5;

	// used in Document to attach once MutationObserver
	const MUTATION_OBSERVER$2 = Symbol('MutationObserver');
	symbols.MUTATION_OBSERVER = MUTATION_OBSERVER$2;

	// used to define next node reference
	const NEXT$f = Symbol('next');
	symbols.NEXT = NEXT$f;

	// used to define Attr owner elements
	const OWNER_ELEMENT$1 = Symbol('ownerElement');
	symbols.OWNER_ELEMENT = OWNER_ELEMENT$1;

	// used to define previous node reference
	const PREV$b = Symbol('prev');
	symbols.PREV = PREV$b;

	// used to define various "private" properties
	const PRIVATE$4 = Symbol('private');
	symbols.PRIVATE = PRIVATE$4;

	// used to define the CSSStyleSheet.sheet
	const SHEET$1 = Symbol('sheet');
	symbols.SHEET = SHEET$1;

	// used to define start node reference
	const START$4 = Symbol('start');
	symbols.START = START$4;

	// used to define special CSS style attribute
	const STYLE$1 = Symbol('style');
	symbols.STYLE = STYLE$1;

	// used to define generic values
	const VALUE$a = Symbol('value');
	symbols.VALUE = VALUE$a;

	var parseFromString$3 = {};

	var lib$9 = {};

	var Parser$2 = {};

	var Tokenizer$1 = {};

	var decode_codepoint = {};

	var require$$0$1 = {
		"0": 65533,
		"128": 8364,
		"130": 8218,
		"131": 402,
		"132": 8222,
		"133": 8230,
		"134": 8224,
		"135": 8225,
		"136": 710,
		"137": 8240,
		"138": 352,
		"139": 8249,
		"140": 338,
		"142": 381,
		"145": 8216,
		"146": 8217,
		"147": 8220,
		"148": 8221,
		"149": 8226,
		"150": 8211,
		"151": 8212,
		"152": 732,
		"153": 8482,
		"154": 353,
		"155": 8250,
		"156": 339,
		"158": 382,
		"159": 376
	};

	var __importDefault$7 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(decode_codepoint, "__esModule", { value: true });
	var decode_json_1 = __importDefault$7(require$$0$1);
	// Adapted from https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
	var fromCodePoint = 
	// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
	String.fromCodePoint ||
	    function (codePoint) {
	        var output = "";
	        if (codePoint > 0xffff) {
	            codePoint -= 0x10000;
	            output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
	            codePoint = 0xdc00 | (codePoint & 0x3ff);
	        }
	        output += String.fromCharCode(codePoint);
	        return output;
	    };
	function decodeCodePoint(codePoint) {
	    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
	        return "\uFFFD";
	    }
	    if (codePoint in decode_json_1.default) {
	        codePoint = decode_json_1.default[codePoint];
	    }
	    return fromCodePoint(codePoint);
	}
	decode_codepoint.default = decodeCodePoint;

	var Aacute$1 = "Á";
	var aacute$1 = "á";
	var Abreve = "Ă";
	var abreve = "ă";
	var ac = "∾";
	var acd = "∿";
	var acE = "∾̳";
	var Acirc$1 = "Â";
	var acirc$1 = "â";
	var acute$1 = "´";
	var Acy = "А";
	var acy = "а";
	var AElig$1 = "Æ";
	var aelig$1 = "æ";
	var af = "⁡";
	var Afr = "𝔄";
	var afr = "𝔞";
	var Agrave$1 = "À";
	var agrave$1 = "à";
	var alefsym = "ℵ";
	var aleph = "ℵ";
	var Alpha = "Α";
	var alpha = "α";
	var Amacr = "Ā";
	var amacr = "ā";
	var amalg = "⨿";
	var amp$2 = "&";
	var AMP$1 = "&";
	var andand = "⩕";
	var And = "⩓";
	var and = "∧";
	var andd = "⩜";
	var andslope = "⩘";
	var andv = "⩚";
	var ang = "∠";
	var ange = "⦤";
	var angle = "∠";
	var angmsdaa = "⦨";
	var angmsdab = "⦩";
	var angmsdac = "⦪";
	var angmsdad = "⦫";
	var angmsdae = "⦬";
	var angmsdaf = "⦭";
	var angmsdag = "⦮";
	var angmsdah = "⦯";
	var angmsd = "∡";
	var angrt = "∟";
	var angrtvb = "⊾";
	var angrtvbd = "⦝";
	var angsph = "∢";
	var angst = "Å";
	var angzarr = "⍼";
	var Aogon = "Ą";
	var aogon = "ą";
	var Aopf = "𝔸";
	var aopf = "𝕒";
	var apacir = "⩯";
	var ap = "≈";
	var apE = "⩰";
	var ape = "≊";
	var apid = "≋";
	var apos$1 = "'";
	var ApplyFunction = "⁡";
	var approx = "≈";
	var approxeq = "≊";
	var Aring$1 = "Å";
	var aring$1 = "å";
	var Ascr = "𝒜";
	var ascr = "𝒶";
	var Assign = "≔";
	var ast = "*";
	var asymp = "≈";
	var asympeq = "≍";
	var Atilde$1 = "Ã";
	var atilde$1 = "ã";
	var Auml$1 = "Ä";
	var auml$1 = "ä";
	var awconint = "∳";
	var awint = "⨑";
	var backcong = "≌";
	var backepsilon = "϶";
	var backprime = "‵";
	var backsim = "∽";
	var backsimeq = "⋍";
	var Backslash = "∖";
	var Barv = "⫧";
	var barvee = "⊽";
	var barwed = "⌅";
	var Barwed = "⌆";
	var barwedge = "⌅";
	var bbrk = "⎵";
	var bbrktbrk = "⎶";
	var bcong = "≌";
	var Bcy = "Б";
	var bcy = "б";
	var bdquo = "„";
	var becaus = "∵";
	var because = "∵";
	var Because = "∵";
	var bemptyv = "⦰";
	var bepsi = "϶";
	var bernou = "ℬ";
	var Bernoullis = "ℬ";
	var Beta = "Β";
	var beta = "β";
	var beth = "ℶ";
	var between = "≬";
	var Bfr = "𝔅";
	var bfr = "𝔟";
	var bigcap = "⋂";
	var bigcirc = "◯";
	var bigcup = "⋃";
	var bigodot = "⨀";
	var bigoplus = "⨁";
	var bigotimes = "⨂";
	var bigsqcup = "⨆";
	var bigstar = "★";
	var bigtriangledown = "▽";
	var bigtriangleup = "△";
	var biguplus = "⨄";
	var bigvee = "⋁";
	var bigwedge = "⋀";
	var bkarow = "⤍";
	var blacklozenge = "⧫";
	var blacksquare = "▪";
	var blacktriangle = "▴";
	var blacktriangledown = "▾";
	var blacktriangleleft = "◂";
	var blacktriangleright = "▸";
	var blank = "␣";
	var blk12 = "▒";
	var blk14 = "░";
	var blk34 = "▓";
	var block = "█";
	var bne = "=⃥";
	var bnequiv = "≡⃥";
	var bNot = "⫭";
	var bnot = "⌐";
	var Bopf = "𝔹";
	var bopf = "𝕓";
	var bot = "⊥";
	var bottom = "⊥";
	var bowtie = "⋈";
	var boxbox = "⧉";
	var boxdl = "┐";
	var boxdL = "╕";
	var boxDl = "╖";
	var boxDL = "╗";
	var boxdr = "┌";
	var boxdR = "╒";
	var boxDr = "╓";
	var boxDR = "╔";
	var boxh = "─";
	var boxH = "═";
	var boxhd = "┬";
	var boxHd = "╤";
	var boxhD = "╥";
	var boxHD = "╦";
	var boxhu = "┴";
	var boxHu = "╧";
	var boxhU = "╨";
	var boxHU = "╩";
	var boxminus = "⊟";
	var boxplus = "⊞";
	var boxtimes = "⊠";
	var boxul = "┘";
	var boxuL = "╛";
	var boxUl = "╜";
	var boxUL = "╝";
	var boxur = "└";
	var boxuR = "╘";
	var boxUr = "╙";
	var boxUR = "╚";
	var boxv = "│";
	var boxV = "║";
	var boxvh = "┼";
	var boxvH = "╪";
	var boxVh = "╫";
	var boxVH = "╬";
	var boxvl = "┤";
	var boxvL = "╡";
	var boxVl = "╢";
	var boxVL = "╣";
	var boxvr = "├";
	var boxvR = "╞";
	var boxVr = "╟";
	var boxVR = "╠";
	var bprime = "‵";
	var breve = "˘";
	var Breve = "˘";
	var brvbar$1 = "¦";
	var bscr = "𝒷";
	var Bscr = "ℬ";
	var bsemi = "⁏";
	var bsim = "∽";
	var bsime = "⋍";
	var bsolb = "⧅";
	var bsol = "\\";
	var bsolhsub = "⟈";
	var bull = "•";
	var bullet = "•";
	var bump = "≎";
	var bumpE = "⪮";
	var bumpe = "≏";
	var Bumpeq = "≎";
	var bumpeq = "≏";
	var Cacute = "Ć";
	var cacute = "ć";
	var capand = "⩄";
	var capbrcup = "⩉";
	var capcap = "⩋";
	var cap = "∩";
	var Cap = "⋒";
	var capcup = "⩇";
	var capdot = "⩀";
	var CapitalDifferentialD = "ⅅ";
	var caps = "∩︀";
	var caret = "⁁";
	var caron = "ˇ";
	var Cayleys = "ℭ";
	var ccaps = "⩍";
	var Ccaron = "Č";
	var ccaron = "č";
	var Ccedil$1 = "Ç";
	var ccedil$1 = "ç";
	var Ccirc = "Ĉ";
	var ccirc = "ĉ";
	var Cconint = "∰";
	var ccups = "⩌";
	var ccupssm = "⩐";
	var Cdot = "Ċ";
	var cdot = "ċ";
	var cedil$1 = "¸";
	var Cedilla = "¸";
	var cemptyv = "⦲";
	var cent$1 = "¢";
	var centerdot = "·";
	var CenterDot = "·";
	var cfr = "𝔠";
	var Cfr = "ℭ";
	var CHcy = "Ч";
	var chcy = "ч";
	var check = "✓";
	var checkmark = "✓";
	var Chi = "Χ";
	var chi = "χ";
	var circ = "ˆ";
	var circeq = "≗";
	var circlearrowleft = "↺";
	var circlearrowright = "↻";
	var circledast = "⊛";
	var circledcirc = "⊚";
	var circleddash = "⊝";
	var CircleDot = "⊙";
	var circledR = "®";
	var circledS = "Ⓢ";
	var CircleMinus = "⊖";
	var CirclePlus = "⊕";
	var CircleTimes = "⊗";
	var cir = "○";
	var cirE = "⧃";
	var cire = "≗";
	var cirfnint = "⨐";
	var cirmid = "⫯";
	var cirscir = "⧂";
	var ClockwiseContourIntegral = "∲";
	var CloseCurlyDoubleQuote = "”";
	var CloseCurlyQuote = "’";
	var clubs = "♣";
	var clubsuit = "♣";
	var colon = ":";
	var Colon = "∷";
	var Colone = "⩴";
	var colone = "≔";
	var coloneq = "≔";
	var comma = ",";
	var commat = "@";
	var comp = "∁";
	var compfn = "∘";
	var complement = "∁";
	var complexes = "ℂ";
	var cong = "≅";
	var congdot = "⩭";
	var Congruent = "≡";
	var conint = "∮";
	var Conint = "∯";
	var ContourIntegral = "∮";
	var copf = "𝕔";
	var Copf = "ℂ";
	var coprod = "∐";
	var Coproduct = "∐";
	var copy$1 = "©";
	var COPY$1 = "©";
	var copysr = "℗";
	var CounterClockwiseContourIntegral = "∳";
	var crarr = "↵";
	var cross = "✗";
	var Cross = "⨯";
	var Cscr = "𝒞";
	var cscr = "𝒸";
	var csub = "⫏";
	var csube = "⫑";
	var csup = "⫐";
	var csupe = "⫒";
	var ctdot = "⋯";
	var cudarrl = "⤸";
	var cudarrr = "⤵";
	var cuepr = "⋞";
	var cuesc = "⋟";
	var cularr = "↶";
	var cularrp = "⤽";
	var cupbrcap = "⩈";
	var cupcap = "⩆";
	var CupCap = "≍";
	var cup = "∪";
	var Cup = "⋓";
	var cupcup = "⩊";
	var cupdot = "⊍";
	var cupor = "⩅";
	var cups = "∪︀";
	var curarr = "↷";
	var curarrm = "⤼";
	var curlyeqprec = "⋞";
	var curlyeqsucc = "⋟";
	var curlyvee = "⋎";
	var curlywedge = "⋏";
	var curren$1 = "¤";
	var curvearrowleft = "↶";
	var curvearrowright = "↷";
	var cuvee = "⋎";
	var cuwed = "⋏";
	var cwconint = "∲";
	var cwint = "∱";
	var cylcty = "⌭";
	var dagger = "†";
	var Dagger = "‡";
	var daleth = "ℸ";
	var darr = "↓";
	var Darr = "↡";
	var dArr = "⇓";
	var dash = "‐";
	var Dashv = "⫤";
	var dashv = "⊣";
	var dbkarow = "⤏";
	var dblac = "˝";
	var Dcaron = "Ď";
	var dcaron = "ď";
	var Dcy = "Д";
	var dcy = "д";
	var ddagger = "‡";
	var ddarr = "⇊";
	var DD = "ⅅ";
	var dd = "ⅆ";
	var DDotrahd = "⤑";
	var ddotseq = "⩷";
	var deg$1 = "°";
	var Del = "∇";
	var Delta = "Δ";
	var delta = "δ";
	var demptyv = "⦱";
	var dfisht = "⥿";
	var Dfr = "𝔇";
	var dfr = "𝔡";
	var dHar = "⥥";
	var dharl = "⇃";
	var dharr = "⇂";
	var DiacriticalAcute = "´";
	var DiacriticalDot = "˙";
	var DiacriticalDoubleAcute = "˝";
	var DiacriticalGrave = "`";
	var DiacriticalTilde = "˜";
	var diam = "⋄";
	var diamond = "⋄";
	var Diamond = "⋄";
	var diamondsuit = "♦";
	var diams = "♦";
	var die = "¨";
	var DifferentialD = "ⅆ";
	var digamma = "ϝ";
	var disin = "⋲";
	var div = "÷";
	var divide$1 = "÷";
	var divideontimes = "⋇";
	var divonx = "⋇";
	var DJcy = "Ђ";
	var djcy = "ђ";
	var dlcorn = "⌞";
	var dlcrop = "⌍";
	var dollar = "$";
	var Dopf = "𝔻";
	var dopf = "𝕕";
	var Dot = "¨";
	var dot = "˙";
	var DotDot = "⃜";
	var doteq = "≐";
	var doteqdot = "≑";
	var DotEqual = "≐";
	var dotminus = "∸";
	var dotplus = "∔";
	var dotsquare = "⊡";
	var doublebarwedge = "⌆";
	var DoubleContourIntegral = "∯";
	var DoubleDot = "¨";
	var DoubleDownArrow = "⇓";
	var DoubleLeftArrow = "⇐";
	var DoubleLeftRightArrow = "⇔";
	var DoubleLeftTee = "⫤";
	var DoubleLongLeftArrow = "⟸";
	var DoubleLongLeftRightArrow = "⟺";
	var DoubleLongRightArrow = "⟹";
	var DoubleRightArrow = "⇒";
	var DoubleRightTee = "⊨";
	var DoubleUpArrow = "⇑";
	var DoubleUpDownArrow = "⇕";
	var DoubleVerticalBar = "∥";
	var DownArrowBar = "⤓";
	var downarrow = "↓";
	var DownArrow = "↓";
	var Downarrow = "⇓";
	var DownArrowUpArrow = "⇵";
	var DownBreve = "̑";
	var downdownarrows = "⇊";
	var downharpoonleft = "⇃";
	var downharpoonright = "⇂";
	var DownLeftRightVector = "⥐";
	var DownLeftTeeVector = "⥞";
	var DownLeftVectorBar = "⥖";
	var DownLeftVector = "↽";
	var DownRightTeeVector = "⥟";
	var DownRightVectorBar = "⥗";
	var DownRightVector = "⇁";
	var DownTeeArrow = "↧";
	var DownTee = "⊤";
	var drbkarow = "⤐";
	var drcorn = "⌟";
	var drcrop = "⌌";
	var Dscr = "𝒟";
	var dscr = "𝒹";
	var DScy = "Ѕ";
	var dscy = "ѕ";
	var dsol = "⧶";
	var Dstrok = "Đ";
	var dstrok = "đ";
	var dtdot = "⋱";
	var dtri = "▿";
	var dtrif = "▾";
	var duarr = "⇵";
	var duhar = "⥯";
	var dwangle = "⦦";
	var DZcy = "Џ";
	var dzcy = "џ";
	var dzigrarr = "⟿";
	var Eacute$1 = "É";
	var eacute$1 = "é";
	var easter = "⩮";
	var Ecaron = "Ě";
	var ecaron = "ě";
	var Ecirc$1 = "Ê";
	var ecirc$1 = "ê";
	var ecir = "≖";
	var ecolon = "≕";
	var Ecy = "Э";
	var ecy = "э";
	var eDDot = "⩷";
	var Edot = "Ė";
	var edot = "ė";
	var eDot = "≑";
	var ee = "ⅇ";
	var efDot = "≒";
	var Efr = "𝔈";
	var efr = "𝔢";
	var eg = "⪚";
	var Egrave$1 = "È";
	var egrave$1 = "è";
	var egs = "⪖";
	var egsdot = "⪘";
	var el = "⪙";
	var Element$7 = "∈";
	var elinters = "⏧";
	var ell = "ℓ";
	var els = "⪕";
	var elsdot = "⪗";
	var Emacr = "Ē";
	var emacr = "ē";
	var empty = "∅";
	var emptyset = "∅";
	var EmptySmallSquare = "◻";
	var emptyv = "∅";
	var EmptyVerySmallSquare = "▫";
	var emsp13 = " ";
	var emsp14 = " ";
	var emsp = " ";
	var ENG = "Ŋ";
	var eng = "ŋ";
	var ensp = " ";
	var Eogon = "Ę";
	var eogon = "ę";
	var Eopf = "𝔼";
	var eopf = "𝕖";
	var epar = "⋕";
	var eparsl = "⧣";
	var eplus = "⩱";
	var epsi = "ε";
	var Epsilon = "Ε";
	var epsilon = "ε";
	var epsiv = "ϵ";
	var eqcirc = "≖";
	var eqcolon = "≕";
	var eqsim = "≂";
	var eqslantgtr = "⪖";
	var eqslantless = "⪕";
	var Equal = "⩵";
	var equals = "=";
	var EqualTilde = "≂";
	var equest = "≟";
	var Equilibrium = "⇌";
	var equiv = "≡";
	var equivDD = "⩸";
	var eqvparsl = "⧥";
	var erarr = "⥱";
	var erDot = "≓";
	var escr = "ℯ";
	var Escr = "ℰ";
	var esdot = "≐";
	var Esim = "⩳";
	var esim = "≂";
	var Eta = "Η";
	var eta = "η";
	var ETH$1 = "Ð";
	var eth$1 = "ð";
	var Euml$1 = "Ë";
	var euml$1 = "ë";
	var euro = "€";
	var excl = "!";
	var exist = "∃";
	var Exists = "∃";
	var expectation = "ℰ";
	var exponentiale = "ⅇ";
	var ExponentialE = "ⅇ";
	var fallingdotseq = "≒";
	var Fcy = "Ф";
	var fcy = "ф";
	var female = "♀";
	var ffilig = "ﬃ";
	var fflig = "ﬀ";
	var ffllig = "ﬄ";
	var Ffr = "𝔉";
	var ffr = "𝔣";
	var filig = "ﬁ";
	var FilledSmallSquare = "◼";
	var FilledVerySmallSquare = "▪";
	var fjlig = "fj";
	var flat = "♭";
	var fllig = "ﬂ";
	var fltns = "▱";
	var fnof = "ƒ";
	var Fopf = "𝔽";
	var fopf = "𝕗";
	var forall = "∀";
	var ForAll = "∀";
	var fork = "⋔";
	var forkv = "⫙";
	var Fouriertrf = "ℱ";
	var fpartint = "⨍";
	var frac12$1 = "½";
	var frac13 = "⅓";
	var frac14$1 = "¼";
	var frac15 = "⅕";
	var frac16 = "⅙";
	var frac18 = "⅛";
	var frac23 = "⅔";
	var frac25 = "⅖";
	var frac34$1 = "¾";
	var frac35 = "⅗";
	var frac38 = "⅜";
	var frac45 = "⅘";
	var frac56 = "⅚";
	var frac58 = "⅝";
	var frac78 = "⅞";
	var frasl = "⁄";
	var frown = "⌢";
	var fscr = "𝒻";
	var Fscr = "ℱ";
	var gacute = "ǵ";
	var Gamma = "Γ";
	var gamma = "γ";
	var Gammad = "Ϝ";
	var gammad = "ϝ";
	var gap = "⪆";
	var Gbreve = "Ğ";
	var gbreve = "ğ";
	var Gcedil = "Ģ";
	var Gcirc = "Ĝ";
	var gcirc = "ĝ";
	var Gcy = "Г";
	var gcy = "г";
	var Gdot = "Ġ";
	var gdot = "ġ";
	var ge = "≥";
	var gE = "≧";
	var gEl = "⪌";
	var gel = "⋛";
	var geq = "≥";
	var geqq = "≧";
	var geqslant = "⩾";
	var gescc = "⪩";
	var ges = "⩾";
	var gesdot = "⪀";
	var gesdoto = "⪂";
	var gesdotol = "⪄";
	var gesl = "⋛︀";
	var gesles = "⪔";
	var Gfr = "𝔊";
	var gfr = "𝔤";
	var gg = "≫";
	var Gg = "⋙";
	var ggg = "⋙";
	var gimel = "ℷ";
	var GJcy = "Ѓ";
	var gjcy = "ѓ";
	var gla = "⪥";
	var gl = "≷";
	var glE = "⪒";
	var glj = "⪤";
	var gnap = "⪊";
	var gnapprox = "⪊";
	var gne = "⪈";
	var gnE = "≩";
	var gneq = "⪈";
	var gneqq = "≩";
	var gnsim = "⋧";
	var Gopf = "𝔾";
	var gopf = "𝕘";
	var grave = "`";
	var GreaterEqual = "≥";
	var GreaterEqualLess = "⋛";
	var GreaterFullEqual = "≧";
	var GreaterGreater = "⪢";
	var GreaterLess = "≷";
	var GreaterSlantEqual = "⩾";
	var GreaterTilde = "≳";
	var Gscr = "𝒢";
	var gscr = "ℊ";
	var gsim = "≳";
	var gsime = "⪎";
	var gsiml = "⪐";
	var gtcc = "⪧";
	var gtcir = "⩺";
	var gt$2 = ">";
	var GT$1 = ">";
	var Gt = "≫";
	var gtdot = "⋗";
	var gtlPar = "⦕";
	var gtquest = "⩼";
	var gtrapprox = "⪆";
	var gtrarr = "⥸";
	var gtrdot = "⋗";
	var gtreqless = "⋛";
	var gtreqqless = "⪌";
	var gtrless = "≷";
	var gtrsim = "≳";
	var gvertneqq = "≩︀";
	var gvnE = "≩︀";
	var Hacek = "ˇ";
	var hairsp = " ";
	var half = "½";
	var hamilt = "ℋ";
	var HARDcy = "Ъ";
	var hardcy = "ъ";
	var harrcir = "⥈";
	var harr = "↔";
	var hArr = "⇔";
	var harrw = "↭";
	var Hat = "^";
	var hbar = "ℏ";
	var Hcirc = "Ĥ";
	var hcirc = "ĥ";
	var hearts = "♥";
	var heartsuit = "♥";
	var hellip = "…";
	var hercon = "⊹";
	var hfr = "𝔥";
	var Hfr = "ℌ";
	var HilbertSpace = "ℋ";
	var hksearow = "⤥";
	var hkswarow = "⤦";
	var hoarr = "⇿";
	var homtht = "∻";
	var hookleftarrow = "↩";
	var hookrightarrow = "↪";
	var hopf = "𝕙";
	var Hopf = "ℍ";
	var horbar = "―";
	var HorizontalLine = "─";
	var hscr = "𝒽";
	var Hscr = "ℋ";
	var hslash = "ℏ";
	var Hstrok = "Ħ";
	var hstrok = "ħ";
	var HumpDownHump = "≎";
	var HumpEqual = "≏";
	var hybull = "⁃";
	var hyphen = "‐";
	var Iacute$1 = "Í";
	var iacute$1 = "í";
	var ic = "⁣";
	var Icirc$1 = "Î";
	var icirc$1 = "î";
	var Icy = "И";
	var icy = "и";
	var Idot = "İ";
	var IEcy = "Е";
	var iecy = "е";
	var iexcl$1 = "¡";
	var iff = "⇔";
	var ifr = "𝔦";
	var Ifr = "ℑ";
	var Igrave$1 = "Ì";
	var igrave$1 = "ì";
	var ii = "ⅈ";
	var iiiint = "⨌";
	var iiint = "∭";
	var iinfin = "⧜";
	var iiota = "℩";
	var IJlig = "Ĳ";
	var ijlig = "ĳ";
	var Imacr = "Ī";
	var imacr = "ī";
	var image$1 = "ℑ";
	var ImaginaryI = "ⅈ";
	var imagline = "ℐ";
	var imagpart = "ℑ";
	var imath = "ı";
	var Im = "ℑ";
	var imof = "⊷";
	var imped = "Ƶ";
	var Implies = "⇒";
	var incare = "℅";
	var infin = "∞";
	var infintie = "⧝";
	var inodot = "ı";
	var intcal = "⊺";
	var int = "∫";
	var Int = "∬";
	var integers = "ℤ";
	var Integral = "∫";
	var intercal = "⊺";
	var Intersection = "⋂";
	var intlarhk = "⨗";
	var intprod = "⨼";
	var InvisibleComma = "⁣";
	var InvisibleTimes = "⁢";
	var IOcy = "Ё";
	var iocy = "ё";
	var Iogon = "Į";
	var iogon = "į";
	var Iopf = "𝕀";
	var iopf = "𝕚";
	var Iota = "Ι";
	var iota = "ι";
	var iprod = "⨼";
	var iquest$1 = "¿";
	var iscr = "𝒾";
	var Iscr = "ℐ";
	var isin = "∈";
	var isindot = "⋵";
	var isinE = "⋹";
	var isins = "⋴";
	var isinsv = "⋳";
	var isinv = "∈";
	var it = "⁢";
	var Itilde = "Ĩ";
	var itilde = "ĩ";
	var Iukcy = "І";
	var iukcy = "і";
	var Iuml$1 = "Ï";
	var iuml$1 = "ï";
	var Jcirc = "Ĵ";
	var jcirc = "ĵ";
	var Jcy = "Й";
	var jcy = "й";
	var Jfr = "𝔍";
	var jfr = "𝔧";
	var jmath = "ȷ";
	var Jopf = "𝕁";
	var jopf = "𝕛";
	var Jscr = "𝒥";
	var jscr = "𝒿";
	var Jsercy = "Ј";
	var jsercy = "ј";
	var Jukcy = "Є";
	var jukcy = "є";
	var Kappa = "Κ";
	var kappa = "κ";
	var kappav = "ϰ";
	var Kcedil = "Ķ";
	var kcedil = "ķ";
	var Kcy = "К";
	var kcy = "к";
	var Kfr = "𝔎";
	var kfr = "𝔨";
	var kgreen = "ĸ";
	var KHcy = "Х";
	var khcy = "х";
	var KJcy = "Ќ";
	var kjcy = "ќ";
	var Kopf = "𝕂";
	var kopf = "𝕜";
	var Kscr = "𝒦";
	var kscr = "𝓀";
	var lAarr = "⇚";
	var Lacute = "Ĺ";
	var lacute = "ĺ";
	var laemptyv = "⦴";
	var lagran = "ℒ";
	var Lambda = "Λ";
	var lambda = "λ";
	var lang = "⟨";
	var Lang = "⟪";
	var langd = "⦑";
	var langle = "⟨";
	var lap = "⪅";
	var Laplacetrf = "ℒ";
	var laquo$1 = "«";
	var larrb = "⇤";
	var larrbfs = "⤟";
	var larr = "←";
	var Larr = "↞";
	var lArr = "⇐";
	var larrfs = "⤝";
	var larrhk = "↩";
	var larrlp = "↫";
	var larrpl = "⤹";
	var larrsim = "⥳";
	var larrtl = "↢";
	var latail = "⤙";
	var lAtail = "⤛";
	var lat = "⪫";
	var late = "⪭";
	var lates = "⪭︀";
	var lbarr = "⤌";
	var lBarr = "⤎";
	var lbbrk = "❲";
	var lbrace = "{";
	var lbrack = "[";
	var lbrke = "⦋";
	var lbrksld = "⦏";
	var lbrkslu = "⦍";
	var Lcaron = "Ľ";
	var lcaron = "ľ";
	var Lcedil = "Ļ";
	var lcedil = "ļ";
	var lceil = "⌈";
	var lcub = "{";
	var Lcy = "Л";
	var lcy = "л";
	var ldca = "⤶";
	var ldquo = "“";
	var ldquor = "„";
	var ldrdhar = "⥧";
	var ldrushar = "⥋";
	var ldsh = "↲";
	var le = "≤";
	var lE = "≦";
	var LeftAngleBracket = "⟨";
	var LeftArrowBar = "⇤";
	var leftarrow = "←";
	var LeftArrow = "←";
	var Leftarrow = "⇐";
	var LeftArrowRightArrow = "⇆";
	var leftarrowtail = "↢";
	var LeftCeiling = "⌈";
	var LeftDoubleBracket = "⟦";
	var LeftDownTeeVector = "⥡";
	var LeftDownVectorBar = "⥙";
	var LeftDownVector = "⇃";
	var LeftFloor = "⌊";
	var leftharpoondown = "↽";
	var leftharpoonup = "↼";
	var leftleftarrows = "⇇";
	var leftrightarrow = "↔";
	var LeftRightArrow = "↔";
	var Leftrightarrow = "⇔";
	var leftrightarrows = "⇆";
	var leftrightharpoons = "⇋";
	var leftrightsquigarrow = "↭";
	var LeftRightVector = "⥎";
	var LeftTeeArrow = "↤";
	var LeftTee = "⊣";
	var LeftTeeVector = "⥚";
	var leftthreetimes = "⋋";
	var LeftTriangleBar = "⧏";
	var LeftTriangle = "⊲";
	var LeftTriangleEqual = "⊴";
	var LeftUpDownVector = "⥑";
	var LeftUpTeeVector = "⥠";
	var LeftUpVectorBar = "⥘";
	var LeftUpVector = "↿";
	var LeftVectorBar = "⥒";
	var LeftVector = "↼";
	var lEg = "⪋";
	var leg = "⋚";
	var leq = "≤";
	var leqq = "≦";
	var leqslant = "⩽";
	var lescc = "⪨";
	var les = "⩽";
	var lesdot = "⩿";
	var lesdoto = "⪁";
	var lesdotor = "⪃";
	var lesg = "⋚︀";
	var lesges = "⪓";
	var lessapprox = "⪅";
	var lessdot = "⋖";
	var lesseqgtr = "⋚";
	var lesseqqgtr = "⪋";
	var LessEqualGreater = "⋚";
	var LessFullEqual = "≦";
	var LessGreater = "≶";
	var lessgtr = "≶";
	var LessLess = "⪡";
	var lesssim = "≲";
	var LessSlantEqual = "⩽";
	var LessTilde = "≲";
	var lfisht = "⥼";
	var lfloor = "⌊";
	var Lfr = "𝔏";
	var lfr = "𝔩";
	var lg = "≶";
	var lgE = "⪑";
	var lHar = "⥢";
	var lhard = "↽";
	var lharu = "↼";
	var lharul = "⥪";
	var lhblk = "▄";
	var LJcy = "Љ";
	var ljcy = "љ";
	var llarr = "⇇";
	var ll = "≪";
	var Ll = "⋘";
	var llcorner = "⌞";
	var Lleftarrow = "⇚";
	var llhard = "⥫";
	var lltri = "◺";
	var Lmidot = "Ŀ";
	var lmidot = "ŀ";
	var lmoustache = "⎰";
	var lmoust = "⎰";
	var lnap = "⪉";
	var lnapprox = "⪉";
	var lne = "⪇";
	var lnE = "≨";
	var lneq = "⪇";
	var lneqq = "≨";
	var lnsim = "⋦";
	var loang = "⟬";
	var loarr = "⇽";
	var lobrk = "⟦";
	var longleftarrow = "⟵";
	var LongLeftArrow = "⟵";
	var Longleftarrow = "⟸";
	var longleftrightarrow = "⟷";
	var LongLeftRightArrow = "⟷";
	var Longleftrightarrow = "⟺";
	var longmapsto = "⟼";
	var longrightarrow = "⟶";
	var LongRightArrow = "⟶";
	var Longrightarrow = "⟹";
	var looparrowleft = "↫";
	var looparrowright = "↬";
	var lopar = "⦅";
	var Lopf = "𝕃";
	var lopf = "𝕝";
	var loplus = "⨭";
	var lotimes = "⨴";
	var lowast = "∗";
	var lowbar = "_";
	var LowerLeftArrow = "↙";
	var LowerRightArrow = "↘";
	var loz = "◊";
	var lozenge = "◊";
	var lozf = "⧫";
	var lpar = "(";
	var lparlt = "⦓";
	var lrarr = "⇆";
	var lrcorner = "⌟";
	var lrhar = "⇋";
	var lrhard = "⥭";
	var lrm = "‎";
	var lrtri = "⊿";
	var lsaquo = "‹";
	var lscr = "𝓁";
	var Lscr = "ℒ";
	var lsh = "↰";
	var Lsh = "↰";
	var lsim = "≲";
	var lsime = "⪍";
	var lsimg = "⪏";
	var lsqb = "[";
	var lsquo = "‘";
	var lsquor = "‚";
	var Lstrok = "Ł";
	var lstrok = "ł";
	var ltcc = "⪦";
	var ltcir = "⩹";
	var lt$2 = "<";
	var LT$1 = "<";
	var Lt = "≪";
	var ltdot = "⋖";
	var lthree = "⋋";
	var ltimes = "⋉";
	var ltlarr = "⥶";
	var ltquest = "⩻";
	var ltri = "◃";
	var ltrie = "⊴";
	var ltrif = "◂";
	var ltrPar = "⦖";
	var lurdshar = "⥊";
	var luruhar = "⥦";
	var lvertneqq = "≨︀";
	var lvnE = "≨︀";
	var macr$1 = "¯";
	var male = "♂";
	var malt = "✠";
	var maltese = "✠";
	var map = "↦";
	var mapsto = "↦";
	var mapstodown = "↧";
	var mapstoleft = "↤";
	var mapstoup = "↥";
	var marker = "▮";
	var mcomma = "⨩";
	var Mcy = "М";
	var mcy = "м";
	var mdash = "—";
	var mDDot = "∺";
	var measuredangle = "∡";
	var MediumSpace = " ";
	var Mellintrf = "ℳ";
	var Mfr = "𝔐";
	var mfr = "𝔪";
	var mho = "℧";
	var micro$1 = "µ";
	var midast = "*";
	var midcir = "⫰";
	var mid = "∣";
	var middot$1 = "·";
	var minusb = "⊟";
	var minus = "−";
	var minusd = "∸";
	var minusdu = "⨪";
	var MinusPlus = "∓";
	var mlcp = "⫛";
	var mldr = "…";
	var mnplus = "∓";
	var models = "⊧";
	var Mopf = "𝕄";
	var mopf = "𝕞";
	var mp = "∓";
	var mscr = "𝓂";
	var Mscr = "ℳ";
	var mstpos = "∾";
	var Mu = "Μ";
	var mu = "μ";
	var multimap = "⊸";
	var mumap = "⊸";
	var nabla = "∇";
	var Nacute = "Ń";
	var nacute = "ń";
	var nang = "∠⃒";
	var nap = "≉";
	var napE = "⩰̸";
	var napid = "≋̸";
	var napos = "ŉ";
	var napprox = "≉";
	var natural = "♮";
	var naturals = "ℕ";
	var natur = "♮";
	var nbsp$1 = " ";
	var nbump = "≎̸";
	var nbumpe = "≏̸";
	var ncap = "⩃";
	var Ncaron = "Ň";
	var ncaron = "ň";
	var Ncedil = "Ņ";
	var ncedil = "ņ";
	var ncong = "≇";
	var ncongdot = "⩭̸";
	var ncup = "⩂";
	var Ncy = "Н";
	var ncy = "н";
	var ndash = "–";
	var nearhk = "⤤";
	var nearr = "↗";
	var neArr = "⇗";
	var nearrow = "↗";
	var ne = "≠";
	var nedot = "≐̸";
	var NegativeMediumSpace = "​";
	var NegativeThickSpace = "​";
	var NegativeThinSpace = "​";
	var NegativeVeryThinSpace = "​";
	var nequiv = "≢";
	var nesear = "⤨";
	var nesim = "≂̸";
	var NestedGreaterGreater = "≫";
	var NestedLessLess = "≪";
	var NewLine = "\n";
	var nexist = "∄";
	var nexists = "∄";
	var Nfr = "𝔑";
	var nfr = "𝔫";
	var ngE = "≧̸";
	var nge = "≱";
	var ngeq = "≱";
	var ngeqq = "≧̸";
	var ngeqslant = "⩾̸";
	var nges = "⩾̸";
	var nGg = "⋙̸";
	var ngsim = "≵";
	var nGt = "≫⃒";
	var ngt = "≯";
	var ngtr = "≯";
	var nGtv = "≫̸";
	var nharr = "↮";
	var nhArr = "⇎";
	var nhpar = "⫲";
	var ni = "∋";
	var nis = "⋼";
	var nisd = "⋺";
	var niv = "∋";
	var NJcy = "Њ";
	var njcy = "њ";
	var nlarr = "↚";
	var nlArr = "⇍";
	var nldr = "‥";
	var nlE = "≦̸";
	var nle = "≰";
	var nleftarrow = "↚";
	var nLeftarrow = "⇍";
	var nleftrightarrow = "↮";
	var nLeftrightarrow = "⇎";
	var nleq = "≰";
	var nleqq = "≦̸";
	var nleqslant = "⩽̸";
	var nles = "⩽̸";
	var nless = "≮";
	var nLl = "⋘̸";
	var nlsim = "≴";
	var nLt = "≪⃒";
	var nlt = "≮";
	var nltri = "⋪";
	var nltrie = "⋬";
	var nLtv = "≪̸";
	var nmid = "∤";
	var NoBreak = "⁠";
	var NonBreakingSpace = " ";
	var nopf = "𝕟";
	var Nopf = "ℕ";
	var Not = "⫬";
	var not$1 = "¬";
	var NotCongruent = "≢";
	var NotCupCap = "≭";
	var NotDoubleVerticalBar = "∦";
	var NotElement = "∉";
	var NotEqual = "≠";
	var NotEqualTilde = "≂̸";
	var NotExists = "∄";
	var NotGreater = "≯";
	var NotGreaterEqual = "≱";
	var NotGreaterFullEqual = "≧̸";
	var NotGreaterGreater = "≫̸";
	var NotGreaterLess = "≹";
	var NotGreaterSlantEqual = "⩾̸";
	var NotGreaterTilde = "≵";
	var NotHumpDownHump = "≎̸";
	var NotHumpEqual = "≏̸";
	var notin = "∉";
	var notindot = "⋵̸";
	var notinE = "⋹̸";
	var notinva = "∉";
	var notinvb = "⋷";
	var notinvc = "⋶";
	var NotLeftTriangleBar = "⧏̸";
	var NotLeftTriangle = "⋪";
	var NotLeftTriangleEqual = "⋬";
	var NotLess = "≮";
	var NotLessEqual = "≰";
	var NotLessGreater = "≸";
	var NotLessLess = "≪̸";
	var NotLessSlantEqual = "⩽̸";
	var NotLessTilde = "≴";
	var NotNestedGreaterGreater = "⪢̸";
	var NotNestedLessLess = "⪡̸";
	var notni = "∌";
	var notniva = "∌";
	var notnivb = "⋾";
	var notnivc = "⋽";
	var NotPrecedes = "⊀";
	var NotPrecedesEqual = "⪯̸";
	var NotPrecedesSlantEqual = "⋠";
	var NotReverseElement = "∌";
	var NotRightTriangleBar = "⧐̸";
	var NotRightTriangle = "⋫";
	var NotRightTriangleEqual = "⋭";
	var NotSquareSubset = "⊏̸";
	var NotSquareSubsetEqual = "⋢";
	var NotSquareSuperset = "⊐̸";
	var NotSquareSupersetEqual = "⋣";
	var NotSubset = "⊂⃒";
	var NotSubsetEqual = "⊈";
	var NotSucceeds = "⊁";
	var NotSucceedsEqual = "⪰̸";
	var NotSucceedsSlantEqual = "⋡";
	var NotSucceedsTilde = "≿̸";
	var NotSuperset = "⊃⃒";
	var NotSupersetEqual = "⊉";
	var NotTilde = "≁";
	var NotTildeEqual = "≄";
	var NotTildeFullEqual = "≇";
	var NotTildeTilde = "≉";
	var NotVerticalBar = "∤";
	var nparallel = "∦";
	var npar = "∦";
	var nparsl = "⫽⃥";
	var npart = "∂̸";
	var npolint = "⨔";
	var npr = "⊀";
	var nprcue = "⋠";
	var nprec = "⊀";
	var npreceq = "⪯̸";
	var npre = "⪯̸";
	var nrarrc = "⤳̸";
	var nrarr = "↛";
	var nrArr = "⇏";
	var nrarrw = "↝̸";
	var nrightarrow = "↛";
	var nRightarrow = "⇏";
	var nrtri = "⋫";
	var nrtrie = "⋭";
	var nsc = "⊁";
	var nsccue = "⋡";
	var nsce = "⪰̸";
	var Nscr = "𝒩";
	var nscr = "𝓃";
	var nshortmid = "∤";
	var nshortparallel = "∦";
	var nsim = "≁";
	var nsime = "≄";
	var nsimeq = "≄";
	var nsmid = "∤";
	var nspar = "∦";
	var nsqsube = "⋢";
	var nsqsupe = "⋣";
	var nsub = "⊄";
	var nsubE = "⫅̸";
	var nsube = "⊈";
	var nsubset = "⊂⃒";
	var nsubseteq = "⊈";
	var nsubseteqq = "⫅̸";
	var nsucc = "⊁";
	var nsucceq = "⪰̸";
	var nsup = "⊅";
	var nsupE = "⫆̸";
	var nsupe = "⊉";
	var nsupset = "⊃⃒";
	var nsupseteq = "⊉";
	var nsupseteqq = "⫆̸";
	var ntgl = "≹";
	var Ntilde$1 = "Ñ";
	var ntilde$1 = "ñ";
	var ntlg = "≸";
	var ntriangleleft = "⋪";
	var ntrianglelefteq = "⋬";
	var ntriangleright = "⋫";
	var ntrianglerighteq = "⋭";
	var Nu = "Ν";
	var nu = "ν";
	var num = "#";
	var numero = "№";
	var numsp = " ";
	var nvap = "≍⃒";
	var nvdash = "⊬";
	var nvDash = "⊭";
	var nVdash = "⊮";
	var nVDash = "⊯";
	var nvge = "≥⃒";
	var nvgt = ">⃒";
	var nvHarr = "⤄";
	var nvinfin = "⧞";
	var nvlArr = "⤂";
	var nvle = "≤⃒";
	var nvlt = "<⃒";
	var nvltrie = "⊴⃒";
	var nvrArr = "⤃";
	var nvrtrie = "⊵⃒";
	var nvsim = "∼⃒";
	var nwarhk = "⤣";
	var nwarr = "↖";
	var nwArr = "⇖";
	var nwarrow = "↖";
	var nwnear = "⤧";
	var Oacute$1 = "Ó";
	var oacute$1 = "ó";
	var oast = "⊛";
	var Ocirc$1 = "Ô";
	var ocirc$1 = "ô";
	var ocir = "⊚";
	var Ocy = "О";
	var ocy = "о";
	var odash = "⊝";
	var Odblac = "Ő";
	var odblac = "ő";
	var odiv = "⨸";
	var odot = "⊙";
	var odsold = "⦼";
	var OElig = "Œ";
	var oelig = "œ";
	var ofcir = "⦿";
	var Ofr = "𝔒";
	var ofr = "𝔬";
	var ogon = "˛";
	var Ograve$1 = "Ò";
	var ograve$1 = "ò";
	var ogt = "⧁";
	var ohbar = "⦵";
	var ohm = "Ω";
	var oint = "∮";
	var olarr = "↺";
	var olcir = "⦾";
	var olcross = "⦻";
	var oline = "‾";
	var olt = "⧀";
	var Omacr = "Ō";
	var omacr = "ō";
	var Omega = "Ω";
	var omega = "ω";
	var Omicron = "Ο";
	var omicron = "ο";
	var omid = "⦶";
	var ominus = "⊖";
	var Oopf = "𝕆";
	var oopf = "𝕠";
	var opar = "⦷";
	var OpenCurlyDoubleQuote = "“";
	var OpenCurlyQuote = "‘";
	var operp = "⦹";
	var oplus = "⊕";
	var orarr = "↻";
	var Or = "⩔";
	var or = "∨";
	var ord = "⩝";
	var order = "ℴ";
	var orderof = "ℴ";
	var ordf$1 = "ª";
	var ordm$1 = "º";
	var origof = "⊶";
	var oror = "⩖";
	var orslope = "⩗";
	var orv = "⩛";
	var oS = "Ⓢ";
	var Oscr = "𝒪";
	var oscr = "ℴ";
	var Oslash$1 = "Ø";
	var oslash$1 = "ø";
	var osol = "⊘";
	var Otilde$1 = "Õ";
	var otilde$1 = "õ";
	var otimesas = "⨶";
	var Otimes = "⨷";
	var otimes = "⊗";
	var Ouml$1 = "Ö";
	var ouml$1 = "ö";
	var ovbar = "⌽";
	var OverBar = "‾";
	var OverBrace = "⏞";
	var OverBracket = "⎴";
	var OverParenthesis = "⏜";
	var para$1 = "¶";
	var parallel = "∥";
	var par = "∥";
	var parsim = "⫳";
	var parsl = "⫽";
	var part = "∂";
	var PartialD = "∂";
	var Pcy = "П";
	var pcy = "п";
	var percnt = "%";
	var period = ".";
	var permil = "‰";
	var perp = "⊥";
	var pertenk = "‱";
	var Pfr = "𝔓";
	var pfr = "𝔭";
	var Phi = "Φ";
	var phi = "φ";
	var phiv = "ϕ";
	var phmmat = "ℳ";
	var phone = "☎";
	var Pi = "Π";
	var pi = "π";
	var pitchfork = "⋔";
	var piv = "ϖ";
	var planck = "ℏ";
	var planckh = "ℎ";
	var plankv = "ℏ";
	var plusacir = "⨣";
	var plusb = "⊞";
	var pluscir = "⨢";
	var plus = "+";
	var plusdo = "∔";
	var plusdu = "⨥";
	var pluse = "⩲";
	var PlusMinus = "±";
	var plusmn$1 = "±";
	var plussim = "⨦";
	var plustwo = "⨧";
	var pm = "±";
	var Poincareplane = "ℌ";
	var pointint = "⨕";
	var popf = "𝕡";
	var Popf = "ℙ";
	var pound$1 = "£";
	var prap = "⪷";
	var Pr = "⪻";
	var pr = "≺";
	var prcue = "≼";
	var precapprox = "⪷";
	var prec = "≺";
	var preccurlyeq = "≼";
	var Precedes = "≺";
	var PrecedesEqual = "⪯";
	var PrecedesSlantEqual = "≼";
	var PrecedesTilde = "≾";
	var preceq = "⪯";
	var precnapprox = "⪹";
	var precneqq = "⪵";
	var precnsim = "⋨";
	var pre = "⪯";
	var prE = "⪳";
	var precsim = "≾";
	var prime = "′";
	var Prime = "″";
	var primes = "ℙ";
	var prnap = "⪹";
	var prnE = "⪵";
	var prnsim = "⋨";
	var prod = "∏";
	var Product = "∏";
	var profalar = "⌮";
	var profline = "⌒";
	var profsurf = "⌓";
	var prop$1 = "∝";
	var Proportional = "∝";
	var Proportion = "∷";
	var propto = "∝";
	var prsim = "≾";
	var prurel = "⊰";
	var Pscr = "𝒫";
	var pscr = "𝓅";
	var Psi = "Ψ";
	var psi = "ψ";
	var puncsp = " ";
	var Qfr = "𝔔";
	var qfr = "𝔮";
	var qint = "⨌";
	var qopf = "𝕢";
	var Qopf = "ℚ";
	var qprime = "⁗";
	var Qscr = "𝒬";
	var qscr = "𝓆";
	var quaternions = "ℍ";
	var quatint = "⨖";
	var quest = "?";
	var questeq = "≟";
	var quot$2 = "\"";
	var QUOT$1 = "\"";
	var rAarr = "⇛";
	var race = "∽̱";
	var Racute = "Ŕ";
	var racute = "ŕ";
	var radic = "√";
	var raemptyv = "⦳";
	var rang = "⟩";
	var Rang = "⟫";
	var rangd = "⦒";
	var range$1 = "⦥";
	var rangle = "⟩";
	var raquo$1 = "»";
	var rarrap = "⥵";
	var rarrb = "⇥";
	var rarrbfs = "⤠";
	var rarrc = "⤳";
	var rarr = "→";
	var Rarr = "↠";
	var rArr = "⇒";
	var rarrfs = "⤞";
	var rarrhk = "↪";
	var rarrlp = "↬";
	var rarrpl = "⥅";
	var rarrsim = "⥴";
	var Rarrtl = "⤖";
	var rarrtl = "↣";
	var rarrw = "↝";
	var ratail = "⤚";
	var rAtail = "⤜";
	var ratio = "∶";
	var rationals = "ℚ";
	var rbarr = "⤍";
	var rBarr = "⤏";
	var RBarr = "⤐";
	var rbbrk = "❳";
	var rbrace = "}";
	var rbrack = "]";
	var rbrke = "⦌";
	var rbrksld = "⦎";
	var rbrkslu = "⦐";
	var Rcaron = "Ř";
	var rcaron = "ř";
	var Rcedil = "Ŗ";
	var rcedil = "ŗ";
	var rceil = "⌉";
	var rcub = "}";
	var Rcy = "Р";
	var rcy = "р";
	var rdca = "⤷";
	var rdldhar = "⥩";
	var rdquo = "”";
	var rdquor = "”";
	var rdsh = "↳";
	var real = "ℜ";
	var realine = "ℛ";
	var realpart = "ℜ";
	var reals = "ℝ";
	var Re = "ℜ";
	var rect = "▭";
	var reg$1 = "®";
	var REG$1 = "®";
	var ReverseElement = "∋";
	var ReverseEquilibrium = "⇋";
	var ReverseUpEquilibrium = "⥯";
	var rfisht = "⥽";
	var rfloor = "⌋";
	var rfr = "𝔯";
	var Rfr = "ℜ";
	var rHar = "⥤";
	var rhard = "⇁";
	var rharu = "⇀";
	var rharul = "⥬";
	var Rho = "Ρ";
	var rho = "ρ";
	var rhov = "ϱ";
	var RightAngleBracket = "⟩";
	var RightArrowBar = "⇥";
	var rightarrow = "→";
	var RightArrow = "→";
	var Rightarrow = "⇒";
	var RightArrowLeftArrow = "⇄";
	var rightarrowtail = "↣";
	var RightCeiling = "⌉";
	var RightDoubleBracket = "⟧";
	var RightDownTeeVector = "⥝";
	var RightDownVectorBar = "⥕";
	var RightDownVector = "⇂";
	var RightFloor = "⌋";
	var rightharpoondown = "⇁";
	var rightharpoonup = "⇀";
	var rightleftarrows = "⇄";
	var rightleftharpoons = "⇌";
	var rightrightarrows = "⇉";
	var rightsquigarrow = "↝";
	var RightTeeArrow = "↦";
	var RightTee = "⊢";
	var RightTeeVector = "⥛";
	var rightthreetimes = "⋌";
	var RightTriangleBar = "⧐";
	var RightTriangle = "⊳";
	var RightTriangleEqual = "⊵";
	var RightUpDownVector = "⥏";
	var RightUpTeeVector = "⥜";
	var RightUpVectorBar = "⥔";
	var RightUpVector = "↾";
	var RightVectorBar = "⥓";
	var RightVector = "⇀";
	var ring = "˚";
	var risingdotseq = "≓";
	var rlarr = "⇄";
	var rlhar = "⇌";
	var rlm = "‏";
	var rmoustache = "⎱";
	var rmoust = "⎱";
	var rnmid = "⫮";
	var roang = "⟭";
	var roarr = "⇾";
	var robrk = "⟧";
	var ropar = "⦆";
	var ropf = "𝕣";
	var Ropf = "ℝ";
	var roplus = "⨮";
	var rotimes = "⨵";
	var RoundImplies = "⥰";
	var rpar = ")";
	var rpargt = "⦔";
	var rppolint = "⨒";
	var rrarr = "⇉";
	var Rrightarrow = "⇛";
	var rsaquo = "›";
	var rscr = "𝓇";
	var Rscr = "ℛ";
	var rsh = "↱";
	var Rsh = "↱";
	var rsqb = "]";
	var rsquo = "’";
	var rsquor = "’";
	var rthree = "⋌";
	var rtimes = "⋊";
	var rtri = "▹";
	var rtrie = "⊵";
	var rtrif = "▸";
	var rtriltri = "⧎";
	var RuleDelayed = "⧴";
	var ruluhar = "⥨";
	var rx = "℞";
	var Sacute = "Ś";
	var sacute = "ś";
	var sbquo = "‚";
	var scap = "⪸";
	var Scaron = "Š";
	var scaron = "š";
	var Sc = "⪼";
	var sc = "≻";
	var sccue = "≽";
	var sce = "⪰";
	var scE = "⪴";
	var Scedil = "Ş";
	var scedil = "ş";
	var Scirc = "Ŝ";
	var scirc = "ŝ";
	var scnap = "⪺";
	var scnE = "⪶";
	var scnsim = "⋩";
	var scpolint = "⨓";
	var scsim = "≿";
	var Scy = "С";
	var scy = "с";
	var sdotb = "⊡";
	var sdot = "⋅";
	var sdote = "⩦";
	var searhk = "⤥";
	var searr = "↘";
	var seArr = "⇘";
	var searrow = "↘";
	var sect$1 = "§";
	var semi = ";";
	var seswar = "⤩";
	var setminus = "∖";
	var setmn = "∖";
	var sext = "✶";
	var Sfr = "𝔖";
	var sfr = "𝔰";
	var sfrown = "⌢";
	var sharp = "♯";
	var SHCHcy = "Щ";
	var shchcy = "щ";
	var SHcy = "Ш";
	var shcy = "ш";
	var ShortDownArrow = "↓";
	var ShortLeftArrow = "←";
	var shortmid = "∣";
	var shortparallel = "∥";
	var ShortRightArrow = "→";
	var ShortUpArrow = "↑";
	var shy$1 = "­";
	var Sigma = "Σ";
	var sigma = "σ";
	var sigmaf = "ς";
	var sigmav = "ς";
	var sim = "∼";
	var simdot = "⩪";
	var sime = "≃";
	var simeq = "≃";
	var simg = "⪞";
	var simgE = "⪠";
	var siml = "⪝";
	var simlE = "⪟";
	var simne = "≆";
	var simplus = "⨤";
	var simrarr = "⥲";
	var slarr = "←";
	var SmallCircle = "∘";
	var smallsetminus = "∖";
	var smashp = "⨳";
	var smeparsl = "⧤";
	var smid = "∣";
	var smile = "⌣";
	var smt = "⪪";
	var smte = "⪬";
	var smtes = "⪬︀";
	var SOFTcy = "Ь";
	var softcy = "ь";
	var solbar = "⌿";
	var solb = "⧄";
	var sol = "/";
	var Sopf = "𝕊";
	var sopf = "𝕤";
	var spades = "♠";
	var spadesuit = "♠";
	var spar = "∥";
	var sqcap = "⊓";
	var sqcaps = "⊓︀";
	var sqcup = "⊔";
	var sqcups = "⊔︀";
	var Sqrt = "√";
	var sqsub = "⊏";
	var sqsube = "⊑";
	var sqsubset = "⊏";
	var sqsubseteq = "⊑";
	var sqsup = "⊐";
	var sqsupe = "⊒";
	var sqsupset = "⊐";
	var sqsupseteq = "⊒";
	var square = "□";
	var Square = "□";
	var SquareIntersection = "⊓";
	var SquareSubset = "⊏";
	var SquareSubsetEqual = "⊑";
	var SquareSuperset = "⊐";
	var SquareSupersetEqual = "⊒";
	var SquareUnion = "⊔";
	var squarf = "▪";
	var squ = "□";
	var squf = "▪";
	var srarr = "→";
	var Sscr = "𝒮";
	var sscr = "𝓈";
	var ssetmn = "∖";
	var ssmile = "⌣";
	var sstarf = "⋆";
	var Star = "⋆";
	var star = "☆";
	var starf = "★";
	var straightepsilon = "ϵ";
	var straightphi = "ϕ";
	var strns = "¯";
	var sub = "⊂";
	var Sub = "⋐";
	var subdot = "⪽";
	var subE = "⫅";
	var sube = "⊆";
	var subedot = "⫃";
	var submult = "⫁";
	var subnE = "⫋";
	var subne = "⊊";
	var subplus = "⪿";
	var subrarr = "⥹";
	var subset = "⊂";
	var Subset = "⋐";
	var subseteq = "⊆";
	var subseteqq = "⫅";
	var SubsetEqual = "⊆";
	var subsetneq = "⊊";
	var subsetneqq = "⫋";
	var subsim = "⫇";
	var subsub = "⫕";
	var subsup = "⫓";
	var succapprox = "⪸";
	var succ = "≻";
	var succcurlyeq = "≽";
	var Succeeds = "≻";
	var SucceedsEqual = "⪰";
	var SucceedsSlantEqual = "≽";
	var SucceedsTilde = "≿";
	var succeq = "⪰";
	var succnapprox = "⪺";
	var succneqq = "⪶";
	var succnsim = "⋩";
	var succsim = "≿";
	var SuchThat = "∋";
	var sum = "∑";
	var Sum = "∑";
	var sung = "♪";
	var sup1$1 = "¹";
	var sup2$1 = "²";
	var sup3$1 = "³";
	var sup = "⊃";
	var Sup = "⋑";
	var supdot = "⪾";
	var supdsub = "⫘";
	var supE = "⫆";
	var supe = "⊇";
	var supedot = "⫄";
	var Superset = "⊃";
	var SupersetEqual = "⊇";
	var suphsol = "⟉";
	var suphsub = "⫗";
	var suplarr = "⥻";
	var supmult = "⫂";
	var supnE = "⫌";
	var supne = "⊋";
	var supplus = "⫀";
	var supset = "⊃";
	var Supset = "⋑";
	var supseteq = "⊇";
	var supseteqq = "⫆";
	var supsetneq = "⊋";
	var supsetneqq = "⫌";
	var supsim = "⫈";
	var supsub = "⫔";
	var supsup = "⫖";
	var swarhk = "⤦";
	var swarr = "↙";
	var swArr = "⇙";
	var swarrow = "↙";
	var swnwar = "⤪";
	var szlig$1 = "ß";
	var Tab = "\t";
	var target = "⌖";
	var Tau = "Τ";
	var tau = "τ";
	var tbrk = "⎴";
	var Tcaron = "Ť";
	var tcaron = "ť";
	var Tcedil = "Ţ";
	var tcedil = "ţ";
	var Tcy = "Т";
	var tcy = "т";
	var tdot = "⃛";
	var telrec = "⌕";
	var Tfr = "𝔗";
	var tfr = "𝔱";
	var there4 = "∴";
	var therefore = "∴";
	var Therefore = "∴";
	var Theta = "Θ";
	var theta = "θ";
	var thetasym = "ϑ";
	var thetav = "ϑ";
	var thickapprox = "≈";
	var thicksim = "∼";
	var ThickSpace = "  ";
	var ThinSpace = " ";
	var thinsp = " ";
	var thkap = "≈";
	var thksim = "∼";
	var THORN$1 = "Þ";
	var thorn$1 = "þ";
	var tilde = "˜";
	var Tilde = "∼";
	var TildeEqual = "≃";
	var TildeFullEqual = "≅";
	var TildeTilde = "≈";
	var timesbar = "⨱";
	var timesb = "⊠";
	var times$1 = "×";
	var timesd = "⨰";
	var tint = "∭";
	var toea = "⤨";
	var topbot = "⌶";
	var topcir = "⫱";
	var top = "⊤";
	var Topf = "𝕋";
	var topf = "𝕥";
	var topfork = "⫚";
	var tosa = "⤩";
	var tprime = "‴";
	var trade = "™";
	var TRADE = "™";
	var triangle = "▵";
	var triangledown = "▿";
	var triangleleft = "◃";
	var trianglelefteq = "⊴";
	var triangleq = "≜";
	var triangleright = "▹";
	var trianglerighteq = "⊵";
	var tridot = "◬";
	var trie = "≜";
	var triminus = "⨺";
	var TripleDot = "⃛";
	var triplus = "⨹";
	var trisb = "⧍";
	var tritime = "⨻";
	var trpezium = "⏢";
	var Tscr = "𝒯";
	var tscr = "𝓉";
	var TScy = "Ц";
	var tscy = "ц";
	var TSHcy = "Ћ";
	var tshcy = "ћ";
	var Tstrok = "Ŧ";
	var tstrok = "ŧ";
	var twixt = "≬";
	var twoheadleftarrow = "↞";
	var twoheadrightarrow = "↠";
	var Uacute$1 = "Ú";
	var uacute$1 = "ú";
	var uarr = "↑";
	var Uarr = "↟";
	var uArr = "⇑";
	var Uarrocir = "⥉";
	var Ubrcy = "Ў";
	var ubrcy = "ў";
	var Ubreve = "Ŭ";
	var ubreve = "ŭ";
	var Ucirc$1 = "Û";
	var ucirc$1 = "û";
	var Ucy = "У";
	var ucy = "у";
	var udarr = "⇅";
	var Udblac = "Ű";
	var udblac = "ű";
	var udhar = "⥮";
	var ufisht = "⥾";
	var Ufr = "𝔘";
	var ufr = "𝔲";
	var Ugrave$1 = "Ù";
	var ugrave$1 = "ù";
	var uHar = "⥣";
	var uharl = "↿";
	var uharr = "↾";
	var uhblk = "▀";
	var ulcorn = "⌜";
	var ulcorner = "⌜";
	var ulcrop = "⌏";
	var ultri = "◸";
	var Umacr = "Ū";
	var umacr = "ū";
	var uml$1 = "¨";
	var UnderBar = "_";
	var UnderBrace = "⏟";
	var UnderBracket = "⎵";
	var UnderParenthesis = "⏝";
	var Union = "⋃";
	var UnionPlus = "⊎";
	var Uogon = "Ų";
	var uogon = "ų";
	var Uopf = "𝕌";
	var uopf = "𝕦";
	var UpArrowBar = "⤒";
	var uparrow = "↑";
	var UpArrow = "↑";
	var Uparrow = "⇑";
	var UpArrowDownArrow = "⇅";
	var updownarrow = "↕";
	var UpDownArrow = "↕";
	var Updownarrow = "⇕";
	var UpEquilibrium = "⥮";
	var upharpoonleft = "↿";
	var upharpoonright = "↾";
	var uplus = "⊎";
	var UpperLeftArrow = "↖";
	var UpperRightArrow = "↗";
	var upsi = "υ";
	var Upsi = "ϒ";
	var upsih = "ϒ";
	var Upsilon = "Υ";
	var upsilon = "υ";
	var UpTeeArrow = "↥";
	var UpTee = "⊥";
	var upuparrows = "⇈";
	var urcorn = "⌝";
	var urcorner = "⌝";
	var urcrop = "⌎";
	var Uring = "Ů";
	var uring = "ů";
	var urtri = "◹";
	var Uscr = "𝒰";
	var uscr = "𝓊";
	var utdot = "⋰";
	var Utilde = "Ũ";
	var utilde = "ũ";
	var utri = "▵";
	var utrif = "▴";
	var uuarr = "⇈";
	var Uuml$1 = "Ü";
	var uuml$1 = "ü";
	var uwangle = "⦧";
	var vangrt = "⦜";
	var varepsilon = "ϵ";
	var varkappa = "ϰ";
	var varnothing = "∅";
	var varphi = "ϕ";
	var varpi = "ϖ";
	var varpropto = "∝";
	var varr = "↕";
	var vArr = "⇕";
	var varrho = "ϱ";
	var varsigma = "ς";
	var varsubsetneq = "⊊︀";
	var varsubsetneqq = "⫋︀";
	var varsupsetneq = "⊋︀";
	var varsupsetneqq = "⫌︀";
	var vartheta = "ϑ";
	var vartriangleleft = "⊲";
	var vartriangleright = "⊳";
	var vBar = "⫨";
	var Vbar = "⫫";
	var vBarv = "⫩";
	var Vcy = "В";
	var vcy = "в";
	var vdash = "⊢";
	var vDash = "⊨";
	var Vdash = "⊩";
	var VDash = "⊫";
	var Vdashl = "⫦";
	var veebar = "⊻";
	var vee = "∨";
	var Vee = "⋁";
	var veeeq = "≚";
	var vellip = "⋮";
	var verbar = "|";
	var Verbar = "‖";
	var vert = "|";
	var Vert = "‖";
	var VerticalBar = "∣";
	var VerticalLine = "|";
	var VerticalSeparator = "❘";
	var VerticalTilde = "≀";
	var VeryThinSpace = " ";
	var Vfr = "𝔙";
	var vfr = "𝔳";
	var vltri = "⊲";
	var vnsub = "⊂⃒";
	var vnsup = "⊃⃒";
	var Vopf = "𝕍";
	var vopf = "𝕧";
	var vprop = "∝";
	var vrtri = "⊳";
	var Vscr = "𝒱";
	var vscr = "𝓋";
	var vsubnE = "⫋︀";
	var vsubne = "⊊︀";
	var vsupnE = "⫌︀";
	var vsupne = "⊋︀";
	var Vvdash = "⊪";
	var vzigzag = "⦚";
	var Wcirc = "Ŵ";
	var wcirc = "ŵ";
	var wedbar = "⩟";
	var wedge = "∧";
	var Wedge = "⋀";
	var wedgeq = "≙";
	var weierp = "℘";
	var Wfr = "𝔚";
	var wfr = "𝔴";
	var Wopf = "𝕎";
	var wopf = "𝕨";
	var wp = "℘";
	var wr = "≀";
	var wreath = "≀";
	var Wscr = "𝒲";
	var wscr = "𝓌";
	var xcap = "⋂";
	var xcirc = "◯";
	var xcup = "⋃";
	var xdtri = "▽";
	var Xfr = "𝔛";
	var xfr = "𝔵";
	var xharr = "⟷";
	var xhArr = "⟺";
	var Xi = "Ξ";
	var xi = "ξ";
	var xlarr = "⟵";
	var xlArr = "⟸";
	var xmap = "⟼";
	var xnis = "⋻";
	var xodot = "⨀";
	var Xopf = "𝕏";
	var xopf = "𝕩";
	var xoplus = "⨁";
	var xotime = "⨂";
	var xrarr = "⟶";
	var xrArr = "⟹";
	var Xscr = "𝒳";
	var xscr = "𝓍";
	var xsqcup = "⨆";
	var xuplus = "⨄";
	var xutri = "△";
	var xvee = "⋁";
	var xwedge = "⋀";
	var Yacute$1 = "Ý";
	var yacute$1 = "ý";
	var YAcy = "Я";
	var yacy = "я";
	var Ycirc = "Ŷ";
	var ycirc = "ŷ";
	var Ycy = "Ы";
	var ycy = "ы";
	var yen$1 = "¥";
	var Yfr = "𝔜";
	var yfr = "𝔶";
	var YIcy = "Ї";
	var yicy = "ї";
	var Yopf = "𝕐";
	var yopf = "𝕪";
	var Yscr = "𝒴";
	var yscr = "𝓎";
	var YUcy = "Ю";
	var yucy = "ю";
	var yuml$1 = "ÿ";
	var Yuml = "Ÿ";
	var Zacute = "Ź";
	var zacute = "ź";
	var Zcaron = "Ž";
	var zcaron = "ž";
	var Zcy = "З";
	var zcy = "з";
	var Zdot = "Ż";
	var zdot = "ż";
	var zeetrf = "ℨ";
	var ZeroWidthSpace = "​";
	var Zeta = "Ζ";
	var zeta = "ζ";
	var zfr = "𝔷";
	var Zfr = "ℨ";
	var ZHcy = "Ж";
	var zhcy = "ж";
	var zigrarr = "⇝";
	var zopf = "𝕫";
	var Zopf = "ℤ";
	var Zscr = "𝒵";
	var zscr = "𝓏";
	var zwj = "‍";
	var zwnj = "‌";
	var require$$1$2 = {
		Aacute: Aacute$1,
		aacute: aacute$1,
		Abreve: Abreve,
		abreve: abreve,
		ac: ac,
		acd: acd,
		acE: acE,
		Acirc: Acirc$1,
		acirc: acirc$1,
		acute: acute$1,
		Acy: Acy,
		acy: acy,
		AElig: AElig$1,
		aelig: aelig$1,
		af: af,
		Afr: Afr,
		afr: afr,
		Agrave: Agrave$1,
		agrave: agrave$1,
		alefsym: alefsym,
		aleph: aleph,
		Alpha: Alpha,
		alpha: alpha,
		Amacr: Amacr,
		amacr: amacr,
		amalg: amalg,
		amp: amp$2,
		AMP: AMP$1,
		andand: andand,
		And: And,
		and: and,
		andd: andd,
		andslope: andslope,
		andv: andv,
		ang: ang,
		ange: ange,
		angle: angle,
		angmsdaa: angmsdaa,
		angmsdab: angmsdab,
		angmsdac: angmsdac,
		angmsdad: angmsdad,
		angmsdae: angmsdae,
		angmsdaf: angmsdaf,
		angmsdag: angmsdag,
		angmsdah: angmsdah,
		angmsd: angmsd,
		angrt: angrt,
		angrtvb: angrtvb,
		angrtvbd: angrtvbd,
		angsph: angsph,
		angst: angst,
		angzarr: angzarr,
		Aogon: Aogon,
		aogon: aogon,
		Aopf: Aopf,
		aopf: aopf,
		apacir: apacir,
		ap: ap,
		apE: apE,
		ape: ape,
		apid: apid,
		apos: apos$1,
		ApplyFunction: ApplyFunction,
		approx: approx,
		approxeq: approxeq,
		Aring: Aring$1,
		aring: aring$1,
		Ascr: Ascr,
		ascr: ascr,
		Assign: Assign,
		ast: ast,
		asymp: asymp,
		asympeq: asympeq,
		Atilde: Atilde$1,
		atilde: atilde$1,
		Auml: Auml$1,
		auml: auml$1,
		awconint: awconint,
		awint: awint,
		backcong: backcong,
		backepsilon: backepsilon,
		backprime: backprime,
		backsim: backsim,
		backsimeq: backsimeq,
		Backslash: Backslash,
		Barv: Barv,
		barvee: barvee,
		barwed: barwed,
		Barwed: Barwed,
		barwedge: barwedge,
		bbrk: bbrk,
		bbrktbrk: bbrktbrk,
		bcong: bcong,
		Bcy: Bcy,
		bcy: bcy,
		bdquo: bdquo,
		becaus: becaus,
		because: because,
		Because: Because,
		bemptyv: bemptyv,
		bepsi: bepsi,
		bernou: bernou,
		Bernoullis: Bernoullis,
		Beta: Beta,
		beta: beta,
		beth: beth,
		between: between,
		Bfr: Bfr,
		bfr: bfr,
		bigcap: bigcap,
		bigcirc: bigcirc,
		bigcup: bigcup,
		bigodot: bigodot,
		bigoplus: bigoplus,
		bigotimes: bigotimes,
		bigsqcup: bigsqcup,
		bigstar: bigstar,
		bigtriangledown: bigtriangledown,
		bigtriangleup: bigtriangleup,
		biguplus: biguplus,
		bigvee: bigvee,
		bigwedge: bigwedge,
		bkarow: bkarow,
		blacklozenge: blacklozenge,
		blacksquare: blacksquare,
		blacktriangle: blacktriangle,
		blacktriangledown: blacktriangledown,
		blacktriangleleft: blacktriangleleft,
		blacktriangleright: blacktriangleright,
		blank: blank,
		blk12: blk12,
		blk14: blk14,
		blk34: blk34,
		block: block,
		bne: bne,
		bnequiv: bnequiv,
		bNot: bNot,
		bnot: bnot,
		Bopf: Bopf,
		bopf: bopf,
		bot: bot,
		bottom: bottom,
		bowtie: bowtie,
		boxbox: boxbox,
		boxdl: boxdl,
		boxdL: boxdL,
		boxDl: boxDl,
		boxDL: boxDL,
		boxdr: boxdr,
		boxdR: boxdR,
		boxDr: boxDr,
		boxDR: boxDR,
		boxh: boxh,
		boxH: boxH,
		boxhd: boxhd,
		boxHd: boxHd,
		boxhD: boxhD,
		boxHD: boxHD,
		boxhu: boxhu,
		boxHu: boxHu,
		boxhU: boxhU,
		boxHU: boxHU,
		boxminus: boxminus,
		boxplus: boxplus,
		boxtimes: boxtimes,
		boxul: boxul,
		boxuL: boxuL,
		boxUl: boxUl,
		boxUL: boxUL,
		boxur: boxur,
		boxuR: boxuR,
		boxUr: boxUr,
		boxUR: boxUR,
		boxv: boxv,
		boxV: boxV,
		boxvh: boxvh,
		boxvH: boxvH,
		boxVh: boxVh,
		boxVH: boxVH,
		boxvl: boxvl,
		boxvL: boxvL,
		boxVl: boxVl,
		boxVL: boxVL,
		boxvr: boxvr,
		boxvR: boxvR,
		boxVr: boxVr,
		boxVR: boxVR,
		bprime: bprime,
		breve: breve,
		Breve: Breve,
		brvbar: brvbar$1,
		bscr: bscr,
		Bscr: Bscr,
		bsemi: bsemi,
		bsim: bsim,
		bsime: bsime,
		bsolb: bsolb,
		bsol: bsol,
		bsolhsub: bsolhsub,
		bull: bull,
		bullet: bullet,
		bump: bump,
		bumpE: bumpE,
		bumpe: bumpe,
		Bumpeq: Bumpeq,
		bumpeq: bumpeq,
		Cacute: Cacute,
		cacute: cacute,
		capand: capand,
		capbrcup: capbrcup,
		capcap: capcap,
		cap: cap,
		Cap: Cap,
		capcup: capcup,
		capdot: capdot,
		CapitalDifferentialD: CapitalDifferentialD,
		caps: caps,
		caret: caret,
		caron: caron,
		Cayleys: Cayleys,
		ccaps: ccaps,
		Ccaron: Ccaron,
		ccaron: ccaron,
		Ccedil: Ccedil$1,
		ccedil: ccedil$1,
		Ccirc: Ccirc,
		ccirc: ccirc,
		Cconint: Cconint,
		ccups: ccups,
		ccupssm: ccupssm,
		Cdot: Cdot,
		cdot: cdot,
		cedil: cedil$1,
		Cedilla: Cedilla,
		cemptyv: cemptyv,
		cent: cent$1,
		centerdot: centerdot,
		CenterDot: CenterDot,
		cfr: cfr,
		Cfr: Cfr,
		CHcy: CHcy,
		chcy: chcy,
		check: check,
		checkmark: checkmark,
		Chi: Chi,
		chi: chi,
		circ: circ,
		circeq: circeq,
		circlearrowleft: circlearrowleft,
		circlearrowright: circlearrowright,
		circledast: circledast,
		circledcirc: circledcirc,
		circleddash: circleddash,
		CircleDot: CircleDot,
		circledR: circledR,
		circledS: circledS,
		CircleMinus: CircleMinus,
		CirclePlus: CirclePlus,
		CircleTimes: CircleTimes,
		cir: cir,
		cirE: cirE,
		cire: cire,
		cirfnint: cirfnint,
		cirmid: cirmid,
		cirscir: cirscir,
		ClockwiseContourIntegral: ClockwiseContourIntegral,
		CloseCurlyDoubleQuote: CloseCurlyDoubleQuote,
		CloseCurlyQuote: CloseCurlyQuote,
		clubs: clubs,
		clubsuit: clubsuit,
		colon: colon,
		Colon: Colon,
		Colone: Colone,
		colone: colone,
		coloneq: coloneq,
		comma: comma,
		commat: commat,
		comp: comp,
		compfn: compfn,
		complement: complement,
		complexes: complexes,
		cong: cong,
		congdot: congdot,
		Congruent: Congruent,
		conint: conint,
		Conint: Conint,
		ContourIntegral: ContourIntegral,
		copf: copf,
		Copf: Copf,
		coprod: coprod,
		Coproduct: Coproduct,
		copy: copy$1,
		COPY: COPY$1,
		copysr: copysr,
		CounterClockwiseContourIntegral: CounterClockwiseContourIntegral,
		crarr: crarr,
		cross: cross,
		Cross: Cross,
		Cscr: Cscr,
		cscr: cscr,
		csub: csub,
		csube: csube,
		csup: csup,
		csupe: csupe,
		ctdot: ctdot,
		cudarrl: cudarrl,
		cudarrr: cudarrr,
		cuepr: cuepr,
		cuesc: cuesc,
		cularr: cularr,
		cularrp: cularrp,
		cupbrcap: cupbrcap,
		cupcap: cupcap,
		CupCap: CupCap,
		cup: cup,
		Cup: Cup,
		cupcup: cupcup,
		cupdot: cupdot,
		cupor: cupor,
		cups: cups,
		curarr: curarr,
		curarrm: curarrm,
		curlyeqprec: curlyeqprec,
		curlyeqsucc: curlyeqsucc,
		curlyvee: curlyvee,
		curlywedge: curlywedge,
		curren: curren$1,
		curvearrowleft: curvearrowleft,
		curvearrowright: curvearrowright,
		cuvee: cuvee,
		cuwed: cuwed,
		cwconint: cwconint,
		cwint: cwint,
		cylcty: cylcty,
		dagger: dagger,
		Dagger: Dagger,
		daleth: daleth,
		darr: darr,
		Darr: Darr,
		dArr: dArr,
		dash: dash,
		Dashv: Dashv,
		dashv: dashv,
		dbkarow: dbkarow,
		dblac: dblac,
		Dcaron: Dcaron,
		dcaron: dcaron,
		Dcy: Dcy,
		dcy: dcy,
		ddagger: ddagger,
		ddarr: ddarr,
		DD: DD,
		dd: dd,
		DDotrahd: DDotrahd,
		ddotseq: ddotseq,
		deg: deg$1,
		Del: Del,
		Delta: Delta,
		delta: delta,
		demptyv: demptyv,
		dfisht: dfisht,
		Dfr: Dfr,
		dfr: dfr,
		dHar: dHar,
		dharl: dharl,
		dharr: dharr,
		DiacriticalAcute: DiacriticalAcute,
		DiacriticalDot: DiacriticalDot,
		DiacriticalDoubleAcute: DiacriticalDoubleAcute,
		DiacriticalGrave: DiacriticalGrave,
		DiacriticalTilde: DiacriticalTilde,
		diam: diam,
		diamond: diamond,
		Diamond: Diamond,
		diamondsuit: diamondsuit,
		diams: diams,
		die: die,
		DifferentialD: DifferentialD,
		digamma: digamma,
		disin: disin,
		div: div,
		divide: divide$1,
		divideontimes: divideontimes,
		divonx: divonx,
		DJcy: DJcy,
		djcy: djcy,
		dlcorn: dlcorn,
		dlcrop: dlcrop,
		dollar: dollar,
		Dopf: Dopf,
		dopf: dopf,
		Dot: Dot,
		dot: dot,
		DotDot: DotDot,
		doteq: doteq,
		doteqdot: doteqdot,
		DotEqual: DotEqual,
		dotminus: dotminus,
		dotplus: dotplus,
		dotsquare: dotsquare,
		doublebarwedge: doublebarwedge,
		DoubleContourIntegral: DoubleContourIntegral,
		DoubleDot: DoubleDot,
		DoubleDownArrow: DoubleDownArrow,
		DoubleLeftArrow: DoubleLeftArrow,
		DoubleLeftRightArrow: DoubleLeftRightArrow,
		DoubleLeftTee: DoubleLeftTee,
		DoubleLongLeftArrow: DoubleLongLeftArrow,
		DoubleLongLeftRightArrow: DoubleLongLeftRightArrow,
		DoubleLongRightArrow: DoubleLongRightArrow,
		DoubleRightArrow: DoubleRightArrow,
		DoubleRightTee: DoubleRightTee,
		DoubleUpArrow: DoubleUpArrow,
		DoubleUpDownArrow: DoubleUpDownArrow,
		DoubleVerticalBar: DoubleVerticalBar,
		DownArrowBar: DownArrowBar,
		downarrow: downarrow,
		DownArrow: DownArrow,
		Downarrow: Downarrow,
		DownArrowUpArrow: DownArrowUpArrow,
		DownBreve: DownBreve,
		downdownarrows: downdownarrows,
		downharpoonleft: downharpoonleft,
		downharpoonright: downharpoonright,
		DownLeftRightVector: DownLeftRightVector,
		DownLeftTeeVector: DownLeftTeeVector,
		DownLeftVectorBar: DownLeftVectorBar,
		DownLeftVector: DownLeftVector,
		DownRightTeeVector: DownRightTeeVector,
		DownRightVectorBar: DownRightVectorBar,
		DownRightVector: DownRightVector,
		DownTeeArrow: DownTeeArrow,
		DownTee: DownTee,
		drbkarow: drbkarow,
		drcorn: drcorn,
		drcrop: drcrop,
		Dscr: Dscr,
		dscr: dscr,
		DScy: DScy,
		dscy: dscy,
		dsol: dsol,
		Dstrok: Dstrok,
		dstrok: dstrok,
		dtdot: dtdot,
		dtri: dtri,
		dtrif: dtrif,
		duarr: duarr,
		duhar: duhar,
		dwangle: dwangle,
		DZcy: DZcy,
		dzcy: dzcy,
		dzigrarr: dzigrarr,
		Eacute: Eacute$1,
		eacute: eacute$1,
		easter: easter,
		Ecaron: Ecaron,
		ecaron: ecaron,
		Ecirc: Ecirc$1,
		ecirc: ecirc$1,
		ecir: ecir,
		ecolon: ecolon,
		Ecy: Ecy,
		ecy: ecy,
		eDDot: eDDot,
		Edot: Edot,
		edot: edot,
		eDot: eDot,
		ee: ee,
		efDot: efDot,
		Efr: Efr,
		efr: efr,
		eg: eg,
		Egrave: Egrave$1,
		egrave: egrave$1,
		egs: egs,
		egsdot: egsdot,
		el: el,
		Element: Element$7,
		elinters: elinters,
		ell: ell,
		els: els,
		elsdot: elsdot,
		Emacr: Emacr,
		emacr: emacr,
		empty: empty,
		emptyset: emptyset,
		EmptySmallSquare: EmptySmallSquare,
		emptyv: emptyv,
		EmptyVerySmallSquare: EmptyVerySmallSquare,
		emsp13: emsp13,
		emsp14: emsp14,
		emsp: emsp,
		ENG: ENG,
		eng: eng,
		ensp: ensp,
		Eogon: Eogon,
		eogon: eogon,
		Eopf: Eopf,
		eopf: eopf,
		epar: epar,
		eparsl: eparsl,
		eplus: eplus,
		epsi: epsi,
		Epsilon: Epsilon,
		epsilon: epsilon,
		epsiv: epsiv,
		eqcirc: eqcirc,
		eqcolon: eqcolon,
		eqsim: eqsim,
		eqslantgtr: eqslantgtr,
		eqslantless: eqslantless,
		Equal: Equal,
		equals: equals,
		EqualTilde: EqualTilde,
		equest: equest,
		Equilibrium: Equilibrium,
		equiv: equiv,
		equivDD: equivDD,
		eqvparsl: eqvparsl,
		erarr: erarr,
		erDot: erDot,
		escr: escr,
		Escr: Escr,
		esdot: esdot,
		Esim: Esim,
		esim: esim,
		Eta: Eta,
		eta: eta,
		ETH: ETH$1,
		eth: eth$1,
		Euml: Euml$1,
		euml: euml$1,
		euro: euro,
		excl: excl,
		exist: exist,
		Exists: Exists,
		expectation: expectation,
		exponentiale: exponentiale,
		ExponentialE: ExponentialE,
		fallingdotseq: fallingdotseq,
		Fcy: Fcy,
		fcy: fcy,
		female: female,
		ffilig: ffilig,
		fflig: fflig,
		ffllig: ffllig,
		Ffr: Ffr,
		ffr: ffr,
		filig: filig,
		FilledSmallSquare: FilledSmallSquare,
		FilledVerySmallSquare: FilledVerySmallSquare,
		fjlig: fjlig,
		flat: flat,
		fllig: fllig,
		fltns: fltns,
		fnof: fnof,
		Fopf: Fopf,
		fopf: fopf,
		forall: forall,
		ForAll: ForAll,
		fork: fork,
		forkv: forkv,
		Fouriertrf: Fouriertrf,
		fpartint: fpartint,
		frac12: frac12$1,
		frac13: frac13,
		frac14: frac14$1,
		frac15: frac15,
		frac16: frac16,
		frac18: frac18,
		frac23: frac23,
		frac25: frac25,
		frac34: frac34$1,
		frac35: frac35,
		frac38: frac38,
		frac45: frac45,
		frac56: frac56,
		frac58: frac58,
		frac78: frac78,
		frasl: frasl,
		frown: frown,
		fscr: fscr,
		Fscr: Fscr,
		gacute: gacute,
		Gamma: Gamma,
		gamma: gamma,
		Gammad: Gammad,
		gammad: gammad,
		gap: gap,
		Gbreve: Gbreve,
		gbreve: gbreve,
		Gcedil: Gcedil,
		Gcirc: Gcirc,
		gcirc: gcirc,
		Gcy: Gcy,
		gcy: gcy,
		Gdot: Gdot,
		gdot: gdot,
		ge: ge,
		gE: gE,
		gEl: gEl,
		gel: gel,
		geq: geq,
		geqq: geqq,
		geqslant: geqslant,
		gescc: gescc,
		ges: ges,
		gesdot: gesdot,
		gesdoto: gesdoto,
		gesdotol: gesdotol,
		gesl: gesl,
		gesles: gesles,
		Gfr: Gfr,
		gfr: gfr,
		gg: gg,
		Gg: Gg,
		ggg: ggg,
		gimel: gimel,
		GJcy: GJcy,
		gjcy: gjcy,
		gla: gla,
		gl: gl,
		glE: glE,
		glj: glj,
		gnap: gnap,
		gnapprox: gnapprox,
		gne: gne,
		gnE: gnE,
		gneq: gneq,
		gneqq: gneqq,
		gnsim: gnsim,
		Gopf: Gopf,
		gopf: gopf,
		grave: grave,
		GreaterEqual: GreaterEqual,
		GreaterEqualLess: GreaterEqualLess,
		GreaterFullEqual: GreaterFullEqual,
		GreaterGreater: GreaterGreater,
		GreaterLess: GreaterLess,
		GreaterSlantEqual: GreaterSlantEqual,
		GreaterTilde: GreaterTilde,
		Gscr: Gscr,
		gscr: gscr,
		gsim: gsim,
		gsime: gsime,
		gsiml: gsiml,
		gtcc: gtcc,
		gtcir: gtcir,
		gt: gt$2,
		GT: GT$1,
		Gt: Gt,
		gtdot: gtdot,
		gtlPar: gtlPar,
		gtquest: gtquest,
		gtrapprox: gtrapprox,
		gtrarr: gtrarr,
		gtrdot: gtrdot,
		gtreqless: gtreqless,
		gtreqqless: gtreqqless,
		gtrless: gtrless,
		gtrsim: gtrsim,
		gvertneqq: gvertneqq,
		gvnE: gvnE,
		Hacek: Hacek,
		hairsp: hairsp,
		half: half,
		hamilt: hamilt,
		HARDcy: HARDcy,
		hardcy: hardcy,
		harrcir: harrcir,
		harr: harr,
		hArr: hArr,
		harrw: harrw,
		Hat: Hat,
		hbar: hbar,
		Hcirc: Hcirc,
		hcirc: hcirc,
		hearts: hearts,
		heartsuit: heartsuit,
		hellip: hellip,
		hercon: hercon,
		hfr: hfr,
		Hfr: Hfr,
		HilbertSpace: HilbertSpace,
		hksearow: hksearow,
		hkswarow: hkswarow,
		hoarr: hoarr,
		homtht: homtht,
		hookleftarrow: hookleftarrow,
		hookrightarrow: hookrightarrow,
		hopf: hopf,
		Hopf: Hopf,
		horbar: horbar,
		HorizontalLine: HorizontalLine,
		hscr: hscr,
		Hscr: Hscr,
		hslash: hslash,
		Hstrok: Hstrok,
		hstrok: hstrok,
		HumpDownHump: HumpDownHump,
		HumpEqual: HumpEqual,
		hybull: hybull,
		hyphen: hyphen,
		Iacute: Iacute$1,
		iacute: iacute$1,
		ic: ic,
		Icirc: Icirc$1,
		icirc: icirc$1,
		Icy: Icy,
		icy: icy,
		Idot: Idot,
		IEcy: IEcy,
		iecy: iecy,
		iexcl: iexcl$1,
		iff: iff,
		ifr: ifr,
		Ifr: Ifr,
		Igrave: Igrave$1,
		igrave: igrave$1,
		ii: ii,
		iiiint: iiiint,
		iiint: iiint,
		iinfin: iinfin,
		iiota: iiota,
		IJlig: IJlig,
		ijlig: ijlig,
		Imacr: Imacr,
		imacr: imacr,
		image: image$1,
		ImaginaryI: ImaginaryI,
		imagline: imagline,
		imagpart: imagpart,
		imath: imath,
		Im: Im,
		imof: imof,
		imped: imped,
		Implies: Implies,
		incare: incare,
		"in": "∈",
		infin: infin,
		infintie: infintie,
		inodot: inodot,
		intcal: intcal,
		int: int,
		Int: Int,
		integers: integers,
		Integral: Integral,
		intercal: intercal,
		Intersection: Intersection,
		intlarhk: intlarhk,
		intprod: intprod,
		InvisibleComma: InvisibleComma,
		InvisibleTimes: InvisibleTimes,
		IOcy: IOcy,
		iocy: iocy,
		Iogon: Iogon,
		iogon: iogon,
		Iopf: Iopf,
		iopf: iopf,
		Iota: Iota,
		iota: iota,
		iprod: iprod,
		iquest: iquest$1,
		iscr: iscr,
		Iscr: Iscr,
		isin: isin,
		isindot: isindot,
		isinE: isinE,
		isins: isins,
		isinsv: isinsv,
		isinv: isinv,
		it: it,
		Itilde: Itilde,
		itilde: itilde,
		Iukcy: Iukcy,
		iukcy: iukcy,
		Iuml: Iuml$1,
		iuml: iuml$1,
		Jcirc: Jcirc,
		jcirc: jcirc,
		Jcy: Jcy,
		jcy: jcy,
		Jfr: Jfr,
		jfr: jfr,
		jmath: jmath,
		Jopf: Jopf,
		jopf: jopf,
		Jscr: Jscr,
		jscr: jscr,
		Jsercy: Jsercy,
		jsercy: jsercy,
		Jukcy: Jukcy,
		jukcy: jukcy,
		Kappa: Kappa,
		kappa: kappa,
		kappav: kappav,
		Kcedil: Kcedil,
		kcedil: kcedil,
		Kcy: Kcy,
		kcy: kcy,
		Kfr: Kfr,
		kfr: kfr,
		kgreen: kgreen,
		KHcy: KHcy,
		khcy: khcy,
		KJcy: KJcy,
		kjcy: kjcy,
		Kopf: Kopf,
		kopf: kopf,
		Kscr: Kscr,
		kscr: kscr,
		lAarr: lAarr,
		Lacute: Lacute,
		lacute: lacute,
		laemptyv: laemptyv,
		lagran: lagran,
		Lambda: Lambda,
		lambda: lambda,
		lang: lang,
		Lang: Lang,
		langd: langd,
		langle: langle,
		lap: lap,
		Laplacetrf: Laplacetrf,
		laquo: laquo$1,
		larrb: larrb,
		larrbfs: larrbfs,
		larr: larr,
		Larr: Larr,
		lArr: lArr,
		larrfs: larrfs,
		larrhk: larrhk,
		larrlp: larrlp,
		larrpl: larrpl,
		larrsim: larrsim,
		larrtl: larrtl,
		latail: latail,
		lAtail: lAtail,
		lat: lat,
		late: late,
		lates: lates,
		lbarr: lbarr,
		lBarr: lBarr,
		lbbrk: lbbrk,
		lbrace: lbrace,
		lbrack: lbrack,
		lbrke: lbrke,
		lbrksld: lbrksld,
		lbrkslu: lbrkslu,
		Lcaron: Lcaron,
		lcaron: lcaron,
		Lcedil: Lcedil,
		lcedil: lcedil,
		lceil: lceil,
		lcub: lcub,
		Lcy: Lcy,
		lcy: lcy,
		ldca: ldca,
		ldquo: ldquo,
		ldquor: ldquor,
		ldrdhar: ldrdhar,
		ldrushar: ldrushar,
		ldsh: ldsh,
		le: le,
		lE: lE,
		LeftAngleBracket: LeftAngleBracket,
		LeftArrowBar: LeftArrowBar,
		leftarrow: leftarrow,
		LeftArrow: LeftArrow,
		Leftarrow: Leftarrow,
		LeftArrowRightArrow: LeftArrowRightArrow,
		leftarrowtail: leftarrowtail,
		LeftCeiling: LeftCeiling,
		LeftDoubleBracket: LeftDoubleBracket,
		LeftDownTeeVector: LeftDownTeeVector,
		LeftDownVectorBar: LeftDownVectorBar,
		LeftDownVector: LeftDownVector,
		LeftFloor: LeftFloor,
		leftharpoondown: leftharpoondown,
		leftharpoonup: leftharpoonup,
		leftleftarrows: leftleftarrows,
		leftrightarrow: leftrightarrow,
		LeftRightArrow: LeftRightArrow,
		Leftrightarrow: Leftrightarrow,
		leftrightarrows: leftrightarrows,
		leftrightharpoons: leftrightharpoons,
		leftrightsquigarrow: leftrightsquigarrow,
		LeftRightVector: LeftRightVector,
		LeftTeeArrow: LeftTeeArrow,
		LeftTee: LeftTee,
		LeftTeeVector: LeftTeeVector,
		leftthreetimes: leftthreetimes,
		LeftTriangleBar: LeftTriangleBar,
		LeftTriangle: LeftTriangle,
		LeftTriangleEqual: LeftTriangleEqual,
		LeftUpDownVector: LeftUpDownVector,
		LeftUpTeeVector: LeftUpTeeVector,
		LeftUpVectorBar: LeftUpVectorBar,
		LeftUpVector: LeftUpVector,
		LeftVectorBar: LeftVectorBar,
		LeftVector: LeftVector,
		lEg: lEg,
		leg: leg,
		leq: leq,
		leqq: leqq,
		leqslant: leqslant,
		lescc: lescc,
		les: les,
		lesdot: lesdot,
		lesdoto: lesdoto,
		lesdotor: lesdotor,
		lesg: lesg,
		lesges: lesges,
		lessapprox: lessapprox,
		lessdot: lessdot,
		lesseqgtr: lesseqgtr,
		lesseqqgtr: lesseqqgtr,
		LessEqualGreater: LessEqualGreater,
		LessFullEqual: LessFullEqual,
		LessGreater: LessGreater,
		lessgtr: lessgtr,
		LessLess: LessLess,
		lesssim: lesssim,
		LessSlantEqual: LessSlantEqual,
		LessTilde: LessTilde,
		lfisht: lfisht,
		lfloor: lfloor,
		Lfr: Lfr,
		lfr: lfr,
		lg: lg,
		lgE: lgE,
		lHar: lHar,
		lhard: lhard,
		lharu: lharu,
		lharul: lharul,
		lhblk: lhblk,
		LJcy: LJcy,
		ljcy: ljcy,
		llarr: llarr,
		ll: ll,
		Ll: Ll,
		llcorner: llcorner,
		Lleftarrow: Lleftarrow,
		llhard: llhard,
		lltri: lltri,
		Lmidot: Lmidot,
		lmidot: lmidot,
		lmoustache: lmoustache,
		lmoust: lmoust,
		lnap: lnap,
		lnapprox: lnapprox,
		lne: lne,
		lnE: lnE,
		lneq: lneq,
		lneqq: lneqq,
		lnsim: lnsim,
		loang: loang,
		loarr: loarr,
		lobrk: lobrk,
		longleftarrow: longleftarrow,
		LongLeftArrow: LongLeftArrow,
		Longleftarrow: Longleftarrow,
		longleftrightarrow: longleftrightarrow,
		LongLeftRightArrow: LongLeftRightArrow,
		Longleftrightarrow: Longleftrightarrow,
		longmapsto: longmapsto,
		longrightarrow: longrightarrow,
		LongRightArrow: LongRightArrow,
		Longrightarrow: Longrightarrow,
		looparrowleft: looparrowleft,
		looparrowright: looparrowright,
		lopar: lopar,
		Lopf: Lopf,
		lopf: lopf,
		loplus: loplus,
		lotimes: lotimes,
		lowast: lowast,
		lowbar: lowbar,
		LowerLeftArrow: LowerLeftArrow,
		LowerRightArrow: LowerRightArrow,
		loz: loz,
		lozenge: lozenge,
		lozf: lozf,
		lpar: lpar,
		lparlt: lparlt,
		lrarr: lrarr,
		lrcorner: lrcorner,
		lrhar: lrhar,
		lrhard: lrhard,
		lrm: lrm,
		lrtri: lrtri,
		lsaquo: lsaquo,
		lscr: lscr,
		Lscr: Lscr,
		lsh: lsh,
		Lsh: Lsh,
		lsim: lsim,
		lsime: lsime,
		lsimg: lsimg,
		lsqb: lsqb,
		lsquo: lsquo,
		lsquor: lsquor,
		Lstrok: Lstrok,
		lstrok: lstrok,
		ltcc: ltcc,
		ltcir: ltcir,
		lt: lt$2,
		LT: LT$1,
		Lt: Lt,
		ltdot: ltdot,
		lthree: lthree,
		ltimes: ltimes,
		ltlarr: ltlarr,
		ltquest: ltquest,
		ltri: ltri,
		ltrie: ltrie,
		ltrif: ltrif,
		ltrPar: ltrPar,
		lurdshar: lurdshar,
		luruhar: luruhar,
		lvertneqq: lvertneqq,
		lvnE: lvnE,
		macr: macr$1,
		male: male,
		malt: malt,
		maltese: maltese,
		"Map": "⤅",
		map: map,
		mapsto: mapsto,
		mapstodown: mapstodown,
		mapstoleft: mapstoleft,
		mapstoup: mapstoup,
		marker: marker,
		mcomma: mcomma,
		Mcy: Mcy,
		mcy: mcy,
		mdash: mdash,
		mDDot: mDDot,
		measuredangle: measuredangle,
		MediumSpace: MediumSpace,
		Mellintrf: Mellintrf,
		Mfr: Mfr,
		mfr: mfr,
		mho: mho,
		micro: micro$1,
		midast: midast,
		midcir: midcir,
		mid: mid,
		middot: middot$1,
		minusb: minusb,
		minus: minus,
		minusd: minusd,
		minusdu: minusdu,
		MinusPlus: MinusPlus,
		mlcp: mlcp,
		mldr: mldr,
		mnplus: mnplus,
		models: models,
		Mopf: Mopf,
		mopf: mopf,
		mp: mp,
		mscr: mscr,
		Mscr: Mscr,
		mstpos: mstpos,
		Mu: Mu,
		mu: mu,
		multimap: multimap,
		mumap: mumap,
		nabla: nabla,
		Nacute: Nacute,
		nacute: nacute,
		nang: nang,
		nap: nap,
		napE: napE,
		napid: napid,
		napos: napos,
		napprox: napprox,
		natural: natural,
		naturals: naturals,
		natur: natur,
		nbsp: nbsp$1,
		nbump: nbump,
		nbumpe: nbumpe,
		ncap: ncap,
		Ncaron: Ncaron,
		ncaron: ncaron,
		Ncedil: Ncedil,
		ncedil: ncedil,
		ncong: ncong,
		ncongdot: ncongdot,
		ncup: ncup,
		Ncy: Ncy,
		ncy: ncy,
		ndash: ndash,
		nearhk: nearhk,
		nearr: nearr,
		neArr: neArr,
		nearrow: nearrow,
		ne: ne,
		nedot: nedot,
		NegativeMediumSpace: NegativeMediumSpace,
		NegativeThickSpace: NegativeThickSpace,
		NegativeThinSpace: NegativeThinSpace,
		NegativeVeryThinSpace: NegativeVeryThinSpace,
		nequiv: nequiv,
		nesear: nesear,
		nesim: nesim,
		NestedGreaterGreater: NestedGreaterGreater,
		NestedLessLess: NestedLessLess,
		NewLine: NewLine,
		nexist: nexist,
		nexists: nexists,
		Nfr: Nfr,
		nfr: nfr,
		ngE: ngE,
		nge: nge,
		ngeq: ngeq,
		ngeqq: ngeqq,
		ngeqslant: ngeqslant,
		nges: nges,
		nGg: nGg,
		ngsim: ngsim,
		nGt: nGt,
		ngt: ngt,
		ngtr: ngtr,
		nGtv: nGtv,
		nharr: nharr,
		nhArr: nhArr,
		nhpar: nhpar,
		ni: ni,
		nis: nis,
		nisd: nisd,
		niv: niv,
		NJcy: NJcy,
		njcy: njcy,
		nlarr: nlarr,
		nlArr: nlArr,
		nldr: nldr,
		nlE: nlE,
		nle: nle,
		nleftarrow: nleftarrow,
		nLeftarrow: nLeftarrow,
		nleftrightarrow: nleftrightarrow,
		nLeftrightarrow: nLeftrightarrow,
		nleq: nleq,
		nleqq: nleqq,
		nleqslant: nleqslant,
		nles: nles,
		nless: nless,
		nLl: nLl,
		nlsim: nlsim,
		nLt: nLt,
		nlt: nlt,
		nltri: nltri,
		nltrie: nltrie,
		nLtv: nLtv,
		nmid: nmid,
		NoBreak: NoBreak,
		NonBreakingSpace: NonBreakingSpace,
		nopf: nopf,
		Nopf: Nopf,
		Not: Not,
		not: not$1,
		NotCongruent: NotCongruent,
		NotCupCap: NotCupCap,
		NotDoubleVerticalBar: NotDoubleVerticalBar,
		NotElement: NotElement,
		NotEqual: NotEqual,
		NotEqualTilde: NotEqualTilde,
		NotExists: NotExists,
		NotGreater: NotGreater,
		NotGreaterEqual: NotGreaterEqual,
		NotGreaterFullEqual: NotGreaterFullEqual,
		NotGreaterGreater: NotGreaterGreater,
		NotGreaterLess: NotGreaterLess,
		NotGreaterSlantEqual: NotGreaterSlantEqual,
		NotGreaterTilde: NotGreaterTilde,
		NotHumpDownHump: NotHumpDownHump,
		NotHumpEqual: NotHumpEqual,
		notin: notin,
		notindot: notindot,
		notinE: notinE,
		notinva: notinva,
		notinvb: notinvb,
		notinvc: notinvc,
		NotLeftTriangleBar: NotLeftTriangleBar,
		NotLeftTriangle: NotLeftTriangle,
		NotLeftTriangleEqual: NotLeftTriangleEqual,
		NotLess: NotLess,
		NotLessEqual: NotLessEqual,
		NotLessGreater: NotLessGreater,
		NotLessLess: NotLessLess,
		NotLessSlantEqual: NotLessSlantEqual,
		NotLessTilde: NotLessTilde,
		NotNestedGreaterGreater: NotNestedGreaterGreater,
		NotNestedLessLess: NotNestedLessLess,
		notni: notni,
		notniva: notniva,
		notnivb: notnivb,
		notnivc: notnivc,
		NotPrecedes: NotPrecedes,
		NotPrecedesEqual: NotPrecedesEqual,
		NotPrecedesSlantEqual: NotPrecedesSlantEqual,
		NotReverseElement: NotReverseElement,
		NotRightTriangleBar: NotRightTriangleBar,
		NotRightTriangle: NotRightTriangle,
		NotRightTriangleEqual: NotRightTriangleEqual,
		NotSquareSubset: NotSquareSubset,
		NotSquareSubsetEqual: NotSquareSubsetEqual,
		NotSquareSuperset: NotSquareSuperset,
		NotSquareSupersetEqual: NotSquareSupersetEqual,
		NotSubset: NotSubset,
		NotSubsetEqual: NotSubsetEqual,
		NotSucceeds: NotSucceeds,
		NotSucceedsEqual: NotSucceedsEqual,
		NotSucceedsSlantEqual: NotSucceedsSlantEqual,
		NotSucceedsTilde: NotSucceedsTilde,
		NotSuperset: NotSuperset,
		NotSupersetEqual: NotSupersetEqual,
		NotTilde: NotTilde,
		NotTildeEqual: NotTildeEqual,
		NotTildeFullEqual: NotTildeFullEqual,
		NotTildeTilde: NotTildeTilde,
		NotVerticalBar: NotVerticalBar,
		nparallel: nparallel,
		npar: npar,
		nparsl: nparsl,
		npart: npart,
		npolint: npolint,
		npr: npr,
		nprcue: nprcue,
		nprec: nprec,
		npreceq: npreceq,
		npre: npre,
		nrarrc: nrarrc,
		nrarr: nrarr,
		nrArr: nrArr,
		nrarrw: nrarrw,
		nrightarrow: nrightarrow,
		nRightarrow: nRightarrow,
		nrtri: nrtri,
		nrtrie: nrtrie,
		nsc: nsc,
		nsccue: nsccue,
		nsce: nsce,
		Nscr: Nscr,
		nscr: nscr,
		nshortmid: nshortmid,
		nshortparallel: nshortparallel,
		nsim: nsim,
		nsime: nsime,
		nsimeq: nsimeq,
		nsmid: nsmid,
		nspar: nspar,
		nsqsube: nsqsube,
		nsqsupe: nsqsupe,
		nsub: nsub,
		nsubE: nsubE,
		nsube: nsube,
		nsubset: nsubset,
		nsubseteq: nsubseteq,
		nsubseteqq: nsubseteqq,
		nsucc: nsucc,
		nsucceq: nsucceq,
		nsup: nsup,
		nsupE: nsupE,
		nsupe: nsupe,
		nsupset: nsupset,
		nsupseteq: nsupseteq,
		nsupseteqq: nsupseteqq,
		ntgl: ntgl,
		Ntilde: Ntilde$1,
		ntilde: ntilde$1,
		ntlg: ntlg,
		ntriangleleft: ntriangleleft,
		ntrianglelefteq: ntrianglelefteq,
		ntriangleright: ntriangleright,
		ntrianglerighteq: ntrianglerighteq,
		Nu: Nu,
		nu: nu,
		num: num,
		numero: numero,
		numsp: numsp,
		nvap: nvap,
		nvdash: nvdash,
		nvDash: nvDash,
		nVdash: nVdash,
		nVDash: nVDash,
		nvge: nvge,
		nvgt: nvgt,
		nvHarr: nvHarr,
		nvinfin: nvinfin,
		nvlArr: nvlArr,
		nvle: nvle,
		nvlt: nvlt,
		nvltrie: nvltrie,
		nvrArr: nvrArr,
		nvrtrie: nvrtrie,
		nvsim: nvsim,
		nwarhk: nwarhk,
		nwarr: nwarr,
		nwArr: nwArr,
		nwarrow: nwarrow,
		nwnear: nwnear,
		Oacute: Oacute$1,
		oacute: oacute$1,
		oast: oast,
		Ocirc: Ocirc$1,
		ocirc: ocirc$1,
		ocir: ocir,
		Ocy: Ocy,
		ocy: ocy,
		odash: odash,
		Odblac: Odblac,
		odblac: odblac,
		odiv: odiv,
		odot: odot,
		odsold: odsold,
		OElig: OElig,
		oelig: oelig,
		ofcir: ofcir,
		Ofr: Ofr,
		ofr: ofr,
		ogon: ogon,
		Ograve: Ograve$1,
		ograve: ograve$1,
		ogt: ogt,
		ohbar: ohbar,
		ohm: ohm,
		oint: oint,
		olarr: olarr,
		olcir: olcir,
		olcross: olcross,
		oline: oline,
		olt: olt,
		Omacr: Omacr,
		omacr: omacr,
		Omega: Omega,
		omega: omega,
		Omicron: Omicron,
		omicron: omicron,
		omid: omid,
		ominus: ominus,
		Oopf: Oopf,
		oopf: oopf,
		opar: opar,
		OpenCurlyDoubleQuote: OpenCurlyDoubleQuote,
		OpenCurlyQuote: OpenCurlyQuote,
		operp: operp,
		oplus: oplus,
		orarr: orarr,
		Or: Or,
		or: or,
		ord: ord,
		order: order,
		orderof: orderof,
		ordf: ordf$1,
		ordm: ordm$1,
		origof: origof,
		oror: oror,
		orslope: orslope,
		orv: orv,
		oS: oS,
		Oscr: Oscr,
		oscr: oscr,
		Oslash: Oslash$1,
		oslash: oslash$1,
		osol: osol,
		Otilde: Otilde$1,
		otilde: otilde$1,
		otimesas: otimesas,
		Otimes: Otimes,
		otimes: otimes,
		Ouml: Ouml$1,
		ouml: ouml$1,
		ovbar: ovbar,
		OverBar: OverBar,
		OverBrace: OverBrace,
		OverBracket: OverBracket,
		OverParenthesis: OverParenthesis,
		para: para$1,
		parallel: parallel,
		par: par,
		parsim: parsim,
		parsl: parsl,
		part: part,
		PartialD: PartialD,
		Pcy: Pcy,
		pcy: pcy,
		percnt: percnt,
		period: period,
		permil: permil,
		perp: perp,
		pertenk: pertenk,
		Pfr: Pfr,
		pfr: pfr,
		Phi: Phi,
		phi: phi,
		phiv: phiv,
		phmmat: phmmat,
		phone: phone,
		Pi: Pi,
		pi: pi,
		pitchfork: pitchfork,
		piv: piv,
		planck: planck,
		planckh: planckh,
		plankv: plankv,
		plusacir: plusacir,
		plusb: plusb,
		pluscir: pluscir,
		plus: plus,
		plusdo: plusdo,
		plusdu: plusdu,
		pluse: pluse,
		PlusMinus: PlusMinus,
		plusmn: plusmn$1,
		plussim: plussim,
		plustwo: plustwo,
		pm: pm,
		Poincareplane: Poincareplane,
		pointint: pointint,
		popf: popf,
		Popf: Popf,
		pound: pound$1,
		prap: prap,
		Pr: Pr,
		pr: pr,
		prcue: prcue,
		precapprox: precapprox,
		prec: prec,
		preccurlyeq: preccurlyeq,
		Precedes: Precedes,
		PrecedesEqual: PrecedesEqual,
		PrecedesSlantEqual: PrecedesSlantEqual,
		PrecedesTilde: PrecedesTilde,
		preceq: preceq,
		precnapprox: precnapprox,
		precneqq: precneqq,
		precnsim: precnsim,
		pre: pre,
		prE: prE,
		precsim: precsim,
		prime: prime,
		Prime: Prime,
		primes: primes,
		prnap: prnap,
		prnE: prnE,
		prnsim: prnsim,
		prod: prod,
		Product: Product,
		profalar: profalar,
		profline: profline,
		profsurf: profsurf,
		prop: prop$1,
		Proportional: Proportional,
		Proportion: Proportion,
		propto: propto,
		prsim: prsim,
		prurel: prurel,
		Pscr: Pscr,
		pscr: pscr,
		Psi: Psi,
		psi: psi,
		puncsp: puncsp,
		Qfr: Qfr,
		qfr: qfr,
		qint: qint,
		qopf: qopf,
		Qopf: Qopf,
		qprime: qprime,
		Qscr: Qscr,
		qscr: qscr,
		quaternions: quaternions,
		quatint: quatint,
		quest: quest,
		questeq: questeq,
		quot: quot$2,
		QUOT: QUOT$1,
		rAarr: rAarr,
		race: race,
		Racute: Racute,
		racute: racute,
		radic: radic,
		raemptyv: raemptyv,
		rang: rang,
		Rang: Rang,
		rangd: rangd,
		range: range$1,
		rangle: rangle,
		raquo: raquo$1,
		rarrap: rarrap,
		rarrb: rarrb,
		rarrbfs: rarrbfs,
		rarrc: rarrc,
		rarr: rarr,
		Rarr: Rarr,
		rArr: rArr,
		rarrfs: rarrfs,
		rarrhk: rarrhk,
		rarrlp: rarrlp,
		rarrpl: rarrpl,
		rarrsim: rarrsim,
		Rarrtl: Rarrtl,
		rarrtl: rarrtl,
		rarrw: rarrw,
		ratail: ratail,
		rAtail: rAtail,
		ratio: ratio,
		rationals: rationals,
		rbarr: rbarr,
		rBarr: rBarr,
		RBarr: RBarr,
		rbbrk: rbbrk,
		rbrace: rbrace,
		rbrack: rbrack,
		rbrke: rbrke,
		rbrksld: rbrksld,
		rbrkslu: rbrkslu,
		Rcaron: Rcaron,
		rcaron: rcaron,
		Rcedil: Rcedil,
		rcedil: rcedil,
		rceil: rceil,
		rcub: rcub,
		Rcy: Rcy,
		rcy: rcy,
		rdca: rdca,
		rdldhar: rdldhar,
		rdquo: rdquo,
		rdquor: rdquor,
		rdsh: rdsh,
		real: real,
		realine: realine,
		realpart: realpart,
		reals: reals,
		Re: Re,
		rect: rect,
		reg: reg$1,
		REG: REG$1,
		ReverseElement: ReverseElement,
		ReverseEquilibrium: ReverseEquilibrium,
		ReverseUpEquilibrium: ReverseUpEquilibrium,
		rfisht: rfisht,
		rfloor: rfloor,
		rfr: rfr,
		Rfr: Rfr,
		rHar: rHar,
		rhard: rhard,
		rharu: rharu,
		rharul: rharul,
		Rho: Rho,
		rho: rho,
		rhov: rhov,
		RightAngleBracket: RightAngleBracket,
		RightArrowBar: RightArrowBar,
		rightarrow: rightarrow,
		RightArrow: RightArrow,
		Rightarrow: Rightarrow,
		RightArrowLeftArrow: RightArrowLeftArrow,
		rightarrowtail: rightarrowtail,
		RightCeiling: RightCeiling,
		RightDoubleBracket: RightDoubleBracket,
		RightDownTeeVector: RightDownTeeVector,
		RightDownVectorBar: RightDownVectorBar,
		RightDownVector: RightDownVector,
		RightFloor: RightFloor,
		rightharpoondown: rightharpoondown,
		rightharpoonup: rightharpoonup,
		rightleftarrows: rightleftarrows,
		rightleftharpoons: rightleftharpoons,
		rightrightarrows: rightrightarrows,
		rightsquigarrow: rightsquigarrow,
		RightTeeArrow: RightTeeArrow,
		RightTee: RightTee,
		RightTeeVector: RightTeeVector,
		rightthreetimes: rightthreetimes,
		RightTriangleBar: RightTriangleBar,
		RightTriangle: RightTriangle,
		RightTriangleEqual: RightTriangleEqual,
		RightUpDownVector: RightUpDownVector,
		RightUpTeeVector: RightUpTeeVector,
		RightUpVectorBar: RightUpVectorBar,
		RightUpVector: RightUpVector,
		RightVectorBar: RightVectorBar,
		RightVector: RightVector,
		ring: ring,
		risingdotseq: risingdotseq,
		rlarr: rlarr,
		rlhar: rlhar,
		rlm: rlm,
		rmoustache: rmoustache,
		rmoust: rmoust,
		rnmid: rnmid,
		roang: roang,
		roarr: roarr,
		robrk: robrk,
		ropar: ropar,
		ropf: ropf,
		Ropf: Ropf,
		roplus: roplus,
		rotimes: rotimes,
		RoundImplies: RoundImplies,
		rpar: rpar,
		rpargt: rpargt,
		rppolint: rppolint,
		rrarr: rrarr,
		Rrightarrow: Rrightarrow,
		rsaquo: rsaquo,
		rscr: rscr,
		Rscr: Rscr,
		rsh: rsh,
		Rsh: Rsh,
		rsqb: rsqb,
		rsquo: rsquo,
		rsquor: rsquor,
		rthree: rthree,
		rtimes: rtimes,
		rtri: rtri,
		rtrie: rtrie,
		rtrif: rtrif,
		rtriltri: rtriltri,
		RuleDelayed: RuleDelayed,
		ruluhar: ruluhar,
		rx: rx,
		Sacute: Sacute,
		sacute: sacute,
		sbquo: sbquo,
		scap: scap,
		Scaron: Scaron,
		scaron: scaron,
		Sc: Sc,
		sc: sc,
		sccue: sccue,
		sce: sce,
		scE: scE,
		Scedil: Scedil,
		scedil: scedil,
		Scirc: Scirc,
		scirc: scirc,
		scnap: scnap,
		scnE: scnE,
		scnsim: scnsim,
		scpolint: scpolint,
		scsim: scsim,
		Scy: Scy,
		scy: scy,
		sdotb: sdotb,
		sdot: sdot,
		sdote: sdote,
		searhk: searhk,
		searr: searr,
		seArr: seArr,
		searrow: searrow,
		sect: sect$1,
		semi: semi,
		seswar: seswar,
		setminus: setminus,
		setmn: setmn,
		sext: sext,
		Sfr: Sfr,
		sfr: sfr,
		sfrown: sfrown,
		sharp: sharp,
		SHCHcy: SHCHcy,
		shchcy: shchcy,
		SHcy: SHcy,
		shcy: shcy,
		ShortDownArrow: ShortDownArrow,
		ShortLeftArrow: ShortLeftArrow,
		shortmid: shortmid,
		shortparallel: shortparallel,
		ShortRightArrow: ShortRightArrow,
		ShortUpArrow: ShortUpArrow,
		shy: shy$1,
		Sigma: Sigma,
		sigma: sigma,
		sigmaf: sigmaf,
		sigmav: sigmav,
		sim: sim,
		simdot: simdot,
		sime: sime,
		simeq: simeq,
		simg: simg,
		simgE: simgE,
		siml: siml,
		simlE: simlE,
		simne: simne,
		simplus: simplus,
		simrarr: simrarr,
		slarr: slarr,
		SmallCircle: SmallCircle,
		smallsetminus: smallsetminus,
		smashp: smashp,
		smeparsl: smeparsl,
		smid: smid,
		smile: smile,
		smt: smt,
		smte: smte,
		smtes: smtes,
		SOFTcy: SOFTcy,
		softcy: softcy,
		solbar: solbar,
		solb: solb,
		sol: sol,
		Sopf: Sopf,
		sopf: sopf,
		spades: spades,
		spadesuit: spadesuit,
		spar: spar,
		sqcap: sqcap,
		sqcaps: sqcaps,
		sqcup: sqcup,
		sqcups: sqcups,
		Sqrt: Sqrt,
		sqsub: sqsub,
		sqsube: sqsube,
		sqsubset: sqsubset,
		sqsubseteq: sqsubseteq,
		sqsup: sqsup,
		sqsupe: sqsupe,
		sqsupset: sqsupset,
		sqsupseteq: sqsupseteq,
		square: square,
		Square: Square,
		SquareIntersection: SquareIntersection,
		SquareSubset: SquareSubset,
		SquareSubsetEqual: SquareSubsetEqual,
		SquareSuperset: SquareSuperset,
		SquareSupersetEqual: SquareSupersetEqual,
		SquareUnion: SquareUnion,
		squarf: squarf,
		squ: squ,
		squf: squf,
		srarr: srarr,
		Sscr: Sscr,
		sscr: sscr,
		ssetmn: ssetmn,
		ssmile: ssmile,
		sstarf: sstarf,
		Star: Star,
		star: star,
		starf: starf,
		straightepsilon: straightepsilon,
		straightphi: straightphi,
		strns: strns,
		sub: sub,
		Sub: Sub,
		subdot: subdot,
		subE: subE,
		sube: sube,
		subedot: subedot,
		submult: submult,
		subnE: subnE,
		subne: subne,
		subplus: subplus,
		subrarr: subrarr,
		subset: subset,
		Subset: Subset,
		subseteq: subseteq,
		subseteqq: subseteqq,
		SubsetEqual: SubsetEqual,
		subsetneq: subsetneq,
		subsetneqq: subsetneqq,
		subsim: subsim,
		subsub: subsub,
		subsup: subsup,
		succapprox: succapprox,
		succ: succ,
		succcurlyeq: succcurlyeq,
		Succeeds: Succeeds,
		SucceedsEqual: SucceedsEqual,
		SucceedsSlantEqual: SucceedsSlantEqual,
		SucceedsTilde: SucceedsTilde,
		succeq: succeq,
		succnapprox: succnapprox,
		succneqq: succneqq,
		succnsim: succnsim,
		succsim: succsim,
		SuchThat: SuchThat,
		sum: sum,
		Sum: Sum,
		sung: sung,
		sup1: sup1$1,
		sup2: sup2$1,
		sup3: sup3$1,
		sup: sup,
		Sup: Sup,
		supdot: supdot,
		supdsub: supdsub,
		supE: supE,
		supe: supe,
		supedot: supedot,
		Superset: Superset,
		SupersetEqual: SupersetEqual,
		suphsol: suphsol,
		suphsub: suphsub,
		suplarr: suplarr,
		supmult: supmult,
		supnE: supnE,
		supne: supne,
		supplus: supplus,
		supset: supset,
		Supset: Supset,
		supseteq: supseteq,
		supseteqq: supseteqq,
		supsetneq: supsetneq,
		supsetneqq: supsetneqq,
		supsim: supsim,
		supsub: supsub,
		supsup: supsup,
		swarhk: swarhk,
		swarr: swarr,
		swArr: swArr,
		swarrow: swarrow,
		swnwar: swnwar,
		szlig: szlig$1,
		Tab: Tab,
		target: target,
		Tau: Tau,
		tau: tau,
		tbrk: tbrk,
		Tcaron: Tcaron,
		tcaron: tcaron,
		Tcedil: Tcedil,
		tcedil: tcedil,
		Tcy: Tcy,
		tcy: tcy,
		tdot: tdot,
		telrec: telrec,
		Tfr: Tfr,
		tfr: tfr,
		there4: there4,
		therefore: therefore,
		Therefore: Therefore,
		Theta: Theta,
		theta: theta,
		thetasym: thetasym,
		thetav: thetav,
		thickapprox: thickapprox,
		thicksim: thicksim,
		ThickSpace: ThickSpace,
		ThinSpace: ThinSpace,
		thinsp: thinsp,
		thkap: thkap,
		thksim: thksim,
		THORN: THORN$1,
		thorn: thorn$1,
		tilde: tilde,
		Tilde: Tilde,
		TildeEqual: TildeEqual,
		TildeFullEqual: TildeFullEqual,
		TildeTilde: TildeTilde,
		timesbar: timesbar,
		timesb: timesb,
		times: times$1,
		timesd: timesd,
		tint: tint,
		toea: toea,
		topbot: topbot,
		topcir: topcir,
		top: top,
		Topf: Topf,
		topf: topf,
		topfork: topfork,
		tosa: tosa,
		tprime: tprime,
		trade: trade,
		TRADE: TRADE,
		triangle: triangle,
		triangledown: triangledown,
		triangleleft: triangleleft,
		trianglelefteq: trianglelefteq,
		triangleq: triangleq,
		triangleright: triangleright,
		trianglerighteq: trianglerighteq,
		tridot: tridot,
		trie: trie,
		triminus: triminus,
		TripleDot: TripleDot,
		triplus: triplus,
		trisb: trisb,
		tritime: tritime,
		trpezium: trpezium,
		Tscr: Tscr,
		tscr: tscr,
		TScy: TScy,
		tscy: tscy,
		TSHcy: TSHcy,
		tshcy: tshcy,
		Tstrok: Tstrok,
		tstrok: tstrok,
		twixt: twixt,
		twoheadleftarrow: twoheadleftarrow,
		twoheadrightarrow: twoheadrightarrow,
		Uacute: Uacute$1,
		uacute: uacute$1,
		uarr: uarr,
		Uarr: Uarr,
		uArr: uArr,
		Uarrocir: Uarrocir,
		Ubrcy: Ubrcy,
		ubrcy: ubrcy,
		Ubreve: Ubreve,
		ubreve: ubreve,
		Ucirc: Ucirc$1,
		ucirc: ucirc$1,
		Ucy: Ucy,
		ucy: ucy,
		udarr: udarr,
		Udblac: Udblac,
		udblac: udblac,
		udhar: udhar,
		ufisht: ufisht,
		Ufr: Ufr,
		ufr: ufr,
		Ugrave: Ugrave$1,
		ugrave: ugrave$1,
		uHar: uHar,
		uharl: uharl,
		uharr: uharr,
		uhblk: uhblk,
		ulcorn: ulcorn,
		ulcorner: ulcorner,
		ulcrop: ulcrop,
		ultri: ultri,
		Umacr: Umacr,
		umacr: umacr,
		uml: uml$1,
		UnderBar: UnderBar,
		UnderBrace: UnderBrace,
		UnderBracket: UnderBracket,
		UnderParenthesis: UnderParenthesis,
		Union: Union,
		UnionPlus: UnionPlus,
		Uogon: Uogon,
		uogon: uogon,
		Uopf: Uopf,
		uopf: uopf,
		UpArrowBar: UpArrowBar,
		uparrow: uparrow,
		UpArrow: UpArrow,
		Uparrow: Uparrow,
		UpArrowDownArrow: UpArrowDownArrow,
		updownarrow: updownarrow,
		UpDownArrow: UpDownArrow,
		Updownarrow: Updownarrow,
		UpEquilibrium: UpEquilibrium,
		upharpoonleft: upharpoonleft,
		upharpoonright: upharpoonright,
		uplus: uplus,
		UpperLeftArrow: UpperLeftArrow,
		UpperRightArrow: UpperRightArrow,
		upsi: upsi,
		Upsi: Upsi,
		upsih: upsih,
		Upsilon: Upsilon,
		upsilon: upsilon,
		UpTeeArrow: UpTeeArrow,
		UpTee: UpTee,
		upuparrows: upuparrows,
		urcorn: urcorn,
		urcorner: urcorner,
		urcrop: urcrop,
		Uring: Uring,
		uring: uring,
		urtri: urtri,
		Uscr: Uscr,
		uscr: uscr,
		utdot: utdot,
		Utilde: Utilde,
		utilde: utilde,
		utri: utri,
		utrif: utrif,
		uuarr: uuarr,
		Uuml: Uuml$1,
		uuml: uuml$1,
		uwangle: uwangle,
		vangrt: vangrt,
		varepsilon: varepsilon,
		varkappa: varkappa,
		varnothing: varnothing,
		varphi: varphi,
		varpi: varpi,
		varpropto: varpropto,
		varr: varr,
		vArr: vArr,
		varrho: varrho,
		varsigma: varsigma,
		varsubsetneq: varsubsetneq,
		varsubsetneqq: varsubsetneqq,
		varsupsetneq: varsupsetneq,
		varsupsetneqq: varsupsetneqq,
		vartheta: vartheta,
		vartriangleleft: vartriangleleft,
		vartriangleright: vartriangleright,
		vBar: vBar,
		Vbar: Vbar,
		vBarv: vBarv,
		Vcy: Vcy,
		vcy: vcy,
		vdash: vdash,
		vDash: vDash,
		Vdash: Vdash,
		VDash: VDash,
		Vdashl: Vdashl,
		veebar: veebar,
		vee: vee,
		Vee: Vee,
		veeeq: veeeq,
		vellip: vellip,
		verbar: verbar,
		Verbar: Verbar,
		vert: vert,
		Vert: Vert,
		VerticalBar: VerticalBar,
		VerticalLine: VerticalLine,
		VerticalSeparator: VerticalSeparator,
		VerticalTilde: VerticalTilde,
		VeryThinSpace: VeryThinSpace,
		Vfr: Vfr,
		vfr: vfr,
		vltri: vltri,
		vnsub: vnsub,
		vnsup: vnsup,
		Vopf: Vopf,
		vopf: vopf,
		vprop: vprop,
		vrtri: vrtri,
		Vscr: Vscr,
		vscr: vscr,
		vsubnE: vsubnE,
		vsubne: vsubne,
		vsupnE: vsupnE,
		vsupne: vsupne,
		Vvdash: Vvdash,
		vzigzag: vzigzag,
		Wcirc: Wcirc,
		wcirc: wcirc,
		wedbar: wedbar,
		wedge: wedge,
		Wedge: Wedge,
		wedgeq: wedgeq,
		weierp: weierp,
		Wfr: Wfr,
		wfr: wfr,
		Wopf: Wopf,
		wopf: wopf,
		wp: wp,
		wr: wr,
		wreath: wreath,
		Wscr: Wscr,
		wscr: wscr,
		xcap: xcap,
		xcirc: xcirc,
		xcup: xcup,
		xdtri: xdtri,
		Xfr: Xfr,
		xfr: xfr,
		xharr: xharr,
		xhArr: xhArr,
		Xi: Xi,
		xi: xi,
		xlarr: xlarr,
		xlArr: xlArr,
		xmap: xmap,
		xnis: xnis,
		xodot: xodot,
		Xopf: Xopf,
		xopf: xopf,
		xoplus: xoplus,
		xotime: xotime,
		xrarr: xrarr,
		xrArr: xrArr,
		Xscr: Xscr,
		xscr: xscr,
		xsqcup: xsqcup,
		xuplus: xuplus,
		xutri: xutri,
		xvee: xvee,
		xwedge: xwedge,
		Yacute: Yacute$1,
		yacute: yacute$1,
		YAcy: YAcy,
		yacy: yacy,
		Ycirc: Ycirc,
		ycirc: ycirc,
		Ycy: Ycy,
		ycy: ycy,
		yen: yen$1,
		Yfr: Yfr,
		yfr: yfr,
		YIcy: YIcy,
		yicy: yicy,
		Yopf: Yopf,
		yopf: yopf,
		Yscr: Yscr,
		yscr: yscr,
		YUcy: YUcy,
		yucy: yucy,
		yuml: yuml$1,
		Yuml: Yuml,
		Zacute: Zacute,
		zacute: zacute,
		Zcaron: Zcaron,
		zcaron: zcaron,
		Zcy: Zcy,
		zcy: zcy,
		Zdot: Zdot,
		zdot: zdot,
		zeetrf: zeetrf,
		ZeroWidthSpace: ZeroWidthSpace,
		Zeta: Zeta,
		zeta: zeta,
		zfr: zfr,
		Zfr: Zfr,
		ZHcy: ZHcy,
		zhcy: zhcy,
		zigrarr: zigrarr,
		zopf: zopf,
		Zopf: Zopf,
		Zscr: Zscr,
		zscr: zscr,
		zwj: zwj,
		zwnj: zwnj
	};

	var Aacute = "Á";
	var aacute = "á";
	var Acirc = "Â";
	var acirc = "â";
	var acute = "´";
	var AElig = "Æ";
	var aelig = "æ";
	var Agrave = "À";
	var agrave = "à";
	var amp$1 = "&";
	var AMP = "&";
	var Aring = "Å";
	var aring = "å";
	var Atilde = "Ã";
	var atilde = "ã";
	var Auml = "Ä";
	var auml = "ä";
	var brvbar = "¦";
	var Ccedil = "Ç";
	var ccedil = "ç";
	var cedil = "¸";
	var cent = "¢";
	var copy = "©";
	var COPY = "©";
	var curren = "¤";
	var deg = "°";
	var divide = "÷";
	var Eacute = "É";
	var eacute = "é";
	var Ecirc = "Ê";
	var ecirc = "ê";
	var Egrave = "È";
	var egrave = "è";
	var ETH = "Ð";
	var eth = "ð";
	var Euml = "Ë";
	var euml = "ë";
	var frac12 = "½";
	var frac14 = "¼";
	var frac34 = "¾";
	var gt$1 = ">";
	var GT = ">";
	var Iacute = "Í";
	var iacute = "í";
	var Icirc = "Î";
	var icirc = "î";
	var iexcl = "¡";
	var Igrave = "Ì";
	var igrave = "ì";
	var iquest = "¿";
	var Iuml = "Ï";
	var iuml = "ï";
	var laquo = "«";
	var lt$1 = "<";
	var LT = "<";
	var macr = "¯";
	var micro = "µ";
	var middot = "·";
	var nbsp = " ";
	var not = "¬";
	var Ntilde = "Ñ";
	var ntilde = "ñ";
	var Oacute = "Ó";
	var oacute = "ó";
	var Ocirc = "Ô";
	var ocirc = "ô";
	var Ograve = "Ò";
	var ograve = "ò";
	var ordf = "ª";
	var ordm = "º";
	var Oslash = "Ø";
	var oslash = "ø";
	var Otilde = "Õ";
	var otilde = "õ";
	var Ouml = "Ö";
	var ouml = "ö";
	var para = "¶";
	var plusmn = "±";
	var pound = "£";
	var quot$1 = "\"";
	var QUOT = "\"";
	var raquo = "»";
	var reg = "®";
	var REG = "®";
	var sect = "§";
	var shy = "­";
	var sup1 = "¹";
	var sup2 = "²";
	var sup3 = "³";
	var szlig = "ß";
	var THORN = "Þ";
	var thorn = "þ";
	var times = "×";
	var Uacute = "Ú";
	var uacute = "ú";
	var Ucirc = "Û";
	var ucirc = "û";
	var Ugrave = "Ù";
	var ugrave = "ù";
	var uml = "¨";
	var Uuml = "Ü";
	var uuml = "ü";
	var Yacute = "Ý";
	var yacute = "ý";
	var yen = "¥";
	var yuml = "ÿ";
	var require$$1$1 = {
		Aacute: Aacute,
		aacute: aacute,
		Acirc: Acirc,
		acirc: acirc,
		acute: acute,
		AElig: AElig,
		aelig: aelig,
		Agrave: Agrave,
		agrave: agrave,
		amp: amp$1,
		AMP: AMP,
		Aring: Aring,
		aring: aring,
		Atilde: Atilde,
		atilde: atilde,
		Auml: Auml,
		auml: auml,
		brvbar: brvbar,
		Ccedil: Ccedil,
		ccedil: ccedil,
		cedil: cedil,
		cent: cent,
		copy: copy,
		COPY: COPY,
		curren: curren,
		deg: deg,
		divide: divide,
		Eacute: Eacute,
		eacute: eacute,
		Ecirc: Ecirc,
		ecirc: ecirc,
		Egrave: Egrave,
		egrave: egrave,
		ETH: ETH,
		eth: eth,
		Euml: Euml,
		euml: euml,
		frac12: frac12,
		frac14: frac14,
		frac34: frac34,
		gt: gt$1,
		GT: GT,
		Iacute: Iacute,
		iacute: iacute,
		Icirc: Icirc,
		icirc: icirc,
		iexcl: iexcl,
		Igrave: Igrave,
		igrave: igrave,
		iquest: iquest,
		Iuml: Iuml,
		iuml: iuml,
		laquo: laquo,
		lt: lt$1,
		LT: LT,
		macr: macr,
		micro: micro,
		middot: middot,
		nbsp: nbsp,
		not: not,
		Ntilde: Ntilde,
		ntilde: ntilde,
		Oacute: Oacute,
		oacute: oacute,
		Ocirc: Ocirc,
		ocirc: ocirc,
		Ograve: Ograve,
		ograve: ograve,
		ordf: ordf,
		ordm: ordm,
		Oslash: Oslash,
		oslash: oslash,
		Otilde: Otilde,
		otilde: otilde,
		Ouml: Ouml,
		ouml: ouml,
		para: para,
		plusmn: plusmn,
		pound: pound,
		quot: quot$1,
		QUOT: QUOT,
		raquo: raquo,
		reg: reg,
		REG: REG,
		sect: sect,
		shy: shy,
		sup1: sup1,
		sup2: sup2,
		sup3: sup3,
		szlig: szlig,
		THORN: THORN,
		thorn: thorn,
		times: times,
		Uacute: Uacute,
		uacute: uacute,
		Ucirc: Ucirc,
		ucirc: ucirc,
		Ugrave: Ugrave,
		ugrave: ugrave,
		uml: uml,
		Uuml: Uuml,
		uuml: uuml,
		Yacute: Yacute,
		yacute: yacute,
		yen: yen,
		yuml: yuml
	};

	var amp = "&";
	var apos = "'";
	var gt = ">";
	var lt = "<";
	var quot = "\"";
	var require$$0 = {
		amp: amp,
		apos: apos,
		gt: gt,
		lt: lt,
		quot: quot
	};

	var __importDefault$6 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(Tokenizer$1, "__esModule", { value: true });
	var decode_codepoint_1$1 = __importDefault$6(decode_codepoint);
	var entities_json_1$2 = __importDefault$6(require$$1$2);
	var legacy_json_1$1 = __importDefault$6(require$$1$1);
	var xml_json_1$2 = __importDefault$6(require$$0);
	function whitespace$1(c) {
	    return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
	}
	function isASCIIAlpha(c) {
	    return (c >= "a" && c <= "z") || (c >= "A" && c <= "Z");
	}
	function ifElseState(upper, SUCCESS, FAILURE) {
	    var lower = upper.toLowerCase();
	    if (upper === lower) {
	        return function (t, c) {
	            if (c === lower) {
	                t._state = SUCCESS;
	            }
	            else {
	                t._state = FAILURE;
	                t._index--;
	            }
	        };
	    }
	    return function (t, c) {
	        if (c === lower || c === upper) {
	            t._state = SUCCESS;
	        }
	        else {
	            t._state = FAILURE;
	            t._index--;
	        }
	    };
	}
	function consumeSpecialNameChar(upper, NEXT_STATE) {
	    var lower = upper.toLowerCase();
	    return function (t, c) {
	        if (c === lower || c === upper) {
	            t._state = NEXT_STATE;
	        }
	        else {
	            t._state = 3 /* InTagName */;
	            t._index--; // Consume the token again
	        }
	    };
	}
	var stateBeforeCdata1 = ifElseState("C", 24 /* BeforeCdata2 */, 16 /* InDeclaration */);
	var stateBeforeCdata2 = ifElseState("D", 25 /* BeforeCdata3 */, 16 /* InDeclaration */);
	var stateBeforeCdata3 = ifElseState("A", 26 /* BeforeCdata4 */, 16 /* InDeclaration */);
	var stateBeforeCdata4 = ifElseState("T", 27 /* BeforeCdata5 */, 16 /* InDeclaration */);
	var stateBeforeCdata5 = ifElseState("A", 28 /* BeforeCdata6 */, 16 /* InDeclaration */);
	var stateBeforeScript1 = consumeSpecialNameChar("R", 35 /* BeforeScript2 */);
	var stateBeforeScript2 = consumeSpecialNameChar("I", 36 /* BeforeScript3 */);
	var stateBeforeScript3 = consumeSpecialNameChar("P", 37 /* BeforeScript4 */);
	var stateBeforeScript4 = consumeSpecialNameChar("T", 38 /* BeforeScript5 */);
	var stateAfterScript1 = ifElseState("R", 40 /* AfterScript2 */, 1 /* Text */);
	var stateAfterScript2 = ifElseState("I", 41 /* AfterScript3 */, 1 /* Text */);
	var stateAfterScript3 = ifElseState("P", 42 /* AfterScript4 */, 1 /* Text */);
	var stateAfterScript4 = ifElseState("T", 43 /* AfterScript5 */, 1 /* Text */);
	var stateBeforeStyle1 = consumeSpecialNameChar("Y", 45 /* BeforeStyle2 */);
	var stateBeforeStyle2 = consumeSpecialNameChar("L", 46 /* BeforeStyle3 */);
	var stateBeforeStyle3 = consumeSpecialNameChar("E", 47 /* BeforeStyle4 */);
	var stateAfterStyle1 = ifElseState("Y", 49 /* AfterStyle2 */, 1 /* Text */);
	var stateAfterStyle2 = ifElseState("L", 50 /* AfterStyle3 */, 1 /* Text */);
	var stateAfterStyle3 = ifElseState("E", 51 /* AfterStyle4 */, 1 /* Text */);
	var stateBeforeSpecialT = consumeSpecialNameChar("I", 54 /* BeforeTitle1 */);
	var stateBeforeTitle1 = consumeSpecialNameChar("T", 55 /* BeforeTitle2 */);
	var stateBeforeTitle2 = consumeSpecialNameChar("L", 56 /* BeforeTitle3 */);
	var stateBeforeTitle3 = consumeSpecialNameChar("E", 57 /* BeforeTitle4 */);
	var stateAfterSpecialTEnd = ifElseState("I", 58 /* AfterTitle1 */, 1 /* Text */);
	var stateAfterTitle1 = ifElseState("T", 59 /* AfterTitle2 */, 1 /* Text */);
	var stateAfterTitle2 = ifElseState("L", 60 /* AfterTitle3 */, 1 /* Text */);
	var stateAfterTitle3 = ifElseState("E", 61 /* AfterTitle4 */, 1 /* Text */);
	var stateBeforeEntity = ifElseState("#", 63 /* BeforeNumericEntity */, 64 /* InNamedEntity */);
	var stateBeforeNumericEntity = ifElseState("X", 66 /* InHexEntity */, 65 /* InNumericEntity */);
	var Tokenizer = /** @class */ (function () {
	    function Tokenizer(options, cbs) {
	        var _a;
	        /** The current state the tokenizer is in. */
	        this._state = 1 /* Text */;
	        /** The read buffer. */
	        this.buffer = "";
	        /** The beginning of the section that is currently being read. */
	        this.sectionStart = 0;
	        /** The index within the buffer that we are currently looking at. */
	        this._index = 0;
	        /**
	         * Data that has already been processed will be removed from the buffer occasionally.
	         * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.
	         */
	        this.bufferOffset = 0;
	        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */
	        this.baseState = 1 /* Text */;
	        /** For special parsing behavior inside of script and style tags. */
	        this.special = 1 /* None */;
	        /** Indicates whether the tokenizer has been paused. */
	        this.running = true;
	        /** Indicates whether the tokenizer has finished running / `.end` has been called. */
	        this.ended = false;
	        this.cbs = cbs;
	        this.xmlMode = !!(options === null || options === void 0 ? void 0 : options.xmlMode);
	        this.decodeEntities = (_a = options === null || options === void 0 ? void 0 : options.decodeEntities) !== null && _a !== void 0 ? _a : true;
	    }
	    Tokenizer.prototype.reset = function () {
	        this._state = 1 /* Text */;
	        this.buffer = "";
	        this.sectionStart = 0;
	        this._index = 0;
	        this.bufferOffset = 0;
	        this.baseState = 1 /* Text */;
	        this.special = 1 /* None */;
	        this.running = true;
	        this.ended = false;
	    };
	    Tokenizer.prototype.write = function (chunk) {
	        if (this.ended)
	            this.cbs.onerror(Error(".write() after done!"));
	        this.buffer += chunk;
	        this.parse();
	    };
	    Tokenizer.prototype.end = function (chunk) {
	        if (this.ended)
	            this.cbs.onerror(Error(".end() after done!"));
	        if (chunk)
	            this.write(chunk);
	        this.ended = true;
	        if (this.running)
	            this.finish();
	    };
	    Tokenizer.prototype.pause = function () {
	        this.running = false;
	    };
	    Tokenizer.prototype.resume = function () {
	        this.running = true;
	        if (this._index < this.buffer.length) {
	            this.parse();
	        }
	        if (this.ended) {
	            this.finish();
	        }
	    };
	    /**
	     * The current index within all of the written data.
	     */
	    Tokenizer.prototype.getAbsoluteIndex = function () {
	        return this.bufferOffset + this._index;
	    };
	    Tokenizer.prototype.stateText = function (c) {
	        if (c === "<") {
	            if (this._index > this.sectionStart) {
	                this.cbs.ontext(this.getSection());
	            }
	            this._state = 2 /* BeforeTagName */;
	            this.sectionStart = this._index;
	        }
	        else if (this.decodeEntities &&
	            c === "&" &&
	            (this.special === 1 /* None */ || this.special === 4 /* Title */)) {
	            if (this._index > this.sectionStart) {
	                this.cbs.ontext(this.getSection());
	            }
	            this.baseState = 1 /* Text */;
	            this._state = 62 /* BeforeEntity */;
	            this.sectionStart = this._index;
	        }
	    };
	    /**
	     * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.
	     *
	     * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).
	     * We allow anything that wouldn't end the tag.
	     */
	    Tokenizer.prototype.isTagStartChar = function (c) {
	        return (isASCIIAlpha(c) ||
	            (this.xmlMode && !whitespace$1(c) && c !== "/" && c !== ">"));
	    };
	    Tokenizer.prototype.stateBeforeTagName = function (c) {
	        if (c === "/") {
	            this._state = 5 /* BeforeClosingTagName */;
	        }
	        else if (c === "<") {
	            this.cbs.ontext(this.getSection());
	            this.sectionStart = this._index;
	        }
	        else if (c === ">" ||
	            this.special !== 1 /* None */ ||
	            whitespace$1(c)) {
	            this._state = 1 /* Text */;
	        }
	        else if (c === "!") {
	            this._state = 15 /* BeforeDeclaration */;
	            this.sectionStart = this._index + 1;
	        }
	        else if (c === "?") {
	            this._state = 17 /* InProcessingInstruction */;
	            this.sectionStart = this._index + 1;
	        }
	        else if (!this.isTagStartChar(c)) {
	            this._state = 1 /* Text */;
	        }
	        else {
	            this._state =
	                !this.xmlMode && (c === "s" || c === "S")
	                    ? 32 /* BeforeSpecialS */
	                    : !this.xmlMode && (c === "t" || c === "T")
	                        ? 52 /* BeforeSpecialT */
	                        : 3 /* InTagName */;
	            this.sectionStart = this._index;
	        }
	    };
	    Tokenizer.prototype.stateInTagName = function (c) {
	        if (c === "/" || c === ">" || whitespace$1(c)) {
	            this.emitToken("onopentagname");
	            this._state = 8 /* BeforeAttributeName */;
	            this._index--;
	        }
	    };
	    Tokenizer.prototype.stateBeforeClosingTagName = function (c) {
	        if (whitespace$1(c)) ;
	        else if (c === ">") {
	            this._state = 1 /* Text */;
	        }
	        else if (this.special !== 1 /* None */) {
	            if (this.special !== 4 /* Title */ && (c === "s" || c === "S")) {
	                this._state = 33 /* BeforeSpecialSEnd */;
	            }
	            else if (this.special === 4 /* Title */ &&
	                (c === "t" || c === "T")) {
	                this._state = 53 /* BeforeSpecialTEnd */;
	            }
	            else {
	                this._state = 1 /* Text */;
	                this._index--;
	            }
	        }
	        else if (!this.isTagStartChar(c)) {
	            this._state = 20 /* InSpecialComment */;
	            this.sectionStart = this._index;
	        }
	        else {
	            this._state = 6 /* InClosingTagName */;
	            this.sectionStart = this._index;
	        }
	    };
	    Tokenizer.prototype.stateInClosingTagName = function (c) {
	        if (c === ">" || whitespace$1(c)) {
	            this.emitToken("onclosetag");
	            this._state = 7 /* AfterClosingTagName */;
	            this._index--;
	        }
	    };
	    Tokenizer.prototype.stateAfterClosingTagName = function (c) {
	        // Skip everything until ">"
	        if (c === ">") {
	            this._state = 1 /* Text */;
	            this.sectionStart = this._index + 1;
	        }
	    };
	    Tokenizer.prototype.stateBeforeAttributeName = function (c) {
	        if (c === ">") {
	            this.cbs.onopentagend();
	            this._state = 1 /* Text */;
	            this.sectionStart = this._index + 1;
	        }
	        else if (c === "/") {
	            this._state = 4 /* InSelfClosingTag */;
	        }
	        else if (!whitespace$1(c)) {
	            this._state = 9 /* InAttributeName */;
	            this.sectionStart = this._index;
	        }
	    };
	    Tokenizer.prototype.stateInSelfClosingTag = function (c) {
	        if (c === ">") {
	            this.cbs.onselfclosingtag();
	            this._state = 1 /* Text */;
	            this.sectionStart = this._index + 1;
	            this.special = 1 /* None */; // Reset special state, in case of self-closing special tags
	        }
	        else if (!whitespace$1(c)) {
	            this._state = 8 /* BeforeAttributeName */;
	            this._index--;
	        }
	    };
	    Tokenizer.prototype.stateInAttributeName = function (c) {
	        if (c === "=" || c === "/" || c === ">" || whitespace$1(c)) {
	            this.cbs.onattribname(this.getSection());
	            this.sectionStart = -1;
	            this._state = 10 /* AfterAttributeName */;
	            this._index--;
	        }
	    };
	    Tokenizer.prototype.stateAfterAttributeName = function (c) {
	        if (c === "=") {
	            this._state = 11 /* BeforeAttributeValue */;
	        }
	        else if (c === "/" || c === ">") {
	            this.cbs.onattribend(undefined);
	            this._state = 8 /* BeforeAttributeName */;
	            this._index--;
	        }
	        else if (!whitespace$1(c)) {
	            this.cbs.onattribend(undefined);
	            this._state = 9 /* InAttributeName */;
	            this.sectionStart = this._index;
	        }
	    };
	    Tokenizer.prototype.stateBeforeAttributeValue = function (c) {
	        if (c === '"') {
	            this._state = 12 /* InAttributeValueDq */;
	            this.sectionStart = this._index + 1;
	        }
	        else if (c === "'") {
	            this._state = 13 /* InAttributeValueSq */;
	            this.sectionStart = this._index + 1;
	        }
	        else if (!whitespace$1(c)) {
	            this._state = 14 /* InAttributeValueNq */;
	            this.sectionStart = this._index;
	            this._index--; // Reconsume token
	        }
	    };
	    Tokenizer.prototype.handleInAttributeValue = function (c, quote) {
	        if (c === quote) {
	            this.emitToken("onattribdata");
	            this.cbs.onattribend(quote);
	            this._state = 8 /* BeforeAttributeName */;
	        }
	        else if (this.decodeEntities && c === "&") {
	            this.emitToken("onattribdata");
	            this.baseState = this._state;
	            this._state = 62 /* BeforeEntity */;
	            this.sectionStart = this._index;
	        }
	    };
	    Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function (c) {
	        this.handleInAttributeValue(c, '"');
	    };
	    Tokenizer.prototype.stateInAttributeValueSingleQuotes = function (c) {
	        this.handleInAttributeValue(c, "'");
	    };
	    Tokenizer.prototype.stateInAttributeValueNoQuotes = function (c) {
	        if (whitespace$1(c) || c === ">") {
	            this.emitToken("onattribdata");
	            this.cbs.onattribend(null);
	            this._state = 8 /* BeforeAttributeName */;
	            this._index--;
	        }
	        else if (this.decodeEntities && c === "&") {
	            this.emitToken("onattribdata");
	            this.baseState = this._state;
	            this._state = 62 /* BeforeEntity */;
	            this.sectionStart = this._index;
	        }
	    };
	    Tokenizer.prototype.stateBeforeDeclaration = function (c) {
	        this._state =
	            c === "["
	                ? 23 /* BeforeCdata1 */
	                : c === "-"
	                    ? 18 /* BeforeComment */
	                    : 16 /* InDeclaration */;
	    };
	    Tokenizer.prototype.stateInDeclaration = function (c) {
	        if (c === ">") {
	            this.cbs.ondeclaration(this.getSection());
	            this._state = 1 /* Text */;
	            this.sectionStart = this._index + 1;
	        }
	    };
	    Tokenizer.prototype.stateInProcessingInstruction = function (c) {
	        if (c === ">") {
	            this.cbs.onprocessinginstruction(this.getSection());
	            this._state = 1 /* Text */;
	            this.sectionStart = this._index + 1;
	        }
	    };
	    Tokenizer.prototype.stateBeforeComment = function (c) {
	        if (c === "-") {
	            this._state = 19 /* InComment */;
	            this.sectionStart = this._index + 1;
	        }
	        else {
	            this._state = 16 /* InDeclaration */;
	        }
	    };
	    Tokenizer.prototype.stateInComment = function (c) {
	        if (c === "-")
	            this._state = 21 /* AfterComment1 */;
	    };
	    Tokenizer.prototype.stateInSpecialComment = function (c) {
	        if (c === ">") {
	            this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index));
	            this._state = 1 /* Text */;
	            this.sectionStart = this._index + 1;
	        }
	    };
	    Tokenizer.prototype.stateAfterComment1 = function (c) {
	        if (c === "-") {
	            this._state = 22 /* AfterComment2 */;
	        }
	        else {
	            this._state = 19 /* InComment */;
	        }
	    };
	    Tokenizer.prototype.stateAfterComment2 = function (c) {
	        if (c === ">") {
	            // Remove 2 trailing chars
	            this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index - 2));
	            this._state = 1 /* Text */;
	            this.sectionStart = this._index + 1;
	        }
	        else if (c !== "-") {
	            this._state = 19 /* InComment */;
	        }
	        // Else: stay in AFTER_COMMENT_2 (`--->`)
	    };
	    Tokenizer.prototype.stateBeforeCdata6 = function (c) {
	        if (c === "[") {
	            this._state = 29 /* InCdata */;
	            this.sectionStart = this._index + 1;
	        }
	        else {
	            this._state = 16 /* InDeclaration */;
	            this._index--;
	        }
	    };
	    Tokenizer.prototype.stateInCdata = function (c) {
	        if (c === "]")
	            this._state = 30 /* AfterCdata1 */;
	    };
	    Tokenizer.prototype.stateAfterCdata1 = function (c) {
	        if (c === "]")
	            this._state = 31 /* AfterCdata2 */;
	        else
	            this._state = 29 /* InCdata */;
	    };
	    Tokenizer.prototype.stateAfterCdata2 = function (c) {
	        if (c === ">") {
	            // Remove 2 trailing chars
	            this.cbs.oncdata(this.buffer.substring(this.sectionStart, this._index - 2));
	            this._state = 1 /* Text */;
	            this.sectionStart = this._index + 1;
	        }
	        else if (c !== "]") {
	            this._state = 29 /* InCdata */;
	        }
	        // Else: stay in AFTER_CDATA_2 (`]]]>`)
	    };
	    Tokenizer.prototype.stateBeforeSpecialS = function (c) {
	        if (c === "c" || c === "C") {
	            this._state = 34 /* BeforeScript1 */;
	        }
	        else if (c === "t" || c === "T") {
	            this._state = 44 /* BeforeStyle1 */;
	        }
	        else {
	            this._state = 3 /* InTagName */;
	            this._index--; // Consume the token again
	        }
	    };
	    Tokenizer.prototype.stateBeforeSpecialSEnd = function (c) {
	        if (this.special === 2 /* Script */ && (c === "c" || c === "C")) {
	            this._state = 39 /* AfterScript1 */;
	        }
	        else if (this.special === 3 /* Style */ && (c === "t" || c === "T")) {
	            this._state = 48 /* AfterStyle1 */;
	        }
	        else
	            this._state = 1 /* Text */;
	    };
	    Tokenizer.prototype.stateBeforeSpecialLast = function (c, special) {
	        if (c === "/" || c === ">" || whitespace$1(c)) {
	            this.special = special;
	        }
	        this._state = 3 /* InTagName */;
	        this._index--; // Consume the token again
	    };
	    Tokenizer.prototype.stateAfterSpecialLast = function (c, sectionStartOffset) {
	        if (c === ">" || whitespace$1(c)) {
	            this.special = 1 /* None */;
	            this._state = 6 /* InClosingTagName */;
	            this.sectionStart = this._index - sectionStartOffset;
	            this._index--; // Reconsume the token
	        }
	        else
	            this._state = 1 /* Text */;
	    };
	    // For entities terminated with a semicolon
	    Tokenizer.prototype.parseFixedEntity = function (map) {
	        if (map === void 0) { map = this.xmlMode ? xml_json_1$2.default : entities_json_1$2.default; }
	        // Offset = 1
	        if (this.sectionStart + 1 < this._index) {
	            var entity = this.buffer.substring(this.sectionStart + 1, this._index);
	            if (Object.prototype.hasOwnProperty.call(map, entity)) {
	                this.emitPartial(map[entity]);
	                this.sectionStart = this._index + 1;
	            }
	        }
	    };
	    // Parses legacy entities (without trailing semicolon)
	    Tokenizer.prototype.parseLegacyEntity = function () {
	        var start = this.sectionStart + 1;
	        // The max length of legacy entities is 6
	        var limit = Math.min(this._index - start, 6);
	        while (limit >= 2) {
	            // The min length of legacy entities is 2
	            var entity = this.buffer.substr(start, limit);
	            if (Object.prototype.hasOwnProperty.call(legacy_json_1$1.default, entity)) {
	                this.emitPartial(legacy_json_1$1.default[entity]);
	                this.sectionStart += limit + 1;
	                return;
	            }
	            limit--;
	        }
	    };
	    Tokenizer.prototype.stateInNamedEntity = function (c) {
	        if (c === ";") {
	            this.parseFixedEntity();
	            // Retry as legacy entity if entity wasn't parsed
	            if (this.baseState === 1 /* Text */ &&
	                this.sectionStart + 1 < this._index &&
	                !this.xmlMode) {
	                this.parseLegacyEntity();
	            }
	            this._state = this.baseState;
	        }
	        else if ((c < "0" || c > "9") && !isASCIIAlpha(c)) {
	            if (this.xmlMode || this.sectionStart + 1 === this._index) ;
	            else if (this.baseState !== 1 /* Text */) {
	                if (c !== "=") {
	                    // Parse as legacy entity, without allowing additional characters.
	                    this.parseFixedEntity(legacy_json_1$1.default);
	                }
	            }
	            else {
	                this.parseLegacyEntity();
	            }
	            this._state = this.baseState;
	            this._index--;
	        }
	    };
	    Tokenizer.prototype.decodeNumericEntity = function (offset, base, strict) {
	        var sectionStart = this.sectionStart + offset;
	        if (sectionStart !== this._index) {
	            // Parse entity
	            var entity = this.buffer.substring(sectionStart, this._index);
	            var parsed = parseInt(entity, base);
	            this.emitPartial(decode_codepoint_1$1.default(parsed));
	            this.sectionStart = strict ? this._index + 1 : this._index;
	        }
	        this._state = this.baseState;
	    };
	    Tokenizer.prototype.stateInNumericEntity = function (c) {
	        if (c === ";") {
	            this.decodeNumericEntity(2, 10, true);
	        }
	        else if (c < "0" || c > "9") {
	            if (!this.xmlMode) {
	                this.decodeNumericEntity(2, 10, false);
	            }
	            else {
	                this._state = this.baseState;
	            }
	            this._index--;
	        }
	    };
	    Tokenizer.prototype.stateInHexEntity = function (c) {
	        if (c === ";") {
	            this.decodeNumericEntity(3, 16, true);
	        }
	        else if ((c < "a" || c > "f") &&
	            (c < "A" || c > "F") &&
	            (c < "0" || c > "9")) {
	            if (!this.xmlMode) {
	                this.decodeNumericEntity(3, 16, false);
	            }
	            else {
	                this._state = this.baseState;
	            }
	            this._index--;
	        }
	    };
	    Tokenizer.prototype.cleanup = function () {
	        if (this.sectionStart < 0) {
	            this.buffer = "";
	            this.bufferOffset += this._index;
	            this._index = 0;
	        }
	        else if (this.running) {
	            if (this._state === 1 /* Text */) {
	                if (this.sectionStart !== this._index) {
	                    this.cbs.ontext(this.buffer.substr(this.sectionStart));
	                }
	                this.buffer = "";
	                this.bufferOffset += this._index;
	                this._index = 0;
	            }
	            else if (this.sectionStart === this._index) {
	                // The section just started
	                this.buffer = "";
	                this.bufferOffset += this._index;
	                this._index = 0;
	            }
	            else {
	                // Remove everything unnecessary
	                this.buffer = this.buffer.substr(this.sectionStart);
	                this._index -= this.sectionStart;
	                this.bufferOffset += this.sectionStart;
	            }
	            this.sectionStart = 0;
	        }
	    };
	    /**
	     * Iterates through the buffer, calling the function corresponding to the current state.
	     *
	     * States that are more likely to be hit are higher up, as a performance improvement.
	     */
	    Tokenizer.prototype.parse = function () {
	        while (this._index < this.buffer.length && this.running) {
	            var c = this.buffer.charAt(this._index);
	            if (this._state === 1 /* Text */) {
	                this.stateText(c);
	            }
	            else if (this._state === 12 /* InAttributeValueDq */) {
	                this.stateInAttributeValueDoubleQuotes(c);
	            }
	            else if (this._state === 9 /* InAttributeName */) {
	                this.stateInAttributeName(c);
	            }
	            else if (this._state === 19 /* InComment */) {
	                this.stateInComment(c);
	            }
	            else if (this._state === 20 /* InSpecialComment */) {
	                this.stateInSpecialComment(c);
	            }
	            else if (this._state === 8 /* BeforeAttributeName */) {
	                this.stateBeforeAttributeName(c);
	            }
	            else if (this._state === 3 /* InTagName */) {
	                this.stateInTagName(c);
	            }
	            else if (this._state === 6 /* InClosingTagName */) {
	                this.stateInClosingTagName(c);
	            }
	            else if (this._state === 2 /* BeforeTagName */) {
	                this.stateBeforeTagName(c);
	            }
	            else if (this._state === 10 /* AfterAttributeName */) {
	                this.stateAfterAttributeName(c);
	            }
	            else if (this._state === 13 /* InAttributeValueSq */) {
	                this.stateInAttributeValueSingleQuotes(c);
	            }
	            else if (this._state === 11 /* BeforeAttributeValue */) {
	                this.stateBeforeAttributeValue(c);
	            }
	            else if (this._state === 5 /* BeforeClosingTagName */) {
	                this.stateBeforeClosingTagName(c);
	            }
	            else if (this._state === 7 /* AfterClosingTagName */) {
	                this.stateAfterClosingTagName(c);
	            }
	            else if (this._state === 32 /* BeforeSpecialS */) {
	                this.stateBeforeSpecialS(c);
	            }
	            else if (this._state === 21 /* AfterComment1 */) {
	                this.stateAfterComment1(c);
	            }
	            else if (this._state === 14 /* InAttributeValueNq */) {
	                this.stateInAttributeValueNoQuotes(c);
	            }
	            else if (this._state === 4 /* InSelfClosingTag */) {
	                this.stateInSelfClosingTag(c);
	            }
	            else if (this._state === 16 /* InDeclaration */) {
	                this.stateInDeclaration(c);
	            }
	            else if (this._state === 15 /* BeforeDeclaration */) {
	                this.stateBeforeDeclaration(c);
	            }
	            else if (this._state === 22 /* AfterComment2 */) {
	                this.stateAfterComment2(c);
	            }
	            else if (this._state === 18 /* BeforeComment */) {
	                this.stateBeforeComment(c);
	            }
	            else if (this._state === 33 /* BeforeSpecialSEnd */) {
	                this.stateBeforeSpecialSEnd(c);
	            }
	            else if (this._state === 53 /* BeforeSpecialTEnd */) {
	                stateAfterSpecialTEnd(this, c);
	            }
	            else if (this._state === 39 /* AfterScript1 */) {
	                stateAfterScript1(this, c);
	            }
	            else if (this._state === 40 /* AfterScript2 */) {
	                stateAfterScript2(this, c);
	            }
	            else if (this._state === 41 /* AfterScript3 */) {
	                stateAfterScript3(this, c);
	            }
	            else if (this._state === 34 /* BeforeScript1 */) {
	                stateBeforeScript1(this, c);
	            }
	            else if (this._state === 35 /* BeforeScript2 */) {
	                stateBeforeScript2(this, c);
	            }
	            else if (this._state === 36 /* BeforeScript3 */) {
	                stateBeforeScript3(this, c);
	            }
	            else if (this._state === 37 /* BeforeScript4 */) {
	                stateBeforeScript4(this, c);
	            }
	            else if (this._state === 38 /* BeforeScript5 */) {
	                this.stateBeforeSpecialLast(c, 2 /* Script */);
	            }
	            else if (this._state === 42 /* AfterScript4 */) {
	                stateAfterScript4(this, c);
	            }
	            else if (this._state === 43 /* AfterScript5 */) {
	                this.stateAfterSpecialLast(c, 6);
	            }
	            else if (this._state === 44 /* BeforeStyle1 */) {
	                stateBeforeStyle1(this, c);
	            }
	            else if (this._state === 29 /* InCdata */) {
	                this.stateInCdata(c);
	            }
	            else if (this._state === 45 /* BeforeStyle2 */) {
	                stateBeforeStyle2(this, c);
	            }
	            else if (this._state === 46 /* BeforeStyle3 */) {
	                stateBeforeStyle3(this, c);
	            }
	            else if (this._state === 47 /* BeforeStyle4 */) {
	                this.stateBeforeSpecialLast(c, 3 /* Style */);
	            }
	            else if (this._state === 48 /* AfterStyle1 */) {
	                stateAfterStyle1(this, c);
	            }
	            else if (this._state === 49 /* AfterStyle2 */) {
	                stateAfterStyle2(this, c);
	            }
	            else if (this._state === 50 /* AfterStyle3 */) {
	                stateAfterStyle3(this, c);
	            }
	            else if (this._state === 51 /* AfterStyle4 */) {
	                this.stateAfterSpecialLast(c, 5);
	            }
	            else if (this._state === 52 /* BeforeSpecialT */) {
	                stateBeforeSpecialT(this, c);
	            }
	            else if (this._state === 54 /* BeforeTitle1 */) {
	                stateBeforeTitle1(this, c);
	            }
	            else if (this._state === 55 /* BeforeTitle2 */) {
	                stateBeforeTitle2(this, c);
	            }
	            else if (this._state === 56 /* BeforeTitle3 */) {
	                stateBeforeTitle3(this, c);
	            }
	            else if (this._state === 57 /* BeforeTitle4 */) {
	                this.stateBeforeSpecialLast(c, 4 /* Title */);
	            }
	            else if (this._state === 58 /* AfterTitle1 */) {
	                stateAfterTitle1(this, c);
	            }
	            else if (this._state === 59 /* AfterTitle2 */) {
	                stateAfterTitle2(this, c);
	            }
	            else if (this._state === 60 /* AfterTitle3 */) {
	                stateAfterTitle3(this, c);
	            }
	            else if (this._state === 61 /* AfterTitle4 */) {
	                this.stateAfterSpecialLast(c, 5);
	            }
	            else if (this._state === 17 /* InProcessingInstruction */) {
	                this.stateInProcessingInstruction(c);
	            }
	            else if (this._state === 64 /* InNamedEntity */) {
	                this.stateInNamedEntity(c);
	            }
	            else if (this._state === 23 /* BeforeCdata1 */) {
	                stateBeforeCdata1(this, c);
	            }
	            else if (this._state === 62 /* BeforeEntity */) {
	                stateBeforeEntity(this, c);
	            }
	            else if (this._state === 24 /* BeforeCdata2 */) {
	                stateBeforeCdata2(this, c);
	            }
	            else if (this._state === 25 /* BeforeCdata3 */) {
	                stateBeforeCdata3(this, c);
	            }
	            else if (this._state === 30 /* AfterCdata1 */) {
	                this.stateAfterCdata1(c);
	            }
	            else if (this._state === 31 /* AfterCdata2 */) {
	                this.stateAfterCdata2(c);
	            }
	            else if (this._state === 26 /* BeforeCdata4 */) {
	                stateBeforeCdata4(this, c);
	            }
	            else if (this._state === 27 /* BeforeCdata5 */) {
	                stateBeforeCdata5(this, c);
	            }
	            else if (this._state === 28 /* BeforeCdata6 */) {
	                this.stateBeforeCdata6(c);
	            }
	            else if (this._state === 66 /* InHexEntity */) {
	                this.stateInHexEntity(c);
	            }
	            else if (this._state === 65 /* InNumericEntity */) {
	                this.stateInNumericEntity(c);
	                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
	            }
	            else if (this._state === 63 /* BeforeNumericEntity */) {
	                stateBeforeNumericEntity(this, c);
	            }
	            else {
	                this.cbs.onerror(Error("unknown _state"), this._state);
	            }
	            this._index++;
	        }
	        this.cleanup();
	    };
	    Tokenizer.prototype.finish = function () {
	        // If there is remaining data, emit it in a reasonable way
	        if (this.sectionStart < this._index) {
	            this.handleTrailingData();
	        }
	        this.cbs.onend();
	    };
	    Tokenizer.prototype.handleTrailingData = function () {
	        var data = this.buffer.substr(this.sectionStart);
	        if (this._state === 29 /* InCdata */ ||
	            this._state === 30 /* AfterCdata1 */ ||
	            this._state === 31 /* AfterCdata2 */) {
	            this.cbs.oncdata(data);
	        }
	        else if (this._state === 19 /* InComment */ ||
	            this._state === 21 /* AfterComment1 */ ||
	            this._state === 22 /* AfterComment2 */) {
	            this.cbs.oncomment(data);
	        }
	        else if (this._state === 64 /* InNamedEntity */ && !this.xmlMode) {
	            this.parseLegacyEntity();
	            if (this.sectionStart < this._index) {
	                this._state = this.baseState;
	                this.handleTrailingData();
	            }
	        }
	        else if (this._state === 65 /* InNumericEntity */ && !this.xmlMode) {
	            this.decodeNumericEntity(2, 10, false);
	            if (this.sectionStart < this._index) {
	                this._state = this.baseState;
	                this.handleTrailingData();
	            }
	        }
	        else if (this._state === 66 /* InHexEntity */ && !this.xmlMode) {
	            this.decodeNumericEntity(3, 16, false);
	            if (this.sectionStart < this._index) {
	                this._state = this.baseState;
	                this.handleTrailingData();
	            }
	        }
	        else if (this._state !== 3 /* InTagName */ &&
	            this._state !== 8 /* BeforeAttributeName */ &&
	            this._state !== 11 /* BeforeAttributeValue */ &&
	            this._state !== 10 /* AfterAttributeName */ &&
	            this._state !== 9 /* InAttributeName */ &&
	            this._state !== 13 /* InAttributeValueSq */ &&
	            this._state !== 12 /* InAttributeValueDq */ &&
	            this._state !== 14 /* InAttributeValueNq */ &&
	            this._state !== 6 /* InClosingTagName */) {
	            this.cbs.ontext(data);
	        }
	        /*
	         * Else, ignore remaining data
	         * TODO add a way to remove current tag
	         */
	    };
	    Tokenizer.prototype.getSection = function () {
	        return this.buffer.substring(this.sectionStart, this._index);
	    };
	    Tokenizer.prototype.emitToken = function (name) {
	        this.cbs[name](this.getSection());
	        this.sectionStart = -1;
	    };
	    Tokenizer.prototype.emitPartial = function (value) {
	        if (this.baseState !== 1 /* Text */) {
	            this.cbs.onattribdata(value); // TODO implement the new event
	        }
	        else {
	            this.cbs.ontext(value);
	        }
	    };
	    return Tokenizer;
	}());
	Tokenizer$1.default = Tokenizer;

	var __importDefault$5 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(Parser$2, "__esModule", { value: true });
	Parser$2.Parser = void 0;
	var Tokenizer_1 = __importDefault$5(Tokenizer$1);
	var formTags = new Set([
	    "input",
	    "option",
	    "optgroup",
	    "select",
	    "button",
	    "datalist",
	    "textarea",
	]);
	var pTag = new Set(["p"]);
	var openImpliesClose = {
	    tr: new Set(["tr", "th", "td"]),
	    th: new Set(["th"]),
	    td: new Set(["thead", "th", "td"]),
	    body: new Set(["head", "link", "script"]),
	    li: new Set(["li"]),
	    p: pTag,
	    h1: pTag,
	    h2: pTag,
	    h3: pTag,
	    h4: pTag,
	    h5: pTag,
	    h6: pTag,
	    select: formTags,
	    input: formTags,
	    output: formTags,
	    button: formTags,
	    datalist: formTags,
	    textarea: formTags,
	    option: new Set(["option"]),
	    optgroup: new Set(["optgroup", "option"]),
	    dd: new Set(["dt", "dd"]),
	    dt: new Set(["dt", "dd"]),
	    address: pTag,
	    article: pTag,
	    aside: pTag,
	    blockquote: pTag,
	    details: pTag,
	    div: pTag,
	    dl: pTag,
	    fieldset: pTag,
	    figcaption: pTag,
	    figure: pTag,
	    footer: pTag,
	    form: pTag,
	    header: pTag,
	    hr: pTag,
	    main: pTag,
	    nav: pTag,
	    ol: pTag,
	    pre: pTag,
	    section: pTag,
	    table: pTag,
	    ul: pTag,
	    rt: new Set(["rt", "rp"]),
	    rp: new Set(["rt", "rp"]),
	    tbody: new Set(["thead", "tbody"]),
	    tfoot: new Set(["thead", "tbody"]),
	};
	var voidElements$1 = new Set([
	    "area",
	    "base",
	    "basefont",
	    "br",
	    "col",
	    "command",
	    "embed",
	    "frame",
	    "hr",
	    "img",
	    "input",
	    "isindex",
	    "keygen",
	    "link",
	    "meta",
	    "param",
	    "source",
	    "track",
	    "wbr",
	]);
	var foreignContextElements = new Set(["math", "svg"]);
	var htmlIntegrationElements = new Set([
	    "mi",
	    "mo",
	    "mn",
	    "ms",
	    "mtext",
	    "annotation-xml",
	    "foreignObject",
	    "desc",
	    "title",
	]);
	var reNameEnd = /\s|\//;
	var Parser$1 = /** @class */ (function () {
	    function Parser(cbs, options) {
	        if (options === void 0) { options = {}; }
	        var _a, _b, _c, _d, _e;
	        /** The start index of the last event. */
	        this.startIndex = 0;
	        /** The end index of the last event. */
	        this.endIndex = null;
	        this.tagname = "";
	        this.attribname = "";
	        this.attribvalue = "";
	        this.attribs = null;
	        this.stack = [];
	        this.foreignContext = [];
	        this.options = options;
	        this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
	        this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;
	        this.lowerCaseAttributeNames =
	            (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;
	        this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_1.default)(this.options, this);
	        (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);
	    }
	    Parser.prototype.updatePosition = function (initialOffset) {
	        if (this.endIndex === null) {
	            if (this.tokenizer.sectionStart <= initialOffset) {
	                this.startIndex = 0;
	            }
	            else {
	                this.startIndex = this.tokenizer.sectionStart - initialOffset;
	            }
	        }
	        else {
	            this.startIndex = this.endIndex + 1;
	        }
	        this.endIndex = this.tokenizer.getAbsoluteIndex();
	    };
	    // Tokenizer event handlers
	    Parser.prototype.ontext = function (data) {
	        var _a, _b;
	        this.updatePosition(1);
	        this.endIndex--;
	        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);
	    };
	    Parser.prototype.onopentagname = function (name) {
	        var _a, _b;
	        if (this.lowerCaseTagNames) {
	            name = name.toLowerCase();
	        }
	        this.tagname = name;
	        if (!this.options.xmlMode &&
	            Object.prototype.hasOwnProperty.call(openImpliesClose, name)) {
	            var el = void 0;
	            while (this.stack.length > 0 &&
	                openImpliesClose[name].has((el = this.stack[this.stack.length - 1]))) {
	                this.onclosetag(el);
	            }
	        }
	        if (this.options.xmlMode || !voidElements$1.has(name)) {
	            this.stack.push(name);
	            if (foreignContextElements.has(name)) {
	                this.foreignContext.push(true);
	            }
	            else if (htmlIntegrationElements.has(name)) {
	                this.foreignContext.push(false);
	            }
	        }
	        (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, name);
	        if (this.cbs.onopentag)
	            this.attribs = {};
	    };
	    Parser.prototype.onopentagend = function () {
	        var _a, _b;
	        this.updatePosition(1);
	        if (this.attribs) {
	            (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs);
	            this.attribs = null;
	        }
	        if (!this.options.xmlMode &&
	            this.cbs.onclosetag &&
	            voidElements$1.has(this.tagname)) {
	            this.cbs.onclosetag(this.tagname);
	        }
	        this.tagname = "";
	    };
	    Parser.prototype.onclosetag = function (name) {
	        this.updatePosition(1);
	        if (this.lowerCaseTagNames) {
	            name = name.toLowerCase();
	        }
	        if (foreignContextElements.has(name) ||
	            htmlIntegrationElements.has(name)) {
	            this.foreignContext.pop();
	        }
	        if (this.stack.length &&
	            (this.options.xmlMode || !voidElements$1.has(name))) {
	            var pos = this.stack.lastIndexOf(name);
	            if (pos !== -1) {
	                if (this.cbs.onclosetag) {
	                    pos = this.stack.length - pos;
	                    while (pos--) {
	                        // We know the stack has sufficient elements.
	                        this.cbs.onclosetag(this.stack.pop());
	                    }
	                }
	                else
	                    this.stack.length = pos;
	            }
	            else if (name === "p" && !this.options.xmlMode) {
	                this.onopentagname(name);
	                this.closeCurrentTag();
	            }
	        }
	        else if (!this.options.xmlMode && (name === "br" || name === "p")) {
	            this.onopentagname(name);
	            this.closeCurrentTag();
	        }
	    };
	    Parser.prototype.onselfclosingtag = function () {
	        if (this.options.xmlMode ||
	            this.options.recognizeSelfClosing ||
	            this.foreignContext[this.foreignContext.length - 1]) {
	            this.closeCurrentTag();
	        }
	        else {
	            this.onopentagend();
	        }
	    };
	    Parser.prototype.closeCurrentTag = function () {
	        var _a, _b;
	        var name = this.tagname;
	        this.onopentagend();
	        /*
	         * Self-closing tags will be on the top of the stack
	         * (cheaper check than in onclosetag)
	         */
	        if (this.stack[this.stack.length - 1] === name) {
	            (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name);
	            this.stack.pop();
	        }
	    };
	    Parser.prototype.onattribname = function (name) {
	        if (this.lowerCaseAttributeNames) {
	            name = name.toLowerCase();
	        }
	        this.attribname = name;
	    };
	    Parser.prototype.onattribdata = function (value) {
	        this.attribvalue += value;
	    };
	    Parser.prototype.onattribend = function (quote) {
	        var _a, _b;
	        (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote);
	        if (this.attribs &&
	            !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
	            this.attribs[this.attribname] = this.attribvalue;
	        }
	        this.attribname = "";
	        this.attribvalue = "";
	    };
	    Parser.prototype.getInstructionName = function (value) {
	        var idx = value.search(reNameEnd);
	        var name = idx < 0 ? value : value.substr(0, idx);
	        if (this.lowerCaseTagNames) {
	            name = name.toLowerCase();
	        }
	        return name;
	    };
	    Parser.prototype.ondeclaration = function (value) {
	        if (this.cbs.onprocessinginstruction) {
	            var name_1 = this.getInstructionName(value);
	            this.cbs.onprocessinginstruction("!" + name_1, "!" + value);
	        }
	    };
	    Parser.prototype.onprocessinginstruction = function (value) {
	        if (this.cbs.onprocessinginstruction) {
	            var name_2 = this.getInstructionName(value);
	            this.cbs.onprocessinginstruction("?" + name_2, "?" + value);
	        }
	    };
	    Parser.prototype.oncomment = function (value) {
	        var _a, _b, _c, _d;
	        this.updatePosition(4);
	        (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, value);
	        (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);
	    };
	    Parser.prototype.oncdata = function (value) {
	        var _a, _b, _c, _d, _e, _f;
	        this.updatePosition(1);
	        if (this.options.xmlMode || this.options.recognizeCDATA) {
	            (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);
	            (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);
	            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);
	        }
	        else {
	            this.oncomment("[CDATA[" + value + "]]");
	        }
	    };
	    Parser.prototype.onerror = function (err) {
	        var _a, _b;
	        (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, err);
	    };
	    Parser.prototype.onend = function () {
	        var _a, _b;
	        if (this.cbs.onclosetag) {
	            for (var i = this.stack.length; i > 0; this.cbs.onclosetag(this.stack[--i]))
	                ;
	        }
	        (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);
	    };
	    /**
	     * Resets the parser to a blank state, ready to parse a new HTML document
	     */
	    Parser.prototype.reset = function () {
	        var _a, _b, _c, _d;
	        (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);
	        this.tokenizer.reset();
	        this.tagname = "";
	        this.attribname = "";
	        this.attribs = null;
	        this.stack = [];
	        (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);
	    };
	    /**
	     * Resets the parser, then parses a complete document and
	     * pushes it to the handler.
	     *
	     * @param data Document to parse.
	     */
	    Parser.prototype.parseComplete = function (data) {
	        this.reset();
	        this.end(data);
	    };
	    /**
	     * Parses a chunk of data and calls the corresponding callbacks.
	     *
	     * @param chunk Chunk to parse.
	     */
	    Parser.prototype.write = function (chunk) {
	        this.tokenizer.write(chunk);
	    };
	    /**
	     * Parses the end of the buffer and clears the stack, calls onend.
	     *
	     * @param chunk Optional final chunk to parse.
	     */
	    Parser.prototype.end = function (chunk) {
	        this.tokenizer.end(chunk);
	    };
	    /**
	     * Pauses parsing. The parser won't emit events until `resume` is called.
	     */
	    Parser.prototype.pause = function () {
	        this.tokenizer.pause();
	    };
	    /**
	     * Resumes parsing after `pause` was called.
	     */
	    Parser.prototype.resume = function () {
	        this.tokenizer.resume();
	    };
	    /**
	     * Alias of `write`, for backwards compatibility.
	     *
	     * @param chunk Chunk to parse.
	     * @deprecated
	     */
	    Parser.prototype.parseChunk = function (chunk) {
	        this.write(chunk);
	    };
	    /**
	     * Alias of `end`, for backwards compatibility.
	     *
	     * @param chunk Optional final chunk to parse.
	     * @deprecated
	     */
	    Parser.prototype.done = function (chunk) {
	        this.end(chunk);
	    };
	    return Parser;
	}());
	Parser$2.Parser = Parser$1;

	var lib$8 = {};

	var lib$7 = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;
	/** Types of elements found in htmlparser2's DOM */
	var ElementType;
	(function (ElementType) {
	    /** Type for the root element of a document */
	    ElementType["Root"] = "root";
	    /** Type for Text */
	    ElementType["Text"] = "text";
	    /** Type for <? ... ?> */
	    ElementType["Directive"] = "directive";
	    /** Type for <!-- ... --> */
	    ElementType["Comment"] = "comment";
	    /** Type for <script> tags */
	    ElementType["Script"] = "script";
	    /** Type for <style> tags */
	    ElementType["Style"] = "style";
	    /** Type for Any tag */
	    ElementType["Tag"] = "tag";
	    /** Type for <![CDATA[ ... ]]> */
	    ElementType["CDATA"] = "cdata";
	    /** Type for <!doctype ...> */
	    ElementType["Doctype"] = "doctype";
	})(ElementType = exports.ElementType || (exports.ElementType = {}));
	/**
	 * Tests whether an element is a tag or not.
	 *
	 * @param elem Element to test
	 */
	function isTag(elem) {
	    return (elem.type === ElementType.Tag ||
	        elem.type === ElementType.Script ||
	        elem.type === ElementType.Style);
	}
	exports.isTag = isTag;
	// Exports for backwards compatibility
	/** Type for the root element of a document */
	exports.Root = ElementType.Root;
	/** Type for Text */
	exports.Text = ElementType.Text;
	/** Type for <? ... ?> */
	exports.Directive = ElementType.Directive;
	/** Type for <!-- ... --> */
	exports.Comment = ElementType.Comment;
	/** Type for <script> tags */
	exports.Script = ElementType.Script;
	/** Type for <style> tags */
	exports.Style = ElementType.Style;
	/** Type for Any tag */
	exports.Tag = ElementType.Tag;
	/** Type for <![CDATA[ ... ]]> */
	exports.CDATA = ElementType.CDATA;
	/** Type for <!doctype ...> */
	exports.Doctype = ElementType.Doctype;
	}(lib$7));

	var node$2 = {};

	var __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign$1 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1.apply(this, arguments);
	};
	Object.defineProperty(node$2, "__esModule", { value: true });
	node$2.cloneNode = node$2.hasChildren = node$2.isDocument = node$2.isDirective = node$2.isComment = node$2.isText = node$2.isCDATA = node$2.isTag = node$2.Element = node$2.Document = node$2.NodeWithChildren = node$2.ProcessingInstruction = node$2.Comment = node$2.Text = node$2.DataNode = node$2.Node = void 0;
	var domelementtype_1$1 = lib$7;
	var nodeTypes = new Map([
	    [domelementtype_1$1.ElementType.Tag, 1],
	    [domelementtype_1$1.ElementType.Script, 1],
	    [domelementtype_1$1.ElementType.Style, 1],
	    [domelementtype_1$1.ElementType.Directive, 1],
	    [domelementtype_1$1.ElementType.Text, 3],
	    [domelementtype_1$1.ElementType.CDATA, 4],
	    [domelementtype_1$1.ElementType.Comment, 8],
	    [domelementtype_1$1.ElementType.Root, 9],
	]);
	/**
	 * This object will be used as the prototype for Nodes when creating a
	 * DOM-Level-1-compliant structure.
	 */
	var Node$7 = /** @class */ (function () {
	    /**
	     *
	     * @param type The type of the node.
	     */
	    function Node(type) {
	        this.type = type;
	        /** Parent of the node */
	        this.parent = null;
	        /** Previous sibling */
	        this.prev = null;
	        /** Next sibling */
	        this.next = null;
	        /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */
	        this.startIndex = null;
	        /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */
	        this.endIndex = null;
	    }
	    Object.defineProperty(Node.prototype, "nodeType", {
	        // Read-only aliases
	        get: function () {
	            var _a;
	            return (_a = nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Node.prototype, "parentNode", {
	        // Read-write aliases for properties
	        get: function () {
	            return this.parent;
	        },
	        set: function (parent) {
	            this.parent = parent;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Node.prototype, "previousSibling", {
	        get: function () {
	            return this.prev;
	        },
	        set: function (prev) {
	            this.prev = prev;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Node.prototype, "nextSibling", {
	        get: function () {
	            return this.next;
	        },
	        set: function (next) {
	            this.next = next;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Clone this node, and optionally its children.
	     *
	     * @param recursive Clone child nodes as well.
	     * @returns A clone of the node.
	     */
	    Node.prototype.cloneNode = function (recursive) {
	        if (recursive === void 0) { recursive = false; }
	        return cloneNode(this, recursive);
	    };
	    return Node;
	}());
	node$2.Node = Node$7;
	/**
	 * A node that contains some data.
	 */
	var DataNode = /** @class */ (function (_super) {
	    __extends$1(DataNode, _super);
	    /**
	     * @param type The type of the node
	     * @param data The content of the data node
	     */
	    function DataNode(type, data) {
	        var _this = _super.call(this, type) || this;
	        _this.data = data;
	        return _this;
	    }
	    Object.defineProperty(DataNode.prototype, "nodeValue", {
	        get: function () {
	            return this.data;
	        },
	        set: function (data) {
	            this.data = data;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return DataNode;
	}(Node$7));
	node$2.DataNode = DataNode;
	/**
	 * Text within the document.
	 */
	var Text$6 = /** @class */ (function (_super) {
	    __extends$1(Text, _super);
	    function Text(data) {
	        return _super.call(this, domelementtype_1$1.ElementType.Text, data) || this;
	    }
	    return Text;
	}(DataNode));
	node$2.Text = Text$6;
	/**
	 * Comments within the document.
	 */
	var Comment$4 = /** @class */ (function (_super) {
	    __extends$1(Comment, _super);
	    function Comment(data) {
	        return _super.call(this, domelementtype_1$1.ElementType.Comment, data) || this;
	    }
	    return Comment;
	}(DataNode));
	node$2.Comment = Comment$4;
	/**
	 * Processing instructions, including doc types.
	 */
	var ProcessingInstruction = /** @class */ (function (_super) {
	    __extends$1(ProcessingInstruction, _super);
	    function ProcessingInstruction(name, data) {
	        var _this = _super.call(this, domelementtype_1$1.ElementType.Directive, data) || this;
	        _this.name = name;
	        return _this;
	    }
	    return ProcessingInstruction;
	}(DataNode));
	node$2.ProcessingInstruction = ProcessingInstruction;
	/**
	 * A `Node` that can have children.
	 */
	var NodeWithChildren = /** @class */ (function (_super) {
	    __extends$1(NodeWithChildren, _super);
	    /**
	     * @param type Type of the node.
	     * @param children Children of the node. Only certain node types can have children.
	     */
	    function NodeWithChildren(type, children) {
	        var _this = _super.call(this, type) || this;
	        _this.children = children;
	        return _this;
	    }
	    Object.defineProperty(NodeWithChildren.prototype, "firstChild", {
	        // Aliases
	        get: function () {
	            var _a;
	            return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(NodeWithChildren.prototype, "lastChild", {
	        get: function () {
	            return this.children.length > 0
	                ? this.children[this.children.length - 1]
	                : null;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(NodeWithChildren.prototype, "childNodes", {
	        get: function () {
	            return this.children;
	        },
	        set: function (children) {
	            this.children = children;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return NodeWithChildren;
	}(Node$7));
	node$2.NodeWithChildren = NodeWithChildren;
	/**
	 * The root node of the document.
	 */
	var Document$4 = /** @class */ (function (_super) {
	    __extends$1(Document, _super);
	    function Document(children) {
	        return _super.call(this, domelementtype_1$1.ElementType.Root, children) || this;
	    }
	    return Document;
	}(NodeWithChildren));
	node$2.Document = Document$4;
	/**
	 * An element within the DOM.
	 */
	var Element$6 = /** @class */ (function (_super) {
	    __extends$1(Element, _super);
	    /**
	     * @param name Name of the tag, eg. `div`, `span`.
	     * @param attribs Object mapping attribute names to attribute values.
	     * @param children Children of the node.
	     */
	    function Element(name, attribs, children, type) {
	        if (children === void 0) { children = []; }
	        if (type === void 0) { type = name === "script"
	            ? domelementtype_1$1.ElementType.Script
	            : name === "style"
	                ? domelementtype_1$1.ElementType.Style
	                : domelementtype_1$1.ElementType.Tag; }
	        var _this = _super.call(this, type, children) || this;
	        _this.name = name;
	        _this.attribs = attribs;
	        return _this;
	    }
	    Object.defineProperty(Element.prototype, "tagName", {
	        // DOM Level 1 aliases
	        get: function () {
	            return this.name;
	        },
	        set: function (name) {
	            this.name = name;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Element.prototype, "attributes", {
	        get: function () {
	            var _this = this;
	            return Object.keys(this.attribs).map(function (name) {
	                var _a, _b;
	                return ({
	                    name: name,
	                    value: _this.attribs[name],
	                    namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
	                    prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name],
	                });
	            });
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return Element;
	}(NodeWithChildren));
	node$2.Element = Element$6;
	/**
	 * @param node Node to check.
	 * @returns `true` if the node is a `Element`, `false` otherwise.
	 */
	function isTag$1(node) {
	    return (0, domelementtype_1$1.isTag)(node);
	}
	node$2.isTag = isTag$1;
	/**
	 * @param node Node to check.
	 * @returns `true` if the node has the type `CDATA`, `false` otherwise.
	 */
	function isCDATA(node) {
	    return node.type === domelementtype_1$1.ElementType.CDATA;
	}
	node$2.isCDATA = isCDATA;
	/**
	 * @param node Node to check.
	 * @returns `true` if the node has the type `Text`, `false` otherwise.
	 */
	function isText(node) {
	    return node.type === domelementtype_1$1.ElementType.Text;
	}
	node$2.isText = isText;
	/**
	 * @param node Node to check.
	 * @returns `true` if the node has the type `Comment`, `false` otherwise.
	 */
	function isComment(node) {
	    return node.type === domelementtype_1$1.ElementType.Comment;
	}
	node$2.isComment = isComment;
	/**
	 * @param node Node to check.
	 * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.
	 */
	function isDirective(node) {
	    return node.type === domelementtype_1$1.ElementType.Directive;
	}
	node$2.isDirective = isDirective;
	/**
	 * @param node Node to check.
	 * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.
	 */
	function isDocument(node) {
	    return node.type === domelementtype_1$1.ElementType.Root;
	}
	node$2.isDocument = isDocument;
	/**
	 * @param node Node to check.
	 * @returns `true` if the node is a `NodeWithChildren` (has children), `false` otherwise.
	 */
	function hasChildren(node) {
	    return Object.prototype.hasOwnProperty.call(node, "children");
	}
	node$2.hasChildren = hasChildren;
	/**
	 * Clone a node, and optionally its children.
	 *
	 * @param recursive Clone child nodes as well.
	 * @returns A clone of the node.
	 */
	function cloneNode(node, recursive) {
	    if (recursive === void 0) { recursive = false; }
	    var result;
	    if (isText(node)) {
	        result = new Text$6(node.data);
	    }
	    else if (isComment(node)) {
	        result = new Comment$4(node.data);
	    }
	    else if (isTag$1(node)) {
	        var children = recursive ? cloneChildren(node.children) : [];
	        var clone_1 = new Element$6(node.name, __assign$1({}, node.attribs), children);
	        children.forEach(function (child) { return (child.parent = clone_1); });
	        if (node["x-attribsNamespace"]) {
	            clone_1["x-attribsNamespace"] = __assign$1({}, node["x-attribsNamespace"]);
	        }
	        if (node["x-attribsPrefix"]) {
	            clone_1["x-attribsPrefix"] = __assign$1({}, node["x-attribsPrefix"]);
	        }
	        result = clone_1;
	    }
	    else if (isCDATA(node)) {
	        var children = recursive ? cloneChildren(node.children) : [];
	        var clone_2 = new NodeWithChildren(domelementtype_1$1.ElementType.CDATA, children);
	        children.forEach(function (child) { return (child.parent = clone_2); });
	        result = clone_2;
	    }
	    else if (isDocument(node)) {
	        var children = recursive ? cloneChildren(node.children) : [];
	        var clone_3 = new Document$4(children);
	        children.forEach(function (child) { return (child.parent = clone_3); });
	        if (node["x-mode"]) {
	            clone_3["x-mode"] = node["x-mode"];
	        }
	        result = clone_3;
	    }
	    else if (isDirective(node)) {
	        var instruction = new ProcessingInstruction(node.name, node.data);
	        if (node["x-name"] != null) {
	            instruction["x-name"] = node["x-name"];
	            instruction["x-publicId"] = node["x-publicId"];
	            instruction["x-systemId"] = node["x-systemId"];
	        }
	        result = instruction;
	    }
	    else {
	        throw new Error("Not implemented yet: " + node.type);
	    }
	    result.startIndex = node.startIndex;
	    result.endIndex = node.endIndex;
	    return result;
	}
	node$2.cloneNode = cloneNode;
	function cloneChildren(childs) {
	    var children = childs.map(function (child) { return cloneNode(child, true); });
	    for (var i = 1; i < children.length; i++) {
	        children[i].prev = children[i - 1];
	        children[i - 1].next = children[i];
	    }
	    return children;
	}

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DomHandler = void 0;
	var domelementtype_1 = lib$7;
	var node_1 = node$2;
	__exportStar(node$2, exports);
	var reWhitespace = /\s+/g;
	// Default options
	var defaultOpts = {
	    normalizeWhitespace: false,
	    withStartIndices: false,
	    withEndIndices: false,
	    xmlMode: false,
	};
	var DomHandler = /** @class */ (function () {
	    /**
	     * @param callback Called once parsing has completed.
	     * @param options Settings for the handler.
	     * @param elementCB Callback whenever a tag is closed.
	     */
	    function DomHandler(callback, options, elementCB) {
	        /** The elements of the DOM */
	        this.dom = [];
	        /** The root element for the DOM */
	        this.root = new node_1.Document(this.dom);
	        /** Indicated whether parsing has been completed. */
	        this.done = false;
	        /** Stack of open tags. */
	        this.tagStack = [this.root];
	        /** A data node that is still being written to. */
	        this.lastNode = null;
	        /** Reference to the parser instance. Used for location information. */
	        this.parser = null;
	        // Make it possible to skip arguments, for backwards-compatibility
	        if (typeof options === "function") {
	            elementCB = options;
	            options = defaultOpts;
	        }
	        if (typeof callback === "object") {
	            options = callback;
	            callback = undefined;
	        }
	        this.callback = callback !== null && callback !== void 0 ? callback : null;
	        this.options = options !== null && options !== void 0 ? options : defaultOpts;
	        this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
	    }
	    DomHandler.prototype.onparserinit = function (parser) {
	        this.parser = parser;
	    };
	    // Resets the handler back to starting state
	    DomHandler.prototype.onreset = function () {
	        this.dom = [];
	        this.root = new node_1.Document(this.dom);
	        this.done = false;
	        this.tagStack = [this.root];
	        this.lastNode = null;
	        this.parser = null;
	    };
	    // Signals the handler that parsing is done
	    DomHandler.prototype.onend = function () {
	        if (this.done)
	            return;
	        this.done = true;
	        this.parser = null;
	        this.handleCallback(null);
	    };
	    DomHandler.prototype.onerror = function (error) {
	        this.handleCallback(error);
	    };
	    DomHandler.prototype.onclosetag = function () {
	        this.lastNode = null;
	        var elem = this.tagStack.pop();
	        if (this.options.withEndIndices) {
	            elem.endIndex = this.parser.endIndex;
	        }
	        if (this.elementCB)
	            this.elementCB(elem);
	    };
	    DomHandler.prototype.onopentag = function (name, attribs) {
	        var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : undefined;
	        var element = new node_1.Element(name, attribs, undefined, type);
	        this.addNode(element);
	        this.tagStack.push(element);
	    };
	    DomHandler.prototype.ontext = function (data) {
	        var normalizeWhitespace = this.options.normalizeWhitespace;
	        var lastNode = this.lastNode;
	        if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {
	            if (normalizeWhitespace) {
	                lastNode.data = (lastNode.data + data).replace(reWhitespace, " ");
	            }
	            else {
	                lastNode.data += data;
	            }
	            if (this.options.withEndIndices) {
	                lastNode.endIndex = this.parser.endIndex;
	            }
	        }
	        else {
	            if (normalizeWhitespace) {
	                data = data.replace(reWhitespace, " ");
	            }
	            var node = new node_1.Text(data);
	            this.addNode(node);
	            this.lastNode = node;
	        }
	    };
	    DomHandler.prototype.oncomment = function (data) {
	        if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {
	            this.lastNode.data += data;
	            return;
	        }
	        var node = new node_1.Comment(data);
	        this.addNode(node);
	        this.lastNode = node;
	    };
	    DomHandler.prototype.oncommentend = function () {
	        this.lastNode = null;
	    };
	    DomHandler.prototype.oncdatastart = function () {
	        var text = new node_1.Text("");
	        var node = new node_1.NodeWithChildren(domelementtype_1.ElementType.CDATA, [text]);
	        this.addNode(node);
	        text.parent = node;
	        this.lastNode = text;
	    };
	    DomHandler.prototype.oncdataend = function () {
	        this.lastNode = null;
	    };
	    DomHandler.prototype.onprocessinginstruction = function (name, data) {
	        var node = new node_1.ProcessingInstruction(name, data);
	        this.addNode(node);
	    };
	    DomHandler.prototype.handleCallback = function (error) {
	        if (typeof this.callback === "function") {
	            this.callback(error, this.dom);
	        }
	        else if (error) {
	            throw error;
	        }
	    };
	    DomHandler.prototype.addNode = function (node) {
	        var parent = this.tagStack[this.tagStack.length - 1];
	        var previousSibling = parent.children[parent.children.length - 1];
	        if (this.options.withStartIndices) {
	            node.startIndex = this.parser.startIndex;
	        }
	        if (this.options.withEndIndices) {
	            node.endIndex = this.parser.endIndex;
	        }
	        parent.children.push(node);
	        if (previousSibling) {
	            node.prev = previousSibling;
	            previousSibling.next = node;
	        }
	        node.parent = parent;
	        this.lastNode = null;
	    };
	    return DomHandler;
	}());
	exports.DomHandler = DomHandler;
	exports.default = DomHandler;
	}(lib$8));

	var FeedHandler$1 = {};

	var lib$6 = {};

	var stringify$2 = {};

	var lib$5 = {};

	var lib$4 = {};

	var decode = {};

	var __importDefault$4 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(decode, "__esModule", { value: true });
	decode.decodeHTML = decode.decodeHTMLStrict = decode.decodeXML = void 0;
	var entities_json_1$1 = __importDefault$4(require$$1$2);
	var legacy_json_1 = __importDefault$4(require$$1$1);
	var xml_json_1$1 = __importDefault$4(require$$0);
	var decode_codepoint_1 = __importDefault$4(decode_codepoint);
	var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
	decode.decodeXML = getStrictDecoder(xml_json_1$1.default);
	decode.decodeHTMLStrict = getStrictDecoder(entities_json_1$1.default);
	function getStrictDecoder(map) {
	    var replace = getReplacer(map);
	    return function (str) { return String(str).replace(strictEntityRe, replace); };
	}
	var sorter = function (a, b) { return (a < b ? 1 : -1); };
	decode.decodeHTML = (function () {
	    var legacy = Object.keys(legacy_json_1.default).sort(sorter);
	    var keys = Object.keys(entities_json_1$1.default).sort(sorter);
	    for (var i = 0, j = 0; i < keys.length; i++) {
	        if (legacy[j] === keys[i]) {
	            keys[i] += ";?";
	            j++;
	        }
	        else {
	            keys[i] += ";";
	        }
	    }
	    var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
	    var replace = getReplacer(entities_json_1$1.default);
	    function replacer(str) {
	        if (str.substr(-1) !== ";")
	            str += ";";
	        return replace(str);
	    }
	    // TODO consider creating a merged map
	    return function (str) { return String(str).replace(re, replacer); };
	})();
	function getReplacer(map) {
	    return function replace(str) {
	        if (str.charAt(1) === "#") {
	            var secondChar = str.charAt(2);
	            if (secondChar === "X" || secondChar === "x") {
	                return decode_codepoint_1.default(parseInt(str.substr(3), 16));
	            }
	            return decode_codepoint_1.default(parseInt(str.substr(2), 10));
	        }
	        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
	        return map[str.slice(1, -1)] || str;
	    };
	}

	var encode = {};

	var __importDefault$3 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(encode, "__esModule", { value: true });
	encode.escapeUTF8 = encode.escape = encode.encodeNonAsciiHTML = encode.encodeHTML = encode.encodeXML = void 0;
	var xml_json_1 = __importDefault$3(require$$0);
	var inverseXML = getInverseObj(xml_json_1.default);
	var xmlReplacer = getInverseReplacer(inverseXML);
	/**
	 * Encodes all non-ASCII characters, as well as characters not valid in XML
	 * documents using XML entities.
	 *
	 * If a character has no equivalent entity, a
	 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
	 */
	encode.encodeXML = getASCIIEncoder(inverseXML);
	var entities_json_1 = __importDefault$3(require$$1$2);
	var inverseHTML = getInverseObj(entities_json_1.default);
	var htmlReplacer = getInverseReplacer(inverseHTML);
	/**
	 * Encodes all entities and non-ASCII characters in the input.
	 *
	 * This includes characters that are valid ASCII characters in HTML documents.
	 * For example `#` will be encoded as `&num;`. To get a more compact output,
	 * consider using the `encodeNonAsciiHTML` function.
	 *
	 * If a character has no equivalent entity, a
	 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
	 */
	encode.encodeHTML = getInverse(inverseHTML, htmlReplacer);
	/**
	 * Encodes all non-ASCII characters, as well as characters not valid in HTML
	 * documents using HTML entities.
	 *
	 * If a character has no equivalent entity, a
	 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
	 */
	encode.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
	function getInverseObj(obj) {
	    return Object.keys(obj)
	        .sort()
	        .reduce(function (inverse, name) {
	        inverse[obj[name]] = "&" + name + ";";
	        return inverse;
	    }, {});
	}
	function getInverseReplacer(inverse) {
	    var single = [];
	    var multiple = [];
	    for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
	        var k = _a[_i];
	        if (k.length === 1) {
	            // Add value to single array
	            single.push("\\" + k);
	        }
	        else {
	            // Add value to multiple array
	            multiple.push(k);
	        }
	    }
	    // Add ranges to single characters.
	    single.sort();
	    for (var start = 0; start < single.length - 1; start++) {
	        // Find the end of a run of characters
	        var end = start;
	        while (end < single.length - 1 &&
	            single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
	            end += 1;
	        }
	        var count = 1 + end - start;
	        // We want to replace at least three characters
	        if (count < 3)
	            continue;
	        single.splice(start, count, single[start] + "-" + single[end]);
	    }
	    multiple.unshift("[" + single.join("") + "]");
	    return new RegExp(multiple.join("|"), "g");
	}
	// /[^\0-\x7F]/gu
	var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
	var getCodePoint = 
	// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
	String.prototype.codePointAt != null
	    ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	        function (str) { return str.codePointAt(0); }
	    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	        function (c) {
	            return (c.charCodeAt(0) - 0xd800) * 0x400 +
	                c.charCodeAt(1) -
	                0xdc00 +
	                0x10000;
	        };
	function singleCharReplacer(c) {
	    return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0))
	        .toString(16)
	        .toUpperCase() + ";";
	}
	function getInverse(inverse, re) {
	    return function (data) {
	        return data
	            .replace(re, function (name) { return inverse[name]; })
	            .replace(reNonASCII, singleCharReplacer);
	    };
	}
	var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
	/**
	 * Encodes all non-ASCII characters, as well as characters not valid in XML
	 * documents using numeric hexadecimal reference (eg. `&#xfc;`).
	 *
	 * Have a look at `escapeUTF8` if you want a more concise output at the expense
	 * of reduced transportability.
	 *
	 * @param data String to escape.
	 */
	function escape$3(data) {
	    return data.replace(reEscapeChars, singleCharReplacer);
	}
	encode.escape = escape$3;
	/**
	 * Encodes all characters not valid in XML documents using numeric hexadecimal
	 * reference (eg. `&#xfc;`).
	 *
	 * Note that the output will be character-set dependent.
	 *
	 * @param data String to escape.
	 */
	function escapeUTF8(data) {
	    return data.replace(xmlReplacer, singleCharReplacer);
	}
	encode.escapeUTF8 = escapeUTF8;
	function getASCIIEncoder(obj) {
	    return function (data) {
	        return data.replace(reEscapeChars, function (c) { return obj[c] || singleCharReplacer(c); });
	    };
	}

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
	var decode_1 = decode;
	var encode_1 = encode;
	/**
	 * Decodes a string with entities.
	 *
	 * @param data String to decode.
	 * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
	 * @deprecated Use `decodeXML` or `decodeHTML` directly.
	 */
	function decode$1(data, level) {
	    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
	}
	exports.decode = decode$1;
	/**
	 * Decodes a string with entities. Does not allow missing trailing semicolons for entities.
	 *
	 * @param data String to decode.
	 * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
	 * @deprecated Use `decodeHTMLStrict` or `decodeXML` directly.
	 */
	function decodeStrict(data, level) {
	    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
	}
	exports.decodeStrict = decodeStrict;
	/**
	 * Encodes a string with entities.
	 *
	 * @param data String to encode.
	 * @param level Optional level to encode at. 0 = XML, 1 = HTML. Default is 0.
	 * @deprecated Use `encodeHTML`, `encodeXML` or `encodeNonAsciiHTML` directly.
	 */
	function encode$1(data, level) {
	    return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
	}
	exports.encode = encode$1;
	var encode_2 = encode;
	Object.defineProperty(exports, "encodeXML", { enumerable: true, get: function () { return encode_2.encodeXML; } });
	Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
	Object.defineProperty(exports, "encodeNonAsciiHTML", { enumerable: true, get: function () { return encode_2.encodeNonAsciiHTML; } });
	Object.defineProperty(exports, "escape", { enumerable: true, get: function () { return encode_2.escape; } });
	Object.defineProperty(exports, "escapeUTF8", { enumerable: true, get: function () { return encode_2.escapeUTF8; } });
	// Legacy aliases (deprecated)
	Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
	Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
	var decode_2 = decode;
	Object.defineProperty(exports, "decodeXML", { enumerable: true, get: function () { return decode_2.decodeXML; } });
	Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
	Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
	// Legacy aliases (deprecated)
	Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
	Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
	Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
	Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
	Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: function () { return decode_2.decodeXML; } });
	}(lib$4));

	var foreignNames = {};

	Object.defineProperty(foreignNames, "__esModule", { value: true });
	foreignNames.attributeNames = foreignNames.elementNames = void 0;
	foreignNames.elementNames = new Map([
	    ["altglyph", "altGlyph"],
	    ["altglyphdef", "altGlyphDef"],
	    ["altglyphitem", "altGlyphItem"],
	    ["animatecolor", "animateColor"],
	    ["animatemotion", "animateMotion"],
	    ["animatetransform", "animateTransform"],
	    ["clippath", "clipPath"],
	    ["feblend", "feBlend"],
	    ["fecolormatrix", "feColorMatrix"],
	    ["fecomponenttransfer", "feComponentTransfer"],
	    ["fecomposite", "feComposite"],
	    ["feconvolvematrix", "feConvolveMatrix"],
	    ["fediffuselighting", "feDiffuseLighting"],
	    ["fedisplacementmap", "feDisplacementMap"],
	    ["fedistantlight", "feDistantLight"],
	    ["fedropshadow", "feDropShadow"],
	    ["feflood", "feFlood"],
	    ["fefunca", "feFuncA"],
	    ["fefuncb", "feFuncB"],
	    ["fefuncg", "feFuncG"],
	    ["fefuncr", "feFuncR"],
	    ["fegaussianblur", "feGaussianBlur"],
	    ["feimage", "feImage"],
	    ["femerge", "feMerge"],
	    ["femergenode", "feMergeNode"],
	    ["femorphology", "feMorphology"],
	    ["feoffset", "feOffset"],
	    ["fepointlight", "fePointLight"],
	    ["fespecularlighting", "feSpecularLighting"],
	    ["fespotlight", "feSpotLight"],
	    ["fetile", "feTile"],
	    ["feturbulence", "feTurbulence"],
	    ["foreignobject", "foreignObject"],
	    ["glyphref", "glyphRef"],
	    ["lineargradient", "linearGradient"],
	    ["radialgradient", "radialGradient"],
	    ["textpath", "textPath"],
	]);
	foreignNames.attributeNames = new Map([
	    ["definitionurl", "definitionURL"],
	    ["attributename", "attributeName"],
	    ["attributetype", "attributeType"],
	    ["basefrequency", "baseFrequency"],
	    ["baseprofile", "baseProfile"],
	    ["calcmode", "calcMode"],
	    ["clippathunits", "clipPathUnits"],
	    ["diffuseconstant", "diffuseConstant"],
	    ["edgemode", "edgeMode"],
	    ["filterunits", "filterUnits"],
	    ["glyphref", "glyphRef"],
	    ["gradienttransform", "gradientTransform"],
	    ["gradientunits", "gradientUnits"],
	    ["kernelmatrix", "kernelMatrix"],
	    ["kernelunitlength", "kernelUnitLength"],
	    ["keypoints", "keyPoints"],
	    ["keysplines", "keySplines"],
	    ["keytimes", "keyTimes"],
	    ["lengthadjust", "lengthAdjust"],
	    ["limitingconeangle", "limitingConeAngle"],
	    ["markerheight", "markerHeight"],
	    ["markerunits", "markerUnits"],
	    ["markerwidth", "markerWidth"],
	    ["maskcontentunits", "maskContentUnits"],
	    ["maskunits", "maskUnits"],
	    ["numoctaves", "numOctaves"],
	    ["pathlength", "pathLength"],
	    ["patterncontentunits", "patternContentUnits"],
	    ["patterntransform", "patternTransform"],
	    ["patternunits", "patternUnits"],
	    ["pointsatx", "pointsAtX"],
	    ["pointsaty", "pointsAtY"],
	    ["pointsatz", "pointsAtZ"],
	    ["preservealpha", "preserveAlpha"],
	    ["preserveaspectratio", "preserveAspectRatio"],
	    ["primitiveunits", "primitiveUnits"],
	    ["refx", "refX"],
	    ["refy", "refY"],
	    ["repeatcount", "repeatCount"],
	    ["repeatdur", "repeatDur"],
	    ["requiredextensions", "requiredExtensions"],
	    ["requiredfeatures", "requiredFeatures"],
	    ["specularconstant", "specularConstant"],
	    ["specularexponent", "specularExponent"],
	    ["spreadmethod", "spreadMethod"],
	    ["startoffset", "startOffset"],
	    ["stddeviation", "stdDeviation"],
	    ["stitchtiles", "stitchTiles"],
	    ["surfacescale", "surfaceScale"],
	    ["systemlanguage", "systemLanguage"],
	    ["tablevalues", "tableValues"],
	    ["targetx", "targetX"],
	    ["targety", "targetY"],
	    ["textlength", "textLength"],
	    ["viewbox", "viewBox"],
	    ["viewtarget", "viewTarget"],
	    ["xchannelselector", "xChannelSelector"],
	    ["ychannelselector", "yChannelSelector"],
	    ["zoomandpan", "zoomAndPan"],
	]);

	var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};
	var __createBinding$1 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$1 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$1 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
	    __setModuleDefault$1(result, mod);
	    return result;
	};
	Object.defineProperty(lib$5, "__esModule", { value: true });
	/*
	 * Module dependencies
	 */
	var ElementType = __importStar$1(lib$7);
	var entities_1 = lib$4;
	/**
	 * Mixed-case SVG and MathML tags & attributes
	 * recognized by the HTML parser.
	 *
	 * @see https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign
	 */
	var foreignNames_1 = foreignNames;
	var unencodedElements = new Set([
	    "style",
	    "script",
	    "xmp",
	    "iframe",
	    "noembed",
	    "noframes",
	    "plaintext",
	    "noscript",
	]);
	/**
	 * Format attributes
	 */
	function formatAttributes(attributes, opts) {
	    if (!attributes)
	        return;
	    return Object.keys(attributes)
	        .map(function (key) {
	        var _a, _b;
	        var value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : "";
	        if (opts.xmlMode === "foreign") {
	            /* Fix up mixed-case attribute names */
	            key = (_b = foreignNames_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;
	        }
	        if (!opts.emptyAttrs && !opts.xmlMode && value === "") {
	            return key;
	        }
	        return key + "=\"" + (opts.decodeEntities !== false
	            ? entities_1.encodeXML(value)
	            : value.replace(/"/g, "&quot;")) + "\"";
	    })
	        .join(" ");
	}
	/**
	 * Self-enclosing tags
	 */
	var singleTag = new Set([
	    "area",
	    "base",
	    "basefont",
	    "br",
	    "col",
	    "command",
	    "embed",
	    "frame",
	    "hr",
	    "img",
	    "input",
	    "isindex",
	    "keygen",
	    "link",
	    "meta",
	    "param",
	    "source",
	    "track",
	    "wbr",
	]);
	/**
	 * Renders a DOM node or an array of DOM nodes to a string.
	 *
	 * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).
	 *
	 * @param node Node to be rendered.
	 * @param options Changes serialization behavior
	 */
	function render$1(node, options) {
	    if (options === void 0) { options = {}; }
	    var nodes = "length" in node ? node : [node];
	    var output = "";
	    for (var i = 0; i < nodes.length; i++) {
	        output += renderNode(nodes[i], options);
	    }
	    return output;
	}
	lib$5.default = render$1;
	function renderNode(node, options) {
	    switch (node.type) {
	        case ElementType.Root:
	            return render$1(node.children, options);
	        case ElementType.Directive:
	        case ElementType.Doctype:
	            return renderDirective(node);
	        case ElementType.Comment:
	            return renderComment(node);
	        case ElementType.CDATA:
	            return renderCdata(node);
	        case ElementType.Script:
	        case ElementType.Style:
	        case ElementType.Tag:
	            return renderTag(node, options);
	        case ElementType.Text:
	            return renderText(node, options);
	    }
	}
	var foreignModeIntegrationPoints = new Set([
	    "mi",
	    "mo",
	    "mn",
	    "ms",
	    "mtext",
	    "annotation-xml",
	    "foreignObject",
	    "desc",
	    "title",
	]);
	var foreignElements = new Set(["svg", "math"]);
	function renderTag(elem, opts) {
	    var _a;
	    // Handle SVG / MathML in HTML
	    if (opts.xmlMode === "foreign") {
	        /* Fix up mixed-case element names */
	        elem.name = (_a = foreignNames_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;
	        /* Exit foreign mode at integration points */
	        if (elem.parent &&
	            foreignModeIntegrationPoints.has(elem.parent.name)) {
	            opts = __assign(__assign({}, opts), { xmlMode: false });
	        }
	    }
	    if (!opts.xmlMode && foreignElements.has(elem.name)) {
	        opts = __assign(__assign({}, opts), { xmlMode: "foreign" });
	    }
	    var tag = "<" + elem.name;
	    var attribs = formatAttributes(elem.attribs, opts);
	    if (attribs) {
	        tag += " " + attribs;
	    }
	    if (elem.children.length === 0 &&
	        (opts.xmlMode
	            ? // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags
	                opts.selfClosingTags !== false
	            : // User explicitly asked for self-closing tags, even in HTML mode
	                opts.selfClosingTags && singleTag.has(elem.name))) {
	        if (!opts.xmlMode)
	            tag += " ";
	        tag += "/>";
	    }
	    else {
	        tag += ">";
	        if (elem.children.length > 0) {
	            tag += render$1(elem.children, opts);
	        }
	        if (opts.xmlMode || !singleTag.has(elem.name)) {
	            tag += "</" + elem.name + ">";
	        }
	    }
	    return tag;
	}
	function renderDirective(elem) {
	    return "<" + elem.data + ">";
	}
	function renderText(elem, opts) {
	    var data = elem.data || "";
	    // If entities weren't decoded, no need to encode them back
	    if (opts.decodeEntities !== false &&
	        !(!opts.xmlMode &&
	            elem.parent &&
	            unencodedElements.has(elem.parent.name))) {
	        data = entities_1.encodeXML(data);
	    }
	    return data;
	}
	function renderCdata(elem) {
	    return "<![CDATA[" + elem.children[0].data + "]]>";
	}
	function renderComment(elem) {
	    return "<!--" + elem.data + "-->";
	}

	var __importDefault$2 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(stringify$2, "__esModule", { value: true });
	stringify$2.innerText = stringify$2.textContent = stringify$2.getText = stringify$2.getInnerHTML = stringify$2.getOuterHTML = void 0;
	var domhandler_1$5 = lib$8;
	var dom_serializer_1 = __importDefault$2(lib$5);
	var domelementtype_1 = lib$7;
	/**
	 * @param node Node to get the outer HTML of.
	 * @param options Options for serialization.
	 * @deprecated Use the `dom-serializer` module directly.
	 * @returns `node`'s outer HTML.
	 */
	function getOuterHTML(node, options) {
	    return (0, dom_serializer_1.default)(node, options);
	}
	stringify$2.getOuterHTML = getOuterHTML;
	/**
	 * @param node Node to get the inner HTML of.
	 * @param options Options for serialization.
	 * @deprecated Use the `dom-serializer` module directly.
	 * @returns `node`'s inner HTML.
	 */
	function getInnerHTML(node, options) {
	    return (0, domhandler_1$5.hasChildren)(node)
	        ? node.children.map(function (node) { return getOuterHTML(node, options); }).join("")
	        : "";
	}
	stringify$2.getInnerHTML = getInnerHTML;
	/**
	 * Get a node's inner text. Same as `textContent`, but inserts newlines for `<br>` tags.
	 *
	 * @deprecated Use `textContent` instead.
	 * @param node Node to get the inner text of.
	 * @returns `node`'s inner text.
	 */
	function getText$1(node) {
	    if (Array.isArray(node))
	        return node.map(getText$1).join("");
	    if ((0, domhandler_1$5.isTag)(node))
	        return node.name === "br" ? "\n" : getText$1(node.children);
	    if ((0, domhandler_1$5.isCDATA)(node))
	        return getText$1(node.children);
	    if ((0, domhandler_1$5.isText)(node))
	        return node.data;
	    return "";
	}
	stringify$2.getText = getText$1;
	/**
	 * Get a node's text content.
	 *
	 * @param node Node to get the text content of.
	 * @returns `node`'s text content.
	 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent}
	 */
	function textContent(node) {
	    if (Array.isArray(node))
	        return node.map(textContent).join("");
	    if ((0, domhandler_1$5.hasChildren)(node) && !(0, domhandler_1$5.isComment)(node)) {
	        return textContent(node.children);
	    }
	    if ((0, domhandler_1$5.isText)(node))
	        return node.data;
	    return "";
	}
	stringify$2.textContent = textContent;
	/**
	 * Get a node's inner text.
	 *
	 * @param node Node to get the inner text of.
	 * @returns `node`'s inner text.
	 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText}
	 */
	function innerText(node) {
	    if (Array.isArray(node))
	        return node.map(innerText).join("");
	    if ((0, domhandler_1$5.hasChildren)(node) && (node.type === domelementtype_1.ElementType.Tag || (0, domhandler_1$5.isCDATA)(node))) {
	        return innerText(node.children);
	    }
	    if ((0, domhandler_1$5.isText)(node))
	        return node.data;
	    return "";
	}
	stringify$2.innerText = innerText;

	var traversal = {};

	Object.defineProperty(traversal, "__esModule", { value: true });
	traversal.prevElementSibling = traversal.nextElementSibling = traversal.getName = traversal.hasAttrib = traversal.getAttributeValue = traversal.getSiblings = traversal.getParent = traversal.getChildren = void 0;
	var domhandler_1$4 = lib$8;
	var emptyArray = [];
	/**
	 * Get a node's children.
	 *
	 * @param elem Node to get the children of.
	 * @returns `elem`'s children, or an empty array.
	 */
	function getChildren$1(elem) {
	    var _a;
	    return (_a = elem.children) !== null && _a !== void 0 ? _a : emptyArray;
	}
	traversal.getChildren = getChildren$1;
	/**
	 * Get a node's parent.
	 *
	 * @param elem Node to get the parent of.
	 * @returns `elem`'s parent node.
	 */
	function getParent$1(elem) {
	    return elem.parent || null;
	}
	traversal.getParent = getParent$1;
	/**
	 * Gets an elements siblings, including the element itself.
	 *
	 * Attempts to get the children through the element's parent first.
	 * If we don't have a parent (the element is a root node),
	 * we walk the element's `prev` & `next` to get all remaining nodes.
	 *
	 * @param elem Element to get the siblings of.
	 * @returns `elem`'s siblings.
	 */
	function getSiblings$1(elem) {
	    var _a, _b;
	    var parent = getParent$1(elem);
	    if (parent != null)
	        return getChildren$1(parent);
	    var siblings = [elem];
	    var prev = elem.prev, next = elem.next;
	    while (prev != null) {
	        siblings.unshift(prev);
	        (_a = prev, prev = _a.prev);
	    }
	    while (next != null) {
	        siblings.push(next);
	        (_b = next, next = _b.next);
	    }
	    return siblings;
	}
	traversal.getSiblings = getSiblings$1;
	/**
	 * Gets an attribute from an element.
	 *
	 * @param elem Element to check.
	 * @param name Attribute name to retrieve.
	 * @returns The element's attribute value, or `undefined`.
	 */
	function getAttributeValue$1(elem, name) {
	    var _a;
	    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
	}
	traversal.getAttributeValue = getAttributeValue$1;
	/**
	 * Checks whether an element has an attribute.
	 *
	 * @param elem Element to check.
	 * @param name Attribute name to look for.
	 * @returns Returns whether `elem` has the attribute `name`.
	 */
	function hasAttrib$1(elem, name) {
	    return (elem.attribs != null &&
	        Object.prototype.hasOwnProperty.call(elem.attribs, name) &&
	        elem.attribs[name] != null);
	}
	traversal.hasAttrib = hasAttrib$1;
	/**
	 * Get the tag name of an element.
	 *
	 * @param elem The element to get the name for.
	 * @returns The tag name of `elem`.
	 */
	function getName$2(elem) {
	    return elem.name;
	}
	traversal.getName = getName$2;
	/**
	 * Returns the next element sibling of a node.
	 *
	 * @param elem The element to get the next sibling of.
	 * @returns `elem`'s next sibling that is a tag.
	 */
	function nextElementSibling$4(elem) {
	    var _a;
	    var next = elem.next;
	    while (next !== null && !(0, domhandler_1$4.isTag)(next))
	        (_a = next, next = _a.next);
	    return next;
	}
	traversal.nextElementSibling = nextElementSibling$4;
	/**
	 * Returns the previous element sibling of a node.
	 *
	 * @param elem The element to get the previous sibling of.
	 * @returns `elem`'s previous sibling that is a tag.
	 */
	function prevElementSibling(elem) {
	    var _a;
	    var prev = elem.prev;
	    while (prev !== null && !(0, domhandler_1$4.isTag)(prev))
	        (_a = prev, prev = _a.prev);
	    return prev;
	}
	traversal.prevElementSibling = prevElementSibling;

	var manipulation = {};

	Object.defineProperty(manipulation, "__esModule", { value: true });
	manipulation.prepend = manipulation.prependChild = manipulation.append = manipulation.appendChild = manipulation.replaceElement = manipulation.removeElement = void 0;
	/**
	 * Remove an element from the dom
	 *
	 * @param elem The element to be removed
	 */
	function removeElement(elem) {
	    if (elem.prev)
	        elem.prev.next = elem.next;
	    if (elem.next)
	        elem.next.prev = elem.prev;
	    if (elem.parent) {
	        var childs = elem.parent.children;
	        childs.splice(childs.lastIndexOf(elem), 1);
	    }
	}
	manipulation.removeElement = removeElement;
	/**
	 * Replace an element in the dom
	 *
	 * @param elem The element to be replaced
	 * @param replacement The element to be added
	 */
	function replaceElement(elem, replacement) {
	    var prev = (replacement.prev = elem.prev);
	    if (prev) {
	        prev.next = replacement;
	    }
	    var next = (replacement.next = elem.next);
	    if (next) {
	        next.prev = replacement;
	    }
	    var parent = (replacement.parent = elem.parent);
	    if (parent) {
	        var childs = parent.children;
	        childs[childs.lastIndexOf(elem)] = replacement;
	    }
	}
	manipulation.replaceElement = replaceElement;
	/**
	 * Append a child to an element.
	 *
	 * @param elem The element to append to.
	 * @param child The element to be added as a child.
	 */
	function appendChild(elem, child) {
	    removeElement(child);
	    child.next = null;
	    child.parent = elem;
	    if (elem.children.push(child) > 1) {
	        var sibling = elem.children[elem.children.length - 2];
	        sibling.next = child;
	        child.prev = sibling;
	    }
	    else {
	        child.prev = null;
	    }
	}
	manipulation.appendChild = appendChild;
	/**
	 * Append an element after another.
	 *
	 * @param elem The element to append after.
	 * @param next The element be added.
	 */
	function append$2(elem, next) {
	    removeElement(next);
	    var parent = elem.parent;
	    var currNext = elem.next;
	    next.next = currNext;
	    next.prev = elem;
	    elem.next = next;
	    next.parent = parent;
	    if (currNext) {
	        currNext.prev = next;
	        if (parent) {
	            var childs = parent.children;
	            childs.splice(childs.lastIndexOf(currNext), 0, next);
	        }
	    }
	    else if (parent) {
	        parent.children.push(next);
	    }
	}
	manipulation.append = append$2;
	/**
	 * Prepend a child to an element.
	 *
	 * @param elem The element to prepend before.
	 * @param child The element to be added as a child.
	 */
	function prependChild(elem, child) {
	    removeElement(child);
	    child.parent = elem;
	    child.prev = null;
	    if (elem.children.unshift(child) !== 1) {
	        var sibling = elem.children[1];
	        sibling.prev = child;
	        child.next = sibling;
	    }
	    else {
	        child.next = null;
	    }
	}
	manipulation.prependChild = prependChild;
	/**
	 * Prepend an element before another.
	 *
	 * @param elem The element to prepend before.
	 * @param prev The element be added.
	 */
	function prepend(elem, prev) {
	    removeElement(prev);
	    var parent = elem.parent;
	    if (parent) {
	        var childs = parent.children;
	        childs.splice(childs.indexOf(elem), 0, prev);
	    }
	    if (elem.prev) {
	        elem.prev.next = prev;
	    }
	    prev.parent = parent;
	    prev.prev = elem.prev;
	    prev.next = elem;
	    elem.prev = prev;
	}
	manipulation.prepend = prepend;

	var querying = {};

	Object.defineProperty(querying, "__esModule", { value: true });
	querying.findAll = querying.existsOne = querying.findOne = querying.findOneChild = querying.find = querying.filter = void 0;
	var domhandler_1$3 = lib$8;
	/**
	 * Search a node and its children for nodes passing a test function.
	 *
	 * @param test Function to test nodes on.
	 * @param node Node to search. Will be included in the result set if it matches.
	 * @param recurse Also consider child nodes.
	 * @param limit Maximum number of nodes to return.
	 * @returns All nodes passing `test`.
	 */
	function filter(test, node, recurse, limit) {
	    if (recurse === void 0) { recurse = true; }
	    if (limit === void 0) { limit = Infinity; }
	    if (!Array.isArray(node))
	        node = [node];
	    return find(test, node, recurse, limit);
	}
	querying.filter = filter;
	/**
	 * Search an array of node and its children for nodes passing a test function.
	 *
	 * @param test Function to test nodes on.
	 * @param nodes Array of nodes to search.
	 * @param recurse Also consider child nodes.
	 * @param limit Maximum number of nodes to return.
	 * @returns All nodes passing `test`.
	 */
	function find(test, nodes, recurse, limit) {
	    var result = [];
	    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
	        var elem = nodes_1[_i];
	        if (test(elem)) {
	            result.push(elem);
	            if (--limit <= 0)
	                break;
	        }
	        if (recurse && (0, domhandler_1$3.hasChildren)(elem) && elem.children.length > 0) {
	            var children = find(test, elem.children, recurse, limit);
	            result.push.apply(result, children);
	            limit -= children.length;
	            if (limit <= 0)
	                break;
	        }
	    }
	    return result;
	}
	querying.find = find;
	/**
	 * Finds the first element inside of an array that matches a test function.
	 *
	 * @param test Function to test nodes on.
	 * @param nodes Array of nodes to search.
	 * @returns The first node in the array that passes `test`.
	 */
	function findOneChild(test, nodes) {
	    return nodes.find(test);
	}
	querying.findOneChild = findOneChild;
	/**
	 * Finds one element in a tree that passes a test.
	 *
	 * @param test Function to test nodes on.
	 * @param nodes Array of nodes to search.
	 * @param recurse Also consider child nodes.
	 * @returns The first child node that passes `test`.
	 */
	function findOne$1(test, nodes, recurse) {
	    if (recurse === void 0) { recurse = true; }
	    var elem = null;
	    for (var i = 0; i < nodes.length && !elem; i++) {
	        var checked = nodes[i];
	        if (!(0, domhandler_1$3.isTag)(checked)) {
	            continue;
	        }
	        else if (test(checked)) {
	            elem = checked;
	        }
	        else if (recurse && checked.children.length > 0) {
	            elem = findOne$1(test, checked.children);
	        }
	    }
	    return elem;
	}
	querying.findOne = findOne$1;
	/**
	 * @param test Function to test nodes on.
	 * @param nodes Array of nodes to search.
	 * @returns Whether a tree of nodes contains at least one node passing a test.
	 */
	function existsOne$1(test, nodes) {
	    return nodes.some(function (checked) {
	        return (0, domhandler_1$3.isTag)(checked) &&
	            (test(checked) ||
	                (checked.children.length > 0 &&
	                    existsOne$1(test, checked.children)));
	    });
	}
	querying.existsOne = existsOne$1;
	/**
	 * Search and array of nodes and its children for nodes passing a test function.
	 *
	 * Same as `find`, only with less options, leading to reduced complexity.
	 *
	 * @param test Function to test nodes on.
	 * @param nodes Array of nodes to search.
	 * @returns All nodes passing `test`.
	 */
	function findAll$1(test, nodes) {
	    var _a;
	    var result = [];
	    var stack = nodes.filter(domhandler_1$3.isTag);
	    var elem;
	    while ((elem = stack.shift())) {
	        var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(domhandler_1$3.isTag);
	        if (children && children.length > 0) {
	            stack.unshift.apply(stack, children);
	        }
	        if (test(elem))
	            result.push(elem);
	    }
	    return result;
	}
	querying.findAll = findAll$1;

	var legacy = {};

	Object.defineProperty(legacy, "__esModule", { value: true });
	legacy.getElementsByTagType = legacy.getElementsByTagName = legacy.getElementById = legacy.getElements = legacy.testElement = void 0;
	var domhandler_1$2 = lib$8;
	var querying_1 = querying;
	var Checks = {
	    tag_name: function (name) {
	        if (typeof name === "function") {
	            return function (elem) { return (0, domhandler_1$2.isTag)(elem) && name(elem.name); };
	        }
	        else if (name === "*") {
	            return domhandler_1$2.isTag;
	        }
	        return function (elem) { return (0, domhandler_1$2.isTag)(elem) && elem.name === name; };
	    },
	    tag_type: function (type) {
	        if (typeof type === "function") {
	            return function (elem) { return type(elem.type); };
	        }
	        return function (elem) { return elem.type === type; };
	    },
	    tag_contains: function (data) {
	        if (typeof data === "function") {
	            return function (elem) { return (0, domhandler_1$2.isText)(elem) && data(elem.data); };
	        }
	        return function (elem) { return (0, domhandler_1$2.isText)(elem) && elem.data === data; };
	    },
	};
	/**
	 * @param attrib Attribute to check.
	 * @param value Attribute value to look for.
	 * @returns A function to check whether the a node has an attribute with a particular value.
	 */
	function getAttribCheck(attrib, value) {
	    if (typeof value === "function") {
	        return function (elem) { return (0, domhandler_1$2.isTag)(elem) && value(elem.attribs[attrib]); };
	    }
	    return function (elem) { return (0, domhandler_1$2.isTag)(elem) && elem.attribs[attrib] === value; };
	}
	/**
	 * @param a First function to combine.
	 * @param b Second function to combine.
	 * @returns A function taking a node and returning `true` if either
	 * of the input functions returns `true` for the node.
	 */
	function combineFuncs(a, b) {
	    return function (elem) { return a(elem) || b(elem); };
	}
	/**
	 * @param options An object describing nodes to look for.
	 * @returns A function executing all checks in `options` and returning `true`
	 * if any of them match a node.
	 */
	function compileTest(options) {
	    var funcs = Object.keys(options).map(function (key) {
	        var value = options[key];
	        return Object.prototype.hasOwnProperty.call(Checks, key)
	            ? Checks[key](value)
	            : getAttribCheck(key, value);
	    });
	    return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
	}
	/**
	 * @param options An object describing nodes to look for.
	 * @param node The element to test.
	 * @returns Whether the element matches the description in `options`.
	 */
	function testElement(options, node) {
	    var test = compileTest(options);
	    return test ? test(node) : true;
	}
	legacy.testElement = testElement;
	/**
	 * @param options An object describing nodes to look for.
	 * @param nodes Nodes to search through.
	 * @param recurse Also consider child nodes.
	 * @param limit Maximum number of nodes to return.
	 * @returns All nodes that match `options`.
	 */
	function getElements$1(options, nodes, recurse, limit) {
	    if (limit === void 0) { limit = Infinity; }
	    var test = compileTest(options);
	    return test ? (0, querying_1.filter)(test, nodes, recurse, limit) : [];
	}
	legacy.getElements = getElements$1;
	/**
	 * @param id The unique ID attribute value to look for.
	 * @param nodes Nodes to search through.
	 * @param recurse Also consider child nodes.
	 * @returns The node with the supplied ID.
	 */
	function getElementById(id, nodes, recurse) {
	    if (recurse === void 0) { recurse = true; }
	    if (!Array.isArray(nodes))
	        nodes = [nodes];
	    return (0, querying_1.findOne)(getAttribCheck("id", id), nodes, recurse);
	}
	legacy.getElementById = getElementById;
	/**
	 * @param tagName Tag name to search for.
	 * @param nodes Nodes to search through.
	 * @param recurse Also consider child nodes.
	 * @param limit Maximum number of nodes to return.
	 * @returns All nodes with the supplied `tagName`.
	 */
	function getElementsByTagName(tagName, nodes, recurse, limit) {
	    if (recurse === void 0) { recurse = true; }
	    if (limit === void 0) { limit = Infinity; }
	    return (0, querying_1.filter)(Checks.tag_name(tagName), nodes, recurse, limit);
	}
	legacy.getElementsByTagName = getElementsByTagName;
	/**
	 * @param type Element type to look for.
	 * @param nodes Nodes to search through.
	 * @param recurse Also consider child nodes.
	 * @param limit Maximum number of nodes to return.
	 * @returns All nodes with the supplied `type`.
	 */
	function getElementsByTagType(type, nodes, recurse, limit) {
	    if (recurse === void 0) { recurse = true; }
	    if (limit === void 0) { limit = Infinity; }
	    return (0, querying_1.filter)(Checks.tag_type(type), nodes, recurse, limit);
	}
	legacy.getElementsByTagType = getElementsByTagType;

	var helpers = {};

	Object.defineProperty(helpers, "__esModule", { value: true });
	helpers.uniqueSort = helpers.compareDocumentPosition = helpers.removeSubsets = void 0;
	var domhandler_1$1 = lib$8;
	/**
	 * Given an array of nodes, remove any member that is contained by another.
	 *
	 * @param nodes Nodes to filter.
	 * @returns Remaining nodes that aren't subtrees of each other.
	 */
	function removeSubsets$1(nodes) {
	    var idx = nodes.length;
	    /*
	     * Check if each node (or one of its ancestors) is already contained in the
	     * array.
	     */
	    while (--idx >= 0) {
	        var node = nodes[idx];
	        /*
	         * Remove the node if it is not unique.
	         * We are going through the array from the end, so we only
	         * have to check nodes that preceed the node under consideration in the array.
	         */
	        if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
	            nodes.splice(idx, 1);
	            continue;
	        }
	        for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
	            if (nodes.includes(ancestor)) {
	                nodes.splice(idx, 1);
	                break;
	            }
	        }
	    }
	    return nodes;
	}
	helpers.removeSubsets = removeSubsets$1;
	/**
	 * Compare the position of one node against another node in any other document.
	 * The return value is a bitmask with the following values:
	 *
	 * Document order:
	 * > There is an ordering, document order, defined on all the nodes in the
	 * > document corresponding to the order in which the first character of the
	 * > XML representation of each node occurs in the XML representation of the
	 * > document after expansion of general entities. Thus, the document element
	 * > node will be the first node. Element nodes occur before their children.
	 * > Thus, document order orders element nodes in order of the occurrence of
	 * > their start-tag in the XML (after expansion of entities). The attribute
	 * > nodes of an element occur after the element and before its children. The
	 * > relative order of attribute nodes is implementation-dependent./
	 *
	 * Source:
	 * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
	 *
	 * @param nodeA The first node to use in the comparison
	 * @param nodeB The second node to use in the comparison
	 * @returns A bitmask describing the input nodes' relative position.
	 *
	 * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
	 * a description of these values.
	 */
	function compareDocumentPosition(nodeA, nodeB) {
	    var aParents = [];
	    var bParents = [];
	    if (nodeA === nodeB) {
	        return 0;
	    }
	    var current = (0, domhandler_1$1.hasChildren)(nodeA) ? nodeA : nodeA.parent;
	    while (current) {
	        aParents.unshift(current);
	        current = current.parent;
	    }
	    current = (0, domhandler_1$1.hasChildren)(nodeB) ? nodeB : nodeB.parent;
	    while (current) {
	        bParents.unshift(current);
	        current = current.parent;
	    }
	    var maxIdx = Math.min(aParents.length, bParents.length);
	    var idx = 0;
	    while (idx < maxIdx && aParents[idx] === bParents[idx]) {
	        idx++;
	    }
	    if (idx === 0) {
	        return 1 /* DISCONNECTED */;
	    }
	    var sharedParent = aParents[idx - 1];
	    var siblings = sharedParent.children;
	    var aSibling = aParents[idx];
	    var bSibling = bParents[idx];
	    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
	        if (sharedParent === nodeB) {
	            return 4 /* FOLLOWING */ | 16 /* CONTAINED_BY */;
	        }
	        return 4 /* FOLLOWING */;
	    }
	    if (sharedParent === nodeA) {
	        return 2 /* PRECEDING */ | 8 /* CONTAINS */;
	    }
	    return 2 /* PRECEDING */;
	}
	helpers.compareDocumentPosition = compareDocumentPosition;
	/**
	 * Sort an array of nodes based on their relative position in the document and
	 * remove any duplicate nodes. If the array contains nodes that do not belong
	 * to the same document, sort order is unspecified.
	 *
	 * @param nodes Array of DOM nodes.
	 * @returns Collection of unique nodes, sorted in document order.
	 */
	function uniqueSort(nodes) {
	    nodes = nodes.filter(function (node, i, arr) { return !arr.includes(node, i + 1); });
	    nodes.sort(function (a, b) {
	        var relative = compareDocumentPosition(a, b);
	        if (relative & 2 /* PRECEDING */) {
	            return -1;
	        }
	        else if (relative & 4 /* FOLLOWING */) {
	            return 1;
	        }
	        return 0;
	    });
	    return nodes;
	}
	helpers.uniqueSort = uniqueSort;

	var feeds = {};

	Object.defineProperty(feeds, "__esModule", { value: true });
	feeds.getFeed = void 0;
	var stringify_1 = stringify$2;
	var legacy_1 = legacy;
	/**
	 * Get the feed object from the root of a DOM tree.
	 *
	 * @param doc - The DOM to to extract the feed from.
	 * @returns The feed.
	 */
	function getFeed(doc) {
	    var feedRoot = getOneElement$1(isValidFeed$1, doc);
	    return !feedRoot
	        ? null
	        : feedRoot.name === "feed"
	            ? getAtomFeed(feedRoot)
	            : getRssFeed(feedRoot);
	}
	feeds.getFeed = getFeed;
	/**
	 * Parse an Atom feed.
	 *
	 * @param feedRoot The root of the feed.
	 * @returns The parsed feed.
	 */
	function getAtomFeed(feedRoot) {
	    var _a;
	    var childs = feedRoot.children;
	    var feed = {
	        type: "atom",
	        items: (0, legacy_1.getElementsByTagName)("entry", childs).map(function (item) {
	            var _a;
	            var children = item.children;
	            var entry = { media: getMediaElements$1(children) };
	            addConditionally$1(entry, "id", "id", children);
	            addConditionally$1(entry, "title", "title", children);
	            var href = (_a = getOneElement$1("link", children)) === null || _a === void 0 ? void 0 : _a.attribs.href;
	            if (href) {
	                entry.link = href;
	            }
	            var description = fetch$2("summary", children) || fetch$2("content", children);
	            if (description) {
	                entry.description = description;
	            }
	            var pubDate = fetch$2("updated", children);
	            if (pubDate) {
	                entry.pubDate = new Date(pubDate);
	            }
	            return entry;
	        }),
	    };
	    addConditionally$1(feed, "id", "id", childs);
	    addConditionally$1(feed, "title", "title", childs);
	    var href = (_a = getOneElement$1("link", childs)) === null || _a === void 0 ? void 0 : _a.attribs.href;
	    if (href) {
	        feed.link = href;
	    }
	    addConditionally$1(feed, "description", "subtitle", childs);
	    var updated = fetch$2("updated", childs);
	    if (updated) {
	        feed.updated = new Date(updated);
	    }
	    addConditionally$1(feed, "author", "email", childs, true);
	    return feed;
	}
	/**
	 * Parse a RSS feed.
	 *
	 * @param feedRoot The root of the feed.
	 * @returns The parsed feed.
	 */
	function getRssFeed(feedRoot) {
	    var _a, _b;
	    var childs = (_b = (_a = getOneElement$1("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
	    var feed = {
	        type: feedRoot.name.substr(0, 3),
	        id: "",
	        items: (0, legacy_1.getElementsByTagName)("item", feedRoot.children).map(function (item) {
	            var children = item.children;
	            var entry = { media: getMediaElements$1(children) };
	            addConditionally$1(entry, "id", "guid", children);
	            addConditionally$1(entry, "title", "title", children);
	            addConditionally$1(entry, "link", "link", children);
	            addConditionally$1(entry, "description", "description", children);
	            var pubDate = fetch$2("pubDate", children);
	            if (pubDate)
	                entry.pubDate = new Date(pubDate);
	            return entry;
	        }),
	    };
	    addConditionally$1(feed, "title", "title", childs);
	    addConditionally$1(feed, "link", "link", childs);
	    addConditionally$1(feed, "description", "description", childs);
	    var updated = fetch$2("lastBuildDate", childs);
	    if (updated) {
	        feed.updated = new Date(updated);
	    }
	    addConditionally$1(feed, "author", "managingEditor", childs, true);
	    return feed;
	}
	var MEDIA_KEYS_STRING = ["url", "type", "lang"];
	var MEDIA_KEYS_INT = [
	    "fileSize",
	    "bitrate",
	    "framerate",
	    "samplingrate",
	    "channels",
	    "duration",
	    "height",
	    "width",
	];
	/**
	 * Get all media elements of a feed item.
	 *
	 * @param where Nodes to search in.
	 * @returns Media elements.
	 */
	function getMediaElements$1(where) {
	    return (0, legacy_1.getElementsByTagName)("media:content", where).map(function (elem) {
	        var attribs = elem.attribs;
	        var media = {
	            medium: attribs.medium,
	            isDefault: !!attribs.isDefault,
	        };
	        for (var _i = 0, MEDIA_KEYS_STRING_1 = MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++) {
	            var attrib = MEDIA_KEYS_STRING_1[_i];
	            if (attribs[attrib]) {
	                media[attrib] = attribs[attrib];
	            }
	        }
	        for (var _a = 0, MEDIA_KEYS_INT_1 = MEDIA_KEYS_INT; _a < MEDIA_KEYS_INT_1.length; _a++) {
	            var attrib = MEDIA_KEYS_INT_1[_a];
	            if (attribs[attrib]) {
	                media[attrib] = parseInt(attribs[attrib], 10);
	            }
	        }
	        if (attribs.expression) {
	            media.expression =
	                attribs.expression;
	        }
	        return media;
	    });
	}
	/**
	 * Get one element by tag name.
	 *
	 * @param tagName Tag name to look for
	 * @param node Node to search in
	 * @returns The element or null
	 */
	function getOneElement$1(tagName, node) {
	    return (0, legacy_1.getElementsByTagName)(tagName, node, true, 1)[0];
	}
	/**
	 * Get the text content of an element with a certain tag name.
	 *
	 * @param tagName Tag name to look for.
	 * @param where  Node to search in.
	 * @param recurse Whether to recurse into child nodes.
	 * @returns The text content of the element.
	 */
	function fetch$2(tagName, where, recurse) {
	    if (recurse === void 0) { recurse = false; }
	    return (0, stringify_1.textContent)((0, legacy_1.getElementsByTagName)(tagName, where, recurse, 1)).trim();
	}
	/**
	 * Adds a property to an object if it has a value.
	 *
	 * @param obj Object to be extended
	 * @param prop Property name
	 * @param tagName Tag name that contains the conditionally added property
	 * @param where Element to search for the property
	 * @param recurse Whether to recurse into child nodes.
	 */
	function addConditionally$1(obj, prop, tagName, where, recurse) {
	    if (recurse === void 0) { recurse = false; }
	    var val = fetch$2(tagName, where, recurse);
	    if (val)
	        obj[prop] = val;
	}
	/**
	 * Checks if an element is a feed root node.
	 *
	 * @param value The name of the element to check.
	 * @returns Whether an element is a feed root node.
	 */
	function isValidFeed$1(value) {
	    return value === "rss" || value === "feed" || value === "rdf:RDF";
	}

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.hasChildren = exports.isDocument = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;
	__exportStar(stringify$2, exports);
	__exportStar(traversal, exports);
	__exportStar(manipulation, exports);
	__exportStar(querying, exports);
	__exportStar(legacy, exports);
	__exportStar(helpers, exports);
	__exportStar(feeds, exports);
	/** @deprecated Use these methods from `domhandler` directly. */
	var domhandler_1 = lib$8;
	Object.defineProperty(exports, "isTag", { enumerable: true, get: function () { return domhandler_1.isTag; } });
	Object.defineProperty(exports, "isCDATA", { enumerable: true, get: function () { return domhandler_1.isCDATA; } });
	Object.defineProperty(exports, "isText", { enumerable: true, get: function () { return domhandler_1.isText; } });
	Object.defineProperty(exports, "isComment", { enumerable: true, get: function () { return domhandler_1.isComment; } });
	Object.defineProperty(exports, "isDocument", { enumerable: true, get: function () { return domhandler_1.isDocument; } });
	Object.defineProperty(exports, "hasChildren", { enumerable: true, get: function () { return domhandler_1.hasChildren; } });
	}(lib$6));

	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(FeedHandler$1, "__esModule", { value: true });
	FeedHandler$1.parseFeed = FeedHandler$1.FeedHandler = void 0;
	var domhandler_1 = __importDefault$1(lib$8);
	var DomUtils = __importStar(lib$6);
	var Parser_1 = Parser$2;
	var FeedItemMediaMedium;
	(function (FeedItemMediaMedium) {
	    FeedItemMediaMedium[FeedItemMediaMedium["image"] = 0] = "image";
	    FeedItemMediaMedium[FeedItemMediaMedium["audio"] = 1] = "audio";
	    FeedItemMediaMedium[FeedItemMediaMedium["video"] = 2] = "video";
	    FeedItemMediaMedium[FeedItemMediaMedium["document"] = 3] = "document";
	    FeedItemMediaMedium[FeedItemMediaMedium["executable"] = 4] = "executable";
	})(FeedItemMediaMedium || (FeedItemMediaMedium = {}));
	var FeedItemMediaExpression;
	(function (FeedItemMediaExpression) {
	    FeedItemMediaExpression[FeedItemMediaExpression["sample"] = 0] = "sample";
	    FeedItemMediaExpression[FeedItemMediaExpression["full"] = 1] = "full";
	    FeedItemMediaExpression[FeedItemMediaExpression["nonstop"] = 2] = "nonstop";
	})(FeedItemMediaExpression || (FeedItemMediaExpression = {}));
	// TODO: Consume data as it is coming in
	var FeedHandler = /** @class */ (function (_super) {
	    __extends(FeedHandler, _super);
	    /**
	     *
	     * @param callback
	     * @param options
	     */
	    function FeedHandler(callback, options) {
	        var _this = this;
	        if (typeof callback === "object") {
	            callback = undefined;
	            options = callback;
	        }
	        _this = _super.call(this, callback, options) || this;
	        return _this;
	    }
	    FeedHandler.prototype.onend = function () {
	        var _a, _b;
	        var feedRoot = getOneElement(isValidFeed, this.dom);
	        if (!feedRoot) {
	            this.handleCallback(new Error("couldn't find root of feed"));
	            return;
	        }
	        var feed = {};
	        if (feedRoot.name === "feed") {
	            var childs = feedRoot.children;
	            feed.type = "atom";
	            addConditionally(feed, "id", "id", childs);
	            addConditionally(feed, "title", "title", childs);
	            var href = getAttribute("href", getOneElement("link", childs));
	            if (href) {
	                feed.link = href;
	            }
	            addConditionally(feed, "description", "subtitle", childs);
	            var updated = fetch$1("updated", childs);
	            if (updated) {
	                feed.updated = new Date(updated);
	            }
	            addConditionally(feed, "author", "email", childs, true);
	            feed.items = getElements("entry", childs).map(function (item) {
	                var entry = {};
	                var children = item.children;
	                addConditionally(entry, "id", "id", children);
	                addConditionally(entry, "title", "title", children);
	                var href = getAttribute("href", getOneElement("link", children));
	                if (href) {
	                    entry.link = href;
	                }
	                var description = fetch$1("summary", children) || fetch$1("content", children);
	                if (description) {
	                    entry.description = description;
	                }
	                var pubDate = fetch$1("updated", children);
	                if (pubDate) {
	                    entry.pubDate = new Date(pubDate);
	                }
	                entry.media = getMediaElements(children);
	                return entry;
	            });
	        }
	        else {
	            var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
	            feed.type = feedRoot.name.substr(0, 3);
	            feed.id = "";
	            addConditionally(feed, "title", "title", childs);
	            addConditionally(feed, "link", "link", childs);
	            addConditionally(feed, "description", "description", childs);
	            var updated = fetch$1("lastBuildDate", childs);
	            if (updated) {
	                feed.updated = new Date(updated);
	            }
	            addConditionally(feed, "author", "managingEditor", childs, true);
	            feed.items = getElements("item", feedRoot.children).map(function (item) {
	                var entry = {};
	                var children = item.children;
	                addConditionally(entry, "id", "guid", children);
	                addConditionally(entry, "title", "title", children);
	                addConditionally(entry, "link", "link", children);
	                addConditionally(entry, "description", "description", children);
	                var pubDate = fetch$1("pubDate", children);
	                if (pubDate)
	                    entry.pubDate = new Date(pubDate);
	                entry.media = getMediaElements(children);
	                return entry;
	            });
	        }
	        this.feed = feed;
	        this.handleCallback(null);
	    };
	    return FeedHandler;
	}(domhandler_1.default));
	FeedHandler$1.FeedHandler = FeedHandler;
	function getMediaElements(where) {
	    return getElements("media:content", where).map(function (elem) {
	        var media = {
	            medium: elem.attribs.medium,
	            isDefault: !!elem.attribs.isDefault,
	        };
	        if (elem.attribs.url) {
	            media.url = elem.attribs.url;
	        }
	        if (elem.attribs.fileSize) {
	            media.fileSize = parseInt(elem.attribs.fileSize, 10);
	        }
	        if (elem.attribs.type) {
	            media.type = elem.attribs.type;
	        }
	        if (elem.attribs.expression) {
	            media.expression = elem.attribs
	                .expression;
	        }
	        if (elem.attribs.bitrate) {
	            media.bitrate = parseInt(elem.attribs.bitrate, 10);
	        }
	        if (elem.attribs.framerate) {
	            media.framerate = parseInt(elem.attribs.framerate, 10);
	        }
	        if (elem.attribs.samplingrate) {
	            media.samplingrate = parseInt(elem.attribs.samplingrate, 10);
	        }
	        if (elem.attribs.channels) {
	            media.channels = parseInt(elem.attribs.channels, 10);
	        }
	        if (elem.attribs.duration) {
	            media.duration = parseInt(elem.attribs.duration, 10);
	        }
	        if (elem.attribs.height) {
	            media.height = parseInt(elem.attribs.height, 10);
	        }
	        if (elem.attribs.width) {
	            media.width = parseInt(elem.attribs.width, 10);
	        }
	        if (elem.attribs.lang) {
	            media.lang = elem.attribs.lang;
	        }
	        return media;
	    });
	}
	function getElements(tagName, where) {
	    return DomUtils.getElementsByTagName(tagName, where, true);
	}
	function getOneElement(tagName, node) {
	    return DomUtils.getElementsByTagName(tagName, node, true, 1)[0];
	}
	function fetch$1(tagName, where, recurse) {
	    if (recurse === void 0) { recurse = false; }
	    return DomUtils.getText(DomUtils.getElementsByTagName(tagName, where, recurse, 1)).trim();
	}
	function getAttribute(name, elem) {
	    if (!elem) {
	        return null;
	    }
	    var attribs = elem.attribs;
	    return attribs[name];
	}
	function addConditionally(obj, prop, what, where, recurse) {
	    if (recurse === void 0) { recurse = false; }
	    var tmp = fetch$1(what, where, recurse);
	    if (tmp)
	        obj[prop] = tmp;
	}
	function isValidFeed(value) {
	    return value === "rss" || value === "feed" || value === "rdf:RDF";
	}
	/**
	 * Parse a feed.
	 *
	 * @param feed The feed that should be parsed, as a string.
	 * @param options Optionally, options for parsing. When using this option, you should set `xmlMode` to `true`.
	 */
	function parseFeed(feed, options) {
	    if (options === void 0) { options = { xmlMode: true }; }
	    var handler = new FeedHandler(options);
	    new Parser_1.Parser(handler, options).end(feed);
	    return handler.feed;
	}
	FeedHandler$1.parseFeed = parseFeed;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.RssHandler = exports.DefaultHandler = exports.DomUtils = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DomHandler = exports.Parser = void 0;
	var Parser_1 = Parser$2;
	Object.defineProperty(exports, "Parser", { enumerable: true, get: function () { return Parser_1.Parser; } });
	var domhandler_1 = lib$8;
	Object.defineProperty(exports, "DomHandler", { enumerable: true, get: function () { return domhandler_1.DomHandler; } });
	Object.defineProperty(exports, "DefaultHandler", { enumerable: true, get: function () { return domhandler_1.DomHandler; } });
	// Helper methods
	/**
	 * Parses the data, returns the resulting document.
	 *
	 * @param data The data that should be parsed.
	 * @param options Optional options for the parser and DOM builder.
	 */
	function parseDocument(data, options) {
	    var handler = new domhandler_1.DomHandler(undefined, options);
	    new Parser_1.Parser(handler, options).end(data);
	    return handler.root;
	}
	exports.parseDocument = parseDocument;
	/**
	 * Parses data, returns an array of the root nodes.
	 *
	 * Note that the root nodes still have a `Document` node as their parent.
	 * Use `parseDocument` to get the `Document` node instead.
	 *
	 * @param data The data that should be parsed.
	 * @param options Optional options for the parser and DOM builder.
	 * @deprecated Use `parseDocument` instead.
	 */
	function parseDOM(data, options) {
	    return parseDocument(data, options).children;
	}
	exports.parseDOM = parseDOM;
	/**
	 * Creates a parser instance, with an attached DOM handler.
	 *
	 * @param cb A callback that will be called once parsing has been completed.
	 * @param options Optional options for the parser and DOM builder.
	 * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.
	 */
	function createDomStream(cb, options, elementCb) {
	    var handler = new domhandler_1.DomHandler(cb, options, elementCb);
	    return new Parser_1.Parser(handler, options);
	}
	exports.createDomStream = createDomStream;
	var Tokenizer_1 = Tokenizer$1;
	Object.defineProperty(exports, "Tokenizer", { enumerable: true, get: function () { return __importDefault(Tokenizer_1).default; } });
	var ElementType = __importStar(lib$7);
	exports.ElementType = ElementType;
	/*
	 * All of the following exports exist for backwards-compatibility.
	 * They should probably be removed eventually.
	 */
	__exportStar(FeedHandler$1, exports);
	exports.DomUtils = __importStar(lib$6);
	var FeedHandler_1 = FeedHandler$1;
	Object.defineProperty(exports, "RssHandler", { enumerable: true, get: function () { return FeedHandler_1.FeedHandler; } });
	}(lib$9));

	var constants = {};

	// Internal
	const NODE_END$5 = -1;
	constants.NODE_END = NODE_END$5;

	// Node
	const ELEMENT_NODE$f = 1;
	constants.ELEMENT_NODE = ELEMENT_NODE$f;
	const ATTRIBUTE_NODE$6 = 2;
	constants.ATTRIBUTE_NODE = ATTRIBUTE_NODE$6;
	const TEXT_NODE$9 = 3;
	constants.TEXT_NODE = TEXT_NODE$9;
	const COMMENT_NODE$8 = 8;
	constants.COMMENT_NODE = COMMENT_NODE$8;
	const DOCUMENT_NODE$5 = 9;
	constants.DOCUMENT_NODE = DOCUMENT_NODE$5;
	const DOCUMENT_TYPE_NODE$5 = 10;
	constants.DOCUMENT_TYPE_NODE = DOCUMENT_TYPE_NODE$5;
	const DOCUMENT_FRAGMENT_NODE$7 = 11;
	constants.DOCUMENT_FRAGMENT_NODE = DOCUMENT_FRAGMENT_NODE$7;

	// TreeWalker
	const SHOW_ALL$1 = -1;
	constants.SHOW_ALL = SHOW_ALL$1;
	const SHOW_ELEMENT$1 = 1;
	constants.SHOW_ELEMENT = SHOW_ELEMENT$1;
	const SHOW_TEXT$1 = 4;
	constants.SHOW_TEXT = SHOW_TEXT$1;
	const SHOW_COMMENT$1 = 128;
	constants.SHOW_COMMENT = SHOW_COMMENT$1;

	// Document position
	const DOCUMENT_POSITION_DISCONNECTED$1 = 0x01;
	constants.DOCUMENT_POSITION_DISCONNECTED = DOCUMENT_POSITION_DISCONNECTED$1;
	const DOCUMENT_POSITION_PRECEDING$1 = 0x02;
	constants.DOCUMENT_POSITION_PRECEDING = DOCUMENT_POSITION_PRECEDING$1;
	const DOCUMENT_POSITION_FOLLOWING$1 = 0x04;
	constants.DOCUMENT_POSITION_FOLLOWING = DOCUMENT_POSITION_FOLLOWING$1;
	const DOCUMENT_POSITION_CONTAINS$1 = 0x08;
	constants.DOCUMENT_POSITION_CONTAINS = DOCUMENT_POSITION_CONTAINS$1;
	const DOCUMENT_POSITION_CONTAINED_BY$1 = 0x10;
	constants.DOCUMENT_POSITION_CONTAINED_BY = DOCUMENT_POSITION_CONTAINED_BY$1;
	const DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC$1 = 0x20;
	constants.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC$1;

	// SVG
	const SVG_NAMESPACE$3 = 'http://www.w3.org/2000/svg';
	constants.SVG_NAMESPACE = SVG_NAMESPACE$3;

	var object = {};

	const {
	  assign: assign$1,
	  create: create$a,
	  defineProperties: defineProperties$2,
	  entries: entries$1,
	  getOwnPropertyDescriptors,
	  keys: keys$1,
	  setPrototypeOf: setPrototypeOf$4
	} = Object;

	object.assign = assign$1;
	object.create = create$a;
	object.defineProperties = defineProperties$2;
	object.entries = entries$1;
	object.getOwnPropertyDescriptors = getOwnPropertyDescriptors;
	object.keys = keys$1;
	object.setPrototypeOf = setPrototypeOf$4;

	var utils = {};

	const {ELEMENT_NODE: ELEMENT_NODE$e} = constants;
	const {END: END$c, MIME: MIME$4, NEXT: NEXT$e, PREV: PREV$a} = symbols;

	const $String = String;
	utils.String = $String;

	const getEnd$5 = node => node.nodeType === ELEMENT_NODE$e ? node[END$c] : node;
	utils.getEnd = getEnd$5;

	const ignoreCase$2 = ({ownerDocument}) => ownerDocument[MIME$4].ignoreCase;
	utils.ignoreCase = ignoreCase$2;

	const knownAdjacent$3 = (prev, next) => {
	  prev[NEXT$e] = next;
	  next[PREV$a] = prev;
	};
	utils.knownAdjacent = knownAdjacent$3;

	const knownBoundaries$3 = (prev, current, next) => {
	  knownAdjacent$3(prev, current);
	  knownAdjacent$3(getEnd$5(current), next);
	};
	utils.knownBoundaries = knownBoundaries$3;

	const knownSegment$1 = (prev, start, end, next) => {
	  knownAdjacent$3(prev, start);
	  knownAdjacent$3(getEnd$5(end), next);
	};
	utils.knownSegment = knownSegment$1;

	const knownSiblings$5 = (prev, current, next) => {
	  knownAdjacent$3(prev, current);
	  knownAdjacent$3(current, next);
	};
	utils.knownSiblings = knownSiblings$5;

	const localCase$2 = ({localName, ownerDocument}) => {
	  return ownerDocument[MIME$4].ignoreCase ? localName.toUpperCase() : localName;
	};
	utils.localCase = localCase$2;

	const setAdjacent$2 = (prev, next) => {
	  if (prev)
	    prev[NEXT$e] = next;
	  if (next)
	    next[PREV$a] = prev;
	};
	utils.setAdjacent = setAdjacent$2;

	var customElementRegistry = {};

	const {ELEMENT_NODE: ELEMENT_NODE$d} = constants;
	const {END: END$b, NEXT: NEXT$d} = symbols;
	const {entries, setPrototypeOf: setPrototypeOf$3} = object;

	let reactive = false;

	const Classes$1 = new WeakMap;
	customElementRegistry.Classes = Classes$1;

	const customElements$2 = new WeakMap;
	customElementRegistry.customElements = customElements$2;

	const attributeChangedCallback$2 = (element, attributeName, oldValue, newValue) => {
	  if (
	    reactive &&
	    customElements$2.has(element) &&
	    element.attributeChangedCallback &&
	    element.constructor.observedAttributes.includes(attributeName)
	  ) {
	    element.attributeChangedCallback(attributeName, oldValue, newValue);
	  }
	};
	customElementRegistry.attributeChangedCallback = attributeChangedCallback$2;

	const createTrigger = (method, isConnected) => element => {
	  if (customElements$2.has(element)) {
	    const info = customElements$2.get(element);
	    if (info.connected !== isConnected && element.isConnected === isConnected) {
	      info.connected = isConnected;
	      if (method in element)
	        element[method]();
	    }
	  }
	};

	const triggerConnected = createTrigger('connectedCallback', true);
	const connectedCallback$2 = element => {
	  if (reactive) {
	    triggerConnected(element);
	    let {[NEXT$d]: next, [END$b]: end} = element;
	    while (next !== end) {
	      if (next.nodeType === ELEMENT_NODE$d)
	        triggerConnected(next);
	      next = next[NEXT$d];
	    }
	  }
	};
	customElementRegistry.connectedCallback = connectedCallback$2;

	const triggerDisconnected = createTrigger('disconnectedCallback', false);
	const disconnectedCallback$1 = element => {
	  if (reactive) {
	    triggerDisconnected(element);
	    let {[NEXT$d]: next, [END$b]: end} = element;
	    while (next !== end) {
	      if (next.nodeType === ELEMENT_NODE$d)
	        triggerDisconnected(next);
	      next = next[NEXT$d];
	    }
	  }
	};
	customElementRegistry.disconnectedCallback = disconnectedCallback$1;

	/**
	 * @implements globalThis.CustomElementRegistry
	 */
	class CustomElementRegistry$1 {

	  /**
	   * @param {Document} ownerDocument 
	   */
	  constructor(ownerDocument) {
	    /**
	     * @private
	     */
	    this.ownerDocument = ownerDocument;
	  
	    /**
	     * @private
	     */
	    this.registry = new Map;
	  
	    /**
	     * @private
	     */
	    this.waiting = new Map;
	  
	    /**
	     * @private
	     */
	    this.active = false;
	  }

	  /**
	   * @param {string} localName the custom element definition name
	   * @param {Function} Class the custom element **Class** definition
	   * @param {object?} options the optional object with an `extends` property
	   */
	  define(localName, Class, options = {}) {
	    const {ownerDocument, registry, waiting} = this;

	    if (registry.has(localName))
	      throw new Error('unable to redefine ' + localName);

	    if (Classes$1.has(Class))
	      throw new Error('unable to redefine the same class: ' + Class);

	    this.active = (reactive = true);

	    const {extends: extend} = options;

	    Classes$1.set(Class, {
	      ownerDocument,
	      options: {is: extend ? localName : ''},
	      localName: extend || localName
	    });

	    const check = extend ?
	      element => {
	        return element.localName === extend &&
	               element.getAttribute('is') === localName;
	      } :
	      element => element.localName === localName;
	    registry.set(localName, {Class, check});
	    if (waiting.has(localName)) {
	      for (const resolve of waiting.get(localName))
	        resolve(Class);
	      waiting.delete(localName);
	    }
	    ownerDocument.querySelectorAll(
	      extend ? `${extend}[is="${localName}"]` : localName
	    ).forEach(this.upgrade, this);
	  }

	  /**
	   * @param {Element} element
	   */
	  upgrade(element) {
	    if (customElements$2.has(element))
	      return;
	    const {registry} = this;
	    const ce = element.getAttribute('is') || element.localName;
	    if (registry.has(ce)) {
	      const {Class, check} = registry.get(ce);
	      if (check(element)) {
	        const {attributes, isConnected} = element;
	        for (const attr of attributes)
	          element.removeAttributeNode(attr);

	        const values = entries(element);
	        for (const [key] of values)
	          delete element[key];

	        setPrototypeOf$3(element, new Class(this.ownerDocument, ce));
	        customElements$2.set(element, {connected: isConnected});

	        for (const [key, value] of values)
	          element[key] = value;

	        for (const attr of attributes)
	          element.setAttributeNode(attr);

	        if (isConnected && element.connectedCallback)
	          element.connectedCallback();
	      }
	    }
	  }

	  /**
	   * @param {string} localName the custom element definition name
	   */
	  whenDefined(localName) {
	    const {registry, waiting} = this;
	    return new Promise(resolve => {
	      if (registry.has(localName))
	        resolve(registry.get(localName).Class);
	      else {
	        if (!waiting.has(localName))
	          waiting.set(localName, []);
	        waiting.get(localName).push(resolve);
	      }
	    });
	  }

	  /**
	   * @param {string} localName the custom element definition name
	   * @returns {Function?} the custom element **Class**, if any
	   */
	  get(localName) {
	    const info = this.registry.get(localName);
	    return info && info.Class;
	  }
	}
	customElementRegistry.CustomElementRegistry = CustomElementRegistry$1;

	const HTMLParser2 = lib$9;

	const {ELEMENT_NODE: ELEMENT_NODE$c, SVG_NAMESPACE: SVG_NAMESPACE$2} = constants;
	const {CUSTOM_ELEMENTS: CUSTOM_ELEMENTS$3, PREV: PREV$9, END: END$a, VALUE: VALUE$9} = symbols;
	const {keys} = object;

	const {knownBoundaries: knownBoundaries$2, knownSiblings: knownSiblings$4} = utils;
	const {attributeChangedCallback: attributeChangedCallback$1, connectedCallback: connectedCallback$1} = customElementRegistry;

	const {Parser} = HTMLParser2;

	// import {Mime} from './mime.js';
	// const VOID_SOURCE = Mime['text/html'].voidElements.source.slice(4, -2);
	// const VOID_ELEMENTS = new RegExp(`<(${VOID_SOURCE})([^>]*?)>`, 'gi');
	// const VOID_SANITIZER = (_, $1, $2) => `<${$1}${$2}${/\/$/.test($2) ? '' : ' /'}>`;
	// const voidSanitizer = html => html.replace(VOID_ELEMENTS, VOID_SANITIZER);

	let notParsing = true;

	const append$1 = (self, node, active) => {
	  const end = self[END$a];
	  node.parentNode = self;
	  knownBoundaries$2(end[PREV$9], node, end);
	  if (active && node.nodeType === ELEMENT_NODE$c)
	    connectedCallback$1(node);
	  return node;
	};

	const attribute = (element, end, attribute, value, active) => {
	  attribute[VALUE$9] = value;
	  attribute.ownerElement = element;
	  knownSiblings$4(end[PREV$9], attribute, end);
	  if (attribute.name === 'class')
	    element.className = value;
	  if (active)
	    attributeChangedCallback$1(element, attribute.name, null, value);
	};

	const isNotParsing = () => notParsing;
	parseFromString$3.isNotParsing = isNotParsing;

	const parseFromString$2 = (document, isHTML, markupLanguage) => {
	  const {active, registry} = document[CUSTOM_ELEMENTS$3];

	  let node = document;
	  let ownerSVGElement = null;

	  notParsing = false;

	  const content = new Parser({
	    // <!DOCTYPE ...>
	    onprocessinginstruction(name, data) {
	      if (name.toLowerCase() === '!doctype')
	        document.doctype = data.slice(name.length).trim();
	    },

	    // <tagName>
	    onopentag(name, attributes) {
	      let create = true;
	      if (isHTML) {
	        if (ownerSVGElement) {
	          node = append$1(node, document.createElementNS(SVG_NAMESPACE$2, name), active);
	          node.ownerSVGElement = ownerSVGElement;
	          create = false;
	        }
	        else if (name === 'svg' || name === 'SVG') {
	          ownerSVGElement = document.createElementNS(SVG_NAMESPACE$2, name);
	          node = append$1(node, ownerSVGElement, active);
	          create = false;
	        }
	        else if (active) {
	          const ce = name.includes('-') ? name : (attributes.is || '');
	          if (ce && registry.has(ce)) {
	            const {Class} = registry.get(ce);
	            node = append$1(node, new Class, active);
	            delete attributes.is;
	            create = false;
	          }
	        }
	      }

	      if (create)
	        node = append$1(node, document.createElement(name), false);

	      let end = node[END$a];
	      for (const name of keys(attributes))
	        attribute(node, end, document.createAttribute(name), attributes[name], active);
	    },

	    // #text, #comment
	    oncomment(data) { append$1(node, document.createComment(data), active); },
	    ontext(text) { append$1(node, document.createTextNode(text), active); },

	    // </tagName>
	    onclosetag() {
	      if (isHTML && node === ownerSVGElement)
	        ownerSVGElement = null;
	      node = node.parentNode;
	    }
	  }, {
	    decodeEntities: true,
	    xmlMode: !isHTML
	  });

	  content.write(markupLanguage);
	  content.end();

	  notParsing = true;

	  return document;
	};
	parseFromString$3.parseFromString = parseFromString$2;

	var document$4 = {};

	var registerHtmlClass = {};

	const htmlClasses$3 = new Map;
	registerHtmlClass.htmlClasses = htmlClasses$3;

	const registerHTMLClass$e = (names, Class) => {
	  for (const name of [].concat(names)) {
	    htmlClasses$3.set(name, Class);
	    htmlClasses$3.set(name.toUpperCase(), Class);
	  }
	};
	registerHtmlClass.registerHTMLClass = registerHTMLClass$e;

	var document$3 = {};

	var facades = {};

	var attr = {};

	var jsdon = {};

	const {
	  NODE_END: NODE_END$4,
	  ATTRIBUTE_NODE: ATTRIBUTE_NODE$5,
	  COMMENT_NODE: COMMENT_NODE$7,
	  DOCUMENT_TYPE_NODE: DOCUMENT_TYPE_NODE$4,
	  ELEMENT_NODE: ELEMENT_NODE$b,
	  TEXT_NODE: TEXT_NODE$8
	} = constants;

	const {END: END$9, NEXT: NEXT$c, VALUE: VALUE$8} = symbols;

	const {getEnd: getEnd$4} = utils;

	const loopSegment = ({[NEXT$c]: next, [END$9]: end}, json) => {
	  while (next !== end) {
	    switch (next.nodeType) {
	      case ATTRIBUTE_NODE$5:
	        attrAsJSON$1(next, json);
	        break;
	      case TEXT_NODE$8:
	      case COMMENT_NODE$7:
	        characterDataAsJSON$1(next, json);
	        break;
	      case ELEMENT_NODE$b:
	        elementAsJSON$1(next, json);
	        next = getEnd$4(next);
	        break;
	      case DOCUMENT_TYPE_NODE$4:
	        documentTypeAsJSON$1(next, json);
	        break;
	    }
	    next = next[NEXT$c];
	  }
	  const last = json.length - 1;
	  const value = json[last];
	  if (typeof value === 'number' && value < 0)
	    json[last] += NODE_END$4;
	  else
	    json.push(NODE_END$4);
	};

	const attrAsJSON$1 = (attr, json) => {
	  json.push(ATTRIBUTE_NODE$5, attr.name);
	  const value = attr[VALUE$8].trim();
	  if (value)
	    json.push(value);
	};
	jsdon.attrAsJSON = attrAsJSON$1;

	const characterDataAsJSON$1 = (node, json) => {
	  const value = node[VALUE$8];
	  if (value.trim())
	    json.push(node.nodeType, value);
	};
	jsdon.characterDataAsJSON = characterDataAsJSON$1;

	const nonElementAsJSON$1 = (node, json) => {
	  json.push(node.nodeType);
	  loopSegment(node, json);
	};
	jsdon.nonElementAsJSON = nonElementAsJSON$1;

	const documentTypeAsJSON$1 = ({name, publicId, systemId}, json) => {
	  json.push(DOCUMENT_TYPE_NODE$4, name);
	  if (publicId)
	    json.push(publicId);
	  if (systemId)
	    json.push(systemId);
	};
	jsdon.documentTypeAsJSON = documentTypeAsJSON$1;

	const elementAsJSON$1 = (element, json) => {
	  json.push(ELEMENT_NODE$b, element.localName);
	  loopSegment(element, json);
	};
	jsdon.elementAsJSON = elementAsJSON$1;

	var attributes$2 = {};

	var mutationObserver = {};

	const {MUTATION_OBSERVER: MUTATION_OBSERVER$1} = symbols;

	const createRecord =
	  (type, target, addedNodes, removedNodes, attributeName, oldValue) =>
	 ({type, target, addedNodes, removedNodes, attributeName, oldValue});

	const queueAttribute = (
	  observer, target, attributeName, attributeFilter, attributeOldValue, oldValue
	) => {
	  if ((!attributeFilter || attributeFilter.includes(attributeName))) {
	    const {callback, records, scheduled} = observer;
	    records.push(createRecord(
	      'attributes', target,
	      [], [],
	      attributeName, attributeOldValue ? oldValue : void 0
	    ));
	    if (!scheduled) {
	      observer.scheduled = true;
	      Promise.resolve().then(() => {
	        observer.scheduled = false;
	        callback(records.splice(0), observer);
	      });
	    }
	  }
	};

	const attributeChangedCallback = (element, attributeName, oldValue) => {
	  const {ownerDocument} = element;
	  const {active, observers} = ownerDocument[MUTATION_OBSERVER$1];
	  if (active) {
	    for (const observer of observers) {
	      for (const [
	        target,
	        {
	          childList,
	          subtree,
	          attributes,
	          attributeFilter,
	          attributeOldValue
	        }
	      ] of observer.nodes) {
	        if (childList) {
	          if (
	            (subtree && (target === ownerDocument || target.contains(element))) ||
	            (!subtree && target.children.includes(element))
	          ) {
	            queueAttribute(
	              observer, element,
	              attributeName, attributeFilter, attributeOldValue, oldValue
	            );
	            break;
	          }
	        }
	        else if (
	          attributes &&
	          target === element
	        ) {
	          queueAttribute(
	            observer, element,
	            attributeName, attributeFilter, attributeOldValue, oldValue
	          );
	          break;
	        }
	      }
	    }
	  }
	};
	mutationObserver.attributeChangedCallback = attributeChangedCallback;

	const moCallback$3 = (element, parentNode) => {
	  const {ownerDocument} = element;
	  const {active, observers} = ownerDocument[MUTATION_OBSERVER$1];
	  if (active) {
	    for (const observer of observers) {
	      for (const [target, {subtree, childList, characterData}] of observer.nodes) {
	        if (childList) {
	          if (
	            (parentNode && (target === parentNode || (subtree && target.contains(parentNode)))) ||
	            (!parentNode && ((subtree && (target === ownerDocument || target.contains(element))) ||
	                            (!subtree && target[characterData ? 'childNodes' : 'children'].includes(element))))
	          ) {
	            const {callback, records, scheduled} = observer;
	            records.push(createRecord(
	              'childList', target,
	              parentNode ? [] : [element], parentNode ? [element] : []
	            ));
	            if (!scheduled) {
	              observer.scheduled = true;
	              Promise.resolve().then(() => {
	                observer.scheduled = false;
	                callback(records.splice(0), observer);
	              });
	            }
	            break;
	          }
	        }
	      }
	    }
	  }
	};
	mutationObserver.moCallback = moCallback$3;

	class MutationObserverClass$1 {
	  constructor(ownerDocument) {
	    const observers = new Set;
	    this.observers = observers;
	    this.active = false;

	    /**
	     * @implements globalThis.MutationObserver
	     */
	    this.class = class MutationObserver {

	      constructor(callback) {
	        /**
	         * @private
	         */
	        this.callback = callback;

	        /**
	         * @private
	         */
	        this.nodes = new Map;

	        /**
	         * @private
	         */
	        this.records = [];

	        /**
	         * @private
	         */
	        this.scheduled = false;
	      }

	      disconnect() {
	        this.records.splice(0);
	        this.nodes.clear();
	        observers.delete(this);
	        ownerDocument[MUTATION_OBSERVER$1].active = !!observers.size;
	      }

	      /**
	       * @param {Element} target
	       * @param {MutationObserverInit} options
	       */
	      observe(target, options = {
	        subtree: false,
	        childList: false,
	        attributes: false,
	        attributeFilter: null,
	        attributeOldValue: false,
	        characterData: false,
	        // TODO: not implemented yet
	        // characterDataOldValue: false
	      }) {
	        if (('attributeOldValue' in options) || ('attributeFilter' in options))
	          options.attributes = true;
	        // if ('characterDataOldValue' in options)
	        //   options.characterData = true;
	        options.childList = !!options.childList;
	        options.subtree = !!options.subtree;
	        this.nodes.set(target, options);
	        observers.add(this);
	        ownerDocument[MUTATION_OBSERVER$1].active = true;
	      }

	      /**
	       * @returns {MutationRecord[]}
	       */
	      takeRecords() { return this.records.splice(0); }
	    };
	  }
	}
	mutationObserver.MutationObserverClass = MutationObserverClass$1;

	const {CLASS_LIST: CLASS_LIST$1, NEXT: NEXT$b, PREV: PREV$8, VALUE: VALUE$7} = symbols;

	const {knownAdjacent: knownAdjacent$2, knownSiblings: knownSiblings$3} = utils;

	const {attributeChangedCallback: ceAttributes$1} = customElementRegistry;
	const {attributeChangedCallback: moAttributes$1} = mutationObserver;

	const emptyAttributes$1 = new Set([
	  'allowfullscreen',
	  'allowpaymentrequest',
	  'async',
	  'autofocus',
	  'autoplay',
	  'checked',
	  'class',
	  'contenteditable',
	  'controls',
	  'default',
	  'defer',
	  'disabled',
	  'draggable',
	  'formnovalidate',
	  'hidden',
	  'id',
	  'ismap',
	  'itemscope',
	  'loop',
	  'multiple',
	  'muted',
	  'nomodule',
	  'novalidate',
	  'open',
	  'playsinline',
	  'readonly',
	  'required',
	  'reversed',
	  'selected',
	  'style',
	  'truespeed'
	]);
	attributes$2.emptyAttributes = emptyAttributes$1;

	const setAttribute$2 = (element, attribute) => {
	  const {[VALUE$7]: value, name} = attribute;
	  attribute.ownerElement = element;
	  knownSiblings$3(element, attribute, element[NEXT$b]);
	  if (name === 'class')
	    element.className = value;
	  moAttributes$1(element, name, null);
	  ceAttributes$1(element, name, null, value);
	};
	attributes$2.setAttribute = setAttribute$2;

	const removeAttribute$1 = (element, attribute) => {
	  const {[VALUE$7]: value, name} = attribute;
	  knownAdjacent$2(attribute[PREV$8], attribute[NEXT$b]);
	  attribute.ownerElement = attribute[PREV$8] = attribute[NEXT$b] = null;
	  if (name === 'class')
	    element[CLASS_LIST$1] = null;
	  moAttributes$1(element, name, value);
	  ceAttributes$1(element, name, value, null);
	};
	attributes$2.removeAttribute = removeAttribute$1;

	const booleanAttribute$6 = {
	  get(element, name) {
	    return element.hasAttribute(name);
	  },
	  set(element, name, value) {
	    if (value)
	      element.setAttribute(name, '');
	    else
	      element.removeAttribute(name);
	  }
	};
	attributes$2.booleanAttribute = booleanAttribute$6;

	const numericAttribute$3 = {
	  get(element, name) {
	    return parseFloat(element.getAttribute(name) || 0);
	  },
	  set(element, name, value) {
	    element.setAttribute(name, value);
	  }
	};
	attributes$2.numericAttribute = numericAttribute$3;

	const stringAttribute$6 = {
	  get(element, name) {
	    return element.getAttribute(name) || '';
	  },
	  set(element, name, value) {
	    element.setAttribute(name, value);
	  }
	};
	attributes$2.stringAttribute = stringAttribute$6;

	var node$1 = {};

	var eventTarget = {};

	/*! (c) Andrea Giammarchi - ISC */

	var self$1 = {};
	try {
	  self$1.EventTarget = (new EventTarget).constructor;
	} catch(EventTarget) {
	  (function (Object, wm) {
	    var create = Object.create;
	    var defineProperty = Object.defineProperty;
	    var proto = EventTarget.prototype;
	    define(proto, 'addEventListener', function (type, listener, options) {
	      for (var
	        secret = wm.get(this),
	        listeners = secret[type] || (secret[type] = []),
	        i = 0, length = listeners.length; i < length; i++
	      ) {
	        if (listeners[i].listener === listener)
	          return;
	      }
	      listeners.push({target: this, listener: listener, options: options});
	    });
	    define(proto, 'dispatchEvent', function (event) {
	      var secret = wm.get(this);
	      var listeners = secret[event.type];
	      if (listeners) {
	        define(event, 'target', this);
	        define(event, 'currentTarget', this);
	        listeners.slice(0).some(dispatch, event);
	        delete event.currentTarget;
	        delete event.target;
	      }
	      return true;
	    });
	    define(proto, 'removeEventListener', function (type, listener) {
	      for (var
	        secret = wm.get(this),
	        /* istanbul ignore next */
	        listeners = secret[type] || (secret[type] = []),
	        i = 0, length = listeners.length; i < length; i++
	      ) {
	        if (listeners[i].listener === listener) {
	          listeners.splice(i, 1);
	          return;
	        }
	      }
	    });
	    self$1.EventTarget = EventTarget;
	    function EventTarget() {      wm.set(this, create(null));
	    }
	    function define(target, name, value) {
	      defineProperty(
	        target,
	        name,
	        {
	          configurable: true,
	          writable: true,
	          value: value
	        }
	      );
	    }
	    function dispatch(info) {
	      var options = info.options;
	      if (options && options.once)
	        info.target.removeEventListener(this.type, info.listener);
	      if (typeof info.listener === 'function')
	        info.listener.call(info.target, this);
	      else
	        info.listener.handleEvent(this);
	      return this._stopImmediatePropagationFlag;
	    }
	  }(Object, new WeakMap));
	}
	var cjs$1 = self$1.EventTarget;

	// https://dom.spec.whatwg.org/#interface-eventtarget

	const EventTarget$3 = (m => /* c8 ignore start */ m.__esModule ? m.default : m /* c8 ignore stop */)(cjs$1);

	/**
	 * @implements globalThis.EventTarget
	 */
	class DOMEventTarget extends EventTarget$3 {

	  /**
	   * @protected
	   */
	  _getParent() {
	    return null;
	  }

	  dispatchEvent(event) {
	    const dispatched = super.dispatchEvent(event);

	    // intentionally simplified, specs imply way more code: https://dom.spec.whatwg.org/#event-path
	    if (dispatched && event.bubbles && !event.cancelBubble) {
	      const parent = this._getParent();
	      if (parent && parent.dispatchEvent) {
	        const options = {
	          bubbles: event.bubbles,
	          cancelable: event.cancelable,
	          composed: event.composed,
	        };
	        // in Node 16.5 the same event can't be used for another dispatch
	        return parent.dispatchEvent(new event.constructor(event.type, options));
	      }
	    }
	    return dispatched;
	  }
	}

	eventTarget.EventTarget = DOMEventTarget;

	var nodeList = {};

	// https://dom.spec.whatwg.org/#interface-nodelist

	/**
	 * @implements globalThis.NodeList
	 */
	class NodeList$6 extends Array {
	  item(i) { return i < this.length ? this[i] : null; }
	}
	nodeList.NodeList = NodeList$6;

	// https://dom.spec.whatwg.org/#node

	const {
	  ELEMENT_NODE: ELEMENT_NODE$a,
	  ATTRIBUTE_NODE: ATTRIBUTE_NODE$4,
	  TEXT_NODE: TEXT_NODE$7,
	  COMMENT_NODE: COMMENT_NODE$6,
	  DOCUMENT_NODE: DOCUMENT_NODE$4,
	  DOCUMENT_FRAGMENT_NODE: DOCUMENT_FRAGMENT_NODE$6,
	  DOCUMENT_TYPE_NODE: DOCUMENT_TYPE_NODE$3,
	  DOCUMENT_POSITION_DISCONNECTED,
	  DOCUMENT_POSITION_PRECEDING,
	  DOCUMENT_POSITION_FOLLOWING,
	  DOCUMENT_POSITION_CONTAINS,
	  DOCUMENT_POSITION_CONTAINED_BY,
	  DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC
	} = constants;

	const {NEXT: NEXT$a, PREV: PREV$7} = symbols;

	const {EventTarget: EventTarget$2} = eventTarget;

	const {NodeList: NodeList$5} = nodeList;

	const getParentNodeCount = ({parentNode}) => {
	  let count = 0;
	  while (parentNode) {
	    count++;
	    parentNode = parentNode.parentNode;
	  }
	  return count;
	};

	/**
	 * @implements globalThis.Node
	 */
	class Node$6 extends EventTarget$2 {

	  static get ELEMENT_NODE() { return ELEMENT_NODE$a; }
	  static get ATTRIBUTE_NODE() { return ATTRIBUTE_NODE$4; }
	  static get TEXT_NODE() { return TEXT_NODE$7; }
	  static get COMMENT_NODE() { return COMMENT_NODE$6; }
	  static get DOCUMENT_NODE() { return DOCUMENT_NODE$4; }
	  static get DOCUMENT_FRAGMENT_NODE() { return DOCUMENT_FRAGMENT_NODE$6; }
	  static get DOCUMENT_TYPE_NODE() { return DOCUMENT_TYPE_NODE$3; }

	  constructor(ownerDocument, localName, nodeType) {
	    super();
	    this.ownerDocument = ownerDocument;
	    this.localName = localName;
	    this.nodeType = nodeType;
	    this.parentNode = null;
	    this[NEXT$a] = null;
	    this[PREV$7] = null;
	  }

	  get ELEMENT_NODE() { return ELEMENT_NODE$a; }
	  get ATTRIBUTE_NODE() { return ATTRIBUTE_NODE$4; }
	  get TEXT_NODE() { return TEXT_NODE$7; }
	  get COMMENT_NODE() { return COMMENT_NODE$6; }
	  get DOCUMENT_NODE() { return DOCUMENT_NODE$4; }
	  get DOCUMENT_FRAGMENT_NODE() { return DOCUMENT_FRAGMENT_NODE$6; }
	  get DOCUMENT_TYPE_NODE() { return DOCUMENT_TYPE_NODE$3; }

	  /* c8 ignore start */
	  // mixin: node
	  get isConnected() { return false; }
	  get nodeName() { return this.localName; }
	  get parentElement() { return null; }
	  get previousSibling() { return null; }
	  get previousElementSibling() { return null; }
	  get nextSibling() { return null; }
	  get nextElementSibling() { return null; }
	  get childNodes() { return new NodeList$5; }
	  get firstChild() { return null; }
	  get lastChild() { return null; }

	  // default values
	  get nodeValue() { return null; }
	  set nodeValue(value) {}
	  get textContent() { return null; }
	  set textContent(value) {}
	  normalize() {}
	  cloneNode() { return null; }
	  contains() { return false; }
	  insertBefore() {}
	  appendChild() {}
	  replaceChild() {}
	  removeChild() {}
	  toString() { return ''; }
	  /* c8 ignore stop */

	  hasChildNodes() { return !!this.lastChild; }
	  isSameNode(node) { return this === node; }

	  // TODO: attributes?
	  compareDocumentPosition(target) {
	    let result = 0;
	    if (this !== target) {
	      let self = getParentNodeCount(this);
	      let other = getParentNodeCount(target);
	      if (self < other) {
	        result += DOCUMENT_POSITION_FOLLOWING;
	        if (this.contains(target))
	          result += DOCUMENT_POSITION_CONTAINED_BY;
	      }
	      else if (other < self) {
	        result += DOCUMENT_POSITION_PRECEDING;
	        if (target.contains(this))
	          result += DOCUMENT_POSITION_CONTAINS;
	      }
	      else if (self && other) {
	        const {childNodes} = this.parentNode;
	        if (childNodes.indexOf(this) < childNodes.indexOf(target))
	          result += DOCUMENT_POSITION_FOLLOWING;
	        else
	          result += DOCUMENT_POSITION_PRECEDING;
	      }
	      if (!self || !other) {
	        result += DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;
	        result += DOCUMENT_POSITION_DISCONNECTED;
	      }
	    }
	    return result;
	  }

	  isEqualNode(node) {
	    if (this === node)
	      return true;
	    if (this.nodeType === node.nodeType) {
	      switch (this.nodeType) {
	        case DOCUMENT_NODE$4:
	        case DOCUMENT_FRAGMENT_NODE$6: {
	          const aNodes = this.childNodes;
	          const bNodes = node.childNodes;
	          return aNodes.length === bNodes.length && aNodes.every((node, i) => node.isEqualNode(bNodes[i]));
	        }
	      }
	      return this.toString() === node.toString();
	    }
	    return false;
	  }

	  /**
	   * @protected
	   */
	  _getParent() {
	    return this.parentNode;
	  }

	  getRootNode() {
	    let root = this;
	    while (root.parentNode)
	      root = root.parentNode;
	    return root.nodeType === DOCUMENT_NODE$4 ? root.documentElement : root;
	  }
	}
	node$1.Node = Node$6;

	const {ATTRIBUTE_NODE: ATTRIBUTE_NODE$3} = constants;
	const {CHANGED: CHANGED$1, VALUE: VALUE$6} = symbols;
	const {String: String$2} = utils;
	const {attrAsJSON} = jsdon;
	const {emptyAttributes} = attributes$2;

	const {attributeChangedCallback: moAttributes} = mutationObserver;
	const {attributeChangedCallback: ceAttributes} = customElementRegistry;

	const {Node: Node$5} = node$1;

	const QUOTE = /"/g;

	/**
	 * @implements globalThis.Attr
	 */
	class Attr$5 extends Node$5 {
	  constructor(ownerDocument, name, value = '') {
	    super(ownerDocument, '#attribute', ATTRIBUTE_NODE$3);
	    this.ownerElement = null;
	    this.name = String$2(name);
	    this[VALUE$6] = String$2(value);
	    this[CHANGED$1] = false;
	  }

	  get value() { return this[VALUE$6]; }
	  set value(newValue) {
	    const {[VALUE$6]: oldValue, name, ownerElement} = this;
	    this[VALUE$6] = String$2(newValue);
	    this[CHANGED$1] = true;
	    if (ownerElement) {
	      moAttributes(ownerElement, name, oldValue);
	      ceAttributes(ownerElement, name, oldValue, this[VALUE$6]);
	    }
	  }

	  cloneNode() {
	    const {ownerDocument, name, [VALUE$6]: value} = this;
	    return new Attr$5(ownerDocument, name, value);
	  }

	  toString() {
	    const {name, [VALUE$6]: value} = this;
	    return emptyAttributes.has(name) && !value ?
	            name : `${name}="${value.replace(QUOTE, '&quot;')}"`;
	  }

	  toJSON() {
	    const json = [];
	    attrAsJSON(this, json);
	    return json;
	  }
	}
	attr.Attr = Attr$5;

	var characterData = {};

	var node = {};

	const {
	  COMMENT_NODE: COMMENT_NODE$5,
	  DOCUMENT_NODE: DOCUMENT_NODE$3,
	  DOCUMENT_FRAGMENT_NODE: DOCUMENT_FRAGMENT_NODE$5,
	  TEXT_NODE: TEXT_NODE$6,
	  NODE_END: NODE_END$3
	} = constants;

	const {START: START$3, NEXT: NEXT$9, PREV: PREV$6} = symbols;
	const {getEnd: getEnd$3} = utils;

	const isConnected$2 = ({ownerDocument, parentNode}) => {
	  while (parentNode) {
	    if (parentNode === ownerDocument)
	      return true;
	    parentNode = parentNode.parentNode;
	  }
	  return false;
	};
	node.isConnected = isConnected$2;

	const parentElement$2 = ({parentNode}) => {
	  if (parentNode) {
	    switch (parentNode.nodeType) {
	      case DOCUMENT_NODE$3:
	      case DOCUMENT_FRAGMENT_NODE$5:
	        return null;
	    }
	  }
	  return parentNode;
	};
	node.parentElement = parentElement$2;

	const previousSibling$4 = ({[PREV$6]: prev}) => {
	  switch (prev ? prev.nodeType : 0) {
	    case NODE_END$3:
	      return prev[START$3];
	    case TEXT_NODE$6:
	    case COMMENT_NODE$5:
	      return prev;
	  }
	  return null;
	};
	node.previousSibling = previousSibling$4;

	const nextSibling$4 = node => {
	  const next = getEnd$3(node)[NEXT$9];
	  return next && (next.nodeType === NODE_END$3 ? null : next);
	};
	node.nextSibling = nextSibling$4;

	var nonDocumentTypeChildNode = {};

	// https://dom.spec.whatwg.org/#nondocumenttypechildnode
	// CharacterData, Element

	const {ELEMENT_NODE: ELEMENT_NODE$9} = constants;

	const {nextSibling: nextSibling$3, previousSibling: previousSibling$3} = node;

	const nextElementSibling$3 = node => {
	  let next = nextSibling$3(node);
	  while (next && next.nodeType !== ELEMENT_NODE$9)
	    next = nextSibling$3(next);
	  return next;
	};
	nonDocumentTypeChildNode.nextElementSibling = nextElementSibling$3;

	const previousElementSibling$2 = node => {
	  let prev = previousSibling$3(node);
	  while (prev && prev.nodeType !== ELEMENT_NODE$9)
	    prev = previousSibling$3(prev);
	  return prev;
	};
	nonDocumentTypeChildNode.previousElementSibling = previousElementSibling$2;

	var childNode = {};

	// https://dom.spec.whatwg.org/#childnode
	// CharacterData, DocumentType, Element

	const {ELEMENT_NODE: ELEMENT_NODE$8} = constants;
	const {NEXT: NEXT$8, PREV: PREV$5} = symbols;

	const {getEnd: getEnd$2, setAdjacent: setAdjacent$1} = utils;

	const {moCallback: moCallback$2} = mutationObserver;
	const {disconnectedCallback} = customElementRegistry;

	const asFragment = (ownerDocument, nodes) => {
	  const fragment = ownerDocument.createDocumentFragment();
	  fragment.append(...nodes);
	  return fragment;
	};

	const before$2 = (node, nodes) => {
	  const {ownerDocument, parentNode} = node;
	  if (parentNode)
	    parentNode.insertBefore(
	      asFragment(ownerDocument, nodes),
	      node
	    );
	};
	childNode.before = before$2;

	const after$2 = (node, nodes) => {
	  const {ownerDocument, parentNode} = node;
	  if (parentNode)
	    parentNode.insertBefore(
	      asFragment(ownerDocument, nodes),
	      getEnd$2(node)[NEXT$8]
	    );
	};
	childNode.after = after$2;

	const replaceWith$2 = (node, nodes) => {
	  const {ownerDocument, parentNode} = node;
	  if (parentNode) {
	    parentNode.insertBefore(
	      asFragment(ownerDocument, nodes),
	      node
	    );
	    node.remove();
	  }
	};
	childNode.replaceWith = replaceWith$2;

	const remove$2 = (prev, current, next) => {
	  const {parentNode, nodeType} = current;
	  if (prev || next) {
	    setAdjacent$1(prev, next);
	    current[PREV$5] = null;
	    getEnd$2(current)[NEXT$8] = null;
	  }
	  if (parentNode) {
	    current.parentNode = null;
	    moCallback$2(current, parentNode);
	    if (nodeType === ELEMENT_NODE$8)
	      disconnectedCallback(current);
	  }
	};
	childNode.remove = remove$2;

	// https://dom.spec.whatwg.org/#interface-characterdata

	const {NEXT: NEXT$7, PREV: PREV$4, VALUE: VALUE$5} = symbols;
	const {String: String$1} = utils;
	const {isConnected: isConnected$1, parentElement: parentElement$1, previousSibling: previousSibling$2, nextSibling: nextSibling$2} = node;
	const {characterDataAsJSON} = jsdon;

	const {previousElementSibling: previousElementSibling$1, nextElementSibling: nextElementSibling$2} = nonDocumentTypeChildNode;
	const {before: before$1, after: after$1, replaceWith: replaceWith$1, remove: remove$1} = childNode;

	const {Node: Node$4} = node$1;
	const {moCallback: moCallback$1} = mutationObserver;

	/**
	 * @implements globalThis.CharacterData
	 */
	class CharacterData$3 extends Node$4 {

	  constructor(ownerDocument, localName, nodeType, data) {
	    super(ownerDocument, localName, nodeType);
	    this[VALUE$5] = String$1(data);
	  }

	  // <Mixins>
	  get isConnected() { return isConnected$1(this); }
	  get parentElement() { return parentElement$1(this); }
	  get previousSibling() { return previousSibling$2(this); }
	  get nextSibling() { return nextSibling$2(this); }

	  get previousElementSibling() { return previousElementSibling$1(this); }
	  get nextElementSibling() { return nextElementSibling$2(this); }

	  before(...nodes) { before$1(this, nodes); }
	  after(...nodes) { after$1(this, nodes); }
	  replaceWith(...nodes) { replaceWith$1(this, nodes); }
	  remove() { remove$1(this[PREV$4], this, this[NEXT$7]); }
	  // </Mixins>

	  // CharacterData only
	  /* c8 ignore start */
	  get data() { return this[VALUE$5]; }
	  set data(value) {
	    this[VALUE$5] = String$1(value);
	    moCallback$1(this, this.parentNode);
	  }

	  get nodeValue() { return this.data; }
	  set nodeValue(value) { this.data = value; }

	  get textContent() { return this.data; }
	  set textContent(value) { this.data = value; }

	  get length() { return this.data.length; }

	  substringData(offset, count) {
	    return this.data.substr(offset, count);
	  }

	  appendData(data) {
	    this.data += data;
	  }

	  insertData(offset, data) {
	    const {data: t} = this;
	    this.data = t.slice(0, offset) + data + t.slice(offset);
	  }

	  deleteData(offset, count) {
	    const {data: t} = this;
	    this.data = t.slice(0, offset) + t.slice(offset + count);
	  }

	  replaceData(offset, count, data) {
	    const {data: t} = this;
	    this.data = t.slice(0, offset) + data + t.slice(offset + count);
	  }
	  /* c8 ignore stop */

	  toJSON() {
	    const json = [];
	    characterDataAsJSON(this, json);
	    return json;
	  }
	}
	characterData.CharacterData = CharacterData$3;

	var comment = {};

	var textEscaper = {};

	const {replace} = '';

	// escape
	const ca = /[<>&\xA0]/g;

	const esca = {
	  '\xA0': '&nbsp;',
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;'
	};

	const pe = m => esca[m];

	/**
	 * Safely escape HTML entities such as `&`, `<`, `>` only.
	 * @param {string} es the input to safely escape
	 * @returns {string} the escaped input, and it **throws** an error if
	 *  the input type is unexpected, except for boolean and numbers,
	 *  converted as string.
	 */
	const escape$2 = es => replace.call(es, ca, pe);
	textEscaper.escape = escape$2;

	const {COMMENT_NODE: COMMENT_NODE$4} = constants;
	const {VALUE: VALUE$4} = symbols;
	const {escape: escape$1} = textEscaper;

	const {CharacterData: CharacterData$2} = characterData;

	/**
	 * @implements globalThis.Comment
	 */
	class Comment$3 extends CharacterData$2 {
	  constructor(ownerDocument, data = '') {
	    super(ownerDocument, '#comment', COMMENT_NODE$4, data);
	  }

	  cloneNode() {
	    const {ownerDocument, [VALUE$4]: data} = this;
	    return new Comment$3(ownerDocument, data);
	  }

	  toString() { return `<!--${escape$1(this[VALUE$4])}-->`; }
	}
	comment.Comment = Comment$3;

	var documentFragment = {};

	var nonElementParentNode = {};

	var parentNode = {};

	var matches$2 = {};

	var lib$3 = {};

	var boolbase = {
		trueFunc: function trueFunc(){
			return true;
		},
		falseFunc: function falseFunc(){
			return false;
		}
	};

	var compile$3 = {};

	var lib$2 = {};

	var parse$6 = {};

	var __spreadArray$1 = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	Object.defineProperty(parse$6, "__esModule", { value: true });
	parse$6.isTraversal = void 0;
	var reName = /^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/;
	var reEscape = /\\([\da-f]{1,6}\s?|(\s)|.)/gi;
	var actionTypes$1 = new Map([
	    ["~", "element"],
	    ["^", "start"],
	    ["$", "end"],
	    ["*", "any"],
	    ["!", "not"],
	    ["|", "hyphen"],
	]);
	var Traversals = {
	    ">": "child",
	    "<": "parent",
	    "~": "sibling",
	    "+": "adjacent",
	};
	var attribSelectors = {
	    "#": ["id", "equals"],
	    ".": ["class", "element"],
	};
	// Pseudos, whose data property is parsed as well.
	var unpackPseudos = new Set([
	    "has",
	    "not",
	    "matches",
	    "is",
	    "host",
	    "host-context",
	]);
	var traversalNames = new Set(__spreadArray$1([
	    "descendant"
	], Object.keys(Traversals).map(function (k) { return Traversals[k]; })));
	/**
	 * Attributes that are case-insensitive in HTML.
	 *
	 * @private
	 * @see https://html.spec.whatwg.org/multipage/semantics-other.html#case-sensitivity-of-selectors
	 */
	var caseInsensitiveAttributes = new Set([
	    "accept",
	    "accept-charset",
	    "align",
	    "alink",
	    "axis",
	    "bgcolor",
	    "charset",
	    "checked",
	    "clear",
	    "codetype",
	    "color",
	    "compact",
	    "declare",
	    "defer",
	    "dir",
	    "direction",
	    "disabled",
	    "enctype",
	    "face",
	    "frame",
	    "hreflang",
	    "http-equiv",
	    "lang",
	    "language",
	    "link",
	    "media",
	    "method",
	    "multiple",
	    "nohref",
	    "noresize",
	    "noshade",
	    "nowrap",
	    "readonly",
	    "rel",
	    "rev",
	    "rules",
	    "scope",
	    "scrolling",
	    "selected",
	    "shape",
	    "target",
	    "text",
	    "type",
	    "valign",
	    "valuetype",
	    "vlink",
	]);
	/**
	 * Checks whether a specific selector is a traversal.
	 * This is useful eg. in swapping the order of elements that
	 * are not traversals.
	 *
	 * @param selector Selector to check.
	 */
	function isTraversal(selector) {
	    return traversalNames.has(selector.type);
	}
	parse$6.isTraversal = isTraversal;
	var stripQuotesFromPseudos = new Set(["contains", "icontains"]);
	var quotes = new Set(['"', "'"]);
	// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152
	function funescape(_, escaped, escapedWhitespace) {
	    var high = parseInt(escaped, 16) - 0x10000;
	    // NaN means non-codepoint
	    return high !== high || escapedWhitespace
	        ? escaped
	        : high < 0
	            ? // BMP codepoint
	                String.fromCharCode(high + 0x10000)
	            : // Supplemental Plane codepoint (surrogate pair)
	                String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);
	}
	function unescapeCSS(str) {
	    return str.replace(reEscape, funescape);
	}
	function isWhitespace(c) {
	    return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
	}
	/**
	 * Parses `selector`, optionally with the passed `options`.
	 *
	 * @param selector Selector to parse.
	 * @param options Options for parsing.
	 * @returns Returns a two-dimensional array.
	 * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),
	 * the second contains the relevant tokens for that selector.
	 */
	function parse$5(selector, options) {
	    var subselects = [];
	    var endIndex = parseSelector(subselects, "" + selector, options, 0);
	    if (endIndex < selector.length) {
	        throw new Error("Unmatched selector: " + selector.slice(endIndex));
	    }
	    return subselects;
	}
	parse$6.default = parse$5;
	function parseSelector(subselects, selector, options, selectorIndex) {
	    var _a, _b;
	    if (options === void 0) { options = {}; }
	    var tokens = [];
	    var sawWS = false;
	    function getName(offset) {
	        var match = selector.slice(selectorIndex + offset).match(reName);
	        if (!match) {
	            throw new Error("Expected name, found " + selector.slice(selectorIndex));
	        }
	        var name = match[0];
	        selectorIndex += offset + name.length;
	        return unescapeCSS(name);
	    }
	    function stripWhitespace(offset) {
	        while (isWhitespace(selector.charAt(selectorIndex + offset)))
	            offset++;
	        selectorIndex += offset;
	    }
	    function isEscaped(pos) {
	        var slashCount = 0;
	        while (selector.charAt(--pos) === "\\")
	            slashCount++;
	        return (slashCount & 1) === 1;
	    }
	    function ensureNotTraversal() {
	        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {
	            throw new Error("Did not expect successive traversals.");
	        }
	    }
	    stripWhitespace(0);
	    while (selector !== "") {
	        var firstChar = selector.charAt(selectorIndex);
	        if (isWhitespace(firstChar)) {
	            sawWS = true;
	            stripWhitespace(1);
	        }
	        else if (firstChar in Traversals) {
	            ensureNotTraversal();
	            tokens.push({ type: Traversals[firstChar] });
	            sawWS = false;
	            stripWhitespace(1);
	        }
	        else if (firstChar === ",") {
	            if (tokens.length === 0) {
	                throw new Error("Empty sub-selector");
	            }
	            subselects.push(tokens);
	            tokens = [];
	            sawWS = false;
	            stripWhitespace(1);
	        }
	        else if (selector.startsWith("/*", selectorIndex)) {
	            var endIndex = selector.indexOf("*/", selectorIndex + 2);
	            if (endIndex < 0) {
	                throw new Error("Comment was not terminated");
	            }
	            selectorIndex = endIndex + 2;
	        }
	        else {
	            if (sawWS) {
	                ensureNotTraversal();
	                tokens.push({ type: "descendant" });
	                sawWS = false;
	            }
	            if (firstChar in attribSelectors) {
	                var _c = attribSelectors[firstChar], name_1 = _c[0], action = _c[1];
	                tokens.push({
	                    type: "attribute",
	                    name: name_1,
	                    action: action,
	                    value: getName(1),
	                    namespace: null,
	                    // TODO: Add quirksMode option, which makes `ignoreCase` `true` for HTML.
	                    ignoreCase: options.xmlMode ? null : false,
	                });
	            }
	            else if (firstChar === "[") {
	                stripWhitespace(1);
	                // Determine attribute name and namespace
	                var name_2 = void 0;
	                var namespace = null;
	                if (selector.charAt(selectorIndex) === "|") {
	                    namespace = "";
	                    selectorIndex += 1;
	                }
	                if (selector.startsWith("*|", selectorIndex)) {
	                    namespace = "*";
	                    selectorIndex += 2;
	                }
	                name_2 = getName(0);
	                if (namespace === null &&
	                    selector.charAt(selectorIndex) === "|" &&
	                    selector.charAt(selectorIndex + 1) !== "=") {
	                    namespace = name_2;
	                    name_2 = getName(1);
	                }
	                if ((_a = options.lowerCaseAttributeNames) !== null && _a !== void 0 ? _a : !options.xmlMode) {
	                    name_2 = name_2.toLowerCase();
	                }
	                stripWhitespace(0);
	                // Determine comparison operation
	                var action = "exists";
	                var possibleAction = actionTypes$1.get(selector.charAt(selectorIndex));
	                if (possibleAction) {
	                    action = possibleAction;
	                    if (selector.charAt(selectorIndex + 1) !== "=") {
	                        throw new Error("Expected `=`");
	                    }
	                    stripWhitespace(2);
	                }
	                else if (selector.charAt(selectorIndex) === "=") {
	                    action = "equals";
	                    stripWhitespace(1);
	                }
	                // Determine value
	                var value = "";
	                var ignoreCase = null;
	                if (action !== "exists") {
	                    if (quotes.has(selector.charAt(selectorIndex))) {
	                        var quote = selector.charAt(selectorIndex);
	                        var sectionEnd = selectorIndex + 1;
	                        while (sectionEnd < selector.length &&
	                            (selector.charAt(sectionEnd) !== quote ||
	                                isEscaped(sectionEnd))) {
	                            sectionEnd += 1;
	                        }
	                        if (selector.charAt(sectionEnd) !== quote) {
	                            throw new Error("Attribute value didn't end");
	                        }
	                        value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));
	                        selectorIndex = sectionEnd + 1;
	                    }
	                    else {
	                        var valueStart = selectorIndex;
	                        while (selectorIndex < selector.length &&
	                            ((!isWhitespace(selector.charAt(selectorIndex)) &&
	                                selector.charAt(selectorIndex) !== "]") ||
	                                isEscaped(selectorIndex))) {
	                            selectorIndex += 1;
	                        }
	                        value = unescapeCSS(selector.slice(valueStart, selectorIndex));
	                    }
	                    stripWhitespace(0);
	                    // See if we have a force ignore flag
	                    var forceIgnore = selector.charAt(selectorIndex);
	                    // If the forceIgnore flag is set (either `i` or `s`), use that value
	                    if (forceIgnore === "s" || forceIgnore === "S") {
	                        ignoreCase = false;
	                        stripWhitespace(1);
	                    }
	                    else if (forceIgnore === "i" || forceIgnore === "I") {
	                        ignoreCase = true;
	                        stripWhitespace(1);
	                    }
	                }
	                // If `xmlMode` is set, there are no rules; otherwise, use the `caseInsensitiveAttributes` list.
	                if (!options.xmlMode) {
	                    // TODO: Skip this for `exists`, as there is no value to compare to.
	                    ignoreCase !== null && ignoreCase !== void 0 ? ignoreCase : (ignoreCase = caseInsensitiveAttributes.has(name_2));
	                }
	                if (selector.charAt(selectorIndex) !== "]") {
	                    throw new Error("Attribute selector didn't terminate");
	                }
	                selectorIndex += 1;
	                var attributeSelector = {
	                    type: "attribute",
	                    name: name_2,
	                    action: action,
	                    value: value,
	                    namespace: namespace,
	                    ignoreCase: ignoreCase,
	                };
	                tokens.push(attributeSelector);
	            }
	            else if (firstChar === ":") {
	                if (selector.charAt(selectorIndex + 1) === ":") {
	                    tokens.push({
	                        type: "pseudo-element",
	                        name: getName(2).toLowerCase(),
	                    });
	                    continue;
	                }
	                var name_3 = getName(1).toLowerCase();
	                var data = null;
	                if (selector.charAt(selectorIndex) === "(") {
	                    if (unpackPseudos.has(name_3)) {
	                        if (quotes.has(selector.charAt(selectorIndex + 1))) {
	                            throw new Error("Pseudo-selector " + name_3 + " cannot be quoted");
	                        }
	                        data = [];
	                        selectorIndex = parseSelector(data, selector, options, selectorIndex + 1);
	                        if (selector.charAt(selectorIndex) !== ")") {
	                            throw new Error("Missing closing parenthesis in :" + name_3 + " (" + selector + ")");
	                        }
	                        selectorIndex += 1;
	                    }
	                    else {
	                        selectorIndex += 1;
	                        var start = selectorIndex;
	                        var counter = 1;
	                        for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {
	                            if (selector.charAt(selectorIndex) === "(" &&
	                                !isEscaped(selectorIndex)) {
	                                counter++;
	                            }
	                            else if (selector.charAt(selectorIndex) === ")" &&
	                                !isEscaped(selectorIndex)) {
	                                counter--;
	                            }
	                        }
	                        if (counter) {
	                            throw new Error("Parenthesis not matched");
	                        }
	                        data = selector.slice(start, selectorIndex - 1);
	                        if (stripQuotesFromPseudos.has(name_3)) {
	                            var quot = data.charAt(0);
	                            if (quot === data.slice(-1) && quotes.has(quot)) {
	                                data = data.slice(1, -1);
	                            }
	                            data = unescapeCSS(data);
	                        }
	                    }
	                }
	                tokens.push({ type: "pseudo", name: name_3, data: data });
	            }
	            else {
	                var namespace = null;
	                var name_4 = void 0;
	                if (firstChar === "*") {
	                    selectorIndex += 1;
	                    name_4 = "*";
	                }
	                else if (reName.test(selector.slice(selectorIndex))) {
	                    if (selector.charAt(selectorIndex) === "|") {
	                        namespace = "";
	                        selectorIndex += 1;
	                    }
	                    name_4 = getName(0);
	                }
	                else {
	                    /*
	                     * We have finished parsing the selector.
	                     * Remove descendant tokens at the end if they exist,
	                     * and return the last index, so that parsing can be
	                     * picked up from here.
	                     */
	                    if (tokens.length &&
	                        tokens[tokens.length - 1].type === "descendant") {
	                        tokens.pop();
	                    }
	                    addToken(subselects, tokens);
	                    return selectorIndex;
	                }
	                if (selector.charAt(selectorIndex) === "|") {
	                    namespace = name_4;
	                    if (selector.charAt(selectorIndex + 1) === "*") {
	                        name_4 = "*";
	                        selectorIndex += 2;
	                    }
	                    else {
	                        name_4 = getName(1);
	                    }
	                }
	                if (name_4 === "*") {
	                    tokens.push({ type: "universal", namespace: namespace });
	                }
	                else {
	                    if ((_b = options.lowerCaseTags) !== null && _b !== void 0 ? _b : !options.xmlMode) {
	                        name_4 = name_4.toLowerCase();
	                    }
	                    tokens.push({ type: "tag", name: name_4, namespace: namespace });
	                }
	            }
	        }
	    }
	    addToken(subselects, tokens);
	    return selectorIndex;
	}
	function addToken(subselects, tokens) {
	    if (subselects.length > 0 && tokens.length === 0) {
	        throw new Error("Empty sub-selector");
	    }
	    subselects.push(tokens);
	}

	var stringify$1 = {};

	var __spreadArray = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	Object.defineProperty(stringify$1, "__esModule", { value: true });
	var actionTypes = {
	    equals: "",
	    element: "~",
	    start: "^",
	    end: "$",
	    any: "*",
	    not: "!",
	    hyphen: "|",
	};
	var charsToEscape = new Set(__spreadArray(__spreadArray([], Object.keys(actionTypes)
	    .map(function (typeKey) { return actionTypes[typeKey]; })
	    .filter(Boolean)), [
	    ":",
	    "[",
	    "]",
	    " ",
	    "\\",
	    "(",
	    ")",
	    "'",
	]));
	/**
	 * Turns `selector` back into a string.
	 *
	 * @param selector Selector to stringify.
	 */
	function stringify(selector) {
	    return selector.map(stringifySubselector).join(", ");
	}
	stringify$1.default = stringify;
	function stringifySubselector(token) {
	    return token.map(stringifyToken).join("");
	}
	function stringifyToken(token) {
	    switch (token.type) {
	        // Simple types
	        case "child":
	            return " > ";
	        case "parent":
	            return " < ";
	        case "sibling":
	            return " ~ ";
	        case "adjacent":
	            return " + ";
	        case "descendant":
	            return " ";
	        case "universal":
	            return getNamespace(token.namespace) + "*";
	        case "tag":
	            return getNamespacedName(token);
	        case "pseudo-element":
	            return "::" + escapeName(token.name);
	        case "pseudo":
	            if (token.data === null)
	                return ":" + escapeName(token.name);
	            if (typeof token.data === "string") {
	                return ":" + escapeName(token.name) + "(" + escapeName(token.data) + ")";
	            }
	            return ":" + escapeName(token.name) + "(" + stringify(token.data) + ")";
	        case "attribute": {
	            if (token.name === "id" &&
	                token.action === "equals" &&
	                !token.ignoreCase &&
	                !token.namespace) {
	                return "#" + escapeName(token.value);
	            }
	            if (token.name === "class" &&
	                token.action === "element" &&
	                !token.ignoreCase &&
	                !token.namespace) {
	                return "." + escapeName(token.value);
	            }
	            var name_1 = getNamespacedName(token);
	            if (token.action === "exists") {
	                return "[" + name_1 + "]";
	            }
	            return "[" + name_1 + actionTypes[token.action] + "='" + escapeName(token.value) + "'" + (token.ignoreCase ? "i" : token.ignoreCase === false ? "s" : "") + "]";
	        }
	    }
	}
	function getNamespacedName(token) {
	    return "" + getNamespace(token.namespace) + escapeName(token.name);
	}
	function getNamespace(namespace) {
	    return namespace !== null
	        ? (namespace === "*" ? "*" : escapeName(namespace)) + "|"
	        : "";
	}
	function escapeName(str) {
	    return str
	        .split("")
	        .map(function (c) { return (charsToEscape.has(c) ? "\\" + c : c); })
	        .join("");
	}

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.stringify = exports.parse = void 0;
	__exportStar(parse$6, exports);
	var parse_1 = parse$6;
	Object.defineProperty(exports, "parse", { enumerable: true, get: function () { return __importDefault(parse_1).default; } });
	var stringify_1 = stringify$1;
	Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return __importDefault(stringify_1).default; } });
	}(lib$2));

	var sort = {};

	var procedure = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isTraversal = exports.procedure = void 0;
	exports.procedure = {
	    universal: 50,
	    tag: 30,
	    attribute: 1,
	    pseudo: 0,
	    "pseudo-element": 0,
	    descendant: -1,
	    child: -1,
	    parent: -1,
	    sibling: -1,
	    adjacent: -1,
	    _flexibleDescendant: -1,
	};
	function isTraversal(t) {
	    return exports.procedure[t.type] < 0;
	}
	exports.isTraversal = isTraversal;
	}(procedure));

	Object.defineProperty(sort, "__esModule", { value: true });
	var procedure_1$1 = procedure;
	var attributes$1 = {
	    exists: 10,
	    equals: 8,
	    not: 7,
	    start: 6,
	    end: 6,
	    any: 5,
	    hyphen: 4,
	    element: 4,
	};
	/**
	 * Sort the parts of the passed selector,
	 * as there is potential for optimization
	 * (some types of selectors are faster than others)
	 *
	 * @param arr Selector to sort
	 */
	function sortByProcedure(arr) {
	    var procs = arr.map(getProcedure);
	    for (var i = 1; i < arr.length; i++) {
	        var procNew = procs[i];
	        if (procNew < 0)
	            continue;
	        for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {
	            var token = arr[j + 1];
	            arr[j + 1] = arr[j];
	            arr[j] = token;
	            procs[j + 1] = procs[j];
	            procs[j] = procNew;
	        }
	    }
	}
	sort.default = sortByProcedure;
	function getProcedure(token) {
	    var proc = procedure_1$1.procedure[token.type];
	    if (token.type === "attribute") {
	        proc = attributes$1[token.action];
	        if (proc === attributes$1.equals && token.name === "id") {
	            // Prefer ID selectors (eg. #ID)
	            proc = 9;
	        }
	        if (token.ignoreCase) {
	            /*
	             * IgnoreCase adds some overhead, prefer "normal" token
	             * this is a binary operation, to ensure it's still an int
	             */
	            proc >>= 1;
	        }
	    }
	    else if (token.type === "pseudo") {
	        if (!token.data) {
	            proc = 3;
	        }
	        else if (token.name === "has" || token.name === "contains") {
	            proc = 0; // Expensive in any case
	        }
	        else if (Array.isArray(token.data)) {
	            // "matches" and "not"
	            proc = 0;
	            for (var i = 0; i < token.data.length; i++) {
	                // TODO better handling of complex selectors
	                if (token.data[i].length !== 1)
	                    continue;
	                var cur = getProcedure(token.data[i][0]);
	                // Avoid executing :has or :contains
	                if (cur === 0) {
	                    proc = 0;
	                    break;
	                }
	                if (cur > proc)
	                    proc = cur;
	            }
	            if (token.data.length > 1 && proc > 0)
	                proc -= 1;
	        }
	        else {
	            proc = 1;
	        }
	    }
	    return proc;
	}

	var general = {};

	var attributes = {};

	Object.defineProperty(attributes, "__esModule", { value: true });
	attributes.attributeRules = void 0;
	var boolbase_1$2 = boolbase;
	/**
	 * All reserved characters in a regex, used for escaping.
	 *
	 * Taken from XRegExp, (c) 2007-2020 Steven Levithan under the MIT license
	 * https://github.com/slevithan/xregexp/blob/95eeebeb8fac8754d54eafe2b4743661ac1cf028/src/xregexp.js#L794
	 */
	var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;
	function escapeRegex(value) {
	    return value.replace(reChars, "\\$&");
	}
	/**
	 * Attribute selectors
	 */
	attributes.attributeRules = {
	    equals: function (next, data, _a) {
	        var adapter = _a.adapter;
	        var name = data.name;
	        var value = data.value;
	        if (data.ignoreCase) {
	            value = value.toLowerCase();
	            return function (elem) {
	                var attr = adapter.getAttributeValue(elem, name);
	                return (attr != null &&
	                    attr.length === value.length &&
	                    attr.toLowerCase() === value &&
	                    next(elem));
	            };
	        }
	        return function (elem) {
	            return adapter.getAttributeValue(elem, name) === value && next(elem);
	        };
	    },
	    hyphen: function (next, data, _a) {
	        var adapter = _a.adapter;
	        var name = data.name;
	        var value = data.value;
	        var len = value.length;
	        if (data.ignoreCase) {
	            value = value.toLowerCase();
	            return function hyphenIC(elem) {
	                var attr = adapter.getAttributeValue(elem, name);
	                return (attr != null &&
	                    (attr.length === len || attr.charAt(len) === "-") &&
	                    attr.substr(0, len).toLowerCase() === value &&
	                    next(elem));
	            };
	        }
	        return function hyphen(elem) {
	            var attr = adapter.getAttributeValue(elem, name);
	            return (attr != null &&
	                (attr.length === len || attr.charAt(len) === "-") &&
	                attr.substr(0, len) === value &&
	                next(elem));
	        };
	    },
	    element: function (next, _a, _b) {
	        var name = _a.name, value = _a.value, ignoreCase = _a.ignoreCase;
	        var adapter = _b.adapter;
	        if (/\s/.test(value)) {
	            return boolbase_1$2.falseFunc;
	        }
	        var regex = new RegExp("(?:^|\\s)" + escapeRegex(value) + "(?:$|\\s)", ignoreCase ? "i" : "");
	        return function element(elem) {
	            var attr = adapter.getAttributeValue(elem, name);
	            return (attr != null &&
	                attr.length >= value.length &&
	                regex.test(attr) &&
	                next(elem));
	        };
	    },
	    exists: function (next, _a, _b) {
	        var name = _a.name;
	        var adapter = _b.adapter;
	        return function (elem) { return adapter.hasAttrib(elem, name) && next(elem); };
	    },
	    start: function (next, data, _a) {
	        var adapter = _a.adapter;
	        var name = data.name;
	        var value = data.value;
	        var len = value.length;
	        if (len === 0) {
	            return boolbase_1$2.falseFunc;
	        }
	        if (data.ignoreCase) {
	            value = value.toLowerCase();
	            return function (elem) {
	                var attr = adapter.getAttributeValue(elem, name);
	                return (attr != null &&
	                    attr.length >= len &&
	                    attr.substr(0, len).toLowerCase() === value &&
	                    next(elem));
	            };
	        }
	        return function (elem) {
	            var _a;
	            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.startsWith(value)) &&
	                next(elem);
	        };
	    },
	    end: function (next, data, _a) {
	        var adapter = _a.adapter;
	        var name = data.name;
	        var value = data.value;
	        var len = -value.length;
	        if (len === 0) {
	            return boolbase_1$2.falseFunc;
	        }
	        if (data.ignoreCase) {
	            value = value.toLowerCase();
	            return function (elem) {
	                var _a;
	                return ((_a = adapter
	                    .getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.substr(len).toLowerCase()) === value && next(elem);
	            };
	        }
	        return function (elem) {
	            var _a;
	            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.endsWith(value)) &&
	                next(elem);
	        };
	    },
	    any: function (next, data, _a) {
	        var adapter = _a.adapter;
	        var name = data.name, value = data.value;
	        if (value === "") {
	            return boolbase_1$2.falseFunc;
	        }
	        if (data.ignoreCase) {
	            var regex_1 = new RegExp(escapeRegex(value), "i");
	            return function anyIC(elem) {
	                var attr = adapter.getAttributeValue(elem, name);
	                return (attr != null &&
	                    attr.length >= value.length &&
	                    regex_1.test(attr) &&
	                    next(elem));
	            };
	        }
	        return function (elem) {
	            var _a;
	            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.includes(value)) &&
	                next(elem);
	        };
	    },
	    not: function (next, data, _a) {
	        var adapter = _a.adapter;
	        var name = data.name;
	        var value = data.value;
	        if (value === "") {
	            return function (elem) {
	                return !!adapter.getAttributeValue(elem, name) && next(elem);
	            };
	        }
	        else if (data.ignoreCase) {
	            value = value.toLowerCase();
	            return function (elem) {
	                var attr = adapter.getAttributeValue(elem, name);
	                return ((attr == null ||
	                    attr.length !== value.length ||
	                    attr.toLowerCase() !== value) &&
	                    next(elem));
	            };
	        }
	        return function (elem) {
	            return adapter.getAttributeValue(elem, name) !== value && next(elem);
	        };
	    },
	};

	var pseudoSelectors = {};

	var filters = {};

	var lib$1 = {};

	var parse$4 = {};

	// Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo
	Object.defineProperty(parse$4, "__esModule", { value: true });
	parse$4.parse = void 0;
	// Whitespace as per https://www.w3.org/TR/selectors-3/#lex is " \t\r\n\f"
	var whitespace = new Set([9, 10, 12, 13, 32]);
	var ZERO = "0".charCodeAt(0);
	var NINE = "9".charCodeAt(0);
	/**
	 * Parses an expression.
	 *
	 * @throws An `Error` if parsing fails.
	 * @returns An array containing the integer step size and the integer offset of the nth rule.
	 * @example nthCheck.parse("2n+3"); // returns [2, 3]
	 */
	function parse$3(formula) {
	    formula = formula.trim().toLowerCase();
	    if (formula === "even") {
	        return [2, 0];
	    }
	    else if (formula === "odd") {
	        return [2, 1];
	    }
	    // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?
	    var idx = 0;
	    var a = 0;
	    var sign = readSign();
	    var number = readNumber();
	    if (idx < formula.length && formula.charAt(idx) === "n") {
	        idx++;
	        a = sign * (number !== null && number !== void 0 ? number : 1);
	        skipWhitespace();
	        if (idx < formula.length) {
	            sign = readSign();
	            skipWhitespace();
	            number = readNumber();
	        }
	        else {
	            sign = number = 0;
	        }
	    }
	    // Throw if there is anything else
	    if (number === null || idx < formula.length) {
	        throw new Error("n-th rule couldn't be parsed ('" + formula + "')");
	    }
	    return [a, sign * number];
	    function readSign() {
	        if (formula.charAt(idx) === "-") {
	            idx++;
	            return -1;
	        }
	        if (formula.charAt(idx) === "+") {
	            idx++;
	        }
	        return 1;
	    }
	    function readNumber() {
	        var start = idx;
	        var value = 0;
	        while (idx < formula.length &&
	            formula.charCodeAt(idx) >= ZERO &&
	            formula.charCodeAt(idx) <= NINE) {
	            value = value * 10 + (formula.charCodeAt(idx) - ZERO);
	            idx++;
	        }
	        // Return `null` if we didn't read anything.
	        return idx === start ? null : value;
	    }
	    function skipWhitespace() {
	        while (idx < formula.length &&
	            whitespace.has(formula.charCodeAt(idx))) {
	            idx++;
	        }
	    }
	}
	parse$4.parse = parse$3;

	var compile$2 = {};

	Object.defineProperty(compile$2, "__esModule", { value: true });
	compile$2.compile = void 0;
	var boolbase_1$1 = boolbase;
	/**
	 * Returns a function that checks if an elements index matches the given rule
	 * highly optimized to return the fastest solution.
	 *
	 * @param parsed A tuple [a, b], as returned by `parse`.
	 * @returns A highly optimized function that returns whether an index matches the nth-check.
	 * @example
	 * const check = nthCheck.compile([2, 3]);
	 *
	 * check(0); // `false`
	 * check(1); // `false`
	 * check(2); // `true`
	 * check(3); // `false`
	 * check(4); // `true`
	 * check(5); // `false`
	 * check(6); // `true`
	 */
	function compile$1(parsed) {
	    var a = parsed[0];
	    // Subtract 1 from `b`, to convert from one- to zero-indexed.
	    var b = parsed[1] - 1;
	    /*
	     * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.
	     * Besides, the specification states that no elements are
	     * matched when `a` and `b` are 0.
	     *
	     * `b < 0` here as we subtracted 1 from `b` above.
	     */
	    if (b < 0 && a <= 0)
	        return boolbase_1$1.falseFunc;
	    // When `a` is in the range -1..1, it matches any element (so only `b` is checked).
	    if (a === -1)
	        return function (index) { return index <= b; };
	    if (a === 0)
	        return function (index) { return index === b; };
	    // When `b <= 0` and `a === 1`, they match any element.
	    if (a === 1)
	        return b < 0 ? boolbase_1$1.trueFunc : function (index) { return index >= b; };
	    /*
	     * Otherwise, modulo can be used to check if there is a match.
	     *
	     * Modulo doesn't care about the sign, so let's use `a`s absolute value.
	     */
	    var absA = Math.abs(a);
	    // Get `b mod a`, + a if this is negative.
	    var bMod = ((b % absA) + absA) % absA;
	    return a > 1
	        ? function (index) { return index >= b && index % absA === bMod; }
	        : function (index) { return index <= b && index % absA === bMod; };
	}
	compile$2.compile = compile$1;

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.compile = exports.parse = void 0;
	var parse_1 = parse$4;
	Object.defineProperty(exports, "parse", { enumerable: true, get: function () { return parse_1.parse; } });
	var compile_1 = compile$2;
	Object.defineProperty(exports, "compile", { enumerable: true, get: function () { return compile_1.compile; } });
	/**
	 * Parses and compiles a formula to a highly optimized function.
	 * Combination of `parse` and `compile`.
	 *
	 * If the formula doesn't match any elements,
	 * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.
	 * Otherwise, a function accepting an _index_ is returned, which returns
	 * whether or not the passed _index_ matches the formula.
	 *
	 * Note: The nth-rule starts counting at `1`, the returned function at `0`.
	 *
	 * @param formula The formula to compile.
	 * @example
	 * const check = nthCheck("2n+3");
	 *
	 * check(0); // `false`
	 * check(1); // `false`
	 * check(2); // `true`
	 * check(3); // `false`
	 * check(4); // `true`
	 * check(5); // `false`
	 * check(6); // `true`
	 */
	function nthCheck(formula) {
	    return (0, compile_1.compile)((0, parse_1.parse)(formula));
	}
	exports.default = nthCheck;
	}(lib$1));

	(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.filters = void 0;
	var nth_check_1 = __importDefault(lib$1);
	var boolbase_1 = boolbase;
	function getChildFunc(next, adapter) {
	    return function (elem) {
	        var parent = adapter.getParent(elem);
	        return parent != null && adapter.isTag(parent) && next(elem);
	    };
	}
	exports.filters = {
	    contains: function (next, text, _a) {
	        var adapter = _a.adapter;
	        return function contains(elem) {
	            return next(elem) && adapter.getText(elem).includes(text);
	        };
	    },
	    icontains: function (next, text, _a) {
	        var adapter = _a.adapter;
	        var itext = text.toLowerCase();
	        return function icontains(elem) {
	            return (next(elem) &&
	                adapter.getText(elem).toLowerCase().includes(itext));
	        };
	    },
	    // Location specific methods
	    "nth-child": function (next, rule, _a) {
	        var adapter = _a.adapter, equals = _a.equals;
	        var func = nth_check_1.default(rule);
	        if (func === boolbase_1.falseFunc)
	            return boolbase_1.falseFunc;
	        if (func === boolbase_1.trueFunc)
	            return getChildFunc(next, adapter);
	        return function nthChild(elem) {
	            var siblings = adapter.getSiblings(elem);
	            var pos = 0;
	            for (var i = 0; i < siblings.length; i++) {
	                if (equals(elem, siblings[i]))
	                    break;
	                if (adapter.isTag(siblings[i])) {
	                    pos++;
	                }
	            }
	            return func(pos) && next(elem);
	        };
	    },
	    "nth-last-child": function (next, rule, _a) {
	        var adapter = _a.adapter, equals = _a.equals;
	        var func = nth_check_1.default(rule);
	        if (func === boolbase_1.falseFunc)
	            return boolbase_1.falseFunc;
	        if (func === boolbase_1.trueFunc)
	            return getChildFunc(next, adapter);
	        return function nthLastChild(elem) {
	            var siblings = adapter.getSiblings(elem);
	            var pos = 0;
	            for (var i = siblings.length - 1; i >= 0; i--) {
	                if (equals(elem, siblings[i]))
	                    break;
	                if (adapter.isTag(siblings[i])) {
	                    pos++;
	                }
	            }
	            return func(pos) && next(elem);
	        };
	    },
	    "nth-of-type": function (next, rule, _a) {
	        var adapter = _a.adapter, equals = _a.equals;
	        var func = nth_check_1.default(rule);
	        if (func === boolbase_1.falseFunc)
	            return boolbase_1.falseFunc;
	        if (func === boolbase_1.trueFunc)
	            return getChildFunc(next, adapter);
	        return function nthOfType(elem) {
	            var siblings = adapter.getSiblings(elem);
	            var pos = 0;
	            for (var i = 0; i < siblings.length; i++) {
	                var currentSibling = siblings[i];
	                if (equals(elem, currentSibling))
	                    break;
	                if (adapter.isTag(currentSibling) &&
	                    adapter.getName(currentSibling) === adapter.getName(elem)) {
	                    pos++;
	                }
	            }
	            return func(pos) && next(elem);
	        };
	    },
	    "nth-last-of-type": function (next, rule, _a) {
	        var adapter = _a.adapter, equals = _a.equals;
	        var func = nth_check_1.default(rule);
	        if (func === boolbase_1.falseFunc)
	            return boolbase_1.falseFunc;
	        if (func === boolbase_1.trueFunc)
	            return getChildFunc(next, adapter);
	        return function nthLastOfType(elem) {
	            var siblings = adapter.getSiblings(elem);
	            var pos = 0;
	            for (var i = siblings.length - 1; i >= 0; i--) {
	                var currentSibling = siblings[i];
	                if (equals(elem, currentSibling))
	                    break;
	                if (adapter.isTag(currentSibling) &&
	                    adapter.getName(currentSibling) === adapter.getName(elem)) {
	                    pos++;
	                }
	            }
	            return func(pos) && next(elem);
	        };
	    },
	    // TODO determine the actual root element
	    root: function (next, _rule, _a) {
	        var adapter = _a.adapter;
	        return function (elem) {
	            var parent = adapter.getParent(elem);
	            return (parent == null || !adapter.isTag(parent)) && next(elem);
	        };
	    },
	    scope: function (next, rule, options, context) {
	        var equals = options.equals;
	        if (!context || context.length === 0) {
	            // Equivalent to :root
	            return exports.filters.root(next, rule, options);
	        }
	        if (context.length === 1) {
	            // NOTE: can't be unpacked, as :has uses this for side-effects
	            return function (elem) { return equals(context[0], elem) && next(elem); };
	        }
	        return function (elem) { return context.includes(elem) && next(elem); };
	    },
	    hover: dynamicStatePseudo("isHovered"),
	    visited: dynamicStatePseudo("isVisited"),
	    active: dynamicStatePseudo("isActive"),
	};
	/**
	 * Dynamic state pseudos. These depend on optional Adapter methods.
	 *
	 * @param name The name of the adapter method to call.
	 * @returns Pseudo for the `filters` object.
	 */
	function dynamicStatePseudo(name) {
	    return function dynamicPseudo(next, _rule, _a) {
	        var adapter = _a.adapter;
	        var func = adapter[name];
	        if (typeof func !== "function") {
	            return boolbase_1.falseFunc;
	        }
	        return function active(elem) {
	            return func(elem) && next(elem);
	        };
	    };
	}
	}(filters));

	var pseudos = {};

	Object.defineProperty(pseudos, "__esModule", { value: true });
	pseudos.verifyPseudoArgs = pseudos.pseudos = void 0;
	// While filters are precompiled, pseudos get called when they are needed
	pseudos.pseudos = {
	    empty: function (elem, _a) {
	        var adapter = _a.adapter;
	        return !adapter.getChildren(elem).some(function (elem) {
	            // FIXME: `getText` call is potentially expensive.
	            return adapter.isTag(elem) || adapter.getText(elem) !== "";
	        });
	    },
	    "first-child": function (elem, _a) {
	        var adapter = _a.adapter, equals = _a.equals;
	        var firstChild = adapter
	            .getSiblings(elem)
	            .find(function (elem) { return adapter.isTag(elem); });
	        return firstChild != null && equals(elem, firstChild);
	    },
	    "last-child": function (elem, _a) {
	        var adapter = _a.adapter, equals = _a.equals;
	        var siblings = adapter.getSiblings(elem);
	        for (var i = siblings.length - 1; i >= 0; i--) {
	            if (equals(elem, siblings[i]))
	                return true;
	            if (adapter.isTag(siblings[i]))
	                break;
	        }
	        return false;
	    },
	    "first-of-type": function (elem, _a) {
	        var adapter = _a.adapter, equals = _a.equals;
	        var siblings = adapter.getSiblings(elem);
	        var elemName = adapter.getName(elem);
	        for (var i = 0; i < siblings.length; i++) {
	            var currentSibling = siblings[i];
	            if (equals(elem, currentSibling))
	                return true;
	            if (adapter.isTag(currentSibling) &&
	                adapter.getName(currentSibling) === elemName) {
	                break;
	            }
	        }
	        return false;
	    },
	    "last-of-type": function (elem, _a) {
	        var adapter = _a.adapter, equals = _a.equals;
	        var siblings = adapter.getSiblings(elem);
	        var elemName = adapter.getName(elem);
	        for (var i = siblings.length - 1; i >= 0; i--) {
	            var currentSibling = siblings[i];
	            if (equals(elem, currentSibling))
	                return true;
	            if (adapter.isTag(currentSibling) &&
	                adapter.getName(currentSibling) === elemName) {
	                break;
	            }
	        }
	        return false;
	    },
	    "only-of-type": function (elem, _a) {
	        var adapter = _a.adapter, equals = _a.equals;
	        var elemName = adapter.getName(elem);
	        return adapter
	            .getSiblings(elem)
	            .every(function (sibling) {
	            return equals(elem, sibling) ||
	                !adapter.isTag(sibling) ||
	                adapter.getName(sibling) !== elemName;
	        });
	    },
	    "only-child": function (elem, _a) {
	        var adapter = _a.adapter, equals = _a.equals;
	        return adapter
	            .getSiblings(elem)
	            .every(function (sibling) { return equals(elem, sibling) || !adapter.isTag(sibling); });
	    },
	};
	function verifyPseudoArgs(func, name, subselect) {
	    if (subselect === null) {
	        if (func.length > 2) {
	            throw new Error("pseudo-selector :" + name + " requires an argument");
	        }
	    }
	    else if (func.length === 2) {
	        throw new Error("pseudo-selector :" + name + " doesn't have any arguments");
	    }
	}
	pseudos.verifyPseudoArgs = verifyPseudoArgs;

	var aliases = {};

	Object.defineProperty(aliases, "__esModule", { value: true });
	aliases.aliases = void 0;
	/**
	 * Aliases are pseudos that are expressed as selectors.
	 */
	aliases.aliases = {
	    // Links
	    "any-link": ":is(a, area, link)[href]",
	    link: ":any-link:not(:visited)",
	    // Forms
	    // https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements
	    disabled: ":is(\n        :is(button, input, select, textarea, optgroup, option)[disabled],\n        optgroup[disabled] > option,\n        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)\n    )",
	    enabled: ":not(:disabled)",
	    checked: ":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",
	    required: ":is(input, select, textarea)[required]",
	    optional: ":is(input, select, textarea):not([required])",
	    // JQuery extensions
	    // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-selectedness
	    selected: "option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",
	    checkbox: "[type=checkbox]",
	    file: "[type=file]",
	    password: "[type=password]",
	    radio: "[type=radio]",
	    reset: "[type=reset]",
	    image: "[type=image]",
	    submit: "[type=submit]",
	    parent: ":not(:empty)",
	    header: ":is(h1, h2, h3, h4, h5, h6)",
	    button: ":is(button, input[type=button])",
	    input: ":is(input, textarea, select, button)",
	    text: "input:is(:not([type!='']), [type=text])",
	};

	var subselects = {};

	(function (exports) {
	var __spreadArray = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.subselects = exports.getNextSiblings = exports.ensureIsTag = exports.PLACEHOLDER_ELEMENT = void 0;
	var boolbase_1 = boolbase;
	var procedure_1 = procedure;
	/** Used as a placeholder for :has. Will be replaced with the actual element. */
	exports.PLACEHOLDER_ELEMENT = {};
	function ensureIsTag(next, adapter) {
	    if (next === boolbase_1.falseFunc)
	        return boolbase_1.falseFunc;
	    return function (elem) { return adapter.isTag(elem) && next(elem); };
	}
	exports.ensureIsTag = ensureIsTag;
	function getNextSiblings(elem, adapter) {
	    var siblings = adapter.getSiblings(elem);
	    if (siblings.length <= 1)
	        return [];
	    var elemIndex = siblings.indexOf(elem);
	    if (elemIndex < 0 || elemIndex === siblings.length - 1)
	        return [];
	    return siblings.slice(elemIndex + 1).filter(adapter.isTag);
	}
	exports.getNextSiblings = getNextSiblings;
	var is = function (next, token, options, context, compileToken) {
	    var opts = {
	        xmlMode: !!options.xmlMode,
	        adapter: options.adapter,
	        equals: options.equals,
	    };
	    var func = compileToken(token, opts, context);
	    return function (elem) { return func(elem) && next(elem); };
	};
	/*
	 * :not, :has, :is and :matches have to compile selectors
	 * doing this in src/pseudos.ts would lead to circular dependencies,
	 * so we add them here
	 */
	exports.subselects = {
	    is: is,
	    /**
	     * `:matches` is an alias for `:is`.
	     */
	    matches: is,
	    not: function (next, token, options, context, compileToken) {
	        var opts = {
	            xmlMode: !!options.xmlMode,
	            adapter: options.adapter,
	            equals: options.equals,
	        };
	        var func = compileToken(token, opts, context);
	        if (func === boolbase_1.falseFunc)
	            return next;
	        if (func === boolbase_1.trueFunc)
	            return boolbase_1.falseFunc;
	        return function not(elem) {
	            return !func(elem) && next(elem);
	        };
	    },
	    has: function (next, subselect, options, _context, compileToken) {
	        var adapter = options.adapter;
	        var opts = {
	            xmlMode: !!options.xmlMode,
	            adapter: adapter,
	            equals: options.equals,
	        };
	        // @ts-expect-error Uses an array as a pointer to the current element (side effects)
	        var context = subselect.some(function (s) {
	            return s.some(procedure_1.isTraversal);
	        })
	            ? [exports.PLACEHOLDER_ELEMENT]
	            : undefined;
	        var compiled = compileToken(subselect, opts, context);
	        if (compiled === boolbase_1.falseFunc)
	            return boolbase_1.falseFunc;
	        if (compiled === boolbase_1.trueFunc) {
	            return function (elem) {
	                return adapter.getChildren(elem).some(adapter.isTag) && next(elem);
	            };
	        }
	        var hasElement = ensureIsTag(compiled, adapter);
	        var _a = compiled.shouldTestNextSiblings, shouldTestNextSiblings = _a === void 0 ? false : _a;
	        /*
	         * `shouldTestNextSiblings` will only be true if the query starts with
	         * a traversal (sibling or adjacent). That means we will always have a context.
	         */
	        if (context) {
	            return function (elem) {
	                context[0] = elem;
	                var childs = adapter.getChildren(elem);
	                var nextElements = shouldTestNextSiblings
	                    ? __spreadArray(__spreadArray([], childs), getNextSiblings(elem, adapter)) : childs;
	                return (next(elem) && adapter.existsOne(hasElement, nextElements));
	            };
	        }
	        return function (elem) {
	            return next(elem) &&
	                adapter.existsOne(hasElement, adapter.getChildren(elem));
	        };
	    },
	};
	}(subselects));

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.compilePseudoSelector = exports.aliases = exports.pseudos = exports.filters = void 0;
	/*
	 * Pseudo selectors
	 *
	 * Pseudo selectors are available in three forms:
	 *
	 * 1. Filters are called when the selector is compiled and return a function
	 *  that has to return either false, or the results of `next()`.
	 * 2. Pseudos are called on execution. They have to return a boolean.
	 * 3. Subselects work like filters, but have an embedded selector that will be run separately.
	 *
	 * Filters are great if you want to do some pre-processing, or change the call order
	 * of `next()` and your code.
	 * Pseudos should be used to implement simple checks.
	 */
	var boolbase_1 = boolbase;
	var css_what_1 = lib$2;
	var filters_1 = filters;
	Object.defineProperty(exports, "filters", { enumerable: true, get: function () { return filters_1.filters; } });
	var pseudos_1 = pseudos;
	Object.defineProperty(exports, "pseudos", { enumerable: true, get: function () { return pseudos_1.pseudos; } });
	var aliases_1 = aliases;
	Object.defineProperty(exports, "aliases", { enumerable: true, get: function () { return aliases_1.aliases; } });
	var subselects_1 = subselects;
	function compilePseudoSelector(next, selector, options, context, compileToken) {
	    var name = selector.name, data = selector.data;
	    if (Array.isArray(data)) {
	        return subselects_1.subselects[name](next, data, options, context, compileToken);
	    }
	    if (name in aliases_1.aliases) {
	        if (data != null) {
	            throw new Error("Pseudo " + name + " doesn't have any arguments");
	        }
	        // The alias has to be parsed here, to make sure options are respected.
	        var alias = css_what_1.parse(aliases_1.aliases[name], options);
	        return subselects_1.subselects.is(next, alias, options, context, compileToken);
	    }
	    if (name in filters_1.filters) {
	        return filters_1.filters[name](next, data, options, context);
	    }
	    if (name in pseudos_1.pseudos) {
	        var pseudo_1 = pseudos_1.pseudos[name];
	        pseudos_1.verifyPseudoArgs(pseudo_1, name, data);
	        return pseudo_1 === boolbase_1.falseFunc
	            ? boolbase_1.falseFunc
	            : next === boolbase_1.trueFunc
	                ? function (elem) { return pseudo_1(elem, options, data); }
	                : function (elem) { return pseudo_1(elem, options, data) && next(elem); };
	    }
	    throw new Error("unmatched pseudo-class :" + name);
	}
	exports.compilePseudoSelector = compilePseudoSelector;
	}(pseudoSelectors));

	Object.defineProperty(general, "__esModule", { value: true });
	general.compileGeneralSelector = void 0;
	var attributes_1 = attributes;
	var pseudo_selectors_1 = pseudoSelectors;
	/*
	 * All available rules
	 */
	function compileGeneralSelector(next, selector, options, context, compileToken) {
	    var adapter = options.adapter, equals = options.equals;
	    switch (selector.type) {
	        case "pseudo-element":
	            throw new Error("Pseudo-elements are not supported by css-select");
	        case "attribute":
	            return attributes_1.attributeRules[selector.action](next, selector, options);
	        case "pseudo":
	            return pseudo_selectors_1.compilePseudoSelector(next, selector, options, context, compileToken);
	        // Tags
	        case "tag":
	            return function tag(elem) {
	                return adapter.getName(elem) === selector.name && next(elem);
	            };
	        // Traversal
	        case "descendant":
	            if (options.cacheResults === false ||
	                typeof WeakSet === "undefined") {
	                return function descendant(elem) {
	                    var current = elem;
	                    while ((current = adapter.getParent(current))) {
	                        if (adapter.isTag(current) && next(current)) {
	                            return true;
	                        }
	                    }
	                    return false;
	                };
	            }
	            // @ts-expect-error `ElementNode` is not extending object
	            // eslint-disable-next-line no-case-declarations
	            var isFalseCache_1 = new WeakSet();
	            return function cachedDescendant(elem) {
	                var current = elem;
	                while ((current = adapter.getParent(current))) {
	                    if (!isFalseCache_1.has(current)) {
	                        if (adapter.isTag(current) && next(current)) {
	                            return true;
	                        }
	                        isFalseCache_1.add(current);
	                    }
	                }
	                return false;
	            };
	        case "_flexibleDescendant":
	            // Include element itself, only used while querying an array
	            return function flexibleDescendant(elem) {
	                var current = elem;
	                do {
	                    if (adapter.isTag(current) && next(current))
	                        return true;
	                } while ((current = adapter.getParent(current)));
	                return false;
	            };
	        case "parent":
	            return function parent(elem) {
	                return adapter
	                    .getChildren(elem)
	                    .some(function (elem) { return adapter.isTag(elem) && next(elem); });
	            };
	        case "child":
	            return function child(elem) {
	                var parent = adapter.getParent(elem);
	                return parent != null && adapter.isTag(parent) && next(parent);
	            };
	        case "sibling":
	            return function sibling(elem) {
	                var siblings = adapter.getSiblings(elem);
	                for (var i = 0; i < siblings.length; i++) {
	                    var currentSibling = siblings[i];
	                    if (equals(elem, currentSibling))
	                        break;
	                    if (adapter.isTag(currentSibling) && next(currentSibling)) {
	                        return true;
	                    }
	                }
	                return false;
	            };
	        case "adjacent":
	            return function adjacent(elem) {
	                var siblings = adapter.getSiblings(elem);
	                var lastElement;
	                for (var i = 0; i < siblings.length; i++) {
	                    var currentSibling = siblings[i];
	                    if (equals(elem, currentSibling))
	                        break;
	                    if (adapter.isTag(currentSibling)) {
	                        lastElement = currentSibling;
	                    }
	                }
	                return !!lastElement && next(lastElement);
	            };
	        case "universal":
	            return next;
	    }
	}
	general.compileGeneralSelector = compileGeneralSelector;

	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(compile$3, "__esModule", { value: true });
	compile$3.compileToken = compile$3.compileUnsafe = compile$3.compile = void 0;
	var css_what_1 = lib$2;
	var boolbase_1 = boolbase;
	var sort_1 = __importDefault(sort);
	var procedure_1 = procedure;
	var general_1 = general;
	var subselects_1 = subselects;
	/**
	 * Compiles a selector to an executable function.
	 *
	 * @param selector Selector to compile.
	 * @param options Compilation options.
	 * @param context Optional context for the selector.
	 */
	function compile(selector, options, context) {
	    var next = compileUnsafe(selector, options, context);
	    return subselects_1.ensureIsTag(next, options.adapter);
	}
	compile$3.compile = compile;
	function compileUnsafe(selector, options, context) {
	    var token = typeof selector === "string" ? css_what_1.parse(selector, options) : selector;
	    return compileToken(token, options, context);
	}
	compile$3.compileUnsafe = compileUnsafe;
	function includesScopePseudo(t) {
	    return (t.type === "pseudo" &&
	        (t.name === "scope" ||
	            (Array.isArray(t.data) &&
	                t.data.some(function (data) { return data.some(includesScopePseudo); }))));
	}
	var DESCENDANT_TOKEN = { type: "descendant" };
	var FLEXIBLE_DESCENDANT_TOKEN = {
	    type: "_flexibleDescendant",
	};
	var SCOPE_TOKEN = { type: "pseudo", name: "scope", data: null };
	/*
	 * CSS 4 Spec (Draft): 3.3.1. Absolutizing a Scope-relative Selector
	 * http://www.w3.org/TR/selectors4/#absolutizing
	 */
	function absolutize(token, _a, context) {
	    var adapter = _a.adapter;
	    // TODO Use better check if the context is a document
	    var hasContext = !!(context === null || context === void 0 ? void 0 : context.every(function (e) {
	        var parent = adapter.isTag(e) && adapter.getParent(e);
	        return e === subselects_1.PLACEHOLDER_ELEMENT || (parent && adapter.isTag(parent));
	    }));
	    for (var _i = 0, token_1 = token; _i < token_1.length; _i++) {
	        var t = token_1[_i];
	        if (t.length > 0 && procedure_1.isTraversal(t[0]) && t[0].type !== "descendant") ;
	        else if (hasContext && !t.some(includesScopePseudo)) {
	            t.unshift(DESCENDANT_TOKEN);
	        }
	        else {
	            continue;
	        }
	        t.unshift(SCOPE_TOKEN);
	    }
	}
	function compileToken(token, options, context) {
	    var _a;
	    token = token.filter(function (t) { return t.length > 0; });
	    token.forEach(sort_1.default);
	    context = (_a = options.context) !== null && _a !== void 0 ? _a : context;
	    var isArrayContext = Array.isArray(context);
	    var finalContext = context && (Array.isArray(context) ? context : [context]);
	    absolutize(token, options, finalContext);
	    var shouldTestNextSiblings = false;
	    var query = token
	        .map(function (rules) {
	        if (rules.length >= 2) {
	            var first = rules[0], second = rules[1];
	            if (first.type !== "pseudo" || first.name !== "scope") ;
	            else if (isArrayContext && second.type === "descendant") {
	                rules[1] = FLEXIBLE_DESCENDANT_TOKEN;
	            }
	            else if (second.type === "adjacent" ||
	                second.type === "sibling") {
	                shouldTestNextSiblings = true;
	            }
	        }
	        return compileRules(rules, options, finalContext);
	    })
	        .reduce(reduceRules, boolbase_1.falseFunc);
	    query.shouldTestNextSiblings = shouldTestNextSiblings;
	    return query;
	}
	compile$3.compileToken = compileToken;
	function compileRules(rules, options, context) {
	    var _a;
	    return rules.reduce(function (previous, rule) {
	        return previous === boolbase_1.falseFunc
	            ? boolbase_1.falseFunc
	            : general_1.compileGeneralSelector(previous, rule, options, context, compileToken);
	    }, (_a = options.rootFunc) !== null && _a !== void 0 ? _a : boolbase_1.trueFunc);
	}
	function reduceRules(a, b) {
	    if (b === boolbase_1.falseFunc || a === boolbase_1.trueFunc) {
	        return a;
	    }
	    if (a === boolbase_1.falseFunc || b === boolbase_1.trueFunc) {
	        return b;
	    }
	    return function combine(elem) {
	        return a(elem) || b(elem);
	    };
	}

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.aliases = exports.pseudos = exports.filters = exports.is = exports.selectOne = exports.selectAll = exports.prepareContext = exports._compileToken = exports._compileUnsafe = exports.compile = void 0;
	var DomUtils = __importStar(lib$6);
	var boolbase_1 = boolbase;
	var compile_1 = compile$3;
	var subselects_1 = subselects;
	var defaultEquals = function (a, b) { return a === b; };
	var defaultOptions = {
	    adapter: DomUtils,
	    equals: defaultEquals,
	};
	function convertOptionFormats(options) {
	    var _a, _b, _c, _d;
	    /*
	     * We force one format of options to the other one.
	     */
	    // @ts-expect-error Default options may have incompatible `Node` / `ElementNode`.
	    var opts = options !== null && options !== void 0 ? options : defaultOptions;
	    // @ts-expect-error Same as above.
	    (_a = opts.adapter) !== null && _a !== void 0 ? _a : (opts.adapter = DomUtils);
	    // @ts-expect-error `equals` does not exist on `Options`
	    (_b = opts.equals) !== null && _b !== void 0 ? _b : (opts.equals = (_d = (_c = opts.adapter) === null || _c === void 0 ? void 0 : _c.equals) !== null && _d !== void 0 ? _d : defaultEquals);
	    return opts;
	}
	function wrapCompile(func) {
	    return function addAdapter(selector, options, context) {
	        var opts = convertOptionFormats(options);
	        return func(selector, opts, context);
	    };
	}
	/**
	 * Compiles the query, returns a function.
	 */
	exports.compile = wrapCompile(compile_1.compile);
	exports._compileUnsafe = wrapCompile(compile_1.compileUnsafe);
	exports._compileToken = wrapCompile(compile_1.compileToken);
	function getSelectorFunc(searchFunc) {
	    return function select(query, elements, options) {
	        var opts = convertOptionFormats(options);
	        if (typeof query !== "function") {
	            query = compile_1.compileUnsafe(query, opts, elements);
	        }
	        var filteredElements = prepareContext(elements, opts.adapter, query.shouldTestNextSiblings);
	        return searchFunc(query, filteredElements, opts);
	    };
	}
	function prepareContext(elems, adapter, shouldTestNextSiblings) {
	    if (shouldTestNextSiblings === void 0) { shouldTestNextSiblings = false; }
	    /*
	     * Add siblings if the query requires them.
	     * See https://github.com/fb55/css-select/pull/43#issuecomment-225414692
	     */
	    if (shouldTestNextSiblings) {
	        elems = appendNextSiblings(elems, adapter);
	    }
	    return Array.isArray(elems)
	        ? adapter.removeSubsets(elems)
	        : adapter.getChildren(elems);
	}
	exports.prepareContext = prepareContext;
	function appendNextSiblings(elem, adapter) {
	    // Order matters because jQuery seems to check the children before the siblings
	    var elems = Array.isArray(elem) ? elem.slice(0) : [elem];
	    for (var i = 0; i < elems.length; i++) {
	        var nextSiblings = subselects_1.getNextSiblings(elems[i], adapter);
	        elems.push.apply(elems, nextSiblings);
	    }
	    return elems;
	}
	/**
	 * @template Node The generic Node type for the DOM adapter being used.
	 * @template ElementNode The Node type for elements for the DOM adapter being used.
	 * @param elems Elements to query. If it is an element, its children will be queried..
	 * @param query can be either a CSS selector string or a compiled query function.
	 * @param [options] options for querying the document.
	 * @see compile for supported selector queries.
	 * @returns All matching elements.
	 *
	 */
	exports.selectAll = getSelectorFunc(function (query, elems, options) {
	    return query === boolbase_1.falseFunc || !elems || elems.length === 0
	        ? []
	        : options.adapter.findAll(query, elems);
	});
	/**
	 * @template Node The generic Node type for the DOM adapter being used.
	 * @template ElementNode The Node type for elements for the DOM adapter being used.
	 * @param elems Elements to query. If it is an element, its children will be queried..
	 * @param query can be either a CSS selector string or a compiled query function.
	 * @param [options] options for querying the document.
	 * @see compile for supported selector queries.
	 * @returns the first match, or null if there was no match.
	 */
	exports.selectOne = getSelectorFunc(function (query, elems, options) {
	    return query === boolbase_1.falseFunc || !elems || elems.length === 0
	        ? null
	        : options.adapter.findOne(query, elems);
	});
	/**
	 * Tests whether or not an element is matched by query.
	 *
	 * @template Node The generic Node type for the DOM adapter being used.
	 * @template ElementNode The Node type for elements for the DOM adapter being used.
	 * @param elem The element to test if it matches the query.
	 * @param query can be either a CSS selector string or a compiled query function.
	 * @param [options] options for querying the document.
	 * @see compile for supported selector queries.
	 * @returns
	 */
	function is(elem, query, options) {
	    var opts = convertOptionFormats(options);
	    return (typeof query === "function" ? query : compile_1.compile(query, opts))(elem);
	}
	exports.is = is;
	/**
	 * Alias for selectAll(query, elems, options).
	 * @see [compile] for supported selector queries.
	 */
	exports.default = exports.selectAll;
	// Export filters, pseudos and aliases to allow users to supply their own.
	var pseudo_selectors_1 = pseudoSelectors;
	Object.defineProperty(exports, "filters", { enumerable: true, get: function () { return pseudo_selectors_1.filters; } });
	Object.defineProperty(exports, "pseudos", { enumerable: true, get: function () { return pseudo_selectors_1.pseudos; } });
	Object.defineProperty(exports, "aliases", { enumerable: true, get: function () { return pseudo_selectors_1.aliases; } });
	}(lib$3));

	const CSSselect = lib$3;

	const {ELEMENT_NODE: ELEMENT_NODE$7, TEXT_NODE: TEXT_NODE$5} = constants;
	const {ignoreCase: ignoreCase$1} = utils;

	const {isArray} = Array;

	/* c8 ignore start */
	const isTag = ({nodeType}) => nodeType === ELEMENT_NODE$7;

	const existsOne = (test, elements) => elements.some(
	  element => isTag(element) && (
	    test(element) ||
	    existsOne(test, getChildren(element))
	  )
	);

	const getAttributeValue = (element, name) => element.getAttribute(name);

	const getChildren = ({childNodes}) => childNodes;

	const getName$1 = (element) => {
	  const {localName} = element;
	  return ignoreCase$1(element) ? localName.toLowerCase() : localName;
	};

	const getParent = ({parentNode}) => parentNode;

	const getSiblings = element => {
	  const {parentNode} = element;
	  return parentNode ? getChildren(parentNode) : element;
	};

	const getText = node => {
	  if (isArray(node))
	    return node.map(getText).join('');
	  if (isTag(node))
	    return getText(getChildren(node));
	  if (node.nodeType === TEXT_NODE$5)
	    return node.data;
	  return '';
	};

	const hasAttrib = (element, name) => element.hasAttribute(name);

	const removeSubsets = nodes => {
	  let {length} = nodes;
	  while (length--) {
	    const node = nodes[length];
	    if (length && -1 < nodes.lastIndexOf(node, length - 1)) {
	      nodes.splice(length, 1);
	      continue;
	    }
	    for (let {parentNode} = node; parentNode; parentNode = parentNode.parentNode) {
	      if (nodes.includes(parentNode)) {
	        nodes.splice(length, 1);
	        break;
	      }
	    }
	  }
	  return nodes;
	};

	const findAll = (test, nodes) => {
	  const matches = [];
	  for (const node of nodes) {
	    if (isTag(node)) {
	      if (test(node))
	        matches.push(node);
	      matches.push(...findAll(test, getChildren(node)));
	    }
	  }
	  return matches;
	};

	const findOne = (test, nodes) => {
	  for (let node of nodes)
	    if (test(node) || (node = findOne(test, getChildren(node))))
	      return node;
	  return null;
	};
	/* c8 ignore stop */

	const adapter = {
	  isTag,
	  existsOne,
	  getAttributeValue,
	  getChildren,
	  getName: getName$1,
	  getParent,
	  getSiblings,
	  getText,
	  hasAttrib,
	  removeSubsets,
	  findAll,
	  findOne
	};

	const prepareMatch$2 = (element, selectors) => {
	  return CSSselect.compile(selectors, {
	    xmlMode: !ignoreCase$1(element),
	    adapter
	  });
	};
	matches$2.prepareMatch = prepareMatch$2;

	const matches$1 = (element, selectors) => {
	  return CSSselect.is(element, selectors, {
	    strict: true,
	    xmlMode: !ignoreCase$1(element),
	    adapter
	  });
	};
	matches$2.matches = matches$1;

	var text = {};

	const {TEXT_NODE: TEXT_NODE$4} = constants;
	const {VALUE: VALUE$3} = symbols;
	const {escape} = textEscaper;

	const {CharacterData: CharacterData$1} = characterData;

	/**
	 * @implements globalThis.Text
	 */
	class Text$5 extends CharacterData$1 {
	  constructor(ownerDocument, data = '') {
	    super(ownerDocument, '#text', TEXT_NODE$4, data);
	  }

	  get wholeText() {
	    const text = [];
	    let {previousSibling, nextSibling} = this;
	    while (previousSibling) {
	      if (previousSibling.nodeType === TEXT_NODE$4)
	        text.unshift(previousSibling[VALUE$3]);
	      else
	        break;
	      previousSibling = previousSibling.previousSibling;
	    }
	    text.push(this[VALUE$3]);
	    while (nextSibling) {
	      if (nextSibling.nodeType === TEXT_NODE$4)
	        text.push(nextSibling[VALUE$3]);
	      else
	        break;
	      nextSibling = nextSibling.nextSibling;
	    }
	    return text.join('');
	  }

	  cloneNode() {
	    const {ownerDocument, [VALUE$3]: data} = this;
	    return new Text$5(ownerDocument, data);
	  }

	  toString() { return escape(this[VALUE$3]); }
	}
	text.Text = Text$5;

	// https://dom.spec.whatwg.org/#interface-parentnode
	// Document, DocumentFragment, Element

	const {
	  ATTRIBUTE_NODE: ATTRIBUTE_NODE$2,
	  DOCUMENT_FRAGMENT_NODE: DOCUMENT_FRAGMENT_NODE$4,
	  ELEMENT_NODE: ELEMENT_NODE$6,
	  TEXT_NODE: TEXT_NODE$3,
	  NODE_END: NODE_END$2,
	  COMMENT_NODE: COMMENT_NODE$3
	} = constants;

	const {PRIVATE: PRIVATE$3, END: END$8, NEXT: NEXT$6, PREV: PREV$3, START: START$2, VALUE: VALUE$2} = symbols;

	const {prepareMatch: prepareMatch$1} = matches$2;
	const {previousSibling: previousSibling$1, nextSibling: nextSibling$1} = node;
	const {getEnd: getEnd$1, knownAdjacent: knownAdjacent$1, knownBoundaries: knownBoundaries$1, knownSegment, knownSiblings: knownSiblings$2, localCase: localCase$1} = utils;

	const {Node: Node$3} = node$1;
	const {Text: Text$4} = text;
	const {NodeList: NodeList$4} = nodeList;

	const {moCallback} = mutationObserver;
	const {connectedCallback} = customElementRegistry;

	const {nextElementSibling: nextElementSibling$1} = nonDocumentTypeChildNode;

	const isNode = node => node instanceof Node$3;

	const insert = (parentNode, child, nodes) => {
	  const {ownerDocument} = parentNode;
	  for (const node of nodes)
	    parentNode.insertBefore(
	      isNode(node) ? node : new Text$4(ownerDocument, node),
	      child
	    );
	};

	/** @typedef {{
	    [typeof NEXT]: NodeStruct,
	    [typeof PREV]: NodeStruct,
	    [typeof START]: NodeStruct,
	    nodeType: typeof ATTRIBUTE_NODE | typeof DOCUMENT_FRAGMENT_NODE | typeof ELEMENT_NODE | typeof TEXT_NODE | typeof NODE_END | typeof COMMENT_NODE,
	    ownerDocument: Document,
	    parentNode: ParentNode,
	}} NodeStruct */

	class ParentNode$2 extends Node$3 {
	  constructor(ownerDocument, localName, nodeType) {
	    super(ownerDocument, localName, nodeType);
	    this[PRIVATE$3] = null;
	    /** @type {NodeStruct} */
	    this[NEXT$6] = this[END$8] = {
	      [NEXT$6]: null,
	      [PREV$3]: this,
	      [START$2]: this,
	      nodeType: NODE_END$2,
	      ownerDocument: this.ownerDocument,
	      parentNode: null
	    };
	  }

	  get childNodes() {
	    const childNodes = new NodeList$4;
	    let {firstChild} = this;
	    while (firstChild) {
	      childNodes.push(firstChild);
	      firstChild = nextSibling$1(firstChild);
	    }
	    return childNodes;
	  }

	  get children() {
	    const children = new NodeList$4;
	    let {firstElementChild} = this;
	    while (firstElementChild) {
	      children.push(firstElementChild);
	      firstElementChild = nextElementSibling$1(firstElementChild);
	    }
	    return children;
	  }

	  get firstChild() {
	    let {[NEXT$6]: next, [END$8]: end} = this;
	    while (next.nodeType === ATTRIBUTE_NODE$2)
	      next = next[NEXT$6];
	    return next === end ? null : next;
	  }

	  get firstElementChild() {
	    let {firstChild} = this;
	    while (firstChild) {
	      if (firstChild.nodeType === ELEMENT_NODE$6)
	        return firstChild;
	      firstChild = nextSibling$1(firstChild);
	    }
	    return null;
	  }

	  get lastChild() {
	    const prev = this[END$8][PREV$3];
	    switch (prev.nodeType) {
	      case NODE_END$2:
	        return prev[START$2];
	      case ATTRIBUTE_NODE$2:
	        return null;
	    }
	    return prev === this ? null : prev;
	  }

	  get lastElementChild() {
	    let {lastChild} = this;
	    while (lastChild) {
	      if (lastChild.nodeType === ELEMENT_NODE$6)
	        return lastChild;
	      lastChild = previousSibling$1(lastChild);
	    }
	    return null;
	  }

	  get childElementCount() {
	    return this.children.length;
	  }

	  prepend(...nodes) {
	    insert(this, this.firstChild, nodes);
	  }

	  append(...nodes) {
	    insert(this, this[END$8], nodes);
	  }

	  replaceChildren(...nodes) {
	    let {[NEXT$6]: next, [END$8]: end} = this;
	    while (next !== end && next.nodeType === ATTRIBUTE_NODE$2)
	      next = next[NEXT$6];
	    while (next !== end) {
	      const after = getEnd$1(next)[NEXT$6];
	      next.remove();
	      next = after;
	    }
	    if (nodes.length)
	      insert(this, end, nodes);
	  }

	  getElementsByClassName(className) {
	    const elements = new NodeList$4;
	    let {[NEXT$6]: next, [END$8]: end} = this;
	    while (next !== end) {
	      if (
	        next.nodeType === ELEMENT_NODE$6 &&
	        next.hasAttribute('class') &&
	        next.classList.has(className)
	      )
	        elements.push(next);
	      next = next[NEXT$6];
	    }
	    return elements;
	  }

	  getElementsByTagName(tagName) {
	    const elements = new NodeList$4;
	    let {[NEXT$6]: next, [END$8]: end} = this;
	    while (next !== end) {
	      if (next.nodeType === ELEMENT_NODE$6 && (
	        next.localName === tagName ||
	        localCase$1(next) === tagName
	      ))
	        elements.push(next);
	      next = next[NEXT$6];
	    }
	    return elements;
	  }

	  querySelector(selectors) {
	    const matches = prepareMatch$1(this, selectors);
	    let {[NEXT$6]: next, [END$8]: end} = this;
	    while (next !== end) {
	      if (next.nodeType === ELEMENT_NODE$6 && matches(next))
	        return next;
	      next = next[NEXT$6];
	    }
	    return null;
	  }

	  querySelectorAll(selectors) {
	    const matches = prepareMatch$1(this, selectors);
	    const elements = new NodeList$4;
	    let {[NEXT$6]: next, [END$8]: end} = this;
	    while (next !== end) {
	      if (next.nodeType === ELEMENT_NODE$6 && matches(next))
	        elements.push(next);
	      next = next[NEXT$6];
	    }
	    return elements;
	  }

	  appendChild(node) {
	    return this.insertBefore(node, this[END$8]);
	  }

	  contains(node) {
	    let parentNode = node;
	    while (parentNode && parentNode !== this)
	      parentNode = parentNode.parentNode;
	    return parentNode === this;
	  }

	  insertBefore(node, before = null) {
	    if (node === before)
	      return node;
	    if (node === this)
	      throw new Error('unable to append a node to itself');
	    const next = before || this[END$8];
	    switch (node.nodeType) {
	      case ELEMENT_NODE$6:
	        node.remove();
	        node.parentNode = this;
	        knownBoundaries$1(next[PREV$3], node, next);
	        moCallback(node, null);
	        connectedCallback(node);
	        break;
	      case DOCUMENT_FRAGMENT_NODE$4: {
	        let {[PRIVATE$3]: parentNode, firstChild, lastChild} = node;
	        if (firstChild) {
	          knownSegment(next[PREV$3], firstChild, lastChild, next);
	          knownAdjacent$1(node, node[END$8]);
	          if (parentNode)
	            parentNode.replaceChildren();
	          do {
	            firstChild.parentNode = this;
	            moCallback(firstChild, null);
	            if (firstChild.nodeType === ELEMENT_NODE$6)
	              connectedCallback(firstChild);
	          } while (
	            firstChild !== lastChild &&
	            (firstChild = nextSibling$1(firstChild))
	          );
	        }
	        break;
	      }
	      case TEXT_NODE$3:
	      case COMMENT_NODE$3:
	        node.remove();
	      /* eslint no-fallthrough:0 */
	      // this covers DOCUMENT_TYPE_NODE too
	      default:
	        node.parentNode = this;
	        knownSiblings$2(next[PREV$3], node, next);
	        moCallback(node, null);
	        break;
	    }
	    return node;
	  }

	  normalize() {
	    let {[NEXT$6]: next, [END$8]: end} = this;
	    while (next !== end) {
	      const {[NEXT$6]: $next, [PREV$3]: $prev, nodeType} = next;
	      if (nodeType === TEXT_NODE$3) {
	        if (!next[VALUE$2])
	          next.remove();
	        else if ($prev && $prev.nodeType === TEXT_NODE$3) {
	          $prev.textContent += next.textContent;
	          next.remove();
	        }
	      }
	      next = $next;
	    }
	  }

	  removeChild(node) {
	    if (node.parentNode !== this)
	      throw new Error('node is not a child');
	    node.remove();
	    return node;
	  }

	  replaceChild(node, replaced) {
	    const next = getEnd$1(replaced)[NEXT$6];
	    replaced.remove();
	    this.insertBefore(node, next);
	    return replaced;
	  }
	}
	parentNode.ParentNode = ParentNode$2;

	// https://dom.spec.whatwg.org/#interface-nonelementparentnode
	// Document, DocumentFragment

	const {ELEMENT_NODE: ELEMENT_NODE$5} = constants;
	const {END: END$7, NEXT: NEXT$5} = symbols;
	const {nonElementAsJSON} = jsdon;

	const {ParentNode: ParentNode$1} = parentNode;

	class NonElementParentNode$3 extends ParentNode$1 {
	  getElementById(id) {
	    let {[NEXT$5]: next, [END$7]: end} = this;
	    while (next !== end) {
	      if (next.nodeType === ELEMENT_NODE$5 && next.id === id)
	        return next;
	      next = next[NEXT$5];
	    }
	    return null;
	  }

	  cloneNode(deep) {
	    const {ownerDocument, constructor} = this;
	    const nonEPN = new constructor(ownerDocument);
	    if (deep) {
	      const {[END$7]: end} = nonEPN;
	      for (const node of this.childNodes)
	        nonEPN.insertBefore(node.cloneNode(deep), end);
	    }
	    return nonEPN; 
	  }

	  toString() {
	    const {childNodes, localName} = this;
	    return `<${localName}>${childNodes.join('')}</${localName}>`;
	  }

	  toJSON() {
	    const json = [];
	    nonElementAsJSON(this, json);
	    return json;
	  }
	}
	nonElementParentNode.NonElementParentNode = NonElementParentNode$3;

	const {DOCUMENT_FRAGMENT_NODE: DOCUMENT_FRAGMENT_NODE$3} = constants;
	const {NonElementParentNode: NonElementParentNode$2} = nonElementParentNode;

	/**
	 * @implements globalThis.DocumentFragment
	 */
	class DocumentFragment$2 extends NonElementParentNode$2 {
	  constructor(ownerDocument) {
	    super(ownerDocument, '#document-fragment', DOCUMENT_FRAGMENT_NODE$3);
	  }
	}
	documentFragment.DocumentFragment = DocumentFragment$2;

	var documentType = {};

	const {DOCUMENT_TYPE_NODE: DOCUMENT_TYPE_NODE$2} = constants;
	const {documentTypeAsJSON} = jsdon;

	const {Node: Node$2} = node$1;

	/**
	 * @implements globalThis.DocumentType
	 */
	class DocumentType$3 extends Node$2 {
	  constructor(ownerDocument, name, publicId = '', systemId = '') {
	    super(ownerDocument, '#document-type', DOCUMENT_TYPE_NODE$2);
	    this.name = name;
	    this.publicId = publicId;
	    this.systemId = systemId;
	  }

	  cloneNode() {
	    const {ownerDocument, name, publicId, systemId} = this;
	    return new DocumentType$3(ownerDocument, name, publicId, systemId);
	  }

	  toString() {
	    const {name, publicId, systemId} = this;
	    const hasPublic = 0 < publicId.length;
	    const str = [name];
	    if (hasPublic)
	      str.push('PUBLIC', `"${publicId}"`);
	    if (systemId.length) {
	      if (!hasPublic)
	        str.push('SYSTEM');
	      str.push(`"${systemId}"`);
	    }
	    return `<!DOCTYPE ${str.join(' ')}>`;
	  }

	  toJSON() {
	    const json = [];
	    documentTypeAsJSON(this, json);
	    return json;
	  }
	}
	documentType.DocumentType = DocumentType$3;

	var element$2 = {};

	var stringMap = {};

	var cjs = camel => camel.replace(/(([A-Z0-9])([A-Z0-9][a-z]))|(([a-z])([A-Z]))/g, '$2$5-$3$6')
	                             .toLowerCase();

	const uhyphen$1 = (m => /* c8 ignore start */ m.__esModule ? m.default : m /* c8 ignore stop */)(cjs);
	const {setPrototypeOf: setPrototypeOf$2} = object;

	const refs$1 = new WeakMap;

	const key = name => `data-${uhyphen$1(name)}`;
	const prop = name => name.slice(5).replace(/-([a-z])/g, (_, $1) => $1.toUpperCase());

	const handler$2 = {
	  get(dataset, name) {
	    if (name in dataset)
	      return refs$1.get(dataset).getAttribute(key(name));
	  },

	  set(dataset, name, value) {
	    dataset[name] = value;
	    refs$1.get(dataset).setAttribute(key(name), value);
	    return true;
	  },

	  deleteProperty(dataset, name) {
	    if (name in dataset)
	      refs$1.get(dataset).removeAttribute(key(name));
	    return delete dataset[name];
	  }
	};

	/**
	 * @implements globalThis.DOMStringMap
	 */
	class DOMStringMap$1 {
	  /**
	   * @param {Element} ref
	   */
	  constructor(ref) {
	    for (const {name, value} of ref.attributes) {
	      if (/^data-/.test(name))
	        this[prop(name)] = value;
	    }
	    refs$1.set(this, ref);
	    return new Proxy(this, handler$2);
	  }
	}
	stringMap.DOMStringMap = DOMStringMap$1;

	setPrototypeOf$2(DOMStringMap$1.prototype, null);

	var tokenList = {};

	const {OWNER_ELEMENT} = symbols;
	const {setAttribute: setAttribute$1} = attributes$2;

	const {Attr: Attr$4} = attr;

	const {add} = Set.prototype;
	const addTokens = (self, tokens) => {
	  for (const token of tokens) {
	    if (token)
	      add.call(self, token);
	  }
	};

	const update = ({[OWNER_ELEMENT]: ownerElement, value}) => {
	  const attribute = ownerElement.getAttributeNode('class');
	  if (attribute)
	    attribute.value = value;
	  else
	    setAttribute$1(
	      ownerElement,
	      new Attr$4(ownerElement.ownerDocument, 'class', value)
	    );
	};

	/**
	 * @implements globalThis.DOMTokenList
	 */
	class DOMTokenList$1 extends Set {

	  constructor(ownerElement) {
	    super();
	    this[OWNER_ELEMENT] = ownerElement;
	    const attribute = ownerElement.getAttributeNode('class');
	    if (attribute)
	      addTokens(this, attribute.value.split(/\s+/));
	  }

	  get length() { return this.size; }

	  get value() { return [...this].join(' '); }

	  /**
	   * @param  {...string} tokens
	   */
	  add(...tokens) {
	    addTokens(this, tokens);
	    update(this);
	  }

	  /**
	   * @param {string} token
	   */
	  contains(token) { return this.has(token); }

	  /**
	   * @param  {...string} tokens
	   */
	  remove(...tokens) {
	    for (const token of tokens)
	      this.delete(token);
	    update(this);
	  }

	  /**
	   * @param {string} token
	   * @param {boolean?} force
	   */
	  toggle(token, force) {
	    if (this.has(token)) {
	      if (force)
	        return true;
	      this.delete(token);
	      update(this);
	    }
	    else if (force || arguments.length === 1) {
	      super.add(token);
	      update(this);
	      return true;
	    }
	    return false;
	  }

	  /**
	   * @param {string} token
	   * @param {string} newToken
	   */
	  replace(token, newToken) {
	    if (this.has(token)) {
	      this.delete(token);
	      super.add(newToken);
	      update(this);
	      return true;
	    }
	    return false;
	  }

	  /**
	   * @param {string} token
	   */
	  supports() { return true; }
	}
	tokenList.DOMTokenList = DOMTokenList$1;

	var cssStyleDeclaration = {};

	const uhyphen = (m => /* c8 ignore start */ m.__esModule ? m.default : m /* c8 ignore stop */)(cjs);

	const {CHANGED, PRIVATE: PRIVATE$2, VALUE: VALUE$1} = symbols;

	const refs = new WeakMap;

	const getKeys = style => [...style.keys()].filter(key => key !== PRIVATE$2);

	const updateKeys = style => {
	  const attr = refs.get(style).getAttributeNode('style');
	  if (!attr || attr[CHANGED] || style.get(PRIVATE$2) !== attr) {
	    style.clear();
	    if (attr) {
	      style.set(PRIVATE$2, attr);
	      for (const rule of attr[VALUE$1].split(/\s*;\s*/)) {
	        const pair = rule.split(/\s*:\s*/);
	        if (1 < pair.length) {
	          let [key, value] = pair;
	          key = key.trim();
	          value = value.trim();
	          if (key && value)
	            style.set(key, value);
	        }
	      }
	    }
	  }
	  return attr;
	};

	const handler$1 = {
	  get(style, name) {
	    if (name in prototype)
	      return style[name];
	    updateKeys(style);
	    if (name === 'length')
	      return getKeys(style).length;
	    if (/^\d+$/.test(name))
	      return getKeys(style)[name];
	    return style.get(uhyphen(name));
	  },

	  set(style, name, value) {
	    if (name === 'cssText')
	      style[name] = value;
	    else {
	      let attr = updateKeys(style);
	      if (value == null)
	        style.delete(uhyphen(name));
	      else
	        style.set(uhyphen(name), value);
	      if (!attr) {
	        const element = refs.get(style);
	        attr = element.ownerDocument.createAttribute('style');
	        element.setAttributeNode(attr);
	        style.set(PRIVATE$2, attr);
	      }
	      attr[CHANGED] = false;
	      attr[VALUE$1] = style.toString();
	    }
	    return true;
	  }
	};

	/**
	 * @implements globalThis.CSSStyleDeclaration
	 */
	class CSSStyleDeclaration$2 extends Map {
	  constructor(element) {
	    super();
	    refs.set(this, element);
	    /* c8 ignore start */
	    return new Proxy(this, handler$1);
	    /* c8 ignore stop */
	  }

	  get cssText() {
	    return this.toString();
	  }

	  set cssText(value) {
	    refs.get(this).setAttribute('style', value);
	  }

	  [Symbol.iterator]() {
	    const keys = getKeys(this[PRIVATE$2]);
	    const {length} = keys;
	    let i = 0;
	    return {
	      next() {
	        const done = i === length;
	        return {done, value: done ? null : keys[i++]};
	      }
	    };
	  }

	  get[PRIVATE$2]() { return this; }

	  toString() {
	    const self = this[PRIVATE$2];
	    updateKeys(self);
	    const cssText = [];
	    self.forEach(push, cssText);
	    return cssText.join(';');
	  }
	}
	cssStyleDeclaration.CSSStyleDeclaration = CSSStyleDeclaration$2;

	const {prototype} = CSSStyleDeclaration$2;

	function push(value, key) {
	  if (key !== PRIVATE$2)
	    this.push(`${key}:${value}`);
	}

	var event = {};

	// https://dom.spec.whatwg.org/#interface-event

	/* c8 ignore start */

	// Node 15 has Event but 14 and 12 don't

	const BUBBLING_PHASE = 3;
	const CAPTURING_PHASE = 1;

	/**
	 * @implements globalThis.Event
	 */
	const GlobalEvent = typeof Event === 'function' ?
	  Event :
	  class Event {
	    static get BUBBLING_PHASE() { return BUBBLING_PHASE; }
	    static get CAPTURING_PHASE() { return CAPTURING_PHASE; }

	    constructor(type, eventInitDict = {}) {
	      this.type = type;
	      this.bubbles = !!eventInitDict.bubbles;
	      this.cancelBubble = false;
	      this._stopImmediatePropagationFlag = false;
	      this.cancelable = !!eventInitDict.cancelable;
	      this.eventPhase = this.BUBBLING_PHASE;
	      this.timeStamp = Date.now();
	      this.defaultPrevented = false;
	      this.originalTarget = null;
	      this.returnValue = null;
	      this.srcElement = null;
	      this.target = null;
	    }

	    get BUBBLING_PHASE() { return BUBBLING_PHASE; }
	    get CAPTURING_PHASE() { return CAPTURING_PHASE; }

	    preventDefault() { this.defaultPrevented = true; }

	    // TODO: what do these do in native NodeJS Event ?
	    stopPropagation() {
	      this.cancelBubble = true;
	    }
	    
	    stopImmediatePropagation() {
	      this._stopImmediatePropagationFlag = true;
	    }
	  };



	/**
	 * @implements globalThis.Event
	 */
	class DOMEvent extends GlobalEvent {
	    // specs: "set this’s stop propagation flag and this’s stop immediate propagation flag"
	    // https://dom.spec.whatwg.org/#dom-event-stopimmediatepropagation
	    // but Node don't do that so for now we extend it
	    stopImmediatePropagation() {
	      super.stopPropagation();
	      if (typeof super.stopImmediatePropagation === 'function')
	        super.stopImmediatePropagation();
	    }
	  }
	  

	event.Event = DOMEvent;

	var namedNodeMap = {};

	/**
	 * @implements globalThis.NamedNodeMap
	 */
	class NamedNodeMap$2 extends Array {
	  constructor(ownerElement) {
	    super();
	    this.ownerElement = ownerElement;
	  }

	  getNamedItem(name) {
	    return this.ownerElement.getAttributeNode(name);
	  }

	  setNamedItem(attr) {
	    this.ownerElement.setAttributeNode(attr);
	    this.unshift(attr);
	  }

	  removeNamedItem(name) {
	    const item = this.getNamedItem(name);
	    this.ownerElement.removeAttribute(name);
	    this.splice(this.indexOf(item), 1);
	  }

	  item(index) {
	    return index < this.length ? this[index] : null;
	  }

	  /* c8 ignore start */
	  getNamedItemNS(_, name) {
	    return this.getNamedItem(name);
	  }

	  setNamedItemNS(_, attr) {
	    return this.setNamedItem(attr);
	  }

	  removeNamedItemNS(_, name) {
	    return this.removeNamedItem(name);
	  }
	  /* c8 ignore stop */
	}
	namedNodeMap.NamedNodeMap = NamedNodeMap$2;

	var shadowRoot = {};

	const {DOCUMENT_FRAGMENT_NODE: DOCUMENT_FRAGMENT_NODE$2} = constants;
	const {NonElementParentNode: NonElementParentNode$1} = nonElementParentNode;

	/**
	 * @implements globalThis.ShadowRoot
	 */
	class ShadowRoot$2 extends NonElementParentNode$1 {
	  constructor(ownerDocument) {
	    super(ownerDocument, '#shadow-root', DOCUMENT_FRAGMENT_NODE$2);
	  }
	}
	shadowRoot.ShadowRoot = ShadowRoot$2;

	// https://dom.spec.whatwg.org/#interface-element

	const {
	  ATTRIBUTE_NODE: ATTRIBUTE_NODE$1,
	  COMMENT_NODE: COMMENT_NODE$2,
	  ELEMENT_NODE: ELEMENT_NODE$4,
	  NODE_END: NODE_END$1,
	  TEXT_NODE: TEXT_NODE$2,
	  SVG_NAMESPACE: SVG_NAMESPACE$1
	} = constants;

	const {
	  setAttribute, removeAttribute, numericAttribute: numericAttribute$2, stringAttribute: stringAttribute$5
	} = attributes$2;

	const {
	  CLASS_LIST, DATASET, STYLE, END: END$6, NEXT: NEXT$4, PREV: PREV$2, START: START$1, MIME: MIME$3, CUSTOM_ELEMENTS: CUSTOM_ELEMENTS$2
	} = symbols;

	const {
	  ignoreCase,
	  knownAdjacent,
	  localCase
	} = utils;

	const {elementAsJSON} = jsdon;
	const {matches, prepareMatch} = matches$2;
	const {parseFromString: parseFromString$1} = parseFromString$3;

	const {isConnected, parentElement, previousSibling, nextSibling} = node;
	const {previousElementSibling, nextElementSibling} = nonDocumentTypeChildNode;

	const {before, after, replaceWith, remove} = childNode;
	const {ParentNode} = parentNode;

	const {DOMStringMap} = stringMap;
	const {DOMTokenList} = tokenList;

	const {CSSStyleDeclaration: CSSStyleDeclaration$1} = cssStyleDeclaration;
	const {Event: Event$5} = event;
	const {NamedNodeMap: NamedNodeMap$1} = namedNodeMap;
	const {ShadowRoot: ShadowRoot$1} = shadowRoot;
	const {NodeList: NodeList$3} = nodeList;
	const {Attr: Attr$3} = attr;
	const {Text: Text$3} = text;

	// <utils>
	const attributesHandler = {
	  get(target, key) {
	    return key in target ? target[key] : target.find(({name}) => name === key);
	  }
	};

	const create$9 = (ownerDocument, element, localName)  => {
	  if ('ownerSVGElement' in element) {
	    const svg = ownerDocument.createElementNS(SVG_NAMESPACE$1, localName);
	    svg.ownerSVGElement = element.ownerSVGElement;
	    return svg;
	  }
	  return ownerDocument.createElement(localName);
	};

	const isVoid = ({localName, ownerDocument}) => {
	  return ownerDocument[MIME$3].voidElements.test(localName);
	};

	const shadowRoots = new WeakMap;
	// </utils>

	/**
	 * @implements globalThis.Element
	 */
	class Element$5 extends ParentNode {
	  constructor(ownerDocument, localName) {
	    super(ownerDocument, localName, ELEMENT_NODE$4);
	    this[CLASS_LIST] = null;
	    this[DATASET] = null;
	    this[STYLE] = null;
	  }

	  // <Mixins>
	  get isConnected() { return isConnected(this); }
	  get parentElement() { return parentElement(this); }
	  get previousSibling() { return previousSibling(this); }
	  get nextSibling() { return nextSibling(this); }

	  get previousElementSibling() { return previousElementSibling(this); }
	  get nextElementSibling() { return nextElementSibling(this); }

	  before(...nodes) { before(this, nodes); }
	  after(...nodes) { after(this, nodes); }
	  replaceWith(...nodes) { replaceWith(this, nodes); }
	  remove() { remove(this[PREV$2], this, this[END$6][NEXT$4]); }
	  // </Mixins>

	  // <specialGetters>
	  get id() { return stringAttribute$5.get(this, 'id'); }
	  set id(value) { stringAttribute$5.set(this, 'id', value); }

	  get className() { return this.classList.value; }
	  set className(value) {
	    const {classList} = this;
	    classList.clear();
	    classList.add(...value.split(/\s+/));
	  }

	  get nodeName() { return localCase(this); }
	  get tagName() { return localCase(this); }

	  get classList() {
	    return this[CLASS_LIST] || (
	      this[CLASS_LIST] = new DOMTokenList(this)
	    );
	  }

	  get dataset() {
	    return this[DATASET] || (
	      this[DATASET] = new DOMStringMap(this)
	    );
	  }

	  get nonce() { return stringAttribute$5.get(this, 'nonce'); }
	  set nonce(value) { stringAttribute$5.set(this, 'nonce', value); }

	  get style() {
	    return this[STYLE] || (
	      this[STYLE] = new CSSStyleDeclaration$1(this)
	    );
	  }

	  get tabIndex() { return numericAttribute$2.get(this, 'tabindex') || -1; }
	  set tabIndex(value) { numericAttribute$2.set(this, 'tabindex', value); }
	  // </specialGetters>


	  // <contentRelated>
	  get innerText() { return this.textContent; }

	  get textContent() {
	    const text = [];
	    let {[NEXT$4]: next, [END$6]: end} = this;
	    while (next !== end) {
	      if (next.nodeType === TEXT_NODE$2)
	        text.push(next.textContent);
	      next = next[NEXT$4];
	    }
	    return text.join('');
	  }

	  set textContent(text) {
	    this.replaceChildren();
	    if (text)
	      this.appendChild(new Text$3(this.ownerDocument, text));
	  }

	  get innerHTML() {
	    return this.childNodes.join('');
	  }
	  set innerHTML(html) {
	    const {ownerDocument} = this;
	    const {constructor} = ownerDocument;
	    const document = new constructor;
	    document[CUSTOM_ELEMENTS$2] = ownerDocument[CUSTOM_ELEMENTS$2];
	    const {childNodes} = parseFromString$1(document, ignoreCase(this), html);
	    this.replaceChildren(...childNodes);
	  }

	  get outerHTML() { return this.toString(); }
	  set outerHTML(html) {
	    const template = this.ownerDocument.createElement('');
	    template.innerHTML = html;
	    this.replaceWith(...template.childNodes);
	  }
	  // </contentRelated>

	  // <attributes>
	  get attributes() {
	    const attributes = new NamedNodeMap$1(this);
	    let next = this[NEXT$4];
	    while (next.nodeType === ATTRIBUTE_NODE$1) {
	      attributes.push(next);
	      next = next[NEXT$4];
	    }
	    return new Proxy(attributes, attributesHandler);
	  }

	  focus() { this.dispatchEvent(new Event$5('focus')); }

	  getAttribute(name) {
	    if (name === 'class')
	      return this.className;
	    const attribute = this.getAttributeNode(name);
	    return attribute && attribute.value;
	  }

	  getAttributeNode(name) {
	    let next = this[NEXT$4];
	    while (next.nodeType === ATTRIBUTE_NODE$1) {
	      if (next.name === name)
	        return next;
	      next = next[NEXT$4];
	    }
	    return null;
	  }

	  getAttributeNames() {
	    const attributes = new NodeList$3;
	    let next = this[NEXT$4];
	    while (next.nodeType === ATTRIBUTE_NODE$1) {
	      attributes.push(next.name);
	      next = next[NEXT$4];
	    }
	    return attributes;
	  }

	  hasAttribute(name) { return !!this.getAttributeNode(name); }
	  hasAttributes() { return this[NEXT$4].nodeType === ATTRIBUTE_NODE$1; }

	  removeAttribute(name) {
	    if (name === 'class' && this[CLASS_LIST])
	        this[CLASS_LIST].clear();
	    let next = this[NEXT$4];
	    while (next.nodeType === ATTRIBUTE_NODE$1) {
	      if (next.name === name) {
	        removeAttribute(this, next);
	        return;
	      }
	      next = next[NEXT$4];
	    }
	  }

	  removeAttributeNode(attribute) {
	    let next = this[NEXT$4];
	    while (next.nodeType === ATTRIBUTE_NODE$1) {
	      if (next === attribute) {
	        removeAttribute(this, next);
	        return;
	      }
	      next = next[NEXT$4];
	    }
	  }

	  setAttribute(name, value) {
	    if (name === 'class')
	      this.className = value;
	    else {
	      const attribute = this.getAttributeNode(name);
	      if (attribute)
	        attribute.value = value;
	      else
	        setAttribute(this, new Attr$3(this.ownerDocument, name, value));
	    }
	  }

	  setAttributeNode(attribute) {
	    const {name} = attribute;
	    const previously = this.getAttributeNode(name);
	    if (previously !== attribute) {
	      if (previously)
	        this.removeAttributeNode(previously);
	      const {ownerElement} = attribute;
	      if (ownerElement)
	        ownerElement.removeAttributeNode(attribute);
	      setAttribute(this, attribute);
	    }
	    return previously;
	  }

	  toggleAttribute(name, force) {
	    if (this.hasAttribute(name)) {
	      if (!force) {
	        this.removeAttribute(name);
	        return false;
	      }
	      return true;
	    }
	    else if (force || arguments.length === 1) {
	      this.setAttribute(name, '');
	      return true;
	    }
	    return false;
	  }
	  // </attributes>

	  // <ShadowDOM>
	  get shadowRoot() {
	    if (shadowRoots.has(this)) {
	      const {mode, shadowRoot} = shadowRoots.get(this);
	      if (mode === 'open')
	        return shadowRoot;
	    }
	    return null;
	  }

	  attachShadow(init) {
	    if (shadowRoots.has(this))
	      throw new Error('operation not supported');
	    // TODO: shadowRoot should be likely a specialized class that extends DocumentFragment
	    //       but until DSD is out, I am not sure I should spend time on this.
	    const shadowRoot = new ShadowRoot$1(this.ownerDocument);
	    shadowRoot.append(...this.childNodes);
	    shadowRoots.set(this, {
	      mode: init.mode,
	      shadowRoot
	    });
	    return shadowRoot;
	  }
	  // </ShadowDOM>

	  // <selectors>
	  matches(selectors) { return matches(this, selectors); }
	  closest(selectors) {
	    let parentElement = this;
	    const matches = prepareMatch(parentElement, selectors);
	    while (parentElement && !matches(parentElement))
	      parentElement = parentElement.parentElement;
	    return parentElement;
	  }
	  // </selectors>

	  // <insertAdjacent>
	  insertAdjacentElement(position, element) {
	    const {parentElement} = this;
	    switch (position) {
	      case 'beforebegin':
	        if (parentElement) {
	          parentElement.insertBefore(element, this);
	          break;
	        }
	        return null;
	      case 'afterbegin':
	        this.insertBefore(element, this.firstChild);
	        break;
	      case 'beforeend':
	        this.insertBefore(element, null);
	        break;
	      case 'afterend':
	        if (parentElement) {
	          parentElement.insertBefore(element, this.nextSibling);
	          break;
	        }
	        return null;
	    }
	    return element;
	  }

	  insertAdjacentHTML(position, html) {
	    const template = this.ownerDocument.createElement('template');
	    template.innerHTML = html;
	    this.insertAdjacentElement(position, template.content);
	  }

	  insertAdjacentText(position, text) {
	    const node = this.ownerDocument.createTextNode(text);
	    this.insertAdjacentElement(position, node);
	  }
	  // </insertAdjacent>

	  cloneNode(deep = false) {
	    const {ownerDocument, localName} = this;
	    const addNext = next => {
	      next.parentNode = parentNode;
	      knownAdjacent($next, next);
	      $next = next;
	    };
	    const clone = create$9(ownerDocument, this, localName);
	    let parentNode = clone, $next = clone;
	    let {[NEXT$4]: next, [END$6]: prev} = this;
	    while (next !== prev && (deep || next.nodeType === ATTRIBUTE_NODE$1)) {
	      switch (next.nodeType) {
	        case NODE_END$1:
	          knownAdjacent($next, parentNode[END$6]);
	          $next = parentNode[END$6];
	          parentNode = parentNode.parentNode;
	          break;
	        case ELEMENT_NODE$4: {
	          const node = create$9(ownerDocument, next, next.localName);
	          addNext(node);
	          parentNode = node;
	          break;
	        }
	        case ATTRIBUTE_NODE$1:
	        case TEXT_NODE$2:
	        case COMMENT_NODE$2:
	          addNext(next.cloneNode(deep));
	          break;
	      }
	      next = next[NEXT$4];
	    }
	    knownAdjacent($next, clone[END$6]);
	    return clone;
	  }

	  // <custom>
	  toString() {
	    const out = [];
	    const {[END$6]: end} = this;
	    let next = {[NEXT$4]: this};
	    let isOpened = false;
	    do {
	      next = next[NEXT$4];
	      switch (next.nodeType) {
	        case ATTRIBUTE_NODE$1: {
	          const attr = ' ' + next;
	          switch (attr) {
	            case ' id':
	            case ' class':
	            case ' style':
	              break;
	            default:
	              out.push(attr);
	          }
	          break;
	        }
	        case NODE_END$1: {
	          const start = next[START$1];
	          if (isOpened) {
	            if ('ownerSVGElement' in start)
	              out.push(' />');
	            else if (isVoid(start))
	              out.push(ignoreCase(start) ? '>' : ' />');
	            else
	              out.push(`></${start.localName}>`);
	            isOpened = false;
	          }
	          else
	            out.push(`</${start.localName}>`);
	          break;
	        }
	        case ELEMENT_NODE$4:
	          if (isOpened)
	            out.push('>');
	          if (next.toString !== this.toString) {
	            out.push(next.toString());
	            next = next[END$6];
	            isOpened = false;
	          }
	          else {
	            out.push(`<${next.localName}`);
	            isOpened = true;
	          }
	          break;
	        case TEXT_NODE$2:
	        case COMMENT_NODE$2:
	          out.push((isOpened ? '>' : '') + next);
	          isOpened = false;
	          break;
	      }
	    } while (next !== end);
	    return out.join('');
	  }

	  toJSON() {
	    const json = [];
	    elementAsJSON(this, json);
	    return json;
	  }
	  // </custom>


	  /* c8 ignore start */
	  getAttributeNS(_, name) { return this.getAttribute(name); }
	  getElementsByTagNameNS(_, name) { return this.getElementsByTagName(name); }
	  hasAttributeNS(_, name) { return this.hasAttribute(name); }
	  removeAttributeNS(_, name) { this.removeAttribute(name); }
	  setAttributeNS(_, name, value) { this.setAttribute(name, value); }
	  setAttributeNodeNS(attr) { return this.setAttributeNode(attr); }
	  /* c8 ignore stop */
	}
	element$2.Element = Element$5;

	var element$1 = {};

	const {Element: Element$4} = element$2;

	const classNames = new WeakMap;

	const handler = {
	  get(target, name) {
	    return target[name];
	  },
	  set(target, name, value) {
	    target[name] = value;
	    return true;
	  }
	};

	/**
	 * @implements globalThis.SVGElement
	 */
	class SVGElement$3 extends Element$4 {
	  constructor(ownerDocument, localName, ownerSVGElement = null) {
	    super(ownerDocument, localName);
	    this.ownerSVGElement = ownerSVGElement;
	  }

	  get className() {
	    if (!classNames.has(this))
	      classNames.set(this, new Proxy({baseVal: '', animVal: ''}, handler));
	    return classNames.get(this);
	  }

	  /* c8 ignore start */
	  set className(value) {
	    const {classList} = this;
	    classList.clear();
	    classList.add(...value.split(/\s+/));
	  }
	  /* c8 ignore stop */

	  setAttribute(name, value) {
	    if (name === 'style') {
	      const {className} = this;
	      className.baseVal = className.animVal = value;
	    }
	    super.setAttribute(name, value);
	  }
	}
	element$1.SVGElement = SVGElement$3;

	const {Attr: _Attr} = attr;
	const {CharacterData: _CharacterData} = characterData;
	const {Comment: _Comment} = comment;
	const {DocumentFragment: _DocumentFragment} = documentFragment;
	const {DocumentType: _DocumentType} = documentType;
	const {Element: _Element} = element$2;
	const {Node: _Node} = node$1;
	const {ShadowRoot: _ShadowRoot} = shadowRoot;
	const {Text: _Text} = text;
	const {SVGElement: _SVGElement} = element$1;

	const {setPrototypeOf: setPrototypeOf$1} = object;

	/* c8 ignore start */
	const illegalConstructor$1 = () => {
	  throw new TypeError('Illegal constructor');
	};
	facades.illegalConstructor = illegalConstructor$1;

	function Attr$2() { illegalConstructor$1(); }
	facades.Attr = Attr$2;
	setPrototypeOf$1(Attr$2, _Attr);
	Attr$2.prototype = _Attr.prototype;

	function CharacterData() { illegalConstructor$1(); }
	facades.CharacterData = CharacterData;
	setPrototypeOf$1(CharacterData, _CharacterData);
	CharacterData.prototype = _CharacterData.prototype;

	function Comment$2() { illegalConstructor$1(); }
	facades.Comment = Comment$2;
	setPrototypeOf$1(Comment$2, _Comment);
	Comment$2.prototype = _Comment.prototype;

	function DocumentFragment$1() { illegalConstructor$1(); }
	facades.DocumentFragment = DocumentFragment$1;
	setPrototypeOf$1(DocumentFragment$1, _DocumentFragment);
	DocumentFragment$1.prototype = _DocumentFragment.prototype;

	function DocumentType$2() { illegalConstructor$1(); }
	facades.DocumentType = DocumentType$2;
	setPrototypeOf$1(DocumentType$2, _DocumentType);
	DocumentType$2.prototype = _DocumentType.prototype;

	function Element$3() { illegalConstructor$1(); }
	facades.Element = Element$3;
	setPrototypeOf$1(Element$3, _Element);
	Element$3.prototype = _Element.prototype;

	function Node$1() { illegalConstructor$1(); }
	facades.Node = Node$1;
	setPrototypeOf$1(Node$1, _Node);
	Node$1.prototype = _Node.prototype;

	function ShadowRoot() { illegalConstructor$1(); }
	facades.ShadowRoot = ShadowRoot;
	setPrototypeOf$1(ShadowRoot, _ShadowRoot);
	ShadowRoot.prototype = _ShadowRoot.prototype;

	function Text$2() { illegalConstructor$1(); }
	facades.Text = Text$2;
	setPrototypeOf$1(Text$2, _Text);
	Text$2.prototype = _Text.prototype;

	function SVGElement$2() { illegalConstructor$1(); }
	facades.SVGElement = SVGElement$2;
	setPrototypeOf$1(SVGElement$2, _SVGElement);
	SVGElement$2.prototype = _SVGElement.prototype;
	/* c8 ignore stop */

	const Facades$1 = {
	  Attr: Attr$2,
	  CharacterData,
	  Comment: Comment$2,
	  DocumentFragment: DocumentFragment$1,
	  DocumentType: DocumentType$2,
	  Element: Element$3,
	  Node: Node$1,
	  ShadowRoot,
	  Text: Text$2,
	  SVGElement: SVGElement$2
	};
	facades.Facades = Facades$1;

	var htmlClasses$2 = {};

	var element = {};

	const {END: END$5} = symbols;
	const {booleanAttribute: booleanAttribute$5, stringAttribute: stringAttribute$4} = attributes$2;

	const {Event: Event$4} = event;
	const {Element: Element$2} = element$2;
	const {Classes, customElements: customElements$1} = customElementRegistry;

	const Level0 = new WeakMap;
	const level0 = {
	  get(element, name) {
	    return Level0.has(element) && Level0.get(element)[name] || null;
	  },
	  set(element, name, value) {
	    if (!Level0.has(element))
	      Level0.set(element, {});
	    const handlers = Level0.get(element);
	    const type = name.slice(2);
	    if (handlers[name])
	      element.removeEventListener(type, handlers[name], false);
	    if ((handlers[name] = value))
	      element.addEventListener(type, value, false);
	  }
	};

	/**
	 * @implements globalThis.HTMLElement
	 */
	class HTMLElement$13 extends Element$2 {

	  static get observedAttributes() { return []; }

	  constructor(ownerDocument = null, localName = '') {
	    super(ownerDocument, localName);
	    if (!ownerDocument) {
	      const {constructor: Class, [END$5]: end} = this;
	      if (!Classes.has(Class))
	        throw new Error('unable to initialize this Custom Element');
	      const {ownerDocument, localName, options} = Classes.get(Class);
	      this.ownerDocument = end.ownerDocument = ownerDocument;
	      this.localName = localName;
	      customElements$1.set(this, {connected: false});
	      if (options.is)
	        this.setAttribute('is', options.is);
	    }
	  }

	  /* c8 ignore start */

	  /* TODO: what about these?
	  offsetHeight
	  offsetLeft
	  offsetParent
	  offsetTop
	  offsetWidth
	  */

	  blur() { this.dispatchEvent(new Event$4('blur')); }
	  click() { this.dispatchEvent(new Event$4('click')); }

	  // Boolean getters
	  get accessKeyLabel() {
	    const {accessKey} = this;
	    return accessKey && `Alt+Shift+${accessKey}`;
	  }
	  get isContentEditable() { return this.hasAttribute('contenteditable'); }

	  // Boolean Accessors
	  get contentEditable() { return booleanAttribute$5.get(this, 'contenteditable'); }
	  set contentEditable(value) { booleanAttribute$5.set(this, 'contenteditable', value); }
	  get draggable() { return booleanAttribute$5.get(this, 'draggable'); }
	  set draggable(value) { booleanAttribute$5.set(this, 'draggable', value); }
	  get hidden() { return booleanAttribute$5.get(this, 'hidden'); }
	  set hidden(value) { booleanAttribute$5.set(this, 'hidden', value); }
	  get spellcheck() { return booleanAttribute$5.get(this, 'spellcheck'); }
	  set spellcheck(value) { booleanAttribute$5.set(this, 'spellcheck', value); }

	  // String Accessors
	  get accessKey() { return stringAttribute$4.get(this, 'accesskey'); }
	  set accessKey(value) { stringAttribute$4.set(this, 'accesskey', value); }
	  get dir() { return stringAttribute$4.get(this, 'dir'); }
	  set dir(value) { stringAttribute$4.set(this, 'dir', value); }
	  get lang() { return stringAttribute$4.get(this, 'lang'); }
	  set lang(value) { stringAttribute$4.set(this, 'lang', value); }
	  get title() { return stringAttribute$4.get(this, 'title'); }
	  set title(value) { stringAttribute$4.set(this, 'title', value); }

	  // DOM Level 0
	  get onabort() { return level0.get(this, 'onabort'); }
	  set onabort(value) { level0.set(this, 'onabort', value); }

	  get onblur() { return level0.get(this, 'onblur'); }
	  set onblur(value) { level0.set(this, 'onblur', value); }

	  get oncancel() { return level0.get(this, 'oncancel'); }
	  set oncancel(value) { level0.set(this, 'oncancel', value); }

	  get oncanplay() { return level0.get(this, 'oncanplay'); }
	  set oncanplay(value) { level0.set(this, 'oncanplay', value); }

	  get oncanplaythrough() { return level0.get(this, 'oncanplaythrough'); }
	  set oncanplaythrough(value) { level0.set(this, 'oncanplaythrough', value); }

	  get onchange() { return level0.get(this, 'onchange'); }
	  set onchange(value) { level0.set(this, 'onchange', value); }

	  get onclick() { return level0.get(this, 'onclick'); }
	  set onclick(value) { level0.set(this, 'onclick', value); }

	  get onclose() { return level0.get(this, 'onclose'); }
	  set onclose(value) { level0.set(this, 'onclose', value); }

	  get oncontextmenu() { return level0.get(this, 'oncontextmenu'); }
	  set oncontextmenu(value) { level0.set(this, 'oncontextmenu', value); }

	  get oncuechange() { return level0.get(this, 'oncuechange'); }
	  set oncuechange(value) { level0.set(this, 'oncuechange', value); }

	  get ondblclick() { return level0.get(this, 'ondblclick'); }
	  set ondblclick(value) { level0.set(this, 'ondblclick', value); }

	  get ondrag() { return level0.get(this, 'ondrag'); }
	  set ondrag(value) { level0.set(this, 'ondrag', value); }

	  get ondragend() { return level0.get(this, 'ondragend'); }
	  set ondragend(value) { level0.set(this, 'ondragend', value); }

	  get ondragenter() { return level0.get(this, 'ondragenter'); }
	  set ondragenter(value) { level0.set(this, 'ondragenter', value); }

	  get ondragleave() { return level0.get(this, 'ondragleave'); }
	  set ondragleave(value) { level0.set(this, 'ondragleave', value); }

	  get ondragover() { return level0.get(this, 'ondragover'); }
	  set ondragover(value) { level0.set(this, 'ondragover', value); }

	  get ondragstart() { return level0.get(this, 'ondragstart'); }
	  set ondragstart(value) { level0.set(this, 'ondragstart', value); }

	  get ondrop() { return level0.get(this, 'ondrop'); }
	  set ondrop(value) { level0.set(this, 'ondrop', value); }

	  get ondurationchange() { return level0.get(this, 'ondurationchange'); }
	  set ondurationchange(value) { level0.set(this, 'ondurationchange', value); }

	  get onemptied() { return level0.get(this, 'onemptied'); }
	  set onemptied(value) { level0.set(this, 'onemptied', value); }

	  get onended() { return level0.get(this, 'onended'); }
	  set onended(value) { level0.set(this, 'onended', value); }

	  get onerror() { return level0.get(this, 'onerror'); }
	  set onerror(value) { level0.set(this, 'onerror', value); }

	  get onfocus() { return level0.get(this, 'onfocus'); }
	  set onfocus(value) { level0.set(this, 'onfocus', value); }

	  get oninput() { return level0.get(this, 'oninput'); }
	  set oninput(value) { level0.set(this, 'oninput', value); }

	  get oninvalid() { return level0.get(this, 'oninvalid'); }
	  set oninvalid(value) { level0.set(this, 'oninvalid', value); }

	  get onkeydown() { return level0.get(this, 'onkeydown'); }
	  set onkeydown(value) { level0.set(this, 'onkeydown', value); }

	  get onkeypress() { return level0.get(this, 'onkeypress'); }
	  set onkeypress(value) { level0.set(this, 'onkeypress', value); }

	  get onkeyup() { return level0.get(this, 'onkeyup'); }
	  set onkeyup(value) { level0.set(this, 'onkeyup', value); }

	  get onload() { return level0.get(this, 'onload'); }
	  set onload(value) { level0.set(this, 'onload', value); }

	  get onloadeddata() { return level0.get(this, 'onloadeddata'); }
	  set onloadeddata(value) { level0.set(this, 'onloadeddata', value); }

	  get onloadedmetadata() { return level0.get(this, 'onloadedmetadata'); }
	  set onloadedmetadata(value) { level0.set(this, 'onloadedmetadata', value); }

	  get onloadstart() { return level0.get(this, 'onloadstart'); }
	  set onloadstart(value) { level0.set(this, 'onloadstart', value); }

	  get onmousedown() { return level0.get(this, 'onmousedown'); }
	  set onmousedown(value) { level0.set(this, 'onmousedown', value); }

	  get onmouseenter() { return level0.get(this, 'onmouseenter'); }
	  set onmouseenter(value) { level0.set(this, 'onmouseenter', value); }

	  get onmouseleave() { return level0.get(this, 'onmouseleave'); }
	  set onmouseleave(value) { level0.set(this, 'onmouseleave', value); }

	  get onmousemove() { return level0.get(this, 'onmousemove'); }
	  set onmousemove(value) { level0.set(this, 'onmousemove', value); }

	  get onmouseout() { return level0.get(this, 'onmouseout'); }
	  set onmouseout(value) { level0.set(this, 'onmouseout', value); }

	  get onmouseover() { return level0.get(this, 'onmouseover'); }
	  set onmouseover(value) { level0.set(this, 'onmouseover', value); }

	  get onmouseup() { return level0.get(this, 'onmouseup'); }
	  set onmouseup(value) { level0.set(this, 'onmouseup', value); }

	  get onmousewheel() { return level0.get(this, 'onmousewheel'); }
	  set onmousewheel(value) { level0.set(this, 'onmousewheel', value); }

	  get onpause() { return level0.get(this, 'onpause'); }
	  set onpause(value) { level0.set(this, 'onpause', value); }

	  get onplay() { return level0.get(this, 'onplay'); }
	  set onplay(value) { level0.set(this, 'onplay', value); }

	  get onplaying() { return level0.get(this, 'onplaying'); }
	  set onplaying(value) { level0.set(this, 'onplaying', value); }

	  get onprogress() { return level0.get(this, 'onprogress'); }
	  set onprogress(value) { level0.set(this, 'onprogress', value); }

	  get onratechange() { return level0.get(this, 'onratechange'); }
	  set onratechange(value) { level0.set(this, 'onratechange', value); }

	  get onreset() { return level0.get(this, 'onreset'); }
	  set onreset(value) { level0.set(this, 'onreset', value); }

	  get onresize() { return level0.get(this, 'onresize'); }
	  set onresize(value) { level0.set(this, 'onresize', value); }

	  get onscroll() { return level0.get(this, 'onscroll'); }
	  set onscroll(value) { level0.set(this, 'onscroll', value); }

	  get onseeked() { return level0.get(this, 'onseeked'); }
	  set onseeked(value) { level0.set(this, 'onseeked', value); }

	  get onseeking() { return level0.get(this, 'onseeking'); }
	  set onseeking(value) { level0.set(this, 'onseeking', value); }

	  get onselect() { return level0.get(this, 'onselect'); }
	  set onselect(value) { level0.set(this, 'onselect', value); }

	  get onshow() { return level0.get(this, 'onshow'); }
	  set onshow(value) { level0.set(this, 'onshow', value); }

	  get onstalled() { return level0.get(this, 'onstalled'); }
	  set onstalled(value) { level0.set(this, 'onstalled', value); }

	  get onsubmit() { return level0.get(this, 'onsubmit'); }
	  set onsubmit(value) { level0.set(this, 'onsubmit', value); }

	  get onsuspend() { return level0.get(this, 'onsuspend'); }
	  set onsuspend(value) { level0.set(this, 'onsuspend', value); }

	  get ontimeupdate() { return level0.get(this, 'ontimeupdate'); }
	  set ontimeupdate(value) { level0.set(this, 'ontimeupdate', value); }

	  get ontoggle() { return level0.get(this, 'ontoggle'); }
	  set ontoggle(value) { level0.set(this, 'ontoggle', value); }

	  get onvolumechange() { return level0.get(this, 'onvolumechange'); }
	  set onvolumechange(value) { level0.set(this, 'onvolumechange', value); }

	  get onwaiting() { return level0.get(this, 'onwaiting'); }
	  set onwaiting(value) { level0.set(this, 'onwaiting', value); }

	  get onauxclick() { return level0.get(this, 'onauxclick'); }
	  set onauxclick(value) { level0.set(this, 'onauxclick', value); }

	  get ongotpointercapture() { return level0.get(this, 'ongotpointercapture'); }
	  set ongotpointercapture(value) { level0.set(this, 'ongotpointercapture', value); }

	  get onlostpointercapture() { return level0.get(this, 'onlostpointercapture'); }
	  set onlostpointercapture(value) { level0.set(this, 'onlostpointercapture', value); }

	  get onpointercancel() { return level0.get(this, 'onpointercancel'); }
	  set onpointercancel(value) { level0.set(this, 'onpointercancel', value); }

	  get onpointerdown() { return level0.get(this, 'onpointerdown'); }
	  set onpointerdown(value) { level0.set(this, 'onpointerdown', value); }

	  get onpointerenter() { return level0.get(this, 'onpointerenter'); }
	  set onpointerenter(value) { level0.set(this, 'onpointerenter', value); }

	  get onpointerleave() { return level0.get(this, 'onpointerleave'); }
	  set onpointerleave(value) { level0.set(this, 'onpointerleave', value); }

	  get onpointermove() { return level0.get(this, 'onpointermove'); }
	  set onpointermove(value) { level0.set(this, 'onpointermove', value); }

	  get onpointerout() { return level0.get(this, 'onpointerout'); }
	  set onpointerout(value) { level0.set(this, 'onpointerout', value); }

	  get onpointerover() { return level0.get(this, 'onpointerover'); }
	  set onpointerover(value) { level0.set(this, 'onpointerover', value); }

	  get onpointerup() { return level0.get(this, 'onpointerup'); }
	  set onpointerup(value) { level0.set(this, 'onpointerup', value); }
	  /* c8 ignore stop */

	}
	element.HTMLElement = HTMLElement$13;

	var templateElement = {};

	const {CONTENT, PRIVATE: PRIVATE$1} = symbols;

	const {registerHTMLClass: registerHTMLClass$d} = registerHtmlClass;

	const {HTMLElement: HTMLElement$12} = element;

	const tagName$d = 'template';

	/**
	 * @implements globalThis.HTMLTemplateElement
	 */
	class HTMLTemplateElement$1 extends HTMLElement$12 {
	  constructor(ownerDocument) {
	    super(ownerDocument, tagName$d);
	    const content = this.ownerDocument.createDocumentFragment();
	    (this[CONTENT] = content)[PRIVATE$1] = this;
	  }

	  get content() {
	    if (this.hasChildNodes() && !this[CONTENT].hasChildNodes()) {
	      for (const node of this.childNodes)
	        this[CONTENT].appendChild(node.cloneNode(true));
	    }
	    return this[CONTENT];
	  }
	}

	registerHTMLClass$d(tagName$d, HTMLTemplateElement$1);

	templateElement.HTMLTemplateElement = HTMLTemplateElement$1;

	var htmlElement = {};

	const {HTMLElement: HTMLElement$11} = element;

	/**
	 * @implements globalThis.HTMLHtmlElement
	 */
	class HTMLHtmlElement$1 extends HTMLElement$11 {
	  constructor(ownerDocument, localName = 'html') {
	    super(ownerDocument, localName);
	  }
	}
	htmlElement.HTMLHtmlElement = HTMLHtmlElement$1;

	var scriptElement = {};

	var textElement = {};

	const {HTMLElement: HTMLElement$10} = element;

	const {toString} = HTMLElement$10.prototype;

	class TextElement$4 extends HTMLElement$10 {

	  get innerHTML() { return this.textContent; }
	  set innerHTML(html) { this.textContent = html; }

	  toString() {
	    const outerHTML = toString.call(this.cloneNode());
	    return outerHTML.replace(/></, `>${this.textContent}<`);
	  }
	}
	textElement.TextElement = TextElement$4;

	const {registerHTMLClass: registerHTMLClass$c} = registerHtmlClass;

	const {TextElement: TextElement$3} = textElement;

	const tagName$c = 'script';

	/**
	 * @implements globalThis.HTMLScriptElement
	 */
	class HTMLScriptElement$1 extends TextElement$3 {
	  constructor(ownerDocument, localName = tagName$c) {
	    super(ownerDocument, localName);
	  }
	}

	registerHTMLClass$c(tagName$c, HTMLScriptElement$1);

	scriptElement.HTMLScriptElement = HTMLScriptElement$1;

	var frameElement = {};

	const {HTMLElement: HTMLElement$$} = element;

	/**
	 * @implements globalThis.HTMLFrameElement
	 */
	class HTMLFrameElement$1 extends HTMLElement$$ {
	  constructor(ownerDocument, localName = 'frame') {
	    super(ownerDocument, localName);
	  }
	}
	frameElement.HTMLFrameElement = HTMLFrameElement$1;

	var iFrameElement = {};

	const {HTMLElement: HTMLElement$_} = element;

	/**
	 * @implements globalThis.HTMLIFrameElement
	 */
	class HTMLIFrameElement$1 extends HTMLElement$_ {
	  constructor(ownerDocument, localName = 'iframe') {
	    super(ownerDocument, localName);
	  }
	}
	iFrameElement.HTMLIFrameElement = HTMLIFrameElement$1;

	var objectElement = {};

	const {HTMLElement: HTMLElement$Z} = element;

	/**
	 * @implements globalThis.HTMLObjectElement
	 */
	class HTMLObjectElement$1 extends HTMLElement$Z {
	  constructor(ownerDocument, localName = 'object') {
	    super(ownerDocument, localName);
	  }
	}
	objectElement.HTMLObjectElement = HTMLObjectElement$1;

	var headElement = {};

	const {HTMLElement: HTMLElement$Y} = element;

	/**
	 * @implements globalThis.HTMLHeadElement
	 */
	class HTMLHeadElement$1 extends HTMLElement$Y {
	  constructor(ownerDocument, localName = 'head') {
	    super(ownerDocument, localName);
	  }
	}
	headElement.HTMLHeadElement = HTMLHeadElement$1;

	var bodyElement = {};

	const {HTMLElement: HTMLElement$X} = element;

	/**
	 * @implements globalThis.HTMLBodyElement
	 */
	class HTMLBodyElement$1 extends HTMLElement$X {
	  constructor(ownerDocument, localName = 'body') {
	    super(ownerDocument, localName);
	  }
	}
	bodyElement.HTMLBodyElement = HTMLBodyElement$1;

	var styleElement = {};

	var lib = {};

	var CSSStyleDeclaration = {};

	var parse$2 = {};

	var CSSStyleSheet = {};

	var StyleSheet = {};

	//.CommonJS
	var CSSOM$k = {};
	///CommonJS


	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-stylesheet-interface
	 */
	CSSOM$k.StyleSheet = function StyleSheet() {
		this.parentStyleSheet = null;
	};


	//.CommonJS
	StyleSheet.StyleSheet = CSSOM$k.StyleSheet;

	var CSSStyleRule = {};

	var CSSRule = {};

	//.CommonJS
	var CSSOM$j = {};
	///CommonJS


	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-cssrule-interface
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSRule
	 */
	CSSOM$j.CSSRule = function CSSRule() {
		this.parentRule = null;
		this.parentStyleSheet = null;
	};

	CSSOM$j.CSSRule.UNKNOWN_RULE = 0;                 // obsolete
	CSSOM$j.CSSRule.STYLE_RULE = 1;
	CSSOM$j.CSSRule.CHARSET_RULE = 2;                 // obsolete
	CSSOM$j.CSSRule.IMPORT_RULE = 3;
	CSSOM$j.CSSRule.MEDIA_RULE = 4;
	CSSOM$j.CSSRule.FONT_FACE_RULE = 5;
	CSSOM$j.CSSRule.PAGE_RULE = 6;
	CSSOM$j.CSSRule.KEYFRAMES_RULE = 7;
	CSSOM$j.CSSRule.KEYFRAME_RULE = 8;
	CSSOM$j.CSSRule.MARGIN_RULE = 9;
	CSSOM$j.CSSRule.NAMESPACE_RULE = 10;
	CSSOM$j.CSSRule.COUNTER_STYLE_RULE = 11;
	CSSOM$j.CSSRule.SUPPORTS_RULE = 12;
	CSSOM$j.CSSRule.DOCUMENT_RULE = 13;
	CSSOM$j.CSSRule.FONT_FEATURE_VALUES_RULE = 14;
	CSSOM$j.CSSRule.VIEWPORT_RULE = 15;
	CSSOM$j.CSSRule.REGION_STYLE_RULE = 16;


	CSSOM$j.CSSRule.prototype = {
		constructor: CSSOM$j.CSSRule
		//FIXME
	};


	//.CommonJS
	CSSRule.CSSRule = CSSOM$j.CSSRule;

	//.CommonJS
	var CSSOM$i = {
		CSSStyleDeclaration: CSSStyleDeclaration.CSSStyleDeclaration,
		CSSRule: CSSRule.CSSRule
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssstylerule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleRule
	 */
	CSSOM$i.CSSStyleRule = function CSSStyleRule() {
		CSSOM$i.CSSRule.call(this);
		this.selectorText = "";
		this.style = new CSSOM$i.CSSStyleDeclaration();
		this.style.parentRule = this;
	};

	CSSOM$i.CSSStyleRule.prototype = new CSSOM$i.CSSRule();
	CSSOM$i.CSSStyleRule.prototype.constructor = CSSOM$i.CSSStyleRule;
	CSSOM$i.CSSStyleRule.prototype.type = 1;

	Object.defineProperty(CSSOM$i.CSSStyleRule.prototype, "cssText", {
		get: function() {
			var text;
			if (this.selectorText) {
				text = this.selectorText + " {" + this.style.cssText + "}";
			} else {
				text = "";
			}
			return text;
		},
		set: function(cssText) {
			var rule = CSSOM$i.CSSStyleRule.parse(cssText);
			this.style = rule.style;
			this.selectorText = rule.selectorText;
		}
	});


	/**
	 * NON-STANDARD
	 * lightweight version of parse.js.
	 * @param {string} ruleText
	 * @return CSSStyleRule
	 */
	CSSOM$i.CSSStyleRule.parse = function(ruleText) {
		var i = 0;
		var state = "selector";
		var index;
		var j = i;
		var buffer = "";

		var SIGNIFICANT_WHITESPACE = {
			"selector": true,
			"value": true
		};

		var styleRule = new CSSOM$i.CSSStyleRule();
		var name, priority="";

		for (var character; (character = ruleText.charAt(i)); i++) {

			switch (character) {

			case " ":
			case "\t":
			case "\r":
			case "\n":
			case "\f":
				if (SIGNIFICANT_WHITESPACE[state]) {
					// Squash 2 or more white-spaces in the row into 1
					switch (ruleText.charAt(i - 1)) {
						case " ":
						case "\t":
						case "\r":
						case "\n":
						case "\f":
							break;
						default:
							buffer += " ";
							break;
					}
				}
				break;

			// String
			case '"':
				j = i + 1;
				index = ruleText.indexOf('"', j) + 1;
				if (!index) {
					throw '" is missing';
				}
				buffer += ruleText.slice(i, index);
				i = index - 1;
				break;

			case "'":
				j = i + 1;
				index = ruleText.indexOf("'", j) + 1;
				if (!index) {
					throw "' is missing";
				}
				buffer += ruleText.slice(i, index);
				i = index - 1;
				break;

			// Comment
			case "/":
				if (ruleText.charAt(i + 1) === "*") {
					i += 2;
					index = ruleText.indexOf("*/", i);
					if (index === -1) {
						throw new SyntaxError("Missing */");
					} else {
						i = index + 1;
					}
				} else {
					buffer += character;
				}
				break;

			case "{":
				if (state === "selector") {
					styleRule.selectorText = buffer.trim();
					buffer = "";
					state = "name";
				}
				break;

			case ":":
				if (state === "name") {
					name = buffer.trim();
					buffer = "";
					state = "value";
				} else {
					buffer += character;
				}
				break;

			case "!":
				if (state === "value" && ruleText.indexOf("!important", i) === i) {
					priority = "important";
					i += "important".length;
				} else {
					buffer += character;
				}
				break;

			case ";":
				if (state === "value") {
					styleRule.style.setProperty(name, buffer.trim(), priority);
					priority = "";
					buffer = "";
					state = "name";
				} else {
					buffer += character;
				}
				break;

			case "}":
				if (state === "value") {
					styleRule.style.setProperty(name, buffer.trim(), priority);
					priority = "";
					buffer = "";
				} else if (state === "name") {
					break;
				} else {
					buffer += character;
				}
				state = "selector";
				break;

			default:
				buffer += character;
				break;

			}
		}

		return styleRule;

	};


	//.CommonJS
	CSSStyleRule.CSSStyleRule = CSSOM$i.CSSStyleRule;

	//.CommonJS
	var CSSOM$h = {
		StyleSheet: StyleSheet.StyleSheet,
		CSSStyleRule: CSSStyleRule.CSSStyleRule
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet
	 */
	CSSOM$h.CSSStyleSheet = function CSSStyleSheet() {
		CSSOM$h.StyleSheet.call(this);
		this.cssRules = [];
	};


	CSSOM$h.CSSStyleSheet.prototype = new CSSOM$h.StyleSheet();
	CSSOM$h.CSSStyleSheet.prototype.constructor = CSSOM$h.CSSStyleSheet;


	/**
	 * Used to insert a new rule into the style sheet. The new rule now becomes part of the cascade.
	 *
	 *   sheet = new Sheet("body {margin: 0}")
	 *   sheet.toString()
	 *   -> "body{margin:0;}"
	 *   sheet.insertRule("img {border: none}", 0)
	 *   -> 0
	 *   sheet.toString()
	 *   -> "img{border:none;}body{margin:0;}"
	 *
	 * @param {string} rule
	 * @param {number} index
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-insertRule
	 * @return {number} The index within the style sheet's rule collection of the newly inserted rule.
	 */
	CSSOM$h.CSSStyleSheet.prototype.insertRule = function(rule, index) {
		if (index < 0 || index > this.cssRules.length) {
			throw new RangeError("INDEX_SIZE_ERR");
		}
		var cssRule = CSSOM$h.parse(rule).cssRules[0];
		cssRule.parentStyleSheet = this;
		this.cssRules.splice(index, 0, cssRule);
		return index;
	};


	/**
	 * Used to delete a rule from the style sheet.
	 *
	 *   sheet = new Sheet("img{border:none} body{margin:0}")
	 *   sheet.toString()
	 *   -> "img{border:none;}body{margin:0;}"
	 *   sheet.deleteRule(0)
	 *   sheet.toString()
	 *   -> "body{margin:0;}"
	 *
	 * @param {number} index within the style sheet's rule list of the rule to remove.
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-deleteRule
	 */
	CSSOM$h.CSSStyleSheet.prototype.deleteRule = function(index) {
		if (index < 0 || index >= this.cssRules.length) {
			throw new RangeError("INDEX_SIZE_ERR");
		}
		this.cssRules.splice(index, 1);
	};


	/**
	 * NON-STANDARD
	 * @return {string} serialize stylesheet
	 */
	CSSOM$h.CSSStyleSheet.prototype.toString = function() {
		var result = "";
		var rules = this.cssRules;
		for (var i=0; i<rules.length; i++) {
			result += rules[i].cssText + "\n";
		}
		return result;
	};


	//.CommonJS
	CSSStyleSheet.CSSStyleSheet = CSSOM$h.CSSStyleSheet;
	CSSOM$h.parse = parse$2.parse; // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleSheet.js

	var CSSImportRule = {};

	var MediaList = {};

	//.CommonJS
	var CSSOM$g = {};
	///CommonJS


	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-medialist-interface
	 */
	CSSOM$g.MediaList = function MediaList(){
		this.length = 0;
	};

	CSSOM$g.MediaList.prototype = {

		constructor: CSSOM$g.MediaList,

		/**
		 * @return {string}
		 */
		get mediaText() {
			return Array.prototype.join.call(this, ", ");
		},

		/**
		 * @param {string} value
		 */
		set mediaText(value) {
			var values = value.split(",");
			var length = this.length = values.length;
			for (var i=0; i<length; i++) {
				this[i] = values[i].trim();
			}
		},

		/**
		 * @param {string} medium
		 */
		appendMedium: function(medium) {
			if (Array.prototype.indexOf.call(this, medium) === -1) {
				this[this.length] = medium;
				this.length++;
			}
		},

		/**
		 * @param {string} medium
		 */
		deleteMedium: function(medium) {
			var index = Array.prototype.indexOf.call(this, medium);
			if (index !== -1) {
				Array.prototype.splice.call(this, index, 1);
			}
		}

	};


	//.CommonJS
	MediaList.MediaList = CSSOM$g.MediaList;

	//.CommonJS
	var CSSOM$f = {
		CSSRule: CSSRule.CSSRule,
		CSSStyleSheet: CSSStyleSheet.CSSStyleSheet,
		MediaList: MediaList.MediaList
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssimportrule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSImportRule
	 */
	CSSOM$f.CSSImportRule = function CSSImportRule() {
		CSSOM$f.CSSRule.call(this);
		this.href = "";
		this.media = new CSSOM$f.MediaList();
		this.styleSheet = new CSSOM$f.CSSStyleSheet();
	};

	CSSOM$f.CSSImportRule.prototype = new CSSOM$f.CSSRule();
	CSSOM$f.CSSImportRule.prototype.constructor = CSSOM$f.CSSImportRule;
	CSSOM$f.CSSImportRule.prototype.type = 3;

	Object.defineProperty(CSSOM$f.CSSImportRule.prototype, "cssText", {
	  get: function() {
	    var mediaText = this.media.mediaText;
	    return "@import url(" + this.href + ")" + (mediaText ? " " + mediaText : "") + ";";
	  },
	  set: function(cssText) {
	    var i = 0;

	    /**
	     * @import url(partial.css) screen, handheld;
	     *        ||               |
	     *        after-import     media
	     *         |
	     *         url
	     */
	    var state = '';

	    var buffer = '';
	    var index;
	    for (var character; (character = cssText.charAt(i)); i++) {

	      switch (character) {
	        case ' ':
	        case '\t':
	        case '\r':
	        case '\n':
	        case '\f':
	          if (state === 'after-import') {
	            state = 'url';
	          } else {
	            buffer += character;
	          }
	          break;

	        case '@':
	          if (!state && cssText.indexOf('@import', i) === i) {
	            state = 'after-import';
	            i += 'import'.length;
	            buffer = '';
	          }
	          break;

	        case 'u':
	          if (state === 'url' && cssText.indexOf('url(', i) === i) {
	            index = cssText.indexOf(')', i + 1);
	            if (index === -1) {
	              throw i + ': ")" not found';
	            }
	            i += 'url('.length;
	            var url = cssText.slice(i, index);
	            if (url[0] === url[url.length - 1]) {
	              if (url[0] === '"' || url[0] === "'") {
	                url = url.slice(1, -1);
	              }
	            }
	            this.href = url;
	            i = index;
	            state = 'media';
	          }
	          break;

	        case '"':
	          if (state === 'url') {
	            index = cssText.indexOf('"', i + 1);
	            if (!index) {
	              throw i + ": '\"' not found";
	            }
	            this.href = cssText.slice(i + 1, index);
	            i = index;
	            state = 'media';
	          }
	          break;

	        case "'":
	          if (state === 'url') {
	            index = cssText.indexOf("'", i + 1);
	            if (!index) {
	              throw i + ': "\'" not found';
	            }
	            this.href = cssText.slice(i + 1, index);
	            i = index;
	            state = 'media';
	          }
	          break;

	        case ';':
	          if (state === 'media') {
	            if (buffer) {
	              this.media.mediaText = buffer.trim();
	            }
	          }
	          break;

	        default:
	          if (state === 'media') {
	            buffer += character;
	          }
	          break;
	      }
	    }
	  }
	});


	//.CommonJS
	CSSImportRule.CSSImportRule = CSSOM$f.CSSImportRule;

	var CSSGroupingRule = {};

	//.CommonJS
	var CSSOM$e = {
		CSSRule: CSSRule.CSSRule
	};
	///CommonJS


	/**
	 * @constructor
	 * @see https://drafts.csswg.org/cssom/#the-cssgroupingrule-interface
	 */
	CSSOM$e.CSSGroupingRule = function CSSGroupingRule() {
		CSSOM$e.CSSRule.call(this);
		this.cssRules = [];
	};

	CSSOM$e.CSSGroupingRule.prototype = new CSSOM$e.CSSRule();
	CSSOM$e.CSSGroupingRule.prototype.constructor = CSSOM$e.CSSGroupingRule;


	/**
	 * Used to insert a new CSS rule to a list of CSS rules.
	 *
	 * @example
	 *   cssGroupingRule.cssText
	 *   -> "body{margin:0;}"
	 *   cssGroupingRule.insertRule("img{border:none;}", 1)
	 *   -> 1
	 *   cssGroupingRule.cssText
	 *   -> "body{margin:0;}img{border:none;}"
	 *
	 * @param {string} rule
	 * @param {number} [index]
	 * @see https://www.w3.org/TR/cssom-1/#dom-cssgroupingrule-insertrule
	 * @return {number} The index within the grouping rule's collection of the newly inserted rule.
	 */
	 CSSOM$e.CSSGroupingRule.prototype.insertRule = function insertRule(rule, index) {
		if (index < 0 || index > this.cssRules.length) {
			throw new RangeError("INDEX_SIZE_ERR");
		}
		var cssRule = CSSOM$e.parse(rule).cssRules[0];
		cssRule.parentRule = this;
		this.cssRules.splice(index, 0, cssRule);
		return index;
	};

	/**
	 * Used to delete a rule from the grouping rule.
	 *
	 *   cssGroupingRule.cssText
	 *   -> "img{border:none;}body{margin:0;}"
	 *   cssGroupingRule.deleteRule(0)
	 *   cssGroupingRule.cssText
	 *   -> "body{margin:0;}"
	 *
	 * @param {number} index within the grouping rule's rule list of the rule to remove.
	 * @see https://www.w3.org/TR/cssom-1/#dom-cssgroupingrule-deleterule
	 */
	 CSSOM$e.CSSGroupingRule.prototype.deleteRule = function deleteRule(index) {
		if (index < 0 || index >= this.cssRules.length) {
			throw new RangeError("INDEX_SIZE_ERR");
		}
		this.cssRules.splice(index, 1)[0].parentRule = null;
	};

	//.CommonJS
	CSSGroupingRule.CSSGroupingRule = CSSOM$e.CSSGroupingRule;

	var CSSMediaRule = {};

	var CSSConditionRule = {};

	//.CommonJS
	var CSSOM$d = {
	  CSSRule: CSSRule.CSSRule,
	  CSSGroupingRule: CSSGroupingRule.CSSGroupingRule
	};
	///CommonJS


	/**
	 * @constructor
	 * @see https://www.w3.org/TR/css-conditional-3/#the-cssconditionrule-interface
	 */
	CSSOM$d.CSSConditionRule = function CSSConditionRule() {
	  CSSOM$d.CSSGroupingRule.call(this);
	  this.cssRules = [];
	};

	CSSOM$d.CSSConditionRule.prototype = new CSSOM$d.CSSGroupingRule();
	CSSOM$d.CSSConditionRule.prototype.constructor = CSSOM$d.CSSConditionRule;
	CSSOM$d.CSSConditionRule.prototype.conditionText = '';
	CSSOM$d.CSSConditionRule.prototype.cssText = '';

	//.CommonJS
	CSSConditionRule.CSSConditionRule = CSSOM$d.CSSConditionRule;

	//.CommonJS
	var CSSOM$c = {
		CSSRule: CSSRule.CSSRule,
		CSSGroupingRule: CSSGroupingRule.CSSGroupingRule,
		CSSConditionRule: CSSConditionRule.CSSConditionRule,
		MediaList: MediaList.MediaList
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssmediarule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSMediaRule
	 */
	CSSOM$c.CSSMediaRule = function CSSMediaRule() {
		CSSOM$c.CSSConditionRule.call(this);
		this.media = new CSSOM$c.MediaList();
	};

	CSSOM$c.CSSMediaRule.prototype = new CSSOM$c.CSSConditionRule();
	CSSOM$c.CSSMediaRule.prototype.constructor = CSSOM$c.CSSMediaRule;
	CSSOM$c.CSSMediaRule.prototype.type = 4;

	// https://opensource.apple.com/source/WebCore/WebCore-7611.1.21.161.3/css/CSSMediaRule.cpp
	Object.defineProperties(CSSOM$c.CSSMediaRule.prototype, {
	  "conditionText": {
	    get: function() {
	      return this.media.mediaText;
	    },
	    set: function(value) {
	      this.media.mediaText = value;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  "cssText": {
	    get: function() {
	      var cssTexts = [];
	      for (var i=0, length=this.cssRules.length; i < length; i++) {
	        cssTexts.push(this.cssRules[i].cssText);
	      }
	      return "@media " + this.media.mediaText + " {" + cssTexts.join("") + "}";
	    },
	    configurable: true,
	    enumerable: true
	  }
	});


	//.CommonJS
	CSSMediaRule.CSSMediaRule = CSSOM$c.CSSMediaRule;

	var CSSSupportsRule = {};

	//.CommonJS
	var CSSOM$b = {
	  CSSRule: CSSRule.CSSRule,
	  CSSGroupingRule: CSSGroupingRule.CSSGroupingRule,
	  CSSConditionRule: CSSConditionRule.CSSConditionRule
	};
	///CommonJS


	/**
	 * @constructor
	 * @see https://drafts.csswg.org/css-conditional-3/#the-csssupportsrule-interface
	 */
	CSSOM$b.CSSSupportsRule = function CSSSupportsRule() {
	  CSSOM$b.CSSConditionRule.call(this);
	};

	CSSOM$b.CSSSupportsRule.prototype = new CSSOM$b.CSSConditionRule();
	CSSOM$b.CSSSupportsRule.prototype.constructor = CSSOM$b.CSSSupportsRule;
	CSSOM$b.CSSSupportsRule.prototype.type = 12;

	Object.defineProperty(CSSOM$b.CSSSupportsRule.prototype, "cssText", {
	  get: function() {
	    var cssTexts = [];

	    for (var i = 0, length = this.cssRules.length; i < length; i++) {
	      cssTexts.push(this.cssRules[i].cssText);
	    }

	    return "@supports " + this.conditionText + " {" + cssTexts.join("") + "}";
	  }
	});

	//.CommonJS
	CSSSupportsRule.CSSSupportsRule = CSSOM$b.CSSSupportsRule;

	var CSSFontFaceRule = {};

	//.CommonJS
	var CSSOM$a = {
		CSSStyleDeclaration: CSSStyleDeclaration.CSSStyleDeclaration,
		CSSRule: CSSRule.CSSRule
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#css-font-face-rule
	 */
	CSSOM$a.CSSFontFaceRule = function CSSFontFaceRule() {
		CSSOM$a.CSSRule.call(this);
		this.style = new CSSOM$a.CSSStyleDeclaration();
		this.style.parentRule = this;
	};

	CSSOM$a.CSSFontFaceRule.prototype = new CSSOM$a.CSSRule();
	CSSOM$a.CSSFontFaceRule.prototype.constructor = CSSOM$a.CSSFontFaceRule;
	CSSOM$a.CSSFontFaceRule.prototype.type = 5;
	//FIXME
	//CSSOM.CSSFontFaceRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSFontFaceRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;

	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSFontFaceRule.cpp
	Object.defineProperty(CSSOM$a.CSSFontFaceRule.prototype, "cssText", {
	  get: function() {
	    return "@font-face {" + this.style.cssText + "}";
	  }
	});


	//.CommonJS
	CSSFontFaceRule.CSSFontFaceRule = CSSOM$a.CSSFontFaceRule;

	var CSSHostRule = {};

	//.CommonJS
	var CSSOM$9 = {
		CSSRule: CSSRule.CSSRule
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://www.w3.org/TR/shadow-dom/#host-at-rule
	 */
	CSSOM$9.CSSHostRule = function CSSHostRule() {
		CSSOM$9.CSSRule.call(this);
		this.cssRules = [];
	};

	CSSOM$9.CSSHostRule.prototype = new CSSOM$9.CSSRule();
	CSSOM$9.CSSHostRule.prototype.constructor = CSSOM$9.CSSHostRule;
	CSSOM$9.CSSHostRule.prototype.type = 1001;
	//FIXME
	//CSSOM.CSSHostRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSHostRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;

	Object.defineProperty(CSSOM$9.CSSHostRule.prototype, "cssText", {
		get: function() {
			var cssTexts = [];
			for (var i=0, length=this.cssRules.length; i < length; i++) {
				cssTexts.push(this.cssRules[i].cssText);
			}
			return "@host {" + cssTexts.join("") + "}";
		}
	});


	//.CommonJS
	CSSHostRule.CSSHostRule = CSSOM$9.CSSHostRule;

	var CSSKeyframeRule = {};

	//.CommonJS
	var CSSOM$8 = {
		CSSRule: CSSRule.CSSRule,
		CSSStyleDeclaration: CSSStyleDeclaration.CSSStyleDeclaration
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://www.w3.org/TR/css3-animations/#DOM-CSSKeyframeRule
	 */
	CSSOM$8.CSSKeyframeRule = function CSSKeyframeRule() {
		CSSOM$8.CSSRule.call(this);
		this.keyText = '';
		this.style = new CSSOM$8.CSSStyleDeclaration();
		this.style.parentRule = this;
	};

	CSSOM$8.CSSKeyframeRule.prototype = new CSSOM$8.CSSRule();
	CSSOM$8.CSSKeyframeRule.prototype.constructor = CSSOM$8.CSSKeyframeRule;
	CSSOM$8.CSSKeyframeRule.prototype.type = 8;
	//FIXME
	//CSSOM.CSSKeyframeRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSKeyframeRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;

	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSKeyframeRule.cpp
	Object.defineProperty(CSSOM$8.CSSKeyframeRule.prototype, "cssText", {
	  get: function() {
	    return this.keyText + " {" + this.style.cssText + "} ";
	  }
	});


	//.CommonJS
	CSSKeyframeRule.CSSKeyframeRule = CSSOM$8.CSSKeyframeRule;

	var CSSKeyframesRule = {};

	//.CommonJS
	var CSSOM$7 = {
		CSSRule: CSSRule.CSSRule
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://www.w3.org/TR/css3-animations/#DOM-CSSKeyframesRule
	 */
	CSSOM$7.CSSKeyframesRule = function CSSKeyframesRule() {
		CSSOM$7.CSSRule.call(this);
		this.name = '';
		this.cssRules = [];
	};

	CSSOM$7.CSSKeyframesRule.prototype = new CSSOM$7.CSSRule();
	CSSOM$7.CSSKeyframesRule.prototype.constructor = CSSOM$7.CSSKeyframesRule;
	CSSOM$7.CSSKeyframesRule.prototype.type = 7;
	//FIXME
	//CSSOM.CSSKeyframesRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSKeyframesRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;

	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSKeyframesRule.cpp
	Object.defineProperty(CSSOM$7.CSSKeyframesRule.prototype, "cssText", {
	  get: function() {
	    var cssTexts = [];
	    for (var i=0, length=this.cssRules.length; i < length; i++) {
	      cssTexts.push("  " + this.cssRules[i].cssText);
	    }
	    return "@" + (this._vendorPrefix || '') + "keyframes " + this.name + " { \n" + cssTexts.join("\n") + "\n}";
	  }
	});


	//.CommonJS
	CSSKeyframesRule.CSSKeyframesRule = CSSOM$7.CSSKeyframesRule;

	var CSSValueExpression = {};

	var CSSValue = {};

	//.CommonJS
	var CSSOM$6 = {};
	///CommonJS


	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSValue
	 *
	 * TODO: add if needed
	 */
	CSSOM$6.CSSValue = function CSSValue() {
	};

	CSSOM$6.CSSValue.prototype = {
		constructor: CSSOM$6.CSSValue,

		// @see: http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSValue
		set cssText(text) {
			var name = this._getConstructorName();

			throw new Error('DOMException: property "cssText" of "' + name + '" is readonly and can not be replaced with "' + text + '"!');
		},

		get cssText() {
			var name = this._getConstructorName();

			throw new Error('getter "cssText" of "' + name + '" is not implemented!');
		},

		_getConstructorName: function() {
			var s = this.constructor.toString(),
					c = s.match(/function\s([^\(]+)/),
					name = c[1];

			return name;
		}
	};


	//.CommonJS
	CSSValue.CSSValue = CSSOM$6.CSSValue;

	//.CommonJS
	var CSSOM$5 = {
		CSSValue: CSSValue.CSSValue
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://msdn.microsoft.com/en-us/library/ms537634(v=vs.85).aspx
	 *
	 */
	CSSOM$5.CSSValueExpression = function CSSValueExpression(token, idx) {
		this._token = token;
		this._idx = idx;
	};

	CSSOM$5.CSSValueExpression.prototype = new CSSOM$5.CSSValue();
	CSSOM$5.CSSValueExpression.prototype.constructor = CSSOM$5.CSSValueExpression;

	/**
	 * parse css expression() value
	 *
	 * @return {Object}
	 *         - error:
	 *         or
	 *         - idx:
	 *         - expression:
	 *
	 * Example:
	 *
	 * .selector {
	 *		zoom: expression(documentElement.clientWidth > 1000 ? '1000px' : 'auto');
	 * }
	 */
	CSSOM$5.CSSValueExpression.prototype.parse = function() {
		var token = this._token,
				idx = this._idx;

		var character = '',
				expression = '',
				error = '',
				info,
				paren = [];


		for (; ; ++idx) {
			character = token.charAt(idx);

			// end of token
			if (character === '') {
				error = 'css expression error: unfinished expression!';
				break;
			}

			switch(character) {
				case '(':
					paren.push(character);
					expression += character;
					break;

				case ')':
					paren.pop(character);
					expression += character;
					break;

				case '/':
					if ((info = this._parseJSComment(token, idx))) { // comment?
						if (info.error) {
							error = 'css expression error: unfinished comment in expression!';
						} else {
							idx = info.idx;
							// ignore the comment
						}
					} else if ((info = this._parseJSRexExp(token, idx))) { // regexp
						idx = info.idx;
						expression += info.text;
					} else { // other
						expression += character;
					}
					break;

				case "'":
				case '"':
					info = this._parseJSString(token, idx, character);
					if (info) { // string
						idx = info.idx;
						expression += info.text;
					} else {
						expression += character;
					}
					break;

				default:
					expression += character;
					break;
			}

			if (error) {
				break;
			}

			// end of expression
			if (paren.length === 0) {
				break;
			}
		}

		var ret;
		if (error) {
			ret = {
				error: error
			};
		} else {
			ret = {
				idx: idx,
				expression: expression
			};
		}

		return ret;
	};


	/**
	 *
	 * @return {Object|false}
	 *          - idx:
	 *          - text:
	 *          or
	 *          - error:
	 *          or
	 *          false
	 *
	 */
	CSSOM$5.CSSValueExpression.prototype._parseJSComment = function(token, idx) {
		var nextChar = token.charAt(idx + 1),
				text;

		if (nextChar === '/' || nextChar === '*') {
			var startIdx = idx,
					endIdx,
					commentEndChar;

			if (nextChar === '/') { // line comment
				commentEndChar = '\n';
			} else if (nextChar === '*') { // block comment
				commentEndChar = '*/';
			}

			endIdx = token.indexOf(commentEndChar, startIdx + 1 + 1);
			if (endIdx !== -1) {
				endIdx = endIdx + commentEndChar.length - 1;
				text = token.substring(idx, endIdx + 1);
				return {
					idx: endIdx,
					text: text
				};
			} else {
				var error = 'css expression error: unfinished comment in expression!';
				return {
					error: error
				};
			}
		} else {
			return false;
		}
	};


	/**
	 *
	 * @return {Object|false}
	 *					- idx:
	 *					- text:
	 *					or 
	 *					false
	 *
	 */
	CSSOM$5.CSSValueExpression.prototype._parseJSString = function(token, idx, sep) {
		var endIdx = this._findMatchedIdx(token, idx, sep),
				text;

		if (endIdx === -1) {
			return false;
		} else {
			text = token.substring(idx, endIdx + sep.length);

			return {
				idx: endIdx,
				text: text
			};
		}
	};


	/**
	 * parse regexp in css expression
	 *
	 * @return {Object|false}
	 *				- idx:
	 *				- regExp:
	 *				or 
	 *				false
	 */

	/*

	all legal RegExp
	 
	/a/
	(/a/)
	[/a/]
	[12, /a/]

	!/a/

	+/a/
	-/a/
	* /a/
	/ /a/
	%/a/

	===/a/
	!==/a/
	==/a/
	!=/a/
	>/a/
	>=/a/
	</a/
	<=/a/

	&/a/
	|/a/
	^/a/
	~/a/
	<</a/
	>>/a/
	>>>/a/

	&&/a/
	||/a/
	?/a/
	=/a/
	,/a/

			delete /a/
					in /a/
	instanceof /a/
					new /a/
			typeof /a/
				void /a/

	*/
	CSSOM$5.CSSValueExpression.prototype._parseJSRexExp = function(token, idx) {
		var before = token.substring(0, idx).replace(/\s+$/, ""),
				legalRegx = [
					/^$/,
					/\($/,
					/\[$/,
					/\!$/,
					/\+$/,
					/\-$/,
					/\*$/,
					/\/\s+/,
					/\%$/,
					/\=$/,
					/\>$/,
					/<$/,
					/\&$/,
					/\|$/,
					/\^$/,
					/\~$/,
					/\?$/,
					/\,$/,
					/delete$/,
					/in$/,
					/instanceof$/,
					/new$/,
					/typeof$/,
					/void$/
				];

		var isLegal = legalRegx.some(function(reg) {
			return reg.test(before);
		});

		if (!isLegal) {
			return false;
		} else {
			var sep = '/';

			// same logic as string
			return this._parseJSString(token, idx, sep);
		}
	};


	/**
	 *
	 * find next sep(same line) index in `token`
	 *
	 * @return {Number}
	 *
	 */
	CSSOM$5.CSSValueExpression.prototype._findMatchedIdx = function(token, idx, sep) {
		var startIdx = idx,
				endIdx;

		var NOT_FOUND = -1;

		while(true) {
			endIdx = token.indexOf(sep, startIdx + 1);

			if (endIdx === -1) { // not found
				endIdx = NOT_FOUND;
				break;
			} else {
				var text = token.substring(idx + 1, endIdx),
						matched = text.match(/\\+$/);
				if (!matched || matched[0] % 2 === 0) { // not escaped
					break;
				} else {
					startIdx = endIdx;
				}
			}
		}

		// boundary must be in the same line(js sting or regexp)
		var nextNewLineIdx = token.indexOf('\n', idx + 1);
		if (nextNewLineIdx < endIdx) {
			endIdx = NOT_FOUND;
		}


		return endIdx;
	};




	//.CommonJS
	CSSValueExpression.CSSValueExpression = CSSOM$5.CSSValueExpression;

	var CSSDocumentRule = {};

	var MatcherList = {};

	//.CommonJS
	var CSSOM$4 = {};
	///CommonJS


	/**
	 * @constructor
	 * @see https://developer.mozilla.org/en/CSS/@-moz-document
	 */
	CSSOM$4.MatcherList = function MatcherList(){
	    this.length = 0;
	};

	CSSOM$4.MatcherList.prototype = {

	    constructor: CSSOM$4.MatcherList,

	    /**
	     * @return {string}
	     */
	    get matcherText() {
	        return Array.prototype.join.call(this, ", ");
	    },

	    /**
	     * @param {string} value
	     */
	    set matcherText(value) {
	        // just a temporary solution, actually it may be wrong by just split the value with ',', because a url can include ','.
	        var values = value.split(",");
	        var length = this.length = values.length;
	        for (var i=0; i<length; i++) {
	            this[i] = values[i].trim();
	        }
	    },

	    /**
	     * @param {string} matcher
	     */
	    appendMatcher: function(matcher) {
	        if (Array.prototype.indexOf.call(this, matcher) === -1) {
	            this[this.length] = matcher;
	            this.length++;
	        }
	    },

	    /**
	     * @param {string} matcher
	     */
	    deleteMatcher: function(matcher) {
	        var index = Array.prototype.indexOf.call(this, matcher);
	        if (index !== -1) {
	            Array.prototype.splice.call(this, index, 1);
	        }
	    }

	};


	//.CommonJS
	MatcherList.MatcherList = CSSOM$4.MatcherList;

	//.CommonJS
	var CSSOM$3 = {
	    CSSRule: CSSRule.CSSRule,
	    MatcherList: MatcherList.MatcherList
	};
	///CommonJS


	/**
	 * @constructor
	 * @see https://developer.mozilla.org/en/CSS/@-moz-document
	 */
	CSSOM$3.CSSDocumentRule = function CSSDocumentRule() {
	    CSSOM$3.CSSRule.call(this);
	    this.matcher = new CSSOM$3.MatcherList();
	    this.cssRules = [];
	};

	CSSOM$3.CSSDocumentRule.prototype = new CSSOM$3.CSSRule();
	CSSOM$3.CSSDocumentRule.prototype.constructor = CSSOM$3.CSSDocumentRule;
	CSSOM$3.CSSDocumentRule.prototype.type = 10;
	//FIXME
	//CSSOM.CSSDocumentRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSDocumentRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;

	Object.defineProperty(CSSOM$3.CSSDocumentRule.prototype, "cssText", {
	  get: function() {
	    var cssTexts = [];
	    for (var i=0, length=this.cssRules.length; i < length; i++) {
	        cssTexts.push(this.cssRules[i].cssText);
	    }
	    return "@-moz-document " + this.matcher.matcherText + " {" + cssTexts.join("") + "}";
	  }
	});


	//.CommonJS
	CSSDocumentRule.CSSDocumentRule = CSSOM$3.CSSDocumentRule;

	//.CommonJS
	var CSSOM$2 = {};
	///CommonJS


	/**
	 * @param {string} token
	 */
	CSSOM$2.parse = function parse(token) {

		var i = 0;

		/**
			"before-selector" or
			"selector" or
			"atRule" or
			"atBlock" or
			"conditionBlock" or
			"before-name" or
			"name" or
			"before-value" or
			"value"
		*/
		var state = "before-selector";

		var index;
		var buffer = "";
		var valueParenthesisDepth = 0;

		var SIGNIFICANT_WHITESPACE = {
			"selector": true,
			"value": true,
			"value-parenthesis": true,
			"atRule": true,
			"importRule-begin": true,
			"importRule": true,
			"atBlock": true,
			"conditionBlock": true,
			'documentRule-begin': true
		};

		var styleSheet = new CSSOM$2.CSSStyleSheet();

		// @type CSSStyleSheet|CSSMediaRule|CSSSupportsRule|CSSFontFaceRule|CSSKeyframesRule|CSSDocumentRule
		var currentScope = styleSheet;

		// @type CSSMediaRule|CSSSupportsRule|CSSKeyframesRule|CSSDocumentRule
		var parentRule;

		var ancestorRules = [];
		var hasAncestors = false;
		var prevScope;

		var name, priority="", styleRule, mediaRule, supportsRule, importRule, fontFaceRule, keyframesRule, documentRule, hostRule;

		var atKeyframesRegExp = /@(-(?:\w+-)+)?keyframes/g;

		var parseError = function(message) {
			var lines = token.substring(0, i).split('\n');
			var lineCount = lines.length;
			var charCount = lines.pop().length + 1;
			var error = new Error(message + ' (line ' + lineCount + ', char ' + charCount + ')');
			error.line = lineCount;
			/* jshint sub : true */
			error['char'] = charCount;
			error.styleSheet = styleSheet;
			throw error;
		};

		for (var character; (character = token.charAt(i)); i++) {

			switch (character) {

			case " ":
			case "\t":
			case "\r":
			case "\n":
			case "\f":
				if (SIGNIFICANT_WHITESPACE[state]) {
					buffer += character;
				}
				break;

			// String
			case '"':
				index = i + 1;
				do {
					index = token.indexOf('"', index) + 1;
					if (!index) {
						parseError('Unmatched "');
					}
				} while (token[index - 2] === '\\');
				buffer += token.slice(i, index);
				i = index - 1;
				switch (state) {
					case 'before-value':
						state = 'value';
						break;
					case 'importRule-begin':
						state = 'importRule';
						break;
				}
				break;

			case "'":
				index = i + 1;
				do {
					index = token.indexOf("'", index) + 1;
					if (!index) {
						parseError("Unmatched '");
					}
				} while (token[index - 2] === '\\');
				buffer += token.slice(i, index);
				i = index - 1;
				switch (state) {
					case 'before-value':
						state = 'value';
						break;
					case 'importRule-begin':
						state = 'importRule';
						break;
				}
				break;

			// Comment
			case "/":
				if (token.charAt(i + 1) === "*") {
					i += 2;
					index = token.indexOf("*/", i);
					if (index === -1) {
						parseError("Missing */");
					} else {
						i = index + 1;
					}
				} else {
					buffer += character;
				}
				if (state === "importRule-begin") {
					buffer += " ";
					state = "importRule";
				}
				break;

			// At-rule
			case "@":
				if (token.indexOf("@-moz-document", i) === i) {
					state = "documentRule-begin";
					documentRule = new CSSOM$2.CSSDocumentRule();
					documentRule.__starts = i;
					i += "-moz-document".length;
					buffer = "";
					break;
				} else if (token.indexOf("@media", i) === i) {
					state = "atBlock";
					mediaRule = new CSSOM$2.CSSMediaRule();
					mediaRule.__starts = i;
					i += "media".length;
					buffer = "";
					break;
				} else if (token.indexOf("@supports", i) === i) {
					state = "conditionBlock";
					supportsRule = new CSSOM$2.CSSSupportsRule();
					supportsRule.__starts = i;
					i += "supports".length;
					buffer = "";
					break;
				} else if (token.indexOf("@host", i) === i) {
					state = "hostRule-begin";
					i += "host".length;
					hostRule = new CSSOM$2.CSSHostRule();
					hostRule.__starts = i;
					buffer = "";
					break;
				} else if (token.indexOf("@import", i) === i) {
					state = "importRule-begin";
					i += "import".length;
					buffer += "@import";
					break;
				} else if (token.indexOf("@font-face", i) === i) {
					state = "fontFaceRule-begin";
					i += "font-face".length;
					fontFaceRule = new CSSOM$2.CSSFontFaceRule();
					fontFaceRule.__starts = i;
					buffer = "";
					break;
				} else {
					atKeyframesRegExp.lastIndex = i;
					var matchKeyframes = atKeyframesRegExp.exec(token);
					if (matchKeyframes && matchKeyframes.index === i) {
						state = "keyframesRule-begin";
						keyframesRule = new CSSOM$2.CSSKeyframesRule();
						keyframesRule.__starts = i;
						keyframesRule._vendorPrefix = matchKeyframes[1]; // Will come out as undefined if no prefix was found
						i += matchKeyframes[0].length - 1;
						buffer = "";
						break;
					} else if (state === "selector") {
						state = "atRule";
					}
				}
				buffer += character;
				break;

			case "{":
				if (state === "selector" || state === "atRule") {
					styleRule.selectorText = buffer.trim();
					styleRule.style.__starts = i;
					buffer = "";
					state = "before-name";
				} else if (state === "atBlock") {
					mediaRule.media.mediaText = buffer.trim();

					if (parentRule) {
						ancestorRules.push(parentRule);
					}

					currentScope = parentRule = mediaRule;
					mediaRule.parentStyleSheet = styleSheet;
					buffer = "";
					state = "before-selector";
				} else if (state === "conditionBlock") {
					supportsRule.conditionText = buffer.trim();

					if (parentRule) {
						ancestorRules.push(parentRule);
					}

					currentScope = parentRule = supportsRule;
					supportsRule.parentStyleSheet = styleSheet;
					buffer = "";
					state = "before-selector";
				} else if (state === "hostRule-begin") {
					if (parentRule) {
						ancestorRules.push(parentRule);
					}

					currentScope = parentRule = hostRule;
					hostRule.parentStyleSheet = styleSheet;
					buffer = "";
					state = "before-selector";
				} else if (state === "fontFaceRule-begin") {
					if (parentRule) {
						fontFaceRule.parentRule = parentRule;
					}
					fontFaceRule.parentStyleSheet = styleSheet;
					styleRule = fontFaceRule;
					buffer = "";
					state = "before-name";
				} else if (state === "keyframesRule-begin") {
					keyframesRule.name = buffer.trim();
					if (parentRule) {
						ancestorRules.push(parentRule);
						keyframesRule.parentRule = parentRule;
					}
					keyframesRule.parentStyleSheet = styleSheet;
					currentScope = parentRule = keyframesRule;
					buffer = "";
					state = "keyframeRule-begin";
				} else if (state === "keyframeRule-begin") {
					styleRule = new CSSOM$2.CSSKeyframeRule();
					styleRule.keyText = buffer.trim();
					styleRule.__starts = i;
					buffer = "";
					state = "before-name";
				} else if (state === "documentRule-begin") {
					// FIXME: what if this '{' is in the url text of the match function?
					documentRule.matcher.matcherText = buffer.trim();
					if (parentRule) {
						ancestorRules.push(parentRule);
						documentRule.parentRule = parentRule;
					}
					currentScope = parentRule = documentRule;
					documentRule.parentStyleSheet = styleSheet;
					buffer = "";
					state = "before-selector";
				}
				break;

			case ":":
				if (state === "name") {
					name = buffer.trim();
					buffer = "";
					state = "before-value";
				} else {
					buffer += character;
				}
				break;

			case "(":
				if (state === 'value') {
					// ie css expression mode
					if (buffer.trim() === 'expression') {
						var info = (new CSSOM$2.CSSValueExpression(token, i)).parse();

						if (info.error) {
							parseError(info.error);
						} else {
							buffer += info.expression;
							i = info.idx;
						}
					} else {
						state = 'value-parenthesis';
						//always ensure this is reset to 1 on transition
						//from value to value-parenthesis
						valueParenthesisDepth = 1;
						buffer += character;
					}
				} else if (state === 'value-parenthesis') {
					valueParenthesisDepth++;
					buffer += character;
				} else {
					buffer += character;
				}
				break;

			case ")":
				if (state === 'value-parenthesis') {
					valueParenthesisDepth--;
					if (valueParenthesisDepth === 0) state = 'value';
				}
				buffer += character;
				break;

			case "!":
				if (state === "value" && token.indexOf("!important", i) === i) {
					priority = "important";
					i += "important".length;
				} else {
					buffer += character;
				}
				break;

			case ";":
				switch (state) {
					case "value":
						styleRule.style.setProperty(name, buffer.trim(), priority);
						priority = "";
						buffer = "";
						state = "before-name";
						break;
					case "atRule":
						buffer = "";
						state = "before-selector";
						break;
					case "importRule":
						importRule = new CSSOM$2.CSSImportRule();
						importRule.parentStyleSheet = importRule.styleSheet.parentStyleSheet = styleSheet;
						importRule.cssText = buffer + character;
						styleSheet.cssRules.push(importRule);
						buffer = "";
						state = "before-selector";
						break;
					default:
						buffer += character;
						break;
				}
				break;

			case "}":
				switch (state) {
					case "value":
						styleRule.style.setProperty(name, buffer.trim(), priority);
						priority = "";
						/* falls through */
					case "before-name":
					case "name":
						styleRule.__ends = i + 1;
						if (parentRule) {
							styleRule.parentRule = parentRule;
						}
						styleRule.parentStyleSheet = styleSheet;
						currentScope.cssRules.push(styleRule);
						buffer = "";
						if (currentScope.constructor === CSSOM$2.CSSKeyframesRule) {
							state = "keyframeRule-begin";
						} else {
							state = "before-selector";
						}
						break;
					case "keyframeRule-begin":
					case "before-selector":
					case "selector":
						// End of media/supports/document rule.
						if (!parentRule) {
							parseError("Unexpected }");
						}

						// Handle rules nested in @media or @supports
						hasAncestors = ancestorRules.length > 0;

						while (ancestorRules.length > 0) {
							parentRule = ancestorRules.pop();

							if (
								parentRule.constructor.name === "CSSMediaRule"
								|| parentRule.constructor.name === "CSSSupportsRule"
							) {
								prevScope = currentScope;
								currentScope = parentRule;
								currentScope.cssRules.push(prevScope);
								break;
							}

							if (ancestorRules.length === 0) {
								hasAncestors = false;
							}
						}
						
						if (!hasAncestors) {
							currentScope.__ends = i + 1;
							styleSheet.cssRules.push(currentScope);
							currentScope = styleSheet;
							parentRule = null;
						}

						buffer = "";
						state = "before-selector";
						break;
				}
				break;

			default:
				switch (state) {
					case "before-selector":
						state = "selector";
						styleRule = new CSSOM$2.CSSStyleRule();
						styleRule.__starts = i;
						break;
					case "before-name":
						state = "name";
						break;
					case "before-value":
						state = "value";
						break;
					case "importRule-begin":
						state = "importRule";
						break;
				}
				buffer += character;
				break;
			}
		}

		return styleSheet;
	};


	//.CommonJS
	parse$2.parse = CSSOM$2.parse;
	// The following modules cannot be included sooner due to the mutual dependency with parse.js
	CSSOM$2.CSSStyleSheet = CSSStyleSheet.CSSStyleSheet;
	CSSOM$2.CSSStyleRule = CSSStyleRule.CSSStyleRule;
	CSSOM$2.CSSImportRule = CSSImportRule.CSSImportRule;
	CSSOM$2.CSSGroupingRule = CSSGroupingRule.CSSGroupingRule;
	CSSOM$2.CSSMediaRule = CSSMediaRule.CSSMediaRule;
	CSSOM$2.CSSConditionRule = CSSConditionRule.CSSConditionRule;
	CSSOM$2.CSSSupportsRule = CSSSupportsRule.CSSSupportsRule;
	CSSOM$2.CSSFontFaceRule = CSSFontFaceRule.CSSFontFaceRule;
	CSSOM$2.CSSHostRule = CSSHostRule.CSSHostRule;
	CSSOM$2.CSSStyleDeclaration = CSSStyleDeclaration.CSSStyleDeclaration;
	CSSOM$2.CSSKeyframeRule = CSSKeyframeRule.CSSKeyframeRule;
	CSSOM$2.CSSKeyframesRule = CSSKeyframesRule.CSSKeyframesRule;
	CSSOM$2.CSSValueExpression = CSSValueExpression.CSSValueExpression;
	CSSOM$2.CSSDocumentRule = CSSDocumentRule.CSSDocumentRule;

	//.CommonJS
	var CSSOM$1 = {};
	///CommonJS


	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration
	 */
	CSSOM$1.CSSStyleDeclaration = function CSSStyleDeclaration(){
		this.length = 0;
		this.parentRule = null;

		// NON-STANDARD
		this._importants = {};
	};


	CSSOM$1.CSSStyleDeclaration.prototype = {

		constructor: CSSOM$1.CSSStyleDeclaration,

		/**
		 *
		 * @param {string} name
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-getPropertyValue
		 * @return {string} the value of the property if it has been explicitly set for this declaration block.
		 * Returns the empty string if the property has not been set.
		 */
		getPropertyValue: function(name) {
			return this[name] || "";
		},

		/**
		 *
		 * @param {string} name
		 * @param {string} value
		 * @param {string} [priority=null] "important" or null
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-setProperty
		 */
		setProperty: function(name, value, priority) {
			if (this[name]) {
				// Property already exist. Overwrite it.
				var index = Array.prototype.indexOf.call(this, name);
				if (index < 0) {
					this[this.length] = name;
					this.length++;
				}
			} else {
				// New property.
				this[this.length] = name;
				this.length++;
			}
			this[name] = value + "";
			this._importants[name] = priority;
		},

		/**
		 *
		 * @param {string} name
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-removeProperty
		 * @return {string} the value of the property if it has been explicitly set for this declaration block.
		 * Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.
		 */
		removeProperty: function(name) {
			if (!(name in this)) {
				return "";
			}
			var index = Array.prototype.indexOf.call(this, name);
			if (index < 0) {
				return "";
			}
			var prevValue = this[name];
			this[name] = "";

			// That's what WebKit and Opera do
			Array.prototype.splice.call(this, index, 1);

			// That's what Firefox does
			//this[index] = ""

			return prevValue;
		},

		getPropertyCSSValue: function() {
			//FIXME
		},

		/**
		 *
		 * @param {String} name
		 */
		getPropertyPriority: function(name) {
			return this._importants[name] || "";
		},


		/**
		 *   element.style.overflow = "auto"
		 *   element.style.getPropertyShorthand("overflow-x")
		 *   -> "overflow"
		 */
		getPropertyShorthand: function() {
			//FIXME
		},

		isPropertyImplicit: function() {
			//FIXME
		},

		// Doesn't work in IE < 9
		get cssText(){
			var properties = [];
			for (var i=0, length=this.length; i < length; ++i) {
				var name = this[i];
				var value = this.getPropertyValue(name);
				var priority = this.getPropertyPriority(name);
				if (priority) {
					priority = " !" + priority;
				}
				properties[i] = name + ": " + value + priority + ";";
			}
			return properties.join(" ");
		},

		set cssText(text){
			var i, name;
			for (i = this.length; i--;) {
				name = this[i];
				this[name] = "";
			}
			Array.prototype.splice.call(this, 0, this.length);
			this._importants = {};

			var dummyRule = CSSOM$1.parse('#bogus{' + text + '}').cssRules[0].style;
			var length = dummyRule.length;
			for (i = 0; i < length; ++i) {
				name = dummyRule[i];
				this.setProperty(dummyRule[i], dummyRule.getPropertyValue(name), dummyRule.getPropertyPriority(name));
			}
		}
	};


	//.CommonJS
	CSSStyleDeclaration.CSSStyleDeclaration = CSSOM$1.CSSStyleDeclaration;
	CSSOM$1.parse = parse$2.parse; // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleDeclaration.js

	var clone = {};

	//.CommonJS
	var CSSOM = {
		CSSStyleSheet: CSSStyleSheet.CSSStyleSheet,
		CSSRule: CSSRule.CSSRule,
		CSSStyleRule: CSSStyleRule.CSSStyleRule,
		CSSGroupingRule: CSSGroupingRule.CSSGroupingRule,
		CSSConditionRule: CSSConditionRule.CSSConditionRule,
		CSSMediaRule: CSSMediaRule.CSSMediaRule,
		CSSSupportsRule: CSSSupportsRule.CSSSupportsRule,
		CSSStyleDeclaration: CSSStyleDeclaration.CSSStyleDeclaration,
		CSSKeyframeRule: CSSKeyframeRule.CSSKeyframeRule,
		CSSKeyframesRule: CSSKeyframesRule.CSSKeyframesRule
	};
	///CommonJS


	/**
	 * Produces a deep copy of stylesheet — the instance variables of stylesheet are copied recursively.
	 * @param {CSSStyleSheet|CSSOM.CSSStyleSheet} stylesheet
	 * @nosideeffects
	 * @return {CSSOM.CSSStyleSheet}
	 */
	CSSOM.clone = function clone(stylesheet) {

		var cloned = new CSSOM.CSSStyleSheet();

		var rules = stylesheet.cssRules;
		if (!rules) {
			return cloned;
		}

		for (var i = 0, rulesLength = rules.length; i < rulesLength; i++) {
			var rule = rules[i];
			var ruleClone = cloned.cssRules[i] = new rule.constructor();

			var style = rule.style;
			if (style) {
				var styleClone = ruleClone.style = new CSSOM.CSSStyleDeclaration();
				for (var j = 0, styleLength = style.length; j < styleLength; j++) {
					var name = styleClone[j] = style[j];
					styleClone[name] = style[name];
					styleClone._importants[name] = style.getPropertyPriority(name);
				}
				styleClone.length = style.length;
			}

			if (rule.hasOwnProperty('keyText')) {
				ruleClone.keyText = rule.keyText;
			}

			if (rule.hasOwnProperty('selectorText')) {
				ruleClone.selectorText = rule.selectorText;
			}

			if (rule.hasOwnProperty('mediaText')) {
				ruleClone.mediaText = rule.mediaText;
			}

			if (rule.hasOwnProperty('conditionText')) {
				ruleClone.conditionText = rule.conditionText;
			}

			if (rule.hasOwnProperty('cssRules')) {
				ruleClone.cssRules = clone(rule).cssRules;
			}
		}

		return cloned;

	};

	//.CommonJS
	clone.clone = CSSOM.clone;

	lib.CSSStyleDeclaration = CSSStyleDeclaration.CSSStyleDeclaration;
	lib.CSSRule = CSSRule.CSSRule;
	lib.CSSGroupingRule = CSSGroupingRule.CSSGroupingRule;
	lib.CSSConditionRule = CSSConditionRule.CSSConditionRule;
	lib.CSSStyleRule = CSSStyleRule.CSSStyleRule;
	lib.MediaList = MediaList.MediaList;
	lib.CSSMediaRule = CSSMediaRule.CSSMediaRule;
	lib.CSSSupportsRule = CSSSupportsRule.CSSSupportsRule;
	lib.CSSImportRule = CSSImportRule.CSSImportRule;
	lib.CSSFontFaceRule = CSSFontFaceRule.CSSFontFaceRule;
	lib.CSSHostRule = CSSHostRule.CSSHostRule;
	lib.StyleSheet = StyleSheet.StyleSheet;
	lib.CSSStyleSheet = CSSStyleSheet.CSSStyleSheet;
	lib.CSSKeyframesRule = CSSKeyframesRule.CSSKeyframesRule;
	lib.CSSKeyframeRule = CSSKeyframeRule.CSSKeyframeRule;
	lib.MatcherList = MatcherList.MatcherList;
	lib.CSSDocumentRule = CSSDocumentRule.CSSDocumentRule;
	lib.CSSValue = CSSValue.CSSValue;
	lib.CSSValueExpression = CSSValueExpression.CSSValueExpression;
	lib.parse = parse$2.parse;
	lib.clone = clone.clone;

	const {parse: parse$1} = lib;

	const {registerHTMLClass: registerHTMLClass$b} = registerHtmlClass;
	const {SHEET} = symbols;

	const {TextElement: TextElement$2} = textElement;

	const tagName$b = 'style';

	/**
	 * @implements globalThis.HTMLStyleElement
	 */
	class HTMLStyleElement$1 extends TextElement$2 {
	  constructor(ownerDocument, localName = tagName$b) {
	    super(ownerDocument, localName);
	    this[SHEET] = null;
	  }

	  get sheet() {
	    const sheet = this[SHEET];
	    if (sheet !== null) {
	      return sheet;
	    }
	    return this[SHEET] = parse$1(this.textContent);
	  }

	  get innerHTML() {
	    return super.innerHTML || '';
	  }
	  set innerHTML(value) {
	    super.textContent = value;
	    this[SHEET] = null;
	  }
	  get innerText() {
	    return super.innerText || '';
	  }
	  set innerText(value) {
	    super.textContent = value;
	    this[SHEET] = null;
	  }
	  get textContent() {
	    return super.textContent || '';
	  }
	  set textContent(value) {
	    super.textContent = value;
	    this[SHEET] = null;
	  }
	}

	registerHTMLClass$b(tagName$b, HTMLStyleElement$1);

	styleElement.HTMLStyleElement = HTMLStyleElement$1;

	var timeElement = {};

	const {HTMLElement: HTMLElement$W} = element;

	/**
	 * @implements globalThis.HTMLTimeElement
	 */
	class HTMLTimeElement$1 extends HTMLElement$W {
	  constructor(ownerDocument, localName = 'time') {
	    super(ownerDocument, localName);
	  }
	}
	timeElement.HTMLTimeElement = HTMLTimeElement$1;

	var fieldSetElement = {};

	const {HTMLElement: HTMLElement$V} = element;

	/**
	 * @implements globalThis.HTMLFieldSetElement
	 */
	class HTMLFieldSetElement$1 extends HTMLElement$V {
	  constructor(ownerDocument, localName = 'fieldset') {
	    super(ownerDocument, localName);
	  }
	}
	fieldSetElement.HTMLFieldSetElement = HTMLFieldSetElement$1;

	var embedElement = {};

	const {HTMLElement: HTMLElement$U} = element;

	/**
	 * @implements globalThis.HTMLEmbedElement
	 */
	class HTMLEmbedElement$1 extends HTMLElement$U {
	  constructor(ownerDocument, localName = 'embed') {
	    super(ownerDocument, localName);
	  }
	}
	embedElement.HTMLEmbedElement = HTMLEmbedElement$1;

	var hrElement = {};

	const {HTMLElement: HTMLElement$T} = element;

	/**
	 * @implements globalThis.HTMLHRElement
	 */
	class HTMLHRElement$1 extends HTMLElement$T {
	  constructor(ownerDocument, localName = 'hr') {
	    super(ownerDocument, localName);
	  }
	}
	hrElement.HTMLHRElement = HTMLHRElement$1;

	var progressElement = {};

	const {HTMLElement: HTMLElement$S} = element;

	/**
	 * @implements globalThis.HTMLProgressElement
	 */
	class HTMLProgressElement$1 extends HTMLElement$S {
	  constructor(ownerDocument, localName = 'progress') {
	    super(ownerDocument, localName);
	  }
	}
	progressElement.HTMLProgressElement = HTMLProgressElement$1;

	var paragraphElement = {};

	const {HTMLElement: HTMLElement$R} = element;

	/**
	 * @implements globalThis.HTMLParagraphElement
	 */
	class HTMLParagraphElement$1 extends HTMLElement$R {
	  constructor(ownerDocument, localName = 'p') {
	    super(ownerDocument, localName);
	  }
	}
	paragraphElement.HTMLParagraphElement = HTMLParagraphElement$1;

	var tableElement = {};

	const {HTMLElement: HTMLElement$Q} = element;

	/**
	 * @implements globalThis.HTMLTableElement
	 */
	class HTMLTableElement$1 extends HTMLElement$Q {
	  constructor(ownerDocument, localName = 'table') {
	    super(ownerDocument, localName);
	  }
	}
	tableElement.HTMLTableElement = HTMLTableElement$1;

	var frameSetElement = {};

	const {HTMLElement: HTMLElement$P} = element;

	/**
	 * @implements globalThis.HTMLFrameSetElement
	 */
	class HTMLFrameSetElement$1 extends HTMLElement$P {
	  constructor(ownerDocument, localName = 'frameset') {
	    super(ownerDocument, localName);
	  }
	}
	frameSetElement.HTMLFrameSetElement = HTMLFrameSetElement$1;

	var liElement = {};

	const {HTMLElement: HTMLElement$O} = element;

	/**
	 * @implements globalThis.HTMLLIElement
	 */
	class HTMLLIElement$1 extends HTMLElement$O {
	  constructor(ownerDocument, localName = 'li') {
	    super(ownerDocument, localName);
	  }
	}
	liElement.HTMLLIElement = HTMLLIElement$1;

	var baseElement = {};

	const {HTMLElement: HTMLElement$N} = element;

	/**
	 * @implements globalThis.HTMLBaseElement
	 */
	class HTMLBaseElement$1 extends HTMLElement$N {
	  constructor(ownerDocument, localName = 'base') {
	    super(ownerDocument, localName);
	  }
	}
	baseElement.HTMLBaseElement = HTMLBaseElement$1;

	var dataListElement = {};

	const {HTMLElement: HTMLElement$M} = element;

	/**
	 * @implements globalThis.HTMLDataListElement
	 */
	class HTMLDataListElement$1 extends HTMLElement$M {
	  constructor(ownerDocument, localName = 'datalist') {
	    super(ownerDocument, localName);
	  }
	}
	dataListElement.HTMLDataListElement = HTMLDataListElement$1;

	var inputElement = {};

	const {registerHTMLClass: registerHTMLClass$a} = registerHtmlClass;
	const {booleanAttribute: booleanAttribute$4} = attributes$2;

	const {HTMLElement: HTMLElement$L} = element;

	const tagName$a = 'input';

	/**
	 * @implements globalThis.HTMLInputElement
	 */
	class HTMLInputElement$1 extends HTMLElement$L {
	  constructor(ownerDocument, localName = tagName$a) {
	    super(ownerDocument, localName);
	  }

	  /* c8 ignore start */
	  get autofocus() { return booleanAttribute$4.get(this, 'autofocus') || -1; }
	  set autofocus(value) { booleanAttribute$4.set(this, 'autofocus', value); }

	  get disabled() { return booleanAttribute$4.get(this, 'disabled'); }
	  set disabled(value) { booleanAttribute$4.set(this, 'disabled', value); }

	  get name() { return this.getAttribute('name'); }
	  set name(value) { this.setAttribute('name', value); }

	  get placeholder() { return this.getAttribute('placeholder'); }
	  set placeholder(value) { this.setAttribute('placeholder', value); }

	  get type() { return this.getAttribute('type'); }
	  set type(value) { this.setAttribute('type', value); }
	  /* c8 ignore stop */
	}

	registerHTMLClass$a(tagName$a, HTMLInputElement$1);

	inputElement.HTMLInputElement = HTMLInputElement$1;

	var paramElement = {};

	const {HTMLElement: HTMLElement$K} = element;

	/**
	 * @implements globalThis.HTMLParamElement
	 */
	class HTMLParamElement$1 extends HTMLElement$K {
	  constructor(ownerDocument, localName = 'param') {
	    super(ownerDocument, localName);
	  }
	}
	paramElement.HTMLParamElement = HTMLParamElement$1;

	var mediaElement = {};

	const {HTMLElement: HTMLElement$J} = element;

	/**
	 * @implements globalThis.HTMLMediaElement
	 */
	class HTMLMediaElement$1 extends HTMLElement$J {
	  constructor(ownerDocument, localName = 'media') {
	    super(ownerDocument, localName);
	  }
	}
	mediaElement.HTMLMediaElement = HTMLMediaElement$1;

	var audioElement = {};

	const {HTMLElement: HTMLElement$I} = element;

	/**
	 * @implements globalThis.HTMLAudioElement
	 */
	class HTMLAudioElement$1 extends HTMLElement$I {
	  constructor(ownerDocument, localName = 'audio') {
	    super(ownerDocument, localName);
	  }
	}
	audioElement.HTMLAudioElement = HTMLAudioElement$1;

	var headingElement = {};

	const {registerHTMLClass: registerHTMLClass$9} = registerHtmlClass;

	const {HTMLElement: HTMLElement$H} = element;

	const tagName$9 = 'h1';

	/**
	 * @implements globalThis.HTMLHeadingElement
	 */
	class HTMLHeadingElement$1 extends HTMLElement$H {
	  constructor(ownerDocument, localName = tagName$9) {
	    super(ownerDocument, localName);
	  }
	}

	registerHTMLClass$9([tagName$9, 'h2', 'h3', 'h4', 'h5', 'h6'], HTMLHeadingElement$1);

	headingElement.HTMLHeadingElement = HTMLHeadingElement$1;

	var directoryElement = {};

	const {HTMLElement: HTMLElement$G} = element;

	/**
	 * @implements globalThis.HTMLDirectoryElement
	 */
	class HTMLDirectoryElement$1 extends HTMLElement$G {
	  constructor(ownerDocument, localName = 'dir') {
	    super(ownerDocument, localName);
	  }
	}
	directoryElement.HTMLDirectoryElement = HTMLDirectoryElement$1;

	var quoteElement = {};

	const {HTMLElement: HTMLElement$F} = element;

	/**
	 * @implements globalThis.HTMLQuoteElement
	 */
	class HTMLQuoteElement$1 extends HTMLElement$F {
	  constructor(ownerDocument, localName = 'quote') {
	    super(ownerDocument, localName);
	  }
	}
	quoteElement.HTMLQuoteElement = HTMLQuoteElement$1;

	var canvasElement = {};

	var canvas$1 = {exports: {}};

	class Canvas$1 {
	    constructor(width, height) {
	        this.width = width;
	        this.height = height;
	    }
	    getContext() { return null; }
	    toDataURL() { return ''; }
	}
	var canvas = {
	    createCanvas: (width, height) => new Canvas$1(width, height)
	};

	/* c8 ignore start */

	try {
	  canvas$1.exports = canvas;
	}
	catch (fallback) {
	  class Canvas {
	    constructor(width, height) {
	      this.width = width;
	      this.height = height;
	    }
	    getContext() { return null; }
	    toDataURL() { return ''; }
	  }
	  canvas$1.exports = {
	    createCanvas: (width, height) => new Canvas(width, height)
	  };
	}

	const {IMAGE: IMAGE$1} = symbols;

	const {registerHTMLClass: registerHTMLClass$8} = registerHtmlClass;
	const {numericAttribute: numericAttribute$1} = attributes$2;

	const Canvas = (m => /* c8 ignore start */ m.__esModule ? m.default : m /* c8 ignore stop */)(canvas$1.exports);

	const {HTMLElement: HTMLElement$E} = element;

	const {createCanvas} = Canvas;

	const tagName$8 = 'canvas';

	/**
	 * @implements globalThis.HTMLCanvasElement
	 */
	class HTMLCanvasElement$1 extends HTMLElement$E {
	  constructor(ownerDocument, localName = tagName$8) {
	    super(ownerDocument, localName);
	    this[IMAGE$1] = createCanvas(300, 150);
	  }

	  get width() {
	    return this[IMAGE$1].width;
	  }

	  set width(value) {
	    numericAttribute$1.set(this, 'width', value);
	    this[IMAGE$1].width = value;
	  }

	  get height() {
	    return this[IMAGE$1].height;
	  }

	  set height(value) {
	    numericAttribute$1.set(this, 'height', value);
	    this[IMAGE$1].height = value;
	  }

	  getContext(type) {
	    return this[IMAGE$1].getContext(type);
	  }

	  toDataURL(...args) {
	    return this[IMAGE$1].toDataURL(...args);
	  }
	}

	registerHTMLClass$8(tagName$8, HTMLCanvasElement$1);

	canvasElement.HTMLCanvasElement = HTMLCanvasElement$1;

	var legendElement = {};

	const {HTMLElement: HTMLElement$D} = element;

	/**
	 * @implements globalThis.HTMLLegendElement
	 */
	class HTMLLegendElement$1 extends HTMLElement$D {
	  constructor(ownerDocument, localName = 'legend') {
	    super(ownerDocument, localName);
	  }
	}
	legendElement.HTMLLegendElement = HTMLLegendElement$1;

	var optionElement = {};

	const {HTMLElement: HTMLElement$C} = element;

	/**
	 * @implements globalThis.HTMLOptionElement
	 */
	class HTMLOptionElement$1 extends HTMLElement$C {
	  constructor(ownerDocument, localName = 'option') {
	    super(ownerDocument, localName);
	  }
	}
	optionElement.HTMLOptionElement = HTMLOptionElement$1;

	var spanElement = {};

	const {HTMLElement: HTMLElement$B} = element;

	/**
	 * @implements globalThis.HTMLSpanElement
	 */
	class HTMLSpanElement$1 extends HTMLElement$B {
	  constructor(ownerDocument, localName = 'span') {
	    super(ownerDocument, localName);
	  }
	}
	spanElement.HTMLSpanElement = HTMLSpanElement$1;

	var meterElement = {};

	const {HTMLElement: HTMLElement$A} = element;

	/**
	 * @implements globalThis.HTMLMeterElement
	 */
	class HTMLMeterElement$1 extends HTMLElement$A {
	  constructor(ownerDocument, localName = 'meter') {
	    super(ownerDocument, localName);
	  }
	}
	meterElement.HTMLMeterElement = HTMLMeterElement$1;

	var videoElement = {};

	const {HTMLElement: HTMLElement$z} = element;

	/**
	 * @implements globalThis.HTMLVideoElement
	 */
	class HTMLVideoElement$1 extends HTMLElement$z {
	  constructor(ownerDocument, localName = 'video') {
	    super(ownerDocument, localName);
	  }
	}
	videoElement.HTMLVideoElement = HTMLVideoElement$1;

	var tableCellElement = {};

	const {HTMLElement: HTMLElement$y} = element;

	/**
	 * @implements globalThis.HTMLTableCellElement
	 */
	class HTMLTableCellElement$1 extends HTMLElement$y {
	  constructor(ownerDocument, localName = 'td') {
	    super(ownerDocument, localName);
	  }
	}
	tableCellElement.HTMLTableCellElement = HTMLTableCellElement$1;

	var titleElement = {};

	const {registerHTMLClass: registerHTMLClass$7} = registerHtmlClass;

	const {TextElement: TextElement$1} = textElement;

	const tagName$7 = 'title';

	/**
	 * @implements globalThis.HTMLTitleElement
	 */
	class HTMLTitleElement$1 extends TextElement$1 {
	  constructor(ownerDocument, localName = tagName$7) {
	    super(ownerDocument, localName);
	  }
	}

	registerHTMLClass$7(tagName$7, HTMLTitleElement$1);

	titleElement.HTMLTitleElement = HTMLTitleElement$1;

	var outputElement = {};

	const {HTMLElement: HTMLElement$x} = element;

	/**
	 * @implements globalThis.HTMLOutputElement
	 */
	class HTMLOutputElement$1 extends HTMLElement$x {
	  constructor(ownerDocument, localName = 'output') {
	    super(ownerDocument, localName);
	  }
	}
	outputElement.HTMLOutputElement = HTMLOutputElement$1;

	var tableRowElement = {};

	const {HTMLElement: HTMLElement$w} = element;

	/**
	 * @implements globalThis.HTMLTableRowElement
	 */
	class HTMLTableRowElement$1 extends HTMLElement$w {
	  constructor(ownerDocument, localName = 'tr') {
	    super(ownerDocument, localName);
	  }
	}
	tableRowElement.HTMLTableRowElement = HTMLTableRowElement$1;

	var dataElement = {};

	const {HTMLElement: HTMLElement$v} = element;

	/**
	 * @implements globalThis.HTMLDataElement
	 */
	class HTMLDataElement$1 extends HTMLElement$v {
	  constructor(ownerDocument, localName = 'data') {
	    super(ownerDocument, localName);
	  }
	}
	dataElement.HTMLDataElement = HTMLDataElement$1;

	var menuElement = {};

	const {HTMLElement: HTMLElement$u} = element;

	/**
	 * @implements globalThis.HTMLMenuElement
	 */
	class HTMLMenuElement$1 extends HTMLElement$u {
	  constructor(ownerDocument, localName = 'menu') {
	    super(ownerDocument, localName);
	  }
	}
	menuElement.HTMLMenuElement = HTMLMenuElement$1;

	var selectElement = {};

	const {registerHTMLClass: registerHTMLClass$6} = registerHtmlClass;
	const {booleanAttribute: booleanAttribute$3} = attributes$2;

	const {HTMLElement: HTMLElement$t} = element;
	const {NodeList: NodeList$2} = nodeList;

	const tagName$6 = 'select';

	/**
	 * @implements globalThis.HTMLSelectElement
	 */
	class HTMLSelectElement$1 extends HTMLElement$t {
	  constructor(ownerDocument, localName = tagName$6) {
	    super(ownerDocument, localName);
	  }

	  get options() {
	    let children = new NodeList$2;
	    let {firstElementChild} = this;
	    while (firstElementChild) {
	      if (firstElementChild.tagName === 'OPTGROUP')
	        children.push(...firstElementChild.children);
	      else
	        children.push(firstElementChild);
	      firstElementChild = firstElementChild.nextElementSibling;
	    }
	    return children;
	  }

	  /* c8 ignore start */
	  get disabled() { return booleanAttribute$3.get(this, 'disabled'); }
	  set disabled(value) { booleanAttribute$3.set(this, 'disabled', value); }

	  get name() { return this.getAttribute('name'); }
	  set name(value) { this.setAttribute('name', value); }
	  /* c8 ignore stop */
	}

	registerHTMLClass$6(tagName$6, HTMLSelectElement$1);

	selectElement.HTMLSelectElement = HTMLSelectElement$1;

	var brElement = {};

	const {HTMLElement: HTMLElement$s} = element;

	/**
	 * @implements globalThis.HTMLBRElement
	 */
	class HTMLBRElement$1 extends HTMLElement$s {
	  constructor(ownerDocument, localName = 'br') {
	    super(ownerDocument, localName);
	  }
	}
	brElement.HTMLBRElement = HTMLBRElement$1;

	var buttonElement = {};

	const {registerHTMLClass: registerHTMLClass$5} = registerHtmlClass;
	const {booleanAttribute: booleanAttribute$2} = attributes$2;

	const {HTMLElement: HTMLElement$r} = element;

	const tagName$5 = 'button';

	/**
	 * @implements globalThis.HTMLButtonElement
	 */
	class HTMLButtonElement$1 extends HTMLElement$r {
	  constructor(ownerDocument, localName = tagName$5) {
	    super(ownerDocument, localName);
	  }

	  /* c8 ignore start */
	  get disabled() { return booleanAttribute$2.get(this, 'disabled'); }
	  set disabled(value) { booleanAttribute$2.set(this, 'disabled', value); }

	  get name() { return this.getAttribute('name'); }
	  set name(value) { this.setAttribute('name', value); }

	  get type() { return this.getAttribute('type'); }
	  set type(value) { this.setAttribute('type', value); }
	  /* c8 ignore stop */
	}

	registerHTMLClass$5(tagName$5, HTMLButtonElement$1);

	buttonElement.HTMLButtonElement = HTMLButtonElement$1;

	var mapElement = {};

	const {HTMLElement: HTMLElement$q} = element;

	/**
	 * @implements globalThis.HTMLMapElement
	 */
	class HTMLMapElement$1 extends HTMLElement$q {
	  constructor(ownerDocument, localName = 'map') {
	    super(ownerDocument, localName);
	  }
	}
	mapElement.HTMLMapElement = HTMLMapElement$1;

	var optGroupElement = {};

	const {HTMLElement: HTMLElement$p} = element;

	/**
	 * @implements globalThis.HTMLOptGroupElement
	 */
	class HTMLOptGroupElement$1 extends HTMLElement$p {
	  constructor(ownerDocument, localName = 'optgroup') {
	    super(ownerDocument, localName);
	  }
	}
	optGroupElement.HTMLOptGroupElement = HTMLOptGroupElement$1;

	var dListElement = {};

	const {HTMLElement: HTMLElement$o} = element;

	/**
	 * @implements globalThis.HTMLDListElement
	 */
	class HTMLDListElement$1 extends HTMLElement$o {
	  constructor(ownerDocument, localName = 'dl') {
	    super(ownerDocument, localName);
	  }
	}
	dListElement.HTMLDListElement = HTMLDListElement$1;

	var textAreaElement = {};

	const {registerHTMLClass: registerHTMLClass$4} = registerHtmlClass;
	const {booleanAttribute: booleanAttribute$1} = attributes$2;

	const {TextElement} = textElement;

	const tagName$4 = 'textarea';

	/**
	 * @implements globalThis.HTMLTextAreaElement
	 */
	class HTMLTextAreaElement$1 extends TextElement {
	  constructor(ownerDocument, localName = tagName$4) {
	    super(ownerDocument, localName);
	  }

	  /* c8 ignore start */
	  get disabled() { return booleanAttribute$1.get(this, 'disabled'); }
	  set disabled(value) { booleanAttribute$1.set(this, 'disabled', value); }

	  get name() { return this.getAttribute('name'); }
	  set name(value) { this.setAttribute('name', value); }

	  get placeholder() { return this.getAttribute('placeholder'); }
	  set placeholder(value) { this.setAttribute('placeholder', value); }

	  get type() { return this.getAttribute('type'); }
	  set type(value) { this.setAttribute('type', value); }

	  get value() { return this.textContent; }
	  set value(content) { this.textContent = content; }
	  /* c8 ignore stop */
	}

	registerHTMLClass$4(tagName$4, HTMLTextAreaElement$1);

	textAreaElement.HTMLTextAreaElement = HTMLTextAreaElement$1;

	var fontElement = {};

	const {HTMLElement: HTMLElement$n} = element;

	/**
	 * @implements globalThis.HTMLFontElement
	 */
	class HTMLFontElement$1 extends HTMLElement$n {
	  constructor(ownerDocument, localName = 'font') {
	    super(ownerDocument, localName);
	  }
	}
	fontElement.HTMLFontElement = HTMLFontElement$1;

	var divElement = {};

	const {HTMLElement: HTMLElement$m} = element;

	/**
	 * @implements globalThis.HTMLDivElement
	 */
	class HTMLDivElement$1 extends HTMLElement$m {
	  constructor(ownerDocument, localName = 'div') {
	    super(ownerDocument, localName);
	  }
	}
	divElement.HTMLDivElement = HTMLDivElement$1;

	var linkElement = {};

	const {registerHTMLClass: registerHTMLClass$3} = registerHtmlClass;
	const {booleanAttribute, stringAttribute: stringAttribute$3} = attributes$2;

	const {HTMLElement: HTMLElement$l} = element;

	const tagName$3 = 'link';

	/**
	 * @implements globalThis.HTMLLinkElement
	 */
	class HTMLLinkElement$1 extends HTMLElement$l {
	  constructor(ownerDocument, localName = tagName$3) {
	    super(ownerDocument, localName);
	  }

	  /* c8 ignore start */ // copy paste from img.src, already covered
	  get disabled() { return booleanAttribute.get(this, 'disabled'); }
	  set disabled(value) { booleanAttribute.set(this, 'disabled', value); }

	  get href() { return stringAttribute$3.get(this, 'href'); }
	  set href(value) { stringAttribute$3.set(this, 'href', value); }

	  get hreflang() { return stringAttribute$3.get(this, 'hreflang'); }
	  set hreflang(value) { stringAttribute$3.set(this, 'hreflang', value); }

	  get media() { return stringAttribute$3.get(this, 'media'); }
	  set media(value) { stringAttribute$3.set(this, 'media', value); }

	  get rel() { return stringAttribute$3.get(this, 'rel'); }
	  set rel(value) { stringAttribute$3.set(this, 'rel', value); }

	  get type() { return stringAttribute$3.get(this, 'type'); }
	  set type(value) { stringAttribute$3.set(this, 'type', value); }
	  /* c8 ignore stop */

	}

	registerHTMLClass$3(tagName$3, HTMLLinkElement$1);

	linkElement.HTMLLinkElement = HTMLLinkElement$1;

	var slotElement = {};

	const {HTMLElement: HTMLElement$k} = element;

	/**
	 * @implements globalThis.HTMLSlotElement
	 */
	class HTMLSlotElement$1 extends HTMLElement$k {
	  constructor(ownerDocument, localName = 'slot') {
	    super(ownerDocument, localName);
	  }
	}
	slotElement.HTMLSlotElement = HTMLSlotElement$1;

	var formElement = {};

	const {HTMLElement: HTMLElement$j} = element;

	/**
	 * @implements globalThis.HTMLFormElement
	 */
	class HTMLFormElement$1 extends HTMLElement$j {
	  constructor(ownerDocument, localName = 'form') {
	    super(ownerDocument, localName);
	  }
	}
	formElement.HTMLFormElement = HTMLFormElement$1;

	var imageElement = {};

	const {registerHTMLClass: registerHTMLClass$2} = registerHtmlClass;
	const {numericAttribute, stringAttribute: stringAttribute$2} = attributes$2;

	const {HTMLElement: HTMLElement$i} = element;

	const tagName$2 = 'img';

	/**
	 * @implements globalThis.HTMLImageElement
	 */
	class HTMLImageElement$2 extends HTMLElement$i {
	  constructor(ownerDocument, localName = tagName$2) {
	    super(ownerDocument, localName);
	  }

	  /* c8 ignore start */
	  get alt() { return stringAttribute$2.get(this, 'alt'); }
	  set alt(value) { stringAttribute$2.set(this, 'alt', value); }

	  get sizes() { return stringAttribute$2.get(this, 'sizes'); }
	  set sizes(value) { stringAttribute$2.set(this, 'sizes', value); }

	  get src() { return stringAttribute$2.get(this, 'src'); }
	  set src(value) { stringAttribute$2.set(this, 'src', value); }

	  get srcset() { return stringAttribute$2.get(this, 'srcset'); }
	  set srcset(value) { stringAttribute$2.set(this, 'srcset', value); }

	  get title() { return stringAttribute$2.get(this, 'title'); }
	  set title(value) { stringAttribute$2.set(this, 'title', value); }

	  get width() { return numericAttribute.get(this, 'width'); }
	  set width(value) { numericAttribute.set(this, 'width', value); }

	  get height() { return numericAttribute.get(this, 'height'); }
	  set height(value) { numericAttribute.set(this, 'height', value); }
	  /* c8 ignore stop */
	}

	registerHTMLClass$2(tagName$2, HTMLImageElement$2);

	imageElement.HTMLImageElement = HTMLImageElement$2;

	var preElement = {};

	const {HTMLElement: HTMLElement$h} = element;

	/**
	 * @implements globalThis.HTMLPreElement
	 */
	class HTMLPreElement$1 extends HTMLElement$h {
	  constructor(ownerDocument, localName = 'pre') {
	    super(ownerDocument, localName);
	  }
	}
	preElement.HTMLPreElement = HTMLPreElement$1;

	var uListElement = {};

	const {HTMLElement: HTMLElement$g} = element;

	/**
	 * @implements globalThis.HTMLUListElement
	 */
	class HTMLUListElement$1 extends HTMLElement$g {
	  constructor(ownerDocument, localName = 'ul') {
	    super(ownerDocument, localName);
	  }
	}
	uListElement.HTMLUListElement = HTMLUListElement$1;

	var metaElement = {};

	const {HTMLElement: HTMLElement$f} = element;

	/**
	 * @implements globalThis.HTMLMetaElement
	 */
	class HTMLMetaElement$1 extends HTMLElement$f {
	  constructor(ownerDocument, localName = 'meta') {
	    super(ownerDocument, localName);
	  }
	}
	metaElement.HTMLMetaElement = HTMLMetaElement$1;

	var pictureElement = {};

	const {HTMLElement: HTMLElement$e} = element;

	/**
	 * @implements globalThis.HTMLPictureElement
	 */
	class HTMLPictureElement$1 extends HTMLElement$e {
	  constructor(ownerDocument, localName = 'picture') {
	    super(ownerDocument, localName);
	  }
	}
	pictureElement.HTMLPictureElement = HTMLPictureElement$1;

	var areaElement = {};

	const {HTMLElement: HTMLElement$d} = element;

	/**
	 * @implements globalThis.HTMLAreaElement
	 */
	class HTMLAreaElement$1 extends HTMLElement$d {
	  constructor(ownerDocument, localName = 'area') {
	    super(ownerDocument, localName);
	  }
	}
	areaElement.HTMLAreaElement = HTMLAreaElement$1;

	var oListElement = {};

	const {HTMLElement: HTMLElement$c} = element;

	/**
	 * @implements globalThis.HTMLOListElement
	 */
	class HTMLOListElement$1 extends HTMLElement$c {
	  constructor(ownerDocument, localName = 'ol') {
	    super(ownerDocument, localName);
	  }
	}
	oListElement.HTMLOListElement = HTMLOListElement$1;

	var tableCaptionElement = {};

	const {HTMLElement: HTMLElement$b} = element;

	/**
	 * @implements globalThis.HTMLTableCaptionElement
	 */
	class HTMLTableCaptionElement$1 extends HTMLElement$b {
	  constructor(ownerDocument, localName = 'caption') {
	    super(ownerDocument, localName);
	  }
	}
	tableCaptionElement.HTMLTableCaptionElement = HTMLTableCaptionElement$1;

	var anchorElement = {};

	const {registerHTMLClass: registerHTMLClass$1} = registerHtmlClass;
	const {stringAttribute: stringAttribute$1} = attributes$2;

	const {HTMLElement: HTMLElement$a} = element;

	const tagName$1 = 'a';

	/**
	 * @implements globalThis.HTMLAnchorElement
	 */
	class HTMLAnchorElement$1 extends HTMLElement$a {
	  constructor(ownerDocument, localName = tagName$1) {
	    super(ownerDocument, localName);
	  }

	  /* c8 ignore start */ // copy paste from img.src, already covered
	  get href() { return encodeURI(stringAttribute$1.get(this, 'href')); }
	  set href(value) { stringAttribute$1.set(this, 'href', decodeURI(value)); }

	  get download() { return encodeURI(stringAttribute$1.get(this, 'download')); }
	  set download(value) { stringAttribute$1.set(this, 'download', decodeURI(value)); }

	  get target() { return stringAttribute$1.get(this, 'target'); }
	  set target(value) { stringAttribute$1.set(this, 'target', value); }

	  get type() { return stringAttribute$1.get(this, 'type'); }
	  set type(value) { stringAttribute$1.set(this, 'type', value); }
	  /* c8 ignore stop */

	}

	registerHTMLClass$1(tagName$1, HTMLAnchorElement$1);

	anchorElement.HTMLAnchorElement = HTMLAnchorElement$1;

	var labelElement = {};

	const {HTMLElement: HTMLElement$9} = element;

	/**
	 * @implements globalThis.HTMLLabelElement
	 */
	class HTMLLabelElement$1 extends HTMLElement$9 {
	  constructor(ownerDocument, localName = 'label') {
	    super(ownerDocument, localName);
	  }
	}
	labelElement.HTMLLabelElement = HTMLLabelElement$1;

	var unknownElement = {};

	const {HTMLElement: HTMLElement$8} = element;

	/**
	 * @implements globalThis.HTMLUnknownElement
	 */
	class HTMLUnknownElement$1 extends HTMLElement$8 {
	  constructor(ownerDocument, localName = 'unknown') {
	    super(ownerDocument, localName);
	  }
	}
	unknownElement.HTMLUnknownElement = HTMLUnknownElement$1;

	var modElement = {};

	const {HTMLElement: HTMLElement$7} = element;

	/**
	 * @implements globalThis.HTMLModElement
	 */
	class HTMLModElement$1 extends HTMLElement$7 {
	  constructor(ownerDocument, localName = 'mod') {
	    super(ownerDocument, localName);
	  }
	}
	modElement.HTMLModElement = HTMLModElement$1;

	var detailsElement = {};

	const {HTMLElement: HTMLElement$6} = element;

	/**
	 * @implements globalThis.HTMLDetailsElement
	 */
	class HTMLDetailsElement$1 extends HTMLElement$6 {
	  constructor(ownerDocument, localName = 'details') {
	    super(ownerDocument, localName);
	  }
	}
	detailsElement.HTMLDetailsElement = HTMLDetailsElement$1;

	var sourceElement = {};

	const {registerHTMLClass} = registerHtmlClass;
	const {stringAttribute} = attributes$2;

	const {HTMLElement: HTMLElement$5} = element;

	const tagName = 'source';

	/**
	 * @implements globalThis.HTMLSourceElement
	 */
	class HTMLSourceElement$1 extends HTMLElement$5 {
	  constructor(ownerDocument, localName = tagName) {
	    super(ownerDocument, localName);
	  }

	  /* c8 ignore start */
	  get src() { return stringAttribute.get(this, 'src'); }
	  set src(value) { stringAttribute.set(this, 'src', value); }

	  get srcset() { return stringAttribute.get(this, 'srcset'); }
	  set srcset(value) { stringAttribute.set(this, 'srcset', value); }

	  get sizes() { return stringAttribute.get(this, 'sizes'); }
	  set sizes(value) { stringAttribute.set(this, 'sizes', value); }

	  get type() { return stringAttribute.get(this, 'type'); }
	  set type(value) { stringAttribute.set(this, 'type', value); }
	  /* c8 ignore stop */
	}

	registerHTMLClass(tagName, HTMLSourceElement$1);

	sourceElement.HTMLSourceElement = HTMLSourceElement$1;

	var trackElement = {};

	const {HTMLElement: HTMLElement$4} = element;

	/**
	 * @implements globalThis.HTMLTrackElement
	 */
	class HTMLTrackElement$1 extends HTMLElement$4 {
	  constructor(ownerDocument, localName = 'track') {
	    super(ownerDocument, localName);
	  }
	}
	trackElement.HTMLTrackElement = HTMLTrackElement$1;

	var marqueeElement = {};

	const {HTMLElement: HTMLElement$3} = element;

	/**
	 * @implements globalThis.HTMLMarqueeElement
	 */
	class HTMLMarqueeElement$1 extends HTMLElement$3 {
	  constructor(ownerDocument, localName = 'marquee') {
	    super(ownerDocument, localName);
	  }
	}
	marqueeElement.HTMLMarqueeElement = HTMLMarqueeElement$1;

	const {HTMLElement: HTMLElement$2} = element;
	const {HTMLTemplateElement} = templateElement;
	const {HTMLHtmlElement} = htmlElement;
	const {HTMLScriptElement} = scriptElement;
	const {HTMLFrameElement} = frameElement;
	const {HTMLIFrameElement} = iFrameElement;
	const {HTMLObjectElement} = objectElement;
	const {HTMLHeadElement} = headElement;
	const {HTMLBodyElement} = bodyElement;
	const {HTMLStyleElement} = styleElement;
	const {HTMLTimeElement} = timeElement;
	const {HTMLFieldSetElement} = fieldSetElement;
	const {HTMLEmbedElement} = embedElement;
	const {HTMLHRElement} = hrElement;
	const {HTMLProgressElement} = progressElement;
	const {HTMLParagraphElement} = paragraphElement;
	const {HTMLTableElement} = tableElement;
	const {HTMLFrameSetElement} = frameSetElement;
	const {HTMLLIElement} = liElement;
	const {HTMLBaseElement} = baseElement;
	const {HTMLDataListElement} = dataListElement;
	const {HTMLInputElement} = inputElement;
	const {HTMLParamElement} = paramElement;
	const {HTMLMediaElement} = mediaElement;
	const {HTMLAudioElement} = audioElement;
	const {HTMLHeadingElement} = headingElement;
	const {HTMLDirectoryElement} = directoryElement;
	const {HTMLQuoteElement} = quoteElement;
	const {HTMLCanvasElement} = canvasElement;
	const {HTMLLegendElement} = legendElement;
	const {HTMLOptionElement} = optionElement;
	const {HTMLSpanElement} = spanElement;
	const {HTMLMeterElement} = meterElement;
	const {HTMLVideoElement} = videoElement;
	const {HTMLTableCellElement} = tableCellElement;
	const {HTMLTitleElement} = titleElement;
	const {HTMLOutputElement} = outputElement;
	const {HTMLTableRowElement} = tableRowElement;
	const {HTMLDataElement} = dataElement;
	const {HTMLMenuElement} = menuElement;
	const {HTMLSelectElement} = selectElement;
	const {HTMLBRElement} = brElement;
	const {HTMLButtonElement} = buttonElement;
	const {HTMLMapElement} = mapElement;
	const {HTMLOptGroupElement} = optGroupElement;
	const {HTMLDListElement} = dListElement;
	const {HTMLTextAreaElement} = textAreaElement;
	const {HTMLFontElement} = fontElement;
	const {HTMLDivElement} = divElement;
	const {HTMLLinkElement} = linkElement;
	const {HTMLSlotElement} = slotElement;
	const {HTMLFormElement} = formElement;
	const {HTMLImageElement: HTMLImageElement$1} = imageElement;
	const {HTMLPreElement} = preElement;
	const {HTMLUListElement} = uListElement;
	const {HTMLMetaElement} = metaElement;
	const {HTMLPictureElement} = pictureElement;
	const {HTMLAreaElement} = areaElement;
	const {HTMLOListElement} = oListElement;
	const {HTMLTableCaptionElement} = tableCaptionElement;
	const {HTMLAnchorElement} = anchorElement;
	const {HTMLLabelElement} = labelElement;
	const {HTMLUnknownElement} = unknownElement;
	const {HTMLModElement} = modElement;
	const {HTMLDetailsElement} = detailsElement;
	const {HTMLSourceElement} = sourceElement;
	const {HTMLTrackElement} = trackElement;
	const {HTMLMarqueeElement} = marqueeElement;

	htmlClasses$2.HTMLElement = HTMLElement$2;
	htmlClasses$2.HTMLTemplateElement = HTMLTemplateElement;
	htmlClasses$2.HTMLHtmlElement = HTMLHtmlElement;
	htmlClasses$2.HTMLScriptElement = HTMLScriptElement;
	htmlClasses$2.HTMLFrameElement = HTMLFrameElement;
	htmlClasses$2.HTMLIFrameElement = HTMLIFrameElement;
	htmlClasses$2.HTMLObjectElement = HTMLObjectElement;
	htmlClasses$2.HTMLHeadElement = HTMLHeadElement;
	htmlClasses$2.HTMLBodyElement = HTMLBodyElement;
	htmlClasses$2.HTMLStyleElement = HTMLStyleElement;
	htmlClasses$2.HTMLTimeElement = HTMLTimeElement;
	htmlClasses$2.HTMLFieldSetElement = HTMLFieldSetElement;
	htmlClasses$2.HTMLEmbedElement = HTMLEmbedElement;
	htmlClasses$2.HTMLHRElement = HTMLHRElement;
	htmlClasses$2.HTMLProgressElement = HTMLProgressElement;
	htmlClasses$2.HTMLParagraphElement = HTMLParagraphElement;
	htmlClasses$2.HTMLTableElement = HTMLTableElement;
	htmlClasses$2.HTMLFrameSetElement = HTMLFrameSetElement;
	htmlClasses$2.HTMLLIElement = HTMLLIElement;
	htmlClasses$2.HTMLBaseElement = HTMLBaseElement;
	htmlClasses$2.HTMLDataListElement = HTMLDataListElement;
	htmlClasses$2.HTMLInputElement = HTMLInputElement;
	htmlClasses$2.HTMLParamElement = HTMLParamElement;
	htmlClasses$2.HTMLMediaElement = HTMLMediaElement;
	htmlClasses$2.HTMLAudioElement = HTMLAudioElement;
	htmlClasses$2.HTMLHeadingElement = HTMLHeadingElement;
	htmlClasses$2.HTMLDirectoryElement = HTMLDirectoryElement;
	htmlClasses$2.HTMLQuoteElement = HTMLQuoteElement;
	htmlClasses$2.HTMLCanvasElement = HTMLCanvasElement;
	htmlClasses$2.HTMLLegendElement = HTMLLegendElement;
	htmlClasses$2.HTMLOptionElement = HTMLOptionElement;
	htmlClasses$2.HTMLSpanElement = HTMLSpanElement;
	htmlClasses$2.HTMLMeterElement = HTMLMeterElement;
	htmlClasses$2.HTMLVideoElement = HTMLVideoElement;
	htmlClasses$2.HTMLTableCellElement = HTMLTableCellElement;
	htmlClasses$2.HTMLTitleElement = HTMLTitleElement;
	htmlClasses$2.HTMLOutputElement = HTMLOutputElement;
	htmlClasses$2.HTMLTableRowElement = HTMLTableRowElement;
	htmlClasses$2.HTMLDataElement = HTMLDataElement;
	htmlClasses$2.HTMLMenuElement = HTMLMenuElement;
	htmlClasses$2.HTMLSelectElement = HTMLSelectElement;
	htmlClasses$2.HTMLBRElement = HTMLBRElement;
	htmlClasses$2.HTMLButtonElement = HTMLButtonElement;
	htmlClasses$2.HTMLMapElement = HTMLMapElement;
	htmlClasses$2.HTMLOptGroupElement = HTMLOptGroupElement;
	htmlClasses$2.HTMLDListElement = HTMLDListElement;
	htmlClasses$2.HTMLTextAreaElement = HTMLTextAreaElement;
	htmlClasses$2.HTMLFontElement = HTMLFontElement;
	htmlClasses$2.HTMLDivElement = HTMLDivElement;
	htmlClasses$2.HTMLLinkElement = HTMLLinkElement;
	htmlClasses$2.HTMLSlotElement = HTMLSlotElement;
	htmlClasses$2.HTMLFormElement = HTMLFormElement;
	htmlClasses$2.HTMLImageElement = HTMLImageElement$1;
	htmlClasses$2.HTMLPreElement = HTMLPreElement;
	htmlClasses$2.HTMLUListElement = HTMLUListElement;
	htmlClasses$2.HTMLMetaElement = HTMLMetaElement;
	htmlClasses$2.HTMLPictureElement = HTMLPictureElement;
	htmlClasses$2.HTMLAreaElement = HTMLAreaElement;
	htmlClasses$2.HTMLOListElement = HTMLOListElement;
	htmlClasses$2.HTMLTableCaptionElement = HTMLTableCaptionElement;
	htmlClasses$2.HTMLAnchorElement = HTMLAnchorElement;
	htmlClasses$2.HTMLLabelElement = HTMLLabelElement;
	htmlClasses$2.HTMLUnknownElement = HTMLUnknownElement;
	htmlClasses$2.HTMLModElement = HTMLModElement;
	htmlClasses$2.HTMLDetailsElement = HTMLDetailsElement;
	htmlClasses$2.HTMLSourceElement = HTMLSourceElement;
	htmlClasses$2.HTMLTrackElement = HTMLTrackElement;
	htmlClasses$2.HTMLMarqueeElement = HTMLMarqueeElement;

	const HTMLClasses$1 = {
	  HTMLElement: HTMLElement$2,
	  HTMLTemplateElement,
	  HTMLHtmlElement,
	  HTMLScriptElement,
	  HTMLFrameElement,
	  HTMLIFrameElement,
	  HTMLObjectElement,
	  HTMLHeadElement,
	  HTMLBodyElement,
	  HTMLStyleElement,
	  HTMLTimeElement,
	  HTMLFieldSetElement,
	  HTMLEmbedElement,
	  HTMLHRElement,
	  HTMLProgressElement,
	  HTMLParagraphElement,
	  HTMLTableElement,
	  HTMLFrameSetElement,
	  HTMLLIElement,
	  HTMLBaseElement,
	  HTMLDataListElement,
	  HTMLInputElement,
	  HTMLParamElement,
	  HTMLMediaElement,
	  HTMLAudioElement,
	  HTMLHeadingElement,
	  HTMLDirectoryElement,
	  HTMLQuoteElement,
	  HTMLCanvasElement,
	  HTMLLegendElement,
	  HTMLOptionElement,
	  HTMLSpanElement,
	  HTMLMeterElement,
	  HTMLVideoElement,
	  HTMLTableCellElement,
	  HTMLTitleElement,
	  HTMLOutputElement,
	  HTMLTableRowElement,
	  HTMLDataElement,
	  HTMLMenuElement,
	  HTMLSelectElement,
	  HTMLBRElement,
	  HTMLButtonElement,
	  HTMLMapElement,
	  HTMLOptGroupElement,
	  HTMLDListElement,
	  HTMLTextAreaElement,
	  HTMLFontElement,
	  HTMLDivElement,
	  HTMLLinkElement,
	  HTMLSlotElement,
	  HTMLFormElement,
	  HTMLImageElement: HTMLImageElement$1,
	  HTMLPreElement,
	  HTMLUListElement,
	  HTMLMetaElement,
	  HTMLPictureElement,
	  HTMLAreaElement,
	  HTMLOListElement,
	  HTMLTableCaptionElement,
	  HTMLAnchorElement,
	  HTMLLabelElement,
	  HTMLUnknownElement,
	  HTMLModElement,
	  HTMLDetailsElement,
	  HTMLSourceElement,
	  HTMLTrackElement,
	  HTMLMarqueeElement
	};
	htmlClasses$2.HTMLClasses = HTMLClasses$1;

	var mime = {};

	// TODO: ensure all these are text only
	// /^(?:plaintext|script|style|textarea|title|xmp)$/i

	const voidElements = {test: () => true};
	const Mime$1 = {
	  'text/html': {
	    docType: '<!DOCTYPE html>',
	    ignoreCase: true,
	    voidElements: /^(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)$/i
	  },
	  'image/svg+xml': {
	    docType: '<?xml version="1.0" encoding="utf-8"?>',
	    ignoreCase: false,
	    voidElements
	  },
	  'text/xml': {
	    docType: '<?xml version="1.0" encoding="utf-8"?>',
	    ignoreCase: false,
	    voidElements
	  },
	  'application/xml': {
	    docType: '<?xml version="1.0" encoding="utf-8"?>',
	    ignoreCase: false,
	    voidElements
	  },
	  'application/xhtml+xml': {
	    docType: '<?xml version="1.0" encoding="utf-8"?>',
	    ignoreCase: false,
	    voidElements
	  }
	};
	mime.Mime = Mime$1;

	var customEvent = {};

	// https://dom.spec.whatwg.org/#interface-customevent

	/* c8 ignore start */

	// One day Node might have CustomEvent too

	const {Event: Event$3} = event;

	/**
	 * @implements globalThis.CustomEvent
	 */
	const GlobalCustomEvent = typeof CustomEvent === 'function' ?
	  CustomEvent :
	  class CustomEvent extends Event$3 {
	    constructor(type, eventInitDict = {}) {
	      super(type, eventInitDict);
	      this.detail = eventInitDict.detail;
	    }
	  };

	customEvent.CustomEvent = GlobalCustomEvent;

	var inputEvent = {};

	// https://dom.spec.whatwg.org/#interface-customevent

	/* c8 ignore start */

	// One day Node might have CustomEvent too

	const {Event: Event$2} = event;

	/**
	 * @implements globalThis.InputEvent
	 */
	class InputEvent$1 extends Event$2 {
	  constructor(type, inputEventInit = {}) {
	    super(type, inputEventInit);
	    this.inputType = inputEventInit.inputType;
	    this.data = inputEventInit.data;
	    this.dataTransfer = inputEventInit.dataTransfer;
	    this.isComposing = inputEventInit.isComposing || false;
	    this.ranges = inputEventInit.ranges;
	  }
	}
	inputEvent.InputEvent = InputEvent$1;

	var image = {};

	const {HTMLImageElement} = imageElement;

	const ImageClass$1 = ownerDocument =>
	/**
	 * @implements globalThis.Image
	 */
	class Image extends HTMLImageElement {
	  constructor(width, height) {
	    super(ownerDocument);
	    switch (arguments.length) {
	      case 1:
	        this.height = width;
	        this.width = width;
	        break;
	      case 2:
	        this.height = height;
	        this.width = width;
	        break;
	    }
	  }
	};
	image.ImageClass = ImageClass$1;

	var range = {};

	// https://dom.spec.whatwg.org/#concept-live-range

	const {END: END$4, NEXT: NEXT$3, PREV: PREV$1, START} = symbols;

	const {getEnd, setAdjacent} = utils;

	const deleteContents = ({[START]: start, [END$4]: end}, fragment = null) => {
	  setAdjacent(start[PREV$1], end[NEXT$3]);
	  do {
	    const after = getEnd(start);
	    const next = after === end ? after : after[NEXT$3];
	    if (fragment)
	      fragment.insertBefore(start, fragment[END$4]);
	    else
	      start.remove();
	    start = next;
	  } while (start !== end);
	};

	/**
	 * @implements globalThis.Range
	 */
	class Range$1 {
	  constructor() {
	    this[START] = null;
	    this[END$4] = null;
	    this.commonAncestorContainer = null;
	  }

	  /* TODO: this is more complicated than it looks
	  setStart(node, offset) {
	    this[START] = node.childNodes[offset];
	  }

	  setEnd(node, offset) {
	    this[END] = getEnd(node.childNodes[offset]);
	  }
	  //*/

	  insertNode(newNode) {
	    this[END$4].parentNode.insertBefore(newNode, this[START]);
	  }

	  selectNode(node) {
	    this[START] = node;
	    this[END$4] = getEnd(node);
	  }

	  surroundContents(parentNode) {
	    parentNode.replaceChildren(this.extractContents());
	  }

	  setStartBefore(node) {
	    this[START] = node;
	  }

	  setStartAfter(node) {
	    this[START] = node.nextSibling;
	  }

	  setEndBefore(node) {
	    this[END$4] = getEnd(node.previousSibling);
	  }

	  setEndAfter(node) {
	    this[END$4] = getEnd(node);
	  }

	  cloneContents() {
	    let {[START]: start, [END$4]: end} = this;
	    const fragment = start.ownerDocument.createDocumentFragment();
	    while (start !== end) {
	      fragment.insertBefore(start.cloneNode(true), fragment[END$4]);
	      start = getEnd(start);
	      if (start !== end)
	        start = start[NEXT$3];
	    }
	    return fragment;
	  }

	  deleteContents() {
	    deleteContents(this);
	  }

	  extractContents() {
	    const fragment = this[START].ownerDocument.createDocumentFragment();
	    deleteContents(this, fragment);
	    return fragment;
	  }

	  createContextualFragment(html) {
	    const template = this.commonAncestorContainer.createElement('template');
	    template.innerHTML = html;
	    this.selectNode(template.content);
	    return template.content;
	  }

	  cloneRange() {
	    const range = new Range$1;
	    range[START] = this[START];
	    range[END$4] = this[END$4];
	    return range;
	  }
	}
	range.Range = Range$1;

	var treeWalker = {};

	const {
	  DOCUMENT_NODE: DOCUMENT_NODE$2,
	  ELEMENT_NODE: ELEMENT_NODE$3,
	  TEXT_NODE: TEXT_NODE$1,
	  COMMENT_NODE: COMMENT_NODE$1,
	  SHOW_ALL,
	  SHOW_ELEMENT,
	  SHOW_COMMENT,
	  SHOW_TEXT
	} = constants;

	const {PRIVATE, END: END$3, NEXT: NEXT$2} = symbols;

	const isOK = ({nodeType}, mask) => {
	  switch (nodeType) {
	    case ELEMENT_NODE$3:
	      return mask & SHOW_ELEMENT;
	    case TEXT_NODE$1:
	      return mask & SHOW_TEXT;
	    case COMMENT_NODE$1:
	      return mask & SHOW_COMMENT;
	  }
	  return 0;
	};

	/**
	 * @implements globalThis.TreeWalker
	 */
	class TreeWalker$1 {
	  constructor(root, whatToShow = SHOW_ALL) {
	    this.root = root;
	    this.currentNode = root;
	    this.whatToShow = whatToShow;
	    let {[NEXT$2]: next, [END$3]: end} = root;
	    if (root.nodeType === DOCUMENT_NODE$2) {
	      const {documentElement} = root;
	      next = documentElement;
	      end = documentElement[END$3];
	    }
	    const nodes = [];
	    while (next !== end) {
	      if (isOK(next, whatToShow))
	        nodes.push(next);
	      next = next[NEXT$2];
	    }
	    this[PRIVATE] = {i: 0, nodes};
	  }

	  nextNode() {
	    const $ = this[PRIVATE];
	    this.currentNode = $.i < $.nodes.length ? $.nodes[$.i++] : null;
	    return this.currentNode;
	  }
	}
	treeWalker.TreeWalker = TreeWalker$1;

	const {performance} = require$$0__default$5['default'];

	const {DOCUMENT_NODE: DOCUMENT_NODE$1, DOCUMENT_FRAGMENT_NODE: DOCUMENT_FRAGMENT_NODE$1, DOCUMENT_TYPE_NODE: DOCUMENT_TYPE_NODE$1, ELEMENT_NODE: ELEMENT_NODE$2, SVG_NAMESPACE} = constants;

	const {
	  CUSTOM_ELEMENTS: CUSTOM_ELEMENTS$1, DOM_PARSER: DOM_PARSER$1, IMAGE, MUTATION_OBSERVER, DOCTYPE, END: END$2, NEXT: NEXT$1, MIME: MIME$2, EVENT_TARGET
	} = symbols;

	const {Facades, illegalConstructor} = facades;
	const {HTMLClasses} = htmlClasses$2;
	const {Mime} = mime;
	const {knownSiblings: knownSiblings$1} = utils;
	const {assign, create: create$8, defineProperties: defineProperties$1, setPrototypeOf} = object;

	const {NonElementParentNode} = nonElementParentNode;

	const {SVGElement: SVGElement$1} = element$1;

	const {Attr: Attr$1} = attr;
	const {Comment: Comment$1} = comment;
	const {CustomElementRegistry} = customElementRegistry;
	const {CustomEvent: CustomEvent$1} = customEvent;
	const {DocumentFragment} = documentFragment;
	const {DocumentType: DocumentType$1} = documentType;
	const {Element: Element$1} = element$2;
	const {Event: Event$1} = event;
	const {EventTarget: EventTarget$1} = eventTarget;
	const {InputEvent} = inputEvent;
	const {ImageClass} = image;
	const {MutationObserverClass} = mutationObserver;
	const {NamedNodeMap} = namedNodeMap;
	const {NodeList: NodeList$1} = nodeList;
	const {Range} = range;
	const {Text: Text$1} = text;
	const {TreeWalker} = treeWalker;

	const query = (method, ownerDocument, selectors) => {
	  let {[NEXT$1]: next, [END$2]: end} = ownerDocument;
	  return method.call({ownerDocument, [NEXT$1]: next, [END$2]: end}, selectors);
	};

	const globalExports = assign(
	  {},
	  Facades,
	  HTMLClasses,
	  {
	    CustomEvent: CustomEvent$1,
	    Event: Event$1,
	    EventTarget: EventTarget$1,
	    InputEvent,
	    NamedNodeMap,
	    NodeList: NodeList$1
	  }
	);

	const window$1 = new WeakMap;

	/**
	 * @implements globalThis.Document
	 */
	class Document$3 extends NonElementParentNode {
	  constructor(type) {
	    super(null, '#document', DOCUMENT_NODE$1);
	    this[CUSTOM_ELEMENTS$1] = {active: false, registry: null};
	    this[MUTATION_OBSERVER] = {active: false, class: null};
	    this[MIME$2] = Mime[type];
	    /** @type {DocumentType} */
	    this[DOCTYPE] = null;
	    this[DOM_PARSER$1] = null;
	    this[IMAGE] = null;
	  }

	  /**
	   * @type {globalThis.Document['defaultView']}
	   */
	  get defaultView() {
	    if (!window$1.has(this))
	      window$1.set(this, new Proxy(globalThis, {
	        set: (target, name, value) => {
	          switch (name) {
	            case 'addEventListener':
	            case 'removeEventListener':
	            case 'dispatchEvent':
	              this[EVENT_TARGET][name] = value;
	              break;
	            default:
	              target[name] = value;
	              break;
	          }
	          return true;
	        },
	        get: (globalThis, name) => {
	          switch (name) {
	            case 'addEventListener':
	            case 'removeEventListener':
	            case 'dispatchEvent':
	              if (!this[EVENT_TARGET]) {
	                const et = this[EVENT_TARGET] = new EventTarget$1;
	                et.dispatchEvent = et.dispatchEvent.bind(et);
	                et.addEventListener = et.addEventListener.bind(et);
	                et.removeEventListener = et.removeEventListener.bind(et);
	              }
	              return this[EVENT_TARGET][name];
	            case 'document':
	              return this;
	            /* c8 ignore start */
	            case 'navigator':
	              return {
	                userAgent: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36'
	              };
	            /* c8 ignore stop */
	            case 'window':
	              return window$1.get(this);
	            case 'customElements':
	              if (!this[CUSTOM_ELEMENTS$1].registry)
	                this[CUSTOM_ELEMENTS$1] = new CustomElementRegistry(this);
	              return this[CUSTOM_ELEMENTS$1];
	            case 'performance':
	              return performance;
	            case 'DOMParser':
	              return this[DOM_PARSER$1];
	            case 'Image':
	              if (!this[IMAGE])
	                this[IMAGE] = ImageClass(this);
	              return this[IMAGE];
	            case 'MutationObserver':
	              if (!this[MUTATION_OBSERVER].class)
	                this[MUTATION_OBSERVER] = new MutationObserverClass(this);
	              return this[MUTATION_OBSERVER].class;
	          }
	          return globalExports[name] || globalThis[name];
	        }
	      }));
	    return window$1.get(this);
	  }

	  get doctype() {
	    const docType = this[DOCTYPE];
	    if (docType)
	      return docType;
	    const {firstChild} = this;
	    if (firstChild && firstChild.nodeType === DOCUMENT_TYPE_NODE$1)
	      return (this[DOCTYPE] = firstChild);
	    return null;
	  }

	  set doctype(value) {
	    if (/^([a-z:]+)(\s+system|\s+public(\s+"([^"]+)")?)?(\s+"([^"]+)")?/i.test(value)) {
	      const {$1: name, $4: publicId, $6: systemId} = RegExp;
	      this[DOCTYPE] = new DocumentType$1(this, name, publicId, systemId);
	      knownSiblings$1(this, this[DOCTYPE], this[NEXT$1]);
	    }
	  }

	  get documentElement() {
	    return this.firstElementChild;
	  }

	  get isConnected() { return true; }

	  createAttribute(name) { return new Attr$1(this, name); }
	  createComment(textContent) { return new Comment$1(this, textContent); }
	  createDocumentFragment() { return new DocumentFragment(this); }
	  createDocumentType(name, publicId, systemId) { return new DocumentType$1(this, name, publicId, systemId); }
	  createElement(localName) { return new Element$1(this, localName); }
	  createRange() {
	    const range = new Range;
	    range.commonAncestorContainer = this;
	    return range;
	  }
	  createTextNode(textContent) { return new Text$1(this, textContent); }
	  createTreeWalker(root, whatToShow = -1) { return new TreeWalker(root, whatToShow); }
	  createNodeIterator(root, whatToShow = -1) { return this.createTreeWalker(root, whatToShow); }

	  createEvent(name) {
	    const event = create$8(name === 'Event' ? new Event$1('') : new CustomEvent$1(''));
	    event.initEvent = event.initCustomEvent = (
	      type,
	      canBubble = false,
	      cancelable = false,
	      detail
	    ) => {
	      defineProperties$1(event, {
	        type: {value: type},
	        canBubble: {value: canBubble},
	        cancelable: {value: cancelable},
	        detail: {value: detail}
	      });
	    };
	    return event;
	  }

	  cloneNode(deep = false) {
	    const {
	      constructor,
	      [CUSTOM_ELEMENTS$1]: customElements,
	      [DOCTYPE]: doctype
	    } = this;
	    const document = new constructor();
	    document[CUSTOM_ELEMENTS$1] = customElements;
	    if (deep) {
	      const end = document[END$2];
	      const {childNodes} = this;
	      for (let {length} = childNodes, i = 0; i < length; i++)
	        document.insertBefore(childNodes[i].cloneNode(true), end);
	      if (doctype)
	        document[DOCTYPE] = childNodes[0];
	    }
	    return document;
	  }

	  importNode(externalNode) {
	    // important: keep the signature length as *one*
	    // or it would behave like old IE or Edge with polyfills
	    const deep = 1 < arguments.length && !!arguments[1];
	    const node = externalNode.cloneNode(deep);
	    const {[CUSTOM_ELEMENTS$1]: customElements} = this;
	    const {active} = customElements;
	    const upgrade = element => {
	      const {ownerDocument, nodeType} = element;
	      element.ownerDocument = this;
	      if (active && ownerDocument !== this && nodeType === ELEMENT_NODE$2)
	        customElements.upgrade(element);
	    };
	    upgrade(node);
	    if (deep) {
	      switch (node.nodeType) {
	        case ELEMENT_NODE$2:
	        case DOCUMENT_FRAGMENT_NODE$1: {
	          let {[NEXT$1]: next, [END$2]: end} = node;
	          while (next !== end) {
	            if (next.nodeType === ELEMENT_NODE$2)
	              upgrade(next);
	            next = next[NEXT$1];
	          }
	          break;
	        }
	      }
	    }
	    return node;
	  }

	  toString() { return this.childNodes.join(''); }

	  querySelector(selectors) {
	    return query(super.querySelector, this, selectors);
	  }

	  querySelectorAll(selectors) {
	    return query(super.querySelectorAll, this, selectors);
	  }

	  /* c8 ignore start */
	  getElementsByTagNameNS(_, name) {
	    return this.getElementsByTagName(name);
	  }
	  createAttributeNS(_, name) {
	    return this.createAttribute(name);
	  }
	  createElementNS(nsp, localName, options) {
	    return nsp === SVG_NAMESPACE ?
	            new SVGElement$1(this, localName, null) :
	            this.createElement(localName, options);
	  }
	  /* c8 ignore stop */
	}
	document$3.Document = Document$3;

	setPrototypeOf(
	  globalExports.Document = function Document() {
	    illegalConstructor();
	  },
	  Document$3
	).prototype = Document$3.prototype;

	const {ELEMENT_NODE: ELEMENT_NODE$1} = constants;
	const {CUSTOM_ELEMENTS, END: END$1, NEXT} = symbols;
	const {htmlClasses: htmlClasses$1} = registerHtmlClass;

	const {Document: Document$2} = document$3;
	const {NodeList} = nodeList;
	const {customElements} = customElementRegistry;

	const {HTMLElement: HTMLElement$1} = element;

	const createHTMLElement$1 = (ownerDocument, builtin, localName, options) => {
	  if (!builtin && htmlClasses$1.has(localName)) {
	    const Class = htmlClasses$1.get(localName);
	    return new Class(ownerDocument, localName);
	  }
	  const {[CUSTOM_ELEMENTS]: {active, registry}} = ownerDocument;
	  if (active) {
	    const ce = builtin ? options.is : localName;
	    if (registry.has(ce)) {
	      const {Class} = registry.get(ce);
	      const element = new Class(ownerDocument, localName);
	      customElements.set(element, {connected: false});
	      return element;
	    }
	  }
	  return new HTMLElement$1(ownerDocument, localName);
	};

	/**
	 * @implements globalThis.HTMLDocument
	 */
	class HTMLDocument$2 extends Document$2 {
	  constructor() { super('text/html'); }

	  get all() {
	    const nodeList = new NodeList;
	    let {[NEXT]: next, [END$1]: end} = this;
	    while (next !== end) {
	      switch (next.nodeType) {
	        case ELEMENT_NODE$1:
	          nodeList.push(next);
	          break;
	      }
	      next = next[NEXT];
	    }
	    return nodeList;
	  }

	  /**
	   * @type HTMLHeadElement
	   */
	  get head() {
	    const {documentElement} = this;
	    let {firstElementChild} = documentElement;
	    if (!firstElementChild) {
	      firstElementChild = this.createElement('head');
	      documentElement.prepend(firstElementChild);
	    }
	    return firstElementChild;
	  }

	  /**
	   * @type HTMLBodyElement
	   */
	  get body() {
	    const {head} = this;
	    let {nextElementSibling} = head;
	    if (!nextElementSibling) {
	      nextElementSibling = this.createElement('body');
	      head.after(nextElementSibling);
	    }
	    return nextElementSibling;
	  }

	  /**
	   * @type HTMLTitleElement
	   */
	  get title() {
	    const {head} = this;
	    let title = head.getElementsByTagName('title').shift();
	    return title ? title.textContent : '';
	  }

	  set title(textContent) {
	    const {head} = this;
	    let title = head.getElementsByTagName('title').shift();
	    if (title)
	      title.textContent = textContent;
	    else {
	      head.insertBefore(
	        this.createElement('title'),
	        head.firstChild
	      ).textContent = textContent;
	    }
	  }

	  createElement(localName, options) {
	    const builtin = !!(options && options.is);
	    const element = createHTMLElement$1(this, builtin, localName, options);
	    if (builtin)
	      element.setAttribute('is', options.is);
	    return element;
	  }
	}
	document$4.HTMLDocument = HTMLDocument$2;

	var document$2 = {};

	const {MIME: MIME$1} = symbols;
	const {Document: Document$1} = document$3;

	/**
	 * @implements globalThis.Document
	 */
	class SVGDocument$1 extends Document$1 {
	  constructor() { super('image/svg+xml'); }
	  toString() {
	    return this[MIME$1].docType + super.toString();
	  }
	}
	document$2.SVGDocument = SVGDocument$1;

	var document$1 = {};

	const {MIME} = symbols;
	const {Document} = document$3;

	/**
	 * @implements globalThis.XMLDocument
	 */
	class XMLDocument$1 extends Document {
	  constructor() { super('text/xml'); }
	  toString() {
	    return this[MIME].docType + super.toString();
	  }
	}
	document$1.XMLDocument = XMLDocument$1;

	const {DOM_PARSER} = symbols;
	const {parseFromString} = parseFromString$3;

	const {HTMLDocument: HTMLDocument$1} = document$4;
	const {SVGDocument} = document$2;
	const {XMLDocument} = document$1;

	/**
	 * @implements globalThis.DOMParser
	 */
	class DOMParser {

	  /** @typedef {{ "text/html": HTMLDocument, "image/svg+xml": SVGDocument, "text/xml": XMLDocument }} MimeToDoc */
	  /**
	   * @template {keyof MimeToDoc} MIME
	   * @param {string} markupLanguage
	   * @param {MIME} mimeType
	   * @returns {MimeToDoc[MIME]}
	   */
	  parseFromString(markupLanguage, mimeType) {
	    let isHTML = false, document;
	    if (mimeType === 'text/html') {
	      isHTML = true;
	      document = new HTMLDocument$1;
	    }
	    else if (mimeType === 'image/svg+xml')
	      document = new SVGDocument;
	    else
	      document = new XMLDocument;
	    document[DOM_PARSER] = DOMParser;
	    return markupLanguage ?
	            parseFromString(document, isHTML, markupLanguage) :
	            document;
	  }
	}
	parser.DOMParser = DOMParser;

	var parseJson = {};

	const {
	  NODE_END,
	  ELEMENT_NODE,
	  ATTRIBUTE_NODE,
	  TEXT_NODE,
	  COMMENT_NODE,
	  DOCUMENT_NODE,
	  DOCUMENT_TYPE_NODE,
	  DOCUMENT_FRAGMENT_NODE
	} = constants;

	const {END, PREV} = symbols;

	const {htmlClasses} = registerHtmlClass;
	const {knownBoundaries, knownSiblings} = utils;

	const {Attr} = attr;
	const {Comment} = comment;
	const {DocumentType} = documentType;
	const {Text} = text;

	const {HTMLDocument} = document$4;
	const {HTMLElement} = element;
	const {SVGElement} = element$1;

	const {parse} = JSON;

	const append = (parentNode, node, end) => {
	  node.parentNode = parentNode;
	  knownSiblings(end[PREV], node, end);
	};

	const createHTMLElement = (ownerDocument, localName) => {
	  if (htmlClasses.has(localName)) {
	    const Class = htmlClasses.get(localName);
	    return new Class(ownerDocument, localName);
	  }
	  return new HTMLElement(ownerDocument, localName);
	};

	/**
	 * @typedef {number|string} jsdonValue - either a node type or its content
	 */

	/**
	 * Given a stringified, or arrayfied DOM element, returns an HTMLDocument
	 * that represent the content of such string, or array.
	 * @param {string|jsdonValue[]} value
	 * @returns {HTMLDocument}
	 */
	const parseJSON = value => {
	  const array = typeof value === 'string' ? parse(value) : value;
	  const {length} = array;
	  const document = new HTMLDocument;
	  let parentNode = document, end = parentNode[END], svg = false, i = 0;
	  while (i < length) {
	    let nodeType = array[i++];
	    switch (nodeType) {
	      case ELEMENT_NODE: {
	        const localName = array[i++];
	        const isSVG = svg || localName === 'svg' || localName === 'SVG';
	        const element = isSVG ?
	                          new SVGElement(document, localName, parentNode.ownerSVGElement || null) :
	                          createHTMLElement(document, localName);
	        knownBoundaries(end[PREV], element, end);
	        element.parentNode = parentNode;
	        parentNode = element;
	        end = parentNode[END];
	        svg = isSVG;
	        break;
	      }
	      case ATTRIBUTE_NODE: {
	        const name = array[i++];
	        const value = typeof array[i] === 'string' ? array[i++] : '';
	        const attr = new Attr(document, name, value);
	        attr.ownerElement = parentNode;
	        knownSiblings(end[PREV], attr, end);
	        break;
	      }
	      case TEXT_NODE:
	        append(parentNode, new Text(document, array[i++]), end);
	        break;
	      case COMMENT_NODE:
	        append(parentNode, new Comment(document, array[i++]), end);
	        break;
	      case DOCUMENT_TYPE_NODE: {
	        const args = [document];
	        while (typeof array[i] === 'string')
	          args.push(array[i++]);
	        if (args.length === 3 && /\.dtd$/i.test(args[2]))
	          args.splice(2, 0, '');
	        append(parentNode, new DocumentType(...args), end);
	        break;
	      }
	      case DOCUMENT_FRAGMENT_NODE:
	        parentNode = document.createDocumentFragment();
	        end = parentNode[END];
	      /* eslint no-fallthrough:0 */
	      case DOCUMENT_NODE:
	        break;
	      default:
	        do {
	          nodeType -= NODE_END;
	          if (svg && !parentNode.ownerSVGElement)
	            svg = false;
	          parentNode = parentNode.parentNode || parentNode;
	        } while (nodeType < 0);
	        end = parentNode[END];
	        break;
	    }
	  }
	  switch (i && array[0]) {
	    case ELEMENT_NODE:
	      return document.firstElementChild;
	    case DOCUMENT_FRAGMENT_NODE:
	      return parentNode;
	  }
	  return document;
	};
	parseJson.parseJSON = parseJSON;

	/**
	 * 
	 * @param {Document|Element} node the Document or Element to serialize
	 * @returns {jsdonValue[]} the linear jsdon serialized array
	 */
	const toJSON = node => node.toJSON();
	parseJson.toJSON = toJSON;

	(function (exports) {
	const {DOMParser} = parser;
	const {Document: _Document} = document$3;

	const {illegalConstructor} = facades;
	const {setPrototypeOf} = object;
	(m => {
	  exports.parseJSON = m.parseJSON;
	  exports.toJSON = m.toJSON;
	})(parseJson);

	(m => Object.keys(m).map(k => k !== 'default' && (exports[k] = m[k])))
	(facades);
	(m => Object.keys(m).map(k => k !== 'default' && (exports[k] = m[k])))
	(htmlClasses$2);

	exports.DOMParser = DOMParser;

	(m => {
	  exports.CustomEvent = m.CustomEvent;
	})(customEvent);
	(m => {
	  exports.Event = m.Event;
	})(event);
	(m => {
	  exports.EventTarget = m.EventTarget;
	})(eventTarget);
	(m => {
	  exports.InputEvent = m.InputEvent;
	})(inputEvent);
	(m => {
	  exports.NodeList = m.NodeList;
	})(nodeList);

	const parseHTML = html => (new DOMParser).parseFromString(
	  html, 'text/html'
	).defaultView;
	exports.parseHTML = parseHTML;

	function Document() {
	  illegalConstructor();
	}
	exports.Document = Document;

	setPrototypeOf(Document, _Document).prototype = _Document.prototype;
	}(cjs$2));

	/* Riot v6.0.4, @license MIT */
	/**
	 * Convert a string from camel case to dash-case
	 * @param   {string} string - probably a component tag name
	 * @returns {string} component name normalized
	 */
	function camelToDashCase(string) {
	  return string.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
	}
	/**
	 * Convert a string containing dashes to camel case
	 * @param   {string} string - input string
	 * @returns {string} my-string -> myString
	 */

	function dashToCamelCase(string) {
	  return string.replace(/-(\w)/g, (_, c) => c.toUpperCase());
	}

	/**
	 * Get all the element attributes as object
	 * @param   {HTMLElement} element - DOM node we want to parse
	 * @returns {Object} all the attributes found as a key value pairs
	 */

	function DOMattributesToObject(element) {
	  return Array.from(element.attributes).reduce((acc, attribute) => {
	    acc[dashToCamelCase(attribute.name)] = attribute.value;
	    return acc;
	  }, {});
	}
	/**
	 * Move all the child nodes from a source tag to another
	 * @param   {HTMLElement} source - source node
	 * @param   {HTMLElement} target - target node
	 * @returns {undefined} it's a void method ¯\_(ツ)_/¯
	 */
	// Ignore this helper because it's needed only for svg tags

	function moveChildren(source, target) {
	  if (source.firstChild) {
	    target.appendChild(source.firstChild);
	    moveChildren(source, target);
	  }
	}
	/**
	 * Remove the child nodes from any DOM node
	 * @param   {HTMLElement} node - target node
	 * @returns {undefined}
	 */

	function cleanNode(node) {
	  clearChildren(node.childNodes);
	}
	/**
	 * Clear multiple children in a node
	 * @param   {HTMLElement[]} children - direct children nodes
	 * @returns {undefined}
	 */

	function clearChildren(children) {
	  Array.from(children).forEach(removeChild);
	}
	/**
	 * Remove a node
	 * @param {HTMLElement}node - node to remove
	 * @returns {undefined}
	 */

	const removeChild = node => node && node.parentNode && node.parentNode.removeChild(node);
	/**
	 * Insert before a node
	 * @param {HTMLElement} newNode - node to insert
	 * @param {HTMLElement} refNode - ref child
	 * @returns {undefined}
	 */

	const insertBefore = (newNode, refNode) => refNode && refNode.parentNode && refNode.parentNode.insertBefore(newNode, refNode);
	/**
	 * Replace a node
	 * @param {HTMLElement} newNode - new node to add to the DOM
	 * @param {HTMLElement} replaced - node to replace
	 * @returns {undefined}
	 */

	const replaceChild = (newNode, replaced) => replaced && replaced.parentNode && replaced.parentNode.replaceChild(newNode, replaced);

	// Riot.js constants that can be used accross more modules
	const COMPONENTS_IMPLEMENTATION_MAP$1 = new Map(),
	      DOM_COMPONENT_INSTANCE_PROPERTY$1 = Symbol('riot-component'),
	      PLUGINS_SET$1 = new Set(),
	      IS_DIRECTIVE = 'is',
	      VALUE_ATTRIBUTE$1 = 'value',
	      MOUNT_METHOD_KEY = 'mount',
	      UPDATE_METHOD_KEY = 'update',
	      UNMOUNT_METHOD_KEY = 'unmount',
	      SHOULD_UPDATE_KEY = 'shouldUpdate',
	      ON_BEFORE_MOUNT_KEY = 'onBeforeMount',
	      ON_MOUNTED_KEY = 'onMounted',
	      ON_BEFORE_UPDATE_KEY = 'onBeforeUpdate',
	      ON_UPDATED_KEY = 'onUpdated',
	      ON_BEFORE_UNMOUNT_KEY = 'onBeforeUnmount',
	      ON_UNMOUNTED_KEY = 'onUnmounted',
	      PROPS_KEY = 'props',
	      STATE_KEY = 'state',
	      SLOTS_KEY = 'slots',
	      ROOT_KEY = 'root',
	      IS_PURE_SYMBOL = Symbol('pure'),
	      IS_COMPONENT_UPDATING = Symbol('is_updating'),
	      PARENT_KEY_SYMBOL = Symbol('parent'),
	      ATTRIBUTES_KEY_SYMBOL = Symbol('attributes'),
	      TEMPLATE_KEY_SYMBOL = Symbol('template');

	var globals = /*#__PURE__*/Object.freeze({
	  __proto__: null,
	  COMPONENTS_IMPLEMENTATION_MAP: COMPONENTS_IMPLEMENTATION_MAP$1,
	  DOM_COMPONENT_INSTANCE_PROPERTY: DOM_COMPONENT_INSTANCE_PROPERTY$1,
	  PLUGINS_SET: PLUGINS_SET$1,
	  IS_DIRECTIVE: IS_DIRECTIVE,
	  VALUE_ATTRIBUTE: VALUE_ATTRIBUTE$1,
	  MOUNT_METHOD_KEY: MOUNT_METHOD_KEY,
	  UPDATE_METHOD_KEY: UPDATE_METHOD_KEY,
	  UNMOUNT_METHOD_KEY: UNMOUNT_METHOD_KEY,
	  SHOULD_UPDATE_KEY: SHOULD_UPDATE_KEY,
	  ON_BEFORE_MOUNT_KEY: ON_BEFORE_MOUNT_KEY,
	  ON_MOUNTED_KEY: ON_MOUNTED_KEY,
	  ON_BEFORE_UPDATE_KEY: ON_BEFORE_UPDATE_KEY,
	  ON_UPDATED_KEY: ON_UPDATED_KEY,
	  ON_BEFORE_UNMOUNT_KEY: ON_BEFORE_UNMOUNT_KEY,
	  ON_UNMOUNTED_KEY: ON_UNMOUNTED_KEY,
	  PROPS_KEY: PROPS_KEY,
	  STATE_KEY: STATE_KEY,
	  SLOTS_KEY: SLOTS_KEY,
	  ROOT_KEY: ROOT_KEY,
	  IS_PURE_SYMBOL: IS_PURE_SYMBOL,
	  IS_COMPONENT_UPDATING: IS_COMPONENT_UPDATING,
	  PARENT_KEY_SYMBOL: PARENT_KEY_SYMBOL,
	  ATTRIBUTES_KEY_SYMBOL: ATTRIBUTES_KEY_SYMBOL,
	  TEMPLATE_KEY_SYMBOL: TEMPLATE_KEY_SYMBOL
	});

	const EACH = 0;
	const IF = 1;
	const SIMPLE = 2;
	const TAG = 3;
	const SLOT = 4;
	var bindingTypes = {
	  EACH,
	  IF,
	  SIMPLE,
	  TAG,
	  SLOT
	};

	const ATTRIBUTE = 0;
	const EVENT = 1;
	const TEXT = 2;
	const VALUE = 3;
	var expressionTypes = {
	  ATTRIBUTE,
	  EVENT,
	  TEXT,
	  VALUE
	};

	const HEAD_SYMBOL = Symbol('head');
	const TAIL_SYMBOL = Symbol('tail');

	/**
	 * Create the <template> fragments text nodes
	 * @return {Object} {{head: Text, tail: Text}}
	 */

	function createHeadTailPlaceholders() {
	  const head = document.createTextNode('');
	  const tail = document.createTextNode('');
	  head[HEAD_SYMBOL] = true;
	  tail[TAIL_SYMBOL] = true;
	  return {
	    head,
	    tail
	  };
	}

	/**
	 * Create the template meta object in case of <template> fragments
	 * @param   {TemplateChunk} componentTemplate - template chunk object
	 * @returns {Object} the meta property that will be passed to the mount function of the TemplateChunk
	 */

	function createTemplateMeta(componentTemplate) {
	  const fragment = componentTemplate.dom.cloneNode(true);
	  const {
	    head,
	    tail
	  } = createHeadTailPlaceholders();
	  return {
	    avoidDOMInjection: true,
	    fragment,
	    head,
	    tail,
	    children: [head, ...Array.from(fragment.childNodes), tail]
	  };
	}

	/**
	 * Helper function to set an immutable property
	 * @param   {Object} source - object where the new property will be set
	 * @param   {string} key - object key where the new property will be stored
	 * @param   {*} value - value of the new property
	 * @param   {Object} options - set the propery overriding the default options
	 * @returns {Object} - the original object modified
	 */
	function defineProperty(source, key, value, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  /* eslint-disable fp/no-mutating-methods */
	  Object.defineProperty(source, key, Object.assign({
	    value,
	    enumerable: false,
	    writable: false,
	    configurable: true
	  }, options));
	  /* eslint-enable fp/no-mutating-methods */

	  return source;
	}
	/**
	 * Define multiple properties on a target object
	 * @param   {Object} source - object where the new properties will be set
	 * @param   {Object} properties - object containing as key pair the key + value properties
	 * @param   {Object} options - set the propery overriding the default options
	 * @returns {Object} the original object modified
	 */

	function defineProperties(source, properties, options) {
	  Object.entries(properties).forEach(_ref => {
	    let [key, value] = _ref;
	    defineProperty(source, key, value, options);
	  });
	  return source;
	}
	/**
	 * Define default properties if they don't exist on the source object
	 * @param   {Object} source - object that will receive the default properties
	 * @param   {Object} defaults - object containing additional optional keys
	 * @returns {Object} the original object received enhanced
	 */

	function defineDefaults(source, defaults) {
	  Object.entries(defaults).forEach(_ref2 => {
	    let [key, value] = _ref2;
	    if (!source[key]) source[key] = value;
	  });
	  return source;
	}

	/**
	 * Get the current <template> fragment children located in between the head and tail comments
	 * @param {Comment} head - head comment node
	 * @param {Comment} tail - tail comment node
	 * @return {Array[]} children list of the nodes found in this template fragment
	 */

	function getFragmentChildren(_ref) {
	  let {
	    head,
	    tail
	  } = _ref;
	  const nodes = walkNodes([head], head.nextSibling, n => n === tail, false);
	  nodes.push(tail);
	  return nodes;
	}
	/**
	 * Recursive function to walk all the <template> children nodes
	 * @param {Array[]} children - children nodes collection
	 * @param {ChildNode} node - current node
	 * @param {Function} check - exit function check
	 * @param {boolean} isFilterActive - filter flag to skip nodes managed by other bindings
	 * @returns {Array[]} children list of the nodes found in this template fragment
	 */

	function walkNodes(children, node, check, isFilterActive) {
	  const {
	    nextSibling
	  } = node; // filter tail and head nodes together with all the nodes in between
	  // this is needed only to fix a really ugly edge case https://github.com/riot/riot/issues/2892

	  if (!isFilterActive && !node[HEAD_SYMBOL] && !node[TAIL_SYMBOL]) {
	    children.push(node);
	  }

	  if (!nextSibling || check(node)) return children;
	  return walkNodes(children, nextSibling, check, // activate the filters to skip nodes between <template> fragments that will be managed by other bindings
	  isFilterActive && !node[TAIL_SYMBOL] || nextSibling[HEAD_SYMBOL]);
	}

	/**
	 * Quick type checking
	 * @param   {*} element - anything
	 * @param   {string} type - type definition
	 * @returns {boolean} true if the type corresponds
	 */
	function checkType(element, type) {
	  return typeof element === type;
	}
	/**
	 * Check if an element is part of an svg
	 * @param   {HTMLElement}  el - element to check
	 * @returns {boolean} true if we are in an svg context
	 */

	function isSvg(el) {
	  const owner = el.ownerSVGElement;
	  return !!owner || owner === null;
	}
	/**
	 * Check if an element is a template tag
	 * @param   {HTMLElement}  el - element to check
	 * @returns {boolean} true if it's a <template>
	 */

	function isTemplate(el) {
	  return el.tagName.toLowerCase() === 'template';
	}
	/**
	 * Check that will be passed if its argument is a function
	 * @param   {*} value - value to check
	 * @returns {boolean} - true if the value is a function
	 */

	function isFunction(value) {
	  return checkType(value, 'function');
	}
	/**
	 * Check if a value is a Boolean
	 * @param   {*}  value - anything
	 * @returns {boolean} true only for the value is a boolean
	 */

	function isBoolean(value) {
	  return checkType(value, 'boolean');
	}
	/**
	 * Check if a value is an Object
	 * @param   {*}  value - anything
	 * @returns {boolean} true only for the value is an object
	 */

	function isObject(value) {
	  return !isNil(value) && value.constructor === Object;
	}
	/**
	 * Check if a value is null or undefined
	 * @param   {*}  value - anything
	 * @returns {boolean} true only for the 'undefined' and 'null' types
	 */

	function isNil(value) {
	  return value === null || value === undefined;
	}

	/**
	 * ISC License
	 *
	 * Copyright (c) 2020, Andrea Giammarchi, @WebReflection
	 *
	 * Permission to use, copy, modify, and/or distribute this software for any
	 * purpose with or without fee is hereby granted, provided that the above
	 * copyright notice and this permission notice appear in all copies.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	 * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
	 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	 * PERFORMANCE OF THIS SOFTWARE.
	 */
	// fork of https://github.com/WebReflection/udomdiff version 1.1.0
	// due to https://github.com/WebReflection/udomdiff/pull/2

	/* eslint-disable */

	/**
	 * @param {Node[]} a The list of current/live children
	 * @param {Node[]} b The list of future children
	 * @param {(entry: Node, action: number) => Node} get
	 * The callback invoked per each entry related DOM operation.
	 * @param {Node} [before] The optional node used as anchor to insert before.
	 * @returns {Node[]} The same list of future children.
	 */

	var udomdiff = ((a, b, get, before) => {
	  const bLength = b.length;
	  let aEnd = a.length;
	  let bEnd = bLength;
	  let aStart = 0;
	  let bStart = 0;
	  let map = null;

	  while (aStart < aEnd || bStart < bEnd) {
	    // append head, tail, or nodes in between: fast path
	    if (aEnd === aStart) {
	      // we could be in a situation where the rest of nodes that
	      // need to be added are not at the end, and in such case
	      // the node to `insertBefore`, if the index is more than 0
	      // must be retrieved, otherwise it's gonna be the first item.
	      const node = bEnd < bLength ? bStart ? get(b[bStart - 1], -0).nextSibling : get(b[bEnd - bStart], 0) : before;

	      while (bStart < bEnd) insertBefore(get(b[bStart++], 1), node);
	    } // remove head or tail: fast path
	    else if (bEnd === bStart) {
	      while (aStart < aEnd) {
	        // remove the node only if it's unknown or not live
	        if (!map || !map.has(a[aStart])) removeChild(get(a[aStart], -1));
	        aStart++;
	      }
	    } // same node: fast path
	    else if (a[aStart] === b[bStart]) {
	      aStart++;
	      bStart++;
	    } // same tail: fast path
	    else if (a[aEnd - 1] === b[bEnd - 1]) {
	      aEnd--;
	      bEnd--;
	    } // The once here single last swap "fast path" has been removed in v1.1.0
	    // https://github.com/WebReflection/udomdiff/blob/single-final-swap/esm/index.js#L69-L85
	    // reverse swap: also fast path
	    else if (a[aStart] === b[bEnd - 1] && b[bStart] === a[aEnd - 1]) {
	      // this is a "shrink" operation that could happen in these cases:
	      // [1, 2, 3, 4, 5]
	      // [1, 4, 3, 2, 5]
	      // or asymmetric too
	      // [1, 2, 3, 4, 5]
	      // [1, 2, 3, 5, 6, 4]
	      const node = get(a[--aEnd], -1).nextSibling;
	      insertBefore(get(b[bStart++], 1), get(a[aStart++], -1).nextSibling);
	      insertBefore(get(b[--bEnd], 1), node); // mark the future index as identical (yeah, it's dirty, but cheap 👍)
	      // The main reason to do this, is that when a[aEnd] will be reached,
	      // the loop will likely be on the fast path, as identical to b[bEnd].
	      // In the best case scenario, the next loop will skip the tail,
	      // but in the worst one, this node will be considered as already
	      // processed, bailing out pretty quickly from the map index check

	      a[aEnd] = b[bEnd];
	    } // map based fallback, "slow" path
	    else {
	      // the map requires an O(bEnd - bStart) operation once
	      // to store all future nodes indexes for later purposes.
	      // In the worst case scenario, this is a full O(N) cost,
	      // and such scenario happens at least when all nodes are different,
	      // but also if both first and last items of the lists are different
	      if (!map) {
	        map = new Map();
	        let i = bStart;

	        while (i < bEnd) map.set(b[i], i++);
	      } // if it's a future node, hence it needs some handling


	      if (map.has(a[aStart])) {
	        // grab the index of such node, 'cause it might have been processed
	        const index = map.get(a[aStart]); // if it's not already processed, look on demand for the next LCS

	        if (bStart < index && index < bEnd) {
	          let i = aStart; // counts the amount of nodes that are the same in the future

	          let sequence = 1;

	          while (++i < aEnd && i < bEnd && map.get(a[i]) === index + sequence) sequence++; // effort decision here: if the sequence is longer than replaces
	          // needed to reach such sequence, which would brings again this loop
	          // to the fast path, prepend the difference before a sequence,
	          // and move only the future list index forward, so that aStart
	          // and bStart will be aligned again, hence on the fast path.
	          // An example considering aStart and bStart are both 0:
	          // a: [1, 2, 3, 4]
	          // b: [7, 1, 2, 3, 6]
	          // this would place 7 before 1 and, from that time on, 1, 2, and 3
	          // will be processed at zero cost


	          if (sequence > index - bStart) {
	            const node = get(a[aStart], 0);

	            while (bStart < index) insertBefore(get(b[bStart++], 1), node);
	          } // if the effort wasn't good enough, fallback to a replace,
	          // moving both source and target indexes forward, hoping that some
	          // similar node will be found later on, to go back to the fast path
	          else {
	            replaceChild(get(b[bStart++], 1), get(a[aStart++], -1));
	          }
	        } // otherwise move the source forward, 'cause there's nothing to do
	        else aStart++;
	      } // this node has no meaning in the future list, so it's more than safe
	      // to remove it, and check the next live node out instead, meaning
	      // that only the live list index should be forwarded
	      else removeChild(get(a[aStart++], -1));
	    }
	  }

	  return b;
	});

	const UNMOUNT_SCOPE = Symbol('unmount');
	const EachBinding = {
	  // dynamic binding properties
	  // childrenMap: null,
	  // node: null,
	  // root: null,
	  // condition: null,
	  // evaluate: null,
	  // template: null,
	  // isTemplateTag: false,
	  nodes: [],

	  // getKey: null,
	  // indexName: null,
	  // itemName: null,
	  // afterPlaceholder: null,
	  // placeholder: null,
	  // API methods
	  mount(scope, parentScope) {
	    return this.update(scope, parentScope);
	  },

	  update(scope, parentScope) {
	    const {
	      placeholder,
	      nodes,
	      childrenMap
	    } = this;
	    const collection = scope === UNMOUNT_SCOPE ? null : this.evaluate(scope);
	    const items = collection ? Array.from(collection) : []; // prepare the diffing

	    const {
	      newChildrenMap,
	      batches,
	      futureNodes
	    } = createPatch(items, scope, parentScope, this); // patch the DOM only if there are new nodes

	    udomdiff(nodes, futureNodes, patch(Array.from(childrenMap.values()), parentScope), placeholder); // trigger the mounts and the updates

	    batches.forEach(fn => fn()); // update the children map

	    this.childrenMap = newChildrenMap;
	    this.nodes = futureNodes; // make sure that the loop edge nodes are marked

	    markEdgeNodes(this.nodes);
	    return this;
	  },

	  unmount(scope, parentScope) {
	    this.update(UNMOUNT_SCOPE, parentScope);
	    return this;
	  }

	};
	/**
	 * Patch the DOM while diffing
	 * @param   {any[]} redundant - list of all the children (template, nodes, context) added via each
	 * @param   {*} parentScope - scope of the parent template
	 * @returns {Function} patch function used by domdiff
	 */

	function patch(redundant, parentScope) {
	  return (item, info) => {
	    if (info < 0) {
	      // get the last element added to the childrenMap saved previously
	      const element = redundant[redundant.length - 1];

	      if (element) {
	        // get the nodes and the template in stored in the last child of the childrenMap
	        const {
	          template,
	          nodes,
	          context
	        } = element; // remove the last node (notice <template> tags might have more children nodes)

	        nodes.pop(); // notice that we pass null as last argument because
	        // the root node and its children will be removed by domdiff

	        if (!nodes.length) {
	          // we have cleared all the children nodes and we can unmount this template
	          redundant.pop();
	          template.unmount(context, parentScope, null);
	        }
	      }
	    }

	    return item;
	  };
	}
	/**
	 * Check whether a template must be filtered from a loop
	 * @param   {Function} condition - filter function
	 * @param   {Object} context - argument passed to the filter function
	 * @returns {boolean} true if this item should be skipped
	 */


	function mustFilterItem(condition, context) {
	  return condition ? !condition(context) : false;
	}
	/**
	 * Extend the scope of the looped template
	 * @param   {Object} scope - current template scope
	 * @param   {Object} options - options
	 * @param   {string} options.itemName - key to identify the looped item in the new context
	 * @param   {string} options.indexName - key to identify the index of the looped item
	 * @param   {number} options.index - current index
	 * @param   {*} options.item - collection item looped
	 * @returns {Object} enhanced scope object
	 */


	function extendScope(scope, _ref) {
	  let {
	    itemName,
	    indexName,
	    index,
	    item
	  } = _ref;
	  defineProperty(scope, itemName, item);
	  if (indexName) defineProperty(scope, indexName, index);
	  return scope;
	}
	/**
	 * Mark the first and last nodes in order to ignore them in case we need to retrieve the <template> fragment nodes
	 * @param {Array[]} nodes - each binding nodes list
	 * @returns {undefined} void function
	 */


	function markEdgeNodes(nodes) {
	  const first = nodes[0];
	  const last = nodes[nodes.length - 1];
	  if (first) first[HEAD_SYMBOL] = true;
	  if (last) last[TAIL_SYMBOL] = true;
	}
	/**
	 * Loop the current template items
	 * @param   {Array} items - expression collection value
	 * @param   {*} scope - template scope
	 * @param   {*} parentScope - scope of the parent template
	 * @param   {EachBinding} binding - each binding object instance
	 * @returns {Object} data
	 * @returns {Map} data.newChildrenMap - a Map containing the new children template structure
	 * @returns {Array} data.batches - array containing the template lifecycle functions to trigger
	 * @returns {Array} data.futureNodes - array containing the nodes we need to diff
	 */


	function createPatch(items, scope, parentScope, binding) {
	  const {
	    condition,
	    template,
	    childrenMap,
	    itemName,
	    getKey,
	    indexName,
	    root,
	    isTemplateTag
	  } = binding;
	  const newChildrenMap = new Map();
	  const batches = [];
	  const futureNodes = [];
	  items.forEach((item, index) => {
	    const context = extendScope(Object.create(scope), {
	      itemName,
	      indexName,
	      index,
	      item
	    });
	    const key = getKey ? getKey(context) : index;
	    const oldItem = childrenMap.get(key);
	    const nodes = [];

	    if (mustFilterItem(condition, context)) {
	      return;
	    }

	    const mustMount = !oldItem;
	    const componentTemplate = oldItem ? oldItem.template : template.clone();
	    const el = componentTemplate.el || root.cloneNode();
	    const meta = isTemplateTag && mustMount ? createTemplateMeta(componentTemplate) : componentTemplate.meta;

	    if (mustMount) {
	      batches.push(() => componentTemplate.mount(el, context, parentScope, meta));
	    } else {
	      batches.push(() => componentTemplate.update(context, parentScope));
	    } // create the collection of nodes to update or to add
	    // in case of template tags we need to add all its children nodes


	    if (isTemplateTag) {
	      nodes.push(...(mustMount ? meta.children : getFragmentChildren(meta)));
	    } else {
	      nodes.push(el);
	    } // delete the old item from the children map


	    childrenMap.delete(key);
	    futureNodes.push(...nodes); // update the children map

	    newChildrenMap.set(key, {
	      nodes,
	      template: componentTemplate,
	      context,
	      index
	    });
	  });
	  return {
	    newChildrenMap,
	    batches,
	    futureNodes
	  };
	}

	function create$6(node, _ref2) {
	  let {
	    evaluate,
	    condition,
	    itemName,
	    indexName,
	    getKey,
	    template
	  } = _ref2;
	  const placeholder = document.createTextNode('');
	  const root = node.cloneNode();
	  insertBefore(placeholder, node);
	  removeChild(node);
	  return Object.assign({}, EachBinding, {
	    childrenMap: new Map(),
	    node,
	    root,
	    condition,
	    evaluate,
	    isTemplateTag: isTemplate(root),
	    template: template.createDOM(node),
	    getKey,
	    indexName,
	    itemName,
	    placeholder
	  });
	}

	/**
	 * Binding responsible for the `if` directive
	 */

	const IfBinding = {
	  // dynamic binding properties
	  // node: null,
	  // evaluate: null,
	  // isTemplateTag: false,
	  // placeholder: null,
	  // template: null,
	  // API methods
	  mount(scope, parentScope) {
	    return this.update(scope, parentScope);
	  },

	  update(scope, parentScope) {
	    const value = !!this.evaluate(scope);
	    const mustMount = !this.value && value;
	    const mustUnmount = this.value && !value;

	    const mount = () => {
	      const pristine = this.node.cloneNode();
	      insertBefore(pristine, this.placeholder);
	      this.template = this.template.clone();
	      this.template.mount(pristine, scope, parentScope);
	    };

	    switch (true) {
	      case mustMount:
	        mount();
	        break;

	      case mustUnmount:
	        this.unmount(scope);
	        break;

	      default:
	        if (value) this.template.update(scope, parentScope);
	    }

	    this.value = value;
	    return this;
	  },

	  unmount(scope, parentScope) {
	    this.template.unmount(scope, parentScope, true);
	    return this;
	  }

	};
	function create$5(node, _ref) {
	  let {
	    evaluate,
	    template
	  } = _ref;
	  const placeholder = document.createTextNode('');
	  insertBefore(placeholder, node);
	  removeChild(node);
	  return Object.assign({}, IfBinding, {
	    node,
	    evaluate,
	    placeholder,
	    template: template.createDOM(node)
	  });
	}

	/**
	 * Throw an error with a descriptive message
	 * @param   { string } message - error message
	 * @returns { undefined } hoppla.. at this point the program should stop working
	 */

	function panic(message) {
	  throw new Error(message);
	}
	/**
	 * Returns the memoized (cached) function.
	 * // borrowed from https://www.30secondsofcode.org/js/s/memoize
	 * @param {Function} fn - function to memoize
	 * @returns {Function} memoize function
	 */

	function memoize(fn) {
	  const cache = new Map();

	  const cached = val => {
	    return cache.has(val) ? cache.get(val) : cache.set(val, fn.call(this, val)) && cache.get(val);
	  };

	  cached.cache = cache;
	  return cached;
	}
	/**
	 * Evaluate a list of attribute expressions
	 * @param   {Array} attributes - attribute expressions generated by the riot compiler
	 * @returns {Object} key value pairs with the result of the computation
	 */

	function evaluateAttributeExpressions(attributes) {
	  return attributes.reduce((acc, attribute) => {
	    const {
	      value,
	      type
	    } = attribute;

	    switch (true) {
	      // spread attribute
	      case !attribute.name && type === ATTRIBUTE:
	        return Object.assign({}, acc, value);
	      // value attribute

	      case type === VALUE:
	        acc.value = attribute.value;
	        break;
	      // normal attributes

	      default:
	        acc[dashToCamelCase(attribute.name)] = attribute.value;
	    }

	    return acc;
	  }, {});
	}

	const ElementProto = typeof Element === 'undefined' ? {} : Element.prototype;
	const isNativeHtmlProperty = memoize(name => ElementProto.hasOwnProperty(name)); // eslint-disable-line

	/**
	 * Add all the attributes provided
	 * @param   {HTMLElement} node - target node
	 * @param   {Object} attributes - object containing the attributes names and values
	 * @returns {undefined} sorry it's a void function :(
	 */

	function setAllAttributes(node, attributes) {
	  Object.entries(attributes).forEach(_ref => {
	    let [name, value] = _ref;
	    return attributeExpression(node, {
	      name
	    }, value);
	  });
	}
	/**
	 * Remove all the attributes provided
	 * @param   {HTMLElement} node - target node
	 * @param   {Object} newAttributes - object containing all the new attribute names
	 * @param   {Object} oldAttributes - object containing all the old attribute names
	 * @returns {undefined} sorry it's a void function :(
	 */


	function removeAllAttributes(node, newAttributes, oldAttributes) {
	  const newKeys = newAttributes ? Object.keys(newAttributes) : [];
	  Object.keys(oldAttributes).filter(name => !newKeys.includes(name)).forEach(attribute => node.removeAttribute(attribute));
	}
	/**
	 * Check whether the attribute value can be rendered
	 * @param {*} value - expression value
	 * @returns {boolean} true if we can render this attribute value
	 */


	function canRenderAttribute(value) {
	  return value === true || ['string', 'number'].includes(typeof value);
	}
	/**
	 * Check whether the attribute should be removed
	 * @param {*} value - expression value
	 * @returns {boolean} boolean - true if the attribute can be removed}
	 */


	function shouldRemoveAttribute(value) {
	  return !value && value !== 0;
	}
	/**
	 * This methods handles the DOM attributes updates
	 * @param   {HTMLElement} node - target node
	 * @param   {Object} expression - expression object
	 * @param   {string} expression.name - attribute name
	 * @param   {*} value - new expression value
	 * @param   {*} oldValue - the old expression cached value
	 * @returns {undefined}
	 */


	function attributeExpression(node, _ref2, value, oldValue) {
	  let {
	    name
	  } = _ref2;

	  // is it a spread operator? {...attributes}
	  if (!name) {
	    if (oldValue) {
	      // remove all the old attributes
	      removeAllAttributes(node, value, oldValue);
	    } // is the value still truthy?


	    if (value) {
	      setAllAttributes(node, value);
	    }

	    return;
	  } // handle boolean attributes


	  if (!isNativeHtmlProperty(name) && (isBoolean(value) || isObject(value) || isFunction(value))) {
	    node[name] = value;
	  }

	  if (shouldRemoveAttribute(value)) {
	    node.removeAttribute(name);
	  } else if (canRenderAttribute(value)) {
	    node.setAttribute(name, normalizeValue(name, value));
	  }
	}
	/**
	 * Get the value as string
	 * @param   {string} name - attribute name
	 * @param   {*} value - user input value
	 * @returns {string} input value as string
	 */

	function normalizeValue(name, value) {
	  // be sure that expressions like selected={ true } will be always rendered as selected='selected'
	  return value === true ? name : value;
	}

	const RE_EVENTS_PREFIX = /^on/;

	const getCallbackAndOptions = value => Array.isArray(value) ? value : [value, false]; // see also https://medium.com/@WebReflection/dom-handleevent-a-cross-platform-standard-since-year-2000-5bf17287fd38


	const EventListener = {
	  handleEvent(event) {
	    this[event.type](event);
	  }

	};
	const ListenersWeakMap = new WeakMap();

	const createListener = node => {
	  const listener = Object.create(EventListener);
	  ListenersWeakMap.set(node, listener);
	  return listener;
	};
	/**
	 * Set a new event listener
	 * @param   {HTMLElement} node - target node
	 * @param   {Object} expression - expression object
	 * @param   {string} expression.name - event name
	 * @param   {*} value - new expression value
	 * @returns {value} the callback just received
	 */


	function eventExpression(node, _ref, value) {
	  let {
	    name
	  } = _ref;
	  const normalizedEventName = name.replace(RE_EVENTS_PREFIX, '');
	  const eventListener = ListenersWeakMap.get(node) || createListener(node);
	  const [callback, options] = getCallbackAndOptions(value);
	  const handler = eventListener[normalizedEventName];
	  const mustRemoveEvent = handler && !callback;
	  const mustAddEvent = callback && !handler;

	  if (mustRemoveEvent) {
	    node.removeEventListener(normalizedEventName, eventListener);
	  }

	  if (mustAddEvent) {
	    node.addEventListener(normalizedEventName, eventListener, options);
	  }

	  eventListener[normalizedEventName] = callback;
	}

	/**
	 * Normalize the user value in order to render a empty string in case of falsy values
	 * @param   {*} value - user input value
	 * @returns {string} hopefully a string
	 */

	function normalizeStringValue(value) {
	  return isNil(value) ? '' : value;
	}

	/**
	 * Get the the target text node to update or create one from of a comment node
	 * @param   {HTMLElement} node - any html element containing childNodes
	 * @param   {number} childNodeIndex - index of the text node in the childNodes list
	 * @returns {Text} the text node to update
	 */

	const getTextNode = (node, childNodeIndex) => {
	  const target = node.childNodes[childNodeIndex];

	  if (target.nodeType === Node.COMMENT_NODE) {
	    const textNode = document.createTextNode('');
	    node.replaceChild(textNode, target);
	    return textNode;
	  }

	  return target;
	};
	/**
	 * This methods handles a simple text expression update
	 * @param   {HTMLElement} node - target node
	 * @param   {Object} data - expression object
	 * @param   {*} value - new expression value
	 * @returns {undefined}
	 */

	function textExpression(node, data, value) {
	  node.data = normalizeStringValue(value);
	}

	/**
	 * This methods handles the input fileds value updates
	 * @param   {HTMLElement} node - target node
	 * @param   {Object} expression - expression object
	 * @param   {*} value - new expression value
	 * @returns {undefined}
	 */

	function valueExpression(node, expression, value) {
	  node.value = normalizeStringValue(value);
	}

	var expressions = {
	  [ATTRIBUTE]: attributeExpression,
	  [EVENT]: eventExpression,
	  [TEXT]: textExpression,
	  [VALUE]: valueExpression
	};

	const Expression = {
	  // Static props
	  // node: null,
	  // value: null,
	  // API methods

	  /**
	   * Mount the expression evaluating its initial value
	   * @param   {*} scope - argument passed to the expression to evaluate its current values
	   * @returns {Expression} self
	   */
	  mount(scope) {
	    // hopefully a pure function
	    this.value = this.evaluate(scope); // IO() DOM updates

	    apply(this, this.value);
	    return this;
	  },

	  /**
	   * Update the expression if its value changed
	   * @param   {*} scope - argument passed to the expression to evaluate its current values
	   * @returns {Expression} self
	   */
	  update(scope) {
	    // pure function
	    const value = this.evaluate(scope);

	    if (this.value !== value) {
	      // IO() DOM updates
	      apply(this, value);
	      this.value = value;
	    }

	    return this;
	  },

	  /**
	   * Expression teardown method
	   * @returns {Expression} self
	   */
	  unmount() {
	    // unmount only the event handling expressions
	    if (this.type === EVENT) apply(this, null);
	    return this;
	  }

	};
	/**
	 * IO() function to handle the DOM updates
	 * @param {Expression} expression - expression object
	 * @param {*} value - current expression value
	 * @returns {undefined}
	 */

	function apply(expression, value) {
	  return expressions[expression.type](expression.node, expression, value, expression.value);
	}

	function create$4(node, data) {
	  return Object.assign({}, Expression, data, {
	    node: data.type === TEXT ? getTextNode(node, data.childNodeIndex) : node
	  });
	}

	/**
	 * Create a flat object having as keys a list of methods that if dispatched will propagate
	 * on the whole collection
	 * @param   {Array} collection - collection to iterate
	 * @param   {Array<string>} methods - methods to execute on each item of the collection
	 * @param   {*} context - context returned by the new methods created
	 * @returns {Object} a new object to simplify the the nested methods dispatching
	 */
	function flattenCollectionMethods(collection, methods, context) {
	  return methods.reduce((acc, method) => {
	    return Object.assign({}, acc, {
	      [method]: scope => {
	        return collection.map(item => item[method](scope)) && context;
	      }
	    });
	  }, {});
	}

	function create$3(node, _ref) {
	  let {
	    expressions
	  } = _ref;
	  return Object.assign({}, flattenCollectionMethods(expressions.map(expression => create$4(node, expression)), ['mount', 'update', 'unmount']));
	}

	function extendParentScope(attributes, scope, parentScope) {
	  if (!attributes || !attributes.length) return parentScope;
	  const expressions = attributes.map(attr => Object.assign({}, attr, {
	    value: attr.evaluate(scope)
	  }));
	  return Object.assign(Object.create(parentScope || null), evaluateAttributeExpressions(expressions));
	} // this function is only meant to fix an edge case
	// https://github.com/riot/riot/issues/2842


	const getRealParent = (scope, parentScope) => scope[PARENT_KEY_SYMBOL] || parentScope;

	const SlotBinding = {
	  // dynamic binding properties
	  // node: null,
	  // name: null,
	  attributes: [],

	  // template: null,
	  getTemplateScope(scope, parentScope) {
	    return extendParentScope(this.attributes, scope, parentScope);
	  },

	  // API methods
	  mount(scope, parentScope) {
	    const templateData = scope.slots ? scope.slots.find(_ref => {
	      let {
	        id
	      } = _ref;
	      return id === this.name;
	    }) : false;
	    const {
	      parentNode
	    } = this.node;
	    const realParent = getRealParent(scope, parentScope);
	    this.template = templateData && create$7(templateData.html, templateData.bindings).createDOM(parentNode);

	    if (this.template) {
	      cleanNode(this.node);
	      this.template.mount(this.node, this.getTemplateScope(scope, realParent), realParent);
	      this.template.children = Array.from(this.node.childNodes);
	    }

	    moveSlotInnerContent(this.node);
	    removeChild(this.node);
	    return this;
	  },

	  update(scope, parentScope) {
	    if (this.template) {
	      const realParent = getRealParent(scope, parentScope);
	      this.template.update(this.getTemplateScope(scope, realParent), realParent);
	    }

	    return this;
	  },

	  unmount(scope, parentScope, mustRemoveRoot) {
	    if (this.template) {
	      this.template.unmount(this.getTemplateScope(scope, parentScope), null, mustRemoveRoot);
	    }

	    return this;
	  }

	};
	/**
	 * Move the inner content of the slots outside of them
	 * @param   {HTMLElement} slot - slot node
	 * @returns {undefined} it's a void method ¯\_(ツ)_/¯
	 */

	function moveSlotInnerContent(slot) {
	  const child = slot && slot.firstChild;
	  if (!child) return;
	  insertBefore(child, slot);
	  moveSlotInnerContent(slot);
	}
	/**
	 * Create a single slot binding
	 * @param   {HTMLElement} node - slot node
	 * @param   {string} name - slot id
	 * @param   {AttributeExpressionData[]} attributes - slot attributes
	 * @returns {Object} Slot binding object
	 */


	function createSlot(node, _ref2) {
	  let {
	    name,
	    attributes
	  } = _ref2;
	  return Object.assign({}, SlotBinding, {
	    attributes,
	    node,
	    name
	  });
	}

	/**
	 * Create a new tag object if it was registered before, otherwise fallback to the simple
	 * template chunk
	 * @param   {Function} component - component factory function
	 * @param   {Array<Object>} slots - array containing the slots markup
	 * @param   {Array} attributes - dynamic attributes that will be received by the tag element
	 * @returns {TagImplementation|TemplateChunk} a tag implementation or a template chunk as fallback
	 */

	function getTag(component, slots, attributes) {
	  if (slots === void 0) {
	    slots = [];
	  }

	  if (attributes === void 0) {
	    attributes = [];
	  }

	  // if this tag was registered before we will return its implementation
	  if (component) {
	    return component({
	      slots,
	      attributes
	    });
	  } // otherwise we return a template chunk


	  return create$7(slotsToMarkup(slots), [...slotBindings(slots), {
	    // the attributes should be registered as binding
	    // if we fallback to a normal template chunk
	    expressions: attributes.map(attr => {
	      return Object.assign({
	        type: ATTRIBUTE
	      }, attr);
	    })
	  }]);
	}
	/**
	 * Merge all the slots bindings into a single array
	 * @param   {Array<Object>} slots - slots collection
	 * @returns {Array<Bindings>} flatten bindings array
	 */


	function slotBindings(slots) {
	  return slots.reduce((acc, _ref) => {
	    let {
	      bindings
	    } = _ref;
	    return acc.concat(bindings);
	  }, []);
	}
	/**
	 * Merge all the slots together in a single markup string
	 * @param   {Array<Object>} slots - slots collection
	 * @returns {string} markup of all the slots in a single string
	 */


	function slotsToMarkup(slots) {
	  return slots.reduce((acc, slot) => {
	    return acc + slot.html;
	  }, '');
	}

	const TagBinding = {
	  // dynamic binding properties
	  // node: null,
	  // evaluate: null,
	  // name: null,
	  // slots: null,
	  // tag: null,
	  // attributes: null,
	  // getComponent: null,
	  mount(scope) {
	    return this.update(scope);
	  },

	  update(scope, parentScope) {
	    const name = this.evaluate(scope); // simple update

	    if (name && name === this.name) {
	      this.tag.update(scope);
	    } else {
	      // unmount the old tag if it exists
	      this.unmount(scope, parentScope, true); // mount the new tag

	      this.name = name;
	      this.tag = getTag(this.getComponent(name), this.slots, this.attributes);
	      this.tag.mount(this.node, scope);
	    }

	    return this;
	  },

	  unmount(scope, parentScope, keepRootTag) {
	    if (this.tag) {
	      // keep the root tag
	      this.tag.unmount(keepRootTag);
	    }

	    return this;
	  }

	};
	function create$2(node, _ref2) {
	  let {
	    evaluate,
	    getComponent,
	    slots,
	    attributes
	  } = _ref2;
	  return Object.assign({}, TagBinding, {
	    node,
	    evaluate,
	    slots,
	    attributes,
	    getComponent
	  });
	}

	var bindings = {
	  [IF]: create$5,
	  [SIMPLE]: create$3,
	  [EACH]: create$6,
	  [TAG]: create$2,
	  [SLOT]: createSlot
	};

	/**
	 * Text expressions in a template tag will get childNodeIndex value normalized
	 * depending on the position of the <template> tag offset
	 * @param   {Expression[]} expressions - riot expressions array
	 * @param   {number} textExpressionsOffset - offset of the <template> tag
	 * @returns {Expression[]} expressions containing the text expressions normalized
	 */

	function fixTextExpressionsOffset(expressions, textExpressionsOffset) {
	  return expressions.map(e => e.type === TEXT ? Object.assign({}, e, {
	    childNodeIndex: e.childNodeIndex + textExpressionsOffset
	  }) : e);
	}
	/**
	 * Bind a new expression object to a DOM node
	 * @param   {HTMLElement} root - DOM node where to bind the expression
	 * @param   {TagBindingData} binding - binding data
	 * @param   {number|null} templateTagOffset - if it's defined we need to fix the text expressions childNodeIndex offset
	 * @returns {Binding} Binding object
	 */


	function create$1(root, binding, templateTagOffset) {
	  const {
	    selector,
	    type,
	    redundantAttribute,
	    expressions
	  } = binding; // find the node to apply the bindings

	  const node = selector ? root.querySelector(selector) : root; // remove eventually additional attributes created only to select this node

	  if (redundantAttribute) node.removeAttribute(redundantAttribute);
	  const bindingExpressions = expressions || []; // init the binding

	  return (bindings[type] || bindings[SIMPLE])(node, Object.assign({}, binding, {
	    expressions: templateTagOffset && !selector ? fixTextExpressionsOffset(bindingExpressions, templateTagOffset) : bindingExpressions
	  }));
	}

	function createHTMLTree(html, root) {
	  const template = isTemplate(root) ? root : document.createElement('template');
	  template.innerHTML = html;
	  return template.content;
	} // for svg nodes we need a bit more work


	function createSVGTree(html, container) {
	  // create the SVGNode
	  const svgNode = container.ownerDocument.importNode(new window.DOMParser().parseFromString(`<svg xmlns="http://www.w3.org/2000/svg">${html}</svg>`, 'application/xml').documentElement, true);
	  return svgNode;
	}
	/**
	 * Create the DOM that will be injected
	 * @param {Object} root - DOM node to find out the context where the fragment will be created
	 * @param   {string} html - DOM to create as string
	 * @returns {HTMLDocumentFragment|HTMLElement} a new html fragment
	 */


	function createDOMTree(root, html) {
	  if (isSvg(root)) return createSVGTree(html, root);
	  return createHTMLTree(html, root);
	}

	/**
	 * Inject the DOM tree into a target node
	 * @param   {HTMLElement} el - target element
	 * @param   {DocumentFragment|SVGElement} dom - dom tree to inject
	 * @returns {undefined}
	 */

	function injectDOM(el, dom) {
	  switch (true) {
	    case isSvg(el):
	      moveChildren(dom, el);
	      break;

	    case isTemplate(el):
	      el.parentNode.replaceChild(dom, el);
	      break;

	    default:
	      el.appendChild(dom);
	  }
	}

	/**
	 * Create the Template DOM skeleton
	 * @param   {HTMLElement} el - root node where the DOM will be injected
	 * @param   {string|HTMLElement} html - HTML markup or HTMLElement that will be injected into the root node
	 * @returns {?DocumentFragment} fragment that will be injected into the root node
	 */

	function createTemplateDOM(el, html) {
	  return html && (typeof html === 'string' ? createDOMTree(el, html) : html);
	}
	/**
	 * Get the offset of the <template> tag
	 * @param {HTMLElement} parentNode - template tag parent node
	 * @param {HTMLElement} el - the template tag we want to render
	 * @param   {Object} meta - meta properties needed to handle the <template> tags in loops
	 * @returns {number} offset of the <template> tag calculated from its siblings DOM nodes
	 */


	function getTemplateTagOffset(parentNode, el, meta) {
	  const siblings = Array.from(parentNode.childNodes);
	  return Math.max(siblings.indexOf(el), siblings.indexOf(meta.head) + 1, 0);
	}
	/**
	 * Template Chunk model
	 * @type {Object}
	 */


	const TemplateChunk = Object.freeze({
	  // Static props
	  // bindings: null,
	  // bindingsData: null,
	  // html: null,
	  // isTemplateTag: false,
	  // fragment: null,
	  // children: null,
	  // dom: null,
	  // el: null,

	  /**
	   * Create the template DOM structure that will be cloned on each mount
	   * @param   {HTMLElement} el - the root node
	   * @returns {TemplateChunk} self
	   */
	  createDOM(el) {
	    // make sure that the DOM gets created before cloning the template
	    this.dom = this.dom || createTemplateDOM(el, this.html) || document.createDocumentFragment();
	    return this;
	  },

	  // API methods

	  /**
	   * Attach the template to a DOM node
	   * @param   {HTMLElement} el - target DOM node
	   * @param   {*} scope - template data
	   * @param   {*} parentScope - scope of the parent template tag
	   * @param   {Object} meta - meta properties needed to handle the <template> tags in loops
	   * @returns {TemplateChunk} self
	   */
	  mount(el, scope, parentScope, meta) {
	    if (meta === void 0) {
	      meta = {};
	    }

	    if (!el) throw new Error('Please provide DOM node to mount properly your template');
	    if (this.el) this.unmount(scope); // <template> tags require a bit more work
	    // the template fragment might be already created via meta outside of this call

	    const {
	      fragment,
	      children,
	      avoidDOMInjection
	    } = meta; // <template> bindings of course can not have a root element
	    // so we check the parent node to set the query selector bindings

	    const {
	      parentNode
	    } = children ? children[0] : el;
	    const isTemplateTag = isTemplate(el);
	    const templateTagOffset = isTemplateTag ? getTemplateTagOffset(parentNode, el, meta) : null; // create the DOM if it wasn't created before

	    this.createDOM(el); // create the DOM of this template cloning the original DOM structure stored in this instance
	    // notice that if a documentFragment was passed (via meta) we will use it instead

	    const cloneNode = fragment || this.dom.cloneNode(true); // store root node
	    // notice that for template tags the root note will be the parent tag

	    this.el = isTemplateTag ? parentNode : el; // create the children array only for the <template> fragments

	    this.children = isTemplateTag ? children || Array.from(cloneNode.childNodes) : null; // inject the DOM into the el only if a fragment is available

	    if (!avoidDOMInjection && cloneNode) injectDOM(el, cloneNode); // create the bindings

	    this.bindings = this.bindingsData.map(binding => create$1(this.el, binding, templateTagOffset));
	    this.bindings.forEach(b => b.mount(scope, parentScope)); // store the template meta properties

	    this.meta = meta;
	    return this;
	  },

	  /**
	   * Update the template with fresh data
	   * @param   {*} scope - template data
	   * @param   {*} parentScope - scope of the parent template tag
	   * @returns {TemplateChunk} self
	   */
	  update(scope, parentScope) {
	    this.bindings.forEach(b => b.update(scope, parentScope));
	    return this;
	  },

	  /**
	   * Remove the template from the node where it was initially mounted
	   * @param   {*} scope - template data
	   * @param   {*} parentScope - scope of the parent template tag
	   * @param   {boolean|null} mustRemoveRoot - if true remove the root element,
	   * if false or undefined clean the root tag content, if null don't touch the DOM
	   * @returns {TemplateChunk} self
	   */
	  unmount(scope, parentScope, mustRemoveRoot) {
	    if (mustRemoveRoot === void 0) {
	      mustRemoveRoot = false;
	    }

	    const el = this.el;

	    if (!el) {
	      return this;
	    }

	    this.bindings.forEach(b => b.unmount(scope, parentScope, mustRemoveRoot));

	    switch (true) {
	      // pure components should handle the DOM unmount updates by themselves
	      // for mustRemoveRoot === null don't touch the DOM
	      case el[IS_PURE_SYMBOL] || mustRemoveRoot === null:
	        break;
	      // if children are declared, clear them
	      // applicable for <template> and <slot/> bindings

	      case Array.isArray(this.children):
	        clearChildren(this.children);
	        break;
	      // clean the node children only

	      case !mustRemoveRoot:
	        cleanNode(el);
	        break;
	      // remove the root node only if the mustRemoveRoot is truly

	      case !!mustRemoveRoot:
	        removeChild(el);
	        break;
	    }

	    this.el = null;
	    return this;
	  },

	  /**
	   * Clone the template chunk
	   * @returns {TemplateChunk} a clone of this object resetting the this.el property
	   */
	  clone() {
	    return Object.assign({}, this, {
	      meta: {},
	      el: null
	    });
	  }

	});
	/**
	 * Create a template chunk wiring also the bindings
	 * @param   {string|HTMLElement} html - template string
	 * @param   {BindingData[]} bindings - bindings collection
	 * @returns {TemplateChunk} a new TemplateChunk copy
	 */

	function create$7(html, bindings) {
	  if (bindings === void 0) {
	    bindings = [];
	  }

	  return Object.assign({}, TemplateChunk, {
	    html,
	    bindingsData: bindings
	  });
	}

	/**
	 * Method used to bind expressions to a DOM node
	 * @param   {string|HTMLElement} html - your static template html structure
	 * @param   {Array} bindings - list of the expressions to bind to update the markup
	 * @returns {TemplateChunk} a new TemplateChunk object having the `update`,`mount`, `unmount` and `clone` methods
	 *
	 * @example
	 *
	 * riotDOMBindings
	 *  .template(
	 *   `<div expr0><!----></div><div><p expr1><!----><section expr2></section></p>`,
	 *   [
	 *     {
	 *       selector: '[expr0]',
	 *       redundantAttribute: 'expr0',
	 *       expressions: [
	 *         {
	 *           type: expressionTypes.TEXT,
	 *           childNodeIndex: 0,
	 *           evaluate(scope) {
	 *             return scope.time;
	 *           },
	 *         },
	 *       ],
	 *     },
	 *     {
	 *       selector: '[expr1]',
	 *       redundantAttribute: 'expr1',
	 *       expressions: [
	 *         {
	 *           type: expressionTypes.TEXT,
	 *           childNodeIndex: 0,
	 *           evaluate(scope) {
	 *             return scope.name;
	 *           },
	 *         },
	 *         {
	 *           type: 'attribute',
	 *           name: 'style',
	 *           evaluate(scope) {
	 *             return scope.style;
	 *           },
	 *         },
	 *       ],
	 *     },
	 *     {
	 *       selector: '[expr2]',
	 *       redundantAttribute: 'expr2',
	 *       type: bindingTypes.IF,
	 *       evaluate(scope) {
	 *         return scope.isVisible;
	 *       },
	 *       template: riotDOMBindings.template('hello there'),
	 *     },
	 *   ]
	 * )
	 */

	var DOMBindings = /*#__PURE__*/Object.freeze({
	  __proto__: null,
	  template: create$7,
	  createBinding: create$1,
	  createExpression: create$4,
	  bindingTypes: bindingTypes,
	  expressionTypes: expressionTypes
	});

	function noop() {
	  return this;
	}
	/**
	 * Autobind the methods of a source object to itself
	 * @param   {Object} source - probably a riot tag instance
	 * @param   {Array<string>} methods - list of the methods to autobind
	 * @returns {Object} the original object received
	 */

	function autobindMethods(source, methods) {
	  methods.forEach(method => {
	    source[method] = source[method].bind(source);
	  });
	  return source;
	}
	/**
	 * Call the first argument received only if it's a function otherwise return it as it is
	 * @param   {*} source - anything
	 * @returns {*} anything
	 */

	function callOrAssign(source) {
	  return isFunction(source) ? source.prototype && source.prototype.constructor ? new source() : source() : source;
	}

	/**
	 * Converts any DOM node/s to a loopable array
	 * @param   { HTMLElement|NodeList } els - single html element or a node list
	 * @returns { Array } always a loopable object
	 */
	function domToArray(els) {
	  // can this object be already looped?
	  if (!Array.isArray(els)) {
	    // is it a node list?
	    if (/^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(els)) && typeof els.length === 'number') return Array.from(els);else // if it's a single node
	      // it will be returned as "array" with one single entry
	      return [els];
	  } // this object could be looped out of the box


	  return els;
	}

	/**
	 * Simple helper to find DOM nodes returning them as array like loopable object
	 * @param   { string|DOMNodeList } selector - either the query or the DOM nodes to arraify
	 * @param   { HTMLElement }        ctx      - context defining where the query will search for the DOM nodes
	 * @returns { Array } DOM nodes found as array
	 */

	function $(selector, ctx) {
	  return domToArray(typeof selector === 'string' ? (ctx || document).querySelectorAll(selector) : selector);
	}

	/**
	 * Normalize the return values, in case of a single value we avoid to return an array
	 * @param   { Array } values - list of values we want to return
	 * @returns { Array|string|boolean } either the whole list of values or the single one found
	 * @private
	 */

	const normalize = values => values.length === 1 ? values[0] : values;
	/**
	 * Parse all the nodes received to get/remove/check their attributes
	 * @param   { HTMLElement|NodeList|Array } els    - DOM node/s to parse
	 * @param   { string|Array }               name   - name or list of attributes
	 * @param   { string }                     method - method that will be used to parse the attributes
	 * @returns { Array|string } result of the parsing in a list or a single value
	 * @private
	 */


	function parseNodes(els, name, method) {
	  const names = typeof name === 'string' ? [name] : name;
	  return normalize(domToArray(els).map(el => {
	    return normalize(names.map(n => el[method](n)));
	  }));
	}
	/**
	 * Set any attribute on a single or a list of DOM nodes
	 * @param   { HTMLElement|NodeList|Array } els   - DOM node/s to parse
	 * @param   { string|Object }              name  - either the name of the attribute to set
	 *                                                 or a list of properties as object key - value
	 * @param   { string }                     value - the new value of the attribute (optional)
	 * @returns { HTMLElement|NodeList|Array } the original array of elements passed to this function
	 *
	 * @example
	 *
	 * import { set } from 'bianco.attr'
	 *
	 * const img = document.createElement('img')
	 *
	 * set(img, 'width', 100)
	 *
	 * // or also
	 * set(img, {
	 *   width: 300,
	 *   height: 300
	 * })
	 *
	 */


	function set(els, name, value) {
	  const attrs = typeof name === 'object' ? name : {
	    [name]: value
	  };
	  const props = Object.keys(attrs);
	  domToArray(els).forEach(el => {
	    props.forEach(prop => el.setAttribute(prop, attrs[prop]));
	  });
	  return els;
	}
	/**
	 * Get any attribute from a single or a list of DOM nodes
	 * @param   { HTMLElement|NodeList|Array } els   - DOM node/s to parse
	 * @param   { string|Array }               name  - name or list of attributes to get
	 * @returns { Array|string } list of the attributes found
	 *
	 * @example
	 *
	 * import { get } from 'bianco.attr'
	 *
	 * const img = document.createElement('img')
	 *
	 * get(img, 'width') // => '200'
	 *
	 * // or also
	 * get(img, ['width', 'height']) // => ['200', '300']
	 *
	 * // or also
	 * get([img1, img2], ['width', 'height']) // => [['200', '300'], ['500', '200']]
	 */

	function get(els, name) {
	  return parseNodes(els, name, 'getAttribute');
	}

	const CSS_BY_NAME$1 = new Map();
	const STYLE_NODE_SELECTOR = 'style[riot]'; // memoized curried function

	const getStyleNode = (style => {
	  return () => {
	    // lazy evaluation:
	    // if this function was already called before
	    // we return its cached result
	    if (style) return style; // create a new style element or use an existing one
	    // and cache it internally

	    style = $(STYLE_NODE_SELECTOR)[0] || document.createElement('style');
	    set(style, 'type', 'text/css');
	    /* istanbul ignore next */

	    if (!style.parentNode) document.head.appendChild(style);
	    return style;
	  };
	})();
	/**
	 * Object that will be used to inject and manage the css of every tag instance
	 */


	var cssManager = {
	  CSS_BY_NAME: CSS_BY_NAME$1,

	  /**
	   * Save a tag style to be later injected into DOM
	   * @param { string } name - if it's passed we will map the css to a tagname
	   * @param { string } css - css string
	   * @returns {Object} self
	   */
	  add(name, css) {
	    if (!CSS_BY_NAME$1.has(name)) {
	      CSS_BY_NAME$1.set(name, css);
	      this.inject();
	    }

	    return this;
	  },

	  /**
	   * Inject all previously saved tag styles into DOM
	   * innerHTML seems slow: http://jsperf.com/riot-insert-style
	   * @returns {Object} self
	   */
	  inject() {
	    getStyleNode().innerHTML = [...CSS_BY_NAME$1.values()].join('\n');
	    return this;
	  },

	  /**
	   * Remove a tag style from the DOM
	   * @param {string} name a registered tagname
	   * @returns {Object} self
	   */
	  remove(name) {
	    if (CSS_BY_NAME$1.has(name)) {
	      CSS_BY_NAME$1.delete(name);
	      this.inject();
	    }

	    return this;
	  }

	};

	/**
	 * Function to curry any javascript method
	 * @param   {Function}  fn - the target function we want to curry
	 * @param   {...[args]} acc - initial arguments
	 * @returns {Function|*} it will return a function until the target function
	 *                       will receive all of its arguments
	 */
	function curry$2(fn) {
	  for (var _len = arguments.length, acc = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    acc[_key - 1] = arguments[_key];
	  }

	  return function () {
	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    args = [...acc, ...args];
	    return args.length < fn.length ? curry$2(fn, ...args) : fn(...args);
	  };
	}

	/**
	 * Get the tag name of any DOM node
	 * @param   {HTMLElement} element - DOM node we want to inspect
	 * @returns {string} name to identify this dom node in riot
	 */

	function getName(element) {
	  return get(element, IS_DIRECTIVE) || element.tagName.toLowerCase();
	}

	const COMPONENT_CORE_HELPERS = Object.freeze({
	  // component helpers
	  $(selector) {
	    return $(selector, this.root)[0];
	  },

	  $$(selector) {
	    return $(selector, this.root);
	  }

	});
	const PURE_COMPONENT_API = Object.freeze({
	  [MOUNT_METHOD_KEY]: noop,
	  [UPDATE_METHOD_KEY]: noop,
	  [UNMOUNT_METHOD_KEY]: noop
	});
	const COMPONENT_LIFECYCLE_METHODS = Object.freeze({
	  [SHOULD_UPDATE_KEY]: noop,
	  [ON_BEFORE_MOUNT_KEY]: noop,
	  [ON_MOUNTED_KEY]: noop,
	  [ON_BEFORE_UPDATE_KEY]: noop,
	  [ON_UPDATED_KEY]: noop,
	  [ON_BEFORE_UNMOUNT_KEY]: noop,
	  [ON_UNMOUNTED_KEY]: noop
	});
	const MOCKED_TEMPLATE_INTERFACE = Object.assign({}, PURE_COMPONENT_API, {
	  clone: noop,
	  createDOM: noop
	});
	/**
	 * Performance optimization for the recursive components
	 * @param  {RiotComponentWrapper} componentWrapper - riot compiler generated object
	 * @returns {Object} component like interface
	 */

	const memoizedCreateComponent = memoize(createComponent);
	/**
	 * Evaluate the component properties either from its real attributes or from its initial user properties
	 * @param   {HTMLElement} element - component root
	 * @param   {Object}  initialProps - initial props
	 * @returns {Object} component props key value pairs
	 */

	function evaluateInitialProps(element, initialProps) {
	  if (initialProps === void 0) {
	    initialProps = {};
	  }

	  return Object.assign({}, DOMattributesToObject(element), callOrAssign(initialProps));
	}
	/**
	 * Bind a DOM node to its component object
	 * @param   {HTMLElement} node - html node mounted
	 * @param   {Object} component - Riot.js component object
	 * @returns {Object} the component object received as second argument
	 */


	const bindDOMNodeToComponentObject = (node, component) => node[DOM_COMPONENT_INSTANCE_PROPERTY$1] = component;
	/**
	 * Wrap the Riot.js core API methods using a mapping function
	 * @param   {Function} mapFunction - lifting function
	 * @returns {Object} an object having the { mount, update, unmount } functions
	 */


	function createCoreAPIMethods(mapFunction) {
	  return [MOUNT_METHOD_KEY, UPDATE_METHOD_KEY, UNMOUNT_METHOD_KEY].reduce((acc, method) => {
	    acc[method] = mapFunction(method);
	    return acc;
	  }, {});
	}
	/**
	 * Factory function to create the component templates only once
	 * @param   {Function} template - component template creation function
	 * @param   {RiotComponentWrapper} componentWrapper - riot compiler generated object
	 * @returns {TemplateChunk} template chunk object
	 */


	function componentTemplateFactory(template, componentWrapper) {
	  const components = createSubcomponents(componentWrapper.exports ? componentWrapper.exports.components : {});
	  return template(create$7, expressionTypes, bindingTypes, name => {
	    // improve support for recursive components
	    if (name === componentWrapper.name) return memoizedCreateComponent(componentWrapper); // return the registered components

	    return components[name] || COMPONENTS_IMPLEMENTATION_MAP$1.get(name);
	  });
	}
	/**
	 * Create a pure component
	 * @param   {Function} pureFactoryFunction - pure component factory function
	 * @param   {Array} options.slots - component slots
	 * @param   {Array} options.attributes - component attributes
	 * @param   {Array} options.template - template factory function
	 * @param   {Array} options.template - template factory function
	 * @param   {any} options.props - initial component properties
	 * @returns {Object} pure component object
	 */


	function createPureComponent(pureFactoryFunction, _ref) {
	  let {
	    slots,
	    attributes,
	    props,
	    css,
	    template
	  } = _ref;
	  if (template) panic('Pure components can not have html');
	  if (css) panic('Pure components do not have css');
	  const component = defineDefaults(pureFactoryFunction({
	    slots,
	    attributes,
	    props
	  }), PURE_COMPONENT_API);
	  return createCoreAPIMethods(method => function () {
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    // intercept the mount calls to bind the DOM node to the pure object created
	    // see also https://github.com/riot/riot/issues/2806
	    if (method === MOUNT_METHOD_KEY) {
	      const [element] = args; // mark this node as pure element

	      defineProperty(element, IS_PURE_SYMBOL, true);
	      bindDOMNodeToComponentObject(element, component);
	    }

	    component[method](...args);
	    return component;
	  });
	}
	/**
	 * Create the component interface needed for the @riotjs/dom-bindings tag bindings
	 * @param   {RiotComponentWrapper} componentWrapper - riot compiler generated object
	 * @param   {string} componentWrapper.css - component css
	 * @param   {Function} componentWrapper.template - function that will return the dom-bindings template function
	 * @param   {Object} componentWrapper.exports - component interface
	 * @param   {string} componentWrapper.name - component name
	 * @returns {Object} component like interface
	 */


	function createComponent(componentWrapper) {
	  const {
	    css,
	    template,
	    exports,
	    name
	  } = componentWrapper;
	  const templateFn = template ? componentTemplateFactory(template, componentWrapper) : MOCKED_TEMPLATE_INTERFACE;
	  return _ref2 => {
	    let {
	      slots,
	      attributes,
	      props
	    } = _ref2;
	    // pure components rendering will be managed by the end user
	    if (exports && exports[IS_PURE_SYMBOL]) return createPureComponent(exports, {
	      slots,
	      attributes,
	      props,
	      css,
	      template
	    });
	    const componentAPI = callOrAssign(exports) || {};
	    const component = defineComponent({
	      css,
	      template: templateFn,
	      componentAPI,
	      name
	    })({
	      slots,
	      attributes,
	      props
	    }); // notice that for the components create via tag binding
	    // we need to invert the mount (state/parentScope) arguments
	    // the template bindings will only forward the parentScope updates
	    // and never deal with the component state

	    return {
	      mount(element, parentScope, state) {
	        return component.mount(element, state, parentScope);
	      },

	      update(parentScope, state) {
	        return component.update(state, parentScope);
	      },

	      unmount(preserveRoot) {
	        return component.unmount(preserveRoot);
	      }

	    };
	  };
	}
	/**
	 * Component definition function
	 * @param   {Object} implementation - the componen implementation will be generated via compiler
	 * @param   {Object} component - the component initial properties
	 * @returns {Object} a new component implementation object
	 */

	function defineComponent(_ref3) {
	  let {
	    css,
	    template,
	    componentAPI,
	    name
	  } = _ref3;
	  // add the component css into the DOM
	  if (css && name) cssManager.add(name, css);
	  return curry$2(enhanceComponentAPI)(defineProperties( // set the component defaults without overriding the original component API
	  defineDefaults(componentAPI, Object.assign({}, COMPONENT_LIFECYCLE_METHODS, {
	    [PROPS_KEY]: {},
	    [STATE_KEY]: {}
	  })), Object.assign({
	    // defined during the component creation
	    [SLOTS_KEY]: null,
	    [ROOT_KEY]: null
	  }, COMPONENT_CORE_HELPERS, {
	    name,
	    css,
	    template
	  })));
	}
	/**
	 * Create the bindings to update the component attributes
	 * @param   {HTMLElement} node - node where we will bind the expressions
	 * @param   {Array} attributes - list of attribute bindings
	 * @returns {TemplateChunk} - template bindings object
	 */

	function createAttributeBindings(node, attributes) {
	  if (attributes === void 0) {
	    attributes = [];
	  }

	  const expressions = attributes.map(a => create$4(node, a));
	  const binding = {};
	  return Object.assign(binding, Object.assign({
	    expressions
	  }, createCoreAPIMethods(method => scope => {
	    expressions.forEach(e => e[method](scope));
	    return binding;
	  })));
	}
	/**
	 * Create the subcomponents that can be included inside a tag in runtime
	 * @param   {Object} components - components imported in runtime
	 * @returns {Object} all the components transformed into Riot.Component factory functions
	 */


	function createSubcomponents(components) {
	  if (components === void 0) {
	    components = {};
	  }

	  return Object.entries(callOrAssign(components)).reduce((acc, _ref4) => {
	    let [key, value] = _ref4;
	    acc[camelToDashCase(key)] = createComponent(value);
	    return acc;
	  }, {});
	}
	/**
	 * Run the component instance through all the plugins set by the user
	 * @param   {Object} component - component instance
	 * @returns {Object} the component enhanced by the plugins
	 */


	function runPlugins(component) {
	  return [...PLUGINS_SET$1].reduce((c, fn) => fn(c) || c, component);
	}
	/**
	 * Compute the component current state merging it with its previous state
	 * @param   {Object} oldState - previous state object
	 * @param   {Object} newState - new state givent to the `update` call
	 * @returns {Object} new object state
	 */


	function computeState(oldState, newState) {
	  return Object.assign({}, oldState, callOrAssign(newState));
	}
	/**
	 * Add eventually the "is" attribute to link this DOM node to its css
	 * @param {HTMLElement} element - target root node
	 * @param {string} name - name of the component mounted
	 * @returns {undefined} it's a void function
	 */


	function addCssHook(element, name) {
	  if (getName(element) !== name) {
	    set(element, IS_DIRECTIVE, name);
	  }
	}
	/**
	 * Component creation factory function that will enhance the user provided API
	 * @param   {Object} component - a component implementation previously defined
	 * @param   {Array} options.slots - component slots generated via riot compiler
	 * @param   {Array} options.attributes - attribute expressions generated via riot compiler
	 * @returns {Riot.Component} a riot component instance
	 */


	function enhanceComponentAPI(component, _ref5) {
	  let {
	    slots,
	    attributes,
	    props
	  } = _ref5;
	  return autobindMethods(runPlugins(defineProperties(isObject(component) ? Object.create(component) : component, {
	    mount(element, state, parentScope) {
	      if (state === void 0) {
	        state = {};
	      }

	      // any element mounted passing through this function can't be a pure component
	      defineProperty(element, IS_PURE_SYMBOL, false);
	      this[PARENT_KEY_SYMBOL] = parentScope;
	      this[ATTRIBUTES_KEY_SYMBOL] = createAttributeBindings(element, attributes).mount(parentScope);
	      defineProperty(this, PROPS_KEY, Object.freeze(Object.assign({}, evaluateInitialProps(element, props), evaluateAttributeExpressions(this[ATTRIBUTES_KEY_SYMBOL].expressions))));
	      this[STATE_KEY] = computeState(this[STATE_KEY], state);
	      this[TEMPLATE_KEY_SYMBOL] = this.template.createDOM(element).clone(); // link this object to the DOM node

	      bindDOMNodeToComponentObject(element, this); // add eventually the 'is' attribute

	      component.name && addCssHook(element, component.name); // define the root element

	      defineProperty(this, ROOT_KEY, element); // define the slots array

	      defineProperty(this, SLOTS_KEY, slots); // before mount lifecycle event

	      this[ON_BEFORE_MOUNT_KEY](this[PROPS_KEY], this[STATE_KEY]); // mount the template

	      this[TEMPLATE_KEY_SYMBOL].mount(element, this, parentScope);
	      this[ON_MOUNTED_KEY](this[PROPS_KEY], this[STATE_KEY]);
	      return this;
	    },

	    update(state, parentScope) {
	      if (state === void 0) {
	        state = {};
	      }

	      if (parentScope) {
	        this[PARENT_KEY_SYMBOL] = parentScope;
	        this[ATTRIBUTES_KEY_SYMBOL].update(parentScope);
	      }

	      const newProps = evaluateAttributeExpressions(this[ATTRIBUTES_KEY_SYMBOL].expressions);
	      if (this[SHOULD_UPDATE_KEY](newProps, this[PROPS_KEY]) === false) return;
	      defineProperty(this, PROPS_KEY, Object.freeze(Object.assign({}, this[PROPS_KEY], newProps)));
	      this[STATE_KEY] = computeState(this[STATE_KEY], state);
	      this[ON_BEFORE_UPDATE_KEY](this[PROPS_KEY], this[STATE_KEY]); // avoiding recursive updates
	      // see also https://github.com/riot/riot/issues/2895

	      if (!this[IS_COMPONENT_UPDATING]) {
	        this[IS_COMPONENT_UPDATING] = true;
	        this[TEMPLATE_KEY_SYMBOL].update(this, this[PARENT_KEY_SYMBOL]);
	      }

	      this[ON_UPDATED_KEY](this[PROPS_KEY], this[STATE_KEY]);
	      this[IS_COMPONENT_UPDATING] = false;
	      return this;
	    },

	    unmount(preserveRoot) {
	      this[ON_BEFORE_UNMOUNT_KEY](this[PROPS_KEY], this[STATE_KEY]);
	      this[ATTRIBUTES_KEY_SYMBOL].unmount(); // if the preserveRoot is null the template html will be left untouched
	      // in that case the DOM cleanup will happen differently from a parent node

	      this[TEMPLATE_KEY_SYMBOL].unmount(this, this[PARENT_KEY_SYMBOL], preserveRoot === null ? null : !preserveRoot);
	      this[ON_UNMOUNTED_KEY](this[PROPS_KEY], this[STATE_KEY]);
	      return this;
	    }

	  })), Object.keys(component).filter(prop => isFunction(component[prop])));
	}
	/**
	 * Component initialization function starting from a DOM node
	 * @param   {HTMLElement} element - element to upgrade
	 * @param   {Object} initialProps - initial component properties
	 * @param   {string} componentName - component id
	 * @returns {Object} a new component instance bound to a DOM node
	 */

	function mountComponent(element, initialProps, componentName) {
	  const name = componentName || getName(element);
	  if (!COMPONENTS_IMPLEMENTATION_MAP$1.has(name)) panic(`The component named "${name}" was never registered`);
	  const component = COMPONENTS_IMPLEMENTATION_MAP$1.get(name)({
	    props: initialProps
	  });
	  return component.mount(element);
	}

	/**
	 * Similar to compose but performs from left-to-right function composition.<br/>
	 * {@link https://30secondsofcode.org/function#composeright see also}
	 * @param   {...[function]} fns) - list of unary function
	 * @returns {*} result of the computation
	 */
	/**
	 * Performs right-to-left function composition.<br/>
	 * Use Array.prototype.reduce() to perform right-to-left function composition.<br/>
	 * The last (rightmost) function can accept one or more arguments; the remaining functions must be unary.<br/>
	 * {@link https://30secondsofcode.org/function#compose original source code}
	 * @param   {...[function]} fns) - list of unary function
	 * @returns {*} result of the computation
	 */

	function compose() {
	  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    fns[_key2] = arguments[_key2];
	  }

	  return fns.reduce((f, g) => function () {
	    return f(g(...arguments));
	  });
	}

	const {
	  DOM_COMPONENT_INSTANCE_PROPERTY,
	  COMPONENTS_IMPLEMENTATION_MAP,
	  PLUGINS_SET
	} = globals;
	/**
	 * Riot public api
	 */

	/**
	 * Register a custom tag by name
	 * @param   {string} name - component name
	 * @param   {Object} implementation - tag implementation
	 * @returns {Map} map containing all the components implementations
	 */

	function register(name, _ref) {
	  let {
	    css,
	    template,
	    exports
	  } = _ref;
	  if (COMPONENTS_IMPLEMENTATION_MAP.has(name)) panic(`The component "${name}" was already registered`);
	  COMPONENTS_IMPLEMENTATION_MAP.set(name, createComponent({
	    name,
	    css,
	    template,
	    exports
	  }));
	  return COMPONENTS_IMPLEMENTATION_MAP;
	}
	/**
	 * Unregister a riot web component
	 * @param   {string} name - component name
	 * @returns {Map} map containing all the components implementations
	 */

	function unregister(name) {
	  if (!COMPONENTS_IMPLEMENTATION_MAP.has(name)) panic(`The component "${name}" was never registered`);
	  COMPONENTS_IMPLEMENTATION_MAP.delete(name);
	  cssManager.remove(name);
	  return COMPONENTS_IMPLEMENTATION_MAP;
	}
	/**
	 * Mounting function that will work only for the components that were globally registered
	 * @param   {string|HTMLElement} selector - query for the selection or a DOM element
	 * @param   {Object} initialProps - the initial component properties
	 * @param   {string} name - optional component name
	 * @returns {Array} list of riot components
	 */

	function mount(selector, initialProps, name) {
	  return $(selector).map(element => mountComponent(element, initialProps, name));
	}
	/**
	 * Sweet unmounting helper function for the DOM node mounted manually by the user
	 * @param   {string|HTMLElement} selector - query for the selection or a DOM element
	 * @param   {boolean|null} keepRootElement - if true keep the root element
	 * @returns {Array} list of nodes unmounted
	 */

	function unmount(selector, keepRootElement) {
	  return $(selector).map(element => {
	    if (element[DOM_COMPONENT_INSTANCE_PROPERTY]) {
	      element[DOM_COMPONENT_INSTANCE_PROPERTY].unmount(keepRootElement);
	    }

	    return element;
	  });
	}
	/**
	 * Define a riot plugin
	 * @param   {Function} plugin - function that will receive all the components created
	 * @returns {Set} the set containing all the plugins installed
	 */

	function install(plugin) {
	  if (!isFunction(plugin)) panic('Plugins must be of type function');
	  if (PLUGINS_SET.has(plugin)) panic('This plugin was already installed');
	  PLUGINS_SET.add(plugin);
	  return PLUGINS_SET;
	}
	/**
	 * Uninstall a riot plugin
	 * @param   {Function} plugin - plugin previously installed
	 * @returns {Set} the set containing all the plugins installed
	 */

	function uninstall(plugin) {
	  if (!PLUGINS_SET.has(plugin)) panic('This plugin was never installed');
	  PLUGINS_SET.delete(plugin);
	  return PLUGINS_SET;
	}
	/**
	 * Helper method to create component without relying on the registered ones
	 * @param   {Object} implementation - component implementation
	 * @returns {Function} function that will allow you to mount a riot component on a DOM node
	 */

	function component(implementation) {
	  return function (el, props, _temp) {
	    let {
	      slots,
	      attributes,
	      parentScope
	    } = _temp === void 0 ? {} : _temp;
	    return compose(c => c.mount(el, parentScope), c => c({
	      props,
	      slots,
	      attributes
	    }), createComponent)(implementation);
	  };
	}
	/**
	 * Lift a riot component Interface into a pure riot object
	 * @param   {Function} func - RiotPureComponent factory function
	 * @returns {Function} the lifted original function received as argument
	 */

	function pure(func) {
	  if (!isFunction(func)) panic('riot.pure accepts only arguments of type "function"');
	  func[IS_PURE_SYMBOL] = true;
	  return func;
	}
	/**
	 * no-op function needed to add the proper types to your component via typescript
	 * @param {Function|Object} component - component default export
	 * @returns {Function|Object} returns exactly what it has received
	 */

	const withTypes = component => component;
	/** @type {string} current riot version */

	const version = 'v6.0.4'; // expose some internal stuff that might be used from external tools

	const __ = {
	  cssManager,
	  DOMBindings,
	  createComponent,
	  defineComponent,
	  globals
	};

	var riot_esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		__: __,
		component: component,
		install: install,
		mount: mount,
		pure: pure,
		register: register,
		uninstall: uninstall,
		unmount: unmount,
		unregister: unregister,
		version: version,
		withTypes: withTypes
	});

	var require$$1 = /*@__PURE__*/getAugmentedNamespace(riot_esm);

	/**
	 * Function to curry any javascript method
	 * @param   {Function}  fn - the target function we want to curry
	 * @param   {...[args]} acc - initial arguments
	 * @returns {Function|*} it will return a function until the target function
	 *                       will receive all of its arguments
	 */
	function curry$1(fn, ...acc) {
	  return (...args) => {
	    args = [...acc, ...args];

	    return args.length < fn.length ?
	      curry$1(fn, ...args) :
	      fn(...args)
	  }
	}

	var index_next = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': curry$1
	});

	var require$$2 = /*@__PURE__*/getAugmentedNamespace(index_next);

	Object.defineProperty(ssr, '__esModule', { value: true });




	var linkedom = cjs$2;
	var riot = require$$1;
	var curry = require$$2;

	function _interopDefaultLegacy$1 (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var curry__default = /*#__PURE__*/_interopDefaultLegacy$1(curry);

	function create() {
	  // no need to recreate globals
	  if (commonjsGlobal.window && commonjsGlobal.document && commonjsGlobal.Node) {
	    return
	  }

	  const {
	    window,
	    document,
	    Node
	  } = linkedom.parseHTML('<!doctype html><html></html>');

	  commonjsGlobal.window = window;
	  commonjsGlobal.document = document;
	  commonjsGlobal.Node = Node;
	}

	function clear() {
	  if (!(commonjsGlobal.window && commonjsGlobal.document && commonjsGlobal.Node)) {
	    return
	  }

	  commonjsGlobal.window = undefined;
	  commonjsGlobal.document = undefined;
	  commonjsGlobal.Node = undefined;
	}

	var dom = /*#__PURE__*/Object.freeze({
	  __proto__: null,
	  create: create,
	  clear: clear
	});

	const {CSS_BY_NAME} = riot.__.cssManager;
	const DOCTYPE_DECLARATION = '<!doctype html>';
	const INPUT_ELEMENTS_SELECTOR = 'input,textarea,select,option';
	const INPUT_PASSWORD_TYPE = 'password';
	const ATTRIBUTE_TYPE_NAME = 'type';
	const VALUE_ATTRIBUTE = 'value';

	// check if a DOM node has the attribute type='password'
	const hasPasswordAttributeType = el => el.attributes.some(attr => attr.name === ATTRIBUTE_TYPE_NAME && attr.value === INPUT_PASSWORD_TYPE);
	// defer the some callbacks if the rendering is async
	const defer = callback => commonjsGlobal.window && commonjsGlobal.window.requestAnimationFrame ? commonjsGlobal.window.requestAnimationFrame(callback) : setTimeout(callback);
	// call the dispose method asynchronously for the async rendering
	const handleDisposeCallback = (isAsync, dispose) => isAsync ? defer(dispose) : dispose();

	/**
	 * Set the value attribute of all the inputs
	 * @param {HTMLElement} element - root node
	 * @return {HTMLElement[]} list of the matched input elements
	 */
	function setUserInputAttributes(element) {
	  return element.$$(INPUT_ELEMENTS_SELECTOR).map(el => {
	    const value = hasPasswordAttributeType(el) ? '' : el.value;
	    el.setAttribute(VALUE_ATTRIBUTE, value || '');

	    return el
	  })
	}

	/**
	 * Create the renderer function that can produce different types of output from the DOM rendered
	 * @param   {Function} renderer - rendering function
	 * @param   {string} tagName - tag name of the root node
	 * @param   {RiotComponentShell} componentAPI - component shell object
	 * @param   {Object} props - initial props
	 * @returns {*} output generated by the renderer function
	 */
	function createRenderer(
	  renderer,
	  tagName,
	  componentAPI,
	  props = {}
	) {
	  create();

	  const isRootNode = tagName === 'html';
	  const root = document.createElement(tagName);
	  const element = riot.component(componentAPI)(root, {
	    ...props,
	    isServer: true
	  });
	  const dispose = () => {
	    // unmount the component
	    element.unmount();
	    // remove the old stored css
	    CSS_BY_NAME.clear();
	    // clear global scope
	    clear();
	  };

	  //reflect input value prop to attribute
	  setUserInputAttributes(element);

	  return renderer({
	    // serialize the component outer html
	    getHTML: () => `${isRootNode ? DOCTYPE_DECLARATION : ''}${root.outerHTML}`,
	    dispose,
	    element,
	    // serialize all the generated css
	    css: [...CSS_BY_NAME.values()].join('\n')
	  })
	}

	/**
	 * Get only the html string from a renderer function
	 * @param   {Function} options.getHTML - function getting the component html
	 * @param   {Function} options.dispose - teardown function
	 * @param   {boolean} isAsync - true if the rendering was handled asynchronously
	 * @returns {string} component html
	 */
	const getOnlyHTMLFromRenderer = ({getHTML, dispose}, isAsync) => {
	  const html = getHTML();
	  handleDisposeCallback(isAsync, dispose);
	  return html
	};

	/**
	 * Get only the html string from a renderer function
	 * @param   {Function} options.getHTML - function getting the component html
	 * @param   {Function} options.dispose - teardown function
	 * @param   {string} options.css - component css
	 * @param   {boolean} isAsync - true if the rendering was handled asynchronously
	 * @returns {Object} {html, css} html and css of the rendered component
	 */
	const getFragmentsFromRenderer = ({getHTML, dispose, css}, isAsync) => {
	  const html = getHTML();
	  handleDisposeCallback(isAsync, dispose);
	  return {html, css}
	};

	/**
	 * Async component rendering implementation
	 * @param   {Function} renderer - rendering function
	 * @param   {Object} rendererPayload - renderer function payload argument
	 * @returns {Promise} value of the renderer function
	 */
	const renderComponentAsync = curry__default['default']((renderer, rendererPayload) => {
	  const {element} = rendererPayload;

	  if (!element.onAsyncRendering)
	    throw new Error('Please provide the onAsyncRendering callback to SSR asynchronously your components')

	  const promise = new Promise((resolve, reject) => {
	    const ret = element.onAsyncRendering(resolve, reject);

	    if (ret && ret.then) {
	      ret.then(resolve, reject);
	    }
	  });

	  return Promise.race([
	    promise.then(() => renderer(rendererPayload)),
	    new Promise((resolve, reject) => {
	      setTimeout(function() {
	        reject(new Error(`Timeout error:: the component "${element.name}" didn't resolve the "onAsyncRendering" promise during the rendering process`));
	      }, asyncRenderTimeout);
	    })
	  ])
	});

	const asyncRenderTimeout = 3000;
	const domGlobals = dom;
	const renderAsync = curry__default['default'](createRenderer)(
	  renderComponentAsync(rendererPayload => getOnlyHTMLFromRenderer(rendererPayload, true))
	);
	const renderAsyncFragments = curry__default['default'](createRenderer)(
	  renderComponentAsync(rendererPayload => getFragmentsFromRenderer(rendererPayload, true))
	);
	const fragments = curry__default['default'](createRenderer)(getFragmentsFromRenderer);
	const render = curry__default['default'](createRenderer)(getOnlyHTMLFromRenderer);

	ssr.asyncRenderTimeout = asyncRenderTimeout;
	ssr.createRenderer = createRenderer;
	var _default = ssr.default = render;
	ssr.domGlobals = domGlobals;
	ssr.fragments = fragments;
	ssr.render = render;
	ssr.renderAsync = renderAsync;
	ssr.renderAsyncFragments = renderAsyncFragments;

	var Component = {
	  'css': `component,[is="component"]{ color: var(--color, black); }`,

	  'exports': {
	    onMounted() {
	        this.root.style.setProperty("--color", "red");
	    }
	  },

	  'template': function(
	    template,
	    expressionTypes,
	    bindingTypes,
	    getComponent
	  ) {
	    return template(
	      '<span>Component</span>',
	      []
	    );
	  },

	  'name': 'component'
	};

	var Html = {
	  'css': null,

	  'exports': {
	    components: {
	        Component
	    }
	  },

	  'template': function(
	    template,
	    expressionTypes,
	    bindingTypes,
	    getComponent
	  ) {
	    return template(
	      '<head><title>Sample</title></head><body><component expr0="expr0"></component></body>',
	      [
	        {
	          'type': bindingTypes.TAG,
	          'getComponent': getComponent,

	          'evaluate': function(
	            _scope
	          ) {
	            return 'component';
	          },

	          'slots': [],
	          'attributes': [],
	          'redundantAttribute': 'expr0',
	          'selector': '[expr0]'
	        }
	      ]
	    );
	  },

	  'name': 'html'
	};

	console.log(_default("html", Html));

})));
